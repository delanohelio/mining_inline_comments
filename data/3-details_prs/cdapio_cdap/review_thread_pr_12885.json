{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDg5MDg4", "number": 12885, "reviewThreads": {"totalCount": 53, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1Nzo1MlrOFB9c7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoxODoyM1rOFEK4jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTk5NzI0OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1Nzo1MlrOIA4J3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDo1ODoyOVrOIA6aLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MDk0Mw==", "bodyText": "Remove extra new line", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537790943", "createdAt": "2020-12-07T19:57:52Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyNzg4Ng==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537827886", "createdAt": "2020-12-07T20:58:29Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MDk0Mw=="}, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTk5ODM2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1ODowOFrOIA4Klg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTowMDozMlrOIBxUag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MTEyNg==", "bodyText": "What is this?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537791126", "createdAt": "2020-12-07T19:58:08Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgyOTk1OQ==", "bodyText": "The previousHash will be used later on to detect collision in drafts. It represents the hashcode that was provided by the backend when the UI loaded this draft. When the UI makes a save request it will pass that hashcode and the backend can check against the current hash to see if the draft has been modified since the user loaded the draft.\nI added these fields now (even though their not needed yet) so we can avoid changing the table/object schema", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537829959", "createdAt": "2020-12-07T21:01:50Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MTEyNg=="}, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzNjIyNg==", "bodyText": "You probably want to add some javadoc to it.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537936226", "createdAt": "2020-12-08T00:22:45Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MTEyNg=="}, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcyNzUzMA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538727530", "createdAt": "2020-12-08T19:00:32Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MTEyNg=="}, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjAwMDU2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1ODo0M1rOIA4L9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowMjoxNlrOIA6jWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MTQ3Nw==", "bodyText": "Remove extra line", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537791477", "createdAt": "2020-12-07T19:58:43Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {\n+    return previousHash;\n+  }\n+\n+  public void clearConfig() {\n+    this.config = null;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    DraftRequest<T> that = (DraftRequest<T>) o;\n+    return Objects.equals(config, that.config) &&\n+      Objects.equals(previousHash, that.previousHash) &&\n+      Objects.equals(name, that.name) &&\n+      Objects.equals(artifact, that.artifact) &&\n+      revision == that.revision;\n+  }\n+\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(config, previousHash, revision, artifact, name, description);\n+  }\n+\n+  /**\n+   * Builder for creating DraftRequest\n+   *\n+   * @param <T> Type of pipeline for the DraftRequest being created\n+   */\n+  public static class Builder<T> {\n+    private String previousHash; // currently unused but will be used later to detect collision\n+    private String name;\n+    private String description;\n+    private int revision; // currently unused but will be used later to enable draft version tracking\n+    private ArtifactSummary artifact;\n+    private T config;\n+\n+    public Builder() {\n+      this.name = \"\";\n+      this.artifact = null;\n+      this.config = null;\n+      this.previousHash = \"\";\n+      this.revision = 0;\n+      this.description = \"\";\n+    }\n+\n+    private Builder(String previousHash, String name, String description, int revision,\n+                    ArtifactSummary artifact, T config) {\n+      this.previousHash = previousHash;\n+      this.name = name;\n+      this.description = description;\n+      this.revision = revision;\n+      this.artifact = artifact;\n+      this.config = config;\n+    }\n+\n+    public static <T> Builder<T> fromRequest(DraftRequest request) {\n+      return new Builder<T>(request.getPreviousHash(), request.getName(), request.getDescription(),\n+                            request.getRevision(), request.getArtifact(), null);\n+    }\n+\n+    public static <T> Builder<T> newBuilder() {\n+      return new Builder<>();\n+    }\n+\n+    public Builder<T> setPreviousHash(String previousHash) {\n+      this.previousHash = previousHash;\n+      return this;\n+    }\n+\n+    public Builder<T> setRevision(int revision) {\n+      this.revision = revision;\n+      return this;\n+    }\n+\n+    public Builder<T> setDescription(String description) {\n+      this.description = description;\n+      return this;\n+    }\n+\n+    public Builder<T> setName(String name) {\n+      this.name = name;\n+      return this;\n+    }\n+\n+    public Builder<T> setArtifact(ArtifactSummary artifact) {\n+      this.artifact = artifact;\n+      return this;\n+    }\n+\n+    public Builder<T> setConfig(T config) {\n+      this.config = config;\n+      return this;\n+    }\n+\n+    public DraftRequest<T> build() {\n+      return new DraftRequest<>(config, previousHash, name, description, revision, artifact);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMDIzNA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537830234", "createdAt": "2020-12-07T21:02:16Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {\n+    return previousHash;\n+  }\n+\n+  public void clearConfig() {\n+    this.config = null;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    DraftRequest<T> that = (DraftRequest<T>) o;\n+    return Objects.equals(config, that.config) &&\n+      Objects.equals(previousHash, that.previousHash) &&\n+      Objects.equals(name, that.name) &&\n+      Objects.equals(artifact, that.artifact) &&\n+      revision == that.revision;\n+  }\n+\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(config, previousHash, revision, artifact, name, description);\n+  }\n+\n+  /**\n+   * Builder for creating DraftRequest\n+   *\n+   * @param <T> Type of pipeline for the DraftRequest being created\n+   */\n+  public static class Builder<T> {\n+    private String previousHash; // currently unused but will be used later to detect collision\n+    private String name;\n+    private String description;\n+    private int revision; // currently unused but will be used later to enable draft version tracking\n+    private ArtifactSummary artifact;\n+    private T config;\n+\n+    public Builder() {\n+      this.name = \"\";\n+      this.artifact = null;\n+      this.config = null;\n+      this.previousHash = \"\";\n+      this.revision = 0;\n+      this.description = \"\";\n+    }\n+\n+    private Builder(String previousHash, String name, String description, int revision,\n+                    ArtifactSummary artifact, T config) {\n+      this.previousHash = previousHash;\n+      this.name = name;\n+      this.description = description;\n+      this.revision = revision;\n+      this.artifact = artifact;\n+      this.config = config;\n+    }\n+\n+    public static <T> Builder<T> fromRequest(DraftRequest request) {\n+      return new Builder<T>(request.getPreviousHash(), request.getName(), request.getDescription(),\n+                            request.getRevision(), request.getArtifact(), null);\n+    }\n+\n+    public static <T> Builder<T> newBuilder() {\n+      return new Builder<>();\n+    }\n+\n+    public Builder<T> setPreviousHash(String previousHash) {\n+      this.previousHash = previousHash;\n+      return this;\n+    }\n+\n+    public Builder<T> setRevision(int revision) {\n+      this.revision = revision;\n+      return this;\n+    }\n+\n+    public Builder<T> setDescription(String description) {\n+      this.description = description;\n+      return this;\n+    }\n+\n+    public Builder<T> setName(String name) {\n+      this.name = name;\n+      return this;\n+    }\n+\n+    public Builder<T> setArtifact(ArtifactSummary artifact) {\n+      this.artifact = artifact;\n+      return this;\n+    }\n+\n+    public Builder<T> setConfig(T config) {\n+      this.config = config;\n+      return this;\n+    }\n+\n+    public DraftRequest<T> build() {\n+      return new DraftRequest<>(config, previousHash, name, description, revision, artifact);\n+    }\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MTQ3Nw=="}, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjAwNjQzOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowMDoxMFrOIA4PcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowNDozNlrOIA6odw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MjM2OQ==", "bodyText": "Why need a builder? Is this class mainly for ser-de purpose?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537792369", "createdAt": "2020-12-07T20:00:10Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {\n+    return previousHash;\n+  }\n+\n+  public void clearConfig() {\n+    this.config = null;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    DraftRequest<T> that = (DraftRequest<T>) o;\n+    return Objects.equals(config, that.config) &&\n+      Objects.equals(previousHash, that.previousHash) &&\n+      Objects.equals(name, that.name) &&\n+      Objects.equals(artifact, that.artifact) &&\n+      revision == that.revision;\n+  }\n+\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(config, previousHash, revision, artifact, name, description);\n+  }\n+\n+  /**\n+   * Builder for creating DraftRequest\n+   *\n+   * @param <T> Type of pipeline for the DraftRequest being created\n+   */\n+  public static class Builder<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMTU0Mw==", "bodyText": "Yes, this is more convenient for the deserializer. It's not strictly required.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537831543", "createdAt": "2020-12-07T21:04:36Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash; // currently unused but will be used later to detect collision\n+  private final String name;\n+  private final String description;\n+  private final int revision; // currently unused but will be used later to enable draft version tracking\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,\n+                      ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public int getRevision() {\n+    return revision;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+\n+  public T getConfig() {\n+    return config;\n+  }\n+\n+  public String getPreviousHash() {\n+    return previousHash;\n+  }\n+\n+  public void clearConfig() {\n+    this.config = null;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    DraftRequest<T> that = (DraftRequest<T>) o;\n+    return Objects.equals(config, that.config) &&\n+      Objects.equals(previousHash, that.previousHash) &&\n+      Objects.equals(name, that.name) &&\n+      Objects.equals(artifact, that.artifact) &&\n+      revision == that.revision;\n+  }\n+\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(config, previousHash, revision, artifact, name, description);\n+  }\n+\n+  /**\n+   * Builder for creating DraftRequest\n+   *\n+   * @param <T> Type of pipeline for the DraftRequest being created\n+   */\n+  public static class Builder<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MjM2OQ=="}, "originalCommit": {"oid": "908e206a8af3ae6c23de7e3acf7ccc5f4e9933ce"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjAxNTYyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/Draft.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowMjoxOFrOIA4UyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowNDo1OVrOIA6pNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MzczNg==", "bodyText": "Remove extra line", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537793736", "createdAt": "2020-12-07T20:02:18Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/Draft.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A pipeline draft.\n+ */\n+public class Draft extends DraftRequest<ETLConfig> {\n+  private final String id;\n+  private final long createdTimeMillis;\n+  private final long updatedTimeMillis;\n+  private final int configHash;\n+\n+  private Draft(ETLConfig config, String previousHash, String name, String description, int revision,\n+                ArtifactSummary artifact, String id, long createdTimeMillis, long updatedTimeMillis) {\n+    super(config, previousHash, name, description, revision, artifact);\n+    this.id = id;\n+    this.createdTimeMillis = createdTimeMillis;\n+    this.updatedTimeMillis = updatedTimeMillis;\n+    this.configHash = config == null ? 0 : config.hashCode();\n+  }\n+\n+  // This should be the default constructor until previousHash and revision are needed\n+  public Draft(ETLConfig config, String name, String description, ArtifactSummary artifact, String id,\n+               long createdTimeMillis, long updatedTimeMillis) {\n+    this(config, \"\", name, description, 0, artifact, id, createdTimeMillis, updatedTimeMillis);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMTczMw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537831733", "createdAt": "2020-12-07T21:04:59Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/Draft.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A pipeline draft.\n+ */\n+public class Draft extends DraftRequest<ETLConfig> {\n+  private final String id;\n+  private final long createdTimeMillis;\n+  private final long updatedTimeMillis;\n+  private final int configHash;\n+\n+  private Draft(ETLConfig config, String previousHash, String name, String description, int revision,\n+                ArtifactSummary artifact, String id, long createdTimeMillis, long updatedTimeMillis) {\n+    super(config, previousHash, name, description, revision, artifact);\n+    this.id = id;\n+    this.createdTimeMillis = createdTimeMillis;\n+    this.updatedTimeMillis = updatedTimeMillis;\n+    this.configHash = config == null ? 0 : config.hashCode();\n+  }\n+\n+  // This should be the default constructor until previousHash and revision are needed\n+  public Draft(ETLConfig config, String name, String description, ArtifactSummary artifact, String id,\n+               long createdTimeMillis, long updatedTimeMillis) {\n+    this(config, \"\", name, description, 0, artifact, id, createdTimeMillis, updatedTimeMillis);\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5MzczNg=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjAyMjcwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowNDowOVrOIA4Y_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMDoxOFrOIA61-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NDgxNQ==", "bodyText": "Don't use printStacktrace. Use a logger.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537794815", "createdAt": "2020-12-07T20:04:09Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNTAwMA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537835000", "createdAt": "2020-12-07T21:10:18Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NDgxNQ=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjAzNTgyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowNzoyM1rOIA4ghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMzozOVrOIA69pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5Njc0MQ==", "bodyText": "Can filter be null? If so, annotate the parameter with @Nullable", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537796741", "createdAt": "2020-12-07T20:07:23Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjk2Ng==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537836966", "createdAt": "2020-12-07T21:13:39Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5Njc0MQ=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjA0NjI0OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowOTozM1rOIA4l_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMDo1M1rOIA63Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5ODE0MQ==", "bodyText": "Use return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537798141", "createdAt": "2020-12-07T20:09:33Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws TransactionException, DraftNotFoundException {\n+    Optional<Draft> draft = store.getDraft(draftId);\n+    if (!draft.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNTMxOA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537835318", "createdAt": "2020-12-07T21:10:53Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws TransactionException, DraftNotFoundException {\n+    Optional<Draft> draft = store.getDraft(draftId);\n+    if (!draft.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5ODE0MQ=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjA1MDU4OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoxMDozOVrOIA4omA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMDo1OFrOIA63XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5ODgwOA==", "bodyText": "remove this.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537798808", "createdAt": "2020-12-07T20:10:39Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws TransactionException, DraftNotFoundException {\n+    Optional<Draft> draft = store.getDraft(draftId);\n+    if (!draft.isPresent()) {\n+      throw new DraftNotFoundException(draftId);\n+    }\n+    return draft.get();\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftRequest {@link DraftRequest} that contains the rest of the draft data\n+   * @throws TransactionException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftRequest<T> draftRequest) throws TransactionException {\n+    //TODO add collision detection using the hashes\n+    store.writeDraft(draftId, draftRequest);\n+    this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNTM1Nw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537835357", "createdAt": "2020-12-07T21:10:58Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      return;\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      e.printStackTrace();\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws TransactionException, DraftNotFoundException {\n+    Optional<Draft> draft = store.getDraft(draftId);\n+    if (!draft.isPresent()) {\n+      throw new DraftNotFoundException(draftId);\n+    }\n+    return draft.get();\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftRequest {@link DraftRequest} that contains the rest of the draft data\n+   * @throws TransactionException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftRequest<T> draftRequest) throws TransactionException {\n+    //TODO add collision detection using the hashes\n+    store.writeDraft(draftId, draftRequest);\n+    this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5ODgwOA=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjA1MTkyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoxMTowM1rOIA4pcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMToxMjozM1rOIA67cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5OTAyNg==", "bodyText": "Are all these constants need to be public?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537799026", "createdAt": "2020-12-07T20:11:03Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNjQwMQ==", "bodyText": "No, just the tableID, made the rest private", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537836401", "createdAt": "2020-12-07T21:12:33Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5OTAyNg=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjEwODQzOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoyNDoxN1rOIA5Jug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0MjowM1rOIBwV2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNzI5MA==", "bodyText": "Instead of doing left right like this, you can based on the fieldType to use different comparator and delegate to it. Check out static method on the Comparator.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537807290", "createdAt": "2020-12-07T20:24:17Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  public static final String NAMESPACE_COL = \"namespace\";\n+  public static final String GENERATION_COL = \"generation\";\n+  public static final String OWNER_COL = \"owner\";\n+  public static final String ID_COL = \"id\";\n+  public static final String ARTIFACT_COL = \"artifact\";\n+  public static final String NAME_COL = \"name\";\n+  public static final String DESCRIPTION_COL = \"description\";\n+  public static final String CREATED_COL = \"createdTimeMillis\";\n+  public static final String UPDATED_COL = \"updatedTimeMillis\";\n+  public static final String PIPELINE_COL = \"pipeline\";\n+  public static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TransactionException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      results.set(temp);\n+    });\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      int result = 0;\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+\n+      Object left = null;\n+      Object right = null;\n+      switch (fieldType) {\n+        case STRING:\n+          left = o1.getString(sortField);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMTUxNQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538711515", "createdAt": "2020-12-08T18:42:03Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  public static final String NAMESPACE_COL = \"namespace\";\n+  public static final String GENERATION_COL = \"generation\";\n+  public static final String OWNER_COL = \"owner\";\n+  public static final String ID_COL = \"id\";\n+  public static final String ARTIFACT_COL = \"artifact\";\n+  public static final String NAME_COL = \"name\";\n+  public static final String DESCRIPTION_COL = \"description\";\n+  public static final String CREATED_COL = \"createdTimeMillis\";\n+  public static final String UPDATED_COL = \"updatedTimeMillis\";\n+  public static final String PIPELINE_COL = \"pipeline\";\n+  public static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TransactionException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      results.set(temp);\n+    });\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      int result = 0;\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+\n+      Object left = null;\n+      Object right = null;\n+      switch (fieldType) {\n+        case STRING:\n+          left = o1.getString(sortField);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwNzI5MA=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjExNzIxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDoyNjoxOFrOIA5Oiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODoyOTo0M1rOIBvkzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwODUyMw==", "bodyText": "throwing the TransactionException is not a very good contract. You should catch the TransactionException and extract the cause from it and throw that one out.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r537808523", "createdAt": "2020-12-07T20:26:18Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  public static final String NAMESPACE_COL = \"namespace\";\n+  public static final String GENERATION_COL = \"generation\";\n+  public static final String OWNER_COL = \"owner\";\n+  public static final String ID_COL = \"id\";\n+  public static final String ARTIFACT_COL = \"artifact\";\n+  public static final String NAME_COL = \"name\";\n+  public static final String DESCRIPTION_COL = \"description\";\n+  public static final String CREATED_COL = \"createdTimeMillis\";\n+  public static final String UPDATED_COL = \"updatedTimeMillis\";\n+  public static final String PIPELINE_COL = \"pipeline\";\n+  public static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TransactionException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      results.set(temp);\n+    });\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      int result = 0;\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+\n+      Object left = null;\n+      Object right = null;\n+      switch (fieldType) {\n+        case STRING:\n+          left = o1.getString(sortField);\n+          right = o2.getString(sortField);\n+          break;\n+        case INTEGER:\n+          left = o1.getInteger(sortField);\n+          right = o2.getInteger(sortField);\n+          break;\n+        case LONG:\n+          left = o1.getLong(sortField);\n+          right = o2.getLong(sortField);\n+          break;\n+        case FLOAT:\n+          left = o1.getFloat(sortField);\n+          right = o2.getFloat(sortField);\n+          break;\n+        case DOUBLE:\n+          left = o1.getDouble(sortField);\n+          right = o2.getDouble(sortField);\n+          break;\n+        case BYTES:\n+          throw new IllegalArgumentException(\"Cannot sort field '%s' because it is of type BYTES.\");\n+      }\n+      if (left == null && right == null) {\n+        return 0;\n+      }\n+      if (left == null || right == null) {\n+        result = left == null ? -1 : 1;\n+      } else {\n+        result = ((Comparable<Object>) left).compareTo(right);\n+      }\n+\n+      if (sortRequest.getOrder() == SortRequest.SortOrder.ASC) {\n+        return result;\n+      }\n+      return -1 * result;\n+    });\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws TransactionException {\n+    AtomicReference<Optional<Draft>> result = new AtomicReference<>();\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Optional<StructuredRow> row = table.read(getKey(id));\n+      result.set(row.map(this::fromRow));\n+    });\n+    return result.get();\n+  }\n+\n+  /**\n+   * Delete the given draft. This is a no-op if the draft does not exist\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   */\n+  public void deleteDraft(DraftId id) throws TransactionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODY5ODk1OA==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538698958", "createdAt": "2020-12-08T18:29:43Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  public static final String NAMESPACE_COL = \"namespace\";\n+  public static final String GENERATION_COL = \"generation\";\n+  public static final String OWNER_COL = \"owner\";\n+  public static final String ID_COL = \"id\";\n+  public static final String ARTIFACT_COL = \"artifact\";\n+  public static final String NAME_COL = \"name\";\n+  public static final String DESCRIPTION_COL = \"description\";\n+  public static final String CREATED_COL = \"createdTimeMillis\";\n+  public static final String UPDATED_COL = \"updatedTimeMillis\";\n+  public static final String PIPELINE_COL = \"pipeline\";\n+  public static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TransactionException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      results.set(temp);\n+    });\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      int result = 0;\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+\n+      Object left = null;\n+      Object right = null;\n+      switch (fieldType) {\n+        case STRING:\n+          left = o1.getString(sortField);\n+          right = o2.getString(sortField);\n+          break;\n+        case INTEGER:\n+          left = o1.getInteger(sortField);\n+          right = o2.getInteger(sortField);\n+          break;\n+        case LONG:\n+          left = o1.getLong(sortField);\n+          right = o2.getLong(sortField);\n+          break;\n+        case FLOAT:\n+          left = o1.getFloat(sortField);\n+          right = o2.getFloat(sortField);\n+          break;\n+        case DOUBLE:\n+          left = o1.getDouble(sortField);\n+          right = o2.getDouble(sortField);\n+          break;\n+        case BYTES:\n+          throw new IllegalArgumentException(\"Cannot sort field '%s' because it is of type BYTES.\");\n+      }\n+      if (left == null && right == null) {\n+        return 0;\n+      }\n+      if (left == null || right == null) {\n+        result = left == null ? -1 : 1;\n+      } else {\n+        result = ((Comparable<Object>) left).compareTo(right);\n+      }\n+\n+      if (sortRequest.getOrder() == SortRequest.SortOrder.ASC) {\n+        return result;\n+      }\n+      return -1 * result;\n+    });\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws TransactionException {\n+    AtomicReference<Optional<Draft>> result = new AtomicReference<>();\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Optional<StructuredRow> row = table.read(getKey(id));\n+      result.set(row.map(this::fromRow));\n+    });\n+    return result.get();\n+  }\n+\n+  /**\n+   * Delete the given draft. This is a no-op if the draft does not exist\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   */\n+  public void deleteDraft(DraftId id) throws TransactionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgwODUyMw=="}, "originalCommit": {"oid": "5b661dafa26c4c029dd61975cfca3784ab60ee45"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAzMjE5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0Mzo0N1rOIBwakg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNTowM1rOIBytzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMjcyMg==", "bodyText": "Util class should be final and has a private default constructor.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538712722", "createdAt": "2020-12-08T18:43:47Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+/**\n+ * Helper functions for handlers/services in {@link io.cdap.cdap.datapipeline.service.StudioService}\n+ */\n+public class StudioUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MDQxNQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538750415", "createdAt": "2020-12-08T19:35:03Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+/**\n+ * Helper functions for handlers/services in {@link io.cdap.cdap.datapipeline.service.StudioService}\n+ */\n+public class StudioUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMjcyMg=="}, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjAzODQ1OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0NDo1OVrOIBweFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTozNTozNVrOIByvAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMzYyMw==", "bodyText": "Mark the parameter with @Nullable if it can be null.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538713623", "createdAt": "2020-12-08T18:44:59Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+/**\n+ * Helper functions for handlers/services in {@link io.cdap.cdap.datapipeline.service.StudioService}\n+ */\n+public class StudioUtil {\n+  public static final String ARTIFACT_BATCH_NAME = \"cdap-data-pipeline\";\n+  public static final String ARTIFACT_STREAMING_NAME = \"cdap-data-streams\";\n+\n+  public static boolean isBatchPipeline(ArtifactSummary artifactSummary) {\n+    if (artifactSummary == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1MDcyMQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538750721", "createdAt": "2020-12-08T19:35:35Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+/**\n+ * Helper functions for handlers/services in {@link io.cdap.cdap.datapipeline.service.StudioService}\n+ */\n+public class StudioUtil {\n+  public static final String ARTIFACT_BATCH_NAME = \"cdap-data-pipeline\";\n+  public static final String ARTIFACT_STREAMING_NAME = \"cdap-data-streams\";\n+\n+  public static boolean isBatchPipeline(ArtifactSummary artifactSummary) {\n+    if (artifactSummary == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxMzYyMw=="}, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjA0ODMzOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxODo0NzowNFrOIBwj9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0MToyN1rOIBy9cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxNTEyNQ==", "bodyText": "Shouldn't have this. The DraftHandler created in the configure method should have a default constructor that doesn't does the metrics object. The Metrics field in the DraftHandler will get injected at run time.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538715125", "createdAt": "2020-12-08T18:47:04Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioService.java", "diffHunk": "@@ -17,18 +17,27 @@\n \n package io.cdap.cdap.datapipeline.service;\n \n+import io.cdap.cdap.api.metrics.Metrics;\n import io.cdap.cdap.api.service.AbstractSystemService;\n+import io.cdap.cdap.datapipeline.draft.DraftStore;\n \n /**\n  * Service that handles pipeline studio operations, like validation and schema propagation.\n  */\n public class StudioService extends AbstractSystemService {\n   public static final String NAME = \"studio\";\n \n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics serviceMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NDQxOQ==", "bodyText": "Ah didnt know the injection also works for handlers, removed this from the service", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538754419", "createdAt": "2020-12-08T19:41:27Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioService.java", "diffHunk": "@@ -17,18 +17,27 @@\n \n package io.cdap.cdap.datapipeline.service;\n \n+import io.cdap.cdap.api.metrics.Metrics;\n import io.cdap.cdap.api.service.AbstractSystemService;\n+import io.cdap.cdap.datapipeline.draft.DraftStore;\n \n /**\n  * Service that handles pipeline studio operations, like validation and schema propagation.\n  */\n public class StudioService extends AbstractSystemService {\n   public static final String NAME = \"studio\";\n \n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics serviceMetrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODcxNTEyNQ=="}, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjE3MTA0OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTowOTo0MFrOIBxtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0MzozMVrOIBzCmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMzkxMA==", "bodyText": "Why not move it to the respond method to handle as well?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538733910", "createdAt": "2020-12-08T19:09:40Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftRequest;\n+import io.cdap.cdap.datapipeline.draft.DraftRequestDeserializer;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(DraftRequest.class, new DraftRequestDeserializer())\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  private final Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  public DraftHandler(Metrics metrics) {\n+    this.metrics = metrics;\n+  }\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftRequest<ETLConfig> draftRequest;\n+      try {\n+        draftRequest = GSON\n+          .fromJson(StandardCharsets.UTF_8.decode(request.getContent()).toString(), DraftRequest.class);\n+      } catch (JsonSyntaxException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NTczNw==", "bodyText": "This draftRequest object is only needed for the putDraft endpoint, adding this to the respond would mean that it would try to parse this for every endpoint right?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538755737", "createdAt": "2020-12-08T19:43:31Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,191 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftRequest;\n+import io.cdap.cdap.datapipeline.draft.DraftRequestDeserializer;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(DraftRequest.class, new DraftRequestDeserializer())\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  private final Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  public DraftHandler(Metrics metrics) {\n+    this.metrics = metrics;\n+  }\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftRequest<ETLConfig> draftRequest;\n+      try {\n+        draftRequest = GSON\n+          .fromJson(StandardCharsets.UTF_8.decode(request.getContent()).toString(), DraftRequest.class);\n+      } catch (JsonSyntaxException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczMzkxMA=="}, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjE3NjEwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/SortRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToxMDo1NVrOIBxwXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0Mzo0OVrOIBzDNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNDY4Ng==", "bodyText": "Remove extra new lines", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538734686", "createdAt": "2020-12-08T19:10:55Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/SortRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Class to hold information for a sorting request in a list API\n+ */\n+public class SortRequest {\n+  private final String fieldName;\n+  private final SortOrder order;\n+\n+  public SortRequest(String fieldName, String sortOrder) {\n+    this.fieldName = fieldName;\n+    try {\n+      this.order = SortOrder.valueOf(sortOrder.toUpperCase());\n+    } catch (Exception e) {\n+      throw new IllegalArgumentException(String.format(\"Sort order '%s' is not valid. Valid options are %s\", sortOrder,\n+                                                       Arrays.toString(SortOrder.values())));\n+    }\n+  }\n+\n+  public String getFieldName() {\n+    return fieldName;\n+  }\n+\n+  public SortOrder getOrder() {\n+    return order;\n+  }\n+\n+  enum SortOrder {\n+    ASC,\n+    DESC\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NTg5Mw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538755893", "createdAt": "2020-12-08T19:43:49Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/SortRequest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Class to hold information for a sorting request in a list API\n+ */\n+public class SortRequest {\n+  private final String fieldName;\n+  private final SortOrder order;\n+\n+  public SortRequest(String fieldName, String sortOrder) {\n+    this.fieldName = fieldName;\n+    try {\n+      this.order = SortOrder.valueOf(sortOrder.toUpperCase());\n+    } catch (Exception e) {\n+      throw new IllegalArgumentException(String.format(\"Sort order '%s' is not valid. Valid options are %s\", sortOrder,\n+                                                       Arrays.toString(SortOrder.values())));\n+    }\n+  }\n+\n+  public String getFieldName() {\n+    return fieldName;\n+  }\n+\n+  public SortOrder getOrder() {\n+    return order;\n+  }\n+\n+  enum SortOrder {\n+    ASC,\n+    DESC\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNDY4Ng=="}, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjE4NDI2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToxMjozNlrOIBx05g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0NDo0M1rOIBzFmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNTg0Ng==", "bodyText": "Is this correct?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538735846", "createdAt": "2020-12-08T19:12:36Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TransactionException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      results.set(temp);\n+    });\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      int result = 0;\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+\n+      Object left = null;\n+      Object right = null;\n+      switch (fieldType) {\n+        case STRING:\n+          left = o1.getString(sortField);\n+          right = o2.getString(sortField);\n+          break;\n+        case INTEGER:\n+          left = o1.getInteger(sortField);\n+          right = o2.getInteger(sortField);\n+          break;\n+        case LONG:\n+          left = o1.getLong(sortField);\n+          right = o2.getLong(sortField);\n+          break;\n+        case FLOAT:\n+          left = o1.getFloat(sortField);\n+          right = o2.getFloat(sortField);\n+          break;\n+        case DOUBLE:\n+          left = o1.getDouble(sortField);\n+          right = o2.getDouble(sortField);\n+          break;\n+        case BYTES:\n+          throw new IllegalArgumentException(\"Cannot sort field '%s' because it is of type BYTES.\");\n+      }\n+      if (left == null && right == null) {\n+        return 0;\n+      }\n+      if (left == null || right == null) {\n+        result = left == null ? -1 : 1;\n+      } else {\n+        result = ((Comparable<Object>) left).compareTo(right);\n+      }\n+\n+      if (sortRequest.getOrder() == SortRequest.SortOrder.ASC) {\n+        return result;\n+      }\n+      return -1 * result;\n+    });\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws TransactionException {\n+    AtomicReference<Optional<Draft>> result = new AtomicReference<>();\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Optional<StructuredRow> row = table.read(getKey(id));\n+      result.set(row.map(this::fromRow));\n+    });\n+    return result.get();\n+  }\n+\n+  /**\n+   * Delete the given draft. This is a no-op if the draft does not exist\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   */\n+  public void deleteDraft(DraftId id) throws TransactionException {\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      table.delete(getKey(id));\n+    });\n+  }\n+\n+  /**\n+   * Create/update the given draft\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @param request {@link DraftRequest} that contains the rest of the draft data\n+   * @throws TransactionException\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId id, DraftRequest<T> request) throws TransactionException {\n+    Optional<Draft> existing = getDraft(id);\n+    long now = System.currentTimeMillis();\n+    long createTime = existing.map(Draft::getCreatedTimeMillis).orElse(now);\n+\n+    Draft draft = new Draft(request.getConfig(), request.getName(), request.getDescription(), request.getArtifact(),\n+                            id.getId(), createTime, now);\n+    transactionRunner.run(context -> {\n+//      StructuredTable table = context.getTable(TABLE_ID);\n+            StructuredTable table = context.getTable(new StructuredTableId(\"TESTST\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NjUwNQ==", "bodyText": "Whoops, that was just for testing. Shouldnt have committed that.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538756505", "createdAt": "2020-12-08T19:44:43Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TransactionException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      results.set(temp);\n+    });\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      int result = 0;\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+\n+      Object left = null;\n+      Object right = null;\n+      switch (fieldType) {\n+        case STRING:\n+          left = o1.getString(sortField);\n+          right = o2.getString(sortField);\n+          break;\n+        case INTEGER:\n+          left = o1.getInteger(sortField);\n+          right = o2.getInteger(sortField);\n+          break;\n+        case LONG:\n+          left = o1.getLong(sortField);\n+          right = o2.getLong(sortField);\n+          break;\n+        case FLOAT:\n+          left = o1.getFloat(sortField);\n+          right = o2.getFloat(sortField);\n+          break;\n+        case DOUBLE:\n+          left = o1.getDouble(sortField);\n+          right = o2.getDouble(sortField);\n+          break;\n+        case BYTES:\n+          throw new IllegalArgumentException(\"Cannot sort field '%s' because it is of type BYTES.\");\n+      }\n+      if (left == null && right == null) {\n+        return 0;\n+      }\n+      if (left == null || right == null) {\n+        result = left == null ? -1 : 1;\n+      } else {\n+        result = ((Comparable<Object>) left).compareTo(right);\n+      }\n+\n+      if (sortRequest.getOrder() == SortRequest.SortOrder.ASC) {\n+        return result;\n+      }\n+      return -1 * result;\n+    });\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws TransactionException {\n+    AtomicReference<Optional<Draft>> result = new AtomicReference<>();\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Optional<StructuredRow> row = table.read(getKey(id));\n+      result.set(row.map(this::fromRow));\n+    });\n+    return result.get();\n+  }\n+\n+  /**\n+   * Delete the given draft. This is a no-op if the draft does not exist\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   */\n+  public void deleteDraft(DraftId id) throws TransactionException {\n+    transactionRunner.run(context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      table.delete(getKey(id));\n+    });\n+  }\n+\n+  /**\n+   * Create/update the given draft\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @param request {@link DraftRequest} that contains the rest of the draft data\n+   * @throws TransactionException\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId id, DraftRequest<T> request) throws TransactionException {\n+    Optional<Draft> existing = getDraft(id);\n+    long now = System.currentTimeMillis();\n+    long createTime = existing.map(Draft::getCreatedTimeMillis).orElse(now);\n+\n+    Draft draft = new Draft(request.getConfig(), request.getName(), request.getDescription(), request.getArtifact(),\n+                            id.getId(), createTime, now);\n+    transactionRunner.run(context -> {\n+//      StructuredTable table = context.getTable(TABLE_ID);\n+            StructuredTable table = context.getTable(new StructuredTableId(\"TESTST\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNTg0Ng=="}, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjE5Nzc1OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOToxNTo0NFrOIBx8yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0NTowM1rOIBzGZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNzg2NA==", "bodyText": "So, just log without failing? Is this the expected behavior?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538737864", "createdAt": "2020-12-08T19:15:44Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      LOG.warn(\"Failed to write {} metric on DraftService startup due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws TransactionException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftRequest {@link DraftRequest} that contains the rest of the draft data\n+   * @throws TransactionException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftRequest<T> draftRequest) throws TransactionException {\n+    //TODO add collision detection using the hashes\n+    try {\n+      store.writeDraft(draftId, draftRequest);\n+    } catch (TransactionException e) {\n+      LOG.warn(\"Failed to write {} metric on writeDraft request due to: {}\", Constants.Metrics.DRAFT_COUNT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NjcwOQ==", "bodyText": "Also a side effect of testing, this has been fixed", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538756709", "createdAt": "2020-12-08T19:45:03Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (TransactionException e) {\n+      LOG.warn(\"Failed to write {} metric on DraftService startup due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) throws TransactionException {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts.forEach(DraftRequest::clearConfig);\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws TransactionException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws TransactionException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftRequest {@link DraftRequest} that contains the rest of the draft data\n+   * @throws TransactionException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftRequest<T> draftRequest) throws TransactionException {\n+    //TODO add collision detection using the hashes\n+    try {\n+      store.writeDraft(draftId, draftRequest);\n+    } catch (TransactionException e) {\n+      LOG.warn(\"Failed to write {} metric on writeDraft request due to: {}\", Constants.Metrics.DRAFT_COUNT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODczNzg2NA=="}, "originalCommit": {"oid": "5e89b03edebc7e1a961d16ea136601dea42506d0"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg0MzE0OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1MTowMlrOIB3ztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozMjoxM1rOIB7MlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzMzg0NA==", "bodyText": "final", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538833844", "createdAt": "2020-12-08T21:51:02Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash;\n+  private final String name;\n+  private final String description;\n+  private final int revision;\n+  private final ArtifactSummary artifact;\n+  private T config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4OTM2NA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538889364", "createdAt": "2020-12-08T23:32:13Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash;\n+  private final String name;\n+  private final String description;\n+  private final int revision;\n+  private final ArtifactSummary artifact;\n+  private T config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzMzg0NA=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg0OTkzOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1MjozOVrOIB33gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozMjozNVrOIB7NOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNDgxOA==", "bodyText": "If you provide a Builder, the constructor should be private.\nAlso, from the builder implementation, both the config and the artifact can be null. Is it intended? If so, please annotate them as @Nullable. If not, please check and throw exception in the Builder.build method.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538834818", "createdAt": "2020-12-08T21:52:39Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash;\n+  private final String name;\n+  private final String description;\n+  private final int revision;\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg4OTUzMA==", "bodyText": "Removed the builder and make the constructor public", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538889530", "createdAt": "2020-12-08T23:32:35Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {\n+  private final String previousHash;\n+  private final String name;\n+  private final String description;\n+  private final int revision;\n+  private final ArtifactSummary artifact;\n+  private T config;\n+\n+  public DraftRequest(T config, String previousHash, String name, String description, int revision,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNDgxOA=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg1MzI2OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequestDeserializer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1MzozNVrOIB35cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTozODoxMFrOICmDrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNTMxMw==", "bodyText": "Shouldn't new a Gson inside a deserializer. Use context.deserialize instead.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538835313", "createdAt": "2020-12-08T21:53:35Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequestDeserializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * GSON deserializer to correctly deserialize the config field in {@link DraftRequest}\n+ */\n+public class DraftRequestDeserializer implements JsonDeserializer<DraftRequest<ETLConfig>> {\n+\n+  @Override\n+  public DraftRequest<ETLConfig> deserialize(JsonElement jsonElement, Type type,\n+                                             JsonDeserializationContext context) throws JsonParseException {\n+\n+    // Deserialize this normally to get all the other field values\n+    Gson gson = new GsonBuilder().create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MTE2NQ==", "bodyText": "I initially had it like that but I ran into an infinite loop since this class is registered as a deserializer in the context. So calling context.deserialize for the DraftRequest class would just call this method again over and over. So I changed it to create a new Gson object which isnt ideal...\nThe alternative is to manually extract each field and construct the DraftRequest object but that means this deserializer will have to be updated any time a field is added/removed/renamed in the DraftRequest class. Is this the better option?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538891165", "createdAt": "2020-12-08T23:36:32Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequestDeserializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * GSON deserializer to correctly deserialize the config field in {@link DraftRequest}\n+ */\n+public class DraftRequestDeserializer implements JsonDeserializer<DraftRequest<ETLConfig>> {\n+\n+  @Override\n+  public DraftRequest<ETLConfig> deserialize(JsonElement jsonElement, Type type,\n+                                             JsonDeserializationContext context) throws JsonParseException {\n+\n+    // Deserialize this normally to get all the other field values\n+    Gson gson = new GsonBuilder().create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNTMxMw=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMTY4Mw==", "bodyText": "is this an outdated comment? Don't see this getting used anywhere.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538921683", "createdAt": "2020-12-09T00:54:20Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequestDeserializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * GSON deserializer to correctly deserialize the config field in {@link DraftRequest}\n+ */\n+public class DraftRequestDeserializer implements JsonDeserializer<DraftRequest<ETLConfig>> {\n+\n+  @Override\n+  public DraftRequest<ETLConfig> deserialize(JsonElement jsonElement, Type type,\n+                                             JsonDeserializationContext context) throws JsonParseException {\n+\n+    // Deserialize this normally to get all the other field values\n+    Gson gson = new GsonBuilder().create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNTMxMw=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1OTU1MA==", "bodyText": "Well, one way to do it is to deserialize it twice without using a custom deserializer, which you sort of doing it already. Something look like this:\nDraftRequest<ETLConfig> deserialize(String requestBody) {\n  DraftRequest<ETLConfig> request = gson.fromJson(requestBody, new TypeToken<DraftRequest<ETLConfig>>() { }.getType());\n  if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n    return gson.fromJson(requestStr, new TypeToken<DraftRequest<ETLBatchConfig>>() { }.getType());\n  } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {\n    return gson.fromJson(requestStr, new TypeToken<DraftRequest<DataStreamsConfig>>() { }.getType());\n  }\n}", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539559550", "createdAt": "2020-12-09T18:49:08Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequestDeserializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * GSON deserializer to correctly deserialize the config field in {@link DraftRequest}\n+ */\n+public class DraftRequestDeserializer implements JsonDeserializer<DraftRequest<ETLConfig>> {\n+\n+  @Override\n+  public DraftRequest<ETLConfig> deserialize(JsonElement jsonElement, Type type,\n+                                             JsonDeserializationContext context) throws JsonParseException {\n+\n+    // Deserialize this normally to get all the other field values\n+    Gson gson = new GsonBuilder().create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNTMxMw=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MTU5Nw==", "bodyText": "Sounds good, I've removed the custom deserializer and added a utility method in DraftHandler to handle the deserialization.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539591597", "createdAt": "2020-12-09T19:38:10Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequestDeserializer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+\n+import java.lang.reflect.Type;\n+\n+/**\n+ * GSON deserializer to correctly deserialize the config field in {@link DraftRequest}\n+ */\n+public class DraftRequestDeserializer implements JsonDeserializer<DraftRequest<ETLConfig>> {\n+\n+  @Override\n+  public DraftRequest<ETLConfig> deserialize(JsonElement jsonElement, Type type,\n+                                             JsonDeserializationContext context) throws JsonParseException {\n+\n+    // Deserialize this normally to get all the other field values\n+    Gson gson = new GsonBuilder().create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNTMxMw=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg1NjA1OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1NDoxMFrOIB367A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozNjo1MVrOIB7UPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNTY5Mg==", "bodyText": "Log as warn. If you log as error, it should halt the flow.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538835692", "createdAt": "2020-12-08T21:54:10Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MTMyNw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538891327", "createdAt": "2020-12-08T23:36:51Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNTY5Mg=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg2MDExOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1NTowN1rOIB39Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzozNzowMFrOIB7UbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNjI2Mw==", "bodyText": "Don't do data logic in constructor (store.getDraftCount is a data logic)", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538836263", "createdAt": "2020-12-08T21:55:07Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MTM3Mw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538891373", "createdAt": "2020-12-08T23:37:00Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNjI2Mw=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg2MjQ4OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1NTo0NFrOIB3-hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMzo0MTozMVrOIB7bYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNjYxNQ==", "bodyText": "no need to throws RuntimeException. Also, throwing RuntimeException is not a good contract. Should throw something more specific to indicate what the error is.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538836615", "createdAt": "2020-12-08T21:55:44Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to write {} metric on DraftService startup due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) throws RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODg5MzE1Mg==", "bodyText": "Removed throws RuntimeException and updated the store to throw more specific errors", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538893152", "createdAt": "2020-12-08T23:41:31Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.error(\"Metrics collector was not injected into StudioService\");\n+    }\n+    try {\n+      this.metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to write {} metric on DraftService startup due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) throws RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNjYxNQ=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg2NDA1OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1NjowOVrOIB3_ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDowNToxNlrOIB8BKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNjgzNw==", "bodyText": "Don't do this.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538836837", "createdAt": "2020-12-08T21:56:09Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      Throwables.propagate(e.getCause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwMjgyNQ==", "bodyText": "Done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538902825", "createdAt": "2020-12-09T00:05:16Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      Throwables.propagate(e.getCause());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNjgzNw=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4Mjg2NzA1OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMTo1Njo1MlrOIB4BGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDowNzozMFrOIB8Eiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNzI3Mg==", "bodyText": "You can use the Bytes.BYTES_COMPARATOR", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538837272", "createdAt": "2020-12-08T21:56:52Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      Throwables.propagate(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+      Comparator<StructuredRow> comparator = null;\n+      switch (fieldType) {\n+        case STRING:\n+          comparator = Comparator.<StructuredRow, String>comparing(o -> o.getString(sortField));\n+          break;\n+        case INTEGER:\n+          comparator = Comparator.<StructuredRow, Integer>comparing(o -> o.getInteger(sortField));\n+          break;\n+        case LONG:\n+          comparator = Comparator.<StructuredRow, Long>comparing(o -> o.getLong(sortField));\n+          break;\n+        case FLOAT:\n+          comparator = Comparator.<StructuredRow, Float>comparing(o -> o.getFloat(sortField));\n+          break;\n+        case DOUBLE:\n+          comparator = Comparator.<StructuredRow, Double>comparing(o -> o.getDouble(sortField));\n+          break;\n+        case BYTES:\n+          throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkwMzY5MQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538903691", "createdAt": "2020-12-09T00:07:30Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,310 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Throwables;\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      Throwables.propagate(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+      Comparator<StructuredRow> comparator = null;\n+      switch (fieldType) {\n+        case STRING:\n+          comparator = Comparator.<StructuredRow, String>comparing(o -> o.getString(sortField));\n+          break;\n+        case INTEGER:\n+          comparator = Comparator.<StructuredRow, Integer>comparing(o -> o.getInteger(sortField));\n+          break;\n+        case LONG:\n+          comparator = Comparator.<StructuredRow, Long>comparing(o -> o.getLong(sortField));\n+          break;\n+        case FLOAT:\n+          comparator = Comparator.<StructuredRow, Float>comparing(o -> o.getFloat(sortField));\n+          break;\n+        case DOUBLE:\n+          comparator = Comparator.<StructuredRow, Double>comparing(o -> o.getDouble(sortField));\n+          break;\n+        case BYTES:\n+          throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgzNzI3Mg=="}, "originalCommit": {"oid": "1ea2c75ed34e90469177b923588080987fdc0fac"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ0NDIyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftId.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo1MDo0MFrOIB9EcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTo0MToxNVrOICmL4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMDA0OQ==", "bodyText": "nit: id is a bit misleading since this doesn't actually uniquely identify anything. This is more like a name.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538920049", "createdAt": "2020-12-09T00:50:40Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftId.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.NamespaceSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Uniquely identifies a draft.\n+ */\n+public class DraftId {\n+  private final NamespaceSummary namespace;\n+  private final String id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU5MzY5OA==", "bodyText": "If you're referring to the DraftId name then that does uniquely identify a draft.\nIf you're referring to the id field in the class then that is also technically unique per draft, the other fields are used for additional context when fetching/storing a draft. I could rename the field to uuid if thats better?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539593698", "createdAt": "2020-12-09T19:41:15Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftId.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.NamespaceSummary;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Uniquely identifies a draft.\n+ */\n+public class DraftId {\n+  private final NamespaceSummary namespace;\n+  private final String id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMDA0OQ=="}, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ0OTEwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo1MjoxOVrOIB9HDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxMDoxM1rOICie0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMDcxNw==", "bodyText": "nit: DraftWriteRequest or DraftStoreRequest is a little more descriptive", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538920717", "createdAt": "2020-12-09T00:52:19Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzMzAwOQ==", "bodyText": "Changed to DraftStoreRequest", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539533009", "createdAt": "2020-12-09T18:10:13Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftRequest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftRequest<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMDcxNw=="}, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ2MTM0OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo1NjoyNFrOIB9OFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNzo1NVrOIClP_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMjUxOQ==", "bodyText": "we generally don't declare that a method throws any type of RuntimeException and just put it in the javadoc.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538922519", "createdAt": "2020-12-09T00:56:24Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3ODM2Ng==", "bodyText": "Refactored the DraftSore and replaced all mentions of RuntimeException with more specific execeptions", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539578366", "createdAt": "2020-12-09T19:17:55Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMjUxOQ=="}, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ2NDgxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMDo1NzoyOVrOIB9P7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNDozN1rOICjEeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMjk4OA==", "bodyText": "Is this happening in a follow up or sometime later?\nTODO comments should mention the jira number, otherwise these things always get lost.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538922988", "createdAt": "2020-12-09T00:57:29Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftRequest {@link DraftRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftRequest<T> draftRequest) {\n+    //TODO add collision detection using the hashes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MjY0OA==", "bodyText": "This will be happening in a subsequent release. I've created a JIRA and included it in the TODO", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539542648", "createdAt": "2020-12-09T18:24:37Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftRequest {@link DraftRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftRequest<T> draftRequest) {\n+    //TODO add collision detection using the hashes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyMjk4OA=="}, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ4MTIwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTowMzoyOVrOIB9Y_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOToxNTo1NVrOIClKvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNTMxMA==", "bodyText": "this type of error should eventually result in a 400 response code. I think it's better to validate this earlier in the handler rather than here. Each handler method should be validating user input before passing it lower in the stack.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538925310", "createdAt": "2020-12-09T01:03:29Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.StructuredTableInstantiationException;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      handleError(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU3NzAyMw==", "bodyText": "Makes sense, moved the check into the handler. Also kept the check in the store incase someone attempts to call the DraftService or DraftStore directly", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539577023", "createdAt": "2020-12-09T19:15:55Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.StructuredTableInstantiationException;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      handleError(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNTMxMA=="}, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ4NDI5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTowNDozN1rOIB9apg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNzowMFrOICjK9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNTczNA==", "bodyText": "should get the Comparator outside of the sort, so that this logic happens only once instead of for each comparison.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538925734", "createdAt": "2020-12-09T01:04:37Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.StructuredTableInstantiationException;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      handleError(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+      Comparator<StructuredRow> comparator = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0NDMwOQ==", "bodyText": "Oh whoops, done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539544309", "createdAt": "2020-12-09T18:27:00Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.StructuredTableInstantiationException;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      handleError(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+      Comparator<StructuredRow> comparator = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNTczNA=="}, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MzQ4ODI5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQwMTowNjoxMlrOIB9c7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxOTowNDozNlrOICkucA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNjMxNw==", "bodyText": "There is a TransactionRunners utility class that you can use instead of doing this.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r538926317", "createdAt": "2020-12-09T01:06:12Z", "author": {"login": "albertshau"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.StructuredTableInstantiationException;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      handleError(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+      Comparator<StructuredRow> comparator = null;\n+      switch (fieldType) {\n+        case STRING:\n+          comparator = Comparator.<StructuredRow, String>comparing(o -> o.getString(sortField));\n+          break;\n+        case INTEGER:\n+          comparator = Comparator.<StructuredRow, Integer>comparing(o -> o.getInteger(sortField));\n+          break;\n+        case LONG:\n+          comparator = Comparator.<StructuredRow, Long>comparing(o -> o.getLong(sortField));\n+          break;\n+        case FLOAT:\n+          comparator = Comparator.<StructuredRow, Float>comparing(o -> o.getFloat(sortField));\n+          break;\n+        case DOUBLE:\n+          comparator = Comparator.<StructuredRow, Double>comparing(o -> o.getDouble(sortField));\n+          break;\n+        case BYTES:\n+          comparator = Comparator.comparing(o -> o.getBytes(sortField), Bytes.BYTES_COMPARATOR);\n+          break;\n+        default:\n+          throw new NotImplementedException(String.format(\"Cannot sort field '%s' because type '%s' is not supported.\",\n+                                                          sortField, fieldType.toString()));\n+      }\n+\n+      if (sortRequest.getOrder() != SortRequest.SortOrder.ASC) {\n+        comparator = comparator.reversed();\n+      }\n+      return comparator.compare(o1, o2);\n+    });\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws RuntimeException {\n+    AtomicReference<Optional<Draft>> result = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2OTc3Ng==", "bodyText": "Ah thats much cleaner, refactored everything to use TransactionRunners", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r539569776", "createdAt": "2020-12-09T19:04:36Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,325 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.StructuredTableInstantiationException;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionException;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws RuntimeException {\n+    AtomicReference<List<StructuredRow>> results = new AtomicReference<>();\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    try {\n+      transactionRunner.run(context -> {\n+        StructuredTable table = context.getTable(TABLE_ID);\n+        Range range = Range.singleton(prefix);\n+        List<StructuredRow> temp = new ArrayList<>();\n+        try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+          while (rowIter.hasNext()) {\n+            temp.add(rowIter.next());\n+          }\n+        }\n+        results.set(temp);\n+      });\n+    } catch (TransactionException e) {\n+      handleError(e.getCause());\n+    }\n+\n+    List<StructuredRow> sortedResults = doSort(results.get(), sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    if (!fieldTypes.containsKey(sortField)) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    rows.sort((o1, o2) -> {\n+      FieldType.Type fieldType = fieldTypes.get(sortField);\n+      Comparator<StructuredRow> comparator = null;\n+      switch (fieldType) {\n+        case STRING:\n+          comparator = Comparator.<StructuredRow, String>comparing(o -> o.getString(sortField));\n+          break;\n+        case INTEGER:\n+          comparator = Comparator.<StructuredRow, Integer>comparing(o -> o.getInteger(sortField));\n+          break;\n+        case LONG:\n+          comparator = Comparator.<StructuredRow, Long>comparing(o -> o.getLong(sortField));\n+          break;\n+        case FLOAT:\n+          comparator = Comparator.<StructuredRow, Float>comparing(o -> o.getFloat(sortField));\n+          break;\n+        case DOUBLE:\n+          comparator = Comparator.<StructuredRow, Double>comparing(o -> o.getDouble(sortField));\n+          break;\n+        case BYTES:\n+          comparator = Comparator.comparing(o -> o.getBytes(sortField), Bytes.BYTES_COMPARATOR);\n+          break;\n+        default:\n+          throw new NotImplementedException(String.format(\"Cannot sort field '%s' because type '%s' is not supported.\",\n+                                                          sortField, fieldType.toString()));\n+      }\n+\n+      if (sortRequest.getOrder() != SortRequest.SortOrder.ASC) {\n+        comparator = comparator.reversed();\n+      }\n+      return comparator.compare(o1, o2);\n+    });\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws RuntimeException {\n+    AtomicReference<Optional<Draft>> result = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODkyNjMxNw=="}, "originalCommit": {"oid": "5a0db0adfa0dd769932aff143ee585f9c332900c"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ1MzczOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/CodedException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowMjo1M1rOIED5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTowNToxOVrOIEGV3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTE2Mw==", "bodyText": "Could you please clarify in javadoc that it's an HTTP code?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541129163", "createdAt": "2020-12-11T18:02:53Z", "author": {"login": "tivv"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/CodedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+/**\n+ * An exception that contains an error code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2OTExOQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541169119", "createdAt": "2020-12-11T19:05:19Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/CodedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+/**\n+ * An exception that contains an error code.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEyOTE2Mw=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ3ODUyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODowOToyMVrOIEEIcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1Mjo0N1rOIEFoxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzMjkxNA==", "bodyText": "Why not have this passed to the store.listDrafts method and have the returned drafts already without the config?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541132914", "createdAt": "2020-12-11T18:09:21Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1NzU3Mg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541157572", "createdAt": "2020-12-11T18:52:47Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzMjkxNA=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ4MzAyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxMDoyOVrOIEELDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1NDowNVrOIEFrnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzMzU4Mg==", "bodyText": "Writing to metrics should never fail.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541133582", "createdAt": "2020-12-11T18:10:29Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftStoreRequest {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftStoreRequest<T> draftStoreRequest) {\n+    // TODO(CDAP-17456): Add collision detection using the hashes\n+    store.writeDraft(draftId, draftStoreRequest);\n+\n+    // Wrap metrics in try-catch to prevent entire request from failing if metrics writing fails", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1ODMwMQ==", "bodyText": "removed try-catch around metrics write", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541158301", "createdAt": "2020-12-11T18:54:05Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftStoreRequest {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftStoreRequest<T> draftStoreRequest) {\n+    // TODO(CDAP-17456): Add collision detection using the hashes\n+    store.writeDraft(draftId, draftStoreRequest);\n+\n+    // Wrap metrics in try-catch to prevent entire request from failing if metrics writing fails", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzMzU4Mg=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ4NDM0OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxMDo0NlrOIEELwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1NDozNlrOIEFszQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzMzc2MA==", "bodyText": "Remove extra empty lines.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541133760", "createdAt": "2020-12-11T18:10:46Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftStoreRequest {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftStoreRequest<T> draftStoreRequest) {\n+    // TODO(CDAP-17456): Add collision detection using the hashes\n+    store.writeDraft(draftId, draftStoreRequest);\n+\n+    // Wrap metrics in try-catch to prevent entire request from failing if metrics writing fails\n+    try {\n+      metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to write {} metric on writeDraft request due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Delete the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public void deleteDraft(DraftId draftId) {\n+    // Make sure the draft exists before attempting to delete it\n+    getDraft(draftId);\n+    store.deleteDraft(draftId);\n+\n+    // Wrap metrics in try-catch to prevent entire request from failing if metrics writing fails\n+    try {\n+      metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to write {} metric on deleteDraft request due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Checks if the given field exists in the {@link DraftStore} table spec. This should be used for validation.\n+   *\n+   * @param fieldName name of the field to check\n+   * @return True if the field exists in the {@link DraftStore} table spec\n+   */\n+  public boolean fieldExists(String fieldName) {\n+    Map<String, FieldType.Type> fieldTypes = DraftStore.TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+\n+    return fieldTypes.containsKey(fieldName);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1ODYwNQ==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541158605", "createdAt": "2020-12-11T18:54:36Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest);\n+    if (!includeConfig) {\n+      drafts = drafts.stream().map(Draft::copyWithoutConfig).collect(Collectors.toList());\n+    }\n+\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      //TODO Add filtering on other fields?\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftStoreRequest {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftStoreRequest<T> draftStoreRequest) {\n+    // TODO(CDAP-17456): Add collision detection using the hashes\n+    store.writeDraft(draftId, draftStoreRequest);\n+\n+    // Wrap metrics in try-catch to prevent entire request from failing if metrics writing fails\n+    try {\n+      metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to write {} metric on writeDraft request due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Delete the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public void deleteDraft(DraftId draftId) {\n+    // Make sure the draft exists before attempting to delete it\n+    getDraft(draftId);\n+    store.deleteDraft(draftId);\n+\n+    // Wrap metrics in try-catch to prevent entire request from failing if metrics writing fails\n+    try {\n+      metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to write {} metric on deleteDraft request due to: {}\", Constants.Metrics.DRAFT_COUNT,\n+               e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Checks if the given field exists in the {@link DraftStore} table spec. This should be used for validation.\n+   *\n+   * @param fieldName name of the field to check\n+   * @return True if the field exists in the {@link DraftStore} table spec\n+   */\n+  public boolean fieldExists(String fieldName) {\n+    Map<String, FieldType.Type> fieldTypes = DraftStore.TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+\n+    return fieldTypes.containsKey(fieldName);\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzMzc2MA=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ4NjQ3OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxMToyMVrOIEENEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1NDo1MVrOIEFtgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNDA5OA==", "bodyText": "Seems like this could be package private instead of public?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541134098", "createdAt": "2020-12-11T18:11:21Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1ODc4Ng==", "bodyText": "It cant be package private because the StudioService needs to access this spec to create the table on startup and the store is in the draft package while the StudioService is in the service package", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541158786", "createdAt": "2020-12-11T18:54:51Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNDA5OA=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODQ5MDgwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxMjoxOVrOIEEPkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1NTo0NVrOIEFvaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNDczNg==", "bodyText": "You can simplify it to rowIter.forEachRemaining(temp::add)", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541134736", "createdAt": "2020-12-11T18:12:19Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1OTI3Mg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541159272", "createdAt": "2020-12-11T18:55:45Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzNDczNg=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUxNTgxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoxOTowMFrOIEEeNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1NToxNFrOIEFuYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzODQ4Ng==", "bodyText": "Annotate parameter with @Nullable if it can be null.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541138486", "createdAt": "2020-12-11T18:19:00Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      return temp;\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+\n+    List<StructuredRow> sortedResults = doSort(rows, sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1OTAxMA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541159010", "createdAt": "2020-12-11T18:55:14Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      return temp;\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+\n+    List<StructuredRow> sortedResults = doSort(rows, sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzODQ4Ng=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUyNzMwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyMjowMVrOIEEk-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1Nzo1MVrOIEF2JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MDIxOA==", "bodyText": "Seems overkill to create a map to just get one field. It's better to do:\nFieldType fieldType = TABLE_SPEC.getFieldTypes().stream().filter(f -> f.getName().equals(sortField)).findFirst().orElse(null);\nif (fieldType == null) {\n  throw ...\n}", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541140218", "createdAt": "2020-12-11T18:22:01Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      return temp;\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+\n+    List<StructuredRow> sortedResults = doSort(rows, sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2MDk5Nw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541160997", "createdAt": "2020-12-11T18:57:51Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,301 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        while (rowIter.hasNext()) {\n+          temp.add(rowIter.next());\n+        }\n+      }\n+      return temp;\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+\n+    List<StructuredRow> sortedResults = doSort(rows, sortRequest);\n+    return sortedResults.stream().map(this::fromRow).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    Map<String, FieldType.Type> fieldTypes = TABLE_SPEC", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MDIxOA=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODUzOTExOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyNTowOVrOIEEr9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo1ODozNlrOIEF5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjAwNQ==", "bodyText": "No need to have else after the if block return. It is cleaner to read it as:\nif (...) {\n  return;\n}\nif (...) {\n  return;\n}\nthrow new IllegalArgumentException(...);", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541142005", "createdAt": "2020-12-11T18:25:09Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2MTc4Mg==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541161782", "createdAt": "2020-12-11T18:58:36Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjAwNQ=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU0MzQxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyNjowN1rOIEEuXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTowMTowOVrOIEGEmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjYyMg==", "bodyText": "So this is catching the one thrown in line 164? Seems confusing. Also, generally, when wrapping an exception, always carry the origin exception as the cause, otherwise it will make the stacktrace not debuggable.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541142622", "createdAt": "2020-12-11T18:26:07Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<DataStreamsConfig>>() { }.getType());\n+      } else {\n+        throw new IllegalArgumentException(String\n+                                             .format(\"artifact '%s' is not supported, valid options are: '%s' or '%s'\",\n+                                                     request.getArtifact().getName(), StudioUtil.ARTIFACT_BATCH_NAME,\n+                                                     StudioUtil.ARTIFACT_STREAMING_NAME));\n+      }\n+    } catch (JsonSyntaxException e) {\n+      throw new IllegalArgumentException(\"Unable to decode request body: \" + e.getMessage());\n+    } catch (IllegalArgumentException e) {\n+      throw new IllegalArgumentException(\"Invalid config: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2NDY5Ng==", "bodyText": "Removed the catch for IllegalArguementException and passed on the cause for JsonSyntaxException", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541164696", "createdAt": "2020-12-11T19:01:09Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<DataStreamsConfig>>() { }.getType());\n+      } else {\n+        throw new IllegalArgumentException(String\n+                                             .format(\"artifact '%s' is not supported, valid options are: '%s' or '%s'\",\n+                                                     request.getArtifact().getName(), StudioUtil.ARTIFACT_BATCH_NAME,\n+                                                     StudioUtil.ARTIFACT_STREAMING_NAME));\n+      }\n+    } catch (JsonSyntaxException e) {\n+      throw new IllegalArgumentException(\"Unable to decode request body: \" + e.getMessage());\n+    } catch (IllegalArgumentException e) {\n+      throw new IllegalArgumentException(\"Invalid config: \" + e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjYyMg=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU0NDkxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyNjozMVrOIEEvUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozMzo1MlrOIEISfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0Mjg2NQ==", "bodyText": "Seems not needed?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541142865", "createdAt": "2020-12-11T18:26:31Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<DataStreamsConfig>>() { }.getType());\n+      } else {\n+        throw new IllegalArgumentException(String\n+                                             .format(\"artifact '%s' is not supported, valid options are: '%s' or '%s'\",\n+                                                     request.getArtifact().getName(), StudioUtil.ARTIFACT_BATCH_NAME,\n+                                                     StudioUtil.ARTIFACT_STREAMING_NAME));\n+      }\n+    } catch (JsonSyntaxException e) {\n+      throw new IllegalArgumentException(\"Unable to decode request body: \" + e.getMessage());\n+    } catch (IllegalArgumentException e) {\n+      throw new IllegalArgumentException(\"Invalid config: \" + e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Utility method that checks that the namespace exists and fetches current user before responding.\n+   */\n+  private void respond(String namespaceName, HttpServiceResponder responder, NamespacedEndpoint endpoint) {\n+    SystemHttpServiceContext context = getContext();\n+    NamespaceSummary namespaceSummary;\n+    try {\n+      namespaceSummary = context.getAdmin().getNamespaceSummary(namespaceName);\n+      if (namespaceSummary == null) {\n+        responder.sendError(HttpURLConnection.HTTP_NOT_FOUND, String.format(\"Namespace '%s' not found\", namespaceName));\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMTAyMQ==", "bodyText": "This is needed so that we exit if the namespace is not found, we cant proceed without a valid namespace", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541201021", "createdAt": "2020-12-11T19:33:52Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<DataStreamsConfig>>() { }.getType());\n+      } else {\n+        throw new IllegalArgumentException(String\n+                                             .format(\"artifact '%s' is not supported, valid options are: '%s' or '%s'\",\n+                                                     request.getArtifact().getName(), StudioUtil.ARTIFACT_BATCH_NAME,\n+                                                     StudioUtil.ARTIFACT_STREAMING_NAME));\n+      }\n+    } catch (JsonSyntaxException e) {\n+      throw new IllegalArgumentException(\"Unable to decode request body: \" + e.getMessage());\n+    } catch (IllegalArgumentException e) {\n+      throw new IllegalArgumentException(\"Invalid config: \" + e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Utility method that checks that the namespace exists and fetches current user before responding.\n+   */\n+  private void respond(String namespaceName, HttpServiceResponder responder, NamespacedEndpoint endpoint) {\n+    SystemHttpServiceContext context = getContext();\n+    NamespaceSummary namespaceSummary;\n+    try {\n+      namespaceSummary = context.getAdmin().getNamespaceSummary(namespaceName);\n+      if (namespaceSummary == null) {\n+        responder.sendError(HttpURLConnection.HTTP_NOT_FOUND, String.format(\"Namespace '%s' not found\", namespaceName));\n+        return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0Mjg2NQ=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU0NTI1OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyNjozNVrOIEEvfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOToyMTozOFrOIEHlbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjkwOQ==", "bodyText": "Seems not needed?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541142909", "createdAt": "2020-12-11T18:26:35Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<DataStreamsConfig>>() { }.getType());\n+      } else {\n+        throw new IllegalArgumentException(String\n+                                             .format(\"artifact '%s' is not supported, valid options are: '%s' or '%s'\",\n+                                                     request.getArtifact().getName(), StudioUtil.ARTIFACT_BATCH_NAME,\n+                                                     StudioUtil.ARTIFACT_STREAMING_NAME));\n+      }\n+    } catch (JsonSyntaxException e) {\n+      throw new IllegalArgumentException(\"Unable to decode request body: \" + e.getMessage());\n+    } catch (IllegalArgumentException e) {\n+      throw new IllegalArgumentException(\"Invalid config: \" + e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Utility method that checks that the namespace exists and fetches current user before responding.\n+   */\n+  private void respond(String namespaceName, HttpServiceResponder responder, NamespacedEndpoint endpoint) {\n+    SystemHttpServiceContext context = getContext();\n+    NamespaceSummary namespaceSummary;\n+    try {\n+      namespaceSummary = context.getAdmin().getNamespaceSummary(namespaceName);\n+      if (namespaceSummary == null) {\n+        responder.sendError(HttpURLConnection.HTTP_NOT_FOUND, String.format(\"Namespace '%s' not found\", namespaceName));\n+        return;\n+      }\n+    } catch (IOException e) {\n+      responder.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR,\n+                          String.format(\"Unable to check if namespace '%s' exists.\", namespaceName));\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE4OTQ4Nw==", "bodyText": "This is needed so that we exit if the namespace is not found, we cant proceed without a valid namespace", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541189487", "createdAt": "2020-12-11T19:21:38Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")\n+  public void listDrafts(HttpServiceRequest request, HttpServiceResponder responder,\n+                         @PathParam(\"context\") String namespaceName,\n+                         @QueryParam(\"includeConfig\") @DefaultValue(\"false\") boolean includeConfig,\n+                         @QueryParam(\"sortBy\") @DefaultValue(\"name\") String sortBy,\n+                         @QueryParam(\"sortOrder\") @DefaultValue(\"ASC\") String sortOrder,\n+                         @QueryParam(\"filter\") @Nullable String filter) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+      if (!draftService.fieldExists(sortBy)) {\n+        throw new IllegalArgumentException(String.format(\n+          \"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\", sortBy));\n+      }\n+\n+      SortRequest sortRequest = new SortRequest(sortBy, sortOrder);\n+      responder.sendJson(draftService.listDrafts(namespace, request.getUserId(), includeConfig, sortRequest, filter));\n+    });\n+  }\n+\n+  /**\n+   * Gets the details of a draft\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void getDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      responder.sendJson(draftService.getDraft(id));\n+    });\n+  }\n+\n+  /**\n+   * Creates or updates a draft\n+   */\n+  @PUT\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void putDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                       @PathParam(\"context\") String namespaceName,\n+                       @PathParam(\"draft\") String draftId) {\n+\n+    respond(namespaceName, responder, (namespace) -> {\n+\n+      String requestStr = StandardCharsets.UTF_8.decode(request.getContent()).toString();\n+      DraftStoreRequest<ETLConfig> draftStoreRequest = deserializeDraftStoreRequest(requestStr);\n+\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+      draftService.writeDraft(id, draftStoreRequest);\n+\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Deletes a draft\n+   */\n+  @DELETE\n+  @Path(\"v1/contexts/{context}/drafts/{draft}\")\n+  public void deleteDraft(HttpServiceRequest request, HttpServiceResponder responder,\n+                          @PathParam(\"context\") String namespaceName,\n+                          @PathParam(\"draft\") String draftId) {\n+    respond(namespaceName, responder, (namespace) -> {\n+      DraftId id = new DraftId(namespace, draftId, request.getUserId());\n+\n+      draftService.deleteDraft(id);\n+      responder.sendStatus(HttpURLConnection.HTTP_OK);\n+    });\n+  }\n+\n+  /**\n+   * Utility method to correct deserialize the config field in the {@link DraftStoreRequest} object\n+   * @param jsonStr the json string representing the DraftStoreRequest\n+   * @return {@link DraftStoreRequest} object\n+   */\n+  private DraftStoreRequest<ETLConfig> deserializeDraftStoreRequest(String jsonStr) {\n+    try {\n+      DraftStoreRequest<ETLConfig> request = GSON\n+        .fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLConfig>>() { }.getType());\n+\n+      if (request.getArtifact() == null) {\n+        throw new IllegalArgumentException(\"artifact is null\");\n+      }\n+\n+      if (StudioUtil.isBatchPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<ETLBatchConfig>>() { }.getType());\n+      } else if (StudioUtil.isStreamingPipeline(request.getArtifact())) {\n+        return GSON.fromJson(jsonStr, new TypeToken<DraftStoreRequest<DataStreamsConfig>>() { }.getType());\n+      } else {\n+        throw new IllegalArgumentException(String\n+                                             .format(\"artifact '%s' is not supported, valid options are: '%s' or '%s'\",\n+                                                     request.getArtifact().getName(), StudioUtil.ARTIFACT_BATCH_NAME,\n+                                                     StudioUtil.ARTIFACT_STREAMING_NAME));\n+      }\n+    } catch (JsonSyntaxException e) {\n+      throw new IllegalArgumentException(\"Unable to decode request body: \" + e.getMessage());\n+    } catch (IllegalArgumentException e) {\n+      throw new IllegalArgumentException(\"Invalid config: \" + e.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Utility method that checks that the namespace exists and fetches current user before responding.\n+   */\n+  private void respond(String namespaceName, HttpServiceResponder responder, NamespacedEndpoint endpoint) {\n+    SystemHttpServiceContext context = getContext();\n+    NamespaceSummary namespaceSummary;\n+    try {\n+      namespaceSummary = context.getAdmin().getNamespaceSummary(namespaceName);\n+      if (namespaceSummary == null) {\n+        responder.sendError(HttpURLConnection.HTTP_NOT_FOUND, String.format(\"Namespace '%s' not found\", namespaceName));\n+        return;\n+      }\n+    } catch (IOException e) {\n+      responder.sendError(HttpURLConnection.HTTP_INTERNAL_ERROR,\n+                          String.format(\"Unable to check if namespace '%s' exists.\", namespaceName));\n+      return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjkwOQ=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU0ODI5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyNzoyNFrOIEExNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTowNDo0OVrOIEGTzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MzM1MQ==", "bodyText": "Does this pass checkstyle? I think it is has to be a space after the ). Generally do:\nprivate StudioUtil() {\n  // prevent instantiation of util class.\n}", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541143351", "createdAt": "2020-12-11T18:27:24Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Helper functions for handlers/services in {@link io.cdap.cdap.datapipeline.service.StudioService}\n+ */\n+public final class StudioUtil {\n+  public static final String ARTIFACT_BATCH_NAME = \"cdap-data-pipeline\";\n+  public static final String ARTIFACT_STREAMING_NAME = \"cdap-data-streams\";\n+\n+  private StudioUtil(){ }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2ODU4OQ==", "bodyText": "It did pass checkstyle but I updated it with your recommendation", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541168589", "createdAt": "2020-12-11T19:04:49Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/StudioUtil.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Helper functions for handlers/services in {@link io.cdap.cdap.datapipeline.service.StudioService}\n+ */\n+public final class StudioUtil {\n+  public static final String ARTIFACT_BATCH_NAME = \"cdap-data-pipeline\";\n+  public static final String ARTIFACT_STREAMING_NAME = \"cdap-data-streams\";\n+\n+  private StudioUtil(){ }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MzM1MQ=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU1MTcwOnYy", "diffSide": "RIGHT", "path": "cdap-test/src/main/java/io/cdap/cdap/test/MetricsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyODowN1rOIEEzBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozMjozOVrOIEIOaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MzgxNA==", "bodyText": "Use io.cdap.cdap.common.utils.Tasks.waitFor", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541143814", "createdAt": "2020-12-11T18:28:07Z", "author": {"login": "chtyim"}, "path": "cdap-test/src/main/java/io/cdap/cdap/test/MetricsManager.java", "diffHunk": "@@ -150,6 +150,33 @@ public void waitForTotalMetricCount(Map<String, String> tags, String metricName,\n     }\n   }\n \n+  /**\n+   * waitFor a metric value count for the metric identified by metricName and context.\n+   * @param tags - context identified by tags map\n+   * @param metricName\n+   * @param count - expected metric total count value\n+   * @param timeout\n+   * @param timeoutUnit\n+   * @throws TimeoutException\n+   * @throws InterruptedException\n+   */\n+  public void waitForExactMetricCount(Map<String, String> tags, String metricName, long count, long timeout,\n+                                      TimeUnit timeoutUnit) throws TimeoutException, InterruptedException {\n+    long value = getTotalMetric(tags, metricName);\n+\n+    // Min sleep time is 10ms, max sleep time is 1 seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5OTk3Nw==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541199977", "createdAt": "2020-12-11T19:32:39Z", "author": {"login": "MEseifan"}, "path": "cdap-test/src/main/java/io/cdap/cdap/test/MetricsManager.java", "diffHunk": "@@ -150,6 +150,33 @@ public void waitForTotalMetricCount(Map<String, String> tags, String metricName,\n     }\n   }\n \n+  /**\n+   * waitFor a metric value count for the metric identified by metricName and context.\n+   * @param tags - context identified by tags map\n+   * @param metricName\n+   * @param count - expected metric total count value\n+   * @param timeout\n+   * @param timeoutUnit\n+   * @throws TimeoutException\n+   * @throws InterruptedException\n+   */\n+  public void waitForExactMetricCount(Map<String, String> tags, String metricName, long count, long timeout,\n+                                      TimeUnit timeoutUnit) throws TimeoutException, InterruptedException {\n+    long value = getTotalMetric(tags, metricName);\n+\n+    // Min sleep time is 10ms, max sleep time is 1 seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MzgxNA=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODU2MDczOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODozMDoyOFrOIEE4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozMTo1MVrOIEILlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTIxMw==", "bodyText": "Does it make sense to have \"v1/contexts/{context}\" as a top-level @Path directive, e.g. like in DatasetInstanceHandler.\nAlso I see that usually path looks like Constants.Gateway.API_VERSION_3 + \"/namespaces/{namespace-id}. Is context a different thing? I see that its referred  as a namespace below. On the other side ValidationHandler is using \"/v1/contexts\". It would be good to have the common part extracted as a constant similar to Gateway as it would be easier to bump version when we need to.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541145213", "createdAt": "2020-12-11T18:30:28Z", "author": {"login": "tivv"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE3ODIxMQ==", "bodyText": "Good note on the top-level path, I've moved the common section of the path to the top-level.\nRegarding your question on context vs namespace, yes those are different. context in this URL refers to the different namespaces defined by the datapipeline app (the ones the user controls). The namespace-id you mentioned is the CDAP namespace that is used to manage all the apps that are deployed to the platform. In our case, this namespace is always system since we deploy the pipeline app in the CDAP system namespace but the context defaults to default since thats what the pipeline app creates out of the box. The full URL to access one of these APIs is:\n/v3/namespaces/system/apps/pipeline/services/studio/methods/v1/contexts/default/drafts/...\nso you can see both namespace-id and context are part of the path.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541178211", "createdAt": "2020-12-11T19:11:42Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTIxMw=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5OTI1NQ==", "bodyText": "Hmm it seems like the top-level path wasnt working (I was getting 404 errors). I pulled the API version into a global variable to make it easier to update in the future.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541199255", "createdAt": "2020-12-11T19:31:51Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/service/DraftHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.service;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonSyntaxException;\n+import com.google.gson.reflect.TypeToken;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.data.schema.Schema;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.api.service.http.AbstractSystemHttpServiceHandler;\n+import io.cdap.cdap.api.service.http.HttpServiceRequest;\n+import io.cdap.cdap.api.service.http.HttpServiceResponder;\n+import io.cdap.cdap.api.service.http.SystemHttpServiceContext;\n+import io.cdap.cdap.datapipeline.draft.CodedException;\n+import io.cdap.cdap.datapipeline.draft.DraftId;\n+import io.cdap.cdap.datapipeline.draft.DraftService;\n+import io.cdap.cdap.datapipeline.draft.DraftStoreRequest;\n+import io.cdap.cdap.datapipeline.draft.SortRequest;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.internal.io.SchemaTypeAdapter;\n+\n+import java.io.IOException;\n+import java.net.HttpURLConnection;\n+import java.nio.charset.StandardCharsets;\n+import javax.annotation.Nullable;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+\n+/**\n+ * Handler of drafts\n+ */\n+public class DraftHandler extends AbstractSystemHttpServiceHandler {\n+  private static final Gson GSON = new GsonBuilder()\n+    .setPrettyPrinting()\n+    .registerTypeAdapter(Schema.class, new SchemaTypeAdapter())\n+    .create();\n+\n+  // Injected by CDAP\n+  @SuppressWarnings(\"unused\")\n+  private Metrics metrics;\n+\n+  private DraftService draftService;\n+\n+  @Override\n+  public void initialize(SystemHttpServiceContext context) throws Exception {\n+    super.initialize(context);\n+    this.draftService = new DraftService(context, this.metrics);\n+  }\n+\n+  /**\n+   * Returns a list of drafts associated with a namespace and the current user\n+   */\n+  @GET\n+  @Path(\"v1/contexts/{context}/drafts\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTIxMw=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODYwMTkxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/CodedException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODo0MTo0MVrOIEFQmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTowMjoxNFrOIEGIyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MTM4NA==", "bodyText": "Does it make sense to put it into some common place and not inside draft? Looks like a useful abstraction.\nAnother option would be to reuse javax.ws.rs.ServerErrorException/ClientErrorException with it's Response.Status. May be we even can have a common exception handler, so that there is not need for own own code to convert it into sendError", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541151384", "createdAt": "2020-12-11T18:41:41Z", "author": {"login": "tivv"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/CodedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2NTc2OA==", "bodyText": "We have that in the CDAP platform itself, but not in the cdap-api that exposed to application. This draft management is implemented as part of the pipeline app, hence it doesn't have visibility to the internal CDAP platform classes.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541165768", "createdAt": "2020-12-11T19:02:14Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/CodedException.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE1MTM4NA=="}, "originalCommit": {"oid": "1b37a09950acdfb3fce8e6d35adfc7e086b16e14"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTA1ODYyOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1OTo1NVrOIEJyUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDowMzozMVrOIEJ_tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNTU1NA==", "bodyText": "It seems the includeConfig is unused? Shouldn't you based on that to determine to have the config pass to Draft or not?", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541225554", "createdAt": "2020-12-11T19:59:55Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest,\n+                                boolean includeConfig) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        rowIter.forEachRemaining(temp::add);\n+      }\n+      return temp;\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+\n+    List<StructuredRow> sortedResults = doSort(rows, sortRequest);\n+    return sortedResults.stream().map(row -> fromRow(row, includeConfig)).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, @Nullable SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    FieldType field = TABLE_SPEC.getFieldTypes().stream()\n+      .filter(f -> f.getName().equals(sortField))\n+      .findFirst()\n+      .orElse(null);\n+    if (field == null) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    FieldType.Type fieldType = field.getType();\n+    Comparator<StructuredRow> comparator;\n+    switch (fieldType) {\n+      case STRING:\n+        comparator = Comparator.<StructuredRow, String>comparing(o -> o.getString(sortField));\n+        break;\n+      case INTEGER:\n+        comparator = Comparator.<StructuredRow, Integer>comparing(o -> o.getInteger(sortField));\n+        break;\n+      case LONG:\n+        comparator = Comparator.<StructuredRow, Long>comparing(o -> o.getLong(sortField));\n+        break;\n+      case FLOAT:\n+        comparator = Comparator.<StructuredRow, Float>comparing(o -> o.getFloat(sortField));\n+        break;\n+      case DOUBLE:\n+        comparator = Comparator.<StructuredRow, Double>comparing(o -> o.getDouble(sortField));\n+        break;\n+      case BYTES:\n+        comparator = Comparator.comparing(o -> o.getBytes(sortField), Bytes.BYTES_COMPARATOR);\n+        break;\n+      default:\n+        throw new NotImplementedException(String.format(\"Cannot sort field '%s' because type '%s' is not supported.\",\n+                                                        sortField, fieldType.toString()));\n+    }\n+\n+    if (sortRequest.getOrder() != SortRequest.SortOrder.ASC) {\n+      comparator = comparator.reversed();\n+    }\n+\n+    rows.sort(comparator);\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields in the {@link DraftId} object do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws TableNotFoundException, InvalidFieldException {\n+    return TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Optional<StructuredRow> row = table.read(getKey(id));\n+      return row.map(this::fromRow);\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+  }\n+\n+  /**\n+   * Delete the given draft. This is a no-op if the draft does not exist\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields in the {@link Draft} object do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public void deleteDraft(DraftId id) throws TableNotFoundException, InvalidFieldException {\n+    TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      table.delete(getKey(id));\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+  }\n+\n+  /**\n+   * Create/update the given draft\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @param request {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields in the {@link Draft} or {@link DraftStoreRequest} objects do not\n+   *   match the fields in the StructuredTable\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId id, DraftStoreRequest<T> request)\n+    throws TableNotFoundException, InvalidFieldException {\n+\n+    Optional<Draft> existing = getDraft(id);\n+    long now = System.currentTimeMillis();\n+    long createTime = existing.map(Draft::getCreatedTimeMillis).orElse(now);\n+\n+    Draft draft = new Draft(request.getConfig(), request.getName(), request.getDescription(), request.getArtifact(),\n+                            id.getId(), createTime, now);\n+\n+    TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      table.upsert(getRow(id, draft));\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+  }\n+\n+  /**\n+   * Returns the count of drafts in the table\n+   *\n+   * @return long value presenting the number of drafts in the table\n+   * @throws TableNotFoundException if the draft store table is not found\n+   */\n+  public long getDraftCount() throws TableNotFoundException {\n+    return TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      return table.count(Collections.singleton(Range.all()));\n+    }, TableNotFoundException.class);\n+  }\n+\n+  private void addKeyFields(DraftId id, List<Field<?>> fields) {\n+    fields.add(Fields.stringField(NAMESPACE_COL, id.getNamespace().getName()));\n+    fields.add(Fields.longField(GENERATION_COL, id.getNamespace().getGeneration()));\n+    fields.add(Fields.stringField(OWNER_COL, id.getOwner()));\n+    fields.add(Fields.stringField(ID_COL, id.getId()));\n+  }\n+\n+  private List<Field<?>> getKey(DraftId id) {\n+    List<Field<?>> keyFields = new ArrayList<>(4);\n+    addKeyFields(id, keyFields);\n+    return keyFields;\n+  }\n+\n+  private List<Field<?>> getRow(DraftId id, Draft draft) {\n+    List<Field<?>> fields = new ArrayList<>(11);\n+    addKeyFields(id, fields);\n+    fields.add(Fields.stringField(ARTIFACT_COL, GSON.toJson(draft.getArtifact())));\n+    fields.add(Fields.stringField(NAME_COL, draft.getName()));\n+    fields.add(Fields.stringField(DESCRIPTION_COL, draft.getDescription()));\n+    fields.add(Fields.longField(CREATED_COL, draft.getCreatedTimeMillis()));\n+    fields.add(Fields.longField(UPDATED_COL, draft.getUpdatedTimeMillis()));\n+    fields.add(Fields.stringField(PIPELINE_COL, GSON.toJson(draft.getConfig())));\n+    fields.add(Fields.intField(REVISION_COL, draft.getRevision()));\n+\n+    return fields;\n+  }\n+\n+  private Draft fromRow(StructuredRow row) {\n+    return fromRow(row, true);\n+  }\n+\n+  @SuppressWarnings(\"ConstantConditions\")\n+  private Draft fromRow(StructuredRow row, boolean includeConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358e795765e4988d21706464ba009c843b94619d"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyODk4MQ==", "bodyText": "whoops...added the logic and updated the unit tests to make sure config is missing when it should be.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541228981", "createdAt": "2020-12-11T20:03:31Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStore.java", "diffHunk": "@@ -0,0 +1,303 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.gson.Gson;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+import io.cdap.cdap.api.common.Bytes;\n+import io.cdap.cdap.api.dataset.lib.CloseableIterator;\n+import io.cdap.cdap.datapipeline.service.StudioUtil;\n+import io.cdap.cdap.etl.proto.v2.DataStreamsConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLBatchConfig;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.InvalidFieldException;\n+import io.cdap.cdap.spi.data.StructuredRow;\n+import io.cdap.cdap.spi.data.StructuredTable;\n+import io.cdap.cdap.spi.data.TableNotFoundException;\n+import io.cdap.cdap.spi.data.table.StructuredTableId;\n+import io.cdap.cdap.spi.data.table.StructuredTableSpecification;\n+import io.cdap.cdap.spi.data.table.field.Field;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.table.field.Fields;\n+import io.cdap.cdap.spi.data.table.field.Range;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunners;\n+import org.apache.commons.lang.NotImplementedException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Schema for draft store.\n+ */\n+public class DraftStore {\n+  public static final StructuredTableId TABLE_ID = new StructuredTableId(\"drafts\");\n+  private static final String NAMESPACE_COL = \"namespace\";\n+  private static final String GENERATION_COL = \"generation\";\n+  private static final String OWNER_COL = \"owner\";\n+  private static final String ID_COL = \"id\";\n+  private static final String ARTIFACT_COL = \"artifact\";\n+  private static final String NAME_COL = \"name\";\n+  private static final String DESCRIPTION_COL = \"description\";\n+  private static final String CREATED_COL = \"createdTimeMillis\";\n+  private static final String UPDATED_COL = \"updatedTimeMillis\";\n+  private static final String PIPELINE_COL = \"pipeline\";\n+  private static final String REVISION_COL = \"revision\";\n+  public static final StructuredTableSpecification TABLE_SPEC = new StructuredTableSpecification.Builder()\n+    .withId(TABLE_ID)\n+    .withFields(Fields.stringType(NAMESPACE_COL),\n+                Fields.longType(GENERATION_COL),\n+                Fields.stringType(OWNER_COL),\n+                Fields.stringType(ID_COL),\n+                Fields.stringType(ARTIFACT_COL),\n+                Fields.stringType(NAME_COL),\n+                Fields.stringType(DESCRIPTION_COL),\n+                Fields.longType(CREATED_COL),\n+                Fields.longType(UPDATED_COL),\n+                Fields.stringType(PIPELINE_COL),\n+                Fields.intType(REVISION_COL))\n+    .withPrimaryKeys(NAMESPACE_COL, GENERATION_COL, OWNER_COL, ID_COL)\n+    .build();\n+  private static final Gson GSON = new Gson();\n+  private final TransactionRunner transactionRunner;\n+\n+  public DraftStore(TransactionRunner transactionRunner) {\n+    this.transactionRunner = transactionRunner;\n+  }\n+\n+  /**\n+   * @param namespace the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required.\n+   * @return a list of drafts\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields Namespace and owner fields do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespace, String owner,\n+                                SortRequest sortRequest,\n+                                boolean includeConfig) throws TableNotFoundException, InvalidFieldException {\n+    List<Field<?>> prefix = new ArrayList<>(3);\n+    prefix.add(Fields.stringField(NAMESPACE_COL, namespace.getName()));\n+    prefix.add(Fields.longField(GENERATION_COL, namespace.getGeneration()));\n+    prefix.add(Fields.stringField(OWNER_COL, owner));\n+\n+    List<StructuredRow> rows;\n+    rows = TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Range range = Range.singleton(prefix);\n+      List<StructuredRow> temp = new ArrayList<>();\n+      try (CloseableIterator<StructuredRow> rowIter = table.scan(range, Integer.MAX_VALUE)) {\n+        rowIter.forEachRemaining(temp::add);\n+      }\n+      return temp;\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+\n+    List<StructuredRow> sortedResults = doSort(rows, sortRequest);\n+    return sortedResults.stream().map(row -> fromRow(row, includeConfig)).collect(Collectors.toList());\n+  }\n+\n+  /**\n+   * Helper method to apply the sorting onto a list of rows. Sorting needs to take place at the store-level so it can\n+   * leverage the StructuredRow to enable sorting on any field.\n+   *\n+   * @param rows list of {@link StructuredRow} to be sorted\n+   * @param sortRequest {@link SortRequest} describing the sort to be performed\n+   * @return a sorted list of {@link StructuredRow}\n+   */\n+  private List<StructuredRow> doSort(List<StructuredRow> rows, @Nullable SortRequest sortRequest) {\n+    if (sortRequest == null) {\n+      return rows;\n+    }\n+    String sortField = sortRequest.getFieldName();\n+    FieldType field = TABLE_SPEC.getFieldTypes().stream()\n+      .filter(f -> f.getName().equals(sortField))\n+      .findFirst()\n+      .orElse(null);\n+    if (field == null) {\n+      throw new IllegalArgumentException(\n+        String\n+          .format(\"Invalid value '%s' for sortBy. This field does not exist in the Drafts table.\",\n+                  sortField));\n+    }\n+\n+    FieldType.Type fieldType = field.getType();\n+    Comparator<StructuredRow> comparator;\n+    switch (fieldType) {\n+      case STRING:\n+        comparator = Comparator.<StructuredRow, String>comparing(o -> o.getString(sortField));\n+        break;\n+      case INTEGER:\n+        comparator = Comparator.<StructuredRow, Integer>comparing(o -> o.getInteger(sortField));\n+        break;\n+      case LONG:\n+        comparator = Comparator.<StructuredRow, Long>comparing(o -> o.getLong(sortField));\n+        break;\n+      case FLOAT:\n+        comparator = Comparator.<StructuredRow, Float>comparing(o -> o.getFloat(sortField));\n+        break;\n+      case DOUBLE:\n+        comparator = Comparator.<StructuredRow, Double>comparing(o -> o.getDouble(sortField));\n+        break;\n+      case BYTES:\n+        comparator = Comparator.comparing(o -> o.getBytes(sortField), Bytes.BYTES_COMPARATOR);\n+        break;\n+      default:\n+        throw new NotImplementedException(String.format(\"Cannot sort field '%s' because type '%s' is not supported.\",\n+                                                        sortField, fieldType.toString()));\n+    }\n+\n+    if (sortRequest.getOrder() != SortRequest.SortOrder.ASC) {\n+      comparator = comparator.reversed();\n+    }\n+\n+    rows.sort(comparator);\n+\n+    return rows;\n+  }\n+\n+  /**\n+   * Fetch a given draft if it exists\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @return an {@link Optional<Draft>} representing the requested draft\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields in the {@link DraftId} object do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public Optional<Draft> getDraft(DraftId id) throws TableNotFoundException, InvalidFieldException {\n+    return TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      Optional<StructuredRow> row = table.read(getKey(id));\n+      return row.map(this::fromRow);\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+  }\n+\n+  /**\n+   * Delete the given draft. This is a no-op if the draft does not exist\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields in the {@link Draft} object do not match the fields in the\n+   *   StructuredTable\n+   */\n+  public void deleteDraft(DraftId id) throws TableNotFoundException, InvalidFieldException {\n+    TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      table.delete(getKey(id));\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+  }\n+\n+  /**\n+   * Create/update the given draft\n+   *\n+   * @param id {@link DraftId} that is used to uniquely identify a draft\n+   * @param request {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws TableNotFoundException if the draft store table is not found\n+   * @throws InvalidFieldException if the fields in the {@link Draft} or {@link DraftStoreRequest} objects do not\n+   *   match the fields in the StructuredTable\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId id, DraftStoreRequest<T> request)\n+    throws TableNotFoundException, InvalidFieldException {\n+\n+    Optional<Draft> existing = getDraft(id);\n+    long now = System.currentTimeMillis();\n+    long createTime = existing.map(Draft::getCreatedTimeMillis).orElse(now);\n+\n+    Draft draft = new Draft(request.getConfig(), request.getName(), request.getDescription(), request.getArtifact(),\n+                            id.getId(), createTime, now);\n+\n+    TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      table.upsert(getRow(id, draft));\n+    }, TableNotFoundException.class, InvalidFieldException.class);\n+  }\n+\n+  /**\n+   * Returns the count of drafts in the table\n+   *\n+   * @return long value presenting the number of drafts in the table\n+   * @throws TableNotFoundException if the draft store table is not found\n+   */\n+  public long getDraftCount() throws TableNotFoundException {\n+    return TransactionRunners.run(transactionRunner, context -> {\n+      StructuredTable table = context.getTable(TABLE_ID);\n+      return table.count(Collections.singleton(Range.all()));\n+    }, TableNotFoundException.class);\n+  }\n+\n+  private void addKeyFields(DraftId id, List<Field<?>> fields) {\n+    fields.add(Fields.stringField(NAMESPACE_COL, id.getNamespace().getName()));\n+    fields.add(Fields.longField(GENERATION_COL, id.getNamespace().getGeneration()));\n+    fields.add(Fields.stringField(OWNER_COL, id.getOwner()));\n+    fields.add(Fields.stringField(ID_COL, id.getId()));\n+  }\n+\n+  private List<Field<?>> getKey(DraftId id) {\n+    List<Field<?>> keyFields = new ArrayList<>(4);\n+    addKeyFields(id, keyFields);\n+    return keyFields;\n+  }\n+\n+  private List<Field<?>> getRow(DraftId id, Draft draft) {\n+    List<Field<?>> fields = new ArrayList<>(11);\n+    addKeyFields(id, fields);\n+    fields.add(Fields.stringField(ARTIFACT_COL, GSON.toJson(draft.getArtifact())));\n+    fields.add(Fields.stringField(NAME_COL, draft.getName()));\n+    fields.add(Fields.stringField(DESCRIPTION_COL, draft.getDescription()));\n+    fields.add(Fields.longField(CREATED_COL, draft.getCreatedTimeMillis()));\n+    fields.add(Fields.longField(UPDATED_COL, draft.getUpdatedTimeMillis()));\n+    fields.add(Fields.stringField(PIPELINE_COL, GSON.toJson(draft.getConfig())));\n+    fields.add(Fields.intField(REVISION_COL, draft.getRevision()));\n+\n+    return fields;\n+  }\n+\n+  private Draft fromRow(StructuredRow row) {\n+    return fromRow(row, true);\n+  }\n+\n+  @SuppressWarnings(\"ConstantConditions\")\n+  private Draft fromRow(StructuredRow row, boolean includeConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNTU1NA=="}, "originalCommit": {"oid": "358e795765e4988d21706464ba009c843b94619d"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTA2MTk5OnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStoreRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDowMDoyNlrOIEJ0dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDowNTo0N1rOIEKH3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNjEwMA==", "bodyText": "Annotate methods with @Nullable if null can be returned (config and artifact, I believe).", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541226100", "createdAt": "2020-12-11T20:00:26Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStoreRequest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftStoreRequest<T> {\n+  private final String previousHash;\n+  private final String name;\n+  private final String description;\n+  private final int revision;\n+  private final ArtifactSummary artifact;\n+  private final T config;\n+\n+  public DraftStoreRequest(@Nullable T config, String previousHash, String name, String description, int revision,\n+                           @Nullable ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+  public T getConfig() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "358e795765e4988d21706464ba009c843b94619d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIzMTA2OA==", "bodyText": "done", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541231068", "createdAt": "2020-12-11T20:05:47Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftStoreRequest.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import io.cdap.cdap.api.artifact.ArtifactSummary;\n+\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Request to store a draft.\n+ *\n+ * @param <T> Type of config that this DraftRequest contains\n+ */\n+public class DraftStoreRequest<T> {\n+  private final String previousHash;\n+  private final String name;\n+  private final String description;\n+  private final int revision;\n+  private final ArtifactSummary artifact;\n+  private final T config;\n+\n+  public DraftStoreRequest(@Nullable T config, String previousHash, String name, String description, int revision,\n+                           @Nullable ArtifactSummary artifact) {\n+    this.config = config;\n+    this.previousHash = previousHash;\n+    this.name = name;\n+    this.description = description;\n+    this.revision = revision;\n+    this.artifact = artifact;\n+  }\n+\n+  public String getDescription() {\n+    return description;\n+  }\n+\n+  public String getName() {\n+    return name == null ? \"\" : name;\n+  }\n+\n+  public ArtifactSummary getArtifact() {\n+    return artifact;\n+  }\n+\n+  public T getConfig() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIyNjEwMA=="}, "originalCommit": {"oid": "358e795765e4988d21706464ba009c843b94619d"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTE2OTQzOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoxODoyM1rOIEK4dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMDoyNDowM1rOIELTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0MzUxMA==", "bodyText": "Use filter and find first to check instead of creating a map.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541243510", "createdAt": "2020-12-11T20:18:23Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, @Nullable Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest, includeConfig);\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftStoreRequest {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftStoreRequest<T> draftStoreRequest) {\n+    // TODO(CDAP-17456): Add collision detection using the hashes\n+    store.writeDraft(draftId, draftStoreRequest);\n+\n+    metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+  }\n+\n+  /**\n+   * Delete the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public void deleteDraft(DraftId draftId) {\n+    // Make sure the draft exists before attempting to delete it\n+    getDraft(draftId);\n+    store.deleteDraft(draftId);\n+\n+    metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+  }\n+\n+  /**\n+   * Checks if the given field exists in the {@link DraftStore} table spec. This should be used for validation.\n+   *\n+   * @param fieldName name of the field to check\n+   * @return True if the field exists in the {@link DraftStore} table spec\n+   */\n+  public boolean fieldExists(String fieldName) {\n+    Map<String, FieldType.Type> fieldTypes = DraftStore.TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    return fieldTypes.containsKey(fieldName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9a63d6e8c1752ffaa74c04119fb07f53e1df9eb"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI1MDM0Ng==", "bodyText": "I removed the map and used anyMatch to get the answer directly since we just want a true/false value.", "url": "https://github.com/cdapio/cdap/pull/12885#discussion_r541250346", "createdAt": "2020-12-11T20:24:03Z", "author": {"login": "MEseifan"}, "path": "cdap-app-templates/cdap-etl/cdap-data-pipeline/src/main/java/io/cdap/cdap/datapipeline/draft/DraftService.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package io.cdap.cdap.datapipeline.draft;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.api.NamespaceSummary;\n+import io.cdap.cdap.api.metrics.Metrics;\n+import io.cdap.cdap.etl.common.Constants;\n+import io.cdap.cdap.etl.proto.v2.ETLConfig;\n+import io.cdap.cdap.spi.data.table.field.FieldType;\n+import io.cdap.cdap.spi.data.transaction.TransactionRunner;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Class to interact with the DraftStore\n+ */\n+public class DraftService {\n+  private static final Logger LOG = LoggerFactory.getLogger(DraftService.class);\n+  private final Metrics metrics;\n+  private final DraftStore store;\n+\n+  public DraftService(TransactionRunner context, @Nullable Metrics metrics) {\n+    this.store = new DraftStore(context);\n+    this.metrics = metrics;\n+    if (metrics == null) {\n+      LOG.warn(\"Metrics collector was not injected into DraftHandler\");\n+    }\n+  }\n+\n+  /**\n+   * Returns a sorted and filtered list of drafts for the given namespace and owner\n+   *\n+   * @param namespaceSummary the namespace to fetch the drafts from\n+   * @param owner the id of the owner of the drafts\n+   * @param includeConfig the returned Draft objects will not include the pipeline config if this is false\n+   * @param sortRequest The sorting that should be applied to the results, pass null if no sorting is required. Note\n+   *   that the sortField matches against the column names in the table spec found in {@link DraftStore}\n+   * @param filter string used to do case-insensitive prefix matching on the draft name\n+   * @return List of {@link Draft}\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   */\n+  public List<Draft> listDrafts(NamespaceSummary namespaceSummary, String owner,\n+                                boolean includeConfig, SortRequest sortRequest,\n+                                @Nullable String filter) {\n+    List<Draft> drafts = store.listDrafts(namespaceSummary, owner, sortRequest, includeConfig);\n+    if (!Strings.isNullOrEmpty(filter)) {\n+      drafts = drafts.stream()\n+        .filter(draft -> draft.getName().toLowerCase().startsWith(filter.toLowerCase()))\n+        .collect(Collectors.toList());\n+    }\n+    return drafts;\n+  }\n+\n+  /**\n+   * Fetch the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @return the {@link Draft} object\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public Draft getDraft(DraftId draftId) throws RuntimeException, DraftNotFoundException {\n+    return store.getDraft(draftId).orElseThrow(() -> new DraftNotFoundException(draftId));\n+  }\n+\n+  /**\n+   * Write the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @param draftStoreRequest {@link DraftStoreRequest} that contains the rest of the draft data\n+   * @throws RuntimeException when an error occurs while writing to the table\n+   */\n+  public <T extends ETLConfig> void writeDraft(DraftId draftId,\n+                                               DraftStoreRequest<T> draftStoreRequest) {\n+    // TODO(CDAP-17456): Add collision detection using the hashes\n+    store.writeDraft(draftId, draftStoreRequest);\n+\n+    metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+  }\n+\n+  /**\n+   * Delete the given draft\n+   *\n+   * @param draftId {@link DraftId} that is used to uniquely identify a draft\n+   * @throws RuntimeException when an error occurs while fetching from the table\n+   * @throws DraftNotFoundException if the draft does not exist\n+   */\n+  public void deleteDraft(DraftId draftId) {\n+    // Make sure the draft exists before attempting to delete it\n+    getDraft(draftId);\n+    store.deleteDraft(draftId);\n+\n+    metrics.gauge(Constants.Metrics.DRAFT_COUNT, store.getDraftCount());\n+  }\n+\n+  /**\n+   * Checks if the given field exists in the {@link DraftStore} table spec. This should be used for validation.\n+   *\n+   * @param fieldName name of the field to check\n+   * @return True if the field exists in the {@link DraftStore} table spec\n+   */\n+  public boolean fieldExists(String fieldName) {\n+    Map<String, FieldType.Type> fieldTypes = DraftStore.TABLE_SPEC\n+      .getFieldTypes()\n+      .stream()\n+      .collect(Collectors.toMap(FieldType::getName, FieldType::getType));\n+    return fieldTypes.containsKey(fieldName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTI0MzUxMA=="}, "originalCommit": {"oid": "a9a63d6e8c1752ffaa74c04119fb07f53e1df9eb"}, "originalPosition": 125}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2536, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}