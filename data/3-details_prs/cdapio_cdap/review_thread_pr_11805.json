{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NjAwOTU2", "number": 11805, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoxODo1OVrODWW7lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDo0NzoyOFrODWXV-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzcwOTY3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/DAG/Nodes/AlertPublisherNode/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoxODo1OVrOFbEsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMTo0NTozM1rOFbGvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMjc0Mg==", "bodyText": "i'm not sure i understand this condition, why are we checking the target?", "url": "https://github.com/cdapio/cdap/pull/11805#discussion_r363932742", "createdAt": "2020-01-07T20:18:59Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/DAG/Nodes/AlertPublisherNode/index.tsx", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+*/\n+\n+import withStyles from '@material-ui/core/styles/withStyles';\n+import { IAbstractNodeProps, AbstractNode } from 'components/DAG/Nodes/AbstractNode';\n+import { genericNodeStyles } from 'components/DAG/Nodes/utilities';\n+\n+const styles = genericNodeStyles({\n+  border: `1px solid #ffba01`,\n+  '&.drag-hover': {\n+    backgroundColor: 'rgba(255, 186, 1, 0.1)',\n+  },\n+});\n+interface IAlertPublisherProps extends IAbstractNodeProps<typeof styles> {}\n+class AlertPublisherComponent extends AbstractNode<IAlertPublisherProps> {\n+  public type = 'alertpublisher';\n+\n+  public checkForValidIncomingConnection = (connObj) => {\n+    if (connObj.connection.target.getAttribute('data-node-type') !== 'alertpublisher') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573f3c0efe46b75473903f7b0d6750b28d893668"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2NjI1MQ==", "bodyText": "Every node will have checkForValidIncomingConnection condition to determine if the current connection is valid or not.\nWe register this callback from each node in the DAGRenderer init node function .\nWhen a connection event is fired when user connects two nodes we call all the callbacks from the nodes.\nIt is basically a reduce on all the callbacks and the eventual reduce value should be true for the connection to be drawn. It it returns false then one of the nodes involved in the connection rejects this connection so we don't render the connection.\n\nThe advantage of this is having such custom logic specific to node within the node.\nHope I made sense.\nNow that I think about it I think I can add this function as a static function and have it registered as not per instance of the node. Will add that change.\nEDIT:\nThe connection validation event handlers are still part of the instance but we register them based on node types and not node instances. This prevents adding a handler for each instance of the node and rather adds one handler per node type.", "url": "https://github.com/cdapio/cdap/pull/11805#discussion_r363966251", "createdAt": "2020-01-07T21:45:33Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DAG/Nodes/AlertPublisherNode/index.tsx", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+*/\n+\n+import withStyles from '@material-ui/core/styles/withStyles';\n+import { IAbstractNodeProps, AbstractNode } from 'components/DAG/Nodes/AbstractNode';\n+import { genericNodeStyles } from 'components/DAG/Nodes/utilities';\n+\n+const styles = genericNodeStyles({\n+  border: `1px solid #ffba01`,\n+  '&.drag-hover': {\n+    backgroundColor: 'rgba(255, 186, 1, 0.1)',\n+  },\n+});\n+interface IAlertPublisherProps extends IAbstractNodeProps<typeof styles> {}\n+class AlertPublisherComponent extends AbstractNode<IAlertPublisherProps> {\n+  public type = 'alertpublisher';\n+\n+  public checkForValidIncomingConnection = (connObj) => {\n+    if (connObj.connection.target.getAttribute('data-node-type') !== 'alertpublisher') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMjc0Mg=="}, "originalCommit": {"oid": "573f3c0efe46b75473903f7b0d6750b28d893668"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0Nzc3NzIyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/DAG/Nodes/TransformNode/index.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDo0NzoyOFrOFbFWTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMTo1MTozOFrOFbG4vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MzUwMQ==", "bodyText": "should there be an abstract component for these endpoints as well?", "url": "https://github.com/cdapio/cdap/pull/11805#discussion_r363943501", "createdAt": "2020-01-07T20:47:28Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/DAG/Nodes/TransformNode/index.tsx", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+*/\n+\n+import * as React from 'react';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+import { IAbstractNodeProps, AbstractNode } from 'components/DAG/Nodes/AbstractNode';\n+import { genericNodeStyles } from 'components/DAG/Nodes/utilities';\n+import If from 'components/If';\n+import ButtonBase from '@material-ui/core/ButtonBase';\n+const styles = genericNodeStyles({\n+  border: `1px solid #4586f3`,\n+  '&.drag-hover': {\n+    backgroundColor: 'rgba(69, 134, 243, 0.1)',\n+  },\n+});\n+interface ITransformNodeProps extends IAbstractNodeProps<typeof styles> {}\n+class TransformNodeComponent extends AbstractNode<ITransformNodeProps> {\n+  public type = 'transform';\n+  public alertEndpointRef: HTMLElement | null;\n+  public errorEndpointRef: HTMLElement | null;\n+  public getEndpointParams = () => {\n+    const endPointConfigs = this.getEndpointConfig();\n+    const alertEndpointConfigs = this.getAlertEndpointConfig();\n+    const errorEndpointConfigs = this.getErrorEndpointConfig();\n+    return [\n+      {\n+        element: this.regularEndpointRef,\n+        params: endPointConfigs,\n+        referenceParams: {},\n+      },\n+      {\n+        element: this.alertEndpointRef,\n+        params: alertEndpointConfigs,\n+        referenceParams: {},\n+      },\n+      {\n+        element: this.errorEndpointRef,\n+        params: errorEndpointConfigs,\n+        referenceParams: {},\n+      },\n+    ];\n+  };\n+  public checkForValidIncomingConnection = (connObj) => {\n+    if (connObj.connection.target.getAttribute('data-node-type') !== 'transform') {\n+      return true;\n+    }\n+    return (\n+      ['alertpublisher', 'sink'].indexOf(\n+        connObj.connection.source.getAttribute('data-node-type')\n+      ) === -1\n+    );\n+  };\n+\n+  public render() {\n+    const {\n+      classes,\n+      config: { showAlert = false, showError = false },\n+    } = this.props;\n+    const RegularEndpoint = () => (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "573f3c0efe46b75473903f7b0d6750b28d893668"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2ODcwMg==", "bodyText": "I didn't perceive it that way. Right now all nodes have a generic endpoint and if the node needs to change in their specific implementation then they can override this function (This is becoming a class function in AbstractNode in my next PR which will be overridden by child nodes if need be).", "url": "https://github.com/cdapio/cdap/pull/11805#discussion_r363968702", "createdAt": "2020-01-07T21:51:38Z", "author": {"login": "ajainarayanan"}, "path": "cdap-ui/app/cdap/components/DAG/Nodes/TransformNode/index.tsx", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+*/\n+\n+import * as React from 'react';\n+import withStyles from '@material-ui/core/styles/withStyles';\n+import { IAbstractNodeProps, AbstractNode } from 'components/DAG/Nodes/AbstractNode';\n+import { genericNodeStyles } from 'components/DAG/Nodes/utilities';\n+import If from 'components/If';\n+import ButtonBase from '@material-ui/core/ButtonBase';\n+const styles = genericNodeStyles({\n+  border: `1px solid #4586f3`,\n+  '&.drag-hover': {\n+    backgroundColor: 'rgba(69, 134, 243, 0.1)',\n+  },\n+});\n+interface ITransformNodeProps extends IAbstractNodeProps<typeof styles> {}\n+class TransformNodeComponent extends AbstractNode<ITransformNodeProps> {\n+  public type = 'transform';\n+  public alertEndpointRef: HTMLElement | null;\n+  public errorEndpointRef: HTMLElement | null;\n+  public getEndpointParams = () => {\n+    const endPointConfigs = this.getEndpointConfig();\n+    const alertEndpointConfigs = this.getAlertEndpointConfig();\n+    const errorEndpointConfigs = this.getErrorEndpointConfig();\n+    return [\n+      {\n+        element: this.regularEndpointRef,\n+        params: endPointConfigs,\n+        referenceParams: {},\n+      },\n+      {\n+        element: this.alertEndpointRef,\n+        params: alertEndpointConfigs,\n+        referenceParams: {},\n+      },\n+      {\n+        element: this.errorEndpointRef,\n+        params: errorEndpointConfigs,\n+        referenceParams: {},\n+      },\n+    ];\n+  };\n+  public checkForValidIncomingConnection = (connObj) => {\n+    if (connObj.connection.target.getAttribute('data-node-type') !== 'transform') {\n+      return true;\n+    }\n+    return (\n+      ['alertpublisher', 'sink'].indexOf(\n+        connObj.connection.source.getAttribute('data-node-type')\n+      ) === -1\n+    );\n+  };\n+\n+  public render() {\n+    const {\n+      classes,\n+      config: { showAlert = false, showError = false },\n+    } = this.props;\n+    const RegularEndpoint = () => (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk0MzUwMQ=="}, "originalCommit": {"oid": "573f3c0efe46b75473903f7b0d6750b28d893668"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3009, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}