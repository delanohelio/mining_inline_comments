{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3Mzc0MzEx", "number": 12251, "title": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)", "bodyText": "Currently the code that updates the states within the UI is complicated, due to the deeply nested properties. We'll use immutable.js for updating states in order to improve performance and improve the code styling.", "createdAt": "2020-06-03T18:20:33Z", "url": "https://github.com/cdapio/cdap/pull/12251", "merged": true, "mergeCommit": {"oid": "1a0ce2d8c06f9985681f3145b6ab377b287f5250"}, "closed": true, "closedAt": "2020-06-22T20:36:49Z", "author": {"login": "jennac3"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp7QFugBqjM0MzAxNzkwODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABct2zEsABqjM0NzAwMjY2NTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b14a11b094483bb5efef222fc5e8f7b57689a10", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/3b14a11b094483bb5efef222fc5e8f7b57689a10", "committedDate": "2020-06-03T18:19:56Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}, "afterCommit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/12a3974e99884ac7ba9a8829ed665243a241df77", "committedDate": "2020-06-10T15:18:29Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDA4NDAz", "url": "https://github.com/cdapio/cdap/pull/12251#pullrequestreview-429008403", "createdAt": "2020-06-11T15:10:26Z", "commit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToxMDoyN1rOGihwIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToxMDoyN1rOGihwIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1Nzc2MQ==", "bodyText": "Instead of checking if widgetInfo.get(widgetID) is undefined, you can use has() to check if the key exists", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r438857761", "createdAt": "2020-06-11T15:10:27Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -161,7 +146,7 @@ const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n       <div className={classes.widgetContainer}>\n         {activeWidgets.map((widgetID, widgetIndex) => {\n           return (\n-            <If condition={widgetInfo[widgetID]} key={widgetIndex}>\n+            <If key={widgetIndex} condition={widgetInfo.get(widgetID) !== undefined}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDA5ODY4", "url": "https://github.com/cdapio/cdap/pull/12251#pullrequestreview-429009868", "createdAt": "2020-06-11T15:12:05Z", "commit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToxMjowNVrOGih0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToxMjowNVrOGih0bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1ODg2MA==", "bodyText": "you can also use isEmpty() to check for an empty Map or List", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r438858860", "createdAt": "2020-06-11T15:12:05Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/index.tsx", "diffHunk": "@@ -78,66 +79,50 @@ const WidgetCollectionView: React.FC<IWidgetCollectionProps> = ({\n   widgetToAttributes,\n   setWidgetToAttributes,\n }) => {\n-  const [activeWidgets, setActiveWidgets] = React.useState(groupID ? groupToWidgets[groupID] : []);\n+  const activeWidgets = groupID ? groupToWidgets.get(groupID) : fromJS([]);\n   const [openWidgetIndex, setOpenWidgetIndex] = React.useState(null);\n \n-  React.useEffect(() => {\n-    if (groupID) {\n-      setActiveWidgets(groupToWidgets[groupID]);\n-    } else {\n-      setActiveWidgets([]);\n-    }\n-  }, [groupToWidgets]);\n-\n   function addWidgetToGroup(index: number) {\n     return () => {\n       const newWidgetID = 'Widget_' + uuidV4();\n \n       // Add a new widget's ID at the specified index\n-      const newWidgets = [...activeWidgets];\n-      if (newWidgets.length === 0) {\n-        newWidgets.splice(0, 0, newWidgetID);\n+      let newWidgets;\n+      if (activeWidgets.size === 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDMwMDUx", "url": "https://github.com/cdapio/cdap/pull/12251#pullrequestreview-429030051", "createdAt": "2020-06-11T15:29:00Z", "commit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyOTowMFrOGiilkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyOTowMFrOGiilkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MTQ0Mg==", "bodyText": "Do we need the if/else here? It seems like keyvaluePairs is the same no matter what", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r438871442", "createdAt": "2020-06-11T15:29:00Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/WidgetCollection/WidgetAttributesCollection/WidgetAttributeInput/AttributeMultipleValuesInput/index.tsx", "diffHunk": "@@ -219,38 +223,30 @@ const AttributeMultipleValuesInputView = ({\n     setCurrentInput(getCurrentWidgetAttributeValues(newType));\n \n     // When user switches the 'selectedType', the value will reset back to an empty array.\n-    setWidgetToAttributes((prevObjs) => ({\n-      ...prevObjs,\n-      [widgetID]: { ...prevObjs[widgetID], [field]: [] },\n-    }));\n+    setWidgetToAttributes(fromJS(widgetToAttributes).setIn([widgetID, field], fromJS([])));\n   };\n \n   const onAttributeChange = (newVal) => {\n     setCurrentInput(newVal);\n-    setWidgetToAttributes((prevObjs) => ({\n-      ...prevObjs,\n-      [widgetID]: { ...prevObjs[widgetID], [field]: newVal.split(COMMON_DELIMITER) },\n-    }));\n+    setWidgetToAttributes(\n+      fromJS(widgetToAttributes).setIn([widgetID, field], fromJS(newVal.split(COMMON_DELIMITER)))\n+    );\n   };\n \n   const onKeyValueAttributeChange = (keyvalue, type: SupportedType) => {\n+    let keyvaluePairs;\n     if (type === SupportedType.ValueLabelPair) {\n-      const keyvaluePairs = keyvalue.pairs.map((pair) => {\n+      keyvaluePairs = keyvalue.pairs.map((pair) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77"}, "originalPosition": 107}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12a3974e99884ac7ba9a8829ed665243a241df77", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/12a3974e99884ac7ba9a8829ed665243a241df77", "committedDate": "2020-06-10T15:18:29Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}, "afterCommit": {"oid": "9fc487b8687fcdcb444b8c726d8bad22ce5204e0", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/9fc487b8687fcdcb444b8c726d8bad22ce5204e0", "committedDate": "2020-06-17T14:02:58Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffd3d9f9b9a488fd68dc36b7907f57529c319f10", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/ffd3d9f9b9a488fd68dc36b7907f57529c319f10", "committedDate": "2020-06-17T14:06:43Z", "message": "clean up"}, "afterCommit": {"oid": "d8ed7dd41b5451ac25d62c8d0db977a72ebc4141", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/d8ed7dd41b5451ac25d62c8d0db977a72ebc4141", "committedDate": "2020-06-22T15:03:57Z", "message": "pull from develop"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8ed7dd41b5451ac25d62c8d0db977a72ebc4141", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/d8ed7dd41b5451ac25d62c8d0db977a72ebc4141", "committedDate": "2020-06-22T15:03:57Z", "message": "pull from develop"}, "afterCommit": {"oid": "088f051f4097cc56283fc15f7e2726a7fd62b2b8", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/088f051f4097cc56283fc15f7e2726a7fd62b2b8", "committedDate": "2020-06-22T15:14:15Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d38b69abd0cfd8068d5f21d4b64168790d815f11", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/d38b69abd0cfd8068d5f21d4b64168790d815f11", "committedDate": "2020-06-22T15:16:56Z", "message": "pull from develop"}, "afterCommit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/10f0bd497be09aa92fd8717382a981e184e15e02", "committedDate": "2020-06-22T15:17:53Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MTYxOTY3", "url": "https://github.com/cdapio/cdap/pull/12251#pullrequestreview-435161967", "createdAt": "2020-06-22T18:10:13Z", "commit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODoxMDoxM1rOGnLsiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODoyMzoyNVrOGnMHLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczOTI3Mg==", "bodyText": "it's better to be explicit when you know the type you want to convert (ie. use Map)", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r443739272", "createdAt": "2020-06-22T18:10:13Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/index.tsx", "diffHunk": "@@ -94,30 +94,32 @@ const ConfigurationGroupsCollectionView: React.FC<ICreateContext & WithStyles<ty\n       const newGroupID = 'ConfigGroup_' + uuidV4();\n \n       // Add a new group's ID at the specified index\n-      const newGroups = [...localConfigurationGroups];\n-      if (newGroups.length === 0) {\n-        newGroups.splice(0, 0, newGroupID);\n+      let newGroups;\n+      if (localConfigurationGroups.isEmpty()) {\n+        newGroups = localConfigurationGroups.insert(0, newGroupID);\n       } else {\n-        newGroups.splice(index + 1, 0, newGroupID);\n+        newGroups = localConfigurationGroups.insert(index + 1, newGroupID);\n       }\n       setLocalConfigurationGroups(newGroups);\n \n       // Set the activeGroupIndex to the new group's index\n-      if (newGroups.length <= 1) {\n+      if (newGroups.size <= 1) {\n         setActiveGroupIndex(0);\n       } else {\n         setActiveGroupIndex(index + 1);\n       }\n \n       // Set the mappings for the newly added group\n-      setLocalGroupToInfo({\n-        ...localGroupToInfo,\n-        [newGroupID]: {\n-          label: '',\n-          description: '',\n-        } as IConfigurationGroupInfo,\n-      });\n-      setLocalGroupToWidgets({ ...localGroupToWidgets, [newGroupID]: [] });\n+      setLocalGroupToInfo(\n+        localGroupToInfo.set(\n+          newGroupID,\n+          fromJS({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzczOTQ2Ng==", "bodyText": "same here, you can use empty list", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r443739466", "createdAt": "2020-06-22T18:10:36Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/index.tsx", "diffHunk": "@@ -94,30 +94,32 @@ const ConfigurationGroupsCollectionView: React.FC<ICreateContext & WithStyles<ty\n       const newGroupID = 'ConfigGroup_' + uuidV4();\n \n       // Add a new group's ID at the specified index\n-      const newGroups = [...localConfigurationGroups];\n-      if (newGroups.length === 0) {\n-        newGroups.splice(0, 0, newGroupID);\n+      let newGroups;\n+      if (localConfigurationGroups.isEmpty()) {\n+        newGroups = localConfigurationGroups.insert(0, newGroupID);\n       } else {\n-        newGroups.splice(index + 1, 0, newGroupID);\n+        newGroups = localConfigurationGroups.insert(index + 1, newGroupID);\n       }\n       setLocalConfigurationGroups(newGroups);\n \n       // Set the activeGroupIndex to the new group's index\n-      if (newGroups.length <= 1) {\n+      if (newGroups.size <= 1) {\n         setActiveGroupIndex(0);\n       } else {\n         setActiveGroupIndex(index + 1);\n       }\n \n       // Set the mappings for the newly added group\n-      setLocalGroupToInfo({\n-        ...localGroupToInfo,\n-        [newGroupID]: {\n-          label: '',\n-          description: '',\n-        } as IConfigurationGroupInfo,\n-      });\n-      setLocalGroupToWidgets({ ...localGroupToWidgets, [newGroupID]: [] });\n+      setLocalGroupToInfo(\n+        localGroupToInfo.set(\n+          newGroupID,\n+          fromJS({\n+            label: '',\n+            description: '',\n+          })\n+        )\n+      );\n+      setLocalGroupToWidgets(localGroupToWidgets.set(newGroupID, fromJS([])));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0MjE2MA==", "bodyText": "is localGroupToInfo already an immutable object? If it is, then you don't have to call fromJS. If it's not immutable, why not?", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r443742160", "createdAt": "2020-06-22T18:15:56Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/ConfigurationGroupsCollection/index.tsx", "diffHunk": "@@ -126,21 +128,23 @@ const ConfigurationGroupsCollectionView: React.FC<ICreateContext & WithStyles<ty\n       setActiveGroupIndex(null);\n \n       // Delete a group at the specified index\n-      const newGroups = [...localConfigurationGroups];\n-      const groupToDelete = newGroups[index];\n-      newGroups.splice(index, 1);\n+      const groupToDelete = localConfigurationGroups.get(index);\n+\n+      const newGroups = localConfigurationGroups.remove(index);\n       setLocalConfigurationGroups(newGroups);\n \n       // Delete the corresponding data of the group\n-      const { [groupToDelete]: info, ...restGroupToInfo } = localGroupToInfo;\n-      const { [groupToDelete]: widgets, ...restGroupToWidgets } = localGroupToWidgets;\n-      setLocalGroupToInfo(restGroupToInfo);\n-      setLocalGroupToWidgets(restGroupToWidgets);\n+      const newGroupToInfo = fromJS(localGroupToInfo.delete(groupToDelete));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0Mjk4MA==", "bodyText": "the values of the info should be an immutable object already", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r443742980", "createdAt": "2020-06-22T18:17:27Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/Filters/FilterCollection/FilterConditionInput/index.tsx", "diffHunk": "@@ -56,48 +57,53 @@ const FilterConditionInputview: React.FC<IFilterConditionInputProps> = ({\n   setFilterToCondition,\n   widgetInfo,\n }) => {\n-  const existingCondition = filterToCondition[filterID];\n+  const existingCondition = filterToCondition.get(filterID);\n \n   const [conditionMode, setConditionMode] = React.useState(\n-    existingCondition.expression ? FilterConditionMode.Expression : FilterConditionMode.Operator\n+    existingCondition.get('expression')\n+      ? FilterConditionMode.Expression\n+      : FilterConditionMode.Operator\n   );\n \n   const allWidgetNames = widgetInfo\n-    ? Object.values(widgetInfo)\n-        .map((info: IWidgetInfo) => info.name)\n-        .filter((widgetName) => !isNil(widgetName))\n-    : [];\n+    ? widgetInfo\n+        .valueSeq()\n+        .map((info) => fromJS(info).get('name'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0NDYxOQ==", "bodyText": "missed this before, but if the top level of the row is an <If>, you can conditionally render the row by checking if (!showToInfo.has(showID)) { return null; } instead", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r443744619", "createdAt": "2020-06-22T18:20:41Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/Filters/FilterCollection/FilterShowlistInput/index.tsx", "diffHunk": "@@ -72,78 +74,65 @@ const FilterShowlistInputView: React.FC<IFilterShowlistInputProps> = ({\n   widgetInfo,\n }) => {\n   const allWidgetNames = widgetInfo\n-    ? Object.values(widgetInfo)\n-        .map((info: IWidgetInfo) => info.name)\n-        .filter((widgetName) => !isNil(widgetName))\n-    : [];\n+    ? widgetInfo\n+        .valueSeq()\n+        .map((info) => fromJS(info).get('name'))\n+        .filter((widgetName) => !isNil(widgetName) && !isNil(widgetName))\n+    : List([]);\n \n   function setShowProperty(showID: string, property: string) {\n     return (val) => {\n-      setShowToInfo((prevObjs) => ({\n-        ...prevObjs,\n-        [showID]: { ...prevObjs[showID], [property]: val },\n-      }));\n+      setShowToInfo(fromJS(showToInfo).setIn([showID, property], val));\n     };\n   }\n \n-  function addShowToFilter(filterObjID: string, index?: number) {\n+  function addShowToFilter(filterObjID: string, index: number) {\n     const newShowID = 'Show_' + uuidV4();\n \n-    setShowToInfo({\n-      ...showToInfo,\n-      [newShowID]: {\n-        name: '',\n-      } as IPropertyShowConfig,\n-    });\n-\n-    if (index === undefined) {\n-      setFilterToShowList({\n-        ...filterToShowList,\n-        [filterObjID]: [...filterToShowList[filterObjID], newShowID],\n-      });\n+    setShowToInfo(\n+      showToInfo.set(\n+        newShowID,\n+        fromJS({\n+          name: '',\n+          type: '',\n+        })\n+      )\n+    );\n+\n+    const showlist = filterToShowList.get(filterObjID);\n+\n+    let newShowlist;\n+    if (showlist.isEmpty()) {\n+      newShowlist = showlist.insert(0, newShowID);\n     } else {\n-      const showList = filterToShowList[filterObjID];\n-\n-      if (showList.length === 0) {\n-        showList.splice(0, 0, newShowID);\n-      } else {\n-        showList.splice(index + 1, 0, newShowID);\n-      }\n-\n-      setFilterToShowList({\n-        ...filterToShowList,\n-        [filterObjID]: showList,\n-      });\n+      newShowlist = showlist.insert(index + 1, newShowID);\n     }\n+\n+    setFilterToShowList(filterToShowList.set(filterObjID, newShowlist));\n   }\n \n   function deleteShowFromFilter(filterObjID: string, index: number) {\n-    const showList = filterToShowList[filterObjID];\n-\n-    const showToDelete = showList[index];\n-\n-    showList.splice(index, 1);\n+    const showlist = filterToShowList.get(filterObjID);\n+    const showToDelete = showlist.get(index);\n \n-    setFilterToShowList({\n-      ...filterToShowList,\n-      [filterObjID]: showList,\n-    });\n+    const newShowlist = showlist.remove(index);\n+    setFilterToShowList(filterToShowList.set(filterObjID, newShowlist));\n \n-    const { [showToDelete]: tmp, ...restShowToInfo } = showToInfo;\n-    setShowToInfo(restShowToInfo);\n+    const newShowToInfo = fromJS(showToInfo.delete(showToDelete));\n+    setShowToInfo(newShowToInfo);\n   }\n \n   return (\n-    <If condition={!isNil(filterToShowList[filterID])}>\n+    <If condition={filterToShowList.has(filterID)}>\n       <Heading type={HeadingTypes.h6} label=\"Add widgets to configure\" />\n-      {filterToShowList[filterID].map((showID: string, showIndex: number) => {\n+      {filterToShowList.get(filterID).map((showID: string, showIndex: number) => {\n         return (\n-          <If key={showID} condition={showToInfo[showID]}>\n+          <If key={showID} condition={showToInfo.has(showID)}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc0NjA5NA==", "bodyText": "i think you should keep the spec version on the variable", "url": "https://github.com/cdapio/cdap/pull/12251#discussion_r443746094", "createdAt": "2020-06-22T18:23:25Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PluginJSONCreator/Create/Content/JsonMenu/utilities.ts", "diffHunk": "@@ -27,65 +22,61 @@ function getJSONConfig(widgetJSONData) {\n   } = widgetJSONData;\n \n   const configurationGroupsData = configurationGroups.map((groupID: string) => {\n-    const groupLabel = groupToInfo[groupID].label;\n-    const widgetData = groupToWidgets[groupID].map((widgetID: string) => {\n-      const info: IWidgetInfo = widgetInfo[widgetID];\n-      const widgetAttributes = widgetToAttributes[widgetID];\n-\n-      return {\n-        'widget-type': info.widgetType,\n-        label: info.label,\n-        name: info.name,\n-        ...(info.widgetCategory && { 'widget-category': info.widgetCategory }),\n+    const groupLabel = groupToInfo.get(groupID).get('label');\n+    const widgetData = groupToWidgets.get(groupID).map((widgetID: string) => {\n+      const info = widgetInfo.get(widgetID);\n+      const widgetAttributes = widgetToAttributes.get(widgetID);\n+\n+      return fromJS({\n+        'widget-type': info.get('widgetType'),\n+        label: info.get('label'),\n+        name: info.get('name'),\n+        ...(info.get('widgetCategory') && {\n+          'widget-category': info.get('widgetCategory'),\n+        }),\n         ...(widgetAttributes &&\n-          Object.keys(widgetAttributes).length > 0 && {\n+          List(widgetAttributes.keys()).size > 0 && {\n             'widget-attributes': widgetAttributes,\n           }),\n-      };\n+      });\n     });\n-    return {\n+    return fromJS({\n       label: groupLabel,\n       properties: widgetData,\n-    };\n+    });\n   });\n \n   const filtersData = filters.map((filterID) => {\n-    const filterToShowListData = filterToShowList[filterID].map((showID) => {\n-      let showListData;\n-      if (showToInfo[showID].type) {\n-        showListData = {\n-          name: showToInfo[showID].name,\n-          type: showToInfo[showID].type,\n-        };\n-      } else {\n-        showListData = {\n-          name: showToInfo[showID].name,\n-        };\n-      }\n-      return showListData;\n+    const filterToShowListData = filterToShowList.get(filterID).map((showID) => {\n+      return fromJS({\n+        name: showToInfo.get(showID).get('name'),\n+        ...(showToInfo.get(showID).get('type') && {\n+          type: showToInfo.get(showID).get('type'),\n+        }),\n+      });\n     });\n-    return {\n-      name: filterToName[filterID],\n-      condition: filterToCondition[filterID],\n+    return fromJS({\n+      name: filterToName.get(filterID),\n+      condition: filterToCondition.get(filterID),\n       show: filterToShowListData,\n-    };\n+    });\n   });\n \n   const config = {\n     metadata: {\n-      'spec-version': SPEC_VERSION,\n+      'spec-version': '1.5',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f0bd497be09aa92fd8717382a981e184e15e02"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MjI0MTIx", "url": "https://github.com/cdapio/cdap/pull/12251#pullrequestreview-435224121", "createdAt": "2020-06-22T19:48:30Z", "commit": {"oid": "05a325aa694722f8f8b14e68216ac521f2d86a02"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05a325aa694722f8f8b14e68216ac521f2d86a02", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/05a325aa694722f8f8b14e68216ac521f2d86a02", "committedDate": "2020-06-22T19:40:21Z", "message": "fix"}, "afterCommit": {"oid": "c9f8a3326b3594c7fd6c59335ba4d2ef20a83493", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/c9f8a3326b3594c7fd6c59335ba4d2ef20a83493", "committedDate": "2020-06-22T20:13:38Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9f8a3326b3594c7fd6c59335ba4d2ef20a83493", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/c9f8a3326b3594c7fd6c59335ba4d2ef20a83493", "committedDate": "2020-06-22T20:13:38Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}, "afterCommit": {"oid": "611e494b1a940b14377e9be8508b8770acefeb30", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/611e494b1a940b14377e9be8508b8770acefeb30", "committedDate": "2020-06-22T20:20:08Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6522bcf1bd28775665b8e1854e50166b8d99769", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/c6522bcf1bd28775665b8e1854e50166b8d99769", "committedDate": "2020-06-22T20:23:08Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "611e494b1a940b14377e9be8508b8770acefeb30", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/611e494b1a940b14377e9be8508b8770acefeb30", "committedDate": "2020-06-22T20:20:08Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}, "afterCommit": {"oid": "c6522bcf1bd28775665b8e1854e50166b8d99769", "author": {"user": {"login": "jennac3", "name": "Jenna Choi"}}, "url": "https://github.com/cdapio/cdap/commit/c6522bcf1bd28775665b8e1854e50166b8d99769", "committedDate": "2020-06-22T20:23:08Z", "message": "[CDAP-16893] Use immutable.js for updating states (plugin JSON Creator)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1973, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}