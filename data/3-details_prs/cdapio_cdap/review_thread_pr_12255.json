{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjA1ODU3", "number": 12255, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxMDoxM1rOECp6Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxMDoxM1rOECp6Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjE5MjIzOnYy", "diffSide": "RIGHT", "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/ExistingDataprocProvisioner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzoxMDoxM1rOGfPsGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzozMTo1MlrOGfQd3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNjA4OA==", "bodyText": "nit: can use CLUSTER_NAME instead", "url": "https://github.com/cdapio/cdap/pull/12255#discussion_r435416088", "createdAt": "2020-06-04T17:10:13Z", "author": {"login": "CuriousVini"}, "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/ExistingDataprocProvisioner.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.runtime.spi.provisioner.dataproc;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.runtime.spi.RuntimeMonitorType;\n+import io.cdap.cdap.runtime.spi.provisioner.Cluster;\n+import io.cdap.cdap.runtime.spi.provisioner.ClusterStatus;\n+import io.cdap.cdap.runtime.spi.provisioner.PollingStrategies;\n+import io.cdap.cdap.runtime.spi.provisioner.PollingStrategy;\n+import io.cdap.cdap.runtime.spi.provisioner.ProvisionerContext;\n+import io.cdap.cdap.runtime.spi.provisioner.ProvisionerSpecification;\n+import io.cdap.cdap.runtime.spi.ssh.SSHKeyPair;\n+import io.cdap.cdap.runtime.spi.ssh.SSHPublicKey;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Provisioner for connecting an existing Dataproc cluster.\n+ */\n+public class ExistingDataprocProvisioner extends AbstractDataprocProvisioner {\n+\n+  private static final ProvisionerSpecification SPEC = new ProvisionerSpecification(\n+    \"gcp-existing-dataproc\", \"Existing Dataproc\",\n+    \"Connect and Execute jobs on existing Dataproc cluster.\");\n+  // Keys for looking up system properties\n+\n+  private static final String CLUSTER_NAME = \"clusterName\";\n+  private static final String SSH_USER = \"sshUser\";\n+  private static final String SSH_KEY = \"sshKey\";\n+\n+  public ExistingDataprocProvisioner() {\n+    super(SPEC);\n+  }\n+\n+  @Override\n+  public void validateProperties(Map<String, String> properties) {\n+    // Creates the DataprocConf for validation\n+    DataprocConf.create(properties);\n+\n+    String clusterName = properties.get(\"clusterName\");\n+    if (Strings.isNullOrEmpty(clusterName)) {\n+      throw new IllegalArgumentException(\"Dataproc cluster name is missing\");\n+    }\n+  }\n+\n+  @Override\n+  protected String getClusterName(ProvisionerContext context) {\n+    return context.getProperties().get(\"clusterName\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "599aaa8887ecc692163d6bd0ccecc7276668390d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQyODgzMQ==", "bodyText": "fixed", "url": "https://github.com/cdapio/cdap/pull/12255#discussion_r435428831", "createdAt": "2020-06-04T17:31:52Z", "author": {"login": "chtyim"}, "path": "cdap-runtime-ext-dataproc/src/main/java/io/cdap/cdap/runtime/spi/provisioner/dataproc/ExistingDataprocProvisioner.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package io.cdap.cdap.runtime.spi.provisioner.dataproc;\n+\n+import com.google.common.base.Strings;\n+import io.cdap.cdap.runtime.spi.RuntimeMonitorType;\n+import io.cdap.cdap.runtime.spi.provisioner.Cluster;\n+import io.cdap.cdap.runtime.spi.provisioner.ClusterStatus;\n+import io.cdap.cdap.runtime.spi.provisioner.PollingStrategies;\n+import io.cdap.cdap.runtime.spi.provisioner.PollingStrategy;\n+import io.cdap.cdap.runtime.spi.provisioner.ProvisionerContext;\n+import io.cdap.cdap.runtime.spi.provisioner.ProvisionerSpecification;\n+import io.cdap.cdap.runtime.spi.ssh.SSHKeyPair;\n+import io.cdap.cdap.runtime.spi.ssh.SSHPublicKey;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Provisioner for connecting an existing Dataproc cluster.\n+ */\n+public class ExistingDataprocProvisioner extends AbstractDataprocProvisioner {\n+\n+  private static final ProvisionerSpecification SPEC = new ProvisionerSpecification(\n+    \"gcp-existing-dataproc\", \"Existing Dataproc\",\n+    \"Connect and Execute jobs on existing Dataproc cluster.\");\n+  // Keys for looking up system properties\n+\n+  private static final String CLUSTER_NAME = \"clusterName\";\n+  private static final String SSH_USER = \"sshUser\";\n+  private static final String SSH_KEY = \"sshKey\";\n+\n+  public ExistingDataprocProvisioner() {\n+    super(SPEC);\n+  }\n+\n+  @Override\n+  public void validateProperties(Map<String, String> properties) {\n+    // Creates the DataprocConf for validation\n+    DataprocConf.create(properties);\n+\n+    String clusterName = properties.get(\"clusterName\");\n+    if (Strings.isNullOrEmpty(clusterName)) {\n+      throw new IllegalArgumentException(\"Dataproc cluster name is missing\");\n+    }\n+  }\n+\n+  @Override\n+  protected String getClusterName(ProvisionerContext context) {\n+    return context.getProperties().get(\"clusterName\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxNjA4OA=="}, "originalCommit": {"oid": "599aaa8887ecc692163d6bd0ccecc7276668390d"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3359, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}