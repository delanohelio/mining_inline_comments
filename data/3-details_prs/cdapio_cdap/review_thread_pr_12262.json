{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MTQ2MTU5", "number": 12262, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyMDo0MFrOEC_2EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxMTo0OVrOEDkTqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc4NjQxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyMDo0MFrOGfy3aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1NzozOVrOGf2J6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MjQyNw==", "bodyText": "Since we are using map, I believe we should assign key to each element.", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r435992427", "createdAt": "2020-06-05T15:20:40Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = `${recordType} records have not been generated. Please verify your logic or try sending more data.`;\n+    } else {\n+      // default message\n+      msg = `${recordType} records are not available. Please try running preview again.`;\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records)) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName) => {\n+              return <CustomTableCell>{fieldName}</CustomTableCell>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NjMxMw==", "bodyText": "done!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436046313", "createdAt": "2020-06-05T16:57:39Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = `${recordType} records have not been generated. Please verify your logic or try sending more data.`;\n+    } else {\n+      // default message\n+      msg = `${recordType} records are not available. Please try running preview again.`;\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records)) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName) => {\n+              return <CustomTableCell>{fieldName}</CustomTableCell>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MjQyNw=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc4OTIyOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyMToyM1rOGfy5Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo0Nzo0NFrOGf12Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5Mjg5OA==", "bodyText": "Should these strings (msg) that represents messages go to a separate constant file?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r435992898", "createdAt": "2020-06-05T15:21:23Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0MTMxNQ==", "bodyText": "Have moved to the i18n yaml file :)", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436041315", "createdAt": "2020-06-05T16:47:44Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5Mjg5OA=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc4OTkxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyMTozNFrOGfy5sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjo1Nzo1OFrOGf2KoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MzAwOA==", "bodyText": "Since we are using map, I believe we should assign key to each element. Maybe we can assign its index?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r435993008", "createdAt": "2020-06-05T15:21:34Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = `${recordType} records have not been generated. Please verify your logic or try sending more data.`;\n+    } else {\n+      // default message\n+      msg = `${recordType} records are not available. Please try running preview again.`;\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records)) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName) => {\n+              return <CustomTableCell>{fieldName}</CustomTableCell>;\n+            })}\n+          </TableRow>\n+        </TableHead>\n+        <TableBody>\n+          {records.map((record) => {\n+            return (\n+              <TableRow className={classes.row}>\n+                {headers.map((fieldName) => {\n+                  return <CustomTableCell>{record[fieldName]}</CustomTableCell>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA0NjQ5Nw==", "bodyText": "done!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436046497", "createdAt": "2020-06-05T16:57:58Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = `${recordType} records have not been generated. Please verify your logic or try sending more data.`;\n+    } else {\n+      // default message\n+      msg = `${recordType} records are not available. Please try running preview again.`;\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records)) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName) => {\n+              return <CustomTableCell>{fieldName}</CustomTableCell>;\n+            })}\n+          </TableRow>\n+        </TableHead>\n+        <TableBody>\n+          {records.map((record) => {\n+            return (\n+              <TableRow className={classes.row}>\n+                {headers.map((fieldName) => {\n+                  return <CustomTableCell>{record[fieldName]}</CustomTableCell>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MzAwOA=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTc5MzA3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyMjoyNVrOGfy7uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzoyMTo0M1rOGf23WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MzUyOA==", "bodyText": "nit: Should these strings perhaps be placed separately at constants.ts file?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r435993528", "createdAt": "2020-06-05T15:22:25Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',\n+    marginBottom: 0,\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    paddingBottom: '5px',\n+    paddingLeft: '10px',\n+    marginLeft: '-10px',\n+    marginRight: '-10px',\n+    marginTop: '0',\n+  },\n+});\n+\n+interface IPreviewTableContainerProps extends WithStyles<typeof styles> {\n+  dataTables: ITableElements;\n+  selectedNode: INode;\n+}\n+\n+const TableContainer: React.FC<IPreviewTableContainerProps> = ({\n+  classes,\n+  dataTables,\n+  selectedNode,\n+}) => {\n+  const inputSpanningHeader = 'Input Records';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1Nzk0NA==", "bodyText": "Put in the i18n yaml file!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436057944", "createdAt": "2020-06-05T17:21:43Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',\n+    marginBottom: 0,\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    paddingBottom: '5px',\n+    paddingLeft: '10px',\n+    marginLeft: '-10px',\n+    marginRight: '-10px',\n+    marginTop: '0',\n+  },\n+});\n+\n+interface IPreviewTableContainerProps extends WithStyles<typeof styles> {\n+  dataTables: ITableElements;\n+  selectedNode: INode;\n+}\n+\n+const TableContainer: React.FC<IPreviewTableContainerProps> = ({\n+  classes,\n+  dataTables,\n+  selectedNode,\n+}) => {\n+  const inputSpanningHeader = 'Input Records';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5MzUyOA=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTgwMTY0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/hydrator/templates/partial/node-config-modal/preview-tab.html", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNToyNDo0OFrOGfzBPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODo1MFrOGf4DbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NDk0Mg==", "bodyText": "Should these fields (preview-id, selected-node-name, ...) get indented?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r435994942", "createdAt": "2020-06-05T15:24:48Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/hydrator/templates/partial/node-config-modal/preview-tab.html", "diffHunk": "@@ -14,153 +14,13 @@\n   the License.\n -->\n \n-<div class=\"row preview-no-data\" ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewData && !HydratorPlusPlusNodeConfigCtrl.previewLoading\">\n-  <div class=\"col-xs-12\">\n-    <h3 class=\"text-center\">\n-      Preview Data for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\" is not available.\n-    </h3>\n-  </div>\n-</div>\n-\n-<div class=\"row preview-no-data\" ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewLoading\">\n-  <div class=\"col-xs-12\">\n-    <h3 class=\"text-center\">\n-      <span class=\"fa fa-spin fa-refresh\"></span>\n-      <span>Fetching preview data</span>\n-    </h3>\n-  </div>\n-</div>\n-\n-<div class=\"row preview-tab\" ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData\">\n-\n-  <!-- INPUT RECORDS -->\n-  <div ng-class=\"{'col-xs-12': HydratorPlusPlusNodeConfigCtrl.state.isSink, 'preview-records input': true, 'col-xs-6': HydratorPlusPlusNodeConfigCtrl.state.isTransform }\"\n-       ng-if=\"!HydratorPlusPlusNodeConfigCtrl.state.isSource && !HydratorPlusPlusNodeConfigCtrl.state.isCondition\">\n-    <h4>Input Records</h4>\n-\n-    <div ng-repeat=\"(key, value) in HydratorPlusPlusNodeConfigCtrl.previewData.input\">\n-\n-      <h5 class=\"stage-title\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData.numInputStages > 1\">\n-        {{ key }}\n-      </h5>\n-      <div ng-if=\"value.records.length > 0\">\n-        <!-- INPUT RECORDS -->\n-        <table class=\"table table-bordered\">\n-          <thead>\n-            <th ng-repeat=\"field in ::value.schemaFields\">\n-              {{ ::field }}\n-            </th>\n-          </thead>\n-\n-          <tbody>\n-            <tr ng-repeat=\"row in ::value.records\">\n-              <td ng-repeat=\"field in ::value.schemaFields\">\n-                {{ ::row[field] }}\n-              </td>\n-            </tr>\n-          </tbody>\n-        </table>\n-      </div>\n-\n-      <div class=\"text-center\"\n-           ng-if=\"!value.records || value.records.length === 0\">\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus === 'RUNNING'\">\n-          Input records have not been generated yet. Please try again in some time.\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus !== 'RUNNING'\">\n-          Input records have not been generated. Please verify your logic, or try sending more data\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewStatus\">\n-          Input records are not available. Please try running preview again.\n-        </h4>\n-      </div>\n-    </div>\n-\n-    <div class=\"text-center\"\n-         ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData.numInputStages === 0\">\n-      <h4 class=\"message\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-          HydratorPlusPlusNodeConfigCtrl.previewStatus === 'RUNNING'\">\n-        Input records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\" yet. Please try again in some time.\n-      </h4>\n-      <h4 class=\"message\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-          HydratorPlusPlusNodeConfigCtrl.previewStatus !== 'RUNNING'\">\n-        Input records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please verify your logic, or try sending more data.\n-      </h4>\n-      <h4 class=\"message\"\n-          ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewStatus\">\n-        Input records are not available for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please try running preview again.\n-      </h4>\n-    </div>\n-\n-  </div>\n-\n-  <!-- OUTPUT RECORDS -->\n-  <div ng-class=\"{'col-xs-12': HydratorPlusPlusNodeConfigCtrl.state.isSource, 'preview-records output': true, 'col-xs-6': HydratorPlusPlusNodeConfigCtrl.state.isTransform}\"\n-      ng-if=\"!HydratorPlusPlusNodeConfigCtrl.state.isSink && !HydratorPlusPlusNodeConfigCtrl.state.isCondition\">\n-\n-    <h4>Output Records</h4>\n-\n-    <div ng-repeat=\"(key, value) in HydratorPlusPlusNodeConfigCtrl.previewData.output\">\n-\n-      <h5 class=\"stage-title\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData.numOutputStages > 1\">\n-        {{ key }}\n-      </h5>\n-      <div ng-if=\"value.records.length > 0\">\n-        <!-- OUTPUT RECORDS -->\n-        <table class=\"table table-bordered\">\n-          <thead>\n-            <th ng-repeat=\"field in ::value.schemaFields\">\n-              {{ ::field }}\n-            </th>\n-          </thead>\n-\n-          <tbody>\n-            <tr ng-repeat=\"row in ::value.records\">\n-              <td ng-repeat=\"field in ::value.schemaFields\">\n-                {{ ::row[field] }}\n-              </td>\n-            </tr>\n-          </tbody>\n-        </table>\n-      </div>\n-\n-      <div class=\"text-center\"\n-           ng-if=\"!value.records || value.records.length === 0\">\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus === 'RUNNING'\">\n-          Output records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\" yet. Please try again in some time.\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus !== 'RUNNING'\">\n-          Output records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please verify your logic, or try sending more data\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewStatus\">\n-          Output records are not available for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please try running preview again.\n-        </h4>\n-      </div>\n-    </div>\n-  </div>\n-\n-  <!-- NEITHER (CONDITION STAGES) -->\n-  <div class=\"col-xs-12 preview-records\"\n-        ng-if=\"HydratorPlusPlusNodeConfigCtrl.state.isCondition\">\n-    <h4>Input Records & Output Records</h4>\n-    <div class=\"text-center\">\n-      <h4 class=\"message\">\n-        Preview data is not supported for condition stages.\n-      </h4>\n-    </div>\n-  </div>\n+<div>\n+  <preview-data-view \n+  preview-id=\"HydratorPlusPlusNodeConfigCtrl.previewId\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzQyMA==", "bodyText": "done!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436077420", "createdAt": "2020-06-05T17:58:50Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/hydrator/templates/partial/node-config-modal/preview-tab.html", "diffHunk": "@@ -14,153 +14,13 @@\n   the License.\n -->\n \n-<div class=\"row preview-no-data\" ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewData && !HydratorPlusPlusNodeConfigCtrl.previewLoading\">\n-  <div class=\"col-xs-12\">\n-    <h3 class=\"text-center\">\n-      Preview Data for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\" is not available.\n-    </h3>\n-  </div>\n-</div>\n-\n-<div class=\"row preview-no-data\" ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewLoading\">\n-  <div class=\"col-xs-12\">\n-    <h3 class=\"text-center\">\n-      <span class=\"fa fa-spin fa-refresh\"></span>\n-      <span>Fetching preview data</span>\n-    </h3>\n-  </div>\n-</div>\n-\n-<div class=\"row preview-tab\" ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData\">\n-\n-  <!-- INPUT RECORDS -->\n-  <div ng-class=\"{'col-xs-12': HydratorPlusPlusNodeConfigCtrl.state.isSink, 'preview-records input': true, 'col-xs-6': HydratorPlusPlusNodeConfigCtrl.state.isTransform }\"\n-       ng-if=\"!HydratorPlusPlusNodeConfigCtrl.state.isSource && !HydratorPlusPlusNodeConfigCtrl.state.isCondition\">\n-    <h4>Input Records</h4>\n-\n-    <div ng-repeat=\"(key, value) in HydratorPlusPlusNodeConfigCtrl.previewData.input\">\n-\n-      <h5 class=\"stage-title\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData.numInputStages > 1\">\n-        {{ key }}\n-      </h5>\n-      <div ng-if=\"value.records.length > 0\">\n-        <!-- INPUT RECORDS -->\n-        <table class=\"table table-bordered\">\n-          <thead>\n-            <th ng-repeat=\"field in ::value.schemaFields\">\n-              {{ ::field }}\n-            </th>\n-          </thead>\n-\n-          <tbody>\n-            <tr ng-repeat=\"row in ::value.records\">\n-              <td ng-repeat=\"field in ::value.schemaFields\">\n-                {{ ::row[field] }}\n-              </td>\n-            </tr>\n-          </tbody>\n-        </table>\n-      </div>\n-\n-      <div class=\"text-center\"\n-           ng-if=\"!value.records || value.records.length === 0\">\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus === 'RUNNING'\">\n-          Input records have not been generated yet. Please try again in some time.\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus !== 'RUNNING'\">\n-          Input records have not been generated. Please verify your logic, or try sending more data\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewStatus\">\n-          Input records are not available. Please try running preview again.\n-        </h4>\n-      </div>\n-    </div>\n-\n-    <div class=\"text-center\"\n-         ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData.numInputStages === 0\">\n-      <h4 class=\"message\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-          HydratorPlusPlusNodeConfigCtrl.previewStatus === 'RUNNING'\">\n-        Input records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\" yet. Please try again in some time.\n-      </h4>\n-      <h4 class=\"message\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-          HydratorPlusPlusNodeConfigCtrl.previewStatus !== 'RUNNING'\">\n-        Input records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please verify your logic, or try sending more data.\n-      </h4>\n-      <h4 class=\"message\"\n-          ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewStatus\">\n-        Input records are not available for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please try running preview again.\n-      </h4>\n-    </div>\n-\n-  </div>\n-\n-  <!-- OUTPUT RECORDS -->\n-  <div ng-class=\"{'col-xs-12': HydratorPlusPlusNodeConfigCtrl.state.isSource, 'preview-records output': true, 'col-xs-6': HydratorPlusPlusNodeConfigCtrl.state.isTransform}\"\n-      ng-if=\"!HydratorPlusPlusNodeConfigCtrl.state.isSink && !HydratorPlusPlusNodeConfigCtrl.state.isCondition\">\n-\n-    <h4>Output Records</h4>\n-\n-    <div ng-repeat=\"(key, value) in HydratorPlusPlusNodeConfigCtrl.previewData.output\">\n-\n-      <h5 class=\"stage-title\"\n-          ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewData.numOutputStages > 1\">\n-        {{ key }}\n-      </h5>\n-      <div ng-if=\"value.records.length > 0\">\n-        <!-- OUTPUT RECORDS -->\n-        <table class=\"table table-bordered\">\n-          <thead>\n-            <th ng-repeat=\"field in ::value.schemaFields\">\n-              {{ ::field }}\n-            </th>\n-          </thead>\n-\n-          <tbody>\n-            <tr ng-repeat=\"row in ::value.records\">\n-              <td ng-repeat=\"field in ::value.schemaFields\">\n-                {{ ::row[field] }}\n-              </td>\n-            </tr>\n-          </tbody>\n-        </table>\n-      </div>\n-\n-      <div class=\"text-center\"\n-           ng-if=\"!value.records || value.records.length === 0\">\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus === 'RUNNING'\">\n-          Output records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\" yet. Please try again in some time.\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"HydratorPlusPlusNodeConfigCtrl.previewStatus &&\n-            HydratorPlusPlusNodeConfigCtrl.previewStatus !== 'RUNNING'\">\n-          Output records have not been generated for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please verify your logic, or try sending more data\n-        </h4>\n-        <h4 class=\"message\"\n-            ng-if=\"!HydratorPlusPlusNodeConfigCtrl.previewStatus\">\n-          Output records are not available for stage \"{{ HydratorPlusPlusNodeConfigCtrl.state.node.plugin.label }}\". Please try running preview again.\n-        </h4>\n-      </div>\n-    </div>\n-  </div>\n-\n-  <!-- NEITHER (CONDITION STAGES) -->\n-  <div class=\"col-xs-12 preview-records\"\n-        ng-if=\"HydratorPlusPlusNodeConfigCtrl.state.isCondition\">\n-    <h4>Input Records & Output Records</h4>\n-    <div class=\"text-center\">\n-      <h4 class=\"message\">\n-        Preview data is not supported for condition stages.\n-      </h4>\n-    </div>\n-  </div>\n+<div>\n+  <preview-data-view \n+  preview-id=\"HydratorPlusPlusNodeConfigCtrl.previewId\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5NDk0Mg=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTgyNDg3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTozMTowN1rOGfzQOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo0Mjo1MlrOGf8yig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5ODc3Nw==", "bodyText": "Could this be represented in any specific type by any chance?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r435998777", "createdAt": "2020-06-05T15:31:07Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyODIwMQ==", "bodyText": "That's a good question - as returned by the backend, the records are all objects but other than that the keys can be pretty much anything, and same for the values. So I don't know that having a type makes sense here.", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436028201", "createdAt": "2020-06-05T16:22:05Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5ODc3Nw=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5ODk3Mg==", "bodyText": "Do we do any parsing of the results from the backend?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436098972", "createdAt": "2020-06-05T18:37:50Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5ODc3Nw=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE1NTAxOA==", "bodyText": "We parse the backend response to get the props (headers and records), but the records array hasn't been parsed further besides getting it out of the backend response. The prop records is an array of objects (or records) where each object corresponds to a row of a dataset. The keys are the field names (from the dataset schema), and the values are the values of the field for that row. So the keys depend on the dataset, and the values can be pretty much any type/value.", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436155018", "createdAt": "2020-06-05T20:42:52Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5ODc3Nw=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTgyOTg0OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTozMjoyOFrOGfzTeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODoxMFrOGf4CGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5OTYwOA==", "bodyText": "Could this input and output be represented in any specific type? Perhaps IRecords[]?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r435999608", "createdAt": "2020-06-05T15:32:28Z", "author": {"login": "jennac3"}, "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { INode, fetchPreview, IRecords, IPreviewData } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import isEmpty from 'lodash/isEmpty';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import DataTable, { messageTextStyle } from 'components/PreviewData/Table';\n+import PreviewTableContainer from 'components/PreviewData/TableContainer';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const styles = () => {\n+  return {\n+    messageText: messageTextStyle,\n+    headingContainer: {\n+      paddingLeft: '10px',\n+    },\n+  };\n+};\n+\n+interface IPreviewDataViewProps extends WithStyles<typeof styles> {\n+  previewId: string;\n+  selectedNodeName: string;\n+  selectedNode: INode;\n+  getStagesAndConnections: () => any;\n+  previewStatus: string;\n+}\n+\n+export interface ITableElements {\n+  input: any[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzA4Mw==", "bodyText": "Good call, types added!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436077083", "createdAt": "2020-06-05T17:58:10Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { INode, fetchPreview, IRecords, IPreviewData } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import isEmpty from 'lodash/isEmpty';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import DataTable, { messageTextStyle } from 'components/PreviewData/Table';\n+import PreviewTableContainer from 'components/PreviewData/TableContainer';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const styles = () => {\n+  return {\n+    messageText: messageTextStyle,\n+    headingContainer: {\n+      paddingLeft: '10px',\n+    },\n+  };\n+};\n+\n+interface IPreviewDataViewProps extends WithStyles<typeof styles> {\n+  previewId: string;\n+  selectedNodeName: string;\n+  selectedNode: INode;\n+  getStagesAndConnections: () => any;\n+  previewStatus: string;\n+}\n+\n+export interface ITableElements {\n+  input: any[];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk5OTYwOA=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQxOTc5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODozMjoyM1rOGf5M_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1Nzo1MlrOGf9KTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NjI1NA==", "bodyText": "this else block will never be executed", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436096254", "createdAt": "2020-06-05T18:32:23Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.Table';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = T.translate(`${I18N_PREFIX}.previewRunning`, { recordType });\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = T.translate(`${I18N_PREFIX}.noPreviewRunning`, { recordType });\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MTEwMA==", "bodyText": "Good point! Removed because we don't need a default here (and as you pointed out, we don't ever get here anyway).", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436161100", "createdAt": "2020-06-05T20:57:52Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.Table';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = T.translate(`${I18N_PREFIX}.previewRunning`, { recordType });\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = T.translate(`${I18N_PREFIX}.noPreviewRunning`, { recordType });\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5NjI1NA=="}, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQzNjkwOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODozODowNFrOGf5X8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo1NToyNFrOGf531Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTA1Ng==", "bodyText": "How do we do internationalization?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436099056", "createdAt": "2020-06-05T18:38:04Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwNzIyMQ==", "bodyText": "Nevermind, looks like this is handled now.", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436107221", "createdAt": "2020-06-05T18:55:24Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTA1Ng=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjQzOTE1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODozODo1NlrOGf5ZVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQxOTo0Mjo1NlrOGgFXBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTQxMw==", "bodyText": "Do we do any client-side formatting of values? Or do they come as formatted strings from the backend?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436099413", "createdAt": "2020-06-05T18:38:56Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = `${recordType} records have not been generated. Please verify your logic or try sending more data.`;\n+    } else {\n+      // default message\n+      msg = `${recordType} records are not available. Please try running preview again.`;\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records)) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName) => {\n+              return <CustomTableCell>{fieldName}</CustomTableCell>;\n+            })}\n+          </TableRow>\n+        </TableHead>\n+        <TableBody>\n+          {records.map((record) => {\n+            return (\n+              <TableRow className={classes.row}>\n+                {headers.map((fieldName) => {\n+                  return <CustomTableCell>{record[fieldName]}</CustomTableCell>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjI5NTQyOA==", "bodyText": "We don't do any client-side formatting of values here, we are assuming they are coming as formatted strings from the backend.", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436295428", "createdAt": "2020-06-06T19:42:56Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers: string[];\n+  records: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (previewStatus === PREVIEW_STATUS.RUNNING) {\n+      // preview is still running but there's no data yet\n+      msg = `${recordType} records have not been generated yet. Please check again in a few minutes.`;\n+    } else if (previewStatus !== PREVIEW_STATUS.RUNNING) {\n+      // not running preview but there is no preview data\n+      msg = `${recordType} records have not been generated. Please verify your logic or try sending more data.`;\n+    } else {\n+      // default message\n+      msg = `${recordType} records are not available. Please try running preview again.`;\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records)) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName) => {\n+              return <CustomTableCell>{fieldName}</CustomTableCell>;\n+            })}\n+          </TableRow>\n+        </TableHead>\n+        <TableBody>\n+          {records.map((record) => {\n+            return (\n+              <TableRow className={classes.row}>\n+                {headers.map((fieldName) => {\n+                  return <CustomTableCell>{record[fieldName]}</CustomTableCell>;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA5OTQxMw=="}, "originalCommit": {"oid": "c989c47c209ac8dba387a42d7438aba5d94ca7a6"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU2NDYxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToyNTowMlrOGf6p4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMDo1OTowMVrOGf9MDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMDAzNQ==", "bodyText": "use StyleRules so you don't have to do this", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436120035", "createdAt": "2020-06-05T19:25:02Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.TableContainer';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MTU0OQ==", "bodyText": "done!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436161549", "createdAt": "2020-06-05T20:59:01Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.TableContainer';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMDAzNQ=="}, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU2ODI1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToyNjowNlrOGf6r7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTowNDowMVrOGf9TeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMDU1Ng==", "bodyText": "I think you can consolidate all the margin properties here?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436120556", "createdAt": "2020-06-05T19:26:06Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.TableContainer';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',\n+    marginBottom: 0,\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    paddingBottom: '5px',\n+    paddingLeft: '10px',\n+    marginLeft: '-10px',\n+    marginRight: '-10px',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2MzQ0OQ==", "bodyText": "done!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436163449", "createdAt": "2020-06-05T21:04:01Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.TableContainer';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',\n+    marginBottom: 0,\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    paddingBottom: '5px',\n+    paddingLeft: '10px',\n+    marginLeft: '-10px',\n+    marginRight: '-10px',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMDU1Ng=="}, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU3MTU3OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOToyNzozMFrOGf6uOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTowNjoxOFrOGf9XBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMTE0Nw==", "bodyText": "is this function necessary? I think you can just simply export the StyledTableContainer", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436121147", "createdAt": "2020-06-05T19:27:30Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.TableContainer';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',\n+    marginBottom: 0,\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    paddingBottom: '5px',\n+    paddingLeft: '10px',\n+    marginLeft: '-10px',\n+    marginRight: '-10px',\n+    marginTop: '0',\n+  },\n+});\n+\n+interface IPreviewTableContainerProps extends WithStyles<typeof styles> {\n+  dataTables: ITableElements;\n+  selectedNode: INode;\n+}\n+\n+const TableContainer: React.FC<IPreviewTableContainerProps> = ({\n+  classes,\n+  dataTables,\n+  selectedNode,\n+}) => {\n+  return (\n+    <div className={classes.outerContainer}>\n+      <If condition={!selectedNode.isSource}>\n+        <div\n+          className={classnames(classes.innerContainer, {\n+            [classes.split]: !selectedNode.isSource && !selectedNode.isSink,\n+          })}\n+        >\n+          <h2 className={classes.h2Title}>{T.translate(`${I18N_PREFIX}.inputHeader`)}</h2>\n+          {dataTables.input}\n+        </div>\n+      </If>\n+      <If condition={!selectedNode.isSink}>\n+        <div\n+          className={classnames(classes.innerContainer, {\n+            [classes.split]: !selectedNode.isSource && !selectedNode.isSink,\n+          })}\n+        >\n+          <h2 className={classes.h2Title}>{T.translate(`${I18N_PREFIX}.outputHeader`)}</h2>\n+          {dataTables.output}\n+        </div>\n+      </If>\n+    </div>\n+  );\n+};\n+\n+const StyledTableContainer = withStyles(styles)(TableContainer);\n+\n+function PreviewTableContainer(props) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NDM1Nw==", "bodyText": "Done!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436164357", "createdAt": "2020-06-05T21:06:18Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/TableContainer.tsx", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import If from 'components/If';\n+import { ITableElements } from 'components/PreviewData';\n+import { INode } from 'components/PreviewData/utilities';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import classnames from 'classnames';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.TableContainer';\n+\n+const styles = (theme) => ({\n+  outerContainer: {\n+    display: 'flex',\n+  },\n+  innerContainer: {\n+    overflow: 'scroll',\n+    padding: '10px',\n+    width: '100%',\n+  },\n+  split: {\n+    maxWidth: '50%',\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    padding: '10px',\n+    borderRight: `1px solid ${theme.palette.grey[400]}`,\n+    '& :last-of-type': {\n+      borderRight: 0,\n+    },\n+  },\n+  h2Title: {\n+    fontSize: '1.4rem !important',\n+    fontWeight: 'bold' as 'bold',\n+    marginBottom: 0,\n+    borderBottom: `1px solid ${theme.palette.grey[400]}`,\n+    paddingBottom: '5px',\n+    paddingLeft: '10px',\n+    marginLeft: '-10px',\n+    marginRight: '-10px',\n+    marginTop: '0',\n+  },\n+});\n+\n+interface IPreviewTableContainerProps extends WithStyles<typeof styles> {\n+  dataTables: ITableElements;\n+  selectedNode: INode;\n+}\n+\n+const TableContainer: React.FC<IPreviewTableContainerProps> = ({\n+  classes,\n+  dataTables,\n+  selectedNode,\n+}) => {\n+  return (\n+    <div className={classes.outerContainer}>\n+      <If condition={!selectedNode.isSource}>\n+        <div\n+          className={classnames(classes.innerContainer, {\n+            [classes.split]: !selectedNode.isSource && !selectedNode.isSink,\n+          })}\n+        >\n+          <h2 className={classes.h2Title}>{T.translate(`${I18N_PREFIX}.inputHeader`)}</h2>\n+          {dataTables.input}\n+        </div>\n+      </If>\n+      <If condition={!selectedNode.isSink}>\n+        <div\n+          className={classnames(classes.innerContainer, {\n+            [classes.split]: !selectedNode.isSource && !selectedNode.isSink,\n+          })}\n+        >\n+          <h2 className={classes.h2Title}>{T.translate(`${I18N_PREFIX}.outputHeader`)}</h2>\n+          {dataTables.output}\n+        </div>\n+      </If>\n+    </div>\n+  );\n+};\n+\n+const StyledTableContainer = withStyles(styles)(TableContainer);\n+\n+function PreviewTableContainer(props) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMTE0Nw=="}, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU3OTEzOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozMDo0MVrOGf6zTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToxNToyMlrOGf9jmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMjQ0NQ==", "bodyText": "is selectedNodeName a property inside selectedNode? If so I don't think we need to explicitly have this", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436122445", "createdAt": "2020-06-05T19:30:41Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { INode, fetchPreview, IRecords, IPreviewData } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import isEmpty from 'lodash/isEmpty';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import DataTable, { messageTextStyle } from 'components/PreviewData/Table';\n+import PreviewTableContainer from 'components/PreviewData/TableContainer';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const styles = () => {\n+  return {\n+    messageText: messageTextStyle,\n+    headingContainer: {\n+      paddingLeft: '10px',\n+    },\n+  };\n+};\n+\n+interface IPreviewDataViewProps extends WithStyles<typeof styles> {\n+  previewId: string;\n+  selectedNodeName: string;\n+  selectedNode: INode;\n+  getStagesAndConnections: () => any;\n+  previewStatus: string;\n+}\n+\n+export interface ITableElements {\n+  input: React.ReactNode[];\n+  output: React.ReactNode[];\n+}\n+\n+const PreviewDataViewBase: React.FC<IPreviewDataViewProps> = ({\n+  previewId,\n+  selectedNodeName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NzU3Ng==", "bodyText": "Removed!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436167576", "createdAt": "2020-06-05T21:15:22Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { INode, fetchPreview, IRecords, IPreviewData } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import isEmpty from 'lodash/isEmpty';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import DataTable, { messageTextStyle } from 'components/PreviewData/Table';\n+import PreviewTableContainer from 'components/PreviewData/TableContainer';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const styles = () => {\n+  return {\n+    messageText: messageTextStyle,\n+    headingContainer: {\n+      paddingLeft: '10px',\n+    },\n+  };\n+};\n+\n+interface IPreviewDataViewProps extends WithStyles<typeof styles> {\n+  previewId: string;\n+  selectedNodeName: string;\n+  selectedNode: INode;\n+  getStagesAndConnections: () => any;\n+  previewStatus: string;\n+}\n+\n+export interface ITableElements {\n+  input: React.ReactNode[];\n+  output: React.ReactNode[];\n+}\n+\n+const PreviewDataViewBase: React.FC<IPreviewDataViewProps> = ({\n+  previewId,\n+  selectedNodeName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyMjQ0NQ=="}, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjU5MzI5OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTozNjozMVrOGf68mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjoxMDowOVrOGf-vJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNDgyNw==", "bodyText": "is it necessary to have the component here? Can we have the getTables function simply return the data required, and pass that to the PreviewTableContainer, and have the PreviewTableContainer do the rendering of the rows?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436124827", "createdAt": "2020-06-05T19:36:31Z", "author": {"login": "elfenheart"}, "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { INode, fetchPreview, IRecords, IPreviewData } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import isEmpty from 'lodash/isEmpty';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import DataTable, { messageTextStyle } from 'components/PreviewData/Table';\n+import PreviewTableContainer from 'components/PreviewData/TableContainer';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const styles = () => {\n+  return {\n+    messageText: messageTextStyle,\n+    headingContainer: {\n+      paddingLeft: '10px',\n+    },\n+  };\n+};\n+\n+interface IPreviewDataViewProps extends WithStyles<typeof styles> {\n+  previewId: string;\n+  selectedNodeName: string;\n+  selectedNode: INode;\n+  getStagesAndConnections: () => any;\n+  previewStatus: string;\n+}\n+\n+export interface ITableElements {\n+  input: React.ReactNode[];\n+  output: React.ReactNode[];\n+}\n+\n+const PreviewDataViewBase: React.FC<IPreviewDataViewProps> = ({\n+  previewId,\n+  selectedNodeName,\n+  selectedNode,\n+  getStagesAndConnections,\n+  previewStatus,\n+  classes,\n+}) => {\n+  const { stages, connections } = getStagesAndConnections();\n+\n+  const [previewLoading, setPreviewLoading] = useState(false);\n+  const [previewData, setPreviewData] = useState<IPreviewData>({});\n+\n+  const updatePreviewCb = (updatedPreview: IPreviewData) => {\n+    setPreviewData(updatedPreview);\n+  };\n+\n+  useEffect(\n+    () => {\n+      if (previewId) {\n+        fetchPreview(\n+          selectedNode,\n+          previewId,\n+          stages,\n+          connections,\n+          setPreviewLoading,\n+          updatePreviewCb\n+        );\n+      }\n+    },\n+    [previewId, selectedNodeName]\n+  );\n+\n+  let inputs: IRecords[];\n+  let outputs: IRecords[];\n+\n+  if (!isEmpty(previewData)) {\n+    if (!isEmpty(previewData.input) && !selectedNode.isSource) {\n+      inputs = Object.values(previewData.input);\n+    }\n+    if (!isEmpty(previewData.output) && !selectedNode.isSink) {\n+      outputs = Object.values(previewData.output);\n+    }\n+  }\n+\n+  const getTables = () => {\n+    if (!selectedNode || isEmpty(previewData)) {\n+      return { input: [], output: [] };\n+    }\n+    const inputTables = [];\n+    const outputTables = [];\n+    if (!selectedNode.isSource && inputs.length) {\n+      inputs.forEach((input, i) => {\n+        const inputHeaders = input.schemaFields;\n+        const inputRecords = input.records;\n+        inputTables.push(\n+          <div>\n+            <DataTable\n+              key={`input-table-${i}`}\n+              headers={inputHeaders}\n+              records={inputRecords}\n+              isInput={true}\n+              previewStatus={previewStatus}\n+            />\n+          </div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4NjkxNg==", "bodyText": "done!", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436186916", "createdAt": "2020-06-05T22:10:09Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/index.tsx", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React, { useState, useEffect } from 'react';\n+import PropTypes from 'prop-types';\n+import { INode, fetchPreview, IRecords, IPreviewData } from 'components/PreviewData/utilities';\n+import If from 'components/If';\n+import isEmpty from 'lodash/isEmpty';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import LoadingSVGCentered from 'components/LoadingSVGCentered';\n+import DataTable, { messageTextStyle } from 'components/PreviewData/Table';\n+import PreviewTableContainer from 'components/PreviewData/TableContainer';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+\n+const styles = () => {\n+  return {\n+    messageText: messageTextStyle,\n+    headingContainer: {\n+      paddingLeft: '10px',\n+    },\n+  };\n+};\n+\n+interface IPreviewDataViewProps extends WithStyles<typeof styles> {\n+  previewId: string;\n+  selectedNodeName: string;\n+  selectedNode: INode;\n+  getStagesAndConnections: () => any;\n+  previewStatus: string;\n+}\n+\n+export interface ITableElements {\n+  input: React.ReactNode[];\n+  output: React.ReactNode[];\n+}\n+\n+const PreviewDataViewBase: React.FC<IPreviewDataViewProps> = ({\n+  previewId,\n+  selectedNodeName,\n+  selectedNode,\n+  getStagesAndConnections,\n+  previewStatus,\n+  classes,\n+}) => {\n+  const { stages, connections } = getStagesAndConnections();\n+\n+  const [previewLoading, setPreviewLoading] = useState(false);\n+  const [previewData, setPreviewData] = useState<IPreviewData>({});\n+\n+  const updatePreviewCb = (updatedPreview: IPreviewData) => {\n+    setPreviewData(updatedPreview);\n+  };\n+\n+  useEffect(\n+    () => {\n+      if (previewId) {\n+        fetchPreview(\n+          selectedNode,\n+          previewId,\n+          stages,\n+          connections,\n+          setPreviewLoading,\n+          updatePreviewCb\n+        );\n+      }\n+    },\n+    [previewId, selectedNodeName]\n+  );\n+\n+  let inputs: IRecords[];\n+  let outputs: IRecords[];\n+\n+  if (!isEmpty(previewData)) {\n+    if (!isEmpty(previewData.input) && !selectedNode.isSource) {\n+      inputs = Object.values(previewData.input);\n+    }\n+    if (!isEmpty(previewData.output) && !selectedNode.isSink) {\n+      outputs = Object.values(previewData.output);\n+    }\n+  }\n+\n+  const getTables = () => {\n+    if (!selectedNode || isEmpty(previewData)) {\n+      return { input: [], output: [] };\n+    }\n+    const inputTables = [];\n+    const outputTables = [];\n+    if (!selectedNode.isSource && inputs.length) {\n+      inputs.forEach((input, i) => {\n+        const inputHeaders = input.schemaFields;\n+        const inputRecords = input.records;\n+        inputTables.push(\n+          <div>\n+            <DataTable\n+              key={`input-table-${i}`}\n+              headers={inputHeaders}\n+              records={inputRecords}\n+              isInput={true}\n+              previewStatus={previewStatus}\n+            />\n+          </div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEyNDgyNw=="}, "originalCommit": {"oid": "9ade4cedb05a029a292a5ef2433c3e62eb3c9bbf"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTc1NzU1OnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/utilities.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxMDo1NlrOGgqMUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMjowMToxOFrOGgx7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5ODg5Nw==", "bodyText": "Are there any unusual possibilities to consider here? E.g. is it possible to have no nodes that meet the condition?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436898897", "createdAt": "2020-06-08T18:10:56Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/PreviewData/utilities.ts", "diffHunk": "@@ -118,57 +128,59 @@ export function fetchPreview(\n   );\n }\n \n-export function getPreviousStageName(selectedStage: string, adjMap: IAdjacencyMap) {\n+export function getPreviousStageNames(selectedStage: string, adjMap: IAdjacencyMap) {\n   const keys = adjMap.keySeq().toArray();\n-  const prevStageName = keys.find((key) => adjMap.get(key).includes(selectedStage));\n-  return prevStageName;\n-}\n-\n-function getPreviousStage(previousStageName: string, stages: IStage[]) {\n-  return stages.find((stage) => stage.name === previousStageName);\n+  const prevStageNames = keys.filter((key) => adjMap.get(key).includes(selectedStage));\n+  return prevStageNames;\n }\n \n function getTracersAndPreviousStageInfo(\n-  selectedStage: string,\n+  selectedStageName: string,\n   adjacencyMap: IAdjacencyMap,\n   stages: IStage[],\n   connections: IConnection[]\n ) {\n-  let tracers: List<string> = List([selectedStage]);\n-  let previousStageName = getPreviousStageName(selectedStage, adjacencyMap);\n+  let tracers: List<string> = List([selectedStageName]);\n+  const previousStageNames: string[] = getPreviousStageNames(selectedStageName, adjacencyMap);\n \n   // source nodes have no previous stage\n-  if (!previousStageName) {\n+  if (isEmpty(previousStageNames)) {\n     return { tracers: tracers.toArray() };\n   }\n \n-  let previousStage = getPreviousStage(previousStageName, stages);\n-  let previousStagePort;\n-\n-  if (previousStage.plugin.type === 'splittertransform') {\n-    const previousStageConnection = connections.find(\n-      (connection) => connection.from === previousStageName && connection.to === selectedStage\n-    );\n-    if (previousStageConnection) {\n-      previousStagePort = previousStageConnection.port;\n-    }\n-  } else {\n-    // If we have multiple condition nodes in a row, we have traverse back\n-    // until we find a node that actually has records out\n-    while (previousStage && previousStage.plugin.type === 'condition') {\n-      previousStageName = getPreviousStageName(previousStageName, adjacencyMap);\n-      previousStage = stages.find((stage) => stage.name === previousStageName);\n+  const previousStages: IPreviousStageInfo = {};\n+  previousStageNames.forEach((previousStageName) => {\n+    let previousStage = stages.find((stage) => stage.name === previousStageName);\n+    previousStages[previousStageName] = {};\n+\n+    if (previousStage.plugin.type === 'splittertransform') {\n+      const previousStageConnection = connections.find(\n+        (connection) => connection.from === previousStageName && connection.to === selectedStageName\n+      );\n+      if (previousStageConnection) {\n+        previousStages[previousStageName].port = previousStageConnection.port;\n+      }\n+    } else {\n+      // If we have multiple condition nodes in a row, we have traverse back\n+      // until we find a node that actually has records out\n+      while (previousStage && previousStage.plugin.type === 'condition') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f019afba36fb64c6e84052aad72a843f5ac0d218"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAyNTc4NA==", "bodyText": "Most plugins will be covered with getPreviousStageNames, since the previous stage name is usually just the plugin(s) that are just before the selected. plugin. The only exception is when the previous stage is a conditional, which may or may not have output, so we continue down the pipeline to get the output of the next closest non-conditional plugin.\nI am honestly not sure why we need to get the port of the splitter plugins, because we don't use that information anywhere currently. I have added a comment to either remove or make sure we actually use the port info before the next release (6.1.4).", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r437025784", "createdAt": "2020-06-08T22:01:18Z", "author": {"login": "yukiej"}, "path": "cdap-ui/app/cdap/components/PreviewData/utilities.ts", "diffHunk": "@@ -118,57 +128,59 @@ export function fetchPreview(\n   );\n }\n \n-export function getPreviousStageName(selectedStage: string, adjMap: IAdjacencyMap) {\n+export function getPreviousStageNames(selectedStage: string, adjMap: IAdjacencyMap) {\n   const keys = adjMap.keySeq().toArray();\n-  const prevStageName = keys.find((key) => adjMap.get(key).includes(selectedStage));\n-  return prevStageName;\n-}\n-\n-function getPreviousStage(previousStageName: string, stages: IStage[]) {\n-  return stages.find((stage) => stage.name === previousStageName);\n+  const prevStageNames = keys.filter((key) => adjMap.get(key).includes(selectedStage));\n+  return prevStageNames;\n }\n \n function getTracersAndPreviousStageInfo(\n-  selectedStage: string,\n+  selectedStageName: string,\n   adjacencyMap: IAdjacencyMap,\n   stages: IStage[],\n   connections: IConnection[]\n ) {\n-  let tracers: List<string> = List([selectedStage]);\n-  let previousStageName = getPreviousStageName(selectedStage, adjacencyMap);\n+  let tracers: List<string> = List([selectedStageName]);\n+  const previousStageNames: string[] = getPreviousStageNames(selectedStageName, adjacencyMap);\n \n   // source nodes have no previous stage\n-  if (!previousStageName) {\n+  if (isEmpty(previousStageNames)) {\n     return { tracers: tracers.toArray() };\n   }\n \n-  let previousStage = getPreviousStage(previousStageName, stages);\n-  let previousStagePort;\n-\n-  if (previousStage.plugin.type === 'splittertransform') {\n-    const previousStageConnection = connections.find(\n-      (connection) => connection.from === previousStageName && connection.to === selectedStage\n-    );\n-    if (previousStageConnection) {\n-      previousStagePort = previousStageConnection.port;\n-    }\n-  } else {\n-    // If we have multiple condition nodes in a row, we have traverse back\n-    // until we find a node that actually has records out\n-    while (previousStage && previousStage.plugin.type === 'condition') {\n-      previousStageName = getPreviousStageName(previousStageName, adjacencyMap);\n-      previousStage = stages.find((stage) => stage.name === previousStageName);\n+  const previousStages: IPreviousStageInfo = {};\n+  previousStageNames.forEach((previousStageName) => {\n+    let previousStage = stages.find((stage) => stage.name === previousStageName);\n+    previousStages[previousStageName] = {};\n+\n+    if (previousStage.plugin.type === 'splittertransform') {\n+      const previousStageConnection = connections.find(\n+        (connection) => connection.from === previousStageName && connection.to === selectedStageName\n+      );\n+      if (previousStageConnection) {\n+        previousStages[previousStageName].port = previousStageConnection.port;\n+      }\n+    } else {\n+      // If we have multiple condition nodes in a row, we have traverse back\n+      // until we find a node that actually has records out\n+      while (previousStage && previousStage.plugin.type === 'condition') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5ODg5Nw=="}, "originalCommit": {"oid": "f019afba36fb64c6e84052aad72a843f5ac0d218"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTc2MDQxOnYy", "diffSide": "RIGHT", "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxMTo0OVrOGgqOKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDozMDozMlrOGgvP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5OTM3MA==", "bodyText": "Is it possible to have very wide tables? E.g. hundreds or thousands of columns? If so, does this handle them well?", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436899370", "createdAt": "2020-06-08T18:11:49Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.Table';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers?: string[];\n+  records?: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+  isCondition?: boolean;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+  isCondition,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (isCondition) {\n+      msg = T.translate(`${I18N_PREFIX}.previewNotSupported`);\n+    } else if (previewStatus === PREVIEW_STATUS.RUNNING || previewStatus === PREVIEW_STATUS.INIT) {\n+      // preview is still running but there's no data yet\n+      msg = T.translate(`${I18N_PREFIX}.previewRunning`, { recordType });\n+    } else {\n+      // not running preview but there is no preview data\n+      msg = T.translate(`${I18N_PREFIX}.noPreviewRunning`, { recordType });\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records) || isCondition) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName, i) => {\n+              return <CustomTableCell key={`header-cell-${i}`}>{fieldName}</CustomTableCell>;\n+            })}\n+          </TableRow>\n+        </TableHead>\n+        <TableBody>\n+          {records.map((record, j) => {\n+            return (\n+              <TableRow className={classes.row} key={`tr-${j}`}>\n+                {headers.map((fieldName, k) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f019afba36fb64c6e84052aad72a843f5ac0d218"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTcxNA==", "bodyText": "Answered in a meeting. There will be feature work in the future to address large schemas.", "url": "https://github.com/cdapio/cdap/pull/12262#discussion_r436981714", "createdAt": "2020-06-08T20:30:32Z", "author": {"login": "njbriggs"}, "path": "cdap-ui/app/cdap/components/PreviewData/Table.tsx", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright \u00a9 2020 Cask Data, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n+ * use this file except in compliance with the License. You may obtain a copy of\n+ * the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import React from 'react';\n+import Table from '@material-ui/core/Table';\n+import TableBody from '@material-ui/core/TableBody';\n+import TableHead from '@material-ui/core/TableHead';\n+import TableRow from '@material-ui/core/TableRow';\n+import Paper from '@material-ui/core/Paper';\n+import TableCell from '@material-ui/core/TableCell';\n+import withStyles, { WithStyles } from '@material-ui/core/styles/withStyles';\n+import isEmpty from 'lodash/isEmpty';\n+import { PREVIEW_STATUS } from 'services/PreviewStatus';\n+import Heading, { HeadingTypes } from 'components/Heading';\n+import ThemeWrapper from 'components/ThemeWrapper';\n+import T from 'i18n-react';\n+\n+const I18N_PREFIX = 'features.PreviewData.Table';\n+\n+const CustomTableCell = withStyles((theme) => ({\n+  head: {\n+    backgroundColor: theme.palette.grey['300'],\n+    color: theme.palette.common.white,\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+  body: {\n+    padding: 10,\n+    fontSize: 14,\n+  },\n+}))(TableCell);\n+\n+export const messageTextStyle = {\n+  fontSize: '1.3rem !important',\n+  margin: '10px 0',\n+};\n+const styles = (theme) => ({\n+  root: {\n+    width: '100%',\n+    display: 'inline-block',\n+    height: 'auto',\n+    marginTop: theme.spacing(1),\n+  },\n+  table: {\n+    width: '100%',\n+  },\n+  row: {\n+    height: 40,\n+    '&:nth-of-type(odd)': {\n+      backgroundColor: theme.palette.grey['600'],\n+    },\n+  },\n+  messageText: messageTextStyle,\n+});\n+\n+interface IDataTableProps extends WithStyles<typeof styles> {\n+  headers?: string[];\n+  records?: any[];\n+  isInput?: boolean;\n+  previewStatus?: string;\n+  isCondition?: boolean;\n+}\n+\n+const DataTableView: React.FC<IDataTableProps> = ({\n+  classes,\n+  headers,\n+  records,\n+  isInput,\n+  previewStatus,\n+  isCondition,\n+}) => {\n+  const getStatusMsg = () => {\n+    let msg;\n+    const recordType = isInput ? 'Input' : 'Output';\n+    if (isCondition) {\n+      msg = T.translate(`${I18N_PREFIX}.previewNotSupported`);\n+    } else if (previewStatus === PREVIEW_STATUS.RUNNING || previewStatus === PREVIEW_STATUS.INIT) {\n+      // preview is still running but there's no data yet\n+      msg = T.translate(`${I18N_PREFIX}.previewRunning`, { recordType });\n+    } else {\n+      // not running preview but there is no preview data\n+      msg = T.translate(`${I18N_PREFIX}.noPreviewRunning`, { recordType });\n+    }\n+    return msg;\n+  };\n+\n+  if (isEmpty(records) || isCondition) {\n+    return (\n+      <div>\n+        <Heading type={HeadingTypes.h3} label={getStatusMsg()} className={classes.messageText} />\n+      </div>\n+    );\n+  }\n+\n+  return (\n+    <Paper className={classes.root}>\n+      <Table>\n+        <TableHead>\n+          <TableRow className={classes.row}>\n+            {headers.map((fieldName, i) => {\n+              return <CustomTableCell key={`header-cell-${i}`}>{fieldName}</CustomTableCell>;\n+            })}\n+          </TableRow>\n+        </TableHead>\n+        <TableBody>\n+          {records.map((record, j) => {\n+            return (\n+              <TableRow className={classes.row} key={`tr-${j}`}>\n+                {headers.map((fieldName, k) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5OTM3MA=="}, "originalCommit": {"oid": "f019afba36fb64c6e84052aad72a843f5ac0d218"}, "originalPosition": 122}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3364, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}