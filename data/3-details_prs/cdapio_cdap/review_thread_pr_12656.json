{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTEyNzc0", "number": 12656, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjo1MjozMlrOEYI0Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTowMTo1M1rOEYMbUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzQ1NzMxOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjo1MjozMlrOHAUCvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjo1MjozMlrOHAUCvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA5MDQzMQ==", "bodyText": "Use a ThreadFactoryBuilder instead to avoid holder a reference in the finalizer (see #12567)", "url": "https://github.com/cdapio/cdap/pull/12656#discussion_r470090431", "createdAt": "2020-08-13T16:52:32Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "diffHunk": "@@ -122,8 +112,67 @@ public boolean isRecoverySupported() {\n \n   @Override\n   public void recoverTask(TaskAttemptContext taskContext) throws IOException {\n+    delegateInParallel((name, delegate) -> {\n+      TaskAttemptContext namedContext = MultiOutputFormat.getNamedTaskContext(taskContext, name);\n+      delegate.recoverTask(namedContext);\n+    });\n+  }\n+\n+  private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n+    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), new ThreadFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba3d189edb8c332aa6d0c66ff01f0ae51ce176e"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzQ2MjQwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjo1Mzo1MFrOHAUF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjo1Mzo1MFrOHAUF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA5MTI0OA==", "bodyText": "The code can be simplified by using CompletionService (ExecutorCompletionService)", "url": "https://github.com/cdapio/cdap/pull/12656#discussion_r470091248", "createdAt": "2020-08-13T16:53:50Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "diffHunk": "@@ -122,8 +112,67 @@ public boolean isRecoverySupported() {\n \n   @Override\n   public void recoverTask(TaskAttemptContext taskContext) throws IOException {\n+    delegateInParallel((name, delegate) -> {\n+      TaskAttemptContext namedContext = MultiOutputFormat.getNamedTaskContext(taskContext, name);\n+      delegate.recoverTask(namedContext);\n+    });\n+  }\n+\n+  private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n+    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), new ThreadFactory() {\n+      AtomicInteger id = new AtomicInteger(0);\n+\n+      @Override\n+      public Thread newThread(Runnable r) {\n+        Thread t = new Thread(r);\n+        t.setName(String.format(\"multi-output-committer-%d\", id.getAndIncrement()));\n+        return t;\n+      }\n+    });\n+\n+    List<Future<Void>> futures = new ArrayList<>(delegates.size());\n     for (Map.Entry<String, OutputCommitter> entry : delegates.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ba3d189edb8c332aa6d0c66ff01f0ae51ce176e"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODA0ODgwOnYy", "diffSide": "RIGHT", "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTowMTo1M1rOHAZmBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTowMTo1M1rOHAZmBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4MTM4MA==", "bodyText": "I think it might be better to bound the size to some upper limit, in case the number of delegates is too high, it will fail to create new thread.", "url": "https://github.com/cdapio/cdap/pull/12656#discussion_r470181380", "createdAt": "2020-08-13T19:01:53Z", "author": {"login": "chtyim"}, "path": "cdap-app-templates/cdap-etl/cdap-etl-core/src/main/java/io/cdap/cdap/etl/common/output/MultiOutputCommitter.java", "diffHunk": "@@ -122,8 +110,57 @@ public boolean isRecoverySupported() {\n \n   @Override\n   public void recoverTask(TaskAttemptContext taskContext) throws IOException {\n+    delegateInParallel((name, delegate) -> {\n+      TaskAttemptContext namedContext = MultiOutputFormat.getNamedTaskContext(taskContext, name);\n+      delegate.recoverTask(namedContext);\n+    });\n+  }\n+\n+  private void delegateInParallel(DelegateFunction delegateFunction) throws IOException {\n+    ThreadFactory threadFactory = new ThreadFactoryBuilder().setNameFormat(\"multi-output-committer-%d\").build();\n+    ExecutorService executorService = Executors.newFixedThreadPool(delegates.size(), threadFactory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2efcea25372ea3290bc13f692b19633a74b4a78e"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3118, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}