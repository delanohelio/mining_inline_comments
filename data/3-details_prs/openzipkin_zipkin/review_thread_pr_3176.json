{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTI0ODYy", "number": 3176, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxMjoxNFrOEY5J-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxMjoxNFrOEY5J-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTM3NzIwOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxMjoxNFrOHBZ5Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNToxNjo1NVrOHBZ9UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzNDg2Nw==", "bodyText": "This not working as hoped is unfortunate indeed. Increments to a Counter reference held that is registered to a meter registry that is cleared effectively do nothing (from the view of the registry) since the counter is no longer registered to the MeterRegistry. Making a new Spring context will make a new registry and all the metrics will be registered to that again in the remade beans. If using the API that retrieves or creates a meter, this isn't an issue (e.g. registry.counter(\"my.counter\").increment()) because the first time after clear it will create and register a Counter. Perhaps we can improve this situation or at least document it better in Micrometer.", "url": "https://github.com/openzipkin/zipkin/pull/3176#discussion_r471234867", "createdAt": "2020-08-17T05:12:14Z", "author": {"login": "shakuzen"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java", "diffHunk": "@@ -41,8 +39,14 @@\n import static zipkin2.server.internal.ITZipkinServer.url;\n \n /**\n- * We cannot clear the micrometer registry easily, so we have recreate the spring context. This is\n- * extremely slow, so please only add tests that require isolation here.\n+ * Tests here look at values based on counter values, so need to run independently. It would seem\n+ * correct to {@link PrometheusMeterRegistry#clear() clear the registry} to isolate counters\n+ * incremented in one test from interfering with another. However, this clears the metrics\n+ * themselves, resulting in an empty {@link PrometheusMeterRegistry#scrape()}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309183f50bf74047db861597e646a2bf1397165d"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzNTkyMQ==", "bodyText": "if \"reset\" lingo in prom matches setting back to zero, it could avail another method name if the feature ever existed...", "url": "https://github.com/openzipkin/zipkin/pull/3176#discussion_r471235921", "createdAt": "2020-08-17T05:16:55Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/prometheus/ITZipkinMetricsDirty.java", "diffHunk": "@@ -41,8 +39,14 @@\n import static zipkin2.server.internal.ITZipkinServer.url;\n \n /**\n- * We cannot clear the micrometer registry easily, so we have recreate the spring context. This is\n- * extremely slow, so please only add tests that require isolation here.\n+ * Tests here look at values based on counter values, so need to run independently. It would seem\n+ * correct to {@link PrometheusMeterRegistry#clear() clear the registry} to isolate counters\n+ * incremented in one test from interfering with another. However, this clears the metrics\n+ * themselves, resulting in an empty {@link PrometheusMeterRegistry#scrape()}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIzNDg2Nw=="}, "originalCommit": {"oid": "309183f50bf74047db861597e646a2bf1397165d"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1205, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}