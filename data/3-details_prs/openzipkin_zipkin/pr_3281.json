{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNzI4NjE4", "number": 3281, "title": "Tidies build and completes migration off docker.io images during build", "bodyText": "This makes some editorial changes to make this project look the same as\nzipkin-aws and zipkin-gcp. It also completes migration off docker.io\nimages so that routine test and development cannot cause a build outage.\nFixes #3279", "createdAt": "2020-11-02T01:01:31Z", "url": "https://github.com/openzipkin/zipkin/pull/3281", "merged": true, "mergeCommit": {"oid": "c3177facb70565006eadfeb00465fbad4cd5339a"}, "closed": true, "closedAt": "2020-11-02T04:31:23Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdYZ37cAH2gAyNTEzNzI4NjE4Ojk1ZjNjYmJlNDdhN2IwZjViMjE1OWNiN2FlZDQ3YTA4MDg5YjQzYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYcedpAFqTUyMTMxOTg4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "95f3cbbe47a7b0f5b2159cb7aed47a08089b43bd", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/95f3cbbe47a7b0f5b2159cb7aed47a08089b43bd", "committedDate": "2020-11-02T01:00:08Z", "message": "Tidies build and completes migration off docker.io images during build\n\nThis makes some editorial changes to make this project look the same as\nzipkin-aws and zipkin-gcp. It also completes migration off docker.io\nimages so that routine test and development cannot cause a build outage.\n\nFixes #3279"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjg0MTgx", "url": "https://github.com/openzipkin/zipkin/pull/3281#pullrequestreview-521284181", "createdAt": "2020-11-02T01:04:36Z", "commit": {"oid": "95f3cbbe47a7b0f5b2159cb7aed47a08089b43bd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMTowNDozN1rOHrzwLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMTowNDozN1rOHrzwLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5ODczMw==", "bodyText": "this was a pre-flight check that checked the wrong condition, but wouldn't have mattered", "url": "https://github.com/openzipkin/zipkin/pull/3281#discussion_r515698733", "createdAt": "2020-11-02T01:04:37Z", "author": {"login": "codefromthecrypt"}, "path": "benchmarks/src/test/resources/create-datasource-and-dashboard.sh", "diffHunk": "@@ -13,10 +13,9 @@\n # the License.\n #\n \n-\n set -xeuo pipefail\n \n-if ! curl --retry 5 --retry-connrefused --retry-delay 0 -sf http://grafana:3000/api/dashboards/name/prom; then\n+if ! curl --retry 5 --retry-connrefused --retry-delay 0 -sf http://grafana:3000/api/datasources/name/prom; then\n     curl -sf -X POST -H \"Content-Type: application/json\" \\\n          --data-binary '{\"name\":\"prom\",\"type\":\"prometheus\",\"url\":\"http://prometheus:9090\",\"access\":\"proxy\",\"isDefault\":true}' \\\n          http://grafana:3000/api/datasources", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f3cbbe47a7b0f5b2159cb7aed47a08089b43bd"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23cc77ffa79b0e8dd3c5ad7371e3b25505e4e1ca", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/23cc77ffa79b0e8dd3c5ad7371e3b25505e4e1ca", "committedDate": "2020-11-02T01:07:39Z", "message": "adds docker ignore for compose"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60fd0ccf79d56b0039bd60b6302103dc603476ea", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/60fd0ccf79d56b0039bd60b6302103dc603476ea", "committedDate": "2020-11-02T01:47:41Z", "message": "tries to get grafana working in ServerIntegratedBenchmark"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjkyMzUz", "url": "https://github.com/openzipkin/zipkin/pull/3281#pullrequestreview-521292353", "createdAt": "2020-11-02T01:53:36Z", "commit": {"oid": "60fd0ccf79d56b0039bd60b6302103dc603476ea"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMTo1MzozNlrOHr0NbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMTo1MzozNlrOHr0NbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNjIyMA==", "bodyText": "this is the container that I can't tell if even worked or not despite it being fine in docker-compose externally. Even it logged nothing though the logging properties here are set to info -> stdout.", "url": "https://github.com/openzipkin/zipkin/pull/3281#discussion_r515706220", "createdAt": "2020-11-02T01:53:36Z", "author": {"login": "codefromthecrypt"}, "path": "benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java", "diffHunk": "@@ -151,46 +157,62 @@ void runBenchmark(@Nullable GenericContainer<?> storage) throws Exception {\n \n   void runBenchmark(@Nullable GenericContainer<?> storage, GenericContainer<?> zipkin)\n     throws Exception {\n-    GenericContainer<?> backend = new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n-      .withNetwork(Network.SHARED)\n-      .withNetworkAliases(\"backend\")\n-      .withCommand(\"backend\")\n-      .withExposedPorts(9000)\n-      .waitingFor(Wait.forHealthcheck());\n+    GenericContainer<?> backend =\n+      new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n+        .withNetwork(Network.SHARED)\n+        .withNetworkAliases(\"backend\")\n+        .withCommand(\"backend\")\n+        .withExposedPorts(9000)\n+        .waitingFor(Wait.forHealthcheck());\n \n-    GenericContainer<?> frontend = new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n-      .withNetwork(Network.SHARED)\n-      .withNetworkAliases(\"frontend\")\n-      .withCommand(\"frontend\")\n-      .withExposedPorts(8081)\n-      .waitingFor(Wait.forHealthcheck());\n+    GenericContainer<?> frontend =\n+      new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n+        .withNetwork(Network.SHARED)\n+        .withNetworkAliases(\"frontend\")\n+        .withCommand(\"frontend\")\n+        .withExposedPorts(8081)\n+        .waitingFor(Wait.forHealthcheck());\n     containers.add(frontend);\n \n-    GenericContainer<?> prometheus = new GenericContainer<>(parse(\"prom/prometheus:latest\"))\n-      .withNetwork(Network.SHARED)\n-      .withNetworkAliases(\"prometheus\")\n-      .withExposedPorts(9090)\n-      .withCopyFileToContainer(\n-        MountableFile.forClasspathResource(\"prometheus.yml\"), \"/etc/prometheus/prometheus.yml\");\n+    // Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas\n+    // Use same version as in docker/examples/docker-compose-prometheus.yml\n+    GenericContainer<?> prometheus =\n+      new GenericContainer<>(parse(\"quay.io/prometheus/prometheus:v2.22.0\"))\n+        .withNetwork(Network.SHARED)\n+        .withNetworkAliases(\"prometheus\")\n+        .withExposedPorts(9090)\n+        .withCopyFileToContainer(\n+          MountableFile.forClasspathResource(\"prometheus.yml\"), \"/etc/prometheus/prometheus.yml\");\n     containers.add(prometheus);\n \n-    GenericContainer<?> grafana = new GenericContainer<>(parse(\"grafana/grafana:latest\"))\n+    // Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas\n+    // Use same version as in docker/examples/docker-compose-prometheus.yml\n+    GenericContainer<?> grafana = new GenericContainer<>(parse(\"quay.io/app-sre/grafana:7.3.1\"))\n       .withNetwork(Network.SHARED)\n       .withNetworkAliases(\"grafana\")\n       .withExposedPorts(3000)\n       .withEnv(\"GF_AUTH_ANONYMOUS_ENABLED\", \"true\")\n       .withEnv(\"GF_AUTH_ANONYMOUS_ORG_ROLE\", \"Admin\");\n     containers.add(grafana);\n \n-    GenericContainer<?> grafanaDashboards = new GenericContainer<>(parse(\"appropriate/curl:latest\"))\n-      .withNetwork(Network.SHARED)\n-      .withCommand(\"/create.sh\")\n-      .withCopyFileToContainer(\n-        MountableFile.forClasspathResource(\"create-datasource-and-dashboard.sh\"), \"/create.sh\");\n+    // This is an arbitrary small image that has curl installed\n+    // Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas\n+    // Use same version as in docker/examples/docker-compose-prometheus.yml\n+    GenericContainer<?> grafanaDashboards =\n+      new GenericContainer<>(parse(\"quay.io/rackspace/curl:7.70.0\"))\n+        .withNetwork(Network.SHARED)\n+        .withWorkingDirectory(\"/tmp\")\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60fd0ccf79d56b0039bd60b6302103dc603476ea"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af508cef76cb09da76b7e13340057c1b847530db", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/af508cef76cb09da76b7e13340057c1b847530db", "committedDate": "2020-11-02T03:54:55Z", "message": "more tidy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMzE5ODgy", "url": "https://github.com/openzipkin/zipkin/pull/3281#pullrequestreview-521319882", "createdAt": "2020-11-02T04:01:43Z", "commit": {"oid": "af508cef76cb09da76b7e13340057c1b847530db"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNDowMTo0M1rOHr1qTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwNDowMTo0M1rOHr1qTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcyOTk5Nw==", "bodyText": "If grafana has the zipkin dashboards, it should be working ok.", "url": "https://github.com/openzipkin/zipkin/pull/3281#discussion_r515729997", "createdAt": "2020-11-02T04:01:43Z", "author": {"login": "anuraaga"}, "path": "benchmarks/src/test/java/zipkin2/server/ServerIntegratedBenchmark.java", "diffHunk": "@@ -151,46 +157,62 @@ void runBenchmark(@Nullable GenericContainer<?> storage) throws Exception {\n \n   void runBenchmark(@Nullable GenericContainer<?> storage, GenericContainer<?> zipkin)\n     throws Exception {\n-    GenericContainer<?> backend = new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n-      .withNetwork(Network.SHARED)\n-      .withNetworkAliases(\"backend\")\n-      .withCommand(\"backend\")\n-      .withExposedPorts(9000)\n-      .waitingFor(Wait.forHealthcheck());\n+    GenericContainer<?> backend =\n+      new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n+        .withNetwork(Network.SHARED)\n+        .withNetworkAliases(\"backend\")\n+        .withCommand(\"backend\")\n+        .withExposedPorts(9000)\n+        .waitingFor(Wait.forHealthcheck());\n \n-    GenericContainer<?> frontend = new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n-      .withNetwork(Network.SHARED)\n-      .withNetworkAliases(\"frontend\")\n-      .withCommand(\"frontend\")\n-      .withExposedPorts(8081)\n-      .waitingFor(Wait.forHealthcheck());\n+    GenericContainer<?> frontend =\n+      new GenericContainer<>(parse(\"ghcr.io/openzipkin/brave-example:armeria\"))\n+        .withNetwork(Network.SHARED)\n+        .withNetworkAliases(\"frontend\")\n+        .withCommand(\"frontend\")\n+        .withExposedPorts(8081)\n+        .waitingFor(Wait.forHealthcheck());\n     containers.add(frontend);\n \n-    GenericContainer<?> prometheus = new GenericContainer<>(parse(\"prom/prometheus:latest\"))\n-      .withNetwork(Network.SHARED)\n-      .withNetworkAliases(\"prometheus\")\n-      .withExposedPorts(9090)\n-      .withCopyFileToContainer(\n-        MountableFile.forClasspathResource(\"prometheus.yml\"), \"/etc/prometheus/prometheus.yml\");\n+    // Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas\n+    // Use same version as in docker/examples/docker-compose-prometheus.yml\n+    GenericContainer<?> prometheus =\n+      new GenericContainer<>(parse(\"quay.io/prometheus/prometheus:v2.22.0\"))\n+        .withNetwork(Network.SHARED)\n+        .withNetworkAliases(\"prometheus\")\n+        .withExposedPorts(9090)\n+        .withCopyFileToContainer(\n+          MountableFile.forClasspathResource(\"prometheus.yml\"), \"/etc/prometheus/prometheus.yml\");\n     containers.add(prometheus);\n \n-    GenericContainer<?> grafana = new GenericContainer<>(parse(\"grafana/grafana:latest\"))\n+    // Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas\n+    // Use same version as in docker/examples/docker-compose-prometheus.yml\n+    GenericContainer<?> grafana = new GenericContainer<>(parse(\"quay.io/app-sre/grafana:7.3.1\"))\n       .withNetwork(Network.SHARED)\n       .withNetworkAliases(\"grafana\")\n       .withExposedPorts(3000)\n       .withEnv(\"GF_AUTH_ANONYMOUS_ENABLED\", \"true\")\n       .withEnv(\"GF_AUTH_ANONYMOUS_ORG_ROLE\", \"Admin\");\n     containers.add(grafana);\n \n-    GenericContainer<?> grafanaDashboards = new GenericContainer<>(parse(\"appropriate/curl:latest\"))\n-      .withNetwork(Network.SHARED)\n-      .withCommand(\"/create.sh\")\n-      .withCopyFileToContainer(\n-        MountableFile.forClasspathResource(\"create-datasource-and-dashboard.sh\"), \"/create.sh\");\n+    // This is an arbitrary small image that has curl installed\n+    // Use a quay.io mirror to prevent build outages due to Docker Hub pull quotas\n+    // Use same version as in docker/examples/docker-compose-prometheus.yml\n+    GenericContainer<?> grafanaDashboards =\n+      new GenericContainer<>(parse(\"quay.io/rackspace/curl:7.70.0\"))\n+        .withNetwork(Network.SHARED)\n+        .withWorkingDirectory(\"/tmp\")\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcwNjIyMA=="}, "originalCommit": {"oid": "60fd0ccf79d56b0039bd60b6302103dc603476ea"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1375, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}