{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNzYwMjYx", "number": 3203, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxMjoxNVrOEgwmLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwMTo1OTozOVrOElYhCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2MDkzOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/components/common/LoadingOverlay.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxMjoxNVrOHNuNgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxMjoxNVrOHNuNgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MDY1OQ==", "bodyText": "is there a way to say what it was loading? maybe if you pass state of the component you are trying to load, so that you can fallback to \"Error loading ${component}\"", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484150659", "createdAt": "2020-09-07T02:12:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/components/common/LoadingOverlay.tsx", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {\n+  Backdrop,\n+  CircularProgress,\n+  Theme,\n+  createStyles,\n+  makeStyles,\n+} from '@material-ui/core';\n+import { SerializedError } from '@reduxjs/toolkit';\n+import React, { useEffect } from 'react';\n+import { useDispatch } from 'react-redux';\n+\n+import { setAlert } from '../App/slice';\n+\n+interface LoadingOverlayProps {\n+  isLoading: boolean;\n+  error?: SerializedError;\n+}\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+  createStyles({\n+    backdrop: {\n+      zIndex: theme.zIndex.drawer + 1,\n+      color: '#fff',\n+    },\n+  }),\n+);\n+\n+const LoadingOverlay: React.FC<LoadingOverlayProps> = ({\n+  isLoading,\n+  error,\n+}) => {\n+  const classes = useStyles();\n+\n+  const dispatch = useDispatch();\n+\n+  useEffect(() => {\n+    if (error) {\n+      dispatch(\n+        setAlert({\n+          message: error.message || 'Error occurs when loading...',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2MjU0OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/AdjustedTrace.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxMzo1MVrOHNuOhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxMzo1MVrOHNuOhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MDkxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              endpoint: string; // If not exist, this filed will be 'unknown'.\n          \n          \n            \n              endpoint: string; // Ex. 'fooo' or 'unknown' on null span.localEndpoint\n          \n      \n    \n    \n  \n\nwhere 'foo' is a real example", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484150917", "createdAt": "2020-09-07T02:13:51Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2MzMyOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/AdjustedTrace.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNDozNlrOHNuPAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNDozNlrOHNuPAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              spanName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n              spanName: string; // span.name or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151041", "createdAt": "2020-09-07T02:14:36Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2Mzc2OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/AdjustedTrace.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNDo1NVrOHNuPQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNDo1NVrOHNuPQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTEwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              serviceName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n              serviceName: string; // span.localEndpoint.serviceName or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151107", "createdAt": "2020-09-07T02:14:55Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2NTAwOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/AdjustedTrace.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNTozN1rOHNuP6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNTozN1rOHNuP6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              rootSpan: {\n          \n          \n            \n              rootSpan: { // the root-most span, when the root is missing", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151272", "createdAt": "2020-09-07T02:15:37Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.\n+  parentId?: string;\n+  childIds: string[];\n+  serviceNames: string[];\n+  timestamp: number;\n+  duration: number;\n+  durationStr: string;\n+  tags: {\n+    key: string;\n+    value: string;\n+  }[];\n+  annotations: AdjustedAnnotation[];\n+  errorType: string;\n+  depth: number;\n+  width: number;\n+  left: number;\n+};\n+\n+type AdjustedTrace = {\n+  traceId: string;\n+  serviceNameAndSpanCounts: ServiceNameAndSpanCount[];\n+  duration: number;\n+  durationStr: string;\n+  rootSpan: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2NTQwOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/AdjustedTrace.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNTo1NlrOHNuQHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNTo1NlrOHNuQHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTMyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                spanName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n                spanName: string; // span.name or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151325", "createdAt": "2020-09-07T02:15:56Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.\n+  parentId?: string;\n+  childIds: string[];\n+  serviceNames: string[];\n+  timestamp: number;\n+  duration: number;\n+  durationStr: string;\n+  tags: {\n+    key: string;\n+    value: string;\n+  }[];\n+  annotations: AdjustedAnnotation[];\n+  errorType: string;\n+  depth: number;\n+  width: number;\n+  left: number;\n+};\n+\n+type AdjustedTrace = {\n+  traceId: string;\n+  serviceNameAndSpanCounts: ServiceNameAndSpanCount[];\n+  duration: number;\n+  durationStr: string;\n+  rootSpan: {\n+    serviceName: string; // If not exist, this field will be 'unknown'.\n+    spanName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2NTQ5OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/AdjustedTrace.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNjowM1rOHNuQMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxNjowM1rOHNuQMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                serviceName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n                serviceName: string; // span.localEndpoint.serviceName or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151346", "createdAt": "2020-09-07T02:16:03Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.\n+  parentId?: string;\n+  childIds: string[];\n+  serviceNames: string[];\n+  timestamp: number;\n+  duration: number;\n+  durationStr: string;\n+  tags: {\n+    key: string;\n+    value: string;\n+  }[];\n+  annotations: AdjustedAnnotation[];\n+  errorType: string;\n+  depth: number;\n+  width: number;\n+  left: number;\n+};\n+\n+type AdjustedTrace = {\n+  traceId: string;\n+  serviceNameAndSpanCounts: ServiceNameAndSpanCount[];\n+  duration: number;\n+  durationStr: string;\n+  rootSpan: {\n+    serviceName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2ODA1OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/Endpoint.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxODoxMFrOHNuRrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxODoxMFrOHNuRrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTcyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type Endpoint = {\n          \n          \n            \n            // Same type as Endpoint in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#\n          \n          \n            \n            type Endpoint = {", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151724", "createdAt": "2020-09-07T02:18:10Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/Endpoint.ts", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+type Endpoint = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg2ODY5OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/Span.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxODozOVrOHNuSEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxODozOVrOHNuSEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTgyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type Span = {\n          \n          \n            \n            // Same type as Span in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#\n          \n          \n            \n            type Span = {", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151826", "createdAt": "2020-09-07T02:18:39Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/Span.ts", "diffHunk": "@@ -12,15 +12,23 @@\n  * the License.\n  */\n \n-export const TRACE_LOAD_REQUEST = 'TRACE_LOAD_REQUEST';\n-export const TRACE_LOAD_SUCCESS = 'TRACE_LOAD_SUCCESS';\n-export const TRACE_LOAD_FAILURE = 'TRACE_LOAD_FAILURE';\n+import Annotation from './Annotation';\n+import Endpoint from './Endpoint';\n \n-export const TRACES_LOAD_REQUEST = 'TRACES_LOAD_REQUEST';\n-export const TRACES_LOAD_SUCCESS = 'TRACES_LOAD_SUCCESS';\n-export const TRACES_LOAD_FAILURE = 'TRACES_LOAD_FAILURE';\n-export const CLEAR_TRACES = 'TRACES_RESET';\n+type Span = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg3MDcyOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/slices/tracesSlice.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMDowMFrOHNuTLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMDowMFrOHNuTLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjExMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [key: string]: {\n          \n          \n            \n                [key: string]: { // key is the traceId", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484152111", "createdAt": "2020-09-07T02:20:00Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }) => {\n+    const ps = new URLSearchParams(params);\n+    const resp = await fetch(`${api.TRACES}?${ps}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces = (await resp.json()) as Span[][];\n+    const traces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(traces).map((traceId) =>\n+        buildTraceSummary(traces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces,\n+      traceSummaries,\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return {\n+          traceId,\n+          trace: traces[traceId],\n+        };\n+      }\n+      adjustedTrace = buildDetailedTraceSummary(skewCorrectedTrace);\n+      return {\n+        traceId,\n+        trace: {\n+          rawTrace,\n+          skewCorrectedTrace,\n+          adjustedTrace,\n+        },\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACE}/${traceId}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTrace: Span[] = await resp.json();\n+    const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+    const adjustedTrace: AdjustedTrace = buildDetailedTraceSummary(\n+      skewCorrectedTrace,\n+    );\n+    return {\n+      traceId,\n+      trace: {\n+        rawTrace,\n+        skewCorrectedTrace,\n+        adjustedTrace,\n+      },\n+    };\n+  },\n+);\n+\n+const readFileAsync = (blob: Blob) => {\n+  return new Promise<any>((resolve, reject) => {\n+    const reader = new FileReader();\n+    reader.onload = () => {\n+      resolve(reader.result);\n+    };\n+    reader.onerror = () => {\n+      reject(reader.error);\n+    };\n+    reader.readAsText(blob);\n+  });\n+};\n+\n+export const loadJsonTrace = createAsyncThunk(\n+  'traces/loadJson',\n+  async (blob: Blob) => {\n+    const rawTraceStr = await readFileAsync(blob);\n+    const rawTrace: Span[] = JSON.parse(rawTraceStr);\n+    ensureV2TraceData(rawTrace);\n+    const [{ traceId }] = rawTrace;\n+    const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+    const adjustedTrace: AdjustedTrace = buildDetailedTraceSummary(\n+      skewCorrectedTrace,\n+    );\n+    return {\n+      traceId,\n+      trace: {\n+        rawTrace,\n+        skewCorrectedTrace,\n+        adjustedTrace,\n+      },\n+    };\n+  },\n+);\n+\n+export interface TracesState {\n+  isLoading: boolean;\n+  error?: SerializedError;\n+  traces: {\n+    [key: string]: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg3MTczOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/Annotation.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMDo0MFrOHNuTvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMDo0MFrOHNuTvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type Annotation = {\n          \n          \n            \n            // Same type as Annotation in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#\n          \n          \n            \n            type Annotation = {", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484152253", "createdAt": "2020-09-07T02:20:40Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/Annotation.ts", "diffHunk": "@@ -11,14 +11,10 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n-import * as types from '../constants/action-types';\n \n-export const loadTrace = (trace) => ({\n-  type: types.TRACE_VIEWER__LOAD_TRACE,\n-  trace,\n-});\n+type Annotation = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNzg3NTgyOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/zipkin/trace.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMzoyNVrOHNuV9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMzoyNVrOHNuV9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjgyMA==", "bodyText": "I see this logic twice in this file. do we need that? I don't really know if we should have earlier accepted the remote Endpoint servicename for the root span but I suppose it isn't terrible either.", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484152820", "createdAt": "2020-09-07T02:23:25Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/zipkin/trace.js", "diffHunk": "@@ -369,17 +367,15 @@ export function detailedTraceSummary(root) {\n     modelview.spans.push(spanRow);\n   }\n \n-  if (modelview.spans.length >= 0) {\n-    modelview.rootSpan = {\n-      serviceName: modelview.spans[0].serviceName || 'unknown',\n-      spanName: modelview.spans[0].spanName || 'unknown',\n-    };\n-  } else {\n-    modelview.rootSpan = {\n-      serviceName: 'unknown',\n-      spanName: 'unknown',\n-    };\n-  }\n+  modelview.rootSpan = {};\n+  // If the first element does not exist, Error will be thrown.\n+  // So we don't have to check rootSpan existence.\n+  const [rootSpan] = root.queueRootMostSpans();\n+  modelview.rootSpan.serviceName =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTcyOTQ2OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/components/TracePage/TracePage.jsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MToxNFrOHRwS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwOTo1Njo1NlrOHR6KlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTA5OQ==", "bodyText": "curious. what is being shadowed.. comment worthy? or is this temporary...", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r488379099", "createdAt": "2020-09-15T04:41:14Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/components/TracePage/TracePage.jsx", "diffHunk": "@@ -11,98 +11,50 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n+/* eslint-disable no-shadow */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODU0MDgyMQ==", "bodyText": "loadTrace is shadowed..\nBut this shadow can be avoided.. I'll do so.", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r488540821", "createdAt": "2020-09-15T09:56:56Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/components/TracePage/TracePage.jsx", "diffHunk": "@@ -11,98 +11,50 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n+/* eslint-disable no-shadow */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTA5OQ=="}, "originalCommit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NTczMjk3OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/slices/tracesSlice.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MzowOVrOHRwU5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MzowOVrOHRwU5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTYyMw==", "bodyText": "mental note: we should revisit this naming", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r488379623", "createdAt": "2020-09-15T04:43:09Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }, thunkApi) => {\n+    const ps = new URLSearchParams(params);\n+\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { search, traces }: TracesState = (thunkApi.getState() as any).traces;\n+    // If the query is the same as the previous query, it will not fetch again.\n+    if (search.prevQuery === ps.toString()) {\n+      return {\n+        traces,\n+        traceSummaries: search.traceSummaries,\n+        query: ps.toString(),\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACES}?${ps.toString()}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces: Span[][] = await resp.json();\n+\n+    const newTraces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries: TraceSummary[] = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(newTraces).map((traceId) =>\n+        buildTraceSummary(newTraces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces: newTraces,\n+      traceSummaries,\n+      query: ps.toString(),\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return traces[traceId];\n+      }\n+      if (skewCorrectedTrace) {\n+        adjustedTrace = buildDetailedTraceSummary(skewCorrectedTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDA5OTU1OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/slices/tracesSlice.ts", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo0NzowMFrOHSbClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDowNTowOVrOHSbXxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3OTQ0Ng==", "bodyText": "will the return here have the same type as the result of buildDetailedTraceSummary?", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r489079446", "createdAt": "2020-09-15T23:47:00Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }, thunkApi) => {\n+    const ps = new URLSearchParams(params);\n+\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { search, traces }: TracesState = (thunkApi.getState() as any).traces;\n+    // If the query is the same as the previous query, it will not fetch again.\n+    if (search.prevQuery === ps.toString()) {\n+      return {\n+        traces,\n+        traceSummaries: search.traceSummaries,\n+        query: ps.toString(),\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACES}?${ps.toString()}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces: Span[][] = await resp.json();\n+\n+    const newTraces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries: TraceSummary[] = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(newTraces).map((traceId) =>\n+        buildTraceSummary(newTraces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces: newTraces,\n+      traceSummaries,\n+      query: ps.toString(),\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return traces[traceId];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4836fef9e48f9810ff71f1e3b81200e0d962ef9c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MzU5NQ==", "bodyText": "Yes.\nIf this adjustedTraces is not undefined, this trace has already been calculated by buildDetailedTraceSummary.\nso I avoid recalculating it and return the data as it is.", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r489083595", "createdAt": "2020-09-16T00:00:54Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }, thunkApi) => {\n+    const ps = new URLSearchParams(params);\n+\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { search, traces }: TracesState = (thunkApi.getState() as any).traces;\n+    // If the query is the same as the previous query, it will not fetch again.\n+    if (search.prevQuery === ps.toString()) {\n+      return {\n+        traces,\n+        traceSummaries: search.traceSummaries,\n+        query: ps.toString(),\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACES}?${ps.toString()}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces: Span[][] = await resp.json();\n+\n+    const newTraces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries: TraceSummary[] = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(newTraces).map((traceId) =>\n+        buildTraceSummary(newTraces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces: newTraces,\n+      traceSummaries,\n+      query: ps.toString(),\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return traces[traceId];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3OTQ0Ng=="}, "originalCommit": {"oid": "4836fef9e48f9810ff71f1e3b81200e0d962ef9c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4NDg3MQ==", "bodyText": "above this         return traces[traceId]; line, add // this trace has already been calculated by buildDetailedTraceSummary?", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r489084871", "createdAt": "2020-09-16T00:05:09Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }, thunkApi) => {\n+    const ps = new URLSearchParams(params);\n+\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { search, traces }: TracesState = (thunkApi.getState() as any).traces;\n+    // If the query is the same as the previous query, it will not fetch again.\n+    if (search.prevQuery === ps.toString()) {\n+      return {\n+        traces,\n+        traceSummaries: search.traceSummaries,\n+        query: ps.toString(),\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACES}?${ps.toString()}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces: Span[][] = await resp.json();\n+\n+    const newTraces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries: TraceSummary[] = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(newTraces).map((traceId) =>\n+        buildTraceSummary(newTraces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces: newTraces,\n+      traceSummaries,\n+      query: ps.toString(),\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return traces[traceId];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3OTQ0Ng=="}, "originalCommit": {"oid": "4836fef9e48f9810ff71f1e3b81200e0d962ef9c"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NjExMDg5OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/zipkin/trace.test.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyNjo0MlrOHU1BRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyNjo0MlrOHU1BRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYwMjI0Nw==", "bodyText": "hah. I bet this was surprising :D", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r491602247", "createdAt": "2020-09-19T23:26:42Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/zipkin/trace.test.js", "diffHunk": "@@ -482,8 +482,8 @@ describe('detailedTraceSummary', () => {\n       { serviceName: 'frontend', spanCount: 1 },\n     ]);\n     expect(rootSpan).toEqual({\n-      serviceName: 'backend',\n-      spanName: 'get /api',\n+      serviceName: 'frontend',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NjM0NDQzOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/models/Span.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwMTo1OTozOVrOHU3aTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMzozNDowM1rOHU979g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0MTQyMg==", "bodyText": "I wonder if anyone would appreciate us publishing these types at some point.\nThough it also brought the idea of perhaps using zipkin-js for its model types\nhttps://www.github.com/openzipkin/zipkin-js/tree/master/packages%2Fzipkin%2Findex.d.ts\nJust random idea :)", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r491641422", "createdAt": "2020-09-20T01:59:39Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/models/Span.ts", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Annotation from './Annotation';\n+import Endpoint from './Endpoint';\n+\n+// Same type as Span in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0ODM0Mg==", "bodyText": "probably this one is more the point https://github.com/openzipkin/zipkin-js/blob/master/packages/zipkin/src/model.js\nif anything we could match the types and put a link to it for now and make a note? That way the idea lingers more directly, and we can move that comment about the type into zipkin-js?\nfwiw if doing a dep on the openapi type, I'd be more inclined to publish from the api project not zipkin-js.. we have a similar thing published for proto (though not generated..)", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r491748342", "createdAt": "2020-09-20T23:34:03Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/Span.ts", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Annotation from './Annotation';\n+import Endpoint from './Endpoint';\n+\n+// Same type as Span in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0MTQyMg=="}, "originalCommit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1238, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}