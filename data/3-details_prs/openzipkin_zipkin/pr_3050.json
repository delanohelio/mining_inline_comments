{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NzczMzg4", "number": 3050, "title": "Dynamic elasticsearch security file", "bodyText": "Load elasticsearch credentials from a properties file in a fixed rate interval. There are two parameters to control it:\n\nES_CREDENTIALS_FILE: An absolute path of the file.\nES_CREDENTIALS_REFRESH_INTERVAL: Refresh interval in\nseconds.\n\nNotice: Before the credentials stored in properties file is loaded into the heap, the username and password parameters are as the default value. If one of them is an empty string, basic authentication is disabled. That means \"Authorization\" header is absent in HTTP request.\nThe file loader implement is different from the sketch showed in #3041. Once using WatchService to watch the file change on my local MacBook,  I have seen a >10 seconds delay between when the file is added and when it is picked up. And When I run the test suit(all test cases in one folder), the delay is always more than 60 seconds(test case timeout is 1 minute), which causes my test case to fail.\nAfter investigating it a bit, MacOS needs some special approach to watch a file as bellow:\n\nhttps://stackoverflow.com/questions/9588737/is-java-7-watchservice-slow-for-anyone-else/18362404#18362404\nhttps://github.com/gjoseph/barbarywatchservice\n\nConsidering our scenario, they seem too complicated to follow. So I adapt to a fixed-rate refresh strategy to load credentials from the security file. The default interval is 1 seconds which doesn't affect the performance of zipkin-server.\nfixes #3041", "createdAt": "2020-04-01T05:44:37Z", "url": "https://github.com/openzipkin/zipkin/pull/3050", "merged": true, "mergeCommit": {"oid": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f"}, "closed": true, "closedAt": "2020-04-14T01:10:23Z", "author": {"login": "hanahmily"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTQb6qgH2gAyMzk2NzczMzg4OjljZTc1ZWQwZGYyOWU4NWU2OGNmNzBjYjBjNWI5YjI4YjYzMmJiNDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWvrsogFqTM5MTgxMjE3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44", "committedDate": "2020-04-01T04:59:37Z", "message": "Dynamic elasticsearch security file\n\nLoad elasticsearch credentials from a properties file in a fixed\nrate interval. There are two parameters to control it:\n  * security-file-path: An absolute path of file.\n  * security-file-refresh-interval-in-second: Refresh interval in\n    seconds.\n\nNotic: Before the crendentails stored in properties file are loaded\ninto heap, username/password parameters are as the default value.\nIf one of them is a empty string, basic authentication is disable.\nThat means \"Authorization\" header is absent in http request.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MjkxNzU2", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-385291756", "createdAt": "2020-04-01T06:18:20Z", "commit": {"oid": "9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoxODoyMVrOF-yPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoxODoyMVrOF-yPDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3OTA4NA==", "bodyText": "I think maybe spring already has a scheduler bean? if not, define this as a bean so it can shutdown more coherently.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401379084", "createdAt": "2020-04-01T06:18:21Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +145,30 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  Consumer<ClientOptionsBuilder> dynamicElasticsearchAuth(ZipkinElasticsearchStorageProperties es,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    return new Consumer<ClientOptionsBuilder>() {\n+      @Override\n+      public void accept(final ClientOptionsBuilder client) {\n+        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/251b1ab3e507697633135a88cd8a2a437a51bc5c", "committedDate": "2020-04-01T12:38:37Z", "message": "Replace ExecutorService with Spring Schedule\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzU2NzMy", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-385756732", "createdAt": "2020-04-01T16:34:10Z", "commit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNDoxMFrOF_I99g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNDoxMFrOF_I99g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MTU0Mg==", "bodyText": "Wondering if instead of the more generic SECURITY term, ES_CREDENTIALS_FILE would be a more descriptive and concise wording given that it only contains credentials ? Unless the file is going to be used for other dynamically reloadable security properties, will that be the case ?\nIf we agree that CREDENTIALS is the way to go, then probably a lot of other references to security etc will need to be adjusted as well ...", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401751542", "createdAt": "2020-04-01T16:34:10Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,13 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_SECURITY_FILE_PATH`: Elasticsearch security properties file path, which defaults to empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzYwMjE3", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-385760217", "createdAt": "2020-04-01T16:38:35Z", "commit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozODozNVrOF_JJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozODozNVrOF_JJBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NDM3NA==", "bodyText": "Can you make the link <a href ...", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401754374", "createdAt": "2020-04-01T16:38:35Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,24 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n  * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzY2NTU1", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-385766555", "createdAt": "2020-04-01T16:46:42Z", "commit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0Njo0MlrOF_Jc8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0Njo0MlrOF_Jc8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTQ3Mw==", "bodyText": "The main feature of this file is that it's reloaded periodically , can we mention that here ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401759473", "createdAt": "2020-04-01T16:46:42Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,13 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_SECURITY_FILE_PATH`: Elasticsearch security properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NzY2ODc2", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-385766876", "createdAt": "2020-04-01T16:47:07Z", "commit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0NzowN1rOF_Jd7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0NzowN1rOF_Jd7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTcyNg==", "bodyText": "href same as above", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401759726", "createdAt": "2020-04-01T16:47:07Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Nzc2OTUy", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-385776952", "createdAt": "2020-04-01T16:59:37Z", "commit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1OTozN1rOF_KABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1OTozN1rOF_KABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2ODQ1NQ==", "bodyText": "maybe an expression * 1000 here does that bring any extra safety ? Can the user specify 0.5 as value, and if yes what would happen ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401768455", "createdAt": "2020-04-01T16:59:37Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicSecurityFileLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from security file.\n+ */\n+class DynamicSecurityFileLoader {\n+  static final String SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.security-file-refresh-interval-in-second\";\n+\n+  private final String securityFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicSecurityFileLoader(BasicCredentials basicCredentials, String securityFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.securityFilePath = securityFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND +\"}000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6831799d2a0ddc38a4c3415f2f5be33fd3f27987", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/6831799d2a0ddc38a4c3415f2f5be33fd3f27987", "committedDate": "2020-04-02T05:44:28Z", "message": "Polish codes\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/eb945a4980025f43c24de52a4f84950708e52704", "committedDate": "2020-04-02T13:29:08Z", "message": "Triger CI\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTg1MzM5", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386585339", "createdAt": "2020-04-02T16:17:01Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoxNzowMVrOF_y8HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoxNzowMVrOF_y8HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzOTE5Ng==", "bodyText": "Looking at other time related configuration options SELF_TRACING_FLUSH_INTERVAL, ES_TIMEOUT , QUERY_LOOKBACK etc we don't specify the time unit it seems. Would it be ok for you to leave it out here as well, so ES_CREDENTIALS_FILE_REFRESH_INTERVAL ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402439196", "createdAt": "2020-04-02T16:17:01Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.\n+    * `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND`: Credentials file refresh interval in seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTg4MDIx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386588021", "createdAt": "2020-04-02T16:20:16Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyMDoxN1rOF_zEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyMDoxN1rOF_zEhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTM1MA==", "bodyText": "is the requirement for a .properties file suffix a Spring restriction ? If not, any special reason to insist on it ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402441350", "createdAt": "2020-04-02T16:20:17Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NTk0NTA4", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386594508", "createdAt": "2020-04-02T16:28:10Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyODoxMFrOF_zYmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyODoxMFrOF_zYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjQ5MQ==", "bodyText": "throwing the IOException can get quite spammy if the refresh interval is small. Should we consider logging the stacktrace only once, and then suppressing it for further invocations ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402446491", "createdAt": "2020-04-02T16:28:10Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.credentials-file-refresh-interval-in-second\";\n+\n+  private final String credentialsFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFilePath = credentialsFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n+  void load() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjA4MTIx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386608121", "createdAt": "2020-04-02T16:44:50Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo0NDo1MFrOF_0EFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo0NDo1MFrOF_0EFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzYyMA==", "bodyText": "... to every request per. incomplete sentence ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402457620", "createdAt": "2020-04-02T16:44:50Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,28 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request per.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjEzMDEz", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386613013", "createdAt": "2020-04-02T16:50:59Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MDo1OVrOF_0TvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MDo1OVrOF_0TvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTYyOQ==", "bodyText": "nit: i would call this method just basicCredentials since at this point they are not dynamic per se, they become dynamic when you hook them up to the DynamicCredentialsFileLoader", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402461629", "createdAt": "2020-04-02T16:50:59Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +144,21 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjE2NzAx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386616701", "createdAt": "2020-04-02T16:55:41Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NTo0MVrOF_0fsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NTo0MVrOF_0fsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDY5MA==", "bodyText": "the wording here is not clear to me, i can have a go at it and come up with more clearer wording tomorrow if you don't mind.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402464690", "createdAt": "2020-04-02T16:55:41Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODYzMjQz", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386863243", "createdAt": "2020-04-03T00:21:09Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMTowOVrOGAA9yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMTowOVrOGAA9yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTAwMg==", "bodyText": "ES_CREDENTIALS_FILE_PATH is chatty, please use ES_CREDENTIALS_FILE", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402669002", "createdAt": "2020-04-03T00:21:09Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2ODY0NTg0", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-386864584", "createdAt": "2020-04-03T00:25:29Z", "commit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyNToyOVrOGABChQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyNToyOVrOGABChQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDIxMw==", "bodyText": "credentials-file", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402670213", "createdAt": "2020-04-03T00:25:29Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -42,18 +42,24 @@\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import zipkin2.elasticsearch.ElasticsearchStorage;\n import zipkin2.server.internal.ConditionalOnSelfTracing;\n import zipkin2.storage.StorageComponent;\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n+@EnableScheduling\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";\n+  static final String PASSWORD_PROP = \"zipkin.storage.elasticsearch.password\";\n+  static final String CREDENTIALS_FILE_PATH_PROP =\n+    \"zipkin.storage.elasticsearch.credentials-file-path\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/7232548532361fd4d97ee0902bc8e44f907cf42d", "committedDate": "2020-04-03T12:56:51Z", "message": "Polish codes and docs\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDk4MzY5", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387498369", "createdAt": "2020-04-03T18:45:01Z", "commit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo0NTowMVrOGAjt9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo0NTowMVrOGAjt9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ==", "bodyText": "First time guava is used in zipkin-server, i think it's a no-go to use there but we don't have anything enforcing it. @adriancole can you confirm ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403238391", "createdAt": "2020-04-03T18:45:01Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDk5NDIz", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387499423", "createdAt": "2020-04-03T18:46:42Z", "commit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo0Njo0MlrOGAjzdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo0Njo0MlrOGAjzdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzOTc5OA==", "bodyText": "CREDENTIALS_REFRESH_INTERVAL to align with above ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403239798", "createdAt": "2020-04-03T18:46:42Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjQ5ODg3", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387649887", "createdAt": "2020-04-04T01:02:15Z", "commit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMjoxNVrOGAtqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMjoxNVrOGAtqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTI2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Load username/password from credentials file.\n          \n          \n            \n             * Loads username/password from credentials file.\n          \n          \n            \n             *\n          \n          \n            \n             * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n          \n          \n            \n             * This means that spans will drop and api failures will occur for any time remaining in the refresh\n          \n          \n            \n             * interval. A future version can tighten this by also using poll events.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401267", "createdAt": "2020-04-04T01:02:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "111e9d410aba8b7044a5c53e812c896abbc82bf0", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/111e9d410aba8b7044a5c53e812c896abbc82bf0", "committedDate": "2020-04-04T01:02:31Z", "message": "add warning"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwMDE1", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650015", "createdAt": "2020-04-04T01:03:06Z", "commit": {"oid": "111e9d410aba8b7044a5c53e812c896abbc82bf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzowN1rOGAtq2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzowN1rOGAtq2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTQzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n          \n          \n            \n              static final String CREDENTIALS_REFRESH_INTERVAL =", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401432", "createdAt": "2020-04-04T01:03:07Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111e9d410aba8b7044a5c53e812c896abbc82bf0"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/0085192a312bb86b50f49819da1cfe09efcbfda2", "committedDate": "2020-04-04T01:03:13Z", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwMDgz", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650083", "createdAt": "2020-04-04T01:03:29Z", "commit": {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzozMFrOGAtrGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzozMFrOGAtrGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n          \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401497", "createdAt": "2020-04-04T01:03:30Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwMTMx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650131", "createdAt": "2020-04-04T01:03:52Z", "commit": {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzo1MlrOGAtrTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzo1MlrOGAtrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTU0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n          \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401548", "createdAt": "2020-04-04T01:03:52Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/18207ead486cdc560a24f9be5e3622b6a93e4dac", "committedDate": "2020-04-04T01:03:57Z", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwMzcy", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650372", "createdAt": "2020-04-04T01:05:42Z", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNTo0MlrOGAtstA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNTo0MlrOGAtstA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTkwOA==", "bodyText": "I think this is milliseconds.. can you lookup syntax to make this seconds? maybe just adding 's' after", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401908", "createdAt": "2020-04-04T01:05:42Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwNDQ5", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650449", "createdAt": "2020-04-04T01:06:15Z", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjoxNlrOGAttMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjoxNlrOGAttMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjAzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   credentials-refresh-interval: 5000\n          \n          \n            \n             *   credentials-refresh-interval: 5", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402033", "createdAt": "2020-04-04T01:06:16Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -35,6 +35,8 @@\n  *   index-replicas: 1\n  *   username: username\n  *   password: password\n+ *   credentials-file: credentialsFile\n+ *   credentials-refresh-interval: 5000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwNTYx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650561", "createdAt": "2020-04-04T01:06:58Z", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjo1OFrOGAtt3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjo1OFrOGAtt3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjIwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Credentials refresh interval(in milliseconds) */\n          \n          \n            \n              /** Credentials refresh interval (in seconds) */", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402205", "createdAt": "2020-04-04T01:06:58Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval(in milliseconds) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwNTg4", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650588", "createdAt": "2020-04-04T01:07:12Z", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzoxMlrOGAtt7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzoxMlrOGAtt7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjIyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Integer credentialsRefreshInterval = 5_000;\n          \n          \n            \n              private Integer credentialsRefreshInterval = 5;", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402220", "createdAt": "2020-04-04T01:07:12Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval(in milliseconds) */\n+  private Integer credentialsRefreshInterval = 5_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwNjc4", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650678", "createdAt": "2020-04-04T01:07:49Z", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzo0OVrOGAtuoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzo0OVrOGAtuoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjQwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  credentials-refresh-interval: ${ES_CREDENTIALS_REFRESH_INTERVAL:5000}\n          \n          \n            \n                  credentials-refresh-interval: ${ES_CREDENTIALS_REFRESH_INTERVAL:5}", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402400", "createdAt": "2020-04-04T01:07:49Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/resources/zipkin-server-shared.yml", "diffHunk": "@@ -155,6 +155,8 @@ zipkin:\n       index-replicas: ${ES_INDEX_REPLICAS:1}\n       username: ${ES_USERNAME:}\n       password: ${ES_PASSWORD:}\n+      credentials-file: ${ES_CREDENTIALS_FILE:}\n+      credentials-refresh-interval: ${ES_CREDENTIALS_REFRESH_INTERVAL:5000}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwNzI2", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650726", "createdAt": "2020-04-04T01:08:06Z", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowODowN1rOGAtuxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowODowN1rOGAtuxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjQzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"zipkin.storage.elasticsearch.credentials-refresh-interval=3000\",\n          \n          \n            \n                  \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402439", "createdAt": "2020-04-04T01:08:07Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+\n+import static java.time.Duration.ofSeconds;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;\n+import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n+\n+class ITElasticsearchDynamicCredentials {\n+\n+  @RegisterExtension static MockWebServerExtension server = new MockWebServerExtension() {\n+    @Override protected void configureServer(ServerBuilder sb) throws Exception {\n+      sb.https(0);\n+      Ssl ssl = new Ssl();\n+      ssl.setKeyStore(\"classpath:keystore.jks\");\n+      ssl.setKeyStorePassword(\"password\");\n+      ssl.setTrustStore(\"classpath:keystore.jks\");\n+      ssl.setTrustStorePassword(\"password\");\n+\n+      final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);\n+      final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);\n+      sb.tls(keyManagerFactory)\n+        .tlsCustomizer(sslContextBuilder -> {\n+          sslContextBuilder.keyManager(keyManagerFactory);\n+          sslContextBuilder.trustManager(trustManagerFactory);\n+        });\n+    }\n+  };\n+\n+  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+  ElasticsearchStorage storage;\n+  File credentialsFile;\n+\n+  @BeforeEach void init() throws IOException {\n+    credentialsFile = File.createTempFile(\"zipkin-server-security\", \".properties\");\n+    Properties props = new Properties();\n+    props.put(USERNAME_PROP, \"foo\");\n+    props.put(PASSWORD_PROP, \"bar\");\n+    try (FileOutputStream os = new FileOutputStream(credentialsFile)) {\n+      props.store(os, \"\");\n+    }\n+    TestPropertyValues.of(\n+      \"spring.config.name=zipkin-server\",\n+      \"zipkin.storage.type:elasticsearch\",\n+      \"zipkin.storage.elasticsearch.hosts:https://localhost:\" + server.httpsPort(),\n+      \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile.getAbsolutePath(),\n+      \"zipkin.storage.elasticsearch.credentials-refresh-interval=3000\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUwODkx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387650891", "createdAt": "2020-04-04T01:09:23Z", "commit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowOToyM1rOGAtvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowOToyM1rOGAtvew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjYxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Convert second to millisecond", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402619", "createdAt": "2020-04-04T01:09:23Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert second to millisecond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/781d24328f448baf8f340680050b7d2d81860eb9", "committedDate": "2020-04-04T01:10:34Z", "message": "Fix units"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUxNzMx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387651731", "createdAt": "2020-04-04T01:16:51Z", "commit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjUzMjI1", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387653225", "createdAt": "2020-04-04T01:31:49Z", "commit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTozMTo0OVrOGAt6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTozMTo0OVrOGAt6Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTQwNw==", "bodyText": "actually if we use a normal single thread scheduled executor and make this type closeable, it should be less error prone on things like this. Spring automatically closes beans on shutdown.\nAlso, this as a bean allows something to synchronously call load auth fail. If we don't do this now, move it to a comment.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403405407", "createdAt": "2020-04-04T01:31:49Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjY0NzAx", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387664701", "createdAt": "2020-04-04T03:57:43Z", "commit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMzo1Nzo0M1rOGAu1sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNDowNzoxNFrOGAu5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDU5Mg==", "bodyText": "Agree there isn't a real need to enforce the extension", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420592", "createdAt": "2020-04-04T03:57:43Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTM1MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA==", "bodyText": "Let's just make this @Nullable instead of using Optional", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420790", "createdAt": "2020-04-04T03:59:16Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n+ */\n+final class BasicCredentials {\n+\n+  private volatile String basicCredentials;\n+\n+  BasicCredentials() {\n+\n+  }\n+\n+  BasicCredentials(String username, String password) {\n+    updateCredentials(username, password);\n+  }\n+\n+  void updateCredentials(String username, String password) {\n+    String token = username + ':' + password;\n+    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+  }\n+\n+  Optional<String> getCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDkxNQ==", "bodyText": "I don't think we need this note. This is using blocking I/O on a separate thread from the server event loop so shouldn't really effect the API.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420915", "createdAt": "2020-04-04T04:01:03Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTE2NA==", "bodyText": "Is this to reduce logging if a user sets a really small refresh interval? It seems like overkill especially since most will be in the seconds, how about just logging without the limit?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403421164", "createdAt": "2020-04-04T04:03:38Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ=="}, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA==", "bodyText": "I think we can use Duration to support any type of interval like 5s 1m", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403421548", "createdAt": "2020-04-04T04:07:14Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,23 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjczNzA2", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-387673706", "createdAt": "2020-04-04T06:44:02Z", "commit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjo0NDowMlrOGAvqRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjo0NDowMlrOGAvqRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzNDA1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n          \n          \n            \n             * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403434055", "createdAt": "2020-04-04T06:44:02Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "828d7890476b118051b4894f7c6711b006a43d53", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/828d7890476b118051b4894f7c6711b006a43d53", "committedDate": "2020-04-04T06:44:08Z", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b9dcb421e9b463c990981250450146d398ca01", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/85b9dcb421e9b463c990981250450146d398ca01", "committedDate": "2020-04-06T03:06:39Z", "message": "Drop \".properties\" suffix restriction.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "committedDate": "2020-04-06T03:22:49Z", "message": "Update description of ES_CREDENTIALS_FILE\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e21aa830a0dd6bae7ce67d1c34ee8a0d489872c", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/4e21aa830a0dd6bae7ce67d1c34ee8a0d489872c", "committedDate": "2020-04-06T03:21:53Z", "message": "Update description of ES_CREDENTIALS_FILE\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}, "afterCommit": {"oid": "6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/6e3e2d3595656506d2f8f8953e1c6a1ced717b21", "committedDate": "2020-04-06T03:22:49Z", "message": "Update description of ES_CREDENTIALS_FILE\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MDA4MTUz", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-388008153", "createdAt": "2020-04-06T07:52:05Z", "commit": {"oid": "6e3e2d3595656506d2f8f8953e1c6a1ced717b21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ccce292465f3a3453a88de077c007b60b5a8f3d", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/9ccce292465f3a3453a88de077c007b60b5a8f3d", "committedDate": "2020-04-06T14:55:36Z", "message": "More nits\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzM5NTI5", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-388339529", "createdAt": "2020-04-06T15:02:26Z", "commit": {"oid": "9ccce292465f3a3453a88de077c007b60b5a8f3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowMjoyNlrOGBcHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowMjoyNlrOGBcHEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2MjMyMg==", "bodyText": "zipkin-server should stay 1.8, as directed from the parent pom ...", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404162322", "createdAt": "2020-04-06T15:02:26Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/pom.xml", "diffHunk": "@@ -609,6 +609,14 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>9</source>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccce292465f3a3453a88de077c007b60b5a8f3d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d40c1ef56126b8b1d6b6356265b49cfe182f4ce3", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/d40c1ef56126b8b1d6b6356265b49cfe182f4ce3", "committedDate": "2020-04-06T15:06:40Z", "message": "Remove java version plugin\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38", "author": {"user": {"login": "jorgheymans", "name": "Jorg Heymans"}}, "url": "https://github.com/openzipkin/zipkin/commit/5f597b496191dea0f0f807c366a6c9db02626f38", "committedDate": "2020-04-06T17:36:05Z", "message": "add Adrian's note about maybe switching to a single thread scheduled executor later."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4Nzk2ODg0", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-388796884", "createdAt": "2020-04-07T05:38:10Z", "commit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTozODoxMFrOGBzkvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTozODoxMFrOGBzkvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0Njc0OA==", "bodyText": "this is a surprising hack. please change the place where it is used instead as it doesn't make sense for a property to be manipulated like this. The scheduled expression might accept seconds expression like s.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404546748", "createdAt": "2020-04-07T05:38:10Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert seconds to milliseconds\n+    this.credentialsRefreshInterval = credentialsRefreshInterval * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/9e59bed6e9295d412646981dfa1fbee693fcebf9", "committedDate": "2020-04-07T13:28:43Z", "message": "Replace Spring @Scheduled with a simple ScheduledExecutorService\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTcyMzkz", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-389572393", "createdAt": "2020-04-08T00:09:33Z", "commit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowOTozM1rOGCahhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MDo0OVrOGCbEug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDkwMQ==", "bodyText": "remove the _PROP suffixes as they are inconsistent.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405184901", "createdAt": "2020-04-08T00:09:33Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -48,12 +52,18 @@\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NTA2OQ==", "bodyText": "failing at startup will help people figure out initialization problems. The logic I wrote above should be fine\nas if the sophistication of a dynamic file loader is file is used, it would be dumb to have an empty password :) calling loader.updateCredentialsFromProperties() once before scheduling will catch\nall these things.\n      DynamicCredentialsFileLoader credentialsLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n       // throw and crashes the server on any setup error.\n      credentialsLoader.updateCredentialsFromProperties();\n      ses.scheduleAtFixedRate(0, credentialsLoader, credentialsRefreshInterval, TimeUnit.SECONDS);", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405185069", "createdAt": "2020-04-08T00:10:04Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +148,28 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials basicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean(destroyMethod=\"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  ScheduledExecutorService dynamicCredentialsScheduledExecutorService(\n+    @Value(\"${\" + CREDENTIALS_FILE_PROP + \"}\") String credentialsFile,\n+    @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n+      new ThreadFactoryBuilder()\n+        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n+        .build());\n+    ses.scheduleAtFixedRate(new DynamicCredentialsFileLoader(basicCredentials, credentialsFile),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDczOA==", "bodyText": "this is ok, but better to make a src/test/resources file instead as it is not subject to oddness in windows or other container constraints.\nEx. successCase\n\"zipkin.storage.elasticsearch.credentials-file=\"+pathOfResource(\"/valid-es-credentials.properties\")\n--snip--\n\nString pathOfResource(String resource) {\n  File file = new File(getClass().getClassLoader().getResource(resourceName).getFile());\n  return file.getAbsolutePath();\n}\nTesting bad path is easy as you just use a path that doesnt' exist in ./src/test/resources\nIf you want to test misspelled property names, you only have one more test resource file to make.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405190738", "createdAt": "2020-04-08T00:29:00Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+\n+import static java.time.Duration.ofSeconds;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;\n+import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n+\n+class ITElasticsearchDynamicCredentials {\n+\n+  @RegisterExtension static MockWebServerExtension server = new MockWebServerExtension() {\n+    @Override protected void configureServer(ServerBuilder sb) throws Exception {\n+      sb.https(0);\n+      Ssl ssl = new Ssl();\n+      ssl.setKeyStore(\"classpath:keystore.jks\");\n+      ssl.setKeyStorePassword(\"password\");\n+      ssl.setTrustStore(\"classpath:keystore.jks\");\n+      ssl.setTrustStorePassword(\"password\");\n+\n+      final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);\n+      final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);\n+      sb.tls(keyManagerFactory)\n+        .tlsCustomizer(sslContextBuilder -> {\n+          sslContextBuilder.keyManager(keyManagerFactory);\n+          sslContextBuilder.trustManager(trustManagerFactory);\n+        });\n+    }\n+  };\n+\n+  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+  ElasticsearchStorage storage;\n+  File credentialsFile;\n+\n+  @BeforeEach void init() throws IOException {\n+    credentialsFile = File.createTempFile(\"zipkin-server\", \"credentials\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NA==", "bodyText": "@hanahmily @anuraaga @jorgheymans  I think we should default to 1 second because without this you can resolve storage failures faster than 5 seconds by simply restarting the server. Slim can restart in less than 1 second, so I think 1 second here is good for slow hosts and more importantly the convenience of not needing\nto automate restarts.\ncc also @jcarres-mdsol\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                     5 seconds.\n          \n          \n            \n                                                     1 second. This is the maximum amount of time spans will drop due to stale\n          \n          \n            \n                                                     credentials. Any errors reading the credentials file occur in logs at this rate.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192844", "createdAt": "2020-04-08T00:36:52Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,14 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE`: The location of a file containing Elasticsearch basic authentication\n+                             credentials, as properties. The username property is\n+                             `zipkin.storage.elasticsearch.username`, password `zipkin.storage.elasticsearch.password`.\n+                             This file is reloaded periodically, using `ES_CREDENTIALS_REFRESH_INTERVAL`\n+                             as the interval. This parameter takes precedence over ES_USERNAME and\n+                              ES_PASSWORD when specified.\n+    * `ES_CREDENTIALS_REFRESH_INTERVAL`: Credentials refresh interval in seconds, which defaults to\n+                                         5 seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjkxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   credentials-refresh-interval: 5\n          \n          \n            \n             *   credentials-refresh-interval: 1", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192918", "createdAt": "2020-04-08T00:37:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -35,6 +35,8 @@\n  *   index-replicas: 1\n  *   username: username\n  *   password: password\n+ *   credentials-file: credentialsFile\n+ *   credentials-refresh-interval: 5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjk2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Integer credentialsRefreshInterval = 5;\n          \n          \n            \n              private Integer credentialsRefreshInterval = 1;", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192966", "createdAt": "2020-04-08T00:37:25Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval (in seconds) */\n+  private Integer credentialsRefreshInterval = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzkxNA==", "bodyText": "You've done a ton of feedback work, so I've hopefully saved you some time on some\nerror handling. For example, the first startup should identify common problems like\nmisspelled property names or non-existence of a file.\nCalling updateCredentialsFromProperties() once at startup will do this.\nNote: FileInputStream constructor already checks if the file is valid so you don't\nneed to redo that, unless I'm missing something...\n  @Override public void run() {\n    try {\n      updateCredentialsFromProperties();\n    } catch (Exception e) {\n      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n    }\n  }\n\n  void updateCredentialsFromProperties() throws IOException {\n    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n      properties.load(is);\n    }\n    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME_PROP);\n    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD_PROP);\n    basicCredentials.updateCredentials(username, password);\n  }\n\n  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n    String value = properties.getProperty(properties);\n    if (value == null) {\n      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n    }\n    value = value.trim();\n    if (\"\".equals(value)) {\n      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n    }\n    return value;\n  }", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405193914", "createdAt": "2020-04-08T00:40:49Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader implements Runnable {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public void run() {\n+    Properties properties = new Properties();\n+    try {\n+      File file = Paths.get(credentialsFile).toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f8d2947af22b35472ed855cfcc74b91ef1c2db6", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/8f8d2947af22b35472ed855cfcc74b91ef1c2db6", "committedDate": "2020-04-08T07:26:33Z", "message": "Some improvements:\n * Load file on bean initailization.\n * Pick up resource files for testing instead of temp files.\n * Some nits.\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODc2NzM3", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-388876737", "createdAt": "2020-04-07T08:03:39Z", "commit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMzozOVrOGB3srQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMzozOVrOGB3srQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxNDMxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Objects.nonNull(credentials)) {\n          \n          \n            \n                if (credentials != null) {", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404614317", "createdAt": "2020-04-07T08:03:39Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,29 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Objects;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n  */\n final class BasicAuthInterceptor extends SimpleDecoratingHttpClient {\n \n-  final String basicCredentials;\n+  final BasicCredentials basicCredentials;\n \n-  BasicAuthInterceptor(HttpClient client, String username, String password) {\n+  BasicAuthInterceptor(HttpClient client, BasicCredentials basicCredentials) {\n     super(client);\n-    if (username == null) throw new NullPointerException(\"username == null\");\n-    if (password == null) throw new NullPointerException(\"password == null\");\n-    String token = username + ':' + password;\n-    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+    this.basicCredentials = basicCredentials;\n   }\n \n   @Override\n   public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n-    ctx.addAdditionalRequestHeader(HttpHeaderNames.AUTHORIZATION, basicCredentials);\n+    String credentials = basicCredentials.getCredentials();\n+    if (Objects.nonNull(credentials)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1e69886cf5c8d8cb52216bcaf6940c8c6cce39", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/4a1e69886cf5c8d8cb52216bcaf6940c8c6cce39", "committedDate": "2020-04-08T15:24:39Z", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java\n\nCo-Authored-By: Anuraag Agrawal <anuraaga@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a0cf73e600604c348004353caf4ab8e4b320d2d", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/1a0cf73e600604c348004353caf4ab8e4b320d2d", "committedDate": "2020-04-08T15:25:34Z", "message": "Update zipkin-server/README.md\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1560dcaeb961a31efb5e56d5af0ee29d6a3323ae", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/1560dcaeb961a31efb5e56d5af0ee29d6a3323ae", "committedDate": "2020-04-08T15:25:59Z", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a572a1ad269af5377829cee305b58d16110b34c", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/8a572a1ad269af5377829cee305b58d16110b34c", "committedDate": "2020-04-08T15:26:24Z", "message": "Update zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java\n\nCo-Authored-By: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDExMTY1", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-390411165", "createdAt": "2020-04-09T00:06:16Z", "commit": {"oid": "8a572a1ad269af5377829cee305b58d16110b34c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba3f90a4e282b6f0104946bb51ebeecb7c46a25", "author": {"user": {"login": "hanahmily", "name": "Gao Hongtao"}}, "url": "https://github.com/openzipkin/zipkin/commit/4ba3f90a4e282b6f0104946bb51ebeecb7c46a25", "committedDate": "2020-04-11T23:47:10Z", "message": "Polish test cases\n\nSigned-off-by: Gao Hongtao <hanahmily@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODEyMTc2", "url": "https://github.com/openzipkin/zipkin/pull/3050#pullrequestreview-391812176", "createdAt": "2020-04-12T01:05:41Z", "commit": {"oid": "4ba3f90a4e282b6f0104946bb51ebeecb7c46a25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1642, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}