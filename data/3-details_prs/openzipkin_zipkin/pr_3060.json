{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNjkzMjQ3", "number": 3060, "title": "Use TypeScript for Dependencies page", "bodyText": "I think the entire code in lens should be rewritten in TypeScript, as TypeScript greatly improves the maintainability of the code.\nBut that's too much of a change, so we'll start it off on the dependencies page as a first step (dependencies page is the simplest page in lens).\nAlso, some of the logic and CSS wasn't very good so I fixed that too.", "createdAt": "2020-04-13T15:20:19Z", "url": "https://github.com/openzipkin/zipkin/pull/3060", "merged": true, "mergeCommit": {"oid": "951cf697e30cbc292ab7427e1646df67e8fe2d5b"}, "closed": true, "closedAt": "2020-04-21T00:54:08Z", "author": {"login": "tacigar"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXesjCgFqTM5MjY4MzM4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZnspPgH2gAyNDAyNjkzMjQ3OmFjMGJlZjI1MDZhYTFjYjYyN2IyMmE4MmRlOGIzOGMyZDE2ZDk5M2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjgzMzg5", "url": "https://github.com/openzipkin/zipkin/pull/3060#pullrequestreview-392683389", "createdAt": "2020-04-14T07:52:08Z", "commit": {"oid": "2a24d20800b10deb42d3ae50ac6ac3b71ffeeb06"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MjowOVrOGFCZZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo1MjowOVrOGFCZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzNTMzNQ==", "bodyText": "Don't think we need the return type JSX.Element for components since React.FC defines a return type.", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r407935335", "createdAt": "2020-04-14T07:52:09Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/DependenciesGraph.tsx", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/* eslint-disable no-shadow */\n+import React, { CSSProperties } from 'react';\n+import ReactSelect, { ValueType } from 'react-select';\n+import { AutoSizer } from 'react-virtualized';\n+import { Box, Grid, useTheme } from '@material-ui/core';\n+import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n+import moment from 'moment';\n+\n+import Dependencies from '../../types/Dependencies';\n+import VizceralWrapper from './VizceralWrapper';\n+import NodeDetailData from './NodeDetailData';\n+import { Edge } from './types';\n+\n+// These filter functions use any type because they are passed directly to untyped JS code.\n+const filterConnections = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return object.source.name === value || object.target.name === value;\n+};\n+\n+const filterNodes = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return (\n+    object.incomingConnections.find(\n+      (conn: any) => conn.source.name === value,\n+    ) ||\n+    object.outgoingConnections.find((conn: any) => conn.target.name === value)\n+  );\n+};\n+\n+const reactSelectStyles = {\n+  control: (base: CSSProperties) => ({\n+    ...base,\n+    width: '15rem',\n+  }),\n+};\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+  createStyles({\n+    containerGrid: {\n+      height: '100%',\n+    },\n+    itemGrid: {\n+      height: '100%',\n+    },\n+    searchButton: {\n+      fontSize: '1.2rem',\n+      padding: theme.spacing(1),\n+      minWidth: 0,\n+      width: 32,\n+      height: 32,\n+    },\n+  }),\n+);\n+\n+interface Props {\n+  dependencies: Dependencies;\n+}\n+\n+const DependenciesGraph: React.FC<Props> = ({ dependencies }): JSX.Element => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a24d20800b10deb42d3ae50ac6ac3b71ffeeb06"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ccf07765ac71aa66d13e3645df869e8a9a72427", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/0ccf07765ac71aa66d13e3645df869e8a9a72427", "committedDate": "2020-04-18T05:18:16Z", "message": "Add unit tests for dependencies' action-creator and reducer"}, "afterCommit": {"oid": "15e4ce2d906454522875b075fe9800dd33935e06", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/15e4ce2d906454522875b075fe9800dd33935e06", "committedDate": "2020-04-18T06:20:12Z", "message": "Add unit tests for dependencies' action-creator and reducer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49e75da8fce17953e34b863b1742b96bd605ed07", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/49e75da8fce17953e34b863b1742b96bd605ed07", "committedDate": "2020-04-18T14:00:51Z", "message": "Update license headers"}, "afterCommit": {"oid": "5519023647f037b88768a5ddedfc32afb3bf0fe4", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/5519023647f037b88768a5ddedfc32afb3bf0fe4", "committedDate": "2020-04-18T17:05:46Z", "message": "Update styles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTYzNjc1", "url": "https://github.com/openzipkin/zipkin/pull/3060#pullrequestreview-395963675", "createdAt": "2020-04-19T00:34:46Z", "commit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTc0NzU3", "url": "https://github.com/openzipkin/zipkin/pull/3060#pullrequestreview-395974757", "createdAt": "2020-04-19T04:29:07Z", "commit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDoyOTowN1rOGHx-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwNDo0ODoxOFrOGHyIzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMjA4Mg==", "bodyText": "lingui already mostly provides typescript definitions but does have some bugs it seems (fixed at master until they release)\nCan you check whether we can add definitions here instead of using these old types?\nhttps://github.com/openzipkin/zipkin/blob/master/zipkin-lens/src/types.d.ts#L16", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410812082", "createdAt": "2020-04-19T04:29:07Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/package.json", "diffHunk": "@@ -30,11 +30,16 @@\n     \"@types/enzyme-adapter-react-16\": \"^1.0.6\",\n     \"@types/fetch-mock\": \"^7.3.2\",\n     \"@types/jest\": \"^24.9.1\",\n+    \"@types/lingui__macro\": \"^2.7.3\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMjUxOA==", "bodyText": "I guess in typescript it's pretty common to leave out return type for most functions, especially lambdas without logic, and let it infer.", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410812518", "createdAt": "2020-04-19T04:32:58Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/actions/dependencies-action.ts", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+import { DependenciesAction, ActionTypes } from '../types/action-types';\n+import Dependencies from '../types/Dependencies';\n+import AppThunk from '../types/AppThunk';\n+import * as api from '../constants/api';\n+\n+export const loadDependenciesRequest = (): DependenciesAction => ({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMjc1OQ==", "bodyText": "Think it's more conventional to use type definition isntead of cast\nconst nodes: { name: string }[] = [];", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410812759", "createdAt": "2020-04-19T04:34:47Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/DependenciesGraph.tsx", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/* eslint-disable no-shadow */\n+import React, { CSSProperties } from 'react';\n+import ReactSelect, { ValueType, ActionMeta } from 'react-select';\n+import { AutoSizer } from 'react-virtualized';\n+import { Box, Grid, useTheme } from '@material-ui/core';\n+import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n+import moment from 'moment';\n+\n+import Dependencies from '../../types/Dependencies';\n+import VizceralWrapper from './VizceralWrapper';\n+import NodeDetailData from './NodeDetailData';\n+import { Edge } from './types';\n+\n+// These filter functions use any type because they are passed directly to untyped JS code.\n+const filterConnections = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return object.source.name === value || object.target.name === value;\n+};\n+\n+const filterNodes = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return (\n+    object.incomingConnections.find(\n+      (conn: any) => conn.source.name === value,\n+    ) ||\n+    object.outgoingConnections.find((conn: any) => conn.target.name === value)\n+  );\n+};\n+\n+// Export for testing.\n+export const getNodesAndEdges = (dependencies: Dependencies) => {\n+  const nodes = [] as { name: string }[];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMjk5Nw==", "bodyText": "Let's name Prop interfaces e.g. DependenciesGraphProps. While in apps, it's not so common to export / import props interfaces, it still happens and it prevents having to then rename it at the importer.", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410812997", "createdAt": "2020-04-19T04:36:36Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/DependenciesGraph.tsx", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/* eslint-disable no-shadow */\n+import React, { CSSProperties } from 'react';\n+import ReactSelect, { ValueType, ActionMeta } from 'react-select';\n+import { AutoSizer } from 'react-virtualized';\n+import { Box, Grid, useTheme } from '@material-ui/core';\n+import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n+import moment from 'moment';\n+\n+import Dependencies from '../../types/Dependencies';\n+import VizceralWrapper from './VizceralWrapper';\n+import NodeDetailData from './NodeDetailData';\n+import { Edge } from './types';\n+\n+// These filter functions use any type because they are passed directly to untyped JS code.\n+const filterConnections = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return object.source.name === value || object.target.name === value;\n+};\n+\n+const filterNodes = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return (\n+    object.incomingConnections.find(\n+      (conn: any) => conn.source.name === value,\n+    ) ||\n+    object.outgoingConnections.find((conn: any) => conn.target.name === value)\n+  );\n+};\n+\n+// Export for testing.\n+export const getNodesAndEdges = (dependencies: Dependencies) => {\n+  const nodes = [] as { name: string }[];\n+  const edges = [] as Edge[];\n+\n+  dependencies.forEach((edge) => {\n+    const nodeNames = nodes.map((node) => node.name);\n+\n+    if (!nodeNames.includes(edge.parent)) {\n+      nodes.push({ name: edge.parent });\n+    }\n+    if (!nodeNames.includes(edge.child)) {\n+      nodes.push({ name: edge.child });\n+    }\n+\n+    edges.push({\n+      source: edge.parent,\n+      target: edge.child,\n+      metrics: {\n+        normal: edge.callCount || 0,\n+        danger: edge.errorCount || 0,\n+      },\n+    });\n+  });\n+  return { nodes, edges };\n+};\n+\n+const reactSelectStyles = {\n+  control: (base: CSSProperties) => ({\n+    ...base,\n+    width: '15rem',\n+  }),\n+  option: (base: CSSProperties) => ({\n+    ...base,\n+    cursor: 'pointer',\n+  }),\n+  clearIndicator: (base: CSSProperties) => ({\n+    ...base,\n+    cursor: 'pointer',\n+  }),\n+  dropdownIndicator: (base: CSSProperties) => ({\n+    ...base,\n+    cursor: 'pointer',\n+  }),\n+};\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+  createStyles({\n+    containerGrid: {\n+      height: '100%',\n+    },\n+    graphItemGrid: {\n+      height: '100%',\n+    },\n+    nodeDetailDataItemGrid: {\n+      height: '100%',\n+      boxShadow: theme.shadows[10],\n+      zIndex: 1,\n+    },\n+    vizceralWrapper: {\n+      // In Firefox, 100% height does not work...\n+      '& .vizceral': {\n+        height: '99%',\n+      },\n+    },\n+  }),\n+);\n+\n+interface Props {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzA4OQ==", "bodyText": "Import the methods from React?", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410813089", "createdAt": "2020-04-19T04:37:15Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/DependenciesGraph.tsx", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/* eslint-disable no-shadow */\n+import React, { CSSProperties } from 'react';\n+import ReactSelect, { ValueType, ActionMeta } from 'react-select';\n+import { AutoSizer } from 'react-virtualized';\n+import { Box, Grid, useTheme } from '@material-ui/core';\n+import { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n+import moment from 'moment';\n+\n+import Dependencies from '../../types/Dependencies';\n+import VizceralWrapper from './VizceralWrapper';\n+import NodeDetailData from './NodeDetailData';\n+import { Edge } from './types';\n+\n+// These filter functions use any type because they are passed directly to untyped JS code.\n+const filterConnections = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return object.source.name === value || object.target.name === value;\n+};\n+\n+const filterNodes = (object: any, value: any) => {\n+  if (!value) {\n+    return true;\n+  }\n+  if (object.name === value) {\n+    return true;\n+  }\n+  return (\n+    object.incomingConnections.find(\n+      (conn: any) => conn.source.name === value,\n+    ) ||\n+    object.outgoingConnections.find((conn: any) => conn.target.name === value)\n+  );\n+};\n+\n+// Export for testing.\n+export const getNodesAndEdges = (dependencies: Dependencies) => {\n+  const nodes = [] as { name: string }[];\n+  const edges = [] as Edge[];\n+\n+  dependencies.forEach((edge) => {\n+    const nodeNames = nodes.map((node) => node.name);\n+\n+    if (!nodeNames.includes(edge.parent)) {\n+      nodes.push({ name: edge.parent });\n+    }\n+    if (!nodeNames.includes(edge.child)) {\n+      nodes.push({ name: edge.child });\n+    }\n+\n+    edges.push({\n+      source: edge.parent,\n+      target: edge.child,\n+      metrics: {\n+        normal: edge.callCount || 0,\n+        danger: edge.errorCount || 0,\n+      },\n+    });\n+  });\n+  return { nodes, edges };\n+};\n+\n+const reactSelectStyles = {\n+  control: (base: CSSProperties) => ({\n+    ...base,\n+    width: '15rem',\n+  }),\n+  option: (base: CSSProperties) => ({\n+    ...base,\n+    cursor: 'pointer',\n+  }),\n+  clearIndicator: (base: CSSProperties) => ({\n+    ...base,\n+    cursor: 'pointer',\n+  }),\n+  dropdownIndicator: (base: CSSProperties) => ({\n+    ...base,\n+    cursor: 'pointer',\n+  }),\n+};\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+  createStyles({\n+    containerGrid: {\n+      height: '100%',\n+    },\n+    graphItemGrid: {\n+      height: '100%',\n+    },\n+    nodeDetailDataItemGrid: {\n+      height: '100%',\n+      boxShadow: theme.shadows[10],\n+      zIndex: 1,\n+    },\n+    vizceralWrapper: {\n+      // In Firefox, 100% height does not work...\n+      '& .vizceral': {\n+        height: '99%',\n+      },\n+    },\n+  }),\n+);\n+\n+interface Props {\n+  dependencies: Dependencies;\n+}\n+\n+const DependenciesGraph: React.FC<Props> = ({ dependencies }) => {\n+  const classes = useStyles();\n+  const theme = useTheme();\n+  const vizStyle = {\n+    colorText: theme.palette.primary.contrastText,\n+    colorTextDisabled: theme.palette.primary.contrastText,\n+    colorConnectionLine: theme.palette.grey[800],\n+    colorTraffic: {\n+      normal: theme.palette.primary.dark,\n+      warning: theme.palette.secondary.dark,\n+      danger: theme.palette.secondary.dark,\n+    },\n+    colorDonutInternalColor: theme.palette.primary.light,\n+    colorDonutInternalColorHighlighted: theme.palette.primary.light,\n+    colorLabelBorder: theme.palette.primary.dark,\n+    colorLabelText: theme.palette.primary.contrastText,\n+    colorTrafficHighlighted: {\n+      normal: theme.palette.primary.main,\n+    },\n+  };\n+\n+  const [focusedNodeName, setFocusedNodeName] = React.useState('');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzI0Nw==", "bodyText": "I guess this is related to my above comment, I think you can just copy-paste the type", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410813247", "createdAt": "2020-04-19T04:38:24Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/DependenciesPage.tsx", "diffHunk": "@@ -0,0 +1,261 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+import React from 'react';\n+import { useDispatch, useSelector } from 'react-redux';\n+import { withRouter, RouteComponentProps } from 'react-router-dom';\n+import { t } from '@lingui/macro';\n+import { useLingui } from '@lingui/react';\n+import { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n+import { Box, Typography, Button, CircularProgress } from '@material-ui/core';\n+import { KeyboardDateTimePicker } from '@material-ui/pickers';\n+import { MaterialUiPickersDate } from '@material-ui/pickers/typings/date';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+import { faSearch } from '@fortawesome/free-solid-svg-icons';\n+import moment from 'moment';\n+import { History, Location } from 'history';\n+\n+import ExplainBox from './ExplainBox';\n+import TraceJsonUploader from '../Common/TraceJsonUploader';\n+import TraceIdSearchInput from '../Common/TraceIdSearchInput';\n+import {\n+  loadDependencies,\n+  clearDependencies,\n+} from '../../actions/dependencies-action';\n+import RootState from '../../types/RootState';\n+import DependenciesGraph from './DependenciesGraph';\n+\n+// Do require because tsc cannot find the definition of trans.\n+// TODO: Give a strict type.\n+const { Trans } = require('@lingui/macro');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzgwNQ==", "bodyText": "Can you make sure all new files that use JSX end with .jsx extension? And to confirm I guess you're waiting to do typescript in another PR?", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410813805", "createdAt": "2020-04-19T04:42:05Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/DependenciesPage.test.js", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+/* eslint-disable no-shadow */\n+import React from 'react';\n+import { createMemoryHistory } from 'history';\n+import moment from 'moment';\n+import { fireEvent, waitForElement } from '@testing-library/react';\n+import fetchMock from 'fetch-mock';\n+\n+import render from '../../test/util/render-with-default-settings';\n+import DependenciesPage from './DependenciesPage';\n+\n+jest.mock('@material-ui/pickers', () => {\n+  // eslint-disable-next-line global-require\n+  const moment = require('moment');\n+  return {\n+    // eslint-disable-next-line react/prop-types\n+    KeyboardDateTimePicker: ({ value, onChange }) => (\n+      <input", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxMzk4Ng==", "bodyText": "Should this file be .tsx?", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410813986", "createdAt": "2020-04-19T04:43:26Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/VizceralWrapper.js", "diffHunk": "@@ -11,16 +11,27 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+import React from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNDA1Mw==", "bodyText": "Remove", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410814053", "createdAt": "2020-04-19T04:43:45Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/VizceralWrapper.js", "diffHunk": "@@ -11,16 +11,27 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+import React from 'react';\n import Vizceral from 'vizceral-react';\n \n // Vizceral (vizceral-react) does not release some resources when unmounting the component.\n // Therefore, when Vizceral is mounted many times, rendering speed decreases.\n // So this class inherits Vizceral and overrides componentWillUnmount for releasing resources.\n class VizceralExt extends Vizceral {\n+  constructor(props) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNDE4Ng==", "bodyText": "I think it's better to define / export (or not) this in the file it's used in instead of having generic types.ts files, alternatively Edge.ts would also be idiomatic but overkill I think", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410814186", "createdAt": "2020-04-19T04:44:45Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DependenciesPage/types.ts", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+export interface Edge {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNDQ0NA==", "bodyText": "Instead of aliasing types, it's common to override them instead in types.d.ts", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410814444", "createdAt": "2020-04-19T04:46:34Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/types/AppThunk.ts", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+import { Action } from 'redux';\n+import { ThunkAction } from 'redux-thunk';\n+\n+import RootState from './RootState';\n+\n+type AppThunk<ReturnType = void> = ThunkAction<", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDgxNDY2OA==", "bodyText": "Similarly for everything in this folder, I'd define this where it's used. Being at this top level src/types location gives too little context on what this type is.", "url": "https://github.com/openzipkin/zipkin/pull/3060#discussion_r410814668", "createdAt": "2020-04-19T04:48:18Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/types/Dependencies.ts", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+type Dependencies = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c67c640d957469449a3c017ee21119b208cd1b3", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/9c67c640d957469449a3c017ee21119b208cd1b3", "committedDate": "2020-04-20T09:59:05Z", "message": "Use TypeScript for DependenciesPage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd7c40efc99ea65dc3bf33df3fdf789a99e46e4f", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/fd7c40efc99ea65dc3bf33df3fdf789a99e46e4f", "committedDate": "2020-04-20T09:59:05Z", "message": "Add clearDependencies reducer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2ccefc49f01b6d36c7270fd8a8ed4619b8040ae", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/d2ccefc49f01b6d36c7270fd8a8ed4619b8040ae", "committedDate": "2020-04-20T09:59:05Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73bb831f7f275f49c8d4d6d0a3446ae7abf40470", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/73bb831f7f275f49c8d4d6d0a3446ae7abf40470", "committedDate": "2020-04-20T09:59:05Z", "message": "Change date time format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca5ffaac67a1fcbda350659cc21fdbe75c22b79", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/6ca5ffaac67a1fcbda350659cc21fdbe75c22b79", "committedDate": "2020-04-20T09:59:05Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46023d056b2c113dd6862133498bf602609c1f2c", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/46023d056b2c113dd6862133498bf602609c1f2c", "committedDate": "2020-04-20T09:59:05Z", "message": "Add NodeDetailData's unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b34ff062d6e9f4a5bb6b8d8392f6fedc741073b1", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/b34ff062d6e9f4a5bb6b8d8392f6fedc741073b1", "committedDate": "2020-04-20T09:59:05Z", "message": "Add DependenciesGraph & DependencpesPage's unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dba307995f56912356d136cb15d44d75b45803b", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/9dba307995f56912356d136cb15d44d75b45803b", "committedDate": "2020-04-20T09:59:05Z", "message": "Add unit tests for dependencies' action-creator and reducer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8eb920327347ac76810644ef879697a8010c64c", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/a8eb920327347ac76810644ef879697a8010c64c", "committedDate": "2020-04-20T09:59:05Z", "message": "Remove an unused file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581ae4af5533baddb3cbaecf8f20e146aeffd499", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/581ae4af5533baddb3cbaecf8f20e146aeffd499", "committedDate": "2020-04-20T09:59:05Z", "message": "Update license headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93e214c425f093966ae3877513e14fefcfc07a8e", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/93e214c425f093966ae3877513e14fefcfc07a8e", "committedDate": "2020-04-20T09:59:05Z", "message": "Update styles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b3e5edfbb94e956316021495c353f38e1b977dc", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/0b3e5edfbb94e956316021495c353f38e1b977dc", "committedDate": "2020-04-20T09:59:05Z", "message": "Clear the focused node name when filter is changed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a24120b7e7f0ed3e5e29ea328b5628fc3481044", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/5a24120b7e7f0ed3e5e29ea328b5628fc3481044", "committedDate": "2020-04-20T09:59:05Z", "message": "Update style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "864fea412a483b9bc86c7c3c09fbf979af8d3e76", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/864fea412a483b9bc86c7c3c09fbf979af8d3e76", "committedDate": "2020-04-20T09:59:06Z", "message": "Order service names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46726da831254e004e94d4564fee7f9b3ce23512", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/46726da831254e004e94d4564fee7f9b3ce23512", "committedDate": "2020-04-20T09:59:06Z", "message": "VizceralWrapper.js -> VizceralWrapper.tsx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42cc1dc8de2170c864ef0ee03a4fab50db77bf70", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/42cc1dc8de2170c864ef0ee03a4fab50db77bf70", "committedDate": "2020-04-20T09:59:06Z", "message": "Remove unnecessary return types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99bfca285cd42c67cda700f8ebe39f3957c7a45b", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/99bfca285cd42c67cda700f8ebe39f3957c7a45b", "committedDate": "2020-04-20T09:59:06Z", "message": "Add lingui Trans's type definition to type.d.ts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2709a2c637bb93d7cb031c66b0f4dbfc2efe9f74", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/2709a2c637bb93d7cb031c66b0f4dbfc2efe9f74", "committedDate": "2020-04-20T09:59:06Z", "message": "Refactor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da74d55e95139238a44234f31e9d98cde9bef864", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/da74d55e95139238a44234f31e9d98cde9bef864", "committedDate": "2020-04-18T17:55:24Z", "message": "Order service names"}, "afterCommit": {"oid": "2709a2c637bb93d7cb031c66b0f4dbfc2efe9f74", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/2709a2c637bb93d7cb031c66b0f4dbfc2efe9f74", "committedDate": "2020-04-20T09:59:06Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2278ba011d42817cbe2d828aa36e2494939b3523", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/2278ba011d42817cbe2d828aa36e2494939b3523", "committedDate": "2020-04-20T13:49:05Z", "message": "test.js -> test.jsx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTcwNTM2", "url": "https://github.com/openzipkin/zipkin/pull/3060#pullrequestreview-396570536", "createdAt": "2020-04-20T15:35:44Z", "commit": {"oid": "2278ba011d42817cbe2d828aa36e2494939b3523"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac0bef2506aa1cb627b22a82de8b38c2d16d993d", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/ac0bef2506aa1cb627b22a82de8b38c2d16d993d", "committedDate": "2020-04-20T23:29:15Z", "message": "Merge branch 'master' into tacigar/typescript-dependencies"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1645, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}