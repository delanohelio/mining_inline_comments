{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzI4NDQ0", "number": 3154, "title": "Cleans up Cassandra Session logic in preparation of Driver v4", "bodyText": "The more notable change in Datastax Driver v4 is consolidation of\nCluster and Session types. This centralizes logic to create a session\nregardless of test or mainline. It also ensures the cluster object is\nclosed during main and test code when storage is.", "createdAt": "2020-08-01T03:05:54Z", "url": "https://github.com/openzipkin/zipkin/pull/3154", "merged": true, "mergeCommit": {"oid": "bc37ee7823bfadde7e331b7a6ff1e76bacd8362f"}, "closed": true, "closedAt": "2020-08-01T03:44:07Z", "author": {"login": "codefromthecrypt"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6f5RPAH2gAyNDYwNzI4NDQ0OjcwY2RmNjhkMTk2NDhhNWY2MDBiN2RjYTA5NTVmNzNkODdmOTBiYzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6gIXDgFqTQ1OTU0ODQwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "70cdf68d19648a5f600b7dca0955f73d87f90bc5", "author": {"user": null}, "url": "https://github.com/openzipkin/zipkin/commit/70cdf68d19648a5f600b7dca0955f73d87f90bc5", "committedDate": "2020-08-01T03:03:18Z", "message": "Cleans up Cassandra Session logic in preparation of Driver v4\n\nThe more notable change in Datastax Driver v4 is consolidation of\nCluster and Session types. This centralizes logic to create a session\nregardless of test or mainline. It also ensures the cluster object is\nclosed during main and test code when storage is."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTQ4MzA3", "url": "https://github.com/openzipkin/zipkin/pull/3154#pullrequestreview-459548307", "createdAt": "2020-08-01T03:17:14Z", "commit": {"oid": "70cdf68d19648a5f600b7dca0955f73d87f90bc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxNzoxNVrOG6bHqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxNzoxNVrOG6bHqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNDkyMQ==", "bodyText": "might not be obvious, but these settings repeated in the default session factory, except partially. moving it up allows better control over what we configure and also things like the same logging config to work in test sessions as the main sessions", "url": "https://github.com/openzipkin/zipkin/pull/3154#discussion_r463914921", "createdAt": "2020-08-01T03:17:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-storage/cassandra-v1/src/test/java/zipkin2/storage/cassandra/v1/CassandraStorageExtension.java", "diffHunk": "@@ -109,54 +93,27 @@ InetSocketAddress contactPoint() {\n       // Only run once in outermost scope.\n       return;\n     }\n-\n-    try {\n-      if (session != null) session.close();\n-      if (cluster != null) cluster.close();\n-    } catch (Exception | Error e) {\n-      LOGGER.warn(\"error closing session \" + e.getMessage(), e);\n-    } finally {\n-      if (container != null) {\n-        LOGGER.info(\"Stopping docker image \" + image);\n-        container.stop();\n-      }\n-    }\n+    if (globalSession != null) globalSession.getCluster().close();\n   }\n \n   static final class CassandraContainer extends GenericContainer<CassandraContainer> {\n     CassandraContainer(String image) {\n       super(image);\n     }\n \n-    @Override\n-    protected void waitUntilContainerStarted() {\n-      Unreliables.retryUntilSuccess(\n-        120,\n-        TimeUnit.SECONDS,\n-        () -> {\n-          if (!isRunning()) {\n-            throw new ContainerLaunchException(\"Container failed to start\");\n-          }\n-\n-          InetSocketAddress address =\n-            new InetSocketAddress(getContainerIpAddress(), getMappedPort(9042));\n-\n-          try (Cluster cluster = getCluster(address);\n-               Session session = cluster.newSession()) {\n-            session.execute(\"SELECT now() FROM system.local\");\n-            logger().info(\"Obtained a connection to container ({})\", cluster.getClusterName());\n-            return null; // unused value\n-          }\n-        });\n+    @Override protected void waitUntilContainerStarted() {\n+      Unreliables.retryUntilSuccess(120, TimeUnit.SECONDS, () -> {\n+        if (!isRunning()) {\n+          throw new ContainerLaunchException(\"Container failed to start\");\n+        }\n+\n+        String contactPoint = getContainerIpAddress() + \":\" + getMappedPort(9042);\n+        try (Session session = Access.tryToInitializeSession(contactPoint)) {\n+          session.execute(\"SELECT now() FROM system.local\");\n+          logger().info(\"Obtained a connection to container ({})\", contactPoint);\n+          return null; // unused value\n+        }\n+      });\n     }\n   }\n-\n-  static Cluster getCluster(InetSocketAddress contactPoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70cdf68d19648a5f600b7dca0955f73d87f90bc5"}, "originalPosition": 161}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTQ4NDE1", "url": "https://github.com/openzipkin/zipkin/pull/3154#pullrequestreview-459548415", "createdAt": "2020-08-01T03:19:19Z", "commit": {"oid": "70cdf68d19648a5f600b7dca0955f73d87f90bc5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxOToxOVrOG6bIPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxOToxOVrOG6bIPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTA2OA==", "bodyText": "hostdistance local 1 is exactly the same as this in impl.", "url": "https://github.com/openzipkin/zipkin/pull/3154#discussion_r463915068", "createdAt": "2020-08-01T03:19:19Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-storage/cassandra/src/test/java/zipkin2/storage/cassandra/CassandraStorageExtension.java", "diffHunk": "@@ -65,42 +57,49 @@ Session session() {\n     }\n \n     try {\n-      tryToInitializeSession();\n+      globalSession = tryToInitializeSession(contactPoint());\n     } catch (RuntimeException | Error e) {\n       if (container == null) throw e;\n       LOGGER.warn(\"Couldn't connect to docker image \" + image + \": \" + e.getMessage(), e);\n       container.stop();\n       container = null; // try with local connection instead\n-      tryToInitializeSession();\n+      globalSession = tryToInitializeSession(contactPoint());\n     }\n   }\n \n-  void tryToInitializeSession() {\n+  // Builds a session without trying to use a namespace or init UDTs\n+  static Session tryToInitializeSession(String contactPoint) {\n+    CassandraStorage storage = newStorageBuilder(contactPoint).build();\n+    Session session = null;\n     try {\n-      cluster = getCluster(contactPoint());\n-      session = cluster.newSession();\n+      session = DefaultSessionFactory.buildSession(storage);\n       session.execute(\"SELECT now() FROM system.local\");\n-    } catch (RuntimeException e) { // don't leak on unexpected exception!\n-      if (session != null) session.close();\n-      if (cluster != null) cluster.close();\n+    } catch (Throwable e) {\n+      if (session != null) session.getCluster().close();\n       assumeTrue(false, e.getMessage());\n     }\n+    return session;\n   }\n \n-  CassandraStorage.Builder computeStorageBuilder() {\n-    InetSocketAddress contactPoint = contactPoint();\n+  CassandraStorage.Builder newStorageBuilder(TestInfo testInfo) {\n     return CassandraStorage.newBuilder()\n-        .contactPoints(contactPoint.getHostString() + \":\" + contactPoint.getPort())\n-        .ensureSchema(true)\n-        .keyspace(\"test_cassandra3\");\n+      .contactPoints(contactPoint())\n+      .maxConnections(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70cdf68d19648a5f600b7dca0955f73d87f90bc5"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTQ4NDAw", "url": "https://github.com/openzipkin/zipkin/pull/3154#pullrequestreview-459548400", "createdAt": "2020-08-01T03:18:58Z", "commit": {"oid": "70cdf68d19648a5f600b7dca0955f73d87f90bc5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODo1OFrOG6bIKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMzoxODo1OFrOG6bIKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkxNTA1MA==", "bodyText": "Assuming connect / use is equivalent to cluster.connect(keyspace) from the old else branch", "url": "https://github.com/openzipkin/zipkin/pull/3154#discussion_r463915050", "createdAt": "2020-08-01T03:18:58Z", "author": {"login": "anuraaga"}, "path": "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java", "diffHunk": "@@ -45,27 +47,23 @@\n    */\n   @Override\n   public Session create(CassandraStorage cassandra) {\n-    Cluster cluster = null;\n     Session session = null;\n     try {\n-      cluster = buildCluster(cassandra);\n-      cluster.register(new QueryLogger.Builder().build());\n+      session = buildSession(cassandra);\n+\n       String keyspace = cassandra.keyspace();\n       if (cassandra.ensureSchema()) {\n-        session = cluster.connect();\n         Schema.ensureExists(keyspace, cassandra.searchEnabled(), session);\n-        session.execute(\"USE \" + keyspace);\n       } else {\n         LOG.debug(\"Skipping schema check on keyspace {} as ensureSchema was false\", keyspace);\n-        session = cluster.connect(keyspace);\n       }\n \n+      session.execute(\"USE \" + keyspace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70cdf68d19648a5f600b7dca0955f73d87f90bc5"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1465, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}