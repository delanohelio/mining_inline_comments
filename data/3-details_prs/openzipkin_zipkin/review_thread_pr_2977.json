{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NzIzNDYx", "number": 2977, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowMTozMlrODfctfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1NDo0MFrODimNkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAyODQ2OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowMTozMlrOFpKFGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMDozN1rOFpYT2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA4MQ==", "bodyText": "I might be missing some subtlety that required using the old version of the code with its own timings instead of Armeria's, let me know.", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378701081", "createdAt": "2020-02-13T08:01:32Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java", "diffHunk": "@@ -129,23 +128,13 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc\n     AttributeKey.valueOf(Boolean.class, \"PROMETHEUS_METRICS_SET\");\n \n   public static void setup(RequestContext ctx, MeterRegistry registry, String metricName) {\n-    if (ctx.hasAttr(PROMETHEUS_METRICS_SET)) {\n+    if (ctx.attr(PROMETHEUS_METRICS_SET) == null) {\n       return;\n     }\n-    ctx.attr(PROMETHEUS_METRICS_SET).set(true);\n+    ctx.setAttr(PROMETHEUS_METRICS_SET, true);\n \n-    ctx.log().addListener(log -> onRequest(log, registry, metricName),\n-      RequestLogAvailability.REQUEST_HEADERS,\n-      RequestLogAvailability.REQUEST_CONTENT);\n-  }\n-\n-  private static void onRequest(RequestLog log, MeterRegistry registry, String metricName) {\n-    Clock clock = registry.config().clock();\n-    long startTime = clock.monotonicTime();\n-    log.addListener(requestLog -> {\n-      getTimeBuilder(requestLog, metricName).register(registry)\n-        .record(clock.monotonicTime() - startTime, TimeUnit.NANOSECONDS);\n-    }, RequestLogAvailability.COMPLETE);\n+    ctx.log().whenComplete().thenAccept(log -> getTimeBuilder(log, metricName).register(registry)\n+      .record(log.totalDurationNanos(), TimeUnit.NANOSECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c7de31f8793cda7d9d3398ca20557df8248a9b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxNzE0OA==", "bodyText": "main thing is to keep our Prometheus stable so folks using grafana dont wake up to have their graphs broken. I will look carefully though", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378917148", "createdAt": "2020-02-13T15:04:45Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java", "diffHunk": "@@ -129,23 +128,13 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc\n     AttributeKey.valueOf(Boolean.class, \"PROMETHEUS_METRICS_SET\");\n \n   public static void setup(RequestContext ctx, MeterRegistry registry, String metricName) {\n-    if (ctx.hasAttr(PROMETHEUS_METRICS_SET)) {\n+    if (ctx.attr(PROMETHEUS_METRICS_SET) == null) {\n       return;\n     }\n-    ctx.attr(PROMETHEUS_METRICS_SET).set(true);\n+    ctx.setAttr(PROMETHEUS_METRICS_SET, true);\n \n-    ctx.log().addListener(log -> onRequest(log, registry, metricName),\n-      RequestLogAvailability.REQUEST_HEADERS,\n-      RequestLogAvailability.REQUEST_CONTENT);\n-  }\n-\n-  private static void onRequest(RequestLog log, MeterRegistry registry, String metricName) {\n-    Clock clock = registry.config().clock();\n-    long startTime = clock.monotonicTime();\n-    log.addListener(requestLog -> {\n-      getTimeBuilder(requestLog, metricName).register(registry)\n-        .record(clock.monotonicTime() - startTime, TimeUnit.NANOSECONDS);\n-    }, RequestLogAvailability.COMPLETE);\n+    ctx.log().whenComplete().thenAccept(log -> getTimeBuilder(log, metricName).register(registry)\n+      .record(log.totalDurationNanos(), TimeUnit.NANOSECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA4MQ=="}, "originalCommit": {"oid": "30c7de31f8793cda7d9d3398ca20557df8248a9b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNDIzNA==", "bodyText": "what you've done is fine. As long as the metric name/dimension matches, it is better to reuse armeria's duration because we don't do much besides invoke a controller anyway.", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378934234", "createdAt": "2020-02-13T15:30:37Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java", "diffHunk": "@@ -129,23 +128,13 @@ public HttpResponse serve(ServiceRequestContext ctx, HttpRequest req) throws Exc\n     AttributeKey.valueOf(Boolean.class, \"PROMETHEUS_METRICS_SET\");\n \n   public static void setup(RequestContext ctx, MeterRegistry registry, String metricName) {\n-    if (ctx.hasAttr(PROMETHEUS_METRICS_SET)) {\n+    if (ctx.attr(PROMETHEUS_METRICS_SET) == null) {\n       return;\n     }\n-    ctx.attr(PROMETHEUS_METRICS_SET).set(true);\n+    ctx.setAttr(PROMETHEUS_METRICS_SET, true);\n \n-    ctx.log().addListener(log -> onRequest(log, registry, metricName),\n-      RequestLogAvailability.REQUEST_HEADERS,\n-      RequestLogAvailability.REQUEST_CONTENT);\n-  }\n-\n-  private static void onRequest(RequestLog log, MeterRegistry registry, String metricName) {\n-    Clock clock = registry.config().clock();\n-    long startTime = clock.monotonicTime();\n-    log.addListener(requestLog -> {\n-      getTimeBuilder(requestLog, metricName).register(registry)\n-        .record(clock.monotonicTime() - startTime, TimeUnit.NANOSECONDS);\n-    }, RequestLogAvailability.COMPLETE);\n+    ctx.log().whenComplete().thenAccept(log -> getTimeBuilder(log, metricName).register(registry)\n+      .record(log.totalDurationNanos(), TimeUnit.NANOSECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA4MQ=="}, "originalCommit": {"oid": "30c7de31f8793cda7d9d3398ca20557df8248a9b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzM4NDA5OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1Njo0M1rOFpNe0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTo1Njo0M1rOFpNe0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc1NjgxNw==", "bodyText": "nit: Could use server.activeLocalPort()?\nhttps://github.com/line/armeria/blob/9061e241961c806951dd855be65fd871131a1835/core/src/main/java/com/linecorp/armeria/server/Server.java#L185-L193", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378756817", "createdAt": "2020-02-13T09:56:43Z", "author": {"login": "ikhoon"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/ITZipkinServer.java", "diffHunk": "@@ -246,7 +246,7 @@ private Response get(String path) throws IOException {\n   }\n \n   public static String url(Server server, String path) {\n-    return \"http://localhost:\" + server.activePort().get().localAddress().getPort() + path;\n+    return \"http://localhost:\" + server.activePort().localAddress().getPort() + path;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "30c7de31f8793cda7d9d3398ca20557df8248a9b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDQ5OTYzOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyNzo1M1rOFpYMaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyNzo1M1rOFpYMaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMjMyOA==", "bodyText": "nice", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378932328", "createdAt": "2020-02-13T15:27:53Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java", "diffHunk": "@@ -86,7 +73,7 @@ Endpoint getEndpoint() {\n       //\n       // We are blocking up to the connection timeout which should be enough time for any DNS\n       // resolution that hasn't happened yet to finish.\n-      empty = result.awaitInitialEndpoints(timeoutMillis, TimeUnit.MILLISECONDS).isEmpty();\n+      empty = result.whenReady().get().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa794ed76144fd07aefa942decf0926e621b5dd"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDUwNDUwOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/HttpClientFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyODo1NlrOFpYPdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyODo1NlrOFpYPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMzEwOQ==", "bodyText": "agree", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378933109", "createdAt": "2020-02-13T15:28:56Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/HttpClientFactory.java", "diffHunk": "@@ -33,28 +34,28 @@\n import zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.HttpLogging;\n \n // Exposed as a bean so that zipkin-aws can use this for api requests to get initial endpoints.\n-public class HttpClientFactory implements Function<Endpoint, WebClient>, Closeable {\n+public class HttpClientFactory implements Function<EndpointGroup, WebClient>, Closeable {\n   final SessionProtocol protocol;\n   final ClientOptions options;\n-  final ClientFactory delegate;\n+  final ClientFactory clientFactory;\n   final int timeout;\n   final List<Consumer<ClientOptionsBuilder>> customizers;\n \n   HttpClientFactory(ZipkinElasticsearchStorageProperties es, ClientFactory factory,\n     SessionProtocol protocol, List<Consumer<ClientOptionsBuilder>> customizers\n   ) {\n-    this.delegate = factory;\n+    this.clientFactory = factory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa794ed76144fd07aefa942decf0926e621b5dd"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDUwNzQzOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToyOTozN1rOFpYRTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNjo1NjozNlrOFptGxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMzU4MA==", "bodyText": "this is curious.. partial?", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378933580", "createdAt": "2020-02-13T15:29:37Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -150,9 +151,13 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n \n     return client -> {\n       client.decorator((delegate, ctx, req) -> {\n-        String name = ctx.attr(HttpCall.NAME).get();\n-        if (name != null) { // override the span name if set\n-          spanCustomizer.name(name);\n+        RequestLogAccess log = ctx.log();\n+        if (log.isAvailable(RequestLogProperty.NAME)) {\n+          String name = log.partial().name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa794ed76144fd07aefa942decf0926e621b5dd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3NDk1MQ==", "bodyText": "Added a comment maybe it helps", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r379274951", "createdAt": "2020-02-14T06:56:36Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -150,9 +151,13 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n \n     return client -> {\n       client.decorator((delegate, ctx, req) -> {\n-        String name = ctx.attr(HttpCall.NAME).get();\n-        if (name != null) { // override the span name if set\n-          spanCustomizer.name(name);\n+        RequestLogAccess log = ctx.log();\n+        if (log.isAvailable(RequestLogProperty.NAME)) {\n+          String name = log.partial().name();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzMzU4MA=="}, "originalCommit": {"oid": "faa794ed76144fd07aefa942decf0926e621b5dd"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDUxNjk2OnYy", "diffSide": "RIGHT", "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMTo1NVrOFpYXUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMTo1NVrOFpYXUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNTEyMg==", "bodyText": "cool", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378935122", "createdAt": "2020-02-13T15:31:55Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java", "diffHunk": "@@ -212,7 +211,8 @@ public Factory(WebClient httpClient) {\n \n   CompletableFuture<AggregatedHttpResponse> sendRequest() {\n     final HttpResponse response;\n-    try (SafeCloseable ignored = Clients.withContextCustomizer(ctx -> ctx.attr(NAME).set(name))) {\n+    try (SafeCloseable ignored =\n+           Clients.withContextCustomizer(ctx -> ctx.logBuilder().name(name))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa794ed76144fd07aefa942decf0926e621b5dd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDUxNzc3OnYy", "diffSide": "RIGHT", "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMjoxMFrOFpYX7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTozMjoxMFrOFpYX7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkzNTI3OQ==", "bodyText": "handy", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r378935279", "createdAt": "2020-02-13T15:32:10Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-storage/elasticsearch/src/test/java/zipkin2/elasticsearch/internal/client/HttpCallTest.java", "diffHunk": "@@ -223,16 +222,15 @@\n     AtomicReference<RequestLog> log = new AtomicReference<>();\n     http = new HttpCall.Factory(WebClient.builder(server.httpUri(\"/\"))\n       .decorator((client, ctx, req) -> {\n-        ctx.log().addListener(log::set, RequestLogAvailability.COMPLETE);\n+        ctx.log().whenComplete().thenAccept(log::set);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "faa794ed76144fd07aefa942decf0926e621b5dd"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjA0MjQzOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1NDo0MFrOFt7sRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNzo1NDo0MFrOFt7sRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcwODIyOQ==", "bodyText": "ps 0.98.3 is out you can just push master on that if you like", "url": "https://github.com/openzipkin/zipkin/pull/2977#discussion_r383708229", "createdAt": "2020-02-25T07:54:40Z", "author": {"login": "codefromthecrypt"}, "path": "pom.xml", "diffHunk": "@@ -49,7 +49,7 @@\n \n     <!-- This allows you to test feature branches with jitpack -->\n     <armeria.groupId>com.linecorp.armeria</armeria.groupId>\n-    <armeria.version>0.97.0</armeria.version>\n+    <armeria.version>0.98.2</armeria.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2be14eb31339015212892bdbefb92e847314a098"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1275, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}