{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNzYwMjYx", "number": 3203, "title": "Improve Redux traces data-flow code", "bodyText": "TypeScriptize Redux data flow related to traces.\nSimplify the way to manage traces state.", "createdAt": "2020-09-06T13:06:29Z", "url": "https://github.com/openzipkin/zipkin/pull/3203", "merged": true, "mergeCommit": {"oid": "33eeadea044e7415968dc6c9cb577a799c031df1"}, "closed": true, "closedAt": "2020-09-24T23:07:45Z", "author": {"login": "tacigar"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGJ4ETAH2gAyNDgwNzYwMjYxOjVjMWMyMDI2MmY3MGU4ZGQ1OWEyMmIzMGNlY2U0MmVhZmE5Mzg3ZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLkGHiAH2gAyNDgwNzYwMjYxOmM4MTlkZGVlZjIwOWExNjVmZDE5YTBlNDZjNzBhMjZiODMzOGRiMmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5c1c20262f70e8dd59a22b30cece42eafa9387f0", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/5c1c20262f70e8dd59a22b30cece42eafa9387f0", "committedDate": "2020-09-06T08:11:10Z", "message": "Add Span and AdjustedTrace model types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f89d53b3a0d631317a8d5f8cfdd70a4912044dc", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/4f89d53b3a0d631317a8d5f8cfdd70a4912044dc", "committedDate": "2020-09-06T12:55:44Z", "message": "Improve traces store management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/c7c22e5ba1379cd81bb1ef9593586e2f209f40af", "committedDate": "2020-09-06T12:59:48Z", "message": "Remove unused files"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzMjA0ODA0", "url": "https://github.com/openzipkin/zipkin/pull/3203#pullrequestreview-483204804", "createdAt": "2020-09-07T02:12:15Z", "commit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoxMjoxNVrOHNuNgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwMjoyMzoyNVrOHNuV9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MDY1OQ==", "bodyText": "is there a way to say what it was loading? maybe if you pass state of the component you are trying to load, so that you can fallback to \"Error loading ${component}\"", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484150659", "createdAt": "2020-09-07T02:12:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/components/common/LoadingOverlay.tsx", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {\n+  Backdrop,\n+  CircularProgress,\n+  Theme,\n+  createStyles,\n+  makeStyles,\n+} from '@material-ui/core';\n+import { SerializedError } from '@reduxjs/toolkit';\n+import React, { useEffect } from 'react';\n+import { useDispatch } from 'react-redux';\n+\n+import { setAlert } from '../App/slice';\n+\n+interface LoadingOverlayProps {\n+  isLoading: boolean;\n+  error?: SerializedError;\n+}\n+\n+const useStyles = makeStyles((theme: Theme) =>\n+  createStyles({\n+    backdrop: {\n+      zIndex: theme.zIndex.drawer + 1,\n+      color: '#fff',\n+    },\n+  }),\n+);\n+\n+const LoadingOverlay: React.FC<LoadingOverlayProps> = ({\n+  isLoading,\n+  error,\n+}) => {\n+  const classes = useStyles();\n+\n+  const dispatch = useDispatch();\n+\n+  useEffect(() => {\n+    if (error) {\n+      dispatch(\n+        setAlert({\n+          message: error.message || 'Error occurs when loading...',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MDkxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              endpoint: string; // If not exist, this filed will be 'unknown'.\n          \n          \n            \n              endpoint: string; // Ex. 'fooo' or 'unknown' on null span.localEndpoint\n          \n      \n    \n    \n  \n\nwhere 'foo' is a real example", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484150917", "createdAt": "2020-09-07T02:13:51Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTA0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              spanName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n              spanName: string; // span.name or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151041", "createdAt": "2020-09-07T02:14:36Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTEwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              serviceName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n              serviceName: string; // span.localEndpoint.serviceName or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151107", "createdAt": "2020-09-07T02:14:55Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTI3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              rootSpan: {\n          \n          \n            \n              rootSpan: { // the root-most span, when the root is missing", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151272", "createdAt": "2020-09-07T02:15:37Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.\n+  parentId?: string;\n+  childIds: string[];\n+  serviceNames: string[];\n+  timestamp: number;\n+  duration: number;\n+  durationStr: string;\n+  tags: {\n+    key: string;\n+    value: string;\n+  }[];\n+  annotations: AdjustedAnnotation[];\n+  errorType: string;\n+  depth: number;\n+  width: number;\n+  left: number;\n+};\n+\n+type AdjustedTrace = {\n+  traceId: string;\n+  serviceNameAndSpanCounts: ServiceNameAndSpanCount[];\n+  duration: number;\n+  durationStr: string;\n+  rootSpan: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTMyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                spanName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n                spanName: string; // span.name or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151325", "createdAt": "2020-09-07T02:15:56Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.\n+  parentId?: string;\n+  childIds: string[];\n+  serviceNames: string[];\n+  timestamp: number;\n+  duration: number;\n+  durationStr: string;\n+  tags: {\n+    key: string;\n+    value: string;\n+  }[];\n+  annotations: AdjustedAnnotation[];\n+  errorType: string;\n+  depth: number;\n+  width: number;\n+  left: number;\n+};\n+\n+type AdjustedTrace = {\n+  traceId: string;\n+  serviceNameAndSpanCounts: ServiceNameAndSpanCount[];\n+  duration: number;\n+  durationStr: string;\n+  rootSpan: {\n+    serviceName: string; // If not exist, this field will be 'unknown'.\n+    spanName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTM0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                serviceName: string; // If not exist, this field will be 'unknown'.\n          \n          \n            \n                serviceName: string; // span.localEndpoint.serviceName or 'unknown' on null", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151346", "createdAt": "2020-09-07T02:16:03Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/AdjustedTrace.ts", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import { ServiceNameAndSpanCount } from './TraceSummary';\n+\n+export type AdjustedAnnotation = {\n+  value: string;\n+  timestamp: number;\n+  endpoint: string; // If not exist, this filed will be 'unknown'.\n+  relativeTime?: string;\n+};\n+\n+export type AdjustedSpan = {\n+  spanId: string;\n+  spanName: string; // If not exist, this field will be 'unknown'.\n+  serviceName: string; // If not exist, this field will be 'unknown'.\n+  parentId?: string;\n+  childIds: string[];\n+  serviceNames: string[];\n+  timestamp: number;\n+  duration: number;\n+  durationStr: string;\n+  tags: {\n+    key: string;\n+    value: string;\n+  }[];\n+  annotations: AdjustedAnnotation[];\n+  errorType: string;\n+  depth: number;\n+  width: number;\n+  left: number;\n+};\n+\n+type AdjustedTrace = {\n+  traceId: string;\n+  serviceNameAndSpanCounts: ServiceNameAndSpanCount[];\n+  duration: number;\n+  durationStr: string;\n+  rootSpan: {\n+    serviceName: string; // If not exist, this field will be 'unknown'.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type Endpoint = {\n          \n          \n            \n            // Same type as Endpoint in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#\n          \n          \n            \n            type Endpoint = {", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151724", "createdAt": "2020-09-07T02:18:10Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/Endpoint.ts", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+type Endpoint = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MTgyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type Span = {\n          \n          \n            \n            // Same type as Span in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#\n          \n          \n            \n            type Span = {", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484151826", "createdAt": "2020-09-07T02:18:39Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/Span.ts", "diffHunk": "@@ -12,15 +12,23 @@\n  * the License.\n  */\n \n-export const TRACE_LOAD_REQUEST = 'TRACE_LOAD_REQUEST';\n-export const TRACE_LOAD_SUCCESS = 'TRACE_LOAD_SUCCESS';\n-export const TRACE_LOAD_FAILURE = 'TRACE_LOAD_FAILURE';\n+import Annotation from './Annotation';\n+import Endpoint from './Endpoint';\n \n-export const TRACES_LOAD_REQUEST = 'TRACES_LOAD_REQUEST';\n-export const TRACES_LOAD_SUCCESS = 'TRACES_LOAD_SUCCESS';\n-export const TRACES_LOAD_FAILURE = 'TRACES_LOAD_FAILURE';\n-export const CLEAR_TRACES = 'TRACES_RESET';\n+type Span = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjExMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                [key: string]: {\n          \n          \n            \n                [key: string]: { // key is the traceId", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484152111", "createdAt": "2020-09-07T02:20:00Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,239 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }) => {\n+    const ps = new URLSearchParams(params);\n+    const resp = await fetch(`${api.TRACES}?${ps}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces = (await resp.json()) as Span[][];\n+    const traces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(traces).map((traceId) =>\n+        buildTraceSummary(traces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces,\n+      traceSummaries,\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return {\n+          traceId,\n+          trace: traces[traceId],\n+        };\n+      }\n+      adjustedTrace = buildDetailedTraceSummary(skewCorrectedTrace);\n+      return {\n+        traceId,\n+        trace: {\n+          rawTrace,\n+          skewCorrectedTrace,\n+          adjustedTrace,\n+        },\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACE}/${traceId}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTrace: Span[] = await resp.json();\n+    const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+    const adjustedTrace: AdjustedTrace = buildDetailedTraceSummary(\n+      skewCorrectedTrace,\n+    );\n+    return {\n+      traceId,\n+      trace: {\n+        rawTrace,\n+        skewCorrectedTrace,\n+        adjustedTrace,\n+      },\n+    };\n+  },\n+);\n+\n+const readFileAsync = (blob: Blob) => {\n+  return new Promise<any>((resolve, reject) => {\n+    const reader = new FileReader();\n+    reader.onload = () => {\n+      resolve(reader.result);\n+    };\n+    reader.onerror = () => {\n+      reject(reader.error);\n+    };\n+    reader.readAsText(blob);\n+  });\n+};\n+\n+export const loadJsonTrace = createAsyncThunk(\n+  'traces/loadJson',\n+  async (blob: Blob) => {\n+    const rawTraceStr = await readFileAsync(blob);\n+    const rawTrace: Span[] = JSON.parse(rawTraceStr);\n+    ensureV2TraceData(rawTrace);\n+    const [{ traceId }] = rawTrace;\n+    const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+    const adjustedTrace: AdjustedTrace = buildDetailedTraceSummary(\n+      skewCorrectedTrace,\n+    );\n+    return {\n+      traceId,\n+      trace: {\n+        rawTrace,\n+        skewCorrectedTrace,\n+        adjustedTrace,\n+      },\n+    };\n+  },\n+);\n+\n+export interface TracesState {\n+  isLoading: boolean;\n+  error?: SerializedError;\n+  traces: {\n+    [key: string]: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            type Annotation = {\n          \n          \n            \n            // Same type as Annotation in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#\n          \n          \n            \n            type Annotation = {", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484152253", "createdAt": "2020-09-07T02:20:40Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/models/Annotation.ts", "diffHunk": "@@ -11,14 +11,10 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n-import * as types from '../constants/action-types';\n \n-export const loadTrace = (trace) => ({\n-  type: types.TRACE_VIEWER__LOAD_TRACE,\n-  trace,\n-});\n+type Annotation = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE1MjgyMA==", "bodyText": "I see this logic twice in this file. do we need that? I don't really know if we should have earlier accepted the remote Endpoint servicename for the root span but I suppose it isn't terrible either.", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r484152820", "createdAt": "2020-09-07T02:23:25Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/zipkin/trace.js", "diffHunk": "@@ -369,17 +367,15 @@ export function detailedTraceSummary(root) {\n     modelview.spans.push(spanRow);\n   }\n \n-  if (modelview.spans.length >= 0) {\n-    modelview.rootSpan = {\n-      serviceName: modelview.spans[0].serviceName || 'unknown',\n-      spanName: modelview.spans[0].spanName || 'unknown',\n-    };\n-  } else {\n-    modelview.rootSpan = {\n-      serviceName: 'unknown',\n-      spanName: 'unknown',\n-    };\n-  }\n+  modelview.rootSpan = {};\n+  // If the first element does not exist, Error will be thrown.\n+  // So we don't have to check rootSpan existence.\n+  const [rootSpan] = root.queueRootMostSpans();\n+  modelview.rootSpan.serviceName =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7c22e5ba1379cd81bb1ef9593586e2f209f40af"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc56f7cabc4f0118d33264c6dd1b82d0b2e3f6f3", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/cc56f7cabc4f0118d33264c6dd1b82d0b2e3f6f3", "committedDate": "2020-09-07T10:33:35Z", "message": "Update zipkin-lens/src/models/AdjustedTrace.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb9ea4a3fd506f8bf5956697a03ff0abaadfac9", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/afb9ea4a3fd506f8bf5956697a03ff0abaadfac9", "committedDate": "2020-09-07T10:33:49Z", "message": "Update zipkin-lens/src/models/AdjustedTrace.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3307c6635a6f6c7335a821fc4c868640c0c841", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/6d3307c6635a6f6c7335a821fc4c868640c0c841", "committedDate": "2020-09-07T10:34:02Z", "message": "Update zipkin-lens/src/models/AdjustedTrace.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01b92920bd61c58a7bbb63502314a5e2ba5046e9", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/01b92920bd61c58a7bbb63502314a5e2ba5046e9", "committedDate": "2020-09-07T10:34:19Z", "message": "Update zipkin-lens/src/models/AdjustedTrace.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0f9a33bfd50a17ff4fb33b38ee1e568e71ab246", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/e0f9a33bfd50a17ff4fb33b38ee1e568e71ab246", "committedDate": "2020-09-07T10:34:32Z", "message": "Update zipkin-lens/src/models/AdjustedTrace.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb8936d815524a6aad2e79e06659770634b489c", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/9bb8936d815524a6aad2e79e06659770634b489c", "committedDate": "2020-09-07T10:34:44Z", "message": "Update zipkin-lens/src/models/AdjustedTrace.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f279a06056407389c0b3042b892767a79f10944", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/2f279a06056407389c0b3042b892767a79f10944", "committedDate": "2020-09-07T10:34:57Z", "message": "Update zipkin-lens/src/models/Endpoint.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cab2c9a6ccdd8da143ac8c435e63bbeb900fae7", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/8cab2c9a6ccdd8da143ac8c435e63bbeb900fae7", "committedDate": "2020-09-07T10:35:08Z", "message": "Update zipkin-lens/src/models/Span.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5422d1b6dce3fe13f167ee58b3c1189cd6a744d3", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/5422d1b6dce3fe13f167ee58b3c1189cd6a744d3", "committedDate": "2020-09-07T10:35:17Z", "message": "Update zipkin-lens/src/slices/tracesSlice.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77cac3aaa37a8846bb812a6b26ac83dbb0b159a", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/f77cac3aaa37a8846bb812a6b26ac83dbb0b159a", "committedDate": "2020-09-07T10:35:29Z", "message": "Update zipkin-lens/src/models/Annotation.ts\n\nCo-authored-by: Adrian Cole <adriancole@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81b7026e9d00a0ff0910a0ebb1cb1129ce5cf012", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/81b7026e9d00a0ff0910a0ebb1cb1129ce5cf012", "committedDate": "2020-09-14T22:57:15Z", "message": "Update traces state management"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34e5d84c2a73de7757a7dccc4145edbb5c36ac96", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/34e5d84c2a73de7757a7dccc4145edbb5c36ac96", "committedDate": "2020-09-14T22:57:26Z", "message": "(package) Add react-spinners"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90f23ba3191803ef5cd403950d7cab9d39ff28b1", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/90f23ba3191803ef5cd403950d7cab9d39ff28b1", "committedDate": "2020-09-14T22:57:26Z", "message": "Fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dc2aa0da158f83fcdf75094c62cb8bd53a962cd", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/9dc2aa0da158f83fcdf75094c62cb8bd53a962cd", "committedDate": "2020-09-14T22:57:26Z", "message": "Update loading indicator design"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/48e5ba16deef3b994a5cbe2a8723778c09c4e8e9", "committedDate": "2020-09-14T22:57:26Z", "message": "Avoid uUnnecessary search"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "936e63e84e1d060f3ba5301d8422e27e0f0def4f", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/936e63e84e1d060f3ba5301d8422e27e0f0def4f", "committedDate": "2020-09-14T22:52:40Z", "message": "Avoid uUnnecessary search"}, "afterCommit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/48e5ba16deef3b994a5cbe2a8723778c09c4e8e9", "committedDate": "2020-09-14T22:57:26Z", "message": "Avoid uUnnecessary search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzE3MzMx", "url": "https://github.com/openzipkin/zipkin/pull/3203#pullrequestreview-488317331", "createdAt": "2020-09-15T04:41:13Z", "commit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MToxNFrOHRwS2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MToxNFrOHRwS2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTA5OQ==", "bodyText": "curious. what is being shadowed.. comment worthy? or is this temporary...", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r488379099", "createdAt": "2020-09-15T04:41:14Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/components/TracePage/TracePage.jsx", "diffHunk": "@@ -11,98 +11,50 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n+/* eslint-disable no-shadow */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzIwMDkx", "url": "https://github.com/openzipkin/zipkin/pull/3203#pullrequestreview-488320091", "createdAt": "2020-09-15T04:43:09Z", "commit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MzowOVrOHRwU5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNDo0MzowOVrOHRwU5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODM3OTYyMw==", "bodyText": "mental note: we should revisit this naming", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r488379623", "createdAt": "2020-09-15T04:43:09Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }, thunkApi) => {\n+    const ps = new URLSearchParams(params);\n+\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { search, traces }: TracesState = (thunkApi.getState() as any).traces;\n+    // If the query is the same as the previous query, it will not fetch again.\n+    if (search.prevQuery === ps.toString()) {\n+      return {\n+        traces,\n+        traceSummaries: search.traceSummaries,\n+        query: ps.toString(),\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACES}?${ps.toString()}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces: Span[][] = await resp.json();\n+\n+    const newTraces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries: TraceSummary[] = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(newTraces).map((traceId) =>\n+        buildTraceSummary(newTraces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces: newTraces,\n+      traceSummaries,\n+      query: ps.toString(),\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return traces[traceId];\n+      }\n+      if (skewCorrectedTrace) {\n+        adjustedTrace = buildDetailedTraceSummary(skewCorrectedTrace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48e5ba16deef3b994a5cbe2a8723778c09c4e8e9"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebfbdc5aac5d638c849426b483369df267c6c63", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/cebfbdc5aac5d638c849426b483369df267c6c63", "committedDate": "2020-09-15T10:11:31Z", "message": "Avoid disabling no-shadow and use useSelector & useDispatch instead of connect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7053f37279ad4d606c23ba0c6a88341934e519", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/3a7053f37279ad4d606c23ba0c6a88341934e519", "committedDate": "2020-09-15T21:42:40Z", "message": "Remove an unnecessary prop from TracePage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e140317c8e52b8f39f4ae821f5657e4d93708437", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/e140317c8e52b8f39f4ae821f5657e4d93708437", "committedDate": "2020-09-15T21:49:15Z", "message": "Show error message when failed to load JSON files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "721339980510af31304051a0c2c29ed921a8a11e", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/721339980510af31304051a0c2c29ed921a8a11e", "committedDate": "2020-09-15T22:16:36Z", "message": "Change the way to show that no trace found"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4836fef9e48f9810ff71f1e3b81200e0d962ef9c", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/4836fef9e48f9810ff71f1e3b81200e0d962ef9c", "committedDate": "2020-09-15T22:26:24Z", "message": "Show error message when failed to search traces"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MTgwNzEw", "url": "https://github.com/openzipkin/zipkin/pull/3203#pullrequestreview-489180710", "createdAt": "2020-09-15T23:46:59Z", "commit": {"oid": "4836fef9e48f9810ff71f1e3b81200e0d962ef9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo0NzowMFrOHSbClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo0NzowMFrOHSbClg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA3OTQ0Ng==", "bodyText": "will the return here have the same type as the result of buildDetailedTraceSummary?", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r489079446", "createdAt": "2020-09-15T23:47:00Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/slices/tracesSlice.ts", "diffHunk": "@@ -0,0 +1,292 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+/* eslint-disable no-param-reassign */\n+\n+import {\n+  SerializedError,\n+  createAsyncThunk,\n+  createSlice,\n+} from '@reduxjs/toolkit';\n+\n+import * as api from '../constants/api';\n+import AdjustedTrace from '../models/AdjustedTrace';\n+import Span from '../models/Span';\n+import TraceSummary from '../models/TraceSummary';\n+import { ensureV2TraceData } from '../util/trace';\n+\n+const {\n+  treeCorrectedForClockSkew,\n+  traceSummary: buildTraceSummary,\n+  traceSummaries: buildTraceSummaries,\n+  detailedTraceSummary: buildDetailedTraceSummary,\n+} = require('../zipkin');\n+\n+export const searchTraces = createAsyncThunk(\n+  'traces/search',\n+  async (params: { [key: string]: string }, thunkApi) => {\n+    const ps = new URLSearchParams(params);\n+\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { search, traces }: TracesState = (thunkApi.getState() as any).traces;\n+    // If the query is the same as the previous query, it will not fetch again.\n+    if (search.prevQuery === ps.toString()) {\n+      return {\n+        traces,\n+        traceSummaries: search.traceSummaries,\n+        query: ps.toString(),\n+      };\n+    }\n+\n+    const resp = await fetch(`${api.TRACES}?${ps.toString()}`);\n+    if (!resp.ok) {\n+      throw Error(resp.statusText);\n+    }\n+    const rawTraces: Span[][] = await resp.json();\n+\n+    const newTraces = rawTraces.reduce(\n+      (acc, rawTrace) => {\n+        const [{ traceId }] = rawTrace;\n+        const skewCorrectedTrace = treeCorrectedForClockSkew(rawTrace);\n+        acc[traceId] = {\n+          rawTrace,\n+          skewCorrectedTrace,\n+        };\n+        return acc;\n+      },\n+      {} as {\n+        [key: string]: {\n+          rawTrace: Span[];\n+          skewCorrectedTrace: any;\n+        };\n+      },\n+    );\n+\n+    const traceSummaries: TraceSummary[] = buildTraceSummaries(\n+      ps.get('serviceName'),\n+      Object.keys(newTraces).map((traceId) =>\n+        buildTraceSummary(newTraces[traceId].skewCorrectedTrace),\n+      ),\n+    );\n+\n+    return {\n+      traces: newTraces,\n+      traceSummaries,\n+      query: ps.toString(),\n+    };\n+  },\n+);\n+\n+export const loadTrace = createAsyncThunk(\n+  'traces/load',\n+  async (traceId: string, thunkApi) => {\n+    // We need to import RootState in order to give the type to getState.\n+    // Importing RootState will result in a cyclic import.\n+    // So use any type to avoid this.\n+    const { traces }: TracesState = (thunkApi.getState() as any).traces;\n+\n+    if (traces[traceId]) {\n+      const { rawTrace, skewCorrectedTrace } = traces[traceId];\n+      let { adjustedTrace } = traces[traceId];\n+      if (adjustedTrace) {\n+        return traces[traceId];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4836fef9e48f9810ff71f1e3b81200e0d962ef9c"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5b4962f3867c230e11e01a866d28b78f830b2b9", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/e5b4962f3867c230e11e01a866d28b78f830b2b9", "committedDate": "2020-09-18T23:02:19Z", "message": "Add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3424bff8d97e1e5c2cf13a3e3a7489124b36656", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/f3424bff8d97e1e5c2cf13a3e3a7489124b36656", "committedDate": "2020-09-19T15:48:41Z", "message": "(package) Add @types/redux-mock-store and update redux-mock-store"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c08e1dc9b727fa0ec6593d299159a3a7ce18f217", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/c08e1dc9b727fa0ec6593d299159a3a7ce18f217", "committedDate": "2020-09-19T15:48:55Z", "message": "Add unit tests of tracesSlice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5eded02814d9fa763a7c9e778c7d43f9204b97e", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/b5eded02814d9fa763a7c9e778c7d43f9204b97e", "committedDate": "2020-09-19T15:59:34Z", "message": "Update unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/6e9aace1aef3f8fbead5fa2a61f113d90ac70a12", "committedDate": "2020-09-19T16:12:37Z", "message": "Remove unused file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxNTE4", "url": "https://github.com/openzipkin/zipkin/pull/3203#pullrequestreview-492161518", "createdAt": "2020-09-19T23:26:41Z", "commit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyNjo0MlrOHU1BRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMzoyNjo0MlrOHU1BRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTYwMjI0Nw==", "bodyText": "hah. I bet this was surprising :D", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r491602247", "createdAt": "2020-09-19T23:26:42Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-lens/src/zipkin/trace.test.js", "diffHunk": "@@ -482,8 +482,8 @@ describe('detailedTraceSummary', () => {\n       { serviceName: 'frontend', spanCount: 1 },\n     ]);\n     expect(rootSpan).toEqual({\n-      serviceName: 'backend',\n-      spanName: 'get /api',\n+      serviceName: 'frontend',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTYxNTIz", "url": "https://github.com/openzipkin/zipkin/pull/3203#pullrequestreview-492161523", "createdAt": "2020-09-19T23:26:56Z", "commit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTY2Mjg2", "url": "https://github.com/openzipkin/zipkin/pull/3203#pullrequestreview-492166286", "createdAt": "2020-09-20T01:59:39Z", "commit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwMTo1OTozOVrOHU3aTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQwMTo1OTozOVrOHU3aTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY0MTQyMg==", "bodyText": "I wonder if anyone would appreciate us publishing these types at some point.\nThough it also brought the idea of perhaps using zipkin-js for its model types\nhttps://www.github.com/openzipkin/zipkin-js/tree/master/packages%2Fzipkin%2Findex.d.ts\nJust random idea :)", "url": "https://github.com/openzipkin/zipkin/pull/3203#discussion_r491641422", "createdAt": "2020-09-20T01:59:39Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/models/Span.ts", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import Annotation from './Annotation';\n+import Endpoint from './Endpoint';\n+\n+// Same type as Span in the OpenApi/Swagger model https://zipkin.io/zipkin-api/#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e9aace1aef3f8fbead5fa2a61f113d90ac70a12"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c819ddeef209a165fd19a0e46c70a26b8338db2d", "author": {"user": {"login": "tacigar", "name": "tacigar"}}, "url": "https://github.com/openzipkin/zipkin/commit/c819ddeef209a165fd19a0e46c70a26b8338db2d", "committedDate": "2020-09-23T03:33:40Z", "message": "Add comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1537, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}