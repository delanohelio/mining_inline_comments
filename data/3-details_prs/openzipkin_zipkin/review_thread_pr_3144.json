{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NzU5NjQy", "number": 3144, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowMzoxM1rOENfsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowOTozNlrOENft1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg2MTgyOnYy", "diffSide": "LEFT", "path": "zipkin-lens/src/components/App/AlertSnackbar.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowMzoxM1rOGwMaxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowMzoxM1rOGwMaxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4ODI5NQ==", "bodyText": "10 seconds seemed a bit long for me.", "url": "https://github.com/openzipkin/zipkin/pull/3144#discussion_r453188295", "createdAt": "2020-07-11T12:03:13Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/components/App/AlertSnackbar.tsx", "diffHunk": "@@ -32,7 +32,7 @@ const AlertSnackbar: React.FC = () => {\n   return (\n     <Snackbar\n       open={alertOpen}\n-      autoHideDuration={10000}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a48577e74fef90ed3907f9eae070a46edffcccd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg2MjI0OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/features/dependencies/DependenciesGraph.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowNDowN1rOGwMa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowNDowN1rOGwMa-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4ODM0Nw==", "bodyText": "All import statements are sorted alphabetically.", "url": "https://github.com/openzipkin/zipkin/pull/3144#discussion_r453188347", "createdAt": "2020-07-11T12:04:07Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/features/dependencies/DependenciesGraph.tsx", "diffHunk": "@@ -11,17 +11,26 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n+\n /* eslint-disable no-shadow */\n+\n+import {\n+  Box,\n+  Grid,\n+  Theme,\n+  createStyles,\n+  makeStyles,\n+  useTheme,\n+} from '@material-ui/core';\n+import moment from 'moment';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a48577e74fef90ed3907f9eae070a46edffcccd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg2MjUwOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/features/dependencies/DependenciesPage.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowNDo0MFrOGwMbFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowNDo0MFrOGwMbFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4ODM3NA==", "bodyText": "Show AlertSnackbar when failed to load dependencies.", "url": "https://github.com/openzipkin/zipkin/pull/3144#discussion_r453188374", "createdAt": "2020-07-11T12:04:40Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/features/dependencies/DependenciesPage.tsx", "diffHunk": "@@ -132,10 +139,23 @@ const DependenciesPage: React.FC<DependenciesPageProps> = ({\n   });\n   useFetchDependencies(timeRange);\n \n-  const { isLoading, dependencies } = useSelector(\n+  const { isLoading, dependencies, error } = useSelector(\n     (state: RootState) => state.dependencies,\n   );\n \n+  useEffect(() => {\n+    if (error) {\n+      dispatch(\n+        setAlert({\n+          message: 'Failed to load dependencies...',\n+          severity: 'error',\n+        }),\n+      );\n+    } else {\n+      dispatch(clearAlert());\n+    }\n+  }, [error, dispatch]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a48577e74fef90ed3907f9eae070a46edffcccd"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg2NTIyOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/features/dependencies/Edge.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowODoyN1rOGwMcVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowODoyN1rOGwMcVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4ODY5Mw==", "bodyText": "Edge was defined in NodeDetailData.tsx, but it is now in a separate file Transferred.", "url": "https://github.com/openzipkin/zipkin/pull/3144#discussion_r453188693", "createdAt": "2020-07-11T12:08:27Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/features/dependencies/Edge.ts", "diffHunk": "@@ -11,8 +11,14 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n-import createReducer from '../reducers';\n \n-type RootState = ReturnType<ReturnType<typeof createReducer>>;\n+type Edge = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a48577e74fef90ed3907f9eae070a46edffcccd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg2NTgzOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/store/index.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowOTozNlrOGwMcpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjowOTozNlrOGwMcpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE4ODc3Mw==", "bodyText": "I defined AppThunk in the same file as RootState.", "url": "https://github.com/openzipkin/zipkin/pull/3144#discussion_r453188773", "createdAt": "2020-07-11T12:09:36Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/store/index.ts", "diffHunk": "@@ -12,6 +12,16 @@\n  * the License.\n  */\n \n+import { Action } from 'redux';\n+import { ThunkAction } from 'redux-thunk';\n+\n import createReducer from '../reducers';\n \n export type RootState = ReturnType<ReturnType<typeof createReducer>>;\n+\n+export type AppThunk<ReturnType = void> = ThunkAction<", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a48577e74fef90ed3907f9eae070a46edffcccd"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1163, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}