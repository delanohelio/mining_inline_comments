{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNjkwNDc4", "number": 3180, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0MToyMFrOEeIOxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0NDoxMVrOEeIQJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDI3NTkwOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0MToyMFrOHJnnWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNjowMFrOHJ2Eug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODI4Mw==", "bodyText": "Is it possible to avoid this cast?", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r479848283", "createdAt": "2020-08-31T01:41:20Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "diffHunk": "@@ -399,29 +404,60 @@ const DiscoverPageContent: React.FC<DiscoverPageContentProps> = ({\n     }\n   }, [setQueryParams, tempCriteria, tempLookback, tempLimit]);\n \n-  const [traces, isLoadingTraces] = useSelector((state: RootState) => [\n+  const [\n+    traces,\n+    isLoadingTraces,\n+    traceSummaries,\n+  ] = useSelector((state: RootState) => [\n     state.traces.traces,\n     state.traces.isLoading,\n+    state.traces.traceSummaries as TraceSummary[],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTE3OA==", "bodyText": "Yes, but traceSummaries state is written in JavaScript, so this type is any..\nSo I want to cast until the type is attached to the state of traceSummaries..", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r480085178", "createdAt": "2020-08-31T12:06:00Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "diffHunk": "@@ -399,29 +404,60 @@ const DiscoverPageContent: React.FC<DiscoverPageContentProps> = ({\n     }\n   }, [setQueryParams, tempCriteria, tempLookback, tempLimit]);\n \n-  const [traces, isLoadingTraces] = useSelector((state: RootState) => [\n+  const [\n+    traces,\n+    isLoadingTraces,\n+    traceSummaries,\n+  ] = useSelector((state: RootState) => [\n     state.traces.traces,\n     state.traces.isLoading,\n+    state.traces.traceSummaries as TraceSummary[],", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODI4Mw=="}, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDI3NjkxOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0MTo1N1rOHJnn3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODoyMjoxM1rOHKrdtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODQxMw==", "bodyText": "Can you use Set instead of object / keys?", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r479848413", "createdAt": "2020-08-31T01:41:57Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "diffHunk": "@@ -399,29 +404,60 @@ const DiscoverPageContent: React.FC<DiscoverPageContentProps> = ({\n     }\n   }, [setQueryParams, tempCriteria, tempLookback, tempLimit]);\n \n-  const [traces, isLoadingTraces] = useSelector((state: RootState) => [\n+  const [\n+    traces,\n+    isLoadingTraces,\n+    traceSummaries,\n+  ] = useSelector((state: RootState) => [\n     state.traces.traces,\n     state.traces.isLoading,\n+    state.traces.traceSummaries as TraceSummary[],\n   ]);\n \n   const [isShowingLookbackMenu, setIsShowingLookbackMenu] = useState(false);\n-\n   const toggleLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu((prev) => !prev);\n   }, []);\n-\n   const closeLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu(false);\n   }, []);\n \n   const [isOpeningSettings, setIsOpeningSettings] = useState(false);\n-\n   const handleSettingsButtonClick = useCallback(() => {\n     setIsOpeningSettings((prev) => !prev);\n   }, []);\n \n-  let content: JSX.Element | undefined;\n+  const [filters, setFilters] = useState<string[]>([]);\n+  const filterOptions = useMemo(\n+    () =>\n+      Object.keys(\n+        traceSummaries.reduce((acc, cur) => {\n+          cur.serviceSummaries.forEach((serviceSummary) => {\n+            acc[serviceSummary.serviceName] = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDc0ODk1MA==", "bodyText": "Just confirming are you leaving this as is or considering Set?", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r480748950", "createdAt": "2020-09-01T04:04:20Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "diffHunk": "@@ -399,29 +404,60 @@ const DiscoverPageContent: React.FC<DiscoverPageContentProps> = ({\n     }\n   }, [setQueryParams, tempCriteria, tempLookback, tempLimit]);\n \n-  const [traces, isLoadingTraces] = useSelector((state: RootState) => [\n+  const [\n+    traces,\n+    isLoadingTraces,\n+    traceSummaries,\n+  ] = useSelector((state: RootState) => [\n     state.traces.traces,\n     state.traces.isLoading,\n+    state.traces.traceSummaries as TraceSummary[],\n   ]);\n \n   const [isShowingLookbackMenu, setIsShowingLookbackMenu] = useState(false);\n-\n   const toggleLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu((prev) => !prev);\n   }, []);\n-\n   const closeLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu(false);\n   }, []);\n \n   const [isOpeningSettings, setIsOpeningSettings] = useState(false);\n-\n   const handleSettingsButtonClick = useCallback(() => {\n     setIsOpeningSettings((prev) => !prev);\n   }, []);\n \n-  let content: JSX.Element | undefined;\n+  const [filters, setFilters] = useState<string[]>([]);\n+  const filterOptions = useMemo(\n+    () =>\n+      Object.keys(\n+        traceSummaries.reduce((acc, cur) => {\n+          cur.serviceSummaries.forEach((serviceSummary) => {\n+            acc[serviceSummary.serviceName] = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODQxMw=="}, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDgyNjM4MQ==", "bodyText": "Oops! I was correcting a different code.\nI'll use Set here.", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r480826381", "createdAt": "2020-09-01T05:19:40Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "diffHunk": "@@ -399,29 +404,60 @@ const DiscoverPageContent: React.FC<DiscoverPageContentProps> = ({\n     }\n   }, [setQueryParams, tempCriteria, tempLookback, tempLimit]);\n \n-  const [traces, isLoadingTraces] = useSelector((state: RootState) => [\n+  const [\n+    traces,\n+    isLoadingTraces,\n+    traceSummaries,\n+  ] = useSelector((state: RootState) => [\n     state.traces.traces,\n     state.traces.isLoading,\n+    state.traces.traceSummaries as TraceSummary[],\n   ]);\n \n   const [isShowingLookbackMenu, setIsShowingLookbackMenu] = useState(false);\n-\n   const toggleLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu((prev) => !prev);\n   }, []);\n-\n   const closeLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu(false);\n   }, []);\n \n   const [isOpeningSettings, setIsOpeningSettings] = useState(false);\n-\n   const handleSettingsButtonClick = useCallback(() => {\n     setIsOpeningSettings((prev) => !prev);\n   }, []);\n \n-  let content: JSX.Element | undefined;\n+  const [filters, setFilters] = useState<string[]>([]);\n+  const filterOptions = useMemo(\n+    () =>\n+      Object.keys(\n+        traceSummaries.reduce((acc, cur) => {\n+          cur.serviceSummaries.forEach((serviceSummary) => {\n+            acc[serviceSummary.serviceName] = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODQxMw=="}, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1OTkyNw==", "bodyText": "Done! \ud83d\ude47", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r480959927", "createdAt": "2020-09-01T08:22:13Z", "author": {"login": "tacigar"}, "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "diffHunk": "@@ -399,29 +404,60 @@ const DiscoverPageContent: React.FC<DiscoverPageContentProps> = ({\n     }\n   }, [setQueryParams, tempCriteria, tempLookback, tempLimit]);\n \n-  const [traces, isLoadingTraces] = useSelector((state: RootState) => [\n+  const [\n+    traces,\n+    isLoadingTraces,\n+    traceSummaries,\n+  ] = useSelector((state: RootState) => [\n     state.traces.traces,\n     state.traces.isLoading,\n+    state.traces.traceSummaries as TraceSummary[],\n   ]);\n \n   const [isShowingLookbackMenu, setIsShowingLookbackMenu] = useState(false);\n-\n   const toggleLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu((prev) => !prev);\n   }, []);\n-\n   const closeLookbackMenu = useCallback(() => {\n     setIsShowingLookbackMenu(false);\n   }, []);\n \n   const [isOpeningSettings, setIsOpeningSettings] = useState(false);\n-\n   const handleSettingsButtonClick = useCallback(() => {\n     setIsOpeningSettings((prev) => !prev);\n   }, []);\n \n-  let content: JSX.Element | undefined;\n+  const [filters, setFilters] = useState<string[]>([]);\n+  const filterOptions = useMemo(\n+    () =>\n+      Object.keys(\n+        traceSummaries.reduce((acc, cur) => {\n+          cur.serviceSummaries.forEach((serviceSummary) => {\n+            acc[serviceSummary.serviceName] = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODQxMw=="}, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDI3ODE5OnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0MzowOFrOHJnolA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0MzowOFrOHJnolA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODU5Ng==", "bodyText": "Can wait until all the UI feedback is finalized but let's not forget i18n", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r479848596", "createdAt": "2020-08-31T01:43:08Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DiscoverPage/DiscoverPageContent.tsx", "diffHunk": "@@ -483,14 +525,30 @@ const DiscoverPageContent: React.FC<DiscoverPageContentProps> = ({\n               <SettingsIcon />\n             </SettingsButton>\n           </Box>\n-          {isOpeningSettings ? (\n+        </Container>\n+        <Collapse in={isOpeningSettings}>\n+          <Box mt={1.5} mb={1.5}>\n+            <Divider />\n+          </Box>\n+          <Container>\n             <Box\n               display=\"flex\"\n               alignItems=\"center\"\n               justifyContent=\"flex-end\"\n               mt={1.75}\n             >\n-              <Box mr={1} position=\"relative\">\n+              <TextField\n+                label=\"Limit\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDI3OTQzOnYy", "diffSide": "RIGHT", "path": "zipkin-lens/src/components/DiscoverPage/TraceSummaryRow.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0NDoxMVrOHJnpSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwMTo0NDoxMVrOHJnpSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTg0ODc3OA==", "bodyText": "Believe you may be able to use useReducer instead of useState + useCallback since you only toggle.", "url": "https://github.com/openzipkin/zipkin/pull/3180#discussion_r479848778", "createdAt": "2020-08-31T01:44:11Z", "author": {"login": "anuraaga"}, "path": "zipkin-lens/src/components/DiscoverPage/TraceSummaryRow.tsx", "diffHunk": "@@ -0,0 +1,231 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import {\n+  Box,\n+  Collapse,\n+  IconButton,\n+  TableCell,\n+  TableRow,\n+  Typography,\n+  useTheme,\n+  Button,\n+} from '@material-ui/core';\n+import KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\n+import KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\n+import moment from 'moment';\n+import React, { useCallback, useMemo, useState } from 'react';\n+import { Link } from 'react-router-dom';\n+import {\n+  Bar,\n+  BarChart,\n+  CartesianGrid,\n+  LabelList,\n+  ResponsiveContainer,\n+  Tooltip,\n+  XAxis,\n+  YAxis,\n+} from 'recharts';\n+import styled from 'styled-components';\n+\n+import { selectColorByInfoClass, selectServiceColor } from '../../colors';\n+import TraceSummary from '../../models/TraceSummary';\n+import { formatDuration } from '../../util/timestamp';\n+\n+const renderCustomizedLabel = (props: any) => {\n+  const { x, y, width, value } = props;\n+  const radius = 10;\n+\n+  return (\n+    <g>\n+      <circle\n+        cx={x + width / 2}\n+        cy={y - radius}\n+        r={radius}\n+        fill={selectServiceColor(value)}\n+      />\n+      <text\n+        x={x + width / 2}\n+        y={y - radius}\n+        fill=\"#fff\"\n+        textAnchor=\"middle\"\n+        dominantBaseline=\"middle\"\n+      >\n+        {value[0].toUpperCase()}\n+      </text>\n+    </g>\n+  );\n+};\n+\n+interface TraceSummaryRowProps {\n+  traceSummary: TraceSummary;\n+}\n+\n+const TraceSummaryRow: React.FC<TraceSummaryRowProps> = ({ traceSummary }) => {\n+  const theme = useTheme();\n+  const [open, setOpen] = useState(false);\n+  const handleOpenButtonClick = useCallback(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940dbc03bd5681533693e056e072bcd3000dd6cf"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1211, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}