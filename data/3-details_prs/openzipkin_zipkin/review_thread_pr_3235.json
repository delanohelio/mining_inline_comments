{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNzQ3MjE5", "number": 3235, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo0NTozNVrOEtvrsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozMjozNlrOEtwLdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDAyNjA5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo0NTozNVrOHht05w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo0NTozNVrOHht05w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTExNTg3OQ==", "bodyText": "this applies the o.. soo.. important.. junit update that dependabot decided to nag the entire java ecosystem about", "url": "https://github.com/openzipkin/zipkin/pull/3235#discussion_r505115879", "createdAt": "2020-10-15T01:45:35Z", "author": {"login": "codefromthecrypt"}, "path": "pom.xml", "diffHunk": "@@ -55,32 +55,32 @@\n     <netty.version>4.1.52.Final</netty.version>\n \n     <!-- It's easy for Jackson dependencies to get misaligned, so we manage it ourselves. -->\n-    <jackson.version>2.11.2</jackson.version>\n+    <jackson.version>2.11.3</jackson.version>\n \n     <cassandra-driver-core.version>3.10.2</cassandra-driver-core.version>\n-    <jooq.version>3.13.4</jooq.version>\n+    <jooq.version>3.13.5</jooq.version>\n     <micrometer.version>1.5.5</micrometer.version>\n     <spring-boot.version>2.3.4.RELEASE</spring-boot.version>\n     <!-- MySQL connector is GPL, even if it has an OSS exception.\n          https://www.mysql.com/about/legal/licensing/foss-exception/\n \n          MariaDB has a friendlier license, LGPL, which is less scary in audits.\n     -->\n-    <mariadb-java-client.version>2.6.2</mariadb-java-client.version>\n+    <mariadb-java-client.version>2.7.0</mariadb-java-client.version>\n     <HikariCP.version>3.4.5</HikariCP.version>\n     <slf4j.version>1.7.30</slf4j.version>\n     <auto-value.version>1.7.4</auto-value.version>\n     <git-commit-id.version>4.0.2</git-commit-id.version>\n \n     <!-- Test only dependencies -->\n-    <junit.version>4.13</junit.version>\n+    <junit.version>4.13.1</junit.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c569857969edb75325389d8809b593b30f6e9d5b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDAyNzU5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo0NjoyN1rOHht1zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMTo0NjoyN1rOHht1zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTExNjEwOA==", "bodyText": "needed for testcontainers/testcontainers-java#3166", "url": "https://github.com/openzipkin/zipkin/pull/3235#discussion_r505116108", "createdAt": "2020-10-15T01:46:27Z", "author": {"login": "codefromthecrypt"}, "path": "pom.xml", "diffHunk": "@@ -55,32 +55,32 @@\n     <netty.version>4.1.52.Final</netty.version>\n \n     <!-- It's easy for Jackson dependencies to get misaligned, so we manage it ourselves. -->\n-    <jackson.version>2.11.2</jackson.version>\n+    <jackson.version>2.11.3</jackson.version>\n \n     <cassandra-driver-core.version>3.10.2</cassandra-driver-core.version>\n-    <jooq.version>3.13.4</jooq.version>\n+    <jooq.version>3.13.5</jooq.version>\n     <micrometer.version>1.5.5</micrometer.version>\n     <spring-boot.version>2.3.4.RELEASE</spring-boot.version>\n     <!-- MySQL connector is GPL, even if it has an OSS exception.\n          https://www.mysql.com/about/legal/licensing/foss-exception/\n \n          MariaDB has a friendlier license, LGPL, which is less scary in audits.\n     -->\n-    <mariadb-java-client.version>2.6.2</mariadb-java-client.version>\n+    <mariadb-java-client.version>2.7.0</mariadb-java-client.version>\n     <HikariCP.version>3.4.5</HikariCP.version>\n     <slf4j.version>1.7.30</slf4j.version>\n     <auto-value.version>1.7.4</auto-value.version>\n     <git-commit-id.version>4.0.2</git-commit-id.version>\n \n     <!-- Test only dependencies -->\n-    <junit.version>4.13</junit.version>\n+    <junit.version>4.13.1</junit.version>\n     <junit-jupiter.version>5.7.0</junit-jupiter.version>\n-    <mockito.version>3.5.10</mockito.version>\n+    <mockito.version>3.5.13</mockito.version>\n     <assertj.version>3.17.2</assertj.version>\n     <awaitility.version>4.0.3</awaitility.version>\n     <hamcrest.version>1.3</hamcrest.version>\n-    <testcontainers.version>1.14.3</testcontainers.version>\n-    <okhttp.version>4.8.1</okhttp.version>\n+    <testcontainers.version>1.15.0-rc2</testcontainers.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c569857969edb75325389d8809b593b30f6e9d5b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDEwNzQwOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjozMjozNlrOHhukng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwMjo0NzozN1rOHhu1gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyODA5NA==", "bodyText": "@ikhoon @minwoox @trustin finally got something!\n[ERROR] zipkin2.server.internal.elasticsearch.ITElasticsearchHealthCheck.allHealthy  Time elapsed: 0.139 s  <<< FAILURE!\n\njava.lang.AssertionError: Health check failed with message: null\n\n\tat zipkin2.server.internal.elasticsearch.ITElasticsearchHealthCheck.assertOk(ITElasticsearchHealthCheck.java:203)\n\n\tat zipkin2.server.internal.elasticsearch.ITElasticsearchHealthCheck.allHealthy(ITElasticsearchHealthCheck.java:101)\n\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\n\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\n\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\n\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\n\tat org.junit.vintage.engine.execution.RunnerExecutor.execute(RunnerExecutor.java:43)\n\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\n\n\tat java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)\n\n\tat java.base/java.util.Iterator.forEachRemaining(Iterator.java:133)\n\n\tat java.base/java.util.Spliterators$IteratorSpliterator.forEachRemaining(Spliterators.java:1801)\n\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\n\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\n\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\n\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\n\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\n\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)\n\n\tat org.junit.vintage.engine.VintageTestEngine.executeAllChildren(VintageTestEngine.java:82)\n\n\tat org.junit.vintage.engine.VintageTestEngine.execute(VintageTestEngine.java:73)\n\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:188)\n\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:154)\n\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:128)\n\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)\n\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)\n\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)\n\nCaused by: com.linecorp.armeria.common.stream.AbortedStreamException\n\n\tat com.linecorp.armeria.common.stream.AbortedStreamException.get(AbortedStreamException.java:39)\n\n\tat com.linecorp.armeria.common.stream.DefaultStreamMessage.abort(DefaultStreamMessage.java:154)\n\n\tat com.linecorp.armeria.common.HeaderOverridingHttpRequest.abort(HeaderOverridingHttpRequest.java:99)\n\n\tat com.linecorp.armeria.client.HttpResponseDecoder$HttpResponseWrapper.close(HttpResponseDecoder.java:299)\n\n\tat com.linecorp.armeria.client.HttpResponseDecoder$HttpResponseWrapper.close(HttpResponseDecoder.java:285)\n\n\tat com.linecorp.armeria.client.Http2ResponseDecoder.onDataRead(Http2ResponseDecoder.java:259)\n\n\tat io.netty.handler.codec.http2.Http2FrameListenerDecorator.onDataRead(Http2FrameListenerDecorator.java:36)\n\n\tat io.netty.handler.codec.http2.Http2EmptyDataFrameListener.onDataRead(Http2EmptyDataFrameListener.java:49)\n\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder$FrameReadListener.onDataRead(DefaultHttp2ConnectionDecoder.java:292)\n\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readDataFrame(DefaultHttp2FrameReader.java:422)\n\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.processPayloadState(DefaultHttp2FrameReader.java:251)\n\n\tat io.netty.handler.codec.http2.DefaultHttp2FrameReader.readFrame(DefaultHttp2FrameReader.java:160)\n\n\tat io.netty.handler.codec.http2.DefaultHttp2ConnectionDecoder.decodeFrame(DefaultHttp2ConnectionDecoder.java:174)\n\n\tat io.netty.handler.codec.http2.DecoratingHttp2ConnectionDecoder.decodeFrame(DecoratingHttp2ConnectionDecoder.java:63)\n\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$FrameDecoder.decode(Http2ConnectionHandler.java:378)\n\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:438)\n\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:501)\n\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:440)\n\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\n\tat io.netty.handler.logging.LoggingHandler.channelRead(LoggingHandler.java:271)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\n\tat io.netty.handler.flush.FlushConsolidationHandler.channelRead(FlushConsolidationHandler.java:152)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:357)\n\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:379)\n\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:365)\n\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\n\n\tat io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:795)\n\n\tat io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:475)\n\n\tat io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:378)\n\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\n\tat java.base/java.lang.Thread.run(Thread.java:834)", "url": "https://github.com/openzipkin/zipkin/pull/3235#discussion_r505128094", "createdAt": "2020-10-15T02:32:36Z", "author": {"login": "codefromthecrypt"}, "path": "pom.xml", "diffHunk": "@@ -549,6 +552,10 @@\n             -->\n             <com.linecorp.armeria.verboseExceptions>always</com.linecorp.armeria.verboseExceptions>\n           </systemProperties>\n+          <!-- workaround to SUREFIRE-1831 -->\n+          <useModulePath>false</useModulePath>\n+          <!-- Ensures root cause ends up in the console -->\n+          <trimStackTrace>false</trimStackTrace>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c569857969edb75325389d8809b593b30f6e9d5b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyODU3Mg==", "bodyText": "Any follow-up on this stack trace, please comment here #3197", "url": "https://github.com/openzipkin/zipkin/pull/3235#discussion_r505128572", "createdAt": "2020-10-15T02:34:38Z", "author": {"login": "codefromthecrypt"}, "path": "pom.xml", "diffHunk": "@@ -549,6 +552,10 @@\n             -->\n             <com.linecorp.armeria.verboseExceptions>always</com.linecorp.armeria.verboseExceptions>\n           </systemProperties>\n+          <!-- workaround to SUREFIRE-1831 -->\n+          <useModulePath>false</useModulePath>\n+          <!-- Ensures root cause ends up in the console -->\n+          <trimStackTrace>false</trimStackTrace>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyODA5NA=="}, "originalCommit": {"oid": "c569857969edb75325389d8809b593b30f6e9d5b"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEzMjQxNw==", "bodyText": "Let me take a look at it. \ud83d\ude04", "url": "https://github.com/openzipkin/zipkin/pull/3235#discussion_r505132417", "createdAt": "2020-10-15T02:47:37Z", "author": {"login": "minwoox"}, "path": "pom.xml", "diffHunk": "@@ -549,6 +552,10 @@\n             -->\n             <com.linecorp.armeria.verboseExceptions>always</com.linecorp.armeria.verboseExceptions>\n           </systemProperties>\n+          <!-- workaround to SUREFIRE-1831 -->\n+          <useModulePath>false</useModulePath>\n+          <!-- Ensures root cause ends up in the console -->\n+          <trimStackTrace>false</trimStackTrace>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTEyODA5NA=="}, "originalCommit": {"oid": "c569857969edb75325389d8809b593b30f6e9d5b"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1039, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}