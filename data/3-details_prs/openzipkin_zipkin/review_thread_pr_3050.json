{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NzczMzg4", "number": 3050, "reviewThreads": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoxODoyMVrODtY_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MDo0OVrODvyq3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTIyMDcwOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNjoxODoyMVrOF-yPDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MToxNVrOF--uCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3OTA4NA==", "bodyText": "I think maybe spring already has a scheduler bean? if not, define this as a bean so it can shutdown more coherently.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401379084", "createdAt": "2020-04-01T06:18:21Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +145,30 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  Consumer<ClientOptionsBuilder> dynamicElasticsearchAuth(ZipkinElasticsearchStorageProperties es,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    return new Consumer<ClientOptionsBuilder>() {\n+      @Override\n+      public void accept(final ClientOptionsBuilder client) {\n+        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MzYyNw==", "bodyText": "I picked up a scheduler bean.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401583627", "createdAt": "2020-04-01T12:41:15Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +145,30 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  Consumer<ClientOptionsBuilder> dynamicElasticsearchAuth(ZipkinElasticsearchStorageProperties es,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    return new Consumer<ClientOptionsBuilder>() {\n+      @Override\n+      public void accept(final ClientOptionsBuilder client) {\n+        ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM3OTA4NA=="}, "originalCommit": {"oid": "9ce75ed0df29e85e68cf70cb0c5b9b28b632bb44"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU0NTc0OnYy", "diffSide": "RIGHT", "path": "zipkin-server/README.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozNDoxMFrOF_I99g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0NToxOVrOF_cDog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MTU0Mg==", "bodyText": "Wondering if instead of the more generic SECURITY term, ES_CREDENTIALS_FILE would be a more descriptive and concise wording given that it only contains credentials ? Unless the file is going to be used for other dynamically reloadable security properties, will that be the case ?\nIf we agree that CREDENTIALS is the way to go, then probably a lot of other references to security etc will need to be adjusted as well ...", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401751542", "createdAt": "2020-04-01T16:34:10Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,13 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_SECURITY_FILE_PATH`: Elasticsearch security properties file path, which defaults to empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk1ODcxNg==", "bodyText": "Make sense. The file doesn't intend to load any other items except for username/password. I will update the term then fix all of the references.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401958716", "createdAt": "2020-04-01T22:59:29Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,13 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_SECURITY_FILE_PATH`: Elasticsearch security properties file path, which defaults to empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MTU0Mg=="}, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NDI5MA==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402064290", "createdAt": "2020-04-02T05:45:19Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,13 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_SECURITY_FILE_PATH`: Elasticsearch security properties file path, which defaults to empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1MTU0Mg=="}, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU2MjgzOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjozODozNVrOF_JJBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0NToyOVrOF_cDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NDM3NA==", "bodyText": "Can you make the link <a href ...", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401754374", "createdAt": "2020-04-01T16:38:35Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,24 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n  * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NDMzNA==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402064334", "createdAt": "2020-04-02T05:45:29Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,24 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n  * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1NDM3NA=="}, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU5MzkxOnYy", "diffSide": "RIGHT", "path": "zipkin-server/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0Njo0MlrOF_Jc8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0ODowOVrOF_cGqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTQ3Mw==", "bodyText": "The main feature of this file is that it's reloaded periodically , can we mention that here ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401759473", "createdAt": "2020-04-01T16:46:42Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,13 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_SECURITY_FILE_PATH`: Elasticsearch security properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTA2Ng==", "bodyText": "Add the \"periodically load\"", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402065066", "createdAt": "2020-04-02T05:48:09Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,13 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_SECURITY_FILE_PATH`: Elasticsearch security properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTQ3Mw=="}, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTU5NTM1OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo0NzowN1rOF_Jd7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo1MDoxMVrOF_cJBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTcyNg==", "bodyText": "href same as above", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401759726", "createdAt": "2020-04-01T16:47:07Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTY3MA==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402065670", "createdAt": "2020-04-02T05:50:11Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials https://www.elastic.co/guide/en/x-pack/current/how-security-works.html", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc1OTcyNg=="}, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTY1MDYxOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicSecurityFileLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNjo1OTozN1rOF_KABw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNTo0OTo1OVrOF_cIyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2ODQ1NQ==", "bodyText": "maybe an expression * 1000 here does that bring any extra safety ? Can the user specify 0.5 as value, and if yes what would happen ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r401768455", "createdAt": "2020-04-01T16:59:37Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicSecurityFileLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from security file.\n+ */\n+class DynamicSecurityFileLoader {\n+  static final String SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.security-file-refresh-interval-in-second\";\n+\n+  private final String securityFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicSecurityFileLoader(BasicCredentials basicCredentials, String securityFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.securityFilePath = securityFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND +\"}000\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA2NTYwOA==", "bodyText": "It will cause a \"NumberFormatException\" because the type of this param is Integer. I have added *1000 to the setter of it.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402065608", "createdAt": "2020-04-02T05:49:59Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicSecurityFileLoader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from security file.\n+ */\n+class DynamicSecurityFileLoader {\n+  static final String SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.security-file-refresh-interval-in-second\";\n+\n+  private final String securityFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicSecurityFileLoader(BasicCredentials basicCredentials, String securityFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.securityFilePath = securityFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + SECURITY_FILE_REFRESH_INTERVAL_IN_SECOND +\"}000\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2ODQ1NQ=="}, "originalCommit": {"oid": "251b1ab3e507697633135a88cd8a2a437a51bc5c"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTg5NjA3OnYy", "diffSide": "RIGHT", "path": "zipkin-server/README.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoxNzowMVrOF_y8HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1NzozMFrOGAUTkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzOTE5Ng==", "bodyText": "Looking at other time related configuration options SELF_TRACING_FLUSH_INTERVAL, ES_TIMEOUT , QUERY_LOOKBACK etc we don't specify the time unit it seems. Would it be ok for you to leave it out here as well, so ES_CREDENTIALS_FILE_REFRESH_INTERVAL ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402439196", "createdAt": "2020-04-02T16:17:01Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.\n+    * `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND`: Credentials file refresh interval in seconds", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTI0MQ==", "bodyText": "this is also chatty ES_CREDENTIALS_FILE_INTERVAL we don't add units anywhere", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402669241", "createdAt": "2020-04-03T00:22:05Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.\n+    * `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND`: Credentials file refresh interval in seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzOTE5Ng=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTcyNQ==", "bodyText": "change my mind. I like @jorgheymans as it matches conventionally SELF_TRACING_FLUSH_INTERVAL", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402669725", "createdAt": "2020-04-03T00:23:51Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.\n+    * `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND`: Credentials file refresh interval in seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzOTE5Ng=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDU4OA==", "bodyText": "actually ES_CREDENTIALS_REFRESH_INTERVAL is fine as there's no ambiguity about the target of the refresh", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402670588", "createdAt": "2020-04-03T00:26:56Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.\n+    * `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND`: Credentials file refresh interval in seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzOTE5Ng=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NTg3NQ==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402985875", "createdAt": "2020-04-03T12:57:30Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.\n+    * `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND`: Credentials file refresh interval in seconds", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQzOTE5Ng=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTkwOTQwOnYy", "diffSide": "RIGHT", "path": "zipkin-server/README.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyMDoxN1rOF_zEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzowNzowOVrOGBGdjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTM1MA==", "bodyText": "is the requirement for a .properties file suffix a Spring restriction ? If not, any special reason to insist on it ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402441350", "createdAt": "2020-04-02T16:20:17Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk2NjQ4MA==", "bodyText": "It's not a Spring restriction, but a java Properties file instead. I think it's a conventional way to append \".properties\" to the file name. It prompts the format of the file.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402966480", "createdAt": "2020-04-03T12:23:10Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTM1MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMTMzNQ==", "bodyText": "I feel we should rather not enforce the extension of the credentials file, sites may have naming conventions of their own for such files.  @anuraaga any opinion here ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403211335", "createdAt": "2020-04-03T18:13:00Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTM1MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDU5Mg==", "bodyText": "Agree there isn't a real need to enforce the extension", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420592", "createdAt": "2020-04-04T03:57:43Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTM1MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgwNzYyOQ==", "bodyText": "done.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403807629", "createdAt": "2020-04-06T03:07:09Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0MTM1MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTk0MDg2OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjoyODoxMFrOF_zYmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1ODoxMFrOGAUU9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjQ5MQ==", "bodyText": "throwing the IOException can get quite spammy if the refresh interval is small. Should we consider logging the stacktrace only once, and then suppressing it for further invocations ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402446491", "createdAt": "2020-04-02T16:28:10Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.credentials-file-refresh-interval-in-second\";\n+\n+  private final String credentialsFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFilePath = credentialsFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n+  void load() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDA2Nw==", "bodyText": "agree let's not throw and instead log. log once is ok or rate-limited if want to use something like armeria's rate limited logging (not sure it is a generally available api)", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402670067", "createdAt": "2020-04-03T00:24:56Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.credentials-file-refresh-interval-in-second\";\n+\n+  private final String credentialsFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFilePath = credentialsFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n+  void load() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjQ5MQ=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NjIyOA==", "bodyText": "I opt to guava RateLimiter to log an exception every 10 seconds.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402986228", "createdAt": "2020-04-03T12:58:10Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n+    \"zipkin.storage.elasticsearch.credentials-file-refresh-interval-in-second\";\n+\n+  private final String credentialsFilePath;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFilePath) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFilePath = credentialsFilePath;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n+  void load() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ0NjQ5MQ=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjAwODgyOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo0NDo1MFrOF_0EFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1ODozNFrOGAUWIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzYyMA==", "bodyText": "... to every request per. incomplete sentence ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402457620", "createdAt": "2020-04-02T16:44:50Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,28 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request per.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NjUzMA==", "bodyText": "drop \"per\"", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402986530", "createdAt": "2020-04-03T12:58:34Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,28 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Optional;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request per.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ1NzYyMA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjAzNDYxOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1MDo1OVrOF_0TvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1OToyNFrOGAUYJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTYyOQ==", "bodyText": "nit: i would call this method just basicCredentials since at this point they are not dynamic per se, they become dynamic when you hook them up to the DynamicCredentialsFileLoader", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402461629", "createdAt": "2020-04-02T16:50:59Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +144,21 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4NzA0Ng==", "bodyText": "make sense. have updated the method name", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402987046", "createdAt": "2020-04-03T12:59:24Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +144,21 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials dynamicElasticsearchBasicCredentials(ZipkinElasticsearchStorageProperties es) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2MTYyOQ=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjA1NDA1OnYy", "diffSide": "RIGHT", "path": "zipkin-server/README.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNjo1NTo0MVrOF_0fsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzoyMzoyOVrOGBGp4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDY5MA==", "bodyText": "the wording here is not clear to me, i can have a go at it and come up with more clearer wording tomorrow if you don't mind.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402464690", "createdAt": "2020-04-02T16:55:41Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODU4MQ==", "bodyText": "Thanks, jorgheymans. I'm glad to see that you would like to polish or rewrite the wording, feel free to do it.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402988581", "createdAt": "2020-04-03T13:02:12Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDY5MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MTU4MQ==", "bodyText": "Suggestion (somehow the quoting gets lost but you get the idea)\nES_CREDENTIALS_FILE: The location of a file containing Elasticsearch basic authentication credentials, as properties. The username property is zipkin.storage.elasticsearch.username, password zipkin.storage.elasticsearch.password. This file is reloaded periodically, using ES_CREDENTIALS_REFRESH_INTERVAL as the interval. This parameter takes precedence over ES_USERNAME and ES_PASSWORD when specified.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403241581", "createdAt": "2020-04-03T18:49:50Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDY5MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMDc4NA==", "bodyText": "Updated with quotes, thanks a lot.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403810784", "createdAt": "2020-04-06T03:23:29Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty\n+                               string. The suffix of file should be `.properties`. The keys of\n+                               `username` and `password` are `zipkin.storage.elasticsearch.username`\n+                               and `zipkin.storage.elasticsearch.password` respectively.\n+                               Before the credentials are loaded from the file, `ES_USERNAME` and\n+                               `ES_PASSWORD` is in place. If they are empty, basic authentication\n+                               is disable temporarily. This file is reloaded periodically, which uses\n+                               `ES_CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND` as the interval.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjQ2NDY5MA=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMzNTQwOnYy", "diffSide": "RIGHT", "path": "zipkin-server/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyMTowOVrOGAA9yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowMjoyMVrOGAUeiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTAwMg==", "bodyText": "ES_CREDENTIALS_FILE_PATH is chatty, please use ES_CREDENTIALS_FILE", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402669002", "createdAt": "2020-04-03T00:21:09Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODY4MQ==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402988681", "createdAt": "2020-04-03T13:02:21Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,16 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE_PATH`: Elasticsearch credentails properties file path, which defaults to empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2OTAwMg=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzM0Mzg3OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoyNToyOVrOGABChQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMzowMjozM1rOGAUfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDIxMw==", "bodyText": "credentials-file", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402670213", "createdAt": "2020-04-03T00:25:29Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -42,18 +42,24 @@\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import zipkin2.elasticsearch.ElasticsearchStorage;\n import zipkin2.server.internal.ConditionalOnSelfTracing;\n import zipkin2.storage.StorageComponent;\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n+@EnableScheduling\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";\n+  static final String PASSWORD_PROP = \"zipkin.storage.elasticsearch.password\";\n+  static final String CREDENTIALS_FILE_PATH_PROP =\n+    \"zipkin.storage.elasticsearch.credentials-file-path\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4ODgyNQ==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r402988825", "createdAt": "2020-04-03T13:02:33Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -42,18 +42,24 @@\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import zipkin2.elasticsearch.ElasticsearchStorage;\n import zipkin2.server.internal.ConditionalOnSelfTracing;\n import zipkin2.storage.StorageComponent;\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n+@EnableScheduling\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";\n+  static final String PASSWORD_PROP = \"zipkin.storage.elasticsearch.password\";\n+  static final String CREDENTIALS_FILE_PATH_PROP =\n+    \"zipkin.storage.elasticsearch.credentials-file-path\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY3MDIxMw=="}, "originalCommit": {"oid": "eb945a4980025f43c24de52a4f84950708e52704"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTEyNjI4OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo0NTowMVrOGAjt9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNDo1NzoyN1rOGBb3yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ==", "bodyText": "First time guava is used in zipkin-server, i think it's a no-go to use there but we don't have anything enforcing it. @adriancole can you confirm ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403238391", "createdAt": "2020-04-03T18:45:01Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM5ODkwMw==", "bodyText": "yeah no need for a dependency to do this. If I understand correctly, this is a single-thread that's updating things (same thread). you can implement an interval without any dep or fancy using System.nanoTime and subtraction.\nMyRunnable {\n  final SameThreadRateLimiter logLimiter = new SameThreadRateLimiter(5);\n\n  public void run(){\n    try {\n         // do fancy thing\n    } catch (Throwable e) {\n       Call.propagateIfFatal(e);\n       if (logLimiter.pass()) {\n          // LOG it!\n       }\n    }\n  }\n\nSameThreadRateLimiter {\n  static final long NANOS_PER_SECOND = TimeUnit.SECONDS.toNanos(1);\n  final int intervalSeconds;\n  // pass the first time.\n  // we can't use zero or negative bc nanoTime can be negative\n  // just use now as it is simpler. first time will be at or after now.\n  long nextPass = System.nanoTime();\n\n  SameThreadRateLimiter(int intervalSeconds) {\n    this.intervalSeconds = intervalSeconds;\n  }\n\n  boolean pass() {\n    return shouldPass(System.nanoTime());\n  }\n\n  static long nextPass(long now) {\n    return now + intervalSeconds * NANOS_PER_SECOND;\n  }\n\n  static boolean shouldPass(long now) {\n    long nanosUntilPass = -(now - nextPass); // because nanoTime can be negative\n    if (nanosUntilPass <= 0) {\n      nextPass = nextPass(now);\n      return true;\n    }\n    return false;\n  }\n}\nlogic simplified due to same thread from this\nhttps://github.com/openzipkin/brave/blob/master/brave/src/main/java/brave/sampler/RateLimitingSampler.java\nif you use this, please add unit test on static method, which you can mostly copy paste  from\nhttps://github.com/openzipkin/brave/blob/master/brave/src/test/java/brave/sampler/RateLimitingSamplerTest.java", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403398903", "createdAt": "2020-04-04T00:49:38Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ=="}, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTE2NA==", "bodyText": "Is this to reduce logging if a user sets a really small refresh interval? It seems like overkill especially since most will be in the seconds, how about just logging without the limit?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403421164", "createdAt": "2020-04-04T04:03:38Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ=="}, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE1ODQwOQ==", "bodyText": "I switch to log error without any rate limit.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404158409", "createdAt": "2020-04-06T14:57:27Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzODM5MQ=="}, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTEzNzMzOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo0Njo0MlrOGAjzdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMzoyNjoyOFrOGBGsCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzOTc5OA==", "bodyText": "CREDENTIALS_REFRESH_INTERVAL to align with above ?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403239798", "createdAt": "2020-04-03T18:46:42Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMTMzNw==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403811337", "createdAt": "2020-04-06T03:26:28Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIzOTc5OA=="}, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI4NTYwOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMjoxNVrOGAtqMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMjoxNVrOGAtqMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Load username/password from credentials file.\n          \n          \n            \n             * Loads username/password from credentials file.\n          \n          \n            \n             *\n          \n          \n            \n             * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n          \n          \n            \n             * This means that spans will drop and api failures will occur for any time remaining in the refresh\n          \n          \n            \n             * interval. A future version can tighten this by also using poll events.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401267", "createdAt": "2020-04-04T01:02:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Load username/password from credentials file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7232548532361fd4d97ee0902bc8e44f907cf42d"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI4Njk3OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzowN1rOGAtq2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzowN1rOGAtq2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTQzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =\n          \n          \n            \n              static final String CREDENTIALS_REFRESH_INTERVAL =", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401432", "createdAt": "2020-04-04T01:03:07Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111e9d410aba8b7044a5c53e812c896abbc82bf0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI4NzQ2OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzozMFrOGAtrGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzozMFrOGAtrGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n          \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401497", "createdAt": "2020-04-04T01:03:30Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI4Nzg1OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzo1MlrOGAtrTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowMzo1MlrOGAtrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTU0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")\n          \n          \n            \n              @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401548", "createdAt": "2020-04-04T01:03:52Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_FILE_REFRESH_INTERVAL_IN_SECOND + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0085192a312bb86b50f49819da1cfe09efcbfda2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI5MDg2OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNTo0MlrOGAtstA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowMTowNFrOGBcDOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTkwOA==", "bodyText": "I think this is milliseconds.. can you lookup syntax to make this seconds? maybe just adding 's' after", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403401908", "createdAt": "2020-04-04T01:05:42Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMjM4OA==", "bodyText": "From https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/scheduling/annotation/Scheduled.html#fixedRateString--, the period is in milliseconds.\nIn my first commit, I append 000 to convert seconds to milliseconds. Does it make sense to you?", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403812388", "createdAt": "2020-04-06T03:32:06Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTkwOA=="}, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2MTMzOA==", "bodyText": "Appending 000 looks like not clear to me. So I put a *1000 into its setter.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404161338", "createdAt": "2020-04-06T15:01:04Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMTkwOA=="}, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI5MTkxOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjoxNlrOGAttMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjoxNlrOGAttMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjAzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   credentials-refresh-interval: 5000\n          \n          \n            \n             *   credentials-refresh-interval: 5", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402033", "createdAt": "2020-04-04T01:06:16Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -35,6 +35,8 @@\n  *   index-replicas: 1\n  *   username: username\n  *   password: password\n+ *   credentials-file: credentialsFile\n+ *   credentials-refresh-interval: 5000", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI5MzM3OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjo1OFrOGAtt3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNjo1OFrOGAtt3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjIwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Credentials refresh interval(in milliseconds) */\n          \n          \n            \n              /** Credentials refresh interval (in seconds) */", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402205", "createdAt": "2020-04-04T01:06:58Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval(in milliseconds) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI5MzQ3OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzoxMlrOGAtt7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzoxMlrOGAtt7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Integer credentialsRefreshInterval = 5_000;\n          \n          \n            \n              private Integer credentialsRefreshInterval = 5;", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402220", "createdAt": "2020-04-04T01:07:12Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval(in milliseconds) */\n+  private Integer credentialsRefreshInterval = 5_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI5NTA5OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/resources/zipkin-server-shared.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzo0OVrOGAtuoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowNzo0OVrOGAtuoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjQwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  credentials-refresh-interval: ${ES_CREDENTIALS_REFRESH_INTERVAL:5000}\n          \n          \n            \n                  credentials-refresh-interval: ${ES_CREDENTIALS_REFRESH_INTERVAL:5}", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402400", "createdAt": "2020-04-04T01:07:49Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/resources/zipkin-server-shared.yml", "diffHunk": "@@ -155,6 +155,8 @@ zipkin:\n       index-replicas: ${ES_INDEX_REPLICAS:1}\n       username: ${ES_USERNAME:}\n       password: ${ES_PASSWORD:}\n+      credentials-file: ${ES_CREDENTIALS_FILE:}\n+      credentials-refresh-interval: ${ES_CREDENTIALS_REFRESH_INTERVAL:5000}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI5NTM5OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowODowN1rOGAtuxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowODowN1rOGAtuxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjQzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"zipkin.storage.elasticsearch.credentials-refresh-interval=3000\",\n          \n          \n            \n                  \"zipkin.storage.elasticsearch.credentials-refresh-interval=3\",", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402439", "createdAt": "2020-04-04T01:08:07Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+\n+import static java.time.Duration.ofSeconds;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;\n+import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n+\n+class ITElasticsearchDynamicCredentials {\n+\n+  @RegisterExtension static MockWebServerExtension server = new MockWebServerExtension() {\n+    @Override protected void configureServer(ServerBuilder sb) throws Exception {\n+      sb.https(0);\n+      Ssl ssl = new Ssl();\n+      ssl.setKeyStore(\"classpath:keystore.jks\");\n+      ssl.setKeyStorePassword(\"password\");\n+      ssl.setTrustStore(\"classpath:keystore.jks\");\n+      ssl.setTrustStorePassword(\"password\");\n+\n+      final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);\n+      final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);\n+      sb.tls(keyManagerFactory)\n+        .tlsCustomizer(sslContextBuilder -> {\n+          sslContextBuilder.keyManager(keyManagerFactory);\n+          sslContextBuilder.trustManager(trustManagerFactory);\n+        });\n+    }\n+  };\n+\n+  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+  ElasticsearchStorage storage;\n+  File credentialsFile;\n+\n+  @BeforeEach void init() throws IOException {\n+    credentialsFile = File.createTempFile(\"zipkin-server-security\", \".properties\");\n+    Properties props = new Properties();\n+    props.put(USERNAME_PROP, \"foo\");\n+    props.put(PASSWORD_PROP, \"bar\");\n+    try (FileOutputStream os = new FileOutputStream(credentialsFile)) {\n+      props.store(os, \"\");\n+    }\n+    TestPropertyValues.of(\n+      \"spring.config.name=zipkin-server\",\n+      \"zipkin.storage.type:elasticsearch\",\n+      \"zipkin.storage.elasticsearch.hosts:https://localhost:\" + server.httpsPort(),\n+      \"zipkin.storage.elasticsearch.credentials-file=\" + credentialsFile.getAbsolutePath(),\n+      \"zipkin.storage.elasticsearch.credentials-refresh-interval=3000\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjI5Njg5OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowOToyM1rOGAtvew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTowOToyM1rOGAtvew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwMjYxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Convert second to millisecond", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403402619", "createdAt": "2020-04-04T01:09:23Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert second to millisecond", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18207ead486cdc560a24f9be5e3622b6a93e4dac"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjMxODc3OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMTozMTo0OVrOGAt6Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNzo0MDo1N1rOGBi09w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTQwNw==", "bodyText": "actually if we use a normal single thread scheduled executor and make this type closeable, it should be less error prone on things like this. Spring automatically closes beans on shutdown.\nAlso, this as a bean allows something to synchronously call load auth fail. If we don't do this now, move it to a comment.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403405407", "createdAt": "2020-04-04T01:31:49Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI3MjM3NQ==", "bodyText": "added this note in the type doc", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404272375", "createdAt": "2020-04-06T17:40:57Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+  static final String CREDENTIALS_REFRESH_INTERVAL =\n+    \"zipkin.storage.elasticsearch.credentials-refresh-interval\";\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  // Log an exception every 10 seconds.\n+  private final RateLimiter rateLimiter = RateLimiter.create(0.1);\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  @Scheduled(fixedRateString = \"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQwNTQwNw=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjQ0NTkyOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwMzo1OToxNlrOGAu2dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowNDo1M1rOGBcOhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA==", "bodyText": "Let's just make this @Nullable instead of using Optional", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420790", "createdAt": "2020-04-04T03:59:16Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n+ */\n+final class BasicCredentials {\n+\n+  private volatile String basicCredentials;\n+\n+  BasicCredentials() {\n+\n+  }\n+\n+  BasicCredentials(String username, String password) {\n+    updateCredentials(username, password);\n+  }\n+\n+  void updateCredentials(String username, String password) {\n+    String token = username + ':' + password;\n+    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+  }\n+\n+  Optional<String> getCredentials() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxMzU1MA==", "bodyText": "If it's a convention of nullable return value among Zipkin community, I would like to follow it. Replacing Null with Optional is from my personal practice.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403813550", "createdAt": "2020-04-06T03:38:06Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n+ */\n+final class BasicCredentials {\n+\n+  private volatile String basicCredentials;\n+\n+  BasicCredentials() {\n+\n+  }\n+\n+  BasicCredentials(String username, String password) {\n+    updateCredentials(username, password);\n+  }\n+\n+  void updateCredentials(String username, String password) {\n+    String token = username + ':' + password;\n+    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+  }\n+\n+  Optional<String> getCredentials() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzgxODI3NQ==", "bodyText": "Yup - we basically only use Optional with bean parameters to support spring but prefer nullable in general.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403818275", "createdAt": "2020-04-06T04:01:25Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n+ */\n+final class BasicCredentials {\n+\n+  private volatile String basicCredentials;\n+\n+  BasicCredentials() {\n+\n+  }\n+\n+  BasicCredentials(String username, String password) {\n+    updateCredentials(username, password);\n+  }\n+\n+  void updateCredentials(String username, String password) {\n+    String token = username + ':' + password;\n+    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+  }\n+\n+  Optional<String> getCredentials() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2NDIyOA==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404164228", "createdAt": "2020-04-06T15:04:53Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicCredentials.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.util.Base64;\n+import java.util.Optional;\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+/**\n+ * Generate Elasticsearch basic user credentials.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n+ */\n+final class BasicCredentials {\n+\n+  private volatile String basicCredentials;\n+\n+  BasicCredentials() {\n+\n+  }\n+\n+  BasicCredentials(String username, String password) {\n+    updateCredentials(username, password);\n+  }\n+\n+  void updateCredentials(String username, String password) {\n+    String token = username + ':' + password;\n+    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+  }\n+\n+  Optional<String> getCredentials() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDc5MA=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjQ0Njk1OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNDowMTowM1rOGAu28w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjoxNjoyMlrOGAvhmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDkxNQ==", "bodyText": "I don't think we need this note. This is using blocking I/O on a separate thread from the server event loop so shouldn't really effect the API.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403420915", "createdAt": "2020-04-04T04:01:03Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyNTQ1MA==", "bodyText": "the note is mostly about \"without poll events\" meaning there's no file change notification. I agree the \"blocking I/O\" word should be removed as it confuses.. I meant to say \"not nio\"? like old school file apis.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403425450", "createdAt": "2020-04-04T04:52:12Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDkxNQ=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzMTgzMw==", "bodyText": "Ah this is if the creds become invalidated in the middle of an interval, not about event loop. Yeah blocking tricked me. Because this doesn't use FileWatcher is probably clear to any Java developer", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403431833", "createdAt": "2020-04-04T06:16:22Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMDkxNQ=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjQ1MjM5OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNDowNzoxNFrOGAu5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjoxMzo0NlrOGAvg0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA==", "bodyText": "I think we can use Duration to support any type of interval like 5s 1m", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403421548", "createdAt": "2020-04-04T04:07:14Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,23 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyNTY3Nw==", "bodyText": "lets not. seconds is important. if we allow other units, it will invalidate some things, like what is reasonable (ex millis is not)", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403425677", "createdAt": "2020-04-04T04:54:44Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,23 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyNTc4MA==", "bodyText": "when this switched to not use poll events, a tradeoff to using old school i/o was to not spin, and seconds gives us that. I know there are a lot of comments so easy to get lost in them", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403425780", "createdAt": "2020-04-04T04:56:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,23 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzMTYzNA==", "bodyText": "Makes sense thanks for the context.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403431634", "createdAt": "2020-04-04T06:13:46Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,23 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQyMTU0OA=="}, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMjU1ODY1OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjo0NDowMlrOGAvqRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNFQwNjo0NDowMlrOGAvqRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQzNDA1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.\n          \n          \n            \n             * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r403434055", "createdAt": "2020-04-04T06:44:02Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.google.common.util.concurrent.RateLimiter;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation currently uses blocking I/O loop without poll events.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "781d24328f448baf8f340680050b7d2d81860eb9"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzg4NjA2OnYy", "diffSide": "RIGHT", "path": "zipkin-server/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowMjoyNlrOGBcHEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTowODoxM1rOGBcX3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2MjMyMg==", "bodyText": "zipkin-server should stay 1.8, as directed from the parent pom ...", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404162322", "createdAt": "2020-04-06T15:02:26Z", "author": {"login": "jorgheymans"}, "path": "zipkin-server/pom.xml", "diffHunk": "@@ -609,6 +609,14 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>9</source>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ccce292465f3a3453a88de077c007b60b5a8f3d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2NjYyMQ==", "bodyText": "sorry for pushing it by mistake", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404166621", "createdAt": "2020-04-06T15:08:13Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/pom.xml", "diffHunk": "@@ -609,6 +609,14 @@\n           </execution>\n         </executions>\n       </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>9</source>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE2MjMyMg=="}, "originalCommit": {"oid": "9ccce292465f3a3453a88de077c007b60b5a8f3d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDMyODUyOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTozODoxMFrOGBzkvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMzozMTo1MFrOGCDsMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0Njc0OA==", "bodyText": "this is a surprising hack. please change the place where it is used instead as it doesn't make sense for a property to be manipulated like this. The scheduled expression might accept seconds expression like s.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404546748", "createdAt": "2020-04-07T05:38:10Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert seconds to milliseconds\n+    this.credentialsRefreshInterval = credentialsRefreshInterval * 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0NzIwMQ==", "bodyText": "I'm sure someone will very soon undo the use of spring scheduling anyway for a normal executor which is simpler and requires no hacks. I don't like adding tech debt especially when converting to the ideal case only takes a few minutes.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404547201", "createdAt": "2020-04-07T05:39:35Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert seconds to milliseconds\n+    this.credentialsRefreshInterval = credentialsRefreshInterval * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0Njc0OA=="}, "originalCommit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDgxMDgwMQ==", "bodyText": "switch to a ScheduledExecutorService which can be shut down by Spring context.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404810801", "createdAt": "2020-04-07T13:31:50Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -253,6 +262,24 @@ public void setPassword(String password) {\n     this.password = emptyToNull(password);\n   }\n \n+  public String getCredentialsFile() {\n+    return credentialsFile;\n+  }\n+\n+  public void setCredentialsFile(final String credentialsFile) {\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public Integer getCredentialsRefreshInterval() {\n+    return credentialsRefreshInterval;\n+  }\n+\n+  public void setCredentialsRefreshInterval(\n+    Integer credentialsRefreshInterval) {\n+    // Convert seconds to milliseconds\n+    this.credentialsRefreshInterval = credentialsRefreshInterval * 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0Njc0OA=="}, "originalCommit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDc2MTc0OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMzozOVrOGB3srQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODowMzozOVrOGB3srQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYxNDMxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (Objects.nonNull(credentials)) {\n          \n          \n            \n                if (credentials != null) {", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r404614317", "createdAt": "2020-04-07T08:03:39Z", "author": {"login": "anuraaga"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java", "diffHunk": "@@ -19,28 +19,29 @@\n import com.linecorp.armeria.common.HttpHeaderNames;\n import com.linecorp.armeria.common.HttpRequest;\n import com.linecorp.armeria.common.HttpResponse;\n-import java.util.Base64;\n-\n-import static java.nio.charset.StandardCharsets.UTF_8;\n+import java.util.Objects;\n \n /**\n- * Adds basic auth username and password to every request per https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\n+ * Adds basic auth username and password to every request.\n+ *\n+ * <p>Ref: <a href=\"https://www.elastic.co/guide/en/x-pack/current/how-security-works.html\"> How\n+ * Elasticsearch security works</a></p>\n  */\n final class BasicAuthInterceptor extends SimpleDecoratingHttpClient {\n \n-  final String basicCredentials;\n+  final BasicCredentials basicCredentials;\n \n-  BasicAuthInterceptor(HttpClient client, String username, String password) {\n+  BasicAuthInterceptor(HttpClient client, BasicCredentials basicCredentials) {\n     super(client);\n-    if (username == null) throw new NullPointerException(\"username == null\");\n-    if (password == null) throw new NullPointerException(\"password == null\");\n-    String token = username + ':' + password;\n-    basicCredentials = \"Basic \" + Base64.getEncoder().encodeToString(token.getBytes(UTF_8));\n+    this.basicCredentials = basicCredentials;\n   }\n \n   @Override\n   public HttpResponse execute(ClientRequestContext ctx, HttpRequest req) throws Exception {\n-    ctx.addAdditionalRequestHeader(HttpHeaderNames.AUTHORIZATION, basicCredentials);\n+    String credentials = basicCredentials.getCredentials();\n+    if (Objects.nonNull(credentials)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f597b496191dea0f0f807c366a6c9db02626f38"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDMzOTAxOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowOTozM1rOGCahhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozMToxNFrOGCicqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDkwMQ==", "bodyText": "remove the _PROP suffixes as they are inconsistent.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405184901", "createdAt": "2020-04-08T00:09:33Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -48,12 +52,18 @@\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNDczMA==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405314730", "createdAt": "2020-04-08T07:31:14Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -48,12 +52,18 @@\n \n import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n \n-@Configuration(proxyBeanMethods=false)\n+@Configuration(proxyBeanMethods = false)\n @EnableConfigurationProperties(ZipkinElasticsearchStorageProperties.class)\n @ConditionalOnProperty(name = \"zipkin.storage.type\", havingValue = \"elasticsearch\")\n @ConditionalOnMissingBean(StorageComponent.class)\n public class ZipkinElasticsearchStorageConfiguration {\n   static final String QUALIFIER = \"zipkinElasticsearch\";\n+  static final String USERNAME_PROP = \"zipkin.storage.elasticsearch.username\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NDkwMQ=="}, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM0MDE0OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoxMDowNFrOGCaiLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozMToyOFrOGCidHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NTA2OQ==", "bodyText": "failing at startup will help people figure out initialization problems. The logic I wrote above should be fine\nas if the sophistication of a dynamic file loader is file is used, it would be dumb to have an empty password :) calling loader.updateCredentialsFromProperties() once before scheduling will catch\nall these things.\n      DynamicCredentialsFileLoader credentialsLoader = new DynamicCredentialsFileLoader(basicCredentials, credentialsFile);\n       // throw and crashes the server on any setup error.\n      credentialsLoader.updateCredentialsFromProperties();\n      ses.scheduleAtFixedRate(0, credentialsLoader, credentialsRefreshInterval, TimeUnit.SECONDS);", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405185069", "createdAt": "2020-04-08T00:10:04Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +148,28 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials basicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean(destroyMethod=\"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  ScheduledExecutorService dynamicCredentialsScheduledExecutorService(\n+    @Value(\"${\" + CREDENTIALS_FILE_PROP + \"}\") String credentialsFile,\n+    @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n+      new ThreadFactoryBuilder()\n+        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n+        .build());\n+    ses.scheduleAtFixedRate(new DynamicCredentialsFileLoader(basicCredentials, credentialsFile),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNDg0Nw==", "bodyText": "done", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405314847", "createdAt": "2020-04-08T07:31:28Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java", "diffHunk": "@@ -137,6 +148,28 @@ SessionProtocol esSessionProtocol(ZipkinElasticsearchStorageProperties es) {\n     };\n   }\n \n+  @Bean @Qualifier(QUALIFIER) @Conditional(BasicAuthRequired.class)\n+  BasicCredentials basicCredentials(ZipkinElasticsearchStorageProperties es) {\n+    if (isEmpty(es.getUsername()) || isEmpty(es.getPassword())) {\n+      return new BasicCredentials();\n+    }\n+    return new BasicCredentials(es.getUsername(), es.getPassword());\n+  }\n+\n+  @Bean(destroyMethod=\"shutdown\") @Qualifier(QUALIFIER) @Conditional(DynamicRefreshRequired.class)\n+  ScheduledExecutorService dynamicCredentialsScheduledExecutorService(\n+    @Value(\"${\" + CREDENTIALS_FILE_PROP + \"}\") String credentialsFile,\n+    @Value(\"${\" + CREDENTIALS_REFRESH_INTERVAL + \"}\") Integer credentialsRefreshInterval,\n+    @Qualifier(QUALIFIER) BasicCredentials basicCredentials) {\n+    ScheduledExecutorService ses = Executors.newSingleThreadScheduledExecutor(\n+      new ThreadFactoryBuilder()\n+        .setNameFormat(\"LoadElasticSearchCredentials-%d\")\n+        .build());\n+    ses.scheduleAtFixedRate(new DynamicCredentialsFileLoader(basicCredentials, credentialsFile),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4NTA2OQ=="}, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM3NzI2OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDoyOTowMFrOGCa4Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNDo1OVrOGCikUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDczOA==", "bodyText": "this is ok, but better to make a src/test/resources file instead as it is not subject to oddness in windows or other container constraints.\nEx. successCase\n\"zipkin.storage.elasticsearch.credentials-file=\"+pathOfResource(\"/valid-es-credentials.properties\")\n--snip--\n\nString pathOfResource(String resource) {\n  File file = new File(getClass().getClassLoader().getResource(resourceName).getFile());\n  return file.getAbsolutePath();\n}\nTesting bad path is easy as you just use a path that doesnt' exist in ./src/test/resources\nIf you want to test misspelled property names, you only have one more test resource file to make.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405190738", "createdAt": "2020-04-08T00:29:00Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+\n+import static java.time.Duration.ofSeconds;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;\n+import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n+\n+class ITElasticsearchDynamicCredentials {\n+\n+  @RegisterExtension static MockWebServerExtension server = new MockWebServerExtension() {\n+    @Override protected void configureServer(ServerBuilder sb) throws Exception {\n+      sb.https(0);\n+      Ssl ssl = new Ssl();\n+      ssl.setKeyStore(\"classpath:keystore.jks\");\n+      ssl.setKeyStorePassword(\"password\");\n+      ssl.setTrustStore(\"classpath:keystore.jks\");\n+      ssl.setTrustStorePassword(\"password\");\n+\n+      final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);\n+      final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);\n+      sb.tls(keyManagerFactory)\n+        .tlsCustomizer(sslContextBuilder -> {\n+          sslContextBuilder.keyManager(keyManagerFactory);\n+          sslContextBuilder.trustManager(trustManagerFactory);\n+        });\n+    }\n+  };\n+\n+  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+  ElasticsearchStorage storage;\n+  File credentialsFile;\n+\n+  @BeforeEach void init() throws IOException {\n+    credentialsFile = File.createTempFile(\"zipkin-server\", \"credentials\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNjY4OA==", "bodyText": "I have added two files, es-credentials and es-credentials. They are loaded in ZipkinElasticsearchStorageConfigurationTest and ITElasticsearchDynamicCredentials respectively. We can't share a single file between them because the later one will change the content of the file, which may cause the first test failed.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405316688", "createdAt": "2020-04-08T07:34:59Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/test/java/zipkin2/server/internal/elasticsearch/ITElasticsearchDynamicCredentials.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import com.linecorp.armeria.common.AggregatedHttpRequest;\n+import com.linecorp.armeria.server.ServerBuilder;\n+import com.linecorp.armeria.testing.junit.server.mock.MockWebServerExtension;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.Properties;\n+import javax.net.ssl.KeyManagerFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.RegisterExtension;\n+import org.springframework.boot.test.util.TestPropertyValues;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import zipkin2.elasticsearch.ElasticsearchStorage;\n+\n+import static java.time.Duration.ofSeconds;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTimeout;\n+import static zipkin2.elasticsearch.Access.pretendIndexTemplatesExist;\n+import static zipkin2.server.internal.elasticsearch.TestResponses.YELLOW_RESPONSE;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.Ssl;\n+\n+class ITElasticsearchDynamicCredentials {\n+\n+  @RegisterExtension static MockWebServerExtension server = new MockWebServerExtension() {\n+    @Override protected void configureServer(ServerBuilder sb) throws Exception {\n+      sb.https(0);\n+      Ssl ssl = new Ssl();\n+      ssl.setKeyStore(\"classpath:keystore.jks\");\n+      ssl.setKeyStorePassword(\"password\");\n+      ssl.setTrustStore(\"classpath:keystore.jks\");\n+      ssl.setTrustStorePassword(\"password\");\n+\n+      final KeyManagerFactory keyManagerFactory = SslUtil.getKeyManagerFactory(ssl);\n+      final TrustManagerFactory trustManagerFactory = SslUtil.getTrustManagerFactory(ssl);\n+      sb.tls(keyManagerFactory)\n+        .tlsCustomizer(sslContextBuilder -> {\n+          sslContextBuilder.keyManager(keyManagerFactory);\n+          sslContextBuilder.trustManager(trustManagerFactory);\n+        });\n+    }\n+  };\n+\n+  AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext();\n+  ElasticsearchStorage storage;\n+  File credentialsFile;\n+\n+  @BeforeEach void init() throws IOException {\n+    credentialsFile = File.createTempFile(\"zipkin-server\", \"credentials\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MDczOA=="}, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5MTE5OnYy", "diffSide": "RIGHT", "path": "zipkin-server/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozNjo1MlrOGCbAjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozNjo1MlrOGCbAjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjg0NA==", "bodyText": "@hanahmily @anuraaga @jorgheymans  I think we should default to 1 second because without this you can resolve storage failures faster than 5 seconds by simply restarting the server. Slim can restart in less than 1 second, so I think 1 second here is good for slow hosts and more importantly the convenience of not needing\nto automate restarts.\ncc also @jcarres-mdsol\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                     5 seconds.\n          \n          \n            \n                                                     1 second. This is the maximum amount of time spans will drop due to stale\n          \n          \n            \n                                                     credentials. Any errors reading the credentials file occur in logs at this rate.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192844", "createdAt": "2020-04-08T00:36:52Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/README.md", "diffHunk": "@@ -268,6 +268,14 @@ The following apply when `STORAGE_TYPE` is set to `elasticsearch`:\n                            to 0 as it would mean a machine failure results in data loss.\n     * `ES_USERNAME` and `ES_PASSWORD`: Elasticsearch basic authentication, which defaults to empty string.\n                                        Use when X-Pack security (formerly Shield) is in place.\n+    * `ES_CREDENTIALS_FILE`: The location of a file containing Elasticsearch basic authentication\n+                             credentials, as properties. The username property is\n+                             `zipkin.storage.elasticsearch.username`, password `zipkin.storage.elasticsearch.password`.\n+                             This file is reloaded periodically, using `ES_CREDENTIALS_REFRESH_INTERVAL`\n+                             as the interval. This parameter takes precedence over ES_USERNAME and\n+                              ES_PASSWORD when specified.\n+    * `ES_CREDENTIALS_REFRESH_INTERVAL`: Credentials refresh interval in seconds, which defaults to\n+                                         5 seconds.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5MTUzOnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozNzoxNVrOGCbA1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozNzoxNVrOGCbA1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MjkxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   credentials-refresh-interval: 5\n          \n          \n            \n             *   credentials-refresh-interval: 1", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192918", "createdAt": "2020-04-08T00:37:15Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -35,6 +35,8 @@\n  *   index-replicas: 1\n  *   username: username\n  *   password: password\n+ *   credentials-file: credentialsFile\n+ *   credentials-refresh-interval: 5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5MTg2OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozNzoyNVrOGCbBBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDozNzoyNVrOGCbBBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5Mjk2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Integer credentialsRefreshInterval = 5;\n          \n          \n            \n              private Integer credentialsRefreshInterval = 1;", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405192966", "createdAt": "2020-04-08T00:37:25Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java", "diffHunk": "@@ -166,6 +168,13 @@ public void setInterval(Duration interval) {\n   private String username;\n   /** password used for basic auth. Needed when Shield or X-Pack security is enabled */\n   private String password;\n+  /**\n+   * credentialsFile is an absolute path refers to a properties-file used to store username and\n+   * password\n+   */\n+  private String credentialsFile;\n+  /** Credentials refresh interval (in seconds) */\n+  private Integer credentialsRefreshInterval = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDM5ODM3OnYy", "diffSide": "RIGHT", "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDo0MDo0OVrOGCbEug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODowNDo1MFrOGCjmhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzkxNA==", "bodyText": "You've done a ton of feedback work, so I've hopefully saved you some time on some\nerror handling. For example, the first startup should identify common problems like\nmisspelled property names or non-existence of a file.\nCalling updateCredentialsFromProperties() once at startup will do this.\nNote: FileInputStream constructor already checks if the file is valid so you don't\nneed to redo that, unless I'm missing something...\n  @Override public void run() {\n    try {\n      updateCredentialsFromProperties();\n    } catch (Exception e) {\n      LOGGER.error(\"Error loading elasticsearch credentials\", e);\n    }\n  }\n\n  void updateCredentialsFromProperties() throws IOException {\n    try (FileInputStream is = new FileInputStream(credentialsFile)) {\n      properties.load(is);\n    }\n    String username = ensureNotEmptyOrNull(properties, credentialsFile, USERNAME_PROP);\n    String password = ensureNotEmptyOrNull(properties, credentialsFile, PASSWORD_PROP);\n    basicCredentials.updateCredentials(username, password);\n  }\n\n  @Nullable static String ensureNotEmptyOrNull(Properties properties, String fileName, String name) {\n    String value = properties.getProperty(properties);\n    if (value == null) {\n      throw new IllegalStateException(\"no \" + name + \" property in \" + fileName);\n    }\n    value = value.trim();\n    if (\"\".equals(value)) {\n      throw new IllegalStateException(\"empty \" + name + \" property in \" + fileName);\n    }\n    return value;\n  }", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405193914", "createdAt": "2020-04-08T00:40:49Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader implements Runnable {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public void run() {\n+    Properties properties = new Properties();\n+    try {\n+      File file = Paths.get(credentialsFile).toFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNzA1OA==", "bodyText": "Thanks for your sketch, and I applied it to the class.", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405317058", "createdAt": "2020-04-08T07:35:43Z", "author": {"login": "hanahmily"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader implements Runnable {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public void run() {\n+    Properties properties = new Properties();\n+    try {\n+      File file = Paths.get(credentialsFile).toFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzkxNA=="}, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzMzYzOA==", "bodyText": "no probs!", "url": "https://github.com/openzipkin/zipkin/pull/3050#discussion_r405333638", "createdAt": "2020-04-08T08:04:50Z", "author": {"login": "codefromthecrypt"}, "path": "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2015-2020 The OpenZipkin Authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package zipkin2.server.internal.elasticsearch;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.nio.file.Paths;\n+import java.util.Properties;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.annotation.Scheduled;\n+\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.PASSWORD_PROP;\n+import static zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.USERNAME_PROP;\n+\n+/**\n+ * Loads username/password from credentials file.\n+ *\n+ * <p><em>NOTE:</em> This implementation loops instead of using {@link java.nio.file.WatchService}.\n+ * This means that spans will drop and api failures will occur for any time remaining in the refresh\n+ * interval. A future version can tighten this by also using poll events.\n+ */\n+class DynamicCredentialsFileLoader implements Runnable {\n+  static final Logger LOGGER = LoggerFactory.getLogger(DynamicCredentialsFileLoader.class);\n+\n+  private final String credentialsFile;\n+\n+  private final BasicCredentials basicCredentials;\n+\n+  public DynamicCredentialsFileLoader(BasicCredentials basicCredentials,\n+    String credentialsFile) {\n+    this.basicCredentials = basicCredentials;\n+    this.credentialsFile = credentialsFile;\n+  }\n+\n+  public void run() {\n+    Properties properties = new Properties();\n+    try {\n+      File file = Paths.get(credentialsFile).toFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE5MzkxNA=="}, "originalCommit": {"oid": "9e59bed6e9295d412646981dfa1fbee693fcebf9"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1338, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}