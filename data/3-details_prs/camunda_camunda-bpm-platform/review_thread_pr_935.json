{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjQwMDMw", "number": 935, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo1MDozMFrOEdx-EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo1MjoxOFrOEeRoeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjYyODY1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo1MDozMFrOHJJkBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo1MDozMFrOHJJkBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1NTkwOQ==", "bodyText": "I don't like this setter. It is much cleaner if we just get the respective object and then set it.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479355909", "createdAt": "2020-08-28T14:50:30Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java", "diffHunk": "@@ -49,8 +51,14 @@ public void setApplicationServer(ApplicationServer applicationServer) {\n     this.product.internals.applicationServer = applicationServer;\n   }\n \n+  public void setCommands(Map<String, Command> commands) {\n+    this.product.internals.commands = commands;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjY1MTYyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo1NjozNlrOHJJypg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo1NjozNlrOHJJypg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1OTY1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super();", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479359654", "createdAt": "2020-08-28T14:56:36Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);\n+\n+  public CommandCounter(String name) {\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgxODExOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0NDowN1rOHJsYwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0NDowN1rOHJsYwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNjQ2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public long getAndClear() {\n          \n          \n            \n                return count.getAndSet(0);\n          \n          \n            \n              }", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479926466", "createdAt": "2020-08-31T06:44:07Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);\n+\n+  public CommandCounter(String name) {\n+    super();\n+    this.name = name;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+\n+  public void mark() {\n+    count.incrementAndGet();\n+  }\n+\n+  public long getAndClear() {\n+    return count.getAndSet(0);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMDgzMzI3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0Njo0M1rOHJsg-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNjo0Njo0M1rOHJsg-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyODU3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CommandCounter counter = commands.get(name);\n          \n          \n            \n                if (counter == null) {\n          \n          \n            \n                  counter = new CommandCounter(name);\n          \n          \n            \n                  counter.mark();\n          \n          \n            \n                  commands.put(name, counter);\n          \n          \n            \n                } else {\n          \n          \n            \n                  counter.mark();\n          \n          \n            \n                }\n          \n          \n            \n                CommandCounter counter = commands.get(name);\n          \n          \n            \n                if (counter == null) {\n          \n          \n            \n                  counter = new CommandCounter(name);\n          \n          \n            \n                  commands.put(name, counter);\n          \n          \n            \n                }\n          \n          \n            \n                \n          \n          \n            \n                counter.mark();", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479928570", "createdAt": "2020-08-31T06:46:43Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java", "diffHunk": "@@ -37,4 +37,20 @@ public synchronized void setApplicationServer(ApplicationServer applicationServe\n   public synchronized void setApplicationServer(String applicationServerVersion) {\n     this.applicationServer = new ApplicationServer(applicationServerVersion);\n   }\n+\n+  public Map<String, CommandCounter> getCommands() {\n+    return commands;\n+  }\n+\n+  public synchronized void markOccurrence(String name) {\n+    CommandCounter counter = commands.get(name);\n+    if (counter == null) {\n+      counter = new CommandCounter(name);\n+      counter.mark();\n+      commands.put(name, counter);\n+    } else {\n+      counter.mark();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTgxNjI0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo1MjoxOFrOHJ1sNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo1MjoxOFrOHJ1sNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3ODkwMw==", "bodyText": "In the current implementation, we don't need the AtomicLong since TelemetryRegistry#markOccurrence is synchronized.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r480078903", "createdAt": "2020-08-31T11:52:18Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4530, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}