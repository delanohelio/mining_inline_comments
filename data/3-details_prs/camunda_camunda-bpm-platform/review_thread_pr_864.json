{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODM5ODU0", "number": 864, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjowNTozMVrOEJA3tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjowNTozMVrOEJA3tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODg2OTAzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/BootstrapEngineCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjowNTozMVrOGpUwBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMToyMjozMFrOGpdTLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NDc3Mw==", "bodyText": "I would suggest to have a constant for \"installationId.lock\" as well.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/864#discussion_r445984773", "createdAt": "2020-06-26T06:05:31Z", "author": {"login": "mboskamp"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/BootstrapEngineCommand.java", "diffHunk": "@@ -129,4 +133,50 @@ protected void createTelemetryProperty(CommandContext commandContext) {\n     commandContext.getPropertyManager().insert(property);\n     LOG.creatingTelemetryPropertyInDatabase(telemetryEnabled);\n   }\n+\n+  public void initializeInstallationId(CommandContext commandContext) {\n+    checkInstallationIdLockExists(commandContext);\n+\n+    String databaseInstallationId = databaseInstallationId(commandContext);\n+\n+    if (databaseInstallationId == null || databaseInstallationId.isEmpty()) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForInstallationId();\n+      databaseInstallationId = databaseInstallationId(commandContext);\n+\n+      if (databaseInstallationId == null || databaseInstallationId.isEmpty()) {\n+        LOG.noInstallationIdPropertyFound();\n+        createInstallationProperty(commandContext);\n+      }\n+    } else {\n+      LOG.installationIdPropertyFound(databaseInstallationId);\n+      commandContext.getProcessEngineConfiguration().setInstallationId(databaseInstallationId);\n+    }\n+  }\n+\n+  protected void createInstallationProperty(CommandContext commandContext) {\n+    String installationId = UUID.randomUUID().toString();\n+    PropertyEntity property = new PropertyEntity(INSTALLATION_PROPERTY_NAME, installationId);\n+    commandContext.getPropertyManager().insert(property);\n+    LOG.creatingInstallationPropertyInDatabase(property.getValue());\n+    commandContext.getProcessEngineConfiguration().setInstallationId(installationId);\n+  }\n+\n+  protected String databaseInstallationId(CommandContext commandContext) {\n+    try {\n+      PropertyEntity installationIdProperty = commandContext.getPropertyManager().findPropertyById(INSTALLATION_PROPERTY_NAME);\n+      return installationIdProperty != null ? installationIdProperty.getValue() : null;\n+    } catch (Exception e) {\n+      LOG.couldNotSelectInstallationId(e.getMessage());\n+      return null;\n+    }\n+  }\n+\n+  protected void checkInstallationIdLockExists(CommandContext commandContext) {\n+    PropertyEntity installationIdProperty = commandContext.getPropertyManager().findPropertyById(\"installationId.lock\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ee17647d1de6d5a3cba06174b3e9d6a705f38f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEyNDg0Ng==", "bodyText": "I prefer to do it in a separate ticket as it seems that it will be better to have a central place of the lock names as well as the property names.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/864#discussion_r446124846", "createdAt": "2020-06-26T11:22:30Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/BootstrapEngineCommand.java", "diffHunk": "@@ -129,4 +133,50 @@ protected void createTelemetryProperty(CommandContext commandContext) {\n     commandContext.getPropertyManager().insert(property);\n     LOG.creatingTelemetryPropertyInDatabase(telemetryEnabled);\n   }\n+\n+  public void initializeInstallationId(CommandContext commandContext) {\n+    checkInstallationIdLockExists(commandContext);\n+\n+    String databaseInstallationId = databaseInstallationId(commandContext);\n+\n+    if (databaseInstallationId == null || databaseInstallationId.isEmpty()) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForInstallationId();\n+      databaseInstallationId = databaseInstallationId(commandContext);\n+\n+      if (databaseInstallationId == null || databaseInstallationId.isEmpty()) {\n+        LOG.noInstallationIdPropertyFound();\n+        createInstallationProperty(commandContext);\n+      }\n+    } else {\n+      LOG.installationIdPropertyFound(databaseInstallationId);\n+      commandContext.getProcessEngineConfiguration().setInstallationId(databaseInstallationId);\n+    }\n+  }\n+\n+  protected void createInstallationProperty(CommandContext commandContext) {\n+    String installationId = UUID.randomUUID().toString();\n+    PropertyEntity property = new PropertyEntity(INSTALLATION_PROPERTY_NAME, installationId);\n+    commandContext.getPropertyManager().insert(property);\n+    LOG.creatingInstallationPropertyInDatabase(property.getValue());\n+    commandContext.getProcessEngineConfiguration().setInstallationId(installationId);\n+  }\n+\n+  protected String databaseInstallationId(CommandContext commandContext) {\n+    try {\n+      PropertyEntity installationIdProperty = commandContext.getPropertyManager().findPropertyById(INSTALLATION_PROPERTY_NAME);\n+      return installationIdProperty != null ? installationIdProperty.getValue() : null;\n+    } catch (Exception e) {\n+      LOG.couldNotSelectInstallationId(e.getMessage());\n+      return null;\n+    }\n+  }\n+\n+  protected void checkInstallationIdLockExists(CommandContext commandContext) {\n+    PropertyEntity installationIdProperty = commandContext.getPropertyManager().findPropertyById(\"installationId.lock\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk4NDc3Mw=="}, "originalCommit": {"oid": "f9ee17647d1de6d5a3cba06174b3e9d6a705f38f"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}