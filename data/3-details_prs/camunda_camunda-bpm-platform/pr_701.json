{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODE4NjYx", "number": 701, "title": "CAM-11302: add support for two configuration yml files", "bodyText": "", "createdAt": "2020-03-03T08:49:55Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701", "merged": true, "mergeCommit": {"oid": "6738689ac9ec575eb1987343a01c427ab521baa6"}, "closed": true, "closedAt": "2020-03-03T14:42:25Z", "author": {"login": "mboskamp"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ-VtxAH2gAyMzgyODE4NjYxOjZlMmNhMGY1YmE3MDdhYWQ4NGNhZWE1OThiYzY4NmNkMzI2YTAxZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKDYYKAFqTM2ODAzNDU3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6e2ca0f5ba707aad84caea598bc686cd326a01ea", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6e2ca0f5ba707aad84caea598bc686cd326a01ea", "committedDate": "2020-03-03T08:49:14Z", "message": "feat(run): add support for two configuration yml files\n\nRelated to CAM-11302"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/d21413b4dd292ef6e39f49294a1019ff7f1e8cfd", "committedDate": "2020-03-03T09:48:16Z", "message": "feat(run): add integration test for production yml\n\nRelated to CAM-11302"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTI5MTgw", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#pullrequestreview-367929180", "createdAt": "2020-03-03T12:16:22Z", "commit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxNjoyMlrOFxDbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxODo0NFrOFxDf9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MDc5Mg==", "bodyText": "Let's use java.nio.file.Files here.\nThis expects for example an InputStream as source (can be received with #getResourceAsStream from the class loader) and a Path as target (can be build easily by using java.nio.file.Paths#get).", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386980792", "createdAt": "2020-03-03T12:16:22Z", "author": {"login": "tmetzke"}, "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "diffHunk": "@@ -267,27 +270,27 @@ protected static Integer windowsProcessId(Process process) {\n     return null;\n   }\n \n-  private void createTestYml() {\n+  public void createConfigurationYml(String filePath, File source) {\n     try {\n-      File baseYml = new File(SpringBootManagedContainer.class.getClassLoader().getResource(BASE_TEST_APPLICATION_YML).getFile());\n-      File testYml = new File(new File(baseDirectory), APPLICATION_YML_PATH);\n-      Files.copy(baseYml, testYml);\n+      File testYml = new File(new File(baseDirectory), filePath);\n+      Files.copy(source, testYml);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MTE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.error(\"Could not copy default.yml\", e);\n          \n          \n            \n                  log.error(\"Could not create \" + filePath, e);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386981174", "createdAt": "2020-03-03T12:17:11Z", "author": {"login": "tmetzke"}, "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "diffHunk": "@@ -267,27 +270,27 @@ protected static Integer windowsProcessId(Process process) {\n     return null;\n   }\n \n-  private void createTestYml() {\n+  public void createConfigurationYml(String filePath, File source) {\n     try {\n-      File baseYml = new File(SpringBootManagedContainer.class.getClassLoader().getResource(BASE_TEST_APPLICATION_YML).getFile());\n-      File testYml = new File(new File(baseDirectory), APPLICATION_YML_PATH);\n-      Files.copy(baseYml, testYml);\n+      File testYml = new File(new File(baseDirectory), filePath);\n+      Files.copy(source, testYml);\n+      configurationFiles.add(testYml);\n     } catch (IOException e) {\n-      log.error(\"Could not copy application.yml\", e);\n+      log.error(\"Could not copy default.yml\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MTg3OA==", "bodyText": "Do we know what database configuration will be used here now?\nShould we define the in-memory db as well?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386981878", "createdAt": "2020-03-03T12:18:44Z", "author": {"login": "tmetzke"}, "path": "distro/run/qa/src/test/resources/ProductionConfigurationIntegrationTest_production.yml", "diffHunk": "@@ -0,0 +1 @@\n+camunda.bpm.process-engine-name: production", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e07a9b987df1315002d1fc9c81fc09303a5eac0", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/7e07a9b987df1315002d1fc9c81fc09303a5eac0", "committedDate": "2020-03-03T13:57:47Z", "message": "chore(run): Change YAML handling to use nio Paths\n\nRelated to CAM-11302"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDM0NTcw", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#pullrequestreview-368034570", "createdAt": "2020-03-03T14:41:40Z", "commit": {"oid": "7e07a9b987df1315002d1fc9c81fc09303a5eac0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1928, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}