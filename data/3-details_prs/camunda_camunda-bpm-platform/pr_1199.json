{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjM5NzU0", "number": 1199, "title": "feat(openapi): add variable instance endpoint", "bodyText": "Related to CAM-11549", "createdAt": "2020-12-15T13:13:23Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199", "merged": true, "mergeCommit": {"oid": "88501716898036fd858251b5a9bd9b3911514d09"}, "closed": true, "closedAt": "2021-01-05T08:54:44Z", "author": {"login": "yT0n1"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkOUPIgH2gAyNTQwMjM5NzU0OjZmNTYwYzRiODE3ZmUxZGU5ZWQzZmM5ZjQwMDBlYTQzYWE5ODZjZGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdsxkOSgFqTU2MDgzMTI3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6f560c4b817fe1de9ed3fc9f4000ea43aa986cda", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6f560c4b817fe1de9ed3fc9f4000ea43aa986cda", "committedDate": "2020-12-08T18:19:17Z", "message": "feat(openapi): add Variable Instance endpoints\n\nRelated to CAM-11549"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64d9108351d3010ec503e6fe94231de35a378d8b", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/64d9108351d3010ec503e6fe94231de35a378d8b", "committedDate": "2020-12-10T09:06:00Z", "message": "fix minor bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22796e7fd82bd1472a12a38f10727ca66e90a152", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/22796e7fd82bd1472a12a38f10727ca66e90a152", "committedDate": "2020-12-11T09:52:44Z", "message": "add get List"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f0fe54aec2ef109615b4054b86955841a8531da", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/0f0fe54aec2ef109615b4054b86955841a8531da", "committedDate": "2020-12-11T10:28:58Z", "message": "update params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ddc8f0b84e9f0656bbfaf8bba3e93a6e24985c9", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6ddc8f0b84e9f0656bbfaf8bba3e93a6e24985c9", "committedDate": "2020-12-11T10:31:23Z", "message": "update params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c9cf2532624906a0ddfd1a77a85f5dac9311cce", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6c9cf2532624906a0ddfd1a77a85f5dac9311cce", "committedDate": "2020-12-11T13:20:45Z", "message": "Add Post and make parameters sharing better"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0210444c6cf462716be72cd2ca28be8b75f72c9", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/f0210444c6cf462716be72cd2ca28be8b75f72c9", "committedDate": "2020-12-11T13:37:57Z", "message": "fix querydto"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "379c46d294ff6c3401335f15075c37b00d737e2f", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/379c46d294ff6c3401335f15075c37b00d737e2f", "committedDate": "2020-12-11T15:24:06Z", "message": "add count and fix missing id"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a4ceb310f3e576d9d4fdf361dbb331b3ba31d6a", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6a4ceb310f3e576d9d4fdf361dbb331b3ba31d6a", "committedDate": "2020-12-11T15:55:05Z", "message": "Add post count"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c98126bd77c1c16b144a3595fd3060bfa082df", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/02c98126bd77c1c16b144a3595fd3060bfa082df", "committedDate": "2020-12-11T16:55:16Z", "message": "wip /data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9818f4723425c3c6aaf7cc7712b4ebc1b69ac20d", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/9818f4723425c3c6aaf7cc7712b4ebc1b69ac20d", "committedDate": "2020-12-15T09:05:45Z", "message": "finish /data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd", "committedDate": "2020-12-15T11:50:19Z", "message": "Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNTY1MTkx", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#pullrequestreview-553565191", "createdAt": "2020-12-16T10:48:11Z", "commit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDo0ODoxMVrOIG_J-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo0Mjo1NFrOIHBPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NzExNA==", "bodyText": "The docs are incorrect here, the sort options are not applicable for count endpoint.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    desc = \"Returned if some of the query parameters are invalid, for example if a `sortOrder`\n          \n          \n            \n                            parameter is supplied, but no `sortBy`, or if an invalid operator\n          \n          \n            \n                            for variable comparison is used. See the\n          \n          \n            \n                    desc = \"Returned if some of the query parameters are invalid. See the", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544197114", "createdAt": "2020-12-16T10:48:11Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/count/get.ftl", "diffHunk": "@@ -0,0 +1,54 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/get-query-count/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"getVariableInstancesCount\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instance Count\"\n+      desc = \"Query for the number of variable instances that fulfill given parameters. Takes the\n+              same parameters as the [Get Variable\n+              Instances](${docsUrl}/reference/rest/variable-instance/get-query/)\n+              method.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+    <#assign requestMethod=\"GET\"/>\n+    <#assign last = false >\n+    <#include \"/lib/commons/variable-instance-query-params.ftl\" >\n+    <@lib.parameters\n+        object = params\n+        last = false\n+    />\n+    <#assign last = true >\n+    <#include \"/lib/commons/sort-params.ftl\" >\n+\n+  ],\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"CountResultDto\"\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"GET `/variable-instance/count?processInstanceIdIn=aProcessInstanceId,anotherProcessInstanceId&variableValues=amount_gteq_5,amount_lteq_200`\",\n+                       \"value\": {\n+                         \"count\": 3\n+                       }\n+                     }']\n+    />\n+\n+    <@lib.response\n+        code = \"400\"\n+        dto = \"ExceptionDto\"\n+        desc = \"Returned if some of the query parameters are invalid, for example if a `sortOrder`\n+                parameter is supplied, but no `sortBy`, or if an invalid operator\n+                for variable comparison is used. See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5ODI3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    desc = \"Returned if some of the query parameters are invalid, for example if a `sortOrder`\n          \n          \n            \n                            parameter is supplied, but no `sortBy`, or if an invalid operator\n          \n          \n            \n                            for variable comparison is used. See the\n          \n          \n            \n                    desc = \"Returned if some of the query parameters are invalid. See the", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544198273", "createdAt": "2020-12-16T10:49:47Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/count/post.ftl", "diffHunk": "@@ -0,0 +1,69 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/post-query-count/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"queryVariableInstancesCount\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instance Count (POST)\"\n+      desc = \"Query for the number of variable instances that fulfill given parameters. This\n+              method takes the same message body as the\n+              [Get Variable Instances POST](${docsUrl}/reference/rest/variable-\n+              instance/post-query/) method and therefore it is slightly more\n+              powerful than the [Get Variable Instance\n+              Count](${docsUrl}/reference/rest/variable-instance/get-query-count/)\n+              method.\"\n+  />\n+\n+  <@lib.requestBody\n+      mediaType = \"application/json\"\n+      dto = \"VariableInstanceQueryDto\"\n+      examples = ['\"example-1\": {\n+                     \"summary\": \"POST `/variable-instance/count`\",\n+                     \"value\": {\n+                       \"variableValuess\": [\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"gteq\",\n+                           \"value\": \"5\"\n+                         },\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"lteq\",\n+                           \"value\": 200\n+                         }\n+                       ],\n+                       \"processInstanceIdIn\": [\n+                         \"aProcessInstanceId\",\n+                         \"anotherProcessInstanceId\"\n+                       ]\n+                     }\n+                   }']\n+  />\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"CountResultDto\"\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"POST `/variable-instance/count`\",\n+                       \"value\": {\n+                         \"count\": 3\n+                       }\n+                     }']\n+    />\n+\n+    <@lib.response\n+        code = \"400\"\n+        dto = \"ExceptionDto\"\n+        desc = \"Returned if some of the query parameters are invalid, for example if a `sortOrder`\n+                parameter is supplied, but no `sortBy`, or if an invalid operator\n+                for variable comparison is used. See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIwOTQ2OQ==", "bodyText": "you can reuse deserialize-values-parameter", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544209469", "createdAt": "2020-12-16T11:07:33Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/{id}/get.ftl", "diffHunk": "@@ -0,0 +1,81 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/get/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"getVariableInstance\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instance\"\n+      desc = \"Retrieves a variable by id.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+      <@lib.parameter\n+          name = \"id\"\n+          location = \"path\"\n+          type = \"string\"\n+          required = true\n+          desc = \"The id of the variable instance.\"\n+      />\n+\n+    <@lib.parameter\n+          name = \"deserializeValue\"\n+          location = \"query\"\n+          type = \"boolean\"\n+          desc = \"Determines whether serializable variable values (typically variables that store custom Java objects)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMDc3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"errorMessage\": null,", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544230773", "createdAt": "2020-12-16T11:41:58Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/post.ftl", "diffHunk": "@@ -0,0 +1,128 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/post-query/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"queryVariableInstances\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instances (POST)\"\n+      desc = \"Query for variable instances that fulfill given parameters through a JSON object.\n+              This method is slightly more powerful than the\n+              [Get Variable Instances](${docsUrl}/reference/rest/variable-\n+              instance/get-query/) method because it allows filtering by multiple\n+              variable instances of types `String`, `Number` or `Boolean`.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+    <#assign requestMethod=\"POST\"/>\n+    <#assign last = false >\n+    <#include \"/lib/commons/pagination-params.ftl\" >\n+    <#assign last = true >\n+    <#include \"/lib/commons/deserialize-values-parameter.ftl\">\n+\n+  ],\n+\n+  <@lib.requestBody\n+      mediaType = \"application/json\"\n+      dto = \"VariableInstanceQueryDto\"\n+      examples = ['\"example-1\": {\n+                     \"summary\": \"POST `/variable-instance`\",\n+                     \"value\": {\n+                       \"variableValues\": [\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"gteq\",\n+                           \"value\": 5\n+                         },\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"lteq\",\n+                           \"value\": 200\n+                         }\n+                       ],\n+                       \"processInstanceIdIn\": [\n+                         \"aProcessInstanceId\",\n+                         \"anotherProcessInstanceId\"\n+                       ],\n+                       \"sorting\": [\n+                         {\n+                           \"sortBy\": \"variableType\",\n+                           \"sortOrder\": \"asc\"\n+                         }\n+                       ]\n+                     }\n+                   }']\n+  />\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"VariableInstanceDto\"\n+        array = true\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"POST `/variable-instance`\",\n+                       \"value\": [\n+                         {\n+                           \"id\": \"someId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 5,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"b68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"serializationConfig\": null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMDg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"errorMessage\": null,", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544230884", "createdAt": "2020-12-16T11:42:11Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/post.ftl", "diffHunk": "@@ -0,0 +1,128 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/post-query/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"queryVariableInstances\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instances (POST)\"\n+      desc = \"Query for variable instances that fulfill given parameters through a JSON object.\n+              This method is slightly more powerful than the\n+              [Get Variable Instances](${docsUrl}/reference/rest/variable-\n+              instance/get-query/) method because it allows filtering by multiple\n+              variable instances of types `String`, `Number` or `Boolean`.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+    <#assign requestMethod=\"POST\"/>\n+    <#assign last = false >\n+    <#include \"/lib/commons/pagination-params.ftl\" >\n+    <#assign last = true >\n+    <#include \"/lib/commons/deserialize-values-parameter.ftl\">\n+\n+  ],\n+\n+  <@lib.requestBody\n+      mediaType = \"application/json\"\n+      dto = \"VariableInstanceQueryDto\"\n+      examples = ['\"example-1\": {\n+                     \"summary\": \"POST `/variable-instance`\",\n+                     \"value\": {\n+                       \"variableValues\": [\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"gteq\",\n+                           \"value\": 5\n+                         },\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"lteq\",\n+                           \"value\": 200\n+                         }\n+                       ],\n+                       \"processInstanceIdIn\": [\n+                         \"aProcessInstanceId\",\n+                         \"anotherProcessInstanceId\"\n+                       ],\n+                       \"sorting\": [\n+                         {\n+                           \"sortBy\": \"variableType\",\n+                           \"sortOrder\": \"asc\"\n+                         }\n+                       ]\n+                     }\n+                   }']\n+  />\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"VariableInstanceDto\"\n+        array = true\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"POST `/variable-instance`\",\n+                       \"value\": [\n+                         {\n+                           \"id\": \"someId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 5,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"b68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"serializationConfig\": null,\n+                           \"tenantId\": null\n+                         },\n+                         {\n+                           \"id\": \"someOtherId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 15,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"serializationConfig\": null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMDk4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"errorMessage\": null,", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544230985", "createdAt": "2020-12-16T11:42:18Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/post.ftl", "diffHunk": "@@ -0,0 +1,128 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/post-query/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"queryVariableInstances\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instances (POST)\"\n+      desc = \"Query for variable instances that fulfill given parameters through a JSON object.\n+              This method is slightly more powerful than the\n+              [Get Variable Instances](${docsUrl}/reference/rest/variable-\n+              instance/get-query/) method because it allows filtering by multiple\n+              variable instances of types `String`, `Number` or `Boolean`.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+    <#assign requestMethod=\"POST\"/>\n+    <#assign last = false >\n+    <#include \"/lib/commons/pagination-params.ftl\" >\n+    <#assign last = true >\n+    <#include \"/lib/commons/deserialize-values-parameter.ftl\">\n+\n+  ],\n+\n+  <@lib.requestBody\n+      mediaType = \"application/json\"\n+      dto = \"VariableInstanceQueryDto\"\n+      examples = ['\"example-1\": {\n+                     \"summary\": \"POST `/variable-instance`\",\n+                     \"value\": {\n+                       \"variableValues\": [\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"gteq\",\n+                           \"value\": 5\n+                         },\n+                         {\n+                           \"name\": \"amount\",\n+                           \"operator\": \"lteq\",\n+                           \"value\": 200\n+                         }\n+                       ],\n+                       \"processInstanceIdIn\": [\n+                         \"aProcessInstanceId\",\n+                         \"anotherProcessInstanceId\"\n+                       ],\n+                       \"sorting\": [\n+                         {\n+                           \"sortBy\": \"variableType\",\n+                           \"sortOrder\": \"asc\"\n+                         }\n+                       ]\n+                     }\n+                   }']\n+  />\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"VariableInstanceDto\"\n+        array = true\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"POST `/variable-instance`\",\n+                       \"value\": [\n+                         {\n+                           \"id\": \"someId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 5,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"b68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"serializationConfig\": null,\n+                           \"tenantId\": null\n+                         },\n+                         {\n+                           \"id\": \"someOtherId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 15,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"serializationConfig\": null,\n+                           \"tenantId\": null\n+                         },\n+                         {\n+                           \"id\": \"yetAnotherId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 150,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"anotherProcessInstanceId\",\n+                           \"executionId\": \"68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_2:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"serializationConfig\": null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMTIyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"errorMessage\": null,", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544231226", "createdAt": "2020-12-16T11:42:42Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/get.ftl", "diffHunk": "@@ -0,0 +1,111 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/get-query/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"getVariableInstances\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instances\"\n+      desc = \"Query for variable instances that fulfill given parameters. Parameters may be the\n+              properties of variable instances, such as the name or type. The size\n+              of the result set can be retrieved by using the [Get Variable Instance\n+              Count](${docsUrl}/reference/rest/variable-instance/get-query-count/)\n+              method.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+    <#assign requestMethod=\"GET\"/>\n+    <#include \"/lib/commons/variable-instance-query-params.ftl\" >\n+    <#assign last = false >\n+\n+    <@lib.parameters\n+        object = params\n+    />\n+\n+    <#include \"/lib/commons/sort-params.ftl\" >\n+\n+    <#include \"/lib/commons/pagination-params.ftl\" >\n+    <#assign last = true >\n+\n+    <#include \"/lib/commons/deserialize-values-parameter.ftl\">\n+\n+],\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"VariableInstanceDto\"\n+        array = true\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"GET `/variable-instance?processInstanceIdIn=aProcessInstanceId,anotherProcessInstanceId&variableValues=amount_gteq_5,amount_lteq_200`\",\n+                       \"value\": [\n+                         {\n+                           \"id\": \"someId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 5,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"b68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"caseExecutionId\": null,\n+                           \"caseInstanceId\": null,\n+                           \"serializationConfig\": null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMTI4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"errorMessage\": null,", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544231288", "createdAt": "2020-12-16T11:42:48Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/get.ftl", "diffHunk": "@@ -0,0 +1,111 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/get-query/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"getVariableInstances\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instances\"\n+      desc = \"Query for variable instances that fulfill given parameters. Parameters may be the\n+              properties of variable instances, such as the name or type. The size\n+              of the result set can be retrieved by using the [Get Variable Instance\n+              Count](${docsUrl}/reference/rest/variable-instance/get-query-count/)\n+              method.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+    <#assign requestMethod=\"GET\"/>\n+    <#include \"/lib/commons/variable-instance-query-params.ftl\" >\n+    <#assign last = false >\n+\n+    <@lib.parameters\n+        object = params\n+    />\n+\n+    <#include \"/lib/commons/sort-params.ftl\" >\n+\n+    <#include \"/lib/commons/pagination-params.ftl\" >\n+    <#assign last = true >\n+\n+    <#include \"/lib/commons/deserialize-values-parameter.ftl\">\n+\n+],\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"VariableInstanceDto\"\n+        array = true\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"GET `/variable-instance?processInstanceIdIn=aProcessInstanceId,anotherProcessInstanceId&variableValues=amount_gteq_5,amount_lteq_200`\",\n+                       \"value\": [\n+                         {\n+                           \"id\": \"someId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 5,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"b68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"caseExecutionId\": null,\n+                           \"caseInstanceId\": null,\n+                           \"serializationConfig\": null,\n+                           \"tenantId\": null\n+                         },\n+                         {\n+                           \"id\": \"someOtherId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 15,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"caseExecutionId\": null,\n+                           \"caseInstanceId\": null,\n+                           \"serializationConfig\": null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzMTM1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"serializationConfig\": null,\n          \n          \n            \n                                       \"errorMessage\": null,", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544231353", "createdAt": "2020-12-16T11:42:54Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/variable-instance/get.ftl", "diffHunk": "@@ -0,0 +1,111 @@\n+<#-- Generated From File: camunda-docs-manual/public/reference/rest/variable-instance/get-query/index.html -->\n+{\n+  <@lib.endpointInfo\n+      id = \"getVariableInstances\"\n+      tag = \"Variable Instance\"\n+      summary = \"Get Variable Instances\"\n+      desc = \"Query for variable instances that fulfill given parameters. Parameters may be the\n+              properties of variable instances, such as the name or type. The size\n+              of the result set can be retrieved by using the [Get Variable Instance\n+              Count](${docsUrl}/reference/rest/variable-instance/get-query-count/)\n+              method.\"\n+  />\n+\n+  \"parameters\" : [\n+\n+    <#assign requestMethod=\"GET\"/>\n+    <#include \"/lib/commons/variable-instance-query-params.ftl\" >\n+    <#assign last = false >\n+\n+    <@lib.parameters\n+        object = params\n+    />\n+\n+    <#include \"/lib/commons/sort-params.ftl\" >\n+\n+    <#include \"/lib/commons/pagination-params.ftl\" >\n+    <#assign last = true >\n+\n+    <#include \"/lib/commons/deserialize-values-parameter.ftl\">\n+\n+],\n+\n+  \"responses\": {\n+\n+    <@lib.response\n+        code = \"200\"\n+        dto = \"VariableInstanceDto\"\n+        array = true\n+        desc = \"Request successful.\"\n+        examples = ['\"example-1\": {\n+                       \"description\": \"GET `/variable-instance?processInstanceIdIn=aProcessInstanceId,anotherProcessInstanceId&variableValues=amount_gteq_5,amount_lteq_200`\",\n+                       \"value\": [\n+                         {\n+                           \"id\": \"someId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 5,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"b68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"caseExecutionId\": null,\n+                           \"caseInstanceId\": null,\n+                           \"serializationConfig\": null,\n+                           \"tenantId\": null\n+                         },\n+                         {\n+                           \"id\": \"someOtherId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 15,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"aProcessInstanceId\",\n+                           \"executionId\": \"68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_1:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"caseExecutionId\": null,\n+                           \"caseInstanceId\": null,\n+                           \"serializationConfig\": null,\n+                           \"tenantId\": null\n+                         },\n+                         {\n+                           \"id\": \"yetAnotherId\",\n+                           \"name\": \"amount\",\n+                           \"type\": \"Integer\",\n+                           \"variableType\": \"integer\",\n+                           \"value\": 150,\n+                           \"processDefinitionId\": \"aProcessDefinitionId\",\n+                           \"processInstanceId\": \"anotherProcessInstanceId\",\n+                           \"executionId\": \"68b71c9-e310-11e2-beb0-f0def1557726\",\n+                           \"taskId\": null,\n+                           \"batchId\": null,\n+                           \"activityInstanceId\": \"Task_2:b68b71ca-e310-11e2-beb0-f0def1557726\",\n+                           \"caseExecutionId\": null,\n+                           \"caseInstanceId\": null,\n+                           \"serializationConfig\": null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNjEyMTQ0", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#pullrequestreview-553612144", "createdAt": "2020-12-16T11:51:30Z", "commit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1MTozMFrOIHBj2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMTo1MTozMFrOIHBj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDIzNjUwNA==", "bodyText": "We can already add clarification that the property is not applicable for the POST count endpoint (CAM-12858).", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#discussion_r544236504", "createdAt": "2020-12-16T11:51:30Z", "author": {"login": "yanavasileva"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/runtime/VariableInstanceQueryDto.ftl", "diffHunk": "@@ -0,0 +1,17 @@\n+<@lib.dto\n+    desc = \"A variable instance query which defines a list of variable instances\" >\n+    <#assign requestMethod=\"POST\"/>\n+    <#include \"/lib/commons/variable-instance-query-params.ftl\" >\n+    <@lib.properties params />\n+\n+    \"sorting\": {\n+      \"type\": \"array\",\n+      \"description\": \"Apply sorting of the result\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a49c45b2ac6c4923eb119f62f3303aa2b2a83fd"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d808e13758b548ff56e9609fa55a88ab3d70ec7", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/1d808e13758b548ff56e9609fa55a88ab3d70ec7", "committedDate": "2020-12-18T10:39:14Z", "message": "Apply suggestions from code review\n\nCo-authored-by: yanavasileva <yanavasileva@users.noreply.github.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d66a0adfcbc49fb2eb405dfbc5054fdf42deca3e", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/d66a0adfcbc49fb2eb405dfbc5054fdf42deca3e", "committedDate": "2020-12-18T10:47:02Z", "message": "Fix incorrect inclusion of parameters in sorting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2840fff45a5990f60b3a001ef113db37cbcb0a22", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/2840fff45a5990f60b3a001ef113db37cbcb0a22", "committedDate": "2020-12-18T13:09:48Z", "message": "remove wrong example properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NjM3OTQx", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#pullrequestreview-555637941", "createdAt": "2020-12-18T16:32:43Z", "commit": {"oid": "2840fff45a5990f60b3a001ef113db37cbcb0a22"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eb4a94fbee11fdc9380531e62d95193d35d01a1", "author": {"user": {"login": "yT0n1", "name": "Anton von Weltzien"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/0eb4a94fbee11fdc9380531e62d95193d35d01a1", "committedDate": "2020-12-21T09:49:31Z", "message": "include parts of the error description previously removed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYwODMxMjc0", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1199#pullrequestreview-560831274", "createdAt": "2021-01-04T07:54:49Z", "commit": {"oid": "0eb4a94fbee11fdc9380531e62d95193d35d01a1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2118, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}