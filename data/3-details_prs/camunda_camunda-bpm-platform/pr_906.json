{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NTg1NTY5", "number": 906, "title": "fix(large-data): only cleanup DeleteDeploymentCascadeTest data", "bodyText": "Related to CAM-12205", "createdAt": "2020-07-23T09:32:06Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906", "merged": true, "mergeCommit": {"oid": "df637851f9428dace02953bc5220889d86b8aa6a"}, "closed": true, "closedAt": "2020-08-03T11:28:09Z", "author": {"login": "mboskamp"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4EYAcgFqTQ1NDkwMzM0Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7QEqJgH2gAyNDU1NTg1NTY5OjkwMzQ5OTRkNzc2MzkwYWNjN2ZhMzliYWQ1OTlkMGQ3OTM0YjU2YzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTAzMzQ3", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#pullrequestreview-454903347", "createdAt": "2020-07-24T13:51:41Z", "commit": {"oid": "edbb8ec3ecd3ba5856c3865cedb741f910ddf45b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0OTA2MjY2", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#pullrequestreview-454906266", "createdAt": "2020-07-24T13:55:24Z", "commit": {"oid": "edbb8ec3ecd3ba5856c3865cedb741f910ddf45b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edbb8ec3ecd3ba5856c3865cedb741f910ddf45b", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/edbb8ec3ecd3ba5856c3865cedb741f910ddf45b", "committedDate": "2020-07-23T09:31:18Z", "message": "fix(large-data): only cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-11755"}, "afterCommit": {"oid": "a9024fd79077545c8701acc593b710818e833452", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9024fd79077545c8701acc593b710818e833452", "committedDate": "2020-07-27T08:51:22Z", "message": "fix(large-data): cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-12205"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDUwMTA3", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#pullrequestreview-457450107", "createdAt": "2020-07-29T11:58:20Z", "commit": {"oid": "a9024fd79077545c8701acc593b710818e833452"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1ODoyMFrOG41HkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMTo1OToyOVrOG41J3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0MzcyOA==", "bodyText": "let's return it to 2 500.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#discussion_r462243728", "createdAt": "2020-07-29T11:58:20Z", "author": {"login": "yanavasileva"}, "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java", "diffHunk": "@@ -19,57 +19,71 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.camunda.bpm.engine.HistoryService;\n import org.camunda.bpm.engine.RepositoryService;\n import org.camunda.bpm.engine.history.HistoricProcessInstance;\n-import org.camunda.bpm.engine.impl.test.TestHelper;\n+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n import org.camunda.bpm.engine.repository.Deployment;\n import org.camunda.bpm.engine.test.ProcessEngineRule;\n import org.camunda.bpm.qa.largedata.util.EngineDataGenerator;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n \n public class DeleteDeploymentCascadeTest {\n \n-  @ClassRule\n-  public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+  @Rule\n+  public ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n \n-  protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n+  protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n+\n+  protected int GENERATE_PROCESS_INSTANCES_COUNT = 10_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9024fd79077545c8701acc593b710818e833452"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI0NDMxOQ==", "bodyText": "let's add null check, if the test is successful the deployment will be null so no need of clean up", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#discussion_r462244319", "createdAt": "2020-07-29T11:59:29Z", "author": {"login": "yanavasileva"}, "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java", "diffHunk": "@@ -19,57 +19,71 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.camunda.bpm.engine.HistoryService;\n import org.camunda.bpm.engine.RepositoryService;\n import org.camunda.bpm.engine.history.HistoricProcessInstance;\n-import org.camunda.bpm.engine.impl.test.TestHelper;\n+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n import org.camunda.bpm.engine.repository.Deployment;\n import org.camunda.bpm.engine.test.ProcessEngineRule;\n import org.camunda.bpm.qa.largedata.util.EngineDataGenerator;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n \n public class DeleteDeploymentCascadeTest {\n \n-  @ClassRule\n-  public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+  @Rule\n+  public ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n \n-  protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n+  protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n+\n+  protected int GENERATE_PROCESS_INSTANCES_COUNT = 10_000;\n   protected RepositoryService repositoryService;\n   protected HistoryService historyService;\n-\n+  protected EngineDataGenerator generator;\n+  \n   @Before\n   public void init() {\n-    repositoryService = processEngineRule.getRepositoryService();\n-    historyService = processEngineRule.getHistoryService();\n+    repositoryService = processEngineRule.getProcessEngine().getRepositoryService();\n+    historyService = processEngineRule.getProcessEngine().getHistoryService();\n \n     // generate data\n-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT);\n+    generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT, DATA_PREFIX);\n     generator.deployDefinitions();\n     generator.generateCompletedProcessInstanceData();\n   }\n \n   @After\n-  public void tearDown() {\n-    TestHelper.assertAndEnsureCleanDbAndCache(processEngineRule.getProcessEngine(), false);\n+  public void teardown() {\n+    Deployment deplyoment = repositoryService.createDeploymentQuery().deploymentName(generator.getDeploymentName()).singleResult();\n+    repositoryService.deleteDeployment(deplyoment.getId(), false);\n+    List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery().processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n+    if(!processInstances.isEmpty()) {\n+      List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n+      List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n+      for (List<String> partition : partitions) {\n+        historyService.deleteHistoricProcessInstances(partition);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9024fd79077545c8701acc593b710818e833452"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "632f0cd252664849a7d987cb209324127446ae0e", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/632f0cd252664849a7d987cb209324127446ae0e", "committedDate": "2020-07-30T08:10:46Z", "message": "fix(large-data): cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-12205"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9024fd79077545c8701acc593b710818e833452", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9024fd79077545c8701acc593b710818e833452", "committedDate": "2020-07-27T08:51:22Z", "message": "fix(large-data): cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-12205"}, "afterCommit": {"oid": "632f0cd252664849a7d987cb209324127446ae0e", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/632f0cd252664849a7d987cb209324127446ae0e", "committedDate": "2020-07-30T08:10:46Z", "message": "fix(large-data): cleanup DeleteDeploymentCascadeTest data\n\nRelated to CAM-12205"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjUyMzQ3", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#pullrequestreview-458252347", "createdAt": "2020-07-30T09:49:49Z", "commit": {"oid": "632f0cd252664849a7d987cb209324127446ae0e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTo0OTo1MFrOG5cGyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwOTo0OTo1MFrOG5cGyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg4MjUwNw==", "bodyText": "I suggest a small reorder of the cleanup, otherwise, the historic process instances won't be pick up as the process definition will be deleted with the deployment:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  repositoryService.deleteDeployment(deployment.getId(), false);\n          \n          \n            \n                  List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery()\n          \n          \n            \n                      .processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n          \n          \n            \n                  if (!processInstances.isEmpty()) {\n          \n          \n            \n                    List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n          \n          \n            \n                    List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n          \n          \n            \n                    for (List<String> partition : partitions) {\n          \n          \n            \n                      historyService.deleteHistoricProcessInstances(partition);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery()\n          \n          \n            \n                      .processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n          \n          \n            \n                  if (!processInstances.isEmpty()) {\n          \n          \n            \n                    List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n          \n          \n            \n                    List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n          \n          \n            \n                    for (List<String> partition : partitions) {\n          \n          \n            \n                      historyService.deleteHistoricProcessInstances(partition);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                  repositoryService.deleteDeployment(deployment.getId(), false);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#discussion_r462882507", "createdAt": "2020-07-30T09:49:50Z", "author": {"login": "yanavasileva"}, "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/DeleteDeploymentCascadeTest.java", "diffHunk": "@@ -19,57 +19,74 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.camunda.bpm.engine.HistoryService;\n import org.camunda.bpm.engine.RepositoryService;\n import org.camunda.bpm.engine.history.HistoricProcessInstance;\n-import org.camunda.bpm.engine.impl.test.TestHelper;\n+import org.camunda.bpm.engine.impl.db.sql.DbSqlSessionFactory;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n import org.camunda.bpm.engine.repository.Deployment;\n import org.camunda.bpm.engine.test.ProcessEngineRule;\n import org.camunda.bpm.qa.largedata.util.EngineDataGenerator;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.ClassRule;\n+import org.junit.Rule;\n import org.junit.Test;\n \n public class DeleteDeploymentCascadeTest {\n \n-  @ClassRule\n-  public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+  @Rule\n+  public ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+\n+  protected static final String DATA_PREFIX = DeleteDeploymentCascadeTest.class.getSimpleName();\n \n   protected int GENERATE_PROCESS_INSTANCES_COUNT = 2500;\n   protected RepositoryService repositoryService;\n   protected HistoryService historyService;\n-\n+  protected EngineDataGenerator generator;\n+  \n   @Before\n   public void init() {\n-    repositoryService = processEngineRule.getRepositoryService();\n-    historyService = processEngineRule.getHistoryService();\n+    repositoryService = processEngineRule.getProcessEngine().getRepositoryService();\n+    historyService = processEngineRule.getProcessEngine().getHistoryService();\n \n     // generate data\n-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT);\n+    generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), GENERATE_PROCESS_INSTANCES_COUNT, DATA_PREFIX);\n     generator.deployDefinitions();\n     generator.generateCompletedProcessInstanceData();\n   }\n \n   @After\n-  public void tearDown() {\n-    TestHelper.assertAndEnsureCleanDbAndCache(processEngineRule.getProcessEngine(), false);\n+  public void teardown() {\n+    Deployment deployment = repositoryService.createDeploymentQuery().deploymentName(generator.getDeploymentName()).singleResult();\n+    if (deployment != null) {\n+      repositoryService.deleteDeployment(deployment.getId(), false);\n+      List<HistoricProcessInstance> processInstances = historyService.createHistoricProcessInstanceQuery()\n+          .processDefinitionKey(generator.getAutoCompleteProcessKey()).list();\n+      if (!processInstances.isEmpty()) {\n+        List<String> processInstanceIds = processInstances.stream().map(HistoricProcessInstance::getId).collect(Collectors.toList());\n+        List<List<String>> partitions = CollectionUtil.partition(processInstanceIds, DbSqlSessionFactory.MAXIMUM_NUMBER_PARAMS);\n+        for (List<String> partition : partitions) {\n+          historyService.deleteHistoricProcessInstances(partition);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "632f0cd252664849a7d987cb209324127446ae0e"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MjUzMjIx", "url": "https://github.com/camunda/camunda-bpm-platform/pull/906#pullrequestreview-458253221", "createdAt": "2020-07-30T09:50:59Z", "commit": {"oid": "632f0cd252664849a7d987cb209324127446ae0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9034994d776390acc7fa39bad599d0d7934b56c3", "author": {"user": {"login": "mboskamp", "name": "Miklas Boskamp"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/9034994d776390acc7fa39bad599d0d7934b56c3", "committedDate": "2020-08-03T11:11:11Z", "message": "chore(test): reorder cleanup\r\n\r\nRelated to CAM-12205\n\nCo-authored-by: yanavasileva <yanavasileva@users.noreply.github.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1750, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}