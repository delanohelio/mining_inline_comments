{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTY2OTE4", "number": 714, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNzo0M1rODsFqlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNzoyNFrODspf8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTU2NzU2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/history/HistoricDetailQuery.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNzo0M1rOF8zknw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDoyNzo0M1rOF8zknw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwMzgzOQ==", "bodyText": "Maybe we can clarify a bit what that means.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/714#discussion_r399303839", "createdAt": "2020-03-27T14:27:43Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/history/HistoricDetailQuery.java", "diffHunk": "@@ -127,6 +127,9 @@\n   /** Only select historic details that have occurred after the given date (inclusive). */\n   HistoricDetailQuery occurredAfter(Date date);\n \n+  /** Only select historic details that were set during the process start. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e27ad6de50269d3cb5c7b25f1104d346acda2b37"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTYwMTc1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableUpdate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNDo0NVrOF8z5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDozNDo0NVrOF8z5IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMwOTA4OQ==", "bodyText": "I think this should be the wrapper Boolean class to handle cases with null properly? Same for the field declaration in the entity. Or are the database fields in all cases declared to not allow null and have a proper default value (e.g. INITIAL_ smallint check(INITIAL_ in (1,0)); sounds like it)? In that case we must make sure that rolling-update scenarios still work, i.e. a 7.12 engine creates a history detail in the 7.13 schema.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/714#discussion_r399309089", "createdAt": "2020-03-27T14:34:45Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/history/HistoricVariableUpdate.java", "diffHunk": "@@ -60,4 +60,9 @@\n    * @return an error message indicating why the variable value could not be loaded.\n    */\n   String getErrorMessage();\n+\n+  /**\n+   * @return true if the detail historic variable update is created during the process instance start\n+   */\n+  boolean isInitial();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e27ad6de50269d3cb5c7b25f1104d346acda2b37"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTY0MjI3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/LegacyBehavior.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MzozNFrOF80SZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0MzozNFrOF80SZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNTU1Nw==", "bodyText": "This comment is a bit misleading. You could even consider creating a method #wasCreatedBefore713 in VariableInstanceEntity and have a description there why we can use the definition id to make the distinction.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/714#discussion_r399315557", "createdAt": "2020-03-27T14:43:34Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/LegacyBehavior.java", "diffHunk": "@@ -635,4 +639,34 @@ public boolean isFulfilled(PvmExecutionImpl element) {\n     return walker.getCurrentElement();\n   }\n \n+  /**\n+   * See #CAM-10978\n+   * Use case process instance with <code>asyncBefore</code> startEvent\n+   * After unifying the history variable's creation<br>\n+   * The following changed:<br>\n+   *   * variables will receive the <code>processInstanceId</code> as <code>activityInstanceId</code> in such cases (previously was the startEvent id)<br>\n+   *   * historic details have new <code>initial</code> property to track initial variables that process is started with<br>\n+   * The jobs created prior <code>7.13</code> and not executed before do not have historic information of variables.\n+   * This method takes care of that.\n+   */\n+  public static void createMissingHistoricVariables(PvmExecutionImpl execution) {\n+    Collection<VariableInstanceEntity> variables = ((ExecutionEntity) execution).getVariablesInternal();\n+\n+    if (variables != null && variables.size() > 0) {\n+      // trigger historic creation if the history is not presented already\n+      for (VariableInstanceEntity variable : variables) {\n+\n+        // processDefinitionId is introduced in 7.13 and for such variable we need to create history", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e27ad6de50269d3cb5c7b25f1104d346acda2b37"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTY0NTY0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/LegacyBehavior.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0NDoyMVrOF80Ulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNDo0NDoyMVrOF80Ulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMxNjExOQ==", "bodyText": "We can remove this second part, because that is also checked in the listener's #onCreate method.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/714#discussion_r399316119", "createdAt": "2020-03-27T14:44:21Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/pvm/runtime/LegacyBehavior.java", "diffHunk": "@@ -635,4 +639,34 @@ public boolean isFulfilled(PvmExecutionImpl element) {\n     return walker.getCurrentElement();\n   }\n \n+  /**\n+   * See #CAM-10978\n+   * Use case process instance with <code>asyncBefore</code> startEvent\n+   * After unifying the history variable's creation<br>\n+   * The following changed:<br>\n+   *   * variables will receive the <code>processInstanceId</code> as <code>activityInstanceId</code> in such cases (previously was the startEvent id)<br>\n+   *   * historic details have new <code>initial</code> property to track initial variables that process is started with<br>\n+   * The jobs created prior <code>7.13</code> and not executed before do not have historic information of variables.\n+   * This method takes care of that.\n+   */\n+  public static void createMissingHistoricVariables(PvmExecutionImpl execution) {\n+    Collection<VariableInstanceEntity> variables = ((ExecutionEntity) execution).getVariablesInternal();\n+\n+    if (variables != null && variables.size() > 0) {\n+      // trigger historic creation if the history is not presented already\n+      for (VariableInstanceEntity variable : variables) {\n+\n+        // processDefinitionId is introduced in 7.13 and for such variable we need to create history\n+        if (variable.getProcessDefinitionId() == null &&\n+            getHistoryLevel().isHistoryEventProduced(HistoryEventTypes.VARIABLE_INSTANCE_CREATE, variable)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e27ad6de50269d3cb5c7b25f1104d346acda2b37"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQzODU3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/HistoricDetailQueryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNzoyNFrOF9nRyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyNzoyNFrOF9nRyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE1MDk4NA==", "bodyText": "Should we set the default value here since the value is used in a condition in the MyBatis query?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected boolean initial;\n          \n          \n            \n              protected boolean initial = false;", "url": "https://github.com/camunda/camunda-bpm-platform/pull/714#discussion_r400150984", "createdAt": "2020-03-30T12:27:24Z", "author": {"login": "koevskinikola"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/HistoricDetailQueryImpl.java", "diffHunk": "@@ -56,6 +56,7 @@\n   protected Long sequenceCounter;\n   protected Date occurredBefore;\n   protected Date occurredAfter;\n+  protected boolean initial;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "628513c7eb15f6bce10e152e6a12df4c834c2217"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4673, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}