{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzU2NTg1", "number": 797, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1ODowNFrOD2nojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1ODowNFrOD2nojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTk5MDU1OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1ODowNFrOGMdNCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowMDo0OVrOGMdTHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDU2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    taskId, userId, HistoricTaskPermissions.NONE);\n          \n          \n            \n                    taskId, userId, HistoricTaskPermissions.READ);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#discussion_r415714569", "createdAt": "2020-04-27T10:58:04Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -504,6 +513,223 @@ public void testHistoricProcessInstancePermissionsAuthorizationDisabled() {\n         .containsExactly(processInstanceId, processInstanceId);\n   }\n \n+  public void testCheckNonePermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckReadPermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnHistoricTaskAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY,\n+        userId, ProcessDefinitionPermissions.READ_HISTORY);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactlyInAnyOrder(taskId, null);\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTaskAndNonePermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId,\n+        ProcessDefinitionPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckNoneOnHistoricTaskAndTaskWorkerCategory() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_TASK,\n+        taskId, userId, HistoricTaskPermissions.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNjEyNA==", "bodyText": "I am not sure about this change. The set permissions are not in line with your usual method naming pattern. What should be the goal of the test?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#discussion_r415716124", "createdAt": "2020-04-27T11:00:49Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -504,6 +513,223 @@ public void testHistoricProcessInstancePermissionsAuthorizationDisabled() {\n         .containsExactly(processInstanceId, processInstanceId);\n   }\n \n+  public void testCheckNonePermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckReadPermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnHistoricTaskAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY,\n+        userId, ProcessDefinitionPermissions.READ_HISTORY);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactlyInAnyOrder(taskId, null);\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTaskAndNonePermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId,\n+        ProcessDefinitionPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckNoneOnHistoricTaskAndTaskWorkerCategory() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_TASK,\n+        taskId, userId, HistoricTaskPermissions.NONE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDU2OQ=="}, "originalCommit": {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25"}, "originalPosition": 204}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4611, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}