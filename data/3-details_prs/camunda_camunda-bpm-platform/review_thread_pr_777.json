{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzYyNDU0", "number": 777, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozODo1M1rODxoAdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDowNzozNlrODybqFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzYyMjk1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozODo1M1rOGFMlzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NDoyNFrOGIMiyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjM1MQ==", "bodyText": "Shouldn't this check HistoricProcessInstancePermissions.READ?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408102351", "createdAt": "2020-04-14T12:38:53Z", "author": {"login": "mboskamp"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzMwNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247305", "createdAt": "2020-04-20T09:54:24Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjM1MQ=="}, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzc0MzM2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzowODoxMVrOGFNwkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NDozNlrOGIMjSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMTQ4OA==", "bodyText": "Shouldn't this check HistoricProcessInstancePermissions.READ?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408121488", "createdAt": "2020-04-14T13:08:11Z", "author": {"login": "mboskamp"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)\n+          .build();\n+\n+      addPermissionCheck(authCheck, permissionCheck);\n+\n+    }\n   }\n \n   // historic activity instance query /////////////////////////////////\n \n   public void configureHistoricActivityInstanceQuery(HistoricActivityInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"RES.PROC_INST_ID_\", READ)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzQzNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247435", "createdAt": "2020-04-20T09:54:36Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)\n+          .build();\n+\n+      addPermissionCheck(authCheck, permissionCheck);\n+\n+    }\n   }\n \n   // historic activity instance query /////////////////////////////////\n \n   public void configureHistoricActivityInstanceQuery(HistoricActivityInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"RES.PROC_INST_ID_\", READ)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMTQ4OA=="}, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODU0Mzk2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNDoyMDoyNFrOGF8Cdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NDo0NFrOGIMjjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3OTczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n          \n          \n            \n              public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408879735", "createdAt": "2020-04-15T14:20:24Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java", "diffHunk": "@@ -998,6 +1000,137 @@ public void testHistoricTaskPermissionsAuthorizationDisabled() {\n     assertEquals(1, result.size());\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(0, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_GlobalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    disableAuthorization();\n+    runtimeService.setVariable(processInstanceId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_LocalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzUwMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247500", "createdAt": "2020-04-20T09:54:44Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java", "diffHunk": "@@ -998,6 +1000,137 @@ public void testHistoricTaskPermissionsAuthorizationDisabled() {\n     assertEquals(1, result.size());\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(0, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_GlobalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    disableAuthorization();\n+    runtimeService.setVariable(processInstanceId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_LocalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3OTczNQ=="}, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTk1NjI5OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTozNDowOVrOGGc4Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NDo0OVrOGIMjxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxNzgyNg==", "bodyText": "Should go into @ After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409417826", "createdAt": "2020-04-16T09:34:09Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java", "diffHunk": "@@ -506,6 +506,169 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    String processInstanceId = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), nullValue());\n+\n+    // when\n+    String taskId = taskService.createTaskQuery().singleResult().getId();\n+\n+    ClockUtil.setCurrentTime(END_DATE);\n+\n+    taskService.complete(taskId);\n+\n+    // then\n+    Date removalTime = addDays(END_DATE, 5);\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzU1OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247558", "createdAt": "2020-04-20T09:54:49Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java", "diffHunk": "@@ -506,6 +506,169 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    String processInstanceId = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), nullValue());\n+\n+    // when\n+    String taskId = taskService.createTaskQuery().singleResult().getId();\n+\n+    ClockUtil.setCurrentTime(END_DATE);\n+\n+    taskService.complete(taskId);\n+\n+    // then\n+    Date removalTime = addDays(END_DATE, 5);\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxNzgyNg=="}, "originalCommit": {"oid": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MTk1OTg3OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTozNTowMlrOGGc6jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NDo1M1rOGIMj_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxODM4Mw==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409418383", "createdAt": "2020-04-16T09:35:02Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java", "diffHunk": "@@ -577,6 +577,143 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n+\n+    // when\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+\n+    String processInstanceId = processInstance.getProcessInstanceId();\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // then\n+    Date removalTime = addDays(START_DATE, 5);\n+\n+    assertThat(authorization.getRootProcessInstanceId(), is(processInstance.getRootProcessInstanceId()));\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzYxNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247615", "createdAt": "2020-04-20T09:54:53Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java", "diffHunk": "@@ -577,6 +577,143 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n+\n+    // when\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+\n+    String processInstanceId = processInstance.getProcessInstanceId();\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // then\n+    Date removalTime = addDays(START_DATE, 5);\n+\n+    assertThat(authorization.getRootProcessInstanceId(), is(processInstance.getRootProcessInstanceId()));\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxODM4Mw=="}, "originalCommit": {"oid": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjAwNDAxOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo0NjozOVrOGGdWrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NDo1OFrOGIMkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTU4Mw==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409425583", "createdAt": "2020-04-16T09:46:39Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzY3MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247671", "createdAt": "2020-04-20T09:54:58Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTU4Mw=="}, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjAwNDM0OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQwOTo0Njo0NVrOGGdW6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NTowNFrOGIMkdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTY0MA==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409425640", "createdAt": "2020-04-16T09:46:45Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    // when\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    // then\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzczNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247735", "createdAt": "2020-04-20T09:55:04Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    // when\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    // then\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTY0MA=="}, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjA4NTA3OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDowNzozMVrOGGeJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NToxNFrOGIMk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODU3OA==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409438578", "createdAt": "2020-04-16T10:07:31Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0Nzg0OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247848", "createdAt": "2020-04-20T09:55:14Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODU3OA=="}, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MjA4NTM1OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDowNzozNlrOGGeJqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1NToxOVrOGIMlJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODYzMg==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409438632", "createdAt": "2020-04-16T10:07:36Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    // when\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NzkwOQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r411247909", "createdAt": "2020-04-20T09:55:19Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    // when\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODYzMg=="}, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4591, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}