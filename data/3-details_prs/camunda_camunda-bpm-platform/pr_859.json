{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjE0MjEw", "number": 859, "title": "feat(engine): introduce telemetry configuration", "bodyText": "disabled by default\n\nRelated to CAM-12023", "createdAt": "2020-06-15T15:27:49Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859", "merged": true, "mergeCommit": {"oid": "393b44149bd772f6891ae687977fa61c8c0bc663"}, "closed": true, "closedAt": "2020-06-22T08:49:54Z", "author": {"login": "yanavasileva"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr0D7ngBqjM0NDg2NDM4ODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctrmEBAFqTQzNDY2MDY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c24fd5c2ff8dcb680612a16250eb48b2c791507a", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/c24fd5c2ff8dcb680612a16250eb48b2c791507a", "committedDate": "2020-06-16T11:57:08Z", "message": "squash"}, "afterCommit": {"oid": "0412cc36517db284465b2eb46f675e12f46d4125", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/0412cc36517db284465b2eb46f675e12f46d4125", "committedDate": "2020-06-16T12:03:29Z", "message": "feat(engine): introduce telemetry configuration\n\n* disabled by default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/9fda8ea6ae8f689322a9c4186348040d67612a7f", "committedDate": "2020-06-16T13:59:01Z", "message": "feat(engine): introduce telemetry configuration\n\n- disabled by default\n- store telemetry property in the database (it can be enabled/disabled\nlater)\n-- add telemetry.lock in create and update scripts\n- test the new configuration (+ concurrency test)\n\nRelated to CAM-12023"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59848e910725c1d0a65f574d71ceab136b8fd199", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/59848e910725c1d0a65f574d71ceab136b8fd199", "committedDate": "2020-06-16T13:49:01Z", "message": "adjust update scripts"}, "afterCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/9fda8ea6ae8f689322a9c4186348040d67612a7f", "committedDate": "2020-06-16T13:59:01Z", "message": "feat(engine): introduce telemetry configuration\n\n- disabled by default\n- store telemetry property in the database (it can be enabled/disabled\nlater)\n-- add telemetry.lock in create and update scripts\n- test the new configuration (+ concurrency test)\n\nRelated to CAM-12023"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDA5Njc4", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#pullrequestreview-433009678", "createdAt": "2020-06-18T07:28:01Z", "commit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoyODowMlrOGli52w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOTo1MzozOVrOGloKcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMjM2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"Error fetcing telemetry property in database: {}\", exception.getMessage());\n          \n          \n            \n                    \"Error while fetching the telemetry property from the database: {}\", exception.getMessage());", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442022363", "createdAt": "2020-06-18T07:28:02Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -739,4 +739,26 @@ public ProcessEngineException disabledHistoricInstancePermissionsException() {\n     ));\n   }\n \n+  public void noTelemetryLockPropertyFound() {\n+    logDebug(\n+        \"091\", \"No telemetry lock property found in database\");\n+  }\n+\n+  public void noTelemetryPropertyFound() {\n+    logDebug(\n+        \"092\", \"No telemetry property found in database\");\n+  }\n+\n+  public void creatingTelemetryPropertyInDatabase(Boolean telemetryEnabled) {\n+    logDebug(\n+        \"093\",\n+        \"Creating telemetry property in database with value: {}\", telemetryEnabled);\n+  }\n+\n+  public void errorFetchingTelemetryPropertyInDatabase(Exception exception) {\n+    logDebug(\n+        \"094\",\n+        \"Error fetcing telemetry property in database: {}\", exception.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMjkzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"091\", \"No telemetry lock property found in database\");\n          \n          \n            \n                    \"091\", \"No telemetry lock property found in the database\");", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442022937", "createdAt": "2020-06-18T07:29:09Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -739,4 +739,26 @@ public ProcessEngineException disabledHistoricInstancePermissionsException() {\n     ));\n   }\n \n+  public void noTelemetryLockPropertyFound() {\n+    logDebug(\n+        \"091\", \"No telemetry lock property found in database\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzA0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"092\", \"No telemetry property found in database\");\n          \n          \n            \n                    \"092\", \"No telemetry property found in the database\");", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442023047", "createdAt": "2020-06-18T07:29:23Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -739,4 +739,26 @@ public ProcessEngineException disabledHistoricInstancePermissionsException() {\n     ));\n   }\n \n+  public void noTelemetryLockPropertyFound() {\n+    logDebug(\n+        \"091\", \"No telemetry lock property found in database\");\n+  }\n+\n+  public void noTelemetryPropertyFound() {\n+    logDebug(\n+        \"092\", \"No telemetry property found in database\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyMzIxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"Creating telemetry property in database with value: {}\", telemetryEnabled);\n          \n          \n            \n                    \"Creating the telemetry property in database with the value: {}\", telemetryEnabled);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442023214", "createdAt": "2020-06-18T07:29:43Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -739,4 +739,26 @@ public ProcessEngineException disabledHistoricInstancePermissionsException() {\n     ));\n   }\n \n+  public void noTelemetryLockPropertyFound() {\n+    logDebug(\n+        \"091\", \"No telemetry lock property found in database\");\n+  }\n+\n+  public void noTelemetryPropertyFound() {\n+    logDebug(\n+        \"092\", \"No telemetry property found in database\");\n+  }\n+\n+  public void creatingTelemetryPropertyInDatabase(Boolean telemetryEnabled) {\n+    logDebug(\n+        \"093\",\n+        \"Creating telemetry property in database with value: {}\", telemetryEnabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyNzI0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  PropertyEntity telemetryPropetry =  fetchTelemetryProperty(commandContext);\n          \n          \n            \n                  PropertyEntity telemetryProperty = fetchTelemetryProperty(commandContext);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442027244", "createdAt": "2020-06-18T07:37:19Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetrySetupCommand.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;\n+import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;\n+\n+public class TelemetrySetupCommand implements Command<Void> {\n+\n+  private final static EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;\n+\n+  protected boolean telemetryEnabled;\n+\n+  public TelemetrySetupCommand() {\n+  }\n+  \n+  public TelemetrySetupCommand(boolean enabled) {\n+    this.telemetryEnabled = enabled;\n+  }\n+\n+  public Void execute(CommandContext commandContext) {\n+\n+    checkTelemetryLockExists(commandContext);\n+\n+    Boolean databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+    if (databaseTelemetryProperty == null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty == null) {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    } else if (databaseTelemetryProperty != null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty != null) {\n+        PropertyEntity telemetryProperty = fetchTelemetryProperty(commandContext);\n+        telemetryProperty.setValue(Boolean.toString(telemetryEnabled));\n+      } else {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  protected void checkTelemetryLockExists(CommandContext commandContext) {\n+    PropertyEntity telemetryLockProperty = commandContext.getPropertyManager().findPropertyById(\"telemetry.lock\");\n+    if (telemetryLockProperty == null) {\n+      LOG.noTelemetryLockPropertyFound();\n+    }\n+  }\n+\n+  private PropertyEntity fetchTelemetryProperty(CommandContext commandContext) {\n+    return commandContext.getPropertyManager().findPropertyById(\"camunda.telemetry.enabled\");\n+  }\n+\n+  protected Boolean databaseTelemetryConfiguration(CommandContext commandContext) {\n+    try {\n+      PropertyEntity telemetryPropetry =  fetchTelemetryProperty(commandContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyOTA1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                }", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442029058", "createdAt": "2020-06-18T07:40:38Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetrySetupCommand.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;\n+import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;\n+\n+public class TelemetrySetupCommand implements Command<Void> {\n+\n+  private final static EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;\n+\n+  protected boolean telemetryEnabled;\n+\n+  public TelemetrySetupCommand() {\n+  }\n+  \n+  public TelemetrySetupCommand(boolean enabled) {\n+    this.telemetryEnabled = enabled;\n+  }\n+\n+  public Void execute(CommandContext commandContext) {\n+\n+    checkTelemetryLockExists(commandContext);\n+\n+    Boolean databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+    if (databaseTelemetryProperty == null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty == null) {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    } else if (databaseTelemetryProperty != null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty != null) {\n+        PropertyEntity telemetryProperty = fetchTelemetryProperty(commandContext);\n+        telemetryProperty.setValue(Boolean.toString(telemetryEnabled));\n+      } else {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  protected void checkTelemetryLockExists(CommandContext commandContext) {\n+    PropertyEntity telemetryLockProperty = commandContext.getPropertyManager().findPropertyById(\"telemetry.lock\");\n+    if (telemetryLockProperty == null) {\n+      LOG.noTelemetryLockPropertyFound();\n+    }\n+  }\n+\n+  private PropertyEntity fetchTelemetryProperty(CommandContext commandContext) {\n+    return commandContext.getPropertyManager().findPropertyById(\"camunda.telemetry.enabled\");\n+  }\n+\n+  protected Boolean databaseTelemetryConfiguration(CommandContext commandContext) {\n+    try {\n+      PropertyEntity telemetryPropetry =  fetchTelemetryProperty(commandContext);\n+      return telemetryPropetry != null ? Boolean.parseBoolean(telemetryPropetry.getValue()) : null;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAyOTA5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                catch (Exception e) {\n          \n          \n            \n                } catch (Exception e) {", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442029093", "createdAt": "2020-06-18T07:40:42Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetrySetupCommand.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;\n+import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;\n+\n+public class TelemetrySetupCommand implements Command<Void> {\n+\n+  private final static EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;\n+\n+  protected boolean telemetryEnabled;\n+\n+  public TelemetrySetupCommand() {\n+  }\n+  \n+  public TelemetrySetupCommand(boolean enabled) {\n+    this.telemetryEnabled = enabled;\n+  }\n+\n+  public Void execute(CommandContext commandContext) {\n+\n+    checkTelemetryLockExists(commandContext);\n+\n+    Boolean databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+    if (databaseTelemetryProperty == null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty == null) {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    } else if (databaseTelemetryProperty != null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty != null) {\n+        PropertyEntity telemetryProperty = fetchTelemetryProperty(commandContext);\n+        telemetryProperty.setValue(Boolean.toString(telemetryEnabled));\n+      } else {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  protected void checkTelemetryLockExists(CommandContext commandContext) {\n+    PropertyEntity telemetryLockProperty = commandContext.getPropertyManager().findPropertyById(\"telemetry.lock\");\n+    if (telemetryLockProperty == null) {\n+      LOG.noTelemetryLockPropertyFound();\n+    }\n+  }\n+\n+  private PropertyEntity fetchTelemetryProperty(CommandContext commandContext) {\n+    return commandContext.getPropertyManager().findPropertyById(\"camunda.telemetry.enabled\");\n+  }\n+\n+  protected Boolean databaseTelemetryConfiguration(CommandContext commandContext) {\n+    try {\n+      PropertyEntity telemetryPropetry =  fetchTelemetryProperty(commandContext);\n+      return telemetryPropetry != null ? Boolean.parseBoolean(telemetryPropetry.getValue()) : null;\n+    }\n+    catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwNzU1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final static EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;\n          \n          \n            \n              protected static final EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442107559", "createdAt": "2020-06-18T09:52:00Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetrySetupCommand.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;\n+import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;\n+\n+public class TelemetrySetupCommand implements Command<Void> {\n+\n+  private final static EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwNzcyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private PropertyEntity fetchTelemetryProperty(CommandContext commandContext) {\n          \n          \n            \n              protected PropertyEntity fetchTelemetryProperty(CommandContext commandContext) {", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442107724", "createdAt": "2020-06-18T09:52:17Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetrySetupCommand.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+import org.camunda.bpm.engine.impl.db.EnginePersistenceLogger;\n+import org.camunda.bpm.engine.impl.db.entitymanager.DbEntityManager;\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.PropertyEntity;\n+\n+public class TelemetrySetupCommand implements Command<Void> {\n+\n+  private final static EnginePersistenceLogger LOG = ProcessEngineLogger.PERSISTENCE_LOGGER;\n+\n+  protected boolean telemetryEnabled;\n+\n+  public TelemetrySetupCommand() {\n+  }\n+  \n+  public TelemetrySetupCommand(boolean enabled) {\n+    this.telemetryEnabled = enabled;\n+  }\n+\n+  public Void execute(CommandContext commandContext) {\n+\n+    checkTelemetryLockExists(commandContext);\n+\n+    Boolean databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+    if (databaseTelemetryProperty == null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty == null) {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    } else if (databaseTelemetryProperty != null) {\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if(databaseTelemetryProperty != null) {\n+        PropertyEntity telemetryProperty = fetchTelemetryProperty(commandContext);\n+        telemetryProperty.setValue(Boolean.toString(telemetryEnabled));\n+      } else {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      }\n+    }\n+\n+    return null;\n+  }\n+\n+  protected void checkTelemetryLockExists(CommandContext commandContext) {\n+    PropertyEntity telemetryLockProperty = commandContext.getPropertyManager().findPropertyById(\"telemetry.lock\");\n+    if (telemetryLockProperty == null) {\n+      LOG.noTelemetryLockPropertyFound();\n+    }\n+  }\n+\n+  private PropertyEntity fetchTelemetryProperty(CommandContext commandContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjEwODUzMQ==", "bodyText": "Let's remove this check and always insert the telemetry enabled property on engine startup. We probably also don't need to pass the flag to the command since we can access the engine config inside the command.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442108531", "createdAt": "2020-06-18T09:53:39Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/ProcessEngineImpl.java", "diffHunk": "@@ -144,6 +145,10 @@ public ProcessEngineImpl(ProcessEngineConfigurationImpl processEngineConfigurati\n   protected void executeSchemaOperations() {\n     commandExecutorSchemaOperations.execute(processEngineConfiguration.getSchemaOperationsCommand());\n     commandExecutorSchemaOperations.execute(processEngineConfiguration.getHistoryLevelCommand());\n+    \n+    if (processEngineConfiguration.isTelemetryEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fda8ea6ae8f689322a9c4186348040d67612a7f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1eac762aa3733536e938a1a6886c5f5604c591f4", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/1eac762aa3733536e938a1a6886c5f5604c591f4", "committedDate": "2020-06-19T09:36:12Z", "message": "chore(engine): init/update telemetry property in bootstrap command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcfce8f515a6fe75cbdda943ec79bb60fd5b48ca", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/fcfce8f515a6fe75cbdda943ec79bb60fd5b48ca", "committedDate": "2020-06-19T09:40:58Z", "message": "chore(upgrade-scripts): remove TODO comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbebac66a678a64806758a769ada849ef72fde94", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/fbebac66a678a64806758a769ada849ef72fde94", "committedDate": "2020-06-19T09:46:47Z", "message": "chore(engine): remove TODO comment in telemetry helper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fdeb4a66c26ddcddc70fc6daae4ea9760ecdcb2", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/8fdeb4a66c26ddcddc70fc6daae4ea9760ecdcb2", "committedDate": "2020-06-19T09:57:06Z", "message": "chore(engine): expose insert entity in the property manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd5bba65a95375531ed53b73ce779ecc34506fba", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/fd5bba65a95375531ed53b73ce779ecc34506fba", "committedDate": "2020-06-19T11:41:01Z", "message": "fix(test): adjust test according to the default behaviour"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDQ5NDg1", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#pullrequestreview-434049485", "createdAt": "2020-06-19T12:48:42Z", "commit": {"oid": "fd5bba65a95375531ed53b73ce779ecc34506fba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjo0ODo0MlrOGmTnvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjo0ODo0MlrOGmTnvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgyMDU0Mw==", "bodyText": "Nice dirty check! :)", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#discussion_r442820543", "createdAt": "2020-06-19T12:48:42Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/BootstrapEngineCommand.java", "diffHunk": "@@ -85,4 +89,50 @@ protected boolean isHistoryCleanupEnabled(CommandContext commandContext) {\n         .isHistoryCleanupEnabled();\n   }\n \n+  public void configureTelemetryProperty(CommandContext commandContext) {\n+    try {\n+\n+      checkTelemetryLockExists(commandContext);\n+\n+      commandContext.getPropertyManager().acquireExclusiveLockForTelemetry();\n+      PropertyEntity databaseTelemetryProperty = databaseTelemetryConfiguration(commandContext);\n+\n+      if (databaseTelemetryProperty == null) {\n+        LOG.noTelemetryPropertyFound();\n+        createTelemetryProperty(commandContext);\n+      } else {\n+        boolean oldValue = Boolean.parseBoolean(databaseTelemetryProperty.getValue());\n+        boolean currentValue = Context.getProcessEngineConfiguration().isTelemetryEnabled();\n+        if(currentValue != oldValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd5bba65a95375531ed53b73ce779ecc34506fba"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NjYwNjg2", "url": "https://github.com/camunda/camunda-bpm-platform/pull/859#pullrequestreview-434660686", "createdAt": "2020-06-22T07:20:10Z", "commit": {"oid": "fd5bba65a95375531ed53b73ce779ecc34506fba"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}