{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MjQwMTY5", "number": 1120, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDozOTozN1rOE3u4fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMjoxMzo1OFrOE4Im5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2ODc1MjYwOnYy", "diffSide": "RIGHT", "path": "webapps/ui/cockpit/src/modules/components/Clipboard/Clipboard.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDozOTozN1rOHxP8iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDozOTozN1rOHxP8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQwMzUyOA==", "bodyText": "So happy we dropped IE support :D", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1120#discussion_r521403528", "createdAt": "2020-11-11T14:39:37Z", "author": {"login": "marstamm"}, "path": "webapps/ui/cockpit/src/modules/components/Clipboard/Clipboard.js", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useEffect, useRef, useState } from \"react\";\n+import { Button, Glyphicon, OverlayTrigger, Tooltip } from \"react-bootstrap\";\n+import classNames from \"classnames\";\n+import translate from \"utils/translation\";\n+\n+import \"./Clipboard.scss\";\n+\n+export default function({ children, text }) {\n+  const [icon, setIcon] = useState(\"copy\");\n+  const [needsResize, setNeedsResize] = useState(false);\n+\n+  const parentRef = useRef();\n+  const contentRef = useRef();\n+\n+  useEffect(() => {\n+    // This makes sure we only truncate the value when necessary\n+    const calculateSize = () => {\n+      const content = contentRef.current;\n+      const parent = parentRef.current;\n+      const icon = parent.querySelector(\".btn\"); // Can't use ref as it is a react-bootstrap element\n+      const elementStyle = window.getComputedStyle(parent);\n+\n+      let contentWidth = 1;\n+      let containerWidth = 0;\n+      if (content && icon) {\n+        contentWidth = content.offsetWidth + icon.offsetWidth;\n+        containerWidth =\n+          parseInt(elementStyle.width) -\n+          parseInt(elementStyle.paddingRight) -\n+          parseInt(elementStyle.paddingLeft);\n+      }\n+      if (contentWidth - containerWidth > 0) {\n+        setNeedsResize(true);\n+      } else {\n+        setNeedsResize(false);\n+      }\n+    };\n+    calculateSize();\n+\n+    window.addEventListener(\"resize\", calculateSize);\n+    return () => window.removeEventListener(\"resize\", calculateSize);\n+  }, []);\n+\n+  async function copyToClipboard() {\n+    try {\n+      await navigator.clipboard.writeText(text);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cce5242050eee9e895889880304c7c1663b1edb"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MjY5ODExOnYy", "diffSide": "RIGHT", "path": "webapps/ui/cockpit/src/plugins/cockpit.processInstance.runtime.tab/userTasks/UserTasks.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMTowMDowNVrOHx1hnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMjozMDo1MlrOHx4qdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxOTIzMQ==", "bodyText": "Let's make the import order consistent.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1120#discussion_r522019231", "createdAt": "2020-11-12T11:00:05Z", "author": {"login": "tasso94"}, "path": "webapps/ui/cockpit/src/plugins/cockpit.processInstance.runtime.tab/userTasks/UserTasks.js", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useState, useEffect } from \"react\";\n+import withFilter from \"../../../components/ProcessInstance/HOC/withFilter\";\n+import withActivityInstanceMap from \"../../../components/ProcessInstance/HOC/withActivityInstanceMap\";\n+import { paginateComponent } from \"components/Pagination\";\n+\n+import { getEngine } from \"utils/config\";\n+import { formatDate } from \"utils/formatting\";\n+import { getItem, setItem } from \"utils/localstorage\";\n+import { post } from \"utils/request\";\n+\n+import {\n+  Clipboard,\n+  LinkButton,\n+  LoadingIndicator,\n+  Pagination,\n+  Table\n+} from \"components\";\n+import AssigneeEdit from \"./AssigneeEdit\";\n+import { UserAction, GroupAction } from \"./Actions\";\n+\n+import \"./UserTasks.scss\";\n+import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n+import translate from \"utils/translation\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cce5242050eee9e895889880304c7c1663b1edb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA3MDY0Nw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1120#discussion_r522070647", "createdAt": "2020-11-12T12:30:52Z", "author": {"login": "marstamm"}, "path": "webapps/ui/cockpit/src/plugins/cockpit.processInstance.runtime.tab/userTasks/UserTasks.js", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useState, useEffect } from \"react\";\n+import withFilter from \"../../../components/ProcessInstance/HOC/withFilter\";\n+import withActivityInstanceMap from \"../../../components/ProcessInstance/HOC/withActivityInstanceMap\";\n+import { paginateComponent } from \"components/Pagination\";\n+\n+import { getEngine } from \"utils/config\";\n+import { formatDate } from \"utils/formatting\";\n+import { getItem, setItem } from \"utils/localstorage\";\n+import { post } from \"utils/request\";\n+\n+import {\n+  Clipboard,\n+  LinkButton,\n+  LoadingIndicator,\n+  Pagination,\n+  Table\n+} from \"components\";\n+import AssigneeEdit from \"./AssigneeEdit\";\n+import { UserAction, GroupAction } from \"./Actions\";\n+\n+import \"./UserTasks.scss\";\n+import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n+import translate from \"utils/translation\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjAxOTIzMQ=="}, "originalCommit": {"oid": "2cce5242050eee9e895889880304c7c1663b1edb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3Mjk2NzQyOnYy", "diffSide": "RIGHT", "path": "webapps/ui/cockpit/src/plugins/cockpit.processInstance.runtime.tab/userTasks/UserTasks.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMjoxMzo1OFrOHx4FsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMjozNjowM1rOHx41kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2MTIzMw==", "bodyText": "\ud83d\udc9a\nI wasn't aware that the ?. operator made it to JavaScript. I already knew it from Groovy.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1120#discussion_r522061233", "createdAt": "2020-11-12T12:13:58Z", "author": {"login": "tasso94"}, "path": "webapps/ui/cockpit/src/plugins/cockpit.processInstance.runtime.tab/userTasks/UserTasks.js", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useState, useEffect } from \"react\";\n+import withFilter from \"../../../components/ProcessInstance/HOC/withFilter\";\n+import withActivityInstanceMap from \"../../../components/ProcessInstance/HOC/withActivityInstanceMap\";\n+import { paginateComponent } from \"components/Pagination\";\n+\n+import { getEngine } from \"utils/config\";\n+import { formatDate } from \"utils/formatting\";\n+import { getItem, setItem } from \"utils/localstorage\";\n+import { post } from \"utils/request\";\n+\n+import {\n+  Clipboard,\n+  LinkButton,\n+  LoadingIndicator,\n+  Pagination,\n+  Table\n+} from \"components\";\n+import AssigneeEdit from \"./AssigneeEdit\";\n+import { UserAction, GroupAction } from \"./Actions\";\n+\n+import \"./UserTasks.scss\";\n+import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n+import translate from \"utils/translation\";\n+import withBpmn from \"../../../components/ProcessInstance/HOC/withBpmn\";\n+\n+function UserTasks({\n+  processInstanceId,\n+  filter,\n+  setFilter,\n+  activityIdToInstancesMap,\n+  bpmnElements,\n+  startingPage = 1\n+}) {\n+  const [userTasks, setUserTasks] = useState(null);\n+  const [userTasksCount, setUserTasksCount] = useState();\n+  const [sortOrder, setSortOrder] = useState(\n+    getItem(\"sortPIUserTaskTab\", {\n+      sortBy: \"created\",\n+      sortOrder: \"desc\"\n+    })\n+  );\n+  const [queryObject, setQueryObject] = useState({\n+    activityInstanceIdIn: filter.activityInstanceIds || [],\n+    processInstanceId: processInstanceId,\n+    sorting: [sortOrder]\n+  });\n+  const [loadingState, setLoadingState] = useState(\"LOADING\");\n+  const [page, setPage] = useState(startingPage);\n+\n+  // Generate new Query Object on filter or sort change\n+  useEffect(() => {\n+    let newQueryObject = {\n+      activityInstanceIdIn: filter.activityInstanceIds,\n+      processInstanceId: processInstanceId,\n+      sorting: [sortOrder]\n+    };\n+\n+    if (\n+      JSON.stringify(queryObject.activityInstanceIds || []) !==\n+      JSON.stringify(filter.activityInstanceIds || [])\n+    ) {\n+      setPage(1);\n+    }\n+\n+    if (!newQueryObject.activityInstanceIdIn) {\n+      delete newQueryObject.activityInstanceIdIn;\n+    }\n+\n+    // Filter changes often, only update the Query object if we need to update it\n+    if (JSON.stringify(newQueryObject) !== JSON.stringify(queryObject)) {\n+      setQueryObject(newQueryObject);\n+    }\n+  }, [\n+    filter,\n+    processInstanceId,\n+    queryObject,\n+    queryObject.activityInstanceIds,\n+    sortOrder\n+  ]);\n+\n+  // Fetch everything\n+  useEffect(() => {\n+    setLoadingState(\"LOADING\");\n+    post(\n+      `%ENGINE_API%/task?maxResults=50&firstResult=${(page - 1) * 50}`,\n+      queryObject\n+    )\n+      .then(res => res.json())\n+      .then(setUserTasks)\n+      .then(() => setLoadingState(\"DONE\"));\n+  }, [page, queryObject]);\n+\n+  // Fetch new Task count\n+  useEffect(() => {\n+    post(\"%ENGINE_API%/task/count\", queryObject)\n+      .then(res => res.json())\n+      .then(json => setUserTasksCount(json.count));\n+  }, [queryObject]);\n+\n+  if (loadingState === \"LOADING\") {\n+    return <LoadingIndicator />;\n+  }\n+\n+  if (!userTasks.length) {\n+    return <span>No user tasks</span>;\n+  }\n+\n+  const handleSortChange = property => {\n+    const sortObj = {\n+      sortBy: property,\n+      sortOrder:\n+        sortOrder.sortBy === property\n+          ? sortOrder.sortOrder === \"desc\"\n+            ? \"asc\"\n+            : \"desc\"\n+          : \"asc\"\n+    };\n+    setItem(\"sortPIUserTaskTab\", sortObj);\n+    setSortOrder(sortObj);\n+  };\n+\n+  const handleSearch = activity => {\n+    setFilter({\n+      ...filter,\n+      activityIds: [activity],\n+      activityInstanceIds: [\n+        activityIdToInstancesMap[activity.taskDefinitionKey].filter(execution =>\n+          execution.executionIds.includes(activity.executionId)\n+        )[0].id\n+      ]\n+    });\n+  };\n+\n+  const rows = [\n+    { searchQuery: \"nameCaseInsensitive\", label: \"Activity\" },\n+    { searchQuery: \"assignee\", label: \"Assignee\" },\n+    { label: \"Owner\" },\n+    { searchQuery: \"created\", label: \"Creation Date\" },\n+    { searchQuery: \"dueDate\", label: \"Due Date\" },\n+    { searchQuery: \"followUpDate\", label: \"Follow Up Date\" },\n+    { searchQuery: \"priority\", label: \"Priority\" },\n+    { label: \"Delegation State\" },\n+    { searchQuery: \"id\", label: \"Task ID\" },\n+    { label: \"Action\" }\n+  ];\n+\n+  return (\n+    <>\n+      <Table\n+        className=\"UserTasks\"\n+        head={rows.map((heading, idx) => {\n+          return (\n+            <Table.Head\n+              key={idx}\n+              onSort={\n+                heading.searchQuery\n+                  ? () => handleSortChange(heading.searchQuery)\n+                  : null\n+              }\n+              sortOrder={\n+                sortOrder.sortBy === heading.searchQuery\n+                  ? sortOrder.sortOrder\n+                  : null\n+              }\n+            >\n+              {heading.label}\n+            </Table.Head>\n+          );\n+        })}\n+      >\n+        {userTasks.map((row, idx) => {\n+          return (\n+            <Table.Row key={idx}>\n+              <Table.Cell>\n+                <LinkButton onClick={() => handleSearch(row)}>\n+                  {bpmnElements[row.taskDefinitionKey]?.name ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cce5242050eee9e895889880304c7c1663b1edb"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA3MzQ4OQ==", "bodyText": "Yeah, but our linter does not fully support it for functions yet. So element.function?.() does not work", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1120#discussion_r522073489", "createdAt": "2020-11-12T12:36:03Z", "author": {"login": "marstamm"}, "path": "webapps/ui/cockpit/src/plugins/cockpit.processInstance.runtime.tab/userTasks/UserTasks.js", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useState, useEffect } from \"react\";\n+import withFilter from \"../../../components/ProcessInstance/HOC/withFilter\";\n+import withActivityInstanceMap from \"../../../components/ProcessInstance/HOC/withActivityInstanceMap\";\n+import { paginateComponent } from \"components/Pagination\";\n+\n+import { getEngine } from \"utils/config\";\n+import { formatDate } from \"utils/formatting\";\n+import { getItem, setItem } from \"utils/localstorage\";\n+import { post } from \"utils/request\";\n+\n+import {\n+  Clipboard,\n+  LinkButton,\n+  LoadingIndicator,\n+  Pagination,\n+  Table\n+} from \"components\";\n+import AssigneeEdit from \"./AssigneeEdit\";\n+import { UserAction, GroupAction } from \"./Actions\";\n+\n+import \"./UserTasks.scss\";\n+import { OverlayTrigger, Tooltip } from \"react-bootstrap\";\n+import translate from \"utils/translation\";\n+import withBpmn from \"../../../components/ProcessInstance/HOC/withBpmn\";\n+\n+function UserTasks({\n+  processInstanceId,\n+  filter,\n+  setFilter,\n+  activityIdToInstancesMap,\n+  bpmnElements,\n+  startingPage = 1\n+}) {\n+  const [userTasks, setUserTasks] = useState(null);\n+  const [userTasksCount, setUserTasksCount] = useState();\n+  const [sortOrder, setSortOrder] = useState(\n+    getItem(\"sortPIUserTaskTab\", {\n+      sortBy: \"created\",\n+      sortOrder: \"desc\"\n+    })\n+  );\n+  const [queryObject, setQueryObject] = useState({\n+    activityInstanceIdIn: filter.activityInstanceIds || [],\n+    processInstanceId: processInstanceId,\n+    sorting: [sortOrder]\n+  });\n+  const [loadingState, setLoadingState] = useState(\"LOADING\");\n+  const [page, setPage] = useState(startingPage);\n+\n+  // Generate new Query Object on filter or sort change\n+  useEffect(() => {\n+    let newQueryObject = {\n+      activityInstanceIdIn: filter.activityInstanceIds,\n+      processInstanceId: processInstanceId,\n+      sorting: [sortOrder]\n+    };\n+\n+    if (\n+      JSON.stringify(queryObject.activityInstanceIds || []) !==\n+      JSON.stringify(filter.activityInstanceIds || [])\n+    ) {\n+      setPage(1);\n+    }\n+\n+    if (!newQueryObject.activityInstanceIdIn) {\n+      delete newQueryObject.activityInstanceIdIn;\n+    }\n+\n+    // Filter changes often, only update the Query object if we need to update it\n+    if (JSON.stringify(newQueryObject) !== JSON.stringify(queryObject)) {\n+      setQueryObject(newQueryObject);\n+    }\n+  }, [\n+    filter,\n+    processInstanceId,\n+    queryObject,\n+    queryObject.activityInstanceIds,\n+    sortOrder\n+  ]);\n+\n+  // Fetch everything\n+  useEffect(() => {\n+    setLoadingState(\"LOADING\");\n+    post(\n+      `%ENGINE_API%/task?maxResults=50&firstResult=${(page - 1) * 50}`,\n+      queryObject\n+    )\n+      .then(res => res.json())\n+      .then(setUserTasks)\n+      .then(() => setLoadingState(\"DONE\"));\n+  }, [page, queryObject]);\n+\n+  // Fetch new Task count\n+  useEffect(() => {\n+    post(\"%ENGINE_API%/task/count\", queryObject)\n+      .then(res => res.json())\n+      .then(json => setUserTasksCount(json.count));\n+  }, [queryObject]);\n+\n+  if (loadingState === \"LOADING\") {\n+    return <LoadingIndicator />;\n+  }\n+\n+  if (!userTasks.length) {\n+    return <span>No user tasks</span>;\n+  }\n+\n+  const handleSortChange = property => {\n+    const sortObj = {\n+      sortBy: property,\n+      sortOrder:\n+        sortOrder.sortBy === property\n+          ? sortOrder.sortOrder === \"desc\"\n+            ? \"asc\"\n+            : \"desc\"\n+          : \"asc\"\n+    };\n+    setItem(\"sortPIUserTaskTab\", sortObj);\n+    setSortOrder(sortObj);\n+  };\n+\n+  const handleSearch = activity => {\n+    setFilter({\n+      ...filter,\n+      activityIds: [activity],\n+      activityInstanceIds: [\n+        activityIdToInstancesMap[activity.taskDefinitionKey].filter(execution =>\n+          execution.executionIds.includes(activity.executionId)\n+        )[0].id\n+      ]\n+    });\n+  };\n+\n+  const rows = [\n+    { searchQuery: \"nameCaseInsensitive\", label: \"Activity\" },\n+    { searchQuery: \"assignee\", label: \"Assignee\" },\n+    { label: \"Owner\" },\n+    { searchQuery: \"created\", label: \"Creation Date\" },\n+    { searchQuery: \"dueDate\", label: \"Due Date\" },\n+    { searchQuery: \"followUpDate\", label: \"Follow Up Date\" },\n+    { searchQuery: \"priority\", label: \"Priority\" },\n+    { label: \"Delegation State\" },\n+    { searchQuery: \"id\", label: \"Task ID\" },\n+    { label: \"Action\" }\n+  ];\n+\n+  return (\n+    <>\n+      <Table\n+        className=\"UserTasks\"\n+        head={rows.map((heading, idx) => {\n+          return (\n+            <Table.Head\n+              key={idx}\n+              onSort={\n+                heading.searchQuery\n+                  ? () => handleSortChange(heading.searchQuery)\n+                  : null\n+              }\n+              sortOrder={\n+                sortOrder.sortBy === heading.searchQuery\n+                  ? sortOrder.sortOrder\n+                  : null\n+              }\n+            >\n+              {heading.label}\n+            </Table.Head>\n+          );\n+        })}\n+      >\n+        {userTasks.map((row, idx) => {\n+          return (\n+            <Table.Row key={idx}>\n+              <Table.Cell>\n+                <LinkButton onClick={() => handleSearch(row)}>\n+                  {bpmnElements[row.taskDefinitionKey]?.name ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA2MTIzMw=="}, "originalCommit": {"oid": "2cce5242050eee9e895889880304c7c1663b1edb"}, "originalPosition": 193}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4436, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}