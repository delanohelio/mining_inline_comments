{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3OTQwMjgx", "number": 1048, "title": "CAM-12524: fix(engine): detect crdb errors on tx commit", "bodyText": "When CockroachDB is used, a CRDB concurrency error may occur on transaction commit.\nTo ensure that these errors are still detected as OLEs, we must catch them and wrap\nthem in a CrdbTransactionRetryException\n\nRelated to CAM-12524", "createdAt": "2020-10-05T15:33:18Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1048", "merged": true, "mergeCommit": {"oid": "adbbef61fbfc8c323f1ea0941279f92c1aa3cb3c"}, "closed": true, "closedAt": "2020-11-11T16:33:16Z", "author": {"login": "koevskinikola"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP5hNtABqjM4NDU4NjcyNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbLrz8ABqjM5Nzk3MjYwMDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1e10cab4fc3cfb4dcb777533d66afa4ee24fa714", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/1e10cab4fc3cfb4dcb777533d66afa4ee24fa714", "committedDate": "2020-10-05T15:31:26Z", "message": "fix(engine): detect crdb errors on tx commit\n\n* When CockroachDB is used, a CRDB concurrency error may occur on transaction commit.\n  To ensure that these errors are still detected as OLEs, we must catch them and wrap\n  them in a CrdbTransactionRetryException\n\nRelated to CAM-12524"}, "afterCommit": {"oid": "dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7", "committedDate": "2020-10-06T13:55:27Z", "message": "fix(engine): detect crdb errors on tx commit\n\n* When CockroachDB is used, a CRDB concurrency error may occur on transaction commit.\n  To ensure that these errors are still detected as OLEs, we must catch them and wrap\n  them in a CrdbTransactionRetryException\n\nRelated to CAM-12524"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTQwODM1", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1048#pullrequestreview-510540835", "createdAt": "2020-10-16T14:46:22Z", "commit": {"oid": "dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDo0NjoyMlrOHjCdCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTowNTo1NFrOHjDzdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwMjQwOA==", "bodyText": "If people use this constructor, they will run into a NullPointerException in the catch block. If you we want to keep this constructor because it is strictly speaking public API, then we should make rule out the possibility for the NPE and instead degrade the service (e.g. CRDB exception handling doesn't work then).", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1048#discussion_r506502408", "createdAt": "2020-10-16T14:46:22Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine-spring/core/src/main/java/org/camunda/bpm/engine/spring/SpringTransactionInterceptor.java", "diffHunk": "@@ -31,21 +34,36 @@\n   \n   protected PlatformTransactionManager transactionManager;\n   protected int transactionPropagation;\n+  protected ProcessEngineConfigurationImpl processEngineConfiguration;\n   \n   public SpringTransactionInterceptor(PlatformTransactionManager transactionManager, int transactionPropagation) {\n+    this(transactionManager, transactionPropagation, null);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwMzQyNg==", "bodyText": "I cannot follow why this is needed and I also struggle to look this up in Spring myself. Can you please provide a better explanation in code here? Else we will have trouble touching this code again in the future.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1048#discussion_r506503426", "createdAt": "2020-10-16T14:47:33Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java", "diffHunk": "@@ -302,7 +304,34 @@ public static boolean isCrdbConcurrencyConflict(Throwable cause) {\n     return false;\n   }\n \n+  /**\n+   * In cases where CockroachDB is used, and a failed operation is detected,\n+   * the method checks if the exception was caused by a CockroachDB\n+   * <code>TransactionRetryException</code>. This method may be used when a\n+   * CRDB Error occurs on commit, and a Command Context is not available, as\n+   * it has already been closed. This is the case with Spring/JTA transaction\n+   * interceptors.\n+   *\n+   * @param cause for which an operation failed\n+   * @param configuration of the Process Engine\n+   * @return true if the failure was due to a CRDB <code>TransactionRetryException</code>.\n+   *          Otherwise, it's false.\n+   */\n+  public static boolean isCrdbConcurrencyConflictOnCommit(Throwable cause, ProcessEngineConfigurationImpl configuration) {\n+    // only check when CRDB is used\n+    if (DatabaseUtil.checkDatabaseType(configuration, DbSqlSessionFactory.CRDB)) {\n+      // with externally managed transactions, the real cause is sometimes suppressed\n+      List<Throwable> causes = new ArrayList<>(Arrays.asList(cause.getSuppressed()));\n+      causes.add(cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUwNDg3Ng==", "bodyText": "Same possibility for NullPointerException here. I guess here we can remove the constructor, because it's impl.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1048#discussion_r506504876", "createdAt": "2020-10-16T14:49:26Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/interceptor/JtaTransactionInterceptor.java", "diffHunk": "@@ -28,21 +28,31 @@\n import javax.transaction.TransactionManager;\n \n import org.camunda.bpm.engine.impl.ProcessEngineLogger;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n import org.camunda.bpm.engine.impl.cmd.CommandLogger;\n+import org.camunda.bpm.engine.impl.db.sql.DbSqlSession;\n \n /**\n  * @author Guillaume Nodet\n  */\n public class JtaTransactionInterceptor extends CommandInterceptor {\n \n-  private final static CommandLogger LOG = ProcessEngineLogger.CMD_LOGGER;\n+  protected final static CommandLogger LOG = ProcessEngineLogger.CMD_LOGGER;\n \n-  private final TransactionManager transactionManager;\n-  private final boolean requiresNew;\n+  protected final TransactionManager transactionManager;\n+  protected final boolean requiresNew;\n+  protected ProcessEngineConfigurationImpl processEngineConfiguration;\n \n   public JtaTransactionInterceptor(TransactionManager transactionManager, boolean requiresNew) {\n+    this(transactionManager, requiresNew, null);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyNDUzNA==", "bodyText": "Can we at least write a unit test directly for the SpringTransactionInterceptor class? I.e. mock the transaction manager interface and then test the logic?\nSame for JTA.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1048#discussion_r506524534", "createdAt": "2020-10-16T15:05:54Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine-spring/core/src/test/java/org/camunda/bpm/engine/spring/test/transaction/crdb/CrdbTxRetryOnCommitTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.spring.test.transaction.crdb;\n+\n+import org.camunda.bpm.engine.CrdbTransactionRetryException;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.test.Deployment;\n+import org.camunda.bpm.engine.test.ProcessEngineRule;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+/**\n+ * This tests simulates a CockroachDB concurrency error on TX commit.\n+ */\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\"classpath:org/camunda/bpm/engine/spring/test/transaction/\" +\n+    \"CrdbTransactionIntegrationTest-applicationContext.xml\"})\n+public class CrdbTxRetryOnCommitTest {\n+\n+  @Rule\n+  @Autowired\n+  public ProcessEngineRule rule;\n+\n+  @Rule\n+  public ExpectedException thrown = ExpectedException.none();\n+\n+  @Autowired\n+  public ProcessEngineConfigurationImpl processEngineConfiguration;\n+\n+  /**\n+   * Scenario can't be successfully run without modifying runtime code\n+   * since we only use H2 in the Spring integration tests, and this test\n+   * requires the hard-coded CRDB check to work.\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/dbaab5a3d730f2bdaecbf5aad10214b06ee9eeb7", "committedDate": "2020-10-06T13:55:27Z", "message": "fix(engine): detect crdb errors on tx commit\n\n* When CockroachDB is used, a CRDB concurrency error may occur on transaction commit.\n  To ensure that these errors are still detected as OLEs, we must catch them and wrap\n  them in a CrdbTransactionRetryException\n\nRelated to CAM-12524"}, "afterCommit": {"oid": "1f7f88ad511cf4c212222184bccaeb9e89be2ac3", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/1f7f88ad511cf4c212222184bccaeb9e89be2ac3", "committedDate": "2020-10-26T13:27:05Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbe65eb1d419033e404b684f539fed042f797e51", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/cbe65eb1d419033e404b684f539fed042f797e51", "committedDate": "2020-11-06T09:36:44Z", "message": "fix(engine): detect crdb errors on tx commit\n\n* When CockroachDB is used, a CRDB concurrency error may occur on transaction commit.\n  To ensure that these errors are still detected as OLEs, we must catch them and wrap\n  them in a CrdbTransactionRetryException\n\nRelated to CAM-12524"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "479953419e6e4875651d5f9fe13c6af698b5c865", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/479953419e6e4875651d5f9fe13c6af698b5c865", "committedDate": "2020-11-06T09:36:44Z", "message": "SQUASH ME: implement review hints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a27fbc6f63dadf07b8739bb448f9b05aa037d273", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a27fbc6f63dadf07b8739bb448f9b05aa037d273", "committedDate": "2020-11-06T11:11:11Z", "message": "SQUASH ME: test CRDB TX Retry error on commit\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f7f88ad511cf4c212222184bccaeb9e89be2ac3", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/1f7f88ad511cf4c212222184bccaeb9e89be2ac3", "committedDate": "2020-10-26T13:27:05Z", "message": "WIP"}, "afterCommit": {"oid": "a27fbc6f63dadf07b8739bb448f9b05aa037d273", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a27fbc6f63dadf07b8739bb448f9b05aa037d273", "committedDate": "2020-11-06T11:11:11Z", "message": "SQUASH ME: test CRDB TX Retry error on commit\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzYyNTUw", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1048#pullrequestreview-527362550", "createdAt": "2020-11-10T16:08:20Z", "commit": {"oid": "f3acf71805f8832d56a1151eccf915d0ed4197f7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "277e7000e4c20d43a04c3c8349a1f0b32281f283", "author": {"user": {"login": "ThorbenLindhauer", "name": "Thorben Lindhauer"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/277e7000e4c20d43a04c3c8349a1f0b32281f283", "committedDate": "2020-11-10T16:09:48Z", "message": "add test for JTA interceptor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3acf71805f8832d56a1151eccf915d0ed4197f7", "author": {"user": {"login": "ThorbenLindhauer", "name": "Thorben Lindhauer"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/f3acf71805f8832d56a1151eccf915d0ed4197f7", "committedDate": "2020-11-10T16:04:28Z", "message": "add test for JTA interceptor"}, "afterCommit": {"oid": "277e7000e4c20d43a04c3c8349a1f0b32281f283", "author": {"user": {"login": "ThorbenLindhauer", "name": "Thorben Lindhauer"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/277e7000e4c20d43a04c3c8349a1f0b32281f283", "committedDate": "2020-11-10T16:09:48Z", "message": "add test for JTA interceptor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2139, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}