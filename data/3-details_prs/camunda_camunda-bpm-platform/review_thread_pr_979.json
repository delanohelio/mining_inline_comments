{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNzQ1MjM2", "number": 979, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzozNlrOEjeS7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzo0ODozN1rOEjmheQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjMxOTgyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzozNlrOHR11kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzozNlrOHR11kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2OTkwNw==", "bodyText": "Just an understanding question: do we need a map here, would a list/set of Strings be sufficient? we are not adding entries with false here, are we? Being in the list already means it's used, right?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/979#discussion_r488469907", "createdAt": "2020-09-15T08:07:36Z", "author": {"login": "tmetzke"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Internals.java", "diffHunk": "@@ -24,11 +24,14 @@\n public class Internals {\n \n   public static final String SERIALIZED_APPLICATION_SERVER = \"application-server\";\n+  public static final String SERIALIZED_CAMUNDA_INTEGRATION = \"camunda-integration\";\n \n   protected Database database;\n   @SerializedName(value = SERIALIZED_APPLICATION_SERVER)\n   protected ApplicationServer applicationServer;\n   protected Map<String, Command> commands;\n+  @SerializedName(value = SERIALIZED_CAMUNDA_INTEGRATION)\n+  protected Map<String, Object> camundaIntegration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225def8dd0367e503cd244c75ca755f91ba012bc"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NzY2Nzc3OnYy", "diffSide": "RIGHT", "path": "distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzo0ODozN1rOHSCzjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMzo1MToxNlrOHSC7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4MjM4MA==", "bodyText": "this might be redundant considering the bellow assertion", "url": "https://github.com/camunda/camunda-bpm-platform/pull/979#discussion_r488682380", "createdAt": "2020-09-15T13:48:37Z", "author": {"login": "yanavasileva"}, "path": "distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.run.test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.camunda.bpm.engine.ProcessEngine;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;\n+import org.camunda.bpm.engine.impl.telemetry.dto.Data;\n+import org.camunda.bpm.run.CamundaBpmRun;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = { CamundaBpmRun.class }, webEnvironment = WebEnvironment.DEFINED_PORT)\n+public class TelemetryDataTest {\n+\n+  @Autowired\n+  ProcessEngine engine;\n+\n+  @Test\n+  public void shouldAddCamundaIntegration() {\n+    // given\n+    ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) engine.getProcessEngineConfiguration();\n+\n+    // then\n+    Data telemetryData = processEngineConfiguration.getTelemetryData();\n+    Set<String> camundaIntegration = telemetryData.getProduct().getInternals().getCamundaIntegration();\n+    assertThat(camundaIntegration.size()).isEqualTo(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c56fc8cbcd01db5e1ca45c1cd194f47142e843b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4NDQ3NA==", "bodyText": "I would agree, yeah. \ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/979#discussion_r488684474", "createdAt": "2020-09-15T13:51:16Z", "author": {"login": "tmetzke"}, "path": "distro/run/core/src/test/java/org/camunda/bpm/run/test/TelemetryDataTest.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.run.test;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Set;\n+\n+import org.camunda.bpm.engine.ProcessEngine;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.impl.telemetry.CamundaIntegration;\n+import org.camunda.bpm.engine.impl.telemetry.dto.Data;\n+import org.camunda.bpm.run.CamundaBpmRun;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = { CamundaBpmRun.class }, webEnvironment = WebEnvironment.DEFINED_PORT)\n+public class TelemetryDataTest {\n+\n+  @Autowired\n+  ProcessEngine engine;\n+\n+  @Test\n+  public void shouldAddCamundaIntegration() {\n+    // given\n+    ProcessEngineConfigurationImpl processEngineConfiguration = (ProcessEngineConfigurationImpl) engine.getProcessEngineConfiguration();\n+\n+    // then\n+    Data telemetryData = processEngineConfiguration.getTelemetryData();\n+    Set<String> camundaIntegration = telemetryData.getProduct().getInternals().getCamundaIntegration();\n+    assertThat(camundaIntegration.size()).isEqualTo(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY4MjM4MA=="}, "originalCommit": {"oid": "2c56fc8cbcd01db5e1ca45c1cd194f47142e843b"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4462, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}