{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTYwNDc2", "number": 1184, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0MTo1OFrOFD8nzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0MTo1OFrOFD8nzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NjgzMjc2OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0MTo1OFrOID1MuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTo0MTo1OFrOID1MuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg4ODI0OA==", "bodyText": "Since we're generally not using exclusion patterns when archiving artifacts, can we provide refactor the existing cambpmArchiveArtifacts method, or create a new one that will accept a varargs argument where we can provide all of the patterns as an array?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1184#discussion_r540888248", "createdAt": "2020-12-11T11:41:58Z", "author": {"login": "koevskinikola"}, "path": "Jenkinsfile", "diffHunk": "@@ -78,15 +78,15 @@ pipeline {\n \n           // archive all .jar, .pom, .xml, .txt runtime artifacts + required .war/.zip/.tar.gz for EE pipeline\n           // add a new line for each group of artifacts\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/*.jar,.m2/org/camunda/**/*-SNAPSHOT/**/*.pom,.m2/org/camunda/**/*-SNAPSHOT/**/*.xml,.m2/org/camunda/**/*-SNAPSHOT/**/*.txt', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*frontend-sources.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/license-book*.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-jboss-modules*.zip', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-*-assembly*.tar.gz', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war', followSymlinks: false\n-          archiveArtifacts artifacts: '.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war', followSymlinks: false\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/*.jar,.m2/org/camunda/**/*-SNAPSHOT/**/*.pom,.m2/org/camunda/**/*-SNAPSHOT/**/*.xml,.m2/org/camunda/**/*-SNAPSHOT/**/*.txt')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*frontend-sources.zip')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/license-book*.zip')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-jboss-modules*.zip')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-*-assembly*.tar.gz')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-webapp*.war')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-engine-rest*.war')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-example-invoice*.war')\n+          cambpmArchiveArtifacts('.m2/org/camunda/**/*-SNAPSHOT/**/camunda-h2-webapp*.war')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "303bf7a1a0d5aadf91b6f3ef83b851d2dbd884bd"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4378, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}