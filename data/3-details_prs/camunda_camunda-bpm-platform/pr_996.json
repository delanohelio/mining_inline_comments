{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTMxODQ1", "number": 996, "title": "CAM-10797 added check for non-existing group and user", "bodyText": "", "createdAt": "2020-09-20T17:22:47Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996", "merged": true, "mergeCommit": {"oid": "7fc35410ddf68e2203d8ad400be9d2b58a165996"}, "closed": true, "closedAt": "2020-09-28T05:42:24Z", "author": {"login": "hirenpandit"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKyHT5gH2gAyNDg5OTMxODQ1OjhlZTJhMjBkNDEyM2RmODIxOThkZjUzZWI5YWM4ZjQ5MjczMWZlM2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMXVz7AH2gAyNDg5OTMxODQ1OmIzYmZhNjJkZmE4YzcxYmI1ZjZhNWEzMTc2NzM3MjBiMTVmNzQ3YzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c", "author": {"user": {"login": "hirenpandit", "name": "Hiren Pandit"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/8ee2a20d4123df82198df53eb9ac8f492731fe3c", "committedDate": "2020-09-20T17:19:43Z", "message": "CAM-10797 added check for non-existing group and user"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTcyODI2", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#pullrequestreview-495572826", "createdAt": "2020-09-24T13:31:37Z", "commit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozMTozN1rOHXa0-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozMzo1NFrOHXa7Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA==", "bodyText": "Instead of the complex try, catch and instanceof check, you could simply expect an exception of type NullValueException with the ExpectedExceptionRule. You can also use this rule to expect a certain exception message.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494318840", "createdAt": "2020-09-24T13:31:37Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxOTA4OQ==", "bodyText": "Same as above", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494319089", "createdAt": "2020-09-24T13:31:57Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }\n   }\n \n   @Test\n   public void testCreateMembershipUnexistingUser() {\n     Group sales = identityService.newGroup(\"sales\");\n     identityService.saveGroup(sales);\n+    try {\n+      identityService.createMembership(\"unexistinguser\", sales.getId());\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No user found with id 'unexistinguser'.: user is null\", ex.getMessage());\n+    }\n \n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(\"unexistinguser\", sales.getId());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMDQ1NA==", "bodyText": "Example: https://github.com/camunda/camunda-bpm-platform/blob/master/engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java#L367-L373", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494320454", "createdAt": "2020-09-24T13:33:54Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA=="}, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78fe85e1e3cae0e39d34df76f32d3ee82b3be48f", "author": {"user": {"login": "hirenpandit", "name": "Hiren Pandit"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/78fe85e1e3cae0e39d34df76f32d3ee82b3be48f", "committedDate": "2020-09-25T14:44:43Z", "message": "Merge branch 'master' of https://github.com/camunda/camunda-bpm-platform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3bfa62dfa8c71bb5f6a5a317673720b15f747c4", "author": {"user": {"login": "hirenpandit", "name": "Hiren Pandit"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/b3bfa62dfa8c71bb5f6a5a317673720b15f747c4", "committedDate": "2020-09-25T15:15:58Z", "message": "CAM-10797 updated tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2220, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}