{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODY0OTEy", "number": 1089, "title": "CAM-12651: feat(engine): lock external task without fetch", "bodyText": "Allow for an External Task to be locked without a fetch operation.\n\nRelated to CAM-12651, CAM-7170", "createdAt": "2020-10-27T15:58:22Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089", "merged": true, "mergeCommit": {"oid": "876f48d745ed3915c27d4521c7f2ab86add4b1b7"}, "closed": true, "closedAt": "2020-11-05T17:18:46Z", "author": {"login": "koevskinikola"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXSMmkgBqjM5MzYzMzQwNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZlqbFAH2gAyNTEwODY0OTEyOjRlNDZhNjdkY2RhZmFmZGMwNmFlZmZiNmMwZDM1YTAzMzA2ZTk1ZWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0a8c67a0945bd779abae679826facdadcb4eead", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a0a8c67a0945bd779abae679826facdadcb4eead", "committedDate": "2020-10-28T16:21:44Z", "message": "SQUASH ME: fix concurrent test"}, "afterCommit": {"oid": "b443ede93c3d2380f32e53525b8d86fdcb2dc7b1", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/b443ede93c3d2380f32e53525b8d86fdcb2dc7b1", "committedDate": "2020-10-29T13:29:00Z", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n\nRelated to CAM-12651, CAM-7170"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b443ede93c3d2380f32e53525b8d86fdcb2dc7b1", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/b443ede93c3d2380f32e53525b8d86fdcb2dc7b1", "committedDate": "2020-10-29T13:29:00Z", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n\nRelated to CAM-12651, CAM-7170"}, "afterCommit": {"oid": "3a16ce0a9cf088caa86a78b5fd025f57f9f788ed", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/3a16ce0a9cf088caa86a78b5fd025f57f9f788ed", "committedDate": "2020-10-30T11:36:05Z", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n\nRelated to CAM-12651, CAM-7170"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDYyODcz", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#pullrequestreview-521462873", "createdAt": "2020-11-02T09:34:05Z", "commit": {"oid": "3a16ce0a9cf088caa86a78b5fd025f57f9f788ed"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozNDowNVrOHr8kWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozNDowNVrOHr8kWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MzE2MQ==", "bodyText": "Move to validate method that is called in #execute where we usually make the validation of the fields?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#discussion_r515843161", "createdAt": "2020-11-02T09:34:05Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import java.util.Date;\n+\n+import org.camunda.bpm.engine.BadUserRequestException;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;\n+import org.camunda.bpm.engine.impl.util.ClockUtil;\n+import org.camunda.bpm.engine.impl.util.EnsureUtil;\n+\n+public class LockExternalTaskCmd extends HandleExternalTaskCmd {\n+\n+  protected long lockDuration;\n+\n+  public LockExternalTaskCmd(String externalTaskId, String workerId, long lockDuration) {\n+    super(externalTaskId, workerId);\n+    EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a16ce0a9cf088caa86a78b5fd025f57f9f788ed"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzNTQzMTA0", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#pullrequestreview-523543104", "createdAt": "2020-11-04T16:43:21Z", "commit": {"oid": "e2e2dabd75209515006dfabbfa966b743cdbd511"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjo0MzoyMVrOHtglww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjo0MzoyMVrOHtglww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4MTkyMw==", "bodyText": "I checked that ensurePositive already checks for ensure not null, so we can simplify it to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EnsureUtil.ensureNotNull(\"lockDuration\", lockDuration);\n          \n          \n            \n                EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);\n          \n          \n            \n                EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#discussion_r517481923", "createdAt": "2020-11-04T16:43:21Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import java.util.Date;\n+\n+import org.camunda.bpm.engine.BadUserRequestException;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;\n+import org.camunda.bpm.engine.impl.util.ClockUtil;\n+import org.camunda.bpm.engine.impl.util.EnsureUtil;\n+\n+public class LockExternalTaskCmd extends HandleExternalTaskCmd {\n+\n+  protected long lockDuration;\n+\n+  public LockExternalTaskCmd(String externalTaskId, String workerId, long lockDuration) {\n+    super(externalTaskId, workerId);\n+    this.lockDuration = lockDuration;\n+  }\n+\n+  @Override\n+  protected void execute(ExternalTaskEntity externalTask) {\n+    externalTask.lock(workerId, lockDuration);\n+  }\n+\n+  @Override\n+  public String getErrorMessageOnWrongWorkerAccess() {\n+    return \"External Task \" + externalTaskId + \" cannot be locked by worker '\" + workerId;\n+  }\n+\n+  /*\n+    Report a worker violation only if another worker has locked the task,\n+    and the lock expiration time is still not expired.\n+   */\n+  @Override\n+  protected boolean validateWorkerViolation(ExternalTaskEntity externalTask) {\n+    String existingWorkerId = externalTask.getWorkerId();\n+    Date existingLockExpirationTime = externalTask.getLockExpirationTime();\n+\n+    // check if another worker is attempting to lock the same task\n+    boolean workerValidation = existingWorkerId != null && !workerId.equals(existingWorkerId);\n+    // and check if an existing lock is already expired\n+    boolean lockValidation = existingLockExpirationTime != null\n+        && !ClockUtil.getCurrentTime().after(existingLockExpirationTime);\n+\n+    return workerValidation && lockValidation;\n+  }\n+\n+  @Override\n+  protected void validateInput() {\n+    super.validateInput();\n+    EnsureUtil.ensureNotNull(\"lockDuration\", lockDuration);\n+    EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e2dabd75209515006dfabbfa966b743cdbd511"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDI1ODk1", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#pullrequestreview-524425895", "createdAt": "2020-11-05T16:13:42Z", "commit": {"oid": "b499692809ee8af33e54d896f03be43591a21579"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "004cb8c93a4a29022edfa1739e1a2feb3058a714", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/004cb8c93a4a29022edfa1739e1a2feb3058a714", "committedDate": "2020-11-05T17:10:48Z", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n* Add ExternalTaskService test cases;\n* Add Authorization test cases;\n* Reduce code duplication in external task authorization tests.\n\nRelated to CAM-12651, CAM-7170"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b499692809ee8af33e54d896f03be43591a21579", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/b499692809ee8af33e54d896f03be43591a21579", "committedDate": "2020-11-05T12:15:41Z", "message": "SQUASH ME: implement authorization test & reduce code duplication in external task auth tests"}, "afterCommit": {"oid": "004cb8c93a4a29022edfa1739e1a2feb3058a714", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/004cb8c93a4a29022edfa1739e1a2feb3058a714", "committedDate": "2020-11-05T17:10:48Z", "message": "feat(engine): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation.\n* Add ExternalTaskService test cases;\n* Add Authorization test cases;\n* Reduce code duplication in external task authorization tests.\n\nRelated to CAM-12651, CAM-7170"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e46a67dcdafafdc06aeffb6c0d35a03306e95ea", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/4e46a67dcdafafdc06aeffb6c0d35a03306e95ea", "committedDate": "2020-11-05T17:18:10Z", "message": "feat(rest): lock external task without fetch\n\n* Allow for an External Task to be locked without a fetch operation through the Rest API.\n* Document the new External Task Lock Rest API endpoint in the OpenAPI documentation.\n* Refactor the ExternalTask DTOs, and add a base class that contains the\n  workerId.\n\nRelated to CAM-12652, CAM-7170"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2163, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}