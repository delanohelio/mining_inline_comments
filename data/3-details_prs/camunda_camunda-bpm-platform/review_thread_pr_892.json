{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjY0NDgy", "number": 892, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxNzozMlrOERvLrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxNzozMlrOERvLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MDM0Mjg0OnYy", "diffSide": "RIGHT", "path": "CONTRIBUTING.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwODoxNzozMlrOG2m79w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMDo1Mzo0MVrOG2rKJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNDIzMQ==", "bodyText": "Do we really want to discourage using PluggableProcessEngineTest? It contains some common code that is quite handy to simply reuse (e.g. assigning the services to fields) instead of duplicating it.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/892#discussion_r459914231", "createdAt": "2020-07-24T08:17:32Z", "author": {"login": "ThorbenLindhauer"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -51,18 +51,19 @@ Best practices for writing test cases:\n   ```\n * Project `camunda-engine`: If you need a process engine with custom configuration, use the JUnit rule `org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule` and chain it with `org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule` like so:\n   ```\n-  protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {\n-    public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl configuration) {\n+  protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule(configuration -> {\n       // apply configuration options here\n-\n-      return configuration;\n-    }\n-  };\n+  });\n   protected ProvidedProcessEngineRule engineRule = new ProvidedProcessEngineRule(bootstrapRule);\n \n   @Rule\n   public RuleChain ruleChain = RuleChain.outerRule(bootstrapRule).around(engineRule);\n   ```\n+* Some Test classes extend the `org.camunda.bpm.engine.test.util.PluggableProcessEngineTest` class. This is a \n+  compatibility class to ease the transition of Test classes from JUnit3 to JUnit4. If you need to modify the \n+  `ProcessEngineConfiguration` in a class that extends `PluggableProcessEngineTest`, please remove \n+  the `extends PluggableProcessEngineTest` inheritance, and add the necessary JUnit4 Rules and Process Engine Services \n+  directly in the class you are modifying, as described in the point above.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454d60ede9605285978a373420beb74c15794a69"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTk4MzM5OQ==", "bodyText": "I wrote that section to explain that, if a custom configuration needs to be applied to the ProcessEngineBootstrapRule, this isn't really possible when a class is extending the PluggableProcessEngineTest since we can't pass the bootstrapRule to the ProvidedProcessEngineRule instance.\nI can rephrase it so it's clearer.\nIf the default configuration needs to be used, it's completely fine to use extend the PluggableProcessEngineTest.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/892#discussion_r459983399", "createdAt": "2020-07-24T10:53:41Z", "author": {"login": "koevskinikola"}, "path": "CONTRIBUTING.md", "diffHunk": "@@ -51,18 +51,19 @@ Best practices for writing test cases:\n   ```\n * Project `camunda-engine`: If you need a process engine with custom configuration, use the JUnit rule `org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule` and chain it with `org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule` like so:\n   ```\n-  protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule() {\n-    public ProcessEngineConfiguration configureEngine(ProcessEngineConfigurationImpl configuration) {\n+  protected ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule(configuration -> {\n       // apply configuration options here\n-\n-      return configuration;\n-    }\n-  };\n+  });\n   protected ProvidedProcessEngineRule engineRule = new ProvidedProcessEngineRule(bootstrapRule);\n \n   @Rule\n   public RuleChain ruleChain = RuleChain.outerRule(bootstrapRule).around(engineRule);\n   ```\n+* Some Test classes extend the `org.camunda.bpm.engine.test.util.PluggableProcessEngineTest` class. This is a \n+  compatibility class to ease the transition of Test classes from JUnit3 to JUnit4. If you need to modify the \n+  `ProcessEngineConfiguration` in a class that extends `PluggableProcessEngineTest`, please remove \n+  the `extends PluggableProcessEngineTest` inheritance, and add the necessary JUnit4 Rules and Process Engine Services \n+  directly in the class you are modifying, as described in the point above.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkxNDIzMQ=="}, "originalCommit": {"oid": "454d60ede9605285978a373420beb74c15794a69"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4514, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}