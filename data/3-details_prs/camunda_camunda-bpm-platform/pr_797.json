{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NzU2NTg1", "number": 797, "title": "Enforce Historic Task Authorizations for User Operation Log Query", "bodyText": "related to CAM-11628", "createdAt": "2020-04-23T08:18:55Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797", "merged": true, "mergeCommit": {"oid": "0bac027cd4789f5288d3581d11452e5b58e12cfd"}, "closed": true, "closedAt": "2020-04-27T12:46:13Z", "author": {"login": "tasso94"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaxc65gH2gAyNDA3NzU2NTg1OmU5MTAxOTdhYzJmZWMzZGZhN2MyN2YzMTQ4ZWFiNGY1NDdmOTljMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbtJbmAFqTQwMDg0MjkwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/e910197ac2fec3dfa7c27f3148eab4f547f99c25", "committedDate": "2020-04-24T13:25:03Z", "message": "feat(engine): enforce hist task auth for op log query\n\nrelated to CAM-11628"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "256a4afb5d49c81fac40e7982e632698985cf8d9", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/256a4afb5d49c81fac40e7982e632698985cf8d9", "committedDate": "2020-04-23T08:16:06Z", "message": "feat(engine): enforce hist task auth for op log query\n\nrelated to CAM-11628"}, "afterCommit": {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/e910197ac2fec3dfa7c27f3148eab4f547f99c25", "committedDate": "2020-04-24T13:25:03Z", "message": "feat(engine): enforce hist task auth for op log query\n\nrelated to CAM-11628"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODQyOTA2", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#pullrequestreview-400842906", "createdAt": "2020-04-27T10:58:04Z", "commit": {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1ODowNFrOGMdNCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMDo1ODowNFrOGMdNCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxNDU2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    taskId, userId, HistoricTaskPermissions.NONE);\n          \n          \n            \n                    taskId, userId, HistoricTaskPermissions.READ);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/797#discussion_r415714569", "createdAt": "2020-04-27T10:58:04Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -504,6 +513,223 @@ public void testHistoricProcessInstancePermissionsAuthorizationDisabled() {\n         .containsExactly(processInstanceId, processInstanceId);\n   }\n \n+  public void testCheckNonePermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckReadPermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnStandaloneHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    taskId = \"aTaskId\";\n+    createTask(taskId);\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricTask() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setAssignee(taskId, userId);\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId, taskId);\n+  }\n+\n+  public void testCheckNonePermissionOnHistoricTaskAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY,\n+        userId, ProcessDefinitionPermissions.READ_HISTORY);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactlyInAnyOrder(taskId, null);\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricTaskAndNonePermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorizationWithoutAuthentication(HISTORIC_TASK, taskId, userId,\n+        HistoricTaskPermissions.READ);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId,\n+        ProcessDefinitionPermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"taskId\")\n+        .containsExactly(taskId);\n+  }\n+\n+  public void testCheckNoneOnHistoricTaskAndTaskWorkerCategory() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    startProcessInstanceByKey(ONE_TASK_PROCESS_KEY);\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_TASK,\n+        taskId, userId, HistoricTaskPermissions.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e910197ac2fec3dfa7c27f3148eab4f547f99c25"}, "originalPosition": 204}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1859, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}