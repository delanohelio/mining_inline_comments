{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODY5NzU1", "number": 1040, "title": "CAM-12557: fix(telemetry): skip sending initial report during engine close", "bodyText": "Related to CAM-12557", "createdAt": "2020-10-02T12:14:57Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1040", "merged": true, "mergeCommit": {"oid": "50627411c520c33cc28273460b78cb9307c10557"}, "closed": true, "closedAt": "2020-10-02T15:25:51Z", "author": {"login": "yanavasileva"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOk7bSAH2gAyNDk2ODY5NzU1Ojg1ODgyYzQ5Njc3ODU2OGEyNGRhZmZhYTY4N2RkNmYyYWI0YjdkYTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOmf75gH2gAyNDk2ODY5NzU1OjNlM2UzYzcyMDQ1ZWFiMjE4MjZmNjU4YThlZjE3NTc1NWNjZDlkZDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "85882c496778568a24daffaa687dd6f2ab4b7da8", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/85882c496778568a24daffaa687dd6f2ab4b7da8", "committedDate": "2020-10-02T12:13:40Z", "message": "fix(telemetry): skip sending initial report during engine close\n\nRelated to CAM-12557"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTE1NzQx", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1040#pullrequestreview-501115741", "createdAt": "2020-10-02T13:04:10Z", "commit": {"oid": "85882c496778568a24daffaa687dd6f2ab4b7da8"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzowNDoxMFrOHbszMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzowNDozMFrOHbszww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNzYwMA==", "bodyText": "Do we need new test cases for this or should we simply integrate this into the other test cases directly above (in the end, they simply make it more specific that initial data should only be sent once)?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1040#discussion_r498807600", "createdAt": "2020-10-02T13:04:10Z", "author": {"login": "tmetzke"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "diffHunk": "@@ -315,6 +357,76 @@ public void shouldReportInitialDataWhenReporterActivatedAndInitTelemetryEnabled(\n               .withHeader(\"Content-Type\",  equalTo(\"application/json\")));\n   }\n \n+  @Test\n+  public void shouldReportInitialDataOnceInitTelemetryUndefined() {\n+    // given\n+    ProcessEngineConfigurationImpl processEngineConfiguration = createEngineWithInitMessage(null);\n+    stubFor(post(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n+            .willReturn(aResponse()\n+                        .withStatus(HttpURLConnection.HTTP_ACCEPTED)));\n+\n+    Data expectedData = createInitialDataToSend(processEngineConfiguration.getTelemetryData(), null);\n+    String requestBody = new Gson().toJson(expectedData);\n+\n+    // when\n+    processEngineConfiguration.getTelemetryReporter().reportNow();\n+    standaloneProcessEngine.close();\n+    standaloneProcessEngine = null;\n+\n+    // then\n+    verify(1, postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n+              .withRequestBody(equalToJson(requestBody, JSONCompareMode.LENIENT))\n+              .withHeader(\"Content-Type\",  equalTo(\"application/json\")));\n+  }\n+\n+\n+  @Test\n+  public void shouldReportInitialDataOnceInitTelemetryDisabled() {\n+    // given\n+    ProcessEngineConfigurationImpl processEngineConfiguration = createEngineWithInitMessage(false);\n+    stubFor(post(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n+            .willReturn(aResponse()\n+                        .withStatus(HttpURLConnection.HTTP_ACCEPTED)));\n+\n+    Data expectedData = createInitialDataToSend(processEngineConfiguration.getTelemetryData(), false);\n+    String requestBody = new Gson().toJson(expectedData);\n+\n+    // when\n+    processEngineConfiguration.getTelemetryReporter().reportNow();\n+    standaloneProcessEngine.close();\n+    standaloneProcessEngine = null;\n+\n+    // then\n+    verify(1, postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n+              .withRequestBody(equalToJson(requestBody, JSONCompareMode.LENIENT))\n+              .withHeader(\"Content-Type\",  equalTo(\"application/json\")));\n+  }\n+\n+  @Test\n+  @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n+  public void shouldReportInitialDataOnceInitTelemetryEnabled() {\n+    // given\n+    ProcessEngineConfigurationImpl processEngineConfiguration = createEngineWithInitMessage(true);\n+    stubFor(post(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n+            .willReturn(aResponse()\n+                        .withStatus(HttpURLConnection.HTTP_ACCEPTED)));\n+\n+    Data expectedData = createInitialDataToSend(processEngineConfiguration.getTelemetryData(), true);\n+    String requestBody = new Gson().toJson(expectedData);\n+\n+    // when\n+    processEngineConfiguration.getTelemetryReporter().reportNow();\n+    standaloneProcessEngine.close();\n+    standaloneProcessEngine = null;\n+\n+    // then\n+    verify(3, postRequestedFor(urlEqualTo(TELEMETRY_ENDPOINT_PATH))\n+              .withRequestBody(equalToJson(requestBody, JSONCompareMode.LENIENT))\n+              .withHeader(\"Content-Type\",  equalTo(\"application/json\")));\n+    assertThat(loggingRule.getFilteredLog(\"Sending initial telemetry data\").size()).isOne();\n+    assertThat(loggingRule.getFilteredLog(\"Initial telemetry request was successful.\").size()).isOne();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85882c496778568a24daffaa687dd6f2ab4b7da8"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNzc0Nw==", "bodyText": "Why don't we need this anymore?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1040#discussion_r498807747", "createdAt": "2020-10-02T13:04:30Z", "author": {"login": "tmetzke"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "diffHunk": "@@ -182,7 +181,6 @@ public void tearDown() {\n         standaloneProcessEngine.getManagementService().toggleTelemetry(false);\n       }\n       standaloneProcessEngine.close();\n-      ProcessEngines.unregister(standaloneProcessEngine);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85882c496778568a24daffaa687dd6f2ab4b7da8"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e3e3c72045eab21826f658a8ef175755ccd9dd3", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/3e3e3c72045eab21826f658a8ef175755ccd9dd3", "committedDate": "2020-10-02T14:03:27Z", "message": "squash me"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2130, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}