{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwODYxNzY4", "number": 1162, "title": "CAM-12819: feat(side-pipe): add slow pipeline with crdb", "bodyText": "CAM-12819", "createdAt": "2020-12-02T09:02:14Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162", "merged": true, "mergeCommit": {"oid": "14490971893ffa06881e9dff5746a00f65f805b9"}, "closed": true, "closedAt": "2020-12-04T09:29:30Z", "author": {"login": "yanavasileva"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiKwMUgBqjQwNjExODk0MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi0VEOABqjQwNzE3OTYxMjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da572fc67ae2ffd89967007d8c3613f2f145ac32", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/da572fc67ae2ffd89967007d8c3613f2f145ac32", "committedDate": "2020-12-02T08:57:50Z", "message": "feat(side-pipeline): add side pipeline with crdb"}, "afterCommit": {"oid": "a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b", "committedDate": "2020-12-02T09:02:12Z", "message": "feat(side-pipeline): add side pipeline with crdb"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNzAyMjg5", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#pullrequestreview-543702289", "createdAt": "2020-12-03T08:21:15Z", "commit": {"oid": "a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMToxNlrOH-Hjsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODoyMzo0OFrOH-H0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5NzU4Ng==", "bodyText": "We should update this block with the changes introduced in the PR-label topic. We should also consider the default-build, rolling-update or migration labels here. Otherwise, nothing will be triggered for this pipeline for these labels.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#discussion_r534897586", "createdAt": "2020-12-03T08:21:16Z", "author": {"login": "koevskinikola"}, "path": ".ci/sidetrack/Jenkinsfile", "diffHunk": "@@ -0,0 +1,239 @@\n+// https://github.com/camunda/jenkins-global-shared-library\n+@Library('camunda-ci') _\n+\n+String getAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 4){\n+  String mavenForkCount = cpuLimit;\n+  String mavenMemoryLimit = cpuLimit * 2;\n+  \"\"\"\n+metadata:\n+  labels:\n+    agent: ci-cambpm-camunda-cloud-build\n+spec:\n+  nodeSelector:\n+    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt\n+  tolerations:\n+  - key: \"agents-n1-standard-32-netssd-preempt\"\n+    operator: \"Exists\"\n+    effect: \"NoSchedule\"\n+  containers:\n+  - name: \"jnlp\"\n+    image: \"${dockerImage}\"\n+    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n+    tty: true\n+    env:\n+    - name: LIMITS_CPU\n+      value: ${mavenForkCount}\n+    - name: TZ\n+      value: Europe/Berlin\n+    resources:\n+      limits:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+      requests:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+    workingDir: \"/home/work\"\n+    volumeMounts:\n+      - mountPath: /home/work\n+        name: workspace-volume\n+  \"\"\"\n+}\n+\n+pipeline {\n+  agent none\n+  parameters {\n+    buildSelector(\n+        name: 'copyArtifactSelector',\n+        description: 'A build to take the artifacts from'\n+    )\n+    booleanParam defaultValue: true, description: '', name: 'STANDALONE'\n+  }\n+  options {\n+    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'\n+  }\n+  stages {\n+    stage('Prepare') {\n+      agent {\n+        kubernetes {\n+          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+        }\n+      }\n+      when {\n+        expression { params.STANDALONE == false }\n+      }\n+      steps {\n+        copyArtifacts(projectName: \"cambpm-jenkins-pipelines/${env.BRANCH_NAME}\", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)\n+        stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n+        stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+      }\n+    }\n+    stage('UNIT DB tests') {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'h2'// TODO 'cockroach'\n+          }\n+          axis {\n+            name 'PROFILE'\n+            values 'engine-unit', 'engine-unit-authorizations', 'webapps-unit', 'webapps-unit-authorizations', 'check-sql', 'upgrade-db', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'\n+          }\n+        }\n+        when {\n+          expression {\n+            return withLabels('all-db','cockroachdb') // TODO\n+          }\n+          beforeAgent true\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDg5OTg2NA==", "bodyText": "Let's document in the main ticket, or create a different one, when we want to enable the full (CRDB) features of this pipeline.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#discussion_r534899864", "createdAt": "2020-12-03T08:22:35Z", "author": {"login": "koevskinikola"}, "path": ".ci/sidetrack/Jenkinsfile", "diffHunk": "@@ -0,0 +1,239 @@\n+// https://github.com/camunda/jenkins-global-shared-library\n+@Library('camunda-ci') _\n+\n+String getAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 4){\n+  String mavenForkCount = cpuLimit;\n+  String mavenMemoryLimit = cpuLimit * 2;\n+  \"\"\"\n+metadata:\n+  labels:\n+    agent: ci-cambpm-camunda-cloud-build\n+spec:\n+  nodeSelector:\n+    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt\n+  tolerations:\n+  - key: \"agents-n1-standard-32-netssd-preempt\"\n+    operator: \"Exists\"\n+    effect: \"NoSchedule\"\n+  containers:\n+  - name: \"jnlp\"\n+    image: \"${dockerImage}\"\n+    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n+    tty: true\n+    env:\n+    - name: LIMITS_CPU\n+      value: ${mavenForkCount}\n+    - name: TZ\n+      value: Europe/Berlin\n+    resources:\n+      limits:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+      requests:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+    workingDir: \"/home/work\"\n+    volumeMounts:\n+      - mountPath: /home/work\n+        name: workspace-volume\n+  \"\"\"\n+}\n+\n+pipeline {\n+  agent none\n+  parameters {\n+    buildSelector(\n+        name: 'copyArtifactSelector',\n+        description: 'A build to take the artifacts from'\n+    )\n+    booleanParam defaultValue: true, description: '', name: 'STANDALONE'\n+  }\n+  options {\n+    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'\n+  }\n+  stages {\n+    stage('Prepare') {\n+      agent {\n+        kubernetes {\n+          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+        }\n+      }\n+      when {\n+        expression { params.STANDALONE == false }\n+      }\n+      steps {\n+        copyArtifacts(projectName: \"cambpm-jenkins-pipelines/${env.BRANCH_NAME}\", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)\n+        stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n+        stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+      }\n+    }\n+    stage('UNIT DB tests') {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'h2'// TODO 'cockroach'\n+          }\n+          axis {\n+            name 'PROFILE'\n+            values 'engine-unit', 'engine-unit-authorizations', 'webapps-unit', 'webapps-unit-authorizations', 'check-sql', 'upgrade-db', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'\n+          }\n+        }\n+        when {\n+          expression {\n+            return withLabels('all-db','cockroachdb') // TODO\n+          }\n+          beforeAgent true\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent()\n+          }\n+        }\n+        stages {\n+          stage('UNIT test') {\n+            steps {\n+              echo(\"UNIT DB Test Stage: ${env.PROFILE}-${env.DB}\")\n+              //withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMDY1NQ==", "bodyText": "We should confirm that this pipeline executes successfully with CockroachDB before merging it. We will need to provide a DB agent for this purpose.\nAfter the confirmation, we can temporarily use H2 and document in the main ticket, or create a different one, when we want to enable the full (CRDB) features of this pipeline.\nAlternatively, we can temporarily disable the complete pipeline through the trigger in the main Pipeline.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#discussion_r534900655", "createdAt": "2020-12-03T08:23:00Z", "author": {"login": "koevskinikola"}, "path": ".ci/sidetrack/Jenkinsfile", "diffHunk": "@@ -0,0 +1,239 @@\n+// https://github.com/camunda/jenkins-global-shared-library\n+@Library('camunda-ci') _\n+\n+String getAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 4){\n+  String mavenForkCount = cpuLimit;\n+  String mavenMemoryLimit = cpuLimit * 2;\n+  \"\"\"\n+metadata:\n+  labels:\n+    agent: ci-cambpm-camunda-cloud-build\n+spec:\n+  nodeSelector:\n+    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt\n+  tolerations:\n+  - key: \"agents-n1-standard-32-netssd-preempt\"\n+    operator: \"Exists\"\n+    effect: \"NoSchedule\"\n+  containers:\n+  - name: \"jnlp\"\n+    image: \"${dockerImage}\"\n+    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n+    tty: true\n+    env:\n+    - name: LIMITS_CPU\n+      value: ${mavenForkCount}\n+    - name: TZ\n+      value: Europe/Berlin\n+    resources:\n+      limits:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+      requests:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+    workingDir: \"/home/work\"\n+    volumeMounts:\n+      - mountPath: /home/work\n+        name: workspace-volume\n+  \"\"\"\n+}\n+\n+pipeline {\n+  agent none\n+  parameters {\n+    buildSelector(\n+        name: 'copyArtifactSelector',\n+        description: 'A build to take the artifacts from'\n+    )\n+    booleanParam defaultValue: true, description: '', name: 'STANDALONE'\n+  }\n+  options {\n+    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'\n+  }\n+  stages {\n+    stage('Prepare') {\n+      agent {\n+        kubernetes {\n+          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+        }\n+      }\n+      when {\n+        expression { params.STANDALONE == false }\n+      }\n+      steps {\n+        copyArtifacts(projectName: \"cambpm-jenkins-pipelines/${env.BRANCH_NAME}\", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)\n+        stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n+        stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+      }\n+    }\n+    stage('UNIT DB tests') {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'h2'// TODO 'cockroach'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkwMTkxOA==", "bodyText": "We should update this method with the changes introduced in the PR-labels ticket.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            void withLabels(String... labels) {\n          \n          \n            \n              for ( l in labels) {\n          \n          \n            \n                pullRequest.labels.contains(labelName)\n          \n          \n            \n              }\n          \n          \n            \n            }\n          \n          \n            \n            boolean withLabels(String... labels) {\n          \n          \n            \n              for ( l in labels) {\n          \n          \n            \n                pullRequest.labels.contains(')\n          \n          \n            \n              }\n          \n          \n            \n            }", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#discussion_r534901918", "createdAt": "2020-12-03T08:23:48Z", "author": {"login": "koevskinikola"}, "path": ".ci/sidetrack/Jenkinsfile", "diffHunk": "@@ -0,0 +1,239 @@\n+// https://github.com/camunda/jenkins-global-shared-library\n+@Library('camunda-ci') _\n+\n+String getAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 4){\n+  String mavenForkCount = cpuLimit;\n+  String mavenMemoryLimit = cpuLimit * 2;\n+  \"\"\"\n+metadata:\n+  labels:\n+    agent: ci-cambpm-camunda-cloud-build\n+spec:\n+  nodeSelector:\n+    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt\n+  tolerations:\n+  - key: \"agents-n1-standard-32-netssd-preempt\"\n+    operator: \"Exists\"\n+    effect: \"NoSchedule\"\n+  containers:\n+  - name: \"jnlp\"\n+    image: \"${dockerImage}\"\n+    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n+    tty: true\n+    env:\n+    - name: LIMITS_CPU\n+      value: ${mavenForkCount}\n+    - name: TZ\n+      value: Europe/Berlin\n+    resources:\n+      limits:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+      requests:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+    workingDir: \"/home/work\"\n+    volumeMounts:\n+      - mountPath: /home/work\n+        name: workspace-volume\n+  \"\"\"\n+}\n+\n+pipeline {\n+  agent none\n+  parameters {\n+    buildSelector(\n+        name: 'copyArtifactSelector',\n+        description: 'A build to take the artifacts from'\n+    )\n+    booleanParam defaultValue: true, description: '', name: 'STANDALONE'\n+  }\n+  options {\n+    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'\n+  }\n+  stages {\n+    stage('Prepare') {\n+      agent {\n+        kubernetes {\n+          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+        }\n+      }\n+      when {\n+        expression { params.STANDALONE == false }\n+      }\n+      steps {\n+        copyArtifacts(projectName: \"cambpm-jenkins-pipelines/${env.BRANCH_NAME}\", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)\n+        stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n+        stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+      }\n+    }\n+    stage('UNIT DB tests') {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'h2'// TODO 'cockroach'\n+          }\n+          axis {\n+            name 'PROFILE'\n+            values 'engine-unit', 'engine-unit-authorizations', 'webapps-unit', 'webapps-unit-authorizations', 'check-sql', 'upgrade-db', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'\n+          }\n+        }\n+        when {\n+          expression {\n+            return withLabels('all-db','cockroachdb') // TODO\n+          }\n+          beforeAgent true\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent()\n+          }\n+        }\n+        stages {\n+          stage('UNIT test') {\n+            steps {\n+              echo(\"UNIT DB Test Stage: ${env.PROFILE}-${env.DB}\")\n+              //withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+              //  runMaven(true, false, isQaStashEnabled(env.PROFILE), getMavenProfileDir(env.PROFILE), getMavenProfileCmd(env.PROFILE) + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              //}\n+            }\n+            post {\n+              //always {\n+              //  junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              //}\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+  post {\n+    changed {\n+      script {\n+        if (!agentDisconnected()){\n+          // send email if the slave disconnected\n+        }\n+      }\n+    }\n+    always {\n+      script {\n+        if (agentDisconnected()) {// Retrigger the build if the slave disconnected\n+          //currentBuild.result = 'ABORTED'\n+          //currentBuild.description = \"Aborted due to connection error\"\n+          build job: currentBuild.projectName, propagate: false, quietPeriod: 60, wait: false\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+void runMaven(boolean runtimeStash, boolean archivesStash, boolean qaStash, String directory, String cmd, boolean singleThreaded = false) {\n+  if (!params.STANDALONE && runtimeStash) unstash \"platform-stash-runtime\"\n+  if (!params.STANDALONE && archivesStash) unstash \"platform-stash-archives\"\n+  if (!params.STANDALONE && qaStash) unstash \"platform-stash-qa\"\n+  String forkCount = singleThreaded? \"-DforkCount=1\" : '';\n+  configFileProvider([configFile(fileId: 'maven-nexus-settings', variable: 'MAVEN_SETTINGS_XML')]) {\n+    sh(\"mvn -s \\$MAVEN_SETTINGS_XML ${forkCount} ${cmd} -nsu -Dmaven.repo.local=\\${WORKSPACE}/.m2 -B -f ${directory}/pom.xml\")\n+  }\n+}\n+\n+void withLabels(String... labels) {\n+  for ( l in labels) {\n+    pullRequest.labels.contains(labelName)\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b"}, "originalPosition": 145}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a71c6935881fe2f1bfde0c45eb027b91d9c5ed3b", "committedDate": "2020-12-02T09:02:12Z", "message": "feat(side-pipeline): add side pipeline with crdb"}, "afterCommit": {"oid": "20752ffe73b075c57a1a36c3406ef92ef0b7a6fd", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/20752ffe73b075c57a1a36c3406ef92ef0b7a6fd", "committedDate": "2020-12-03T13:13:11Z", "message": "add PR handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20752ffe73b075c57a1a36c3406ef92ef0b7a6fd", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/20752ffe73b075c57a1a36c3406ef92ef0b7a6fd", "committedDate": "2020-12-03T13:13:11Z", "message": "add PR handling"}, "afterCommit": {"oid": "7513c57b5ca8d4a6bd3d9cd609d7190f0b76ab7b", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/7513c57b5ca8d4a6bd3d9cd609d7190f0b76ab7b", "committedDate": "2020-12-03T13:15:14Z", "message": "add PR handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7513c57b5ca8d4a6bd3d9cd609d7190f0b76ab7b", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/7513c57b5ca8d4a6bd3d9cd609d7190f0b76ab7b", "committedDate": "2020-12-03T13:15:14Z", "message": "add PR handling"}, "afterCommit": {"oid": "21f57f3d52ddfa35c2b006abd5550b9843665a79", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/21f57f3d52ddfa35c2b006abd5550b9843665a79", "committedDate": "2020-12-03T13:19:34Z", "message": "add PR handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21f57f3d52ddfa35c2b006abd5550b9843665a79", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/21f57f3d52ddfa35c2b006abd5550b9843665a79", "committedDate": "2020-12-03T13:19:34Z", "message": "add PR handling"}, "afterCommit": {"oid": "df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f", "committedDate": "2020-12-03T13:22:41Z", "message": "add PR handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzOTc2ODgw", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#pullrequestreview-543976880", "createdAt": "2020-12-03T13:57:33Z", "commit": {"oid": "df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo1NzozM1rOH-c6Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo1NzozM1rOH-c6Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NzQ0Mw==", "bodyText": "We need to add a CRDB check here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        withLabels(getLabels(env.PROFILE))\n          \n          \n            \n                        withLabels(getLabels(env.PROFILE)) && withDbLabel(env.DB)", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#discussion_r535247443", "createdAt": "2020-12-03T13:57:33Z", "author": {"login": "koevskinikola"}, "path": ".ci/sidetrack/Jenkinsfile", "diffHunk": "@@ -0,0 +1,286 @@\n+import groovy.json.JsonSlurper\n+\n+// https://github.com/camunda/jenkins-global-shared-library\n+@Library('camunda-ci') _\n+\n+String getAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 4){\n+  String mavenForkCount = cpuLimit;\n+  String mavenMemoryLimit = cpuLimit * 2;\n+  \"\"\"\n+metadata:\n+  labels:\n+    agent: ci-cambpm-camunda-cloud-build\n+spec:\n+  nodeSelector:\n+    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt\n+  tolerations:\n+  - key: \"agents-n1-standard-32-netssd-preempt\"\n+    operator: \"Exists\"\n+    effect: \"NoSchedule\"\n+  containers:\n+  - name: \"jnlp\"\n+    image: \"${dockerImage}\"\n+    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n+    tty: true\n+    env:\n+    - name: LIMITS_CPU\n+      value: ${mavenForkCount}\n+    - name: TZ\n+      value: Europe/Berlin\n+    resources:\n+      limits:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+      requests:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+    workingDir: \"/home/work\"\n+    volumeMounts:\n+      - mountPath: /home/work\n+        name: workspace-volume\n+  \"\"\"\n+}\n+\n+pipeline {\n+  agent none\n+  parameters {\n+    buildSelector(\n+        name: 'copyArtifactSelector',\n+        description: 'A build to take the artifacts from'\n+    )\n+    booleanParam defaultValue: true, description: '', name: 'STANDALONE'\n+    string defaultValue: '', description: 'The labels assigned to the CE pull request', name: 'PR_LABELS'\n+  }\n+  options {\n+    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'\n+  }\n+  stages {\n+    stage('Prepare') {\n+      when {\n+        expression { params.STANDALONE == false }\n+        beforeAgent true\n+      }\n+      agent {\n+        kubernetes {\n+          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6')\n+        }\n+      }\n+      steps {\n+        copyArtifacts(projectName: \"cambpm-jenkins-pipelines/${env.BRANCH_NAME}\", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)\n+        stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n+        stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+      }\n+    }\n+    stage('UNIT DB tests') {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'cockroachdb'\n+          }\n+          axis {\n+            name 'PROFILE'\n+            values 'engine-unit', 'engine-unit-authorizations', 'webapps-unit', 'webapps-unit-authorizations', 'check-sql', 'upgrade-db', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'\n+          }\n+        }\n+        when {\n+          expression {\n+            withLabels(getLabels(env.PROFILE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzOTg1NTky", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#pullrequestreview-543985592", "createdAt": "2020-12-03T14:06:46Z", "commit": {"oid": "df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDowNjo0N1rOH-dUYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDowNjo0N1rOH-dUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI1NDExNQ==", "bodyText": "We're only using CRDB here, so a DB check is not necessary currently.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1162#discussion_r535254115", "createdAt": "2020-12-03T14:06:47Z", "author": {"login": "koevskinikola"}, "path": ".ci/sidetrack/Jenkinsfile", "diffHunk": "@@ -0,0 +1,286 @@\n+import groovy.json.JsonSlurper\n+\n+// https://github.com/camunda/jenkins-global-shared-library\n+@Library('camunda-ci') _\n+\n+String getAgent(String dockerImage = 'gcr.io/ci-30-162810/centos:v0.4.6', Integer cpuLimit = 4){\n+  String mavenForkCount = cpuLimit;\n+  String mavenMemoryLimit = cpuLimit * 2;\n+  \"\"\"\n+metadata:\n+  labels:\n+    agent: ci-cambpm-camunda-cloud-build\n+spec:\n+  nodeSelector:\n+    cloud.google.com/gke-nodepool: agents-n1-standard-32-netssd-preempt\n+  tolerations:\n+  - key: \"agents-n1-standard-32-netssd-preempt\"\n+    operator: \"Exists\"\n+    effect: \"NoSchedule\"\n+  containers:\n+  - name: \"jnlp\"\n+    image: \"${dockerImage}\"\n+    args: ['\\$(JENKINS_SECRET)', '\\$(JENKINS_NAME)']\n+    tty: true\n+    env:\n+    - name: LIMITS_CPU\n+      value: ${mavenForkCount}\n+    - name: TZ\n+      value: Europe/Berlin\n+    resources:\n+      limits:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+      requests:\n+        cpu: ${cpuLimit}\n+        memory: ${mavenMemoryLimit}Gi\n+    workingDir: \"/home/work\"\n+    volumeMounts:\n+      - mountPath: /home/work\n+        name: workspace-volume\n+  \"\"\"\n+}\n+\n+pipeline {\n+  agent none\n+  parameters {\n+    buildSelector(\n+        name: 'copyArtifactSelector',\n+        description: 'A build to take the artifacts from'\n+    )\n+    booleanParam defaultValue: true, description: '', name: 'STANDALONE'\n+    string defaultValue: '', description: 'The labels assigned to the CE pull request', name: 'PR_LABELS'\n+  }\n+  options {\n+    buildDiscarder(logRotator(numToKeepStr: '5')) //, artifactNumToKeepStr: '30'\n+  }\n+  stages {\n+    stage('Prepare') {\n+      when {\n+        expression { params.STANDALONE == false }\n+        beforeAgent true\n+      }\n+      agent {\n+        kubernetes {\n+          yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6')\n+        }\n+      }\n+      steps {\n+        copyArtifacts(projectName: \"cambpm-jenkins-pipelines/${env.BRANCH_NAME}\", fingerprintArtifacts: true, selector: buildParameter('copyArtifactSelector'), optional: true)\n+        stash name: \"platform-stash-runtime\", includes: \".m2/org/camunda/**/*-SNAPSHOT/**\", excludes: \"**/qa/**,**/*qa*/**,**/*.zip,**/*.tar.gz\"\n+        stash name: \"platform-stash-qa\", includes: \".m2/org/camunda/bpm/**/qa/**/*-SNAPSHOT/**,.m2/org/camunda/bpm/**/*qa*/**/*-SNAPSHOT/**\", excludes: \"**/*.zip,**/*.tar.gz\"\n+      }\n+    }\n+    stage('UNIT DB tests') {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'cockroachdb'\n+          }\n+          axis {\n+            name 'PROFILE'\n+            values 'engine-unit', 'engine-unit-authorizations', 'webapps-unit', 'webapps-unit-authorizations', 'check-sql', 'upgrade-db', 'instance-migration', 'old-engine', 'rolling-update', 'large-data-tests'\n+          }\n+        }\n+        when {\n+          expression {\n+            withLabels(getLabels(env.PROFILE))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0NzQ0Mw=="}, "originalCommit": {"oid": "df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f"}, "originalPosition": 88}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/df8f154b77dd3b0fd88e0fbaae6b6311cc2ce14f", "committedDate": "2020-12-03T13:22:41Z", "message": "add PR handling"}, "afterCommit": {"oid": "986c7801f0db8e37ee7d5189d0bd21678890dfcf", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/986c7801f0db8e37ee7d5189d0bd21678890dfcf", "committedDate": "2020-12-03T15:15:31Z", "message": "add PR handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "986c7801f0db8e37ee7d5189d0bd21678890dfcf", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/986c7801f0db8e37ee7d5189d0bd21678890dfcf", "committedDate": "2020-12-03T15:15:31Z", "message": "add PR handling"}, "afterCommit": {"oid": "c8ae2be5a61277e25aaaffa8e1970bc776c6e6fc", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/c8ae2be5a61277e25aaaffa8e1970bc776c6e6fc", "committedDate": "2020-12-03T15:19:22Z", "message": "add PR handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb67f4da051b3cc94fd099c4ef93caaed9171788", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/bb67f4da051b3cc94fd099c4ef93caaed9171788", "committedDate": "2020-12-04T09:28:28Z", "message": "feat(side-pipeline): add side pipeline with crdb"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8ae2be5a61277e25aaaffa8e1970bc776c6e6fc", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/c8ae2be5a61277e25aaaffa8e1970bc776c6e6fc", "committedDate": "2020-12-03T15:19:22Z", "message": "add PR handling"}, "afterCommit": {"oid": "bb67f4da051b3cc94fd099c4ef93caaed9171788", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/bb67f4da051b3cc94fd099c4ef93caaed9171788", "committedDate": "2020-12-04T09:28:28Z", "message": "feat(side-pipeline): add side pipeline with crdb"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2080, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}