{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwODY0OTEy", "number": 1089, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozNDowNVrOE0TEgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjo0MzoyMVrOE1TrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjczODU2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozNDowNVrOHr8kWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozNDowNVrOHr8kWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0MzE2MQ==", "bodyText": "Move to validate method that is called in #execute where we usually make the validation of the fields?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#discussion_r515843161", "createdAt": "2020-11-02T09:34:05Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import java.util.Date;\n+\n+import org.camunda.bpm.engine.BadUserRequestException;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;\n+import org.camunda.bpm.engine.impl.util.ClockUtil;\n+import org.camunda.bpm.engine.impl.util.EnsureUtil;\n+\n+public class LockExternalTaskCmd extends HandleExternalTaskCmd {\n+\n+  protected long lockDuration;\n+\n+  public LockExternalTaskCmd(String externalTaskId, String workerId, long lockDuration) {\n+    super(externalTaskId, workerId);\n+    EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a16ce0a9cf088caa86a78b5fd025f57f9f788ed"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzMyNDMyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjo0MzoyMVrOHtglww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNjo0MzoyMVrOHtglww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQ4MTkyMw==", "bodyText": "I checked that ensurePositive already checks for ensure not null, so we can simplify it to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                EnsureUtil.ensureNotNull(\"lockDuration\", lockDuration);\n          \n          \n            \n                EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);\n          \n          \n            \n                EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1089#discussion_r517481923", "createdAt": "2020-11-04T16:43:21Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/LockExternalTaskCmd.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import java.util.Date;\n+\n+import org.camunda.bpm.engine.BadUserRequestException;\n+import org.camunda.bpm.engine.impl.persistence.entity.ExternalTaskEntity;\n+import org.camunda.bpm.engine.impl.util.ClockUtil;\n+import org.camunda.bpm.engine.impl.util.EnsureUtil;\n+\n+public class LockExternalTaskCmd extends HandleExternalTaskCmd {\n+\n+  protected long lockDuration;\n+\n+  public LockExternalTaskCmd(String externalTaskId, String workerId, long lockDuration) {\n+    super(externalTaskId, workerId);\n+    this.lockDuration = lockDuration;\n+  }\n+\n+  @Override\n+  protected void execute(ExternalTaskEntity externalTask) {\n+    externalTask.lock(workerId, lockDuration);\n+  }\n+\n+  @Override\n+  public String getErrorMessageOnWrongWorkerAccess() {\n+    return \"External Task \" + externalTaskId + \" cannot be locked by worker '\" + workerId;\n+  }\n+\n+  /*\n+    Report a worker violation only if another worker has locked the task,\n+    and the lock expiration time is still not expired.\n+   */\n+  @Override\n+  protected boolean validateWorkerViolation(ExternalTaskEntity externalTask) {\n+    String existingWorkerId = externalTask.getWorkerId();\n+    Date existingLockExpirationTime = externalTask.getLockExpirationTime();\n+\n+    // check if another worker is attempting to lock the same task\n+    boolean workerValidation = existingWorkerId != null && !workerId.equals(existingWorkerId);\n+    // and check if an existing lock is already expired\n+    boolean lockValidation = existingLockExpirationTime != null\n+        && !ClockUtil.getCurrentTime().after(existingLockExpirationTime);\n+\n+    return workerValidation && lockValidation;\n+  }\n+\n+  @Override\n+  protected void validateInput() {\n+    super.validateInput();\n+    EnsureUtil.ensureNotNull(\"lockDuration\", lockDuration);\n+    EnsureUtil.ensurePositive(BadUserRequestException.class, \"lockDuration\", lockDuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e2dabd75209515006dfabbfa966b743cdbd511"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4428, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}