{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MTUzNzk0", "number": 623, "title": "CAM-11250: correct history event on instance migration", "bodyText": "fixes that a migrate event is fired for the history of a process\ninstance (instead of an update event)\nadds tests for all migrate events\n\nrelated to CAM-11250", "createdAt": "2020-01-17T13:58:15Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/623", "merged": true, "mergeCommit": {"oid": "8b2e219e8cf7d51657fab4aeb5b9a22d6c109c69"}, "closed": true, "closedAt": "2020-01-24T09:18:42Z", "author": {"login": "ThorbenLindhauer"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7PKpcAH2gAyMzY0MTUzNzk0OjZjNTU0ZWFhZmM5ZjRiNmI2MmRkYjdmZjE0N2YyZGUwZjYzNWQyNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb9Gg4HgH2gAyMzY0MTUzNzk0OmFmMzUyM2FkNGRjY2Y4YmIyZmJmOTA5YWQ0NzJkZTQ0OTBjZGFjMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6c554eaafc9f4b6b62ddb7ff147f2de0f635d249", "author": {"user": {"login": "ThorbenLindhauer", "name": "Thorben Lindhauer"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6c554eaafc9f4b6b62ddb7ff147f2de0f635d249", "committedDate": "2020-01-17T13:56:40Z", "message": "fix(engine): correct history event on instance migration\n\n- fixes that a migrate event is fired for the history of a process\n  instance (instead of an update event)\n- adds tests for all migrate events\n\nrelated to CAM-11250"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MTM4ODE0", "url": "https://github.com/camunda/camunda-bpm-platform/pull/623#pullrequestreview-347138814", "createdAt": "2020-01-23T08:58:02Z", "commit": {"oid": "6c554eaafc9f4b6b62ddb7ff147f2de0f635d249"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo1ODowM1rOFg2uSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo1ODowM1rOFg2uSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTMzNg==", "bodyText": "I don't think we really need the @Before annotation. The recorderHandler will get cleared after every test.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              @Before", "url": "https://github.com/camunda/camunda-bpm-platform/pull/623#discussion_r369995336", "createdAt": "2020-01-23T08:58:03Z", "author": {"login": "koevskinikola"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/history/CustomHistoryEventHandlerTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.test.history;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.camunda.bpm.engine.ProcessEngineConfiguration;\n+import org.camunda.bpm.engine.RuntimeService;\n+import org.camunda.bpm.engine.TaskService;\n+import org.camunda.bpm.engine.impl.history.event.HistoryEvent;\n+import org.camunda.bpm.engine.impl.history.event.HistoryEventTypes;\n+import org.camunda.bpm.engine.impl.history.handler.HistoryEventHandler;\n+import org.camunda.bpm.engine.impl.util.CollectionUtil;\n+import org.camunda.bpm.engine.migration.MigrationPlan;\n+import org.camunda.bpm.engine.runtime.ActivityInstance;\n+import org.camunda.bpm.engine.runtime.Incident;\n+import org.camunda.bpm.engine.runtime.ProcessInstance;\n+import org.camunda.bpm.engine.task.Task;\n+import org.camunda.bpm.engine.test.Deployment;\n+import org.camunda.bpm.engine.test.RequiredHistoryLevel;\n+import org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule;\n+import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;\n+import org.camunda.bpm.engine.variable.VariableMap;\n+import org.camunda.bpm.engine.variable.Variables;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+@RequiredHistoryLevel(ProcessEngineConfiguration.HISTORY_FULL)\n+public class CustomHistoryEventHandlerTest {\n+\n+  protected static RecorderHistoryEventHandler recorderHandler = new RecorderHistoryEventHandler();\n+\n+  @ClassRule\n+  public static ProcessEngineBootstrapRule bootstrapRule = new ProcessEngineBootstrapRule(c -> {\n+    c.setHistoryEventHandler(recorderHandler);\n+  });\n+\n+  @Rule\n+  public ProvidedProcessEngineRule engineRule = new ProvidedProcessEngineRule(bootstrapRule);\n+\n+  private RuntimeService runtimeService;\n+  private TaskService taskService;\n+\n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c554eaafc9f4b6b62ddb7ff147f2de0f635d249"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af3523ad4dccf8bb2fbf909ad472de4490cdac07", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/af3523ad4dccf8bb2fbf909ad472de4490cdac07", "committedDate": "2020-01-23T08:59:39Z", "message": "squash me"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2020, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}