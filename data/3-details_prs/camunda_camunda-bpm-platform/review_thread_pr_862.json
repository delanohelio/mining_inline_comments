{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MjA0NzMx", "number": 862, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMToyMVrOEGtgzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozNzo0OVrOEGtoCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDcyNTg4OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TelemetryRestService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMToyMVrOGlrPLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMToyMVrOGlrPLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1ODg5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final String PATH = \"/telemetry\";\n          \n          \n            \n              String PATH = \"/telemetry\";", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442158895", "createdAt": "2020-06-18T11:31:21Z", "author": {"login": "tasso94"}, "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/TelemetryRestService.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest;\n+\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.camunda.bpm.engine.rest.dto.TelemetryConfigurationDto;\n+\n+@Produces(MediaType.APPLICATION_JSON)\n+public interface TelemetryRestService {\n+\n+  public static final String PATH = \"/telemetry\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDcyODcxOnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjoxOFrOGlrQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjoxOFrOGlrQ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTMzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean enableTelemetry;\n          \n          \n            \n              protected boolean enableTelemetry;", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159330", "createdAt": "2020-06-18T11:32:18Z", "author": {"login": "tasso94"}, "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.dto;\n+\n+public class TelemetryConfigurationDto {\n+\n+  private boolean enableTelemetry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDcyOTM5OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjozNVrOGlrRXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjozNVrOGlrRXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTQ1Mg==", "bodyText": "Do we need a setter as well?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159452", "createdAt": "2020-06-18T11:32:35Z", "author": {"login": "tasso94"}, "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/dto/TelemetryConfigurationDto.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.dto;\n+\n+public class TelemetryConfigurationDto {\n+\n+  private boolean enableTelemetry;\n+\n+  public boolean isEnableTelemetry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDczMDQ1OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TelemetryRestServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjo1OFrOGlrSDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMjo1OFrOGlrSDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTYyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private ManagementService managementServiceMock;\n          \n          \n            \n              protected ManagementService managementServiceMock;", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159628", "createdAt": "2020-06-18T11:32:58Z", "author": {"login": "tasso94"}, "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/TelemetryRestServiceTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest;\n+\n+import org.camunda.bpm.engine.AuthorizationException;\n+import org.camunda.bpm.engine.ManagementService;\n+import org.camunda.bpm.engine.rest.util.container.TestContainerRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import io.restassured.http.ContentType;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.Response.Status;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.*;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class TelemetryRestServiceTest extends AbstractRestServiceTest {\n+\n+  @ClassRule\n+  public static TestContainerRule rule = new TestContainerRule();\n+\n+  protected static final String TELEMETRY_URL = TEST_RESOURCE_ROOT_PATH +  TelemetryRestService.PATH;\n+\n+  private ManagementService managementServiceMock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDczMjEwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/ManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMzozMVrOGlrTDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozMzozMVrOGlrTDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE1OTg4Ng==", "bodyText": "Let's add @throws java docs to document the authorization exception.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442159886", "createdAt": "2020-06-18T11:33:31Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/ManagementService.java", "diffHunk": "@@ -1343,4 +1343,7 @@ Batch setJobRetriesAsync (List<String> processInstanceIds,\n    */\n   SchemaLogQuery createSchemaLogQuery();\n \n+  /** Enable/disable telemetry */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDczNzI5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/ManagementService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozNTozMFrOGlrWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozNTozMFrOGlrWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2MDc2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void configureTelemetry(boolean enabled);\n          \n          \n            \n              void enableTelemetry(boolean enabled);\n          \n      \n    \n    \n  \n\nThe term configure makes from my point of view only sense if there is more to specify than just enable or disable the feature. If we used a fluent builder pattern instead, I would go for configure otherwise enable.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442160760", "createdAt": "2020-06-18T11:35:30Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/ManagementService.java", "diffHunk": "@@ -1343,4 +1343,7 @@ Batch setJobRetriesAsync (List<String> processInstanceIds,\n    */\n   SchemaLogQuery createSchemaLogQuery();\n \n+  /** Enable/disable telemetry */\n+  void configureTelemetry(boolean enabled);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDc0NDQxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozNzo0OVrOGlra0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxMTozNzo0OVrOGlra0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjE2MTg3NA==", "bodyText": "Since we discussed to always insert the property into the database on engine startup, it would be more performant just to update the property and not go again through the exclusive lock logic. Also, no OptimisticLockingException is thrown with the exclusive lock approach, which is counterintuitive for the user.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/862#discussion_r442161874", "createdAt": "2020-06-18T11:37:49Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cmd/TelemetryConfigureCmd.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.cmd;\n+\n+import org.camunda.bpm.engine.impl.interceptor.Command;\n+import org.camunda.bpm.engine.impl.interceptor.CommandContext;\n+import org.camunda.bpm.engine.impl.persistence.entity.AuthorizationManager;\n+\n+public class TelemetryConfigureCmd implements Command<Object> {\n+\n+  protected boolean telemetryEnabled;\n+\n+  public TelemetryConfigureCmd(boolean telemetryEnabled) {\n+    this.telemetryEnabled = telemetryEnabled;\n+  }\n+\n+  public Object execute(CommandContext commandContext) {\n+\n+    AuthorizationManager authorizationManager = commandContext.getAuthorizationManager();\n+    authorizationManager.checkCamundaAdmin();\n+\n+    new TelemetrySetupCommand(telemetryEnabled).execute(commandContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9d2e09ec14468b836e519f0790a68d044640cd"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4496, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}