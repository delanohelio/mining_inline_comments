{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMjQwMDMw", "number": 935, "title": "chore(engine): add command counter", "bodyText": "Related to CAM-12176", "createdAt": "2020-08-19T15:23:24Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935", "merged": true, "mergeCommit": {"oid": "adae508ca17ed55ae62c8aeeca879ef369d0dc17"}, "closed": true, "closedAt": "2020-09-01T15:26:09Z", "author": {"login": "yanavasileva"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAdR_cABqjM2NzEzODMxMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEpCjrABqjM3MTU1MDg2OTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c413a6dbce7d45c4e8887333b57b9fb5ee8db424", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/c413a6dbce7d45c4e8887333b57b9fb5ee8db424", "committedDate": "2020-08-19T15:21:17Z", "message": "chore(engine): add command counter`"}, "afterCommit": {"oid": "6b9e938216f6d7ab1eebbde2e6b9d79b1ff298ec", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6b9e938216f6d7ab1eebbde2e6b9d79b1ff298ec", "committedDate": "2020-08-19T15:23:54Z", "message": "chore(engine): add command counter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "408857c83e14bf1ba01be28cd62200bad3d52213", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/408857c83e14bf1ba01be28cd62200bad3d52213", "committedDate": "2020-08-20T08:52:36Z", "message": "telemetry task integration + test"}, "afterCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/bfc78dde1f34755ace51e68ba892c5603bf8e84b", "committedDate": "2020-08-21T12:08:04Z", "message": "chore(engine): extend telemetry data with command count\n\n* introduce command counter interceptor that keep track of all executed\ncommand counts in the telemetry registry\n* upon sending telemetry data including command counts, the counts are\nreset\n\nRelated to CAM-12176"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NzkzNDgx", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#pullrequestreview-477793481", "createdAt": "2020-08-28T14:50:29Z", "commit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDo1MDozMFrOHJJkBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTo1MjoxOFrOHJ1sNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1NTkwOQ==", "bodyText": "I don't like this setter. It is much cleaner if we just get the respective object and then set it.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479355909", "createdAt": "2020-08-28T14:50:30Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java", "diffHunk": "@@ -49,8 +51,14 @@ public void setApplicationServer(ApplicationServer applicationServer) {\n     this.product.internals.applicationServer = applicationServer;\n   }\n \n+  public void setCommands(Map<String, Command> commands) {\n+    this.product.internals.commands = commands;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM1OTY1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                super();", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479359654", "createdAt": "2020-08-28T14:56:36Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);\n+\n+  public CommandCounter(String name) {\n+    super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNjQ2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public long getAndClear() {\n          \n          \n            \n                return count.getAndSet(0);\n          \n          \n            \n              }", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479926466", "createdAt": "2020-08-31T06:44:07Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);\n+\n+  public CommandCounter(String name) {\n+    super();\n+    this.name = name;\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  public void setName(String name) {\n+    this.name = name;\n+  }\n+\n+\n+  public void mark() {\n+    count.incrementAndGet();\n+  }\n+\n+  public long getAndClear() {\n+    return count.getAndSet(0);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyODU3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                CommandCounter counter = commands.get(name);\n          \n          \n            \n                if (counter == null) {\n          \n          \n            \n                  counter = new CommandCounter(name);\n          \n          \n            \n                  counter.mark();\n          \n          \n            \n                  commands.put(name, counter);\n          \n          \n            \n                } else {\n          \n          \n            \n                  counter.mark();\n          \n          \n            \n                }\n          \n          \n            \n                CommandCounter counter = commands.get(name);\n          \n          \n            \n                if (counter == null) {\n          \n          \n            \n                  counter = new CommandCounter(name);\n          \n          \n            \n                  commands.put(name, counter);\n          \n          \n            \n                }\n          \n          \n            \n                \n          \n          \n            \n                counter.mark();", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r479928570", "createdAt": "2020-08-31T06:46:43Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java", "diffHunk": "@@ -37,4 +37,20 @@ public synchronized void setApplicationServer(ApplicationServer applicationServe\n   public synchronized void setApplicationServer(String applicationServerVersion) {\n     this.applicationServer = new ApplicationServer(applicationServerVersion);\n   }\n+\n+  public Map<String, CommandCounter> getCommands() {\n+    return commands;\n+  }\n+\n+  public synchronized void markOccurrence(String name) {\n+    CommandCounter counter = commands.get(name);\n+    if (counter == null) {\n+      counter = new CommandCounter(name);\n+      counter.mark();\n+      commands.put(name, counter);\n+    } else {\n+      counter.mark();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA3ODkwMw==", "bodyText": "In the current implementation, we don't need the AtomicLong since TelemetryRegistry#markOccurrence is synchronized.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#discussion_r480078903", "createdAt": "2020-08-31T11:52:18Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/CommandCounter.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CommandCounter {\n+\n+  protected String name;\n+  protected AtomicLong count = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfc78dde1f34755ace51e68ba892c5603bf8e84b"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4d90c810886818c5ad15a2aeb36fc92b153ff20", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/f4d90c810886818c5ad15a2aeb36fc92b153ff20", "committedDate": "2020-08-31T15:08:20Z", "message": "chore(engine): apply suggestions from code review\n\nCo-authored-by: Tassilo Weidner <tassilo.weidner@camunda.com>"}, "afterCommit": {"oid": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/1a6ee8fdf5c282631717ed20c570f4d725415ea1", "committedDate": "2020-08-31T15:17:45Z", "message": "improve(engine): improve synchronization in telemetry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a6ee8fdf5c282631717ed20c570f4d725415ea1", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/1a6ee8fdf5c282631717ed20c570f4d725415ea1", "committedDate": "2020-08-31T15:17:45Z", "message": "improve(engine): improve synchronization in telemetry"}, "afterCommit": {"oid": "975e299eb638cc419ee5450fcab2d74af9870b27", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/975e299eb638cc419ee5450fcab2d74af9870b27", "committedDate": "2020-08-31T15:20:13Z", "message": "improve(engine): improve synchronization in telemetry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5Nzc5OTM2", "url": "https://github.com/camunda/camunda-bpm-platform/pull/935#pullrequestreview-479779936", "createdAt": "2020-09-01T14:10:12Z", "commit": {"oid": "975e299eb638cc419ee5450fcab2d74af9870b27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "committedDate": "2020-09-01T15:21:01Z", "message": "chore(engine): extend telemetry data with command count\n\n* introduce command counter interceptor that keep track of all executed\ncommand counts in the telemetry registry\n* upon sending telemetry data including command counts, the counts are\nreset\n\nRelated to CAM-12176"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "975e299eb638cc419ee5450fcab2d74af9870b27", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/975e299eb638cc419ee5450fcab2d74af9870b27", "committedDate": "2020-08-31T15:20:13Z", "message": "improve(engine): improve synchronization in telemetry"}, "afterCommit": {"oid": "eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "author": {"user": {"login": "yanavasileva", "name": null}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/eb88a28fa29179919e2cbe255c2f5de8b6e714f1", "committedDate": "2020-09-01T15:21:01Z", "message": "chore(engine): extend telemetry data with command count\n\n* introduce command counter interceptor that keep track of all executed\ncommand counts in the telemetry registry\n* upon sending telemetry data including command counts, the counts are\nreset\n\nRelated to CAM-12176"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1768, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}