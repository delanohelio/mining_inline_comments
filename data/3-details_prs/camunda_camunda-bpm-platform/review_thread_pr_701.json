{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODE4NjYx", "number": 701, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxNjoyMlrODkoFbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxODo0NFrODkoIQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzMyMDc2OnYy", "diffSide": "RIGHT", "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxNjoyMlrOFxDbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxNjoyMlrOFxDbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MDc5Mg==", "bodyText": "Let's use java.nio.file.Files here.\nThis expects for example an InputStream as source (can be received with #getResourceAsStream from the class loader) and a Path as target (can be build easily by using java.nio.file.Paths#get).", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386980792", "createdAt": "2020-03-03T12:16:22Z", "author": {"login": "tmetzke"}, "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "diffHunk": "@@ -267,27 +270,27 @@ protected static Integer windowsProcessId(Process process) {\n     return null;\n   }\n \n-  private void createTestYml() {\n+  public void createConfigurationYml(String filePath, File source) {\n     try {\n-      File baseYml = new File(SpringBootManagedContainer.class.getClassLoader().getResource(BASE_TEST_APPLICATION_YML).getFile());\n-      File testYml = new File(new File(baseDirectory), APPLICATION_YML_PATH);\n-      Files.copy(baseYml, testYml);\n+      File testYml = new File(new File(baseDirectory), filePath);\n+      Files.copy(source, testYml);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzMyMzM5OnYy", "diffSide": "RIGHT", "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxNzoxMVrOFxDdNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxNzoxMVrOFxDdNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MTE3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  log.error(\"Could not copy default.yml\", e);\n          \n          \n            \n                  log.error(\"Could not create \" + filePath, e);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386981174", "createdAt": "2020-03-03T12:17:11Z", "author": {"login": "tmetzke"}, "path": "distro/run/qa/src/test/java/org/camunda/bpm/run/qa/util/SpringBootManagedContainer.java", "diffHunk": "@@ -267,27 +270,27 @@ protected static Integer windowsProcessId(Process process) {\n     return null;\n   }\n \n-  private void createTestYml() {\n+  public void createConfigurationYml(String filePath, File source) {\n     try {\n-      File baseYml = new File(SpringBootManagedContainer.class.getClassLoader().getResource(BASE_TEST_APPLICATION_YML).getFile());\n-      File testYml = new File(new File(baseDirectory), APPLICATION_YML_PATH);\n-      Files.copy(baseYml, testYml);\n+      File testYml = new File(new File(baseDirectory), filePath);\n+      Files.copy(source, testYml);\n+      configurationFiles.add(testYml);\n     } catch (IOException e) {\n-      log.error(\"Could not copy application.yml\", e);\n+      log.error(\"Could not copy default.yml\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzMyODAxOnYy", "diffSide": "RIGHT", "path": "distro/run/qa/src/test/resources/ProductionConfigurationIntegrationTest_production.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjoxODo0NFrOFxDf9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo1NTo0MFrOFxGqPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MTg3OA==", "bodyText": "Do we know what database configuration will be used here now?\nShould we define the in-memory db as well?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r386981878", "createdAt": "2020-03-03T12:18:44Z", "author": {"login": "tmetzke"}, "path": "distro/run/qa/src/test/resources/ProductionConfigurationIntegrationTest_production.yml", "diffHunk": "@@ -0,0 +1 @@\n+camunda.bpm.process-engine-name: production", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAzMzY2MQ==", "bodyText": "Good hint. I think it works because of this. (Not sure though)\nWe should define the standard in-memory db here.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/701#discussion_r387033661", "createdAt": "2020-03-03T13:55:40Z", "author": {"login": "mboskamp"}, "path": "distro/run/qa/src/test/resources/ProductionConfigurationIntegrationTest_production.yml", "diffHunk": "@@ -0,0 +1 @@\n+camunda.bpm.process-engine-name: production", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4MTg3OA=="}, "originalCommit": {"oid": "d21413b4dd292ef6e39f49294a1019ff7f1e8cfd"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4655, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}