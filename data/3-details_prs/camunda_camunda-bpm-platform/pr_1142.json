{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NDgxODE2", "number": 1142, "title": "CAM-12752: add DB matrix stages", "bodyText": "Add stages for Engine/Engine Authorizations DB Unit tests;\nAdd stages for Webapp/Webapp Authorizations DB Unit tests;\nAdd missing stages in the second parallelization block;\n\nRelated to CAM-12752", "createdAt": "2020-11-24T13:32:03Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142", "merged": true, "mergeCommit": {"oid": "959e814fe96293a91fef15dab9a9b8865c047ae7"}, "closed": true, "closedAt": "2020-11-25T13:22:03Z", "author": {"login": "koevskinikola"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfp4lYAFqTUzNzQ5Njg5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf-QemABqjQwMzgwNTA0NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NDk2ODk5", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#pullrequestreview-537496899", "createdAt": "2020-11-24T13:36:47Z", "commit": {"oid": "db9d389208064074cffca28e7d21be929b2e8958"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzozNjo0OFrOH5BJXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzozNjo0OFrOH5BJXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU0OTY2MQ==", "bodyText": "Do we still need this file?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529549661", "createdAt": "2020-11-24T13:36:48Z", "author": {"login": "yanavasileva"}, "path": ".ci/maven/nexus-settings.xml", "diffHunk": "@@ -0,0 +1,141 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d389208064074cffca28e7d21be929b2e8958"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTAyMjc5", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#pullrequestreview-537502279", "createdAt": "2020-11-24T13:42:55Z", "commit": {"oid": "db9d389208064074cffca28e7d21be929b2e8958"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzo0Mjo1NVrOH5BZPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMzo0OToyOFrOH5Bqfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1MzcyNw==", "bodyText": "Do we need the first agent?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529553727", "createdAt": "2020-11-24T13:42:55Z", "author": {"login": "yanavasileva"}, "path": "Jenkinsfile", "diffHunk": "@@ -351,46 +350,233 @@ pipeline {\n         }\n       }\n     }\n+    stage(\"engine-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+//        when {\n+//          anyOf {\n+//            branch 'pipeline-master';\n+//            allOf {\n+//              changeRequest();\n+//              expression {\n+//                withLabels(\"all-db\") || withDbLabel(env.DB)\n+//              }\n+//            }\n+//          }\n+//        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d389208064074cffca28e7d21be929b2e8958"}, "originalPosition": 414}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzM0Mg==", "bodyText": "We need more memory for this one otherwise, it will fail", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529557342", "createdAt": "2020-11-24T13:48:16Z", "author": {"login": "yanavasileva"}, "path": "Jenkinsfile", "diffHunk": "@@ -351,46 +350,233 @@ pipeline {\n         }\n       }\n     }\n+    stage(\"engine-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+//        when {\n+//          anyOf {\n+//            branch 'pipeline-master';\n+//            allOf {\n+//              changeRequest();\n+//              expression {\n+//                withLabels(\"all-db\") || withDbLabel(env.DB)\n+//              }\n+//            }\n+//          }\n+//        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"engine-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16) + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n     stage('db tests + CE webapps IT + EE platform') {\n       parallel {\n         stage('engine-api-compatibility') {\n           agent {\n             kubernetes {\n-              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+              yaml getAgent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d389208064074cffca28e7d21be929b2e8958"}, "originalPosition": 526}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1NzQ1Ng==", "bodyText": "same here", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529557456", "createdAt": "2020-11-24T13:48:28Z", "author": {"login": "yanavasileva"}, "path": "Jenkinsfile", "diffHunk": "@@ -351,46 +350,233 @@ pipeline {\n         }\n       }\n     }\n+    stage(\"engine-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+//        when {\n+//          anyOf {\n+//            branch 'pipeline-master';\n+//            allOf {\n+//              changeRequest();\n+//              expression {\n+//                withLabels(\"all-db\") || withDbLabel(env.DB)\n+//              }\n+//            }\n+//          }\n+//        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"engine-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16) + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"engine-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'engine/', 'clean test -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -P' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+    stage(\"webapp-UNIT-authorizations DB tests\") {\n+      matrix {\n+        axes {\n+          axis {\n+            name 'DB'\n+            values 'postgresql_96', 'mariadb_103'\n+          }\n+        }\n+        agent {\n+          kubernetes {\n+            yaml getAgent() + getDbAgent(env.DB)\n+          }\n+        }\n+        stages {\n+          stage(\"webapp-UNIT-authorizations\") {\n+            steps {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n+                runMaven(true, false, false, 'webapps/', 'clean test -Dskip.frontend.build=true -PcfgAuthorizationCheckRevokesAlways' + getDbProfiles(env.DB) + \" \" + getDbExtras(env.DB), true)\n+              }\n+            }\n+            post {\n+              always {\n+                junit testResults: '**/target/*-reports/TEST-*.xml', keepLongStdio: true\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n     stage('db tests + CE webapps IT + EE platform') {\n       parallel {\n         stage('engine-api-compatibility') {\n           agent {\n             kubernetes {\n-              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+              yaml getAgent()\n             }\n           }\n           steps{\n-            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'maven-nexus-settings') {\n+            withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-public-maven-settings') {\n               runMaven(true, false, false, 'engine/', 'clean verify -Pcheck-api-compatibility')\n             }\n           }\n         }\n         stage('engine-UNIT-plugins') {\n           agent {\n             kubernetes {\n-              yaml getAgent('gcr.io/ci-30-162810/centos:v0.4.6', 16)\n+              yaml getAgent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d389208064074cffca28e7d21be929b2e8958"}, "originalPosition": 540}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU1ODE0Mg==", "bodyText": "We should not change this file", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r529558142", "createdAt": "2020-11-24T13:49:28Z", "author": {"login": "yanavasileva"}, "path": "settings/maven/nexus-settings.xml", "diffHunk": "@@ -2,26 +2,40 @@\n <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n           xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n           xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n+  <interactiveMode>false</interactiveMode>\n   <mirrors>\n     <mirror>\n       <id>camunda-nexus</id>\n       <mirrorOf>*</mirrorOf>\n       <name>Camunda Nexus</name>\n-      <url>https://app.camunda.com/nexus/content/groups/public</url>\n+      <url>http://repository-ci-camunda-cloud.nexus:8081/content/groups/internal/</url>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db9d389208064074cffca28e7d21be929b2e8958"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c3844557c686d01d199e930aeb5019fe13f1485", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/0c3844557c686d01d199e930aeb5019fe13f1485", "committedDate": "2020-11-25T09:17:24Z", "message": "SQUASH ME: implement review hints"}, "afterCommit": {"oid": "8749339dabc08b79a3e14f63b6620a8b66046c01", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/8749339dabc08b79a3e14f63b6620a8b66046c01", "committedDate": "2020-11-25T09:23:03Z", "message": "feat(pipeline): add db matrices\n\nRelated to CAM-12712, CAM-12752"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzcxMDE3", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#pullrequestreview-538371017", "createdAt": "2020-11-25T10:48:17Z", "commit": {"oid": "8749339dabc08b79a3e14f63b6620a8b66046c01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0ODoxN1rOH5tnXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDo0ODoxN1rOH5tnXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3ODIzNg==", "bodyText": "Is it a typo?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            void withDbLabels(String dbLabel) {\n          \n          \n            \n            void withDbLabel(String dbLabel) {", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#discussion_r530278236", "createdAt": "2020-11-25T10:48:17Z", "author": {"login": "yanavasileva"}, "path": "Jenkinsfile", "diffHunk": "@@ -434,3 +641,85 @@ void withLabels(String... labels) {\n     pullRequest.labels.contains(labelName)\n   }\n }\n+\n+void withDbLabels(String dbLabel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8749339dabc08b79a3e14f63b6620a8b66046c01"}, "originalPosition": 370}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDU5MTA1", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1142#pullrequestreview-538459105", "createdAt": "2020-11-25T12:46:58Z", "commit": {"oid": "625668338f3ac04c8cac455e79c072a940beb518"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d53172dd0f16b9728a203ac7d8a1fc6ff6b12f6", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/5d53172dd0f16b9728a203ac7d8a1fc6ff6b12f6", "committedDate": "2020-11-25T13:09:02Z", "message": "feat(pipeline): add missing second step stages\n\n* Include engine-UNIT-db-table-prefix, engine-UNIT-wls-compatibility\n* Include IT-wildfly-domain and IT-wildfly-servlet\n\nRelated to CAM-12712, CAM-12752"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995721109edfa37f8d8eef10b8762aa372110922", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/995721109edfa37f8d8eef10b8762aa372110922", "committedDate": "2020-11-25T13:20:33Z", "message": "feat(pipeline): add db matrices\n\nRelated to CAM-12712, CAM-12752"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "625668338f3ac04c8cac455e79c072a940beb518", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/625668338f3ac04c8cac455e79c072a940beb518", "committedDate": "2020-11-25T11:13:59Z", "message": "Update Jenkinsfile\n\nCo-authored-by: yanavasileva <yanavasileva@users.noreply.github.com>"}, "afterCommit": {"oid": "995721109edfa37f8d8eef10b8762aa372110922", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/995721109edfa37f8d8eef10b8762aa372110922", "committedDate": "2020-11-25T13:20:33Z", "message": "feat(pipeline): add db matrices\n\nRelated to CAM-12712, CAM-12752"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2055, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}