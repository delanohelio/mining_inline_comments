{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NjM5Mjc5", "number": 761, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1MjowMVrODsruGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMDozN1rODssiYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTgwMjUwOnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1MjowMVrOF9qxCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzo1MjowMVrOF9qxCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwODEzOQ==", "bodyText": "It's probably a better test if we test with a time that is not 00:00:00. This would catch more bugs in my opinion.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/761#discussion_r400208139", "createdAt": "2020-03-30T13:52:01Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessDefinitionRestServiceQueryTest.java", "diffHunk": "@@ -611,4 +619,29 @@ public void testQueryCount() {\n     verify(mockedQuery).count();\n   }\n \n+  @Test\n+  public void testQueryByDeployTimeAfter() {\n+    String deployTime = withTimezone(\"2020-03-27T00:00:00\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8d1675b690060ec79d73a0072848bd20bdf70"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg0Mzg4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/ProcessDefinition.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDowMDozMFrOF9rLEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDowMDozMFrOF9rLEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNDgwMw==", "bodyText": "The > probably needs to be URL encoded to be valid XML?! We use &gt; in other places.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/761#discussion_r400214803", "createdAt": "2020-03-30T14:00:30Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/ProcessDefinition.xml", "diffHunk": "@@ -295,6 +301,12 @@\n       <if test=\"deploymentId != null\">\n         and RES.DEPLOYMENT_ID_ = #{deploymentId}\n       </if>\n+      <if test=\"deployedAfter != null\">\n+        and DEP.DEPLOY_TIME_ > #{deployedAfter}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8d1675b690060ec79d73a0072848bd20bdf70"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTg2MTA0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/repository/ProcessDefinitionQuery.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDowNDoyOFrOF9rWHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjozMDo0N1rOF-HErw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNzYyOQ==", "bodyText": "In all other APIs, XXAfter means that it is inclusive. This new option is exclusive. I suggest calling the method deployedAfterExclusive then, to make clear that this deviates from the convention.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/761#discussion_r400217629", "createdAt": "2020-03-30T14:04:28Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/repository/ProcessDefinitionQuery.java", "diffHunk": "@@ -60,6 +62,16 @@\n    */\n   ProcessDefinitionQuery deploymentId(String deploymentId);\n \n+  /**\n+   * Only select process definitions that were deployed after the given Date (exclusive).\n+   */\n+  ProcessDefinitionQuery deployedAfter(Date deployedAfter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8d1675b690060ec79d73a0072848bd20bdf70"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3MTkxOQ==", "bodyText": "I found a lot of examples where XXAfter is used for exclusive filtering.\n\nExternalTask.lockExpirationAfter\nDeployment.deploymentAfter\nJob.createdAfter\nTask.dueAfter\n\nFrom a users and semantic perspective, I think this makes sense as X is not after Y if X = Y.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/761#discussion_r400671919", "createdAt": "2020-03-31T06:30:47Z", "author": {"login": "mboskamp"}, "path": "engine/src/main/java/org/camunda/bpm/engine/repository/ProcessDefinitionQuery.java", "diffHunk": "@@ -60,6 +62,16 @@\n    */\n   ProcessDefinitionQuery deploymentId(String deploymentId);\n \n+  /**\n+   * Only select process definitions that were deployed after the given Date (exclusive).\n+   */\n+  ProcessDefinitionQuery deployedAfter(Date deployedAfter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIxNzYyOQ=="}, "originalCommit": {"oid": "39c8d1675b690060ec79d73a0072848bd20bdf70"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTkwOTY3OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNDo1N1rOF9r1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNDo1N1rOF9r1Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNTU5NA==", "bodyText": "This test is not robust. It assumes that time elapses between the deployments, but that is not enforced. Furthermore, it does not test that the number of returned definitions is in any way correct, e.g. if the process definition query returned no or too little results, the test would still succeed.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/761#discussion_r400225594", "createdAt": "2020-03-30T14:14:57Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionQueryTest.java", "diffHunk": "@@ -108,6 +111,36 @@ public void testQueryByInvalidDeploymentId() {\n     repositoryService.createProcessDefinitionQuery().deploymentId(null);\n   }\n \n+  @Test\n+  public void testQueryByDeploymentTimeAfter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8d1675b690060ec79d73a0072848bd20bdf70"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTkyMTc5OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNzozMlrOF9r9EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoxNzozMlrOF9r9EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyNzYwMQ==", "bodyText": "Same here, this test is only works if time elapses between deployments. Please also verify that the returned definitions are actually the ones you expect and not just that the count is correct.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/761#discussion_r400227601", "createdAt": "2020-03-30T14:17:32Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionQueryTest.java", "diffHunk": "@@ -108,6 +111,36 @@ public void testQueryByInvalidDeploymentId() {\n     repositoryService.createProcessDefinitionQuery().deploymentId(null);\n   }\n \n+  @Test\n+  public void testQueryByDeploymentTimeAfter() {\n+    List<Deployment> deployments = repositoryService.createDeploymentQuery().list();\n+\n+    for (Deployment deployment : deployments) {\n+      List<ProcessDefinition> processDefinitions = repositoryService.createProcessDefinitionQuery().deployedAfter(deployment.getDeploymentTime()).list();\n+      for (ProcessDefinition processDefinition : processDefinitions) {\n+        Deployment singleDeployment = repositoryService.createDeploymentQuery().deploymentId(processDefinition.getDeploymentId()).singleResult();\n+        // all results should have a later deployment time than the one used in the query\n+        assertThat(singleDeployment.getDeploymentTime()).isAfter(deployment.getDeploymentTime());\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void testQueryByDeploymentTimeAt() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8d1675b690060ec79d73a0072848bd20bdf70"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTkzNjMzOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMDozN1rOF9sGJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDoyMDozN1rOF9sGJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIyOTkyNg==", "bodyText": "I suggest to explictly assert the order in which process definitions are supposed to be returned. By these kind of dynamic assertions you always run into the risk of loops being skipped entirely or partially, if the results of the APIs change unintendedly (e.g. the test is green if no definitions are returned at all). Check for example ExecutionQueryTest#testQuerySorting for a more robust test.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/761#discussion_r400229926", "createdAt": "2020-03-30T14:20:37Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/ProcessDefinitionQueryTest.java", "diffHunk": "@@ -697,6 +730,22 @@ public void testQueryByNoVersionTag() {\n       .count()).isEqualTo(4);\n   }\n \n+  @Test\n+  public void testQueryOrderByDeployTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c8d1675b690060ec79d73a0072848bd20bdf70"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4570, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}