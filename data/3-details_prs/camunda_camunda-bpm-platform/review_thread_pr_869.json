{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NDMwMzE2", "number": 869, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0NDoyOVrOEIS5WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0ODowMFrOEIS-ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTMzNjU3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0NDoyOVrOGoK4aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0NDoyOVrOGoK4aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDUwNQ==", "bodyText": "I would prefer an active verb for this property, e.g. initializeTelemetry. The reason is that this property refers to something the engine does once on startup. Other properties that use passive voice (e.g. authorizationEnabled) refer to a state of the engine during its lifetime.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444774505", "createdAt": "2020-06-24T09:44:29Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -865,7 +865,8 @@\n \n \n   // telemetry ///////////////////////////////////////////////////////\n-  protected boolean telemetryEnabled = false;\n+  /** if set to true the telemetry will be enabled from the first engine start*/\n+  protected boolean telemetryInitialized = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTMzODg4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0NTowOVrOGoK54g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMjowMDozMFrOGoPDhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDg4Mg==", "bodyText": "The Javadoc should be a bit more verbose to make it more clear what the configuration does. E.g. explain that this will initialize the telemetry configuration only once when it has never been enabled/disabled before. After that, it can only be changed via API.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444774882", "createdAt": "2020-06-24T09:45:09Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -865,7 +865,8 @@\n \n \n   // telemetry ///////////////////////////////////////////////////////\n-  protected boolean telemetryEnabled = false;\n+  /** if set to true the telemetry will be enabled from the first engine start*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0Mjg4NQ==", "bodyText": "I extended the javadoc, could you please have a look", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444842885", "createdAt": "2020-06-24T12:00:30Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -865,7 +865,8 @@\n \n \n   // telemetry ///////////////////////////////////////////////////////\n-  protected boolean telemetryEnabled = false;\n+  /** if set to true the telemetry will be enabled from the first engine start*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NDg4Mg=="}, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTM0NTc0OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0Njo1N1rOGoK-Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTozNToxMVrOGoOSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NTk1MA==", "bodyText": "Not directly related to the topic of this ticket: I think this API design is a bit confusing. To disable delemetry, I would write managementService.enableTelemetry(false) which is not intuitive to read. Maybe toggleTelemetry instead of enableTelemetry is more clear.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444775950", "createdAt": "2020-06-24T09:46:57Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "diffHunk": "@@ -252,14 +252,17 @@ public void testTelemetryEnabledWithoutAutorization() {\n \n   public void testTelemetryEnabledAsCamundaAdmin() {\n     // given\n+    disableAuthorization();\n+    managementService.enableTelemetry(true);\n+    enableAuthorization();\n     identityService.setAuthentication(userId, Collections.singletonList(Groups.CAMUNDA_ADMIN));\n \n     // when\n-    managementService.enableTelemetry(true);\n+    managementService.enableTelemetry(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzMDIzMg==", "bodyText": "I will change it in CAM-12078", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444830232", "createdAt": "2020-06-24T11:35:11Z", "author": {"login": "yanavasileva"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "diffHunk": "@@ -252,14 +252,17 @@ public void testTelemetryEnabledWithoutAutorization() {\n \n   public void testTelemetryEnabledAsCamundaAdmin() {\n     // given\n+    disableAuthorization();\n+    managementService.enableTelemetry(true);\n+    enableAuthorization();\n     identityService.setAuthentication(userId, Collections.singletonList(Groups.CAMUNDA_ADMIN));\n \n     // when\n-    managementService.enableTelemetry(true);\n+    managementService.enableTelemetry(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NTk1MA=="}, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTM0NzE4OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0NzoxOFrOGoK-6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTozNTowNlrOGoOR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjE2OA==", "bodyText": "Not directly related to the topic of this ticket: Why is there no API method to check if telemetry is enabled?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444776168", "createdAt": "2020-06-24T09:47:18Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "diffHunk": "@@ -252,14 +252,17 @@ public void testTelemetryEnabledWithoutAutorization() {\n \n   public void testTelemetryEnabledAsCamundaAdmin() {\n     // given\n+    disableAuthorization();\n+    managementService.enableTelemetry(true);\n+    enableAuthorization();\n     identityService.setAuthentication(userId, Collections.singletonList(Groups.CAMUNDA_ADMIN));\n \n     // when\n-    managementService.enableTelemetry(true);\n+    managementService.enableTelemetry(false);\n \n     // then\n     String telemetryPropertyValue = TelemetryHelper.fetchConfigurationProperty(processEngineConfiguration).getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzMDE4OQ==", "bodyText": "I created CAM-12078 for this.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444830189", "createdAt": "2020-06-24T11:35:06Z", "author": {"login": "yanavasileva"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/ManagementAuthorizationTest.java", "diffHunk": "@@ -252,14 +252,17 @@ public void testTelemetryEnabledWithoutAutorization() {\n \n   public void testTelemetryEnabledAsCamundaAdmin() {\n     // given\n+    disableAuthorization();\n+    managementService.enableTelemetry(true);\n+    enableAuthorization();\n     identityService.setAuthentication(userId, Collections.singletonList(Groups.CAMUNDA_ADMIN));\n \n     // when\n-    managementService.enableTelemetry(true);\n+    managementService.enableTelemetry(false);\n \n     // then\n     String telemetryPropertyValue = TelemetryHelper.fetchConfigurationProperty(processEngineConfiguration).getValue();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjE2OA=="}, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MTM1MDA2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentTelemetryConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwOTo0ODowMFrOGoLAoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozNjo0NVrOGoX2Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjYwOQ==", "bodyText": "Not directly related to the topic of this ticket: Why does the test method sleep for 2 seconds?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444776609", "createdAt": "2020-06-24T09:48:00Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentTelemetryConfigurationTest.java", "diffHunk": "@@ -52,6 +46,8 @@ protected void runTest() throws Throwable {\n         || (transactionIsolationLevel != null && !transactionIsolationLevel.equals(Connection.TRANSACTION_READ_COMMITTED))) {\n       // skip test method - if database is H2\n     } else {\n+      // clean up the db property\n+      TestHelper.deleteTelemetryProperty(processEngineConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzNjI4Nw==", "bodyText": "thread2 to make progress before thread1 continues and finishes, otherwise, the concurrent situation might not happen if thread1 is faster. I guess this can be rewritten and improved (I didn't come up with how).", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444836287", "createdAt": "2020-06-24T11:47:20Z", "author": {"login": "yanavasileva"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentTelemetryConfigurationTest.java", "diffHunk": "@@ -52,6 +46,8 @@ protected void runTest() throws Throwable {\n         || (transactionIsolationLevel != null && !transactionIsolationLevel.equals(Connection.TRANSACTION_READ_COMMITTED))) {\n       // skip test method - if database is H2\n     } else {\n+      // clean up the db property\n+      TestHelper.deleteTelemetryProperty(processEngineConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjYwOQ=="}, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NjkyMg==", "bodyText": "Yana and I discussed this and understood that the Thread.sleep is necessary. The threads block on the pessismistic lock and in the concurrency test we have no chance to be notified of that waiting, so the best solution to is to choose a timeout that makes it quite likely that a thread reaches that waiting point.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/869#discussion_r444986922", "createdAt": "2020-06-24T15:36:45Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/concurrency/ConcurrentTelemetryConfigurationTest.java", "diffHunk": "@@ -52,6 +46,8 @@ protected void runTest() throws Throwable {\n         || (transactionIsolationLevel != null && !transactionIsolationLevel.equals(Connection.TRANSACTION_READ_COMMITTED))) {\n       // skip test method - if database is H2\n     } else {\n+      // clean up the db property\n+      TestHelper.deleteTelemetryProperty(processEngineConfiguration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc3NjYwOQ=="}, "originalCommit": {"oid": "9205d9e8067e841c3023ce0089b6f7976bfa549d"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4499, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}