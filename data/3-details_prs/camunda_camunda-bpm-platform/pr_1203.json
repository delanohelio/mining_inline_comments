{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzI2OTk2", "number": 1203, "title": "CAM-12905: chore(ci): add all rest stages", "bodyText": "Related to CAM-12778, CAM-12905", "createdAt": "2020-12-15T15:18:03Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1203", "merged": true, "mergeCommit": {"oid": "9435277cd5d982926ec914501632fbd850c37f84"}, "closed": true, "closedAt": "2020-12-16T14:11:04Z", "author": {"login": "koevskinikola"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmb5urgH2gAyNTQwMzI2OTk2OjkyZmVkZDYzN2I5NDA0OWY2OTllYWE0NDVjNGNmODRjYjllNGUwMWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmvhIYgH2gAyNTQwMzI2OTk2OjZkMjA3NGQ4NTgzZWVjNDZmNzVlYWEyOGFlNGQ0NWJkYjJhODA4Zjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "92fedd637b94049f699eaa445c4cf84cb9e4e01c", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/92fedd637b94049f699eaa445c4cf84cb9e4e01c", "committedDate": "2020-12-15T15:16:51Z", "message": "chore(ci): add all rest stages\n\nRelated to CAM-12778, CAM-12905"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d7870e37a8b7f68773ace9ce0a0c86ad25e3ad", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/59d7870e37a8b7f68773ace9ce0a0c86ad25e3ad", "committedDate": "2020-12-15T15:20:12Z", "message": "DROP ME: reduce pipeline size"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNjc2NTc2", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1203#pullrequestreview-553676576", "createdAt": "2020-12-16T13:19:34Z", "commit": {"oid": "59d7870e37a8b7f68773ace9ce0a0c86ad25e3ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzoxOTozNVrOIHE5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzoxOTozNVrOIHE5vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI5MTI2MQ==", "bodyText": "It seems that the qa stash is not needed (however, it takes only 1s to unstash)\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            cambpmRunMaven('qa/', 'clean install -Pwildfly,h2,webapps-integration,embedded-engine-rest', runtimeStash: true, archiveStash: true, qaStash: true)\n          \n          \n            \n                            cambpmRunMaven('qa/', 'clean install -Pwildfly,h2,webapps-integration,embedded-engine-rest', runtimeStash: true, archiveStash: true)", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1203#discussion_r544291261", "createdAt": "2020-12-16T13:19:35Z", "author": {"login": "yanavasileva"}, "path": "Jenkinsfile", "diffHunk": "@@ -254,6 +279,156 @@ pipeline {\n             }\n           }\n         }\n+        stage('engine-rest-UNIT-cxf') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pcxf', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-UNIT-wink') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pwink', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-jaxrs2-UNIT-jersey2') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest-jaxrs2/', 'clean install -Pjersey2', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-jaxrs2-UNIT-resteasy3') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest-jaxrs2/', 'clean install -Presteasy3', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-UNIT-compatibility-wildfly') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pwildfly-compatibility,resteasy', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-IT-embedded-wildfly') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('qa/', 'clean install -Pwildfly,h2,webapps-integration,embedded-engine-rest', runtimeStash: true, archiveStash: true, qaStash: true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d7870e37a8b7f68773ace9ce0a0c86ad25e3ad"}, "originalPosition": 176}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2074d8583eec46f75eaa28ae4d45bdb2a808f9", "author": {"user": {"login": "koevskinikola", "name": "Nikola Koevski"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/6d2074d8583eec46f75eaa28ae4d45bdb2a808f9", "committedDate": "2020-12-16T14:08:05Z", "message": "SQUASH ME: implement review hints"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2120, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}