{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0NTgxOTg4", "number": 945, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToyOTozMFrOEeO03g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNzoyNFrOEeO-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTM1NjQ2OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessInstanceRestServiceInteractionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToyOTozMFrOHJxXuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToyOTozMFrOHJxXuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwODEyMw==", "bodyText": "I guess it is just fine like that, but what it really tests is that ProcessEngineExceptions are transformed to InvalidRequestExceptions, right?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/945#discussion_r480008123", "createdAt": "2020-08-31T09:29:30Z", "author": {"login": "tmetzke"}, "path": "engine-rest/engine-rest/src/test/java/org/camunda/bpm/engine/rest/ProcessInstanceRestServiceInteractionTest.java", "diffHunk": "@@ -3634,6 +3640,254 @@ public void testAsyncProcessInstanceModificationCancellationSource() {\n     verify(mockModificationBuilder).cancellationSourceExternal(true);\n   }\n \n+  @Test\n+  public void shouldSetVariablesAsync() {\n+    // given\n+    Batch batchMock = createMockBatch();\n+    when(runtimeServiceMock.setVariablesAsync(any(), any(), any(), any()))\n+        .thenReturn(batchMock);\n+\n+    SetVariablesAsyncDto body = new SetVariablesAsyncDto();\n+\n+    VariableValueDto variableValueDto = new VariableValueDto();\n+    variableValueDto.setValue(\"bar\");\n+\n+    body.setVariables(Collections.singletonMap(\"foo\", variableValueDto));\n+\n+    // when\n+    Response response = given()\n+          .contentType(ContentType.JSON)\n+          .body(body)\n+        .then().expect()\n+          .statusCode(Status.OK.getStatusCode())\n+        .when()\n+          .post(PROCESS_INSTANCE_SET_VARIABLES_ASYNC_URL);\n+\n+    // then\n+    ArgumentCaptor<Map> captor = ArgumentCaptor.forClass(Map.class);\n+    verify(runtimeServiceMock).setVariablesAsync(\n+        eq(null),\n+        eq(null),\n+        eq(null),\n+        captor.capture()\n+    );\n+\n+    Assertions.assertThat(captor.getValue().get(\"foo\")).isEqualTo(\"bar\");\n+\n+    verifyBatchJson(response.asString());\n+  }\n+\n+  @Test\n+  public void shouldThrowExceptionWhenSetVariablesAsync_UnsupportedType() {\n+    // given\n+    Batch batchMock = createMockBatch();\n+    when(runtimeServiceMock.setVariablesAsync(any(), any(), any(), any()))\n+        .thenReturn(batchMock);\n+\n+    SetVariablesAsyncDto body = new SetVariablesAsyncDto();\n+\n+    VariableValueDto variableValueDto = new VariableValueDto();\n+    variableValueDto.setValue(\"bar\");\n+    variableValueDto.setType(\"unknown\");\n+\n+    body.setVariables(Collections.singletonMap(\"foo\", variableValueDto));\n+\n+    // when + then\n+    given()\n+          .contentType(ContentType.JSON)\n+          .body(body)\n+        .then().expect()\n+          .statusCode(Status.BAD_REQUEST.getStatusCode())\n+          .body(containsString(\"{\\\"type\\\":\\\"InvalidRequestException\\\",\" +\n+              \"\\\"message\\\":\\\"Cannot set variables: Unsupported value type 'unknown'\\\"}\"))\n+        .when()\n+          .post(PROCESS_INSTANCE_SET_VARIABLES_ASYNC_URL);\n+  }\n+\n+  @Test\n+  public void shouldThrowExceptionWhenSetVariablesAsync_JavaSerializationFormatProhibited() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc85e19d2285c6b8348525799d2153b863e69a78"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTM3MzA3OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/runtime/batch/SetVariablesAsyncDto.ftl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNDozOFrOHJxhiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNDozOFrOHJxhiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxMDYzMg==", "bodyText": "Should we include the desc from camunda/camunda-docs-manual#664 as well?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/945#discussion_r480010632", "createdAt": "2020-08-31T09:34:38Z", "author": {"login": "tmetzke"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/runtime/batch/SetVariablesAsyncDto.ftl", "diffHunk": "@@ -0,0 +1,27 @@\n+<@lib.dto>\n+\n+    <@lib.property\n+        name = \"processInstanceIds\"\n+        type = \"array\"\n+        itemType = \"string\"\n+        desc = \"A list of process instance ids that define a group of process instances\n+                to which the operation will set variables.\" />\n+\n+    <@lib.property\n+        name = \"processInstanceQuery\"\n+        type = \"ref\"\n+        dto = \"ProcessInstanceQueryDto\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc85e19d2285c6b8348525799d2153b863e69a78"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTM3MzU5OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/runtime/batch/SetVariablesAsyncDto.ftl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNDo0OFrOHJxhzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNDo0OFrOHJxhzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxMDcwMw==", "bodyText": "Should we include the desc from camunda/camunda-docs-manual#664 as well?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/945#discussion_r480010703", "createdAt": "2020-08-31T09:34:48Z", "author": {"login": "tmetzke"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/runtime/batch/SetVariablesAsyncDto.ftl", "diffHunk": "@@ -0,0 +1,27 @@\n+<@lib.dto>\n+\n+    <@lib.property\n+        name = \"processInstanceIds\"\n+        type = \"array\"\n+        itemType = \"string\"\n+        desc = \"A list of process instance ids that define a group of process instances\n+                to which the operation will set variables.\" />\n+\n+    <@lib.property\n+        name = \"processInstanceQuery\"\n+        type = \"ref\"\n+        dto = \"ProcessInstanceQueryDto\" />\n+\n+    <@lib.property\n+        name = \"historicProcessInstanceQuery\"\n+        type = \"ref\"\n+        dto = \"HistoricProcessInstanceQueryDto\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc85e19d2285c6b8348525799d2153b863e69a78"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTM3NTA0OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/runtime/batch/SetVariablesAsyncDto.ftl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNToxNVrOHJxisg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNToxNVrOHJxisg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxMDkzMA==", "bodyText": "Should we include the desc from camunda/camunda-docs-manual#664 as well?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/945#discussion_r480010930", "createdAt": "2020-08-31T09:35:15Z", "author": {"login": "tmetzke"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/models/org/camunda/bpm/engine/rest/dto/runtime/batch/SetVariablesAsyncDto.ftl", "diffHunk": "@@ -0,0 +1,27 @@\n+<@lib.dto>\n+\n+    <@lib.property\n+        name = \"processInstanceIds\"\n+        type = \"array\"\n+        itemType = \"string\"\n+        desc = \"A list of process instance ids that define a group of process instances\n+                to which the operation will set variables.\" />\n+\n+    <@lib.property\n+        name = \"processInstanceQuery\"\n+        type = \"ref\"\n+        dto = \"ProcessInstanceQueryDto\" />\n+\n+    <@lib.property\n+        name = \"historicProcessInstanceQuery\"\n+        type = \"ref\"\n+        dto = \"HistoricProcessInstanceQueryDto\" />\n+\n+      <@lib.property\n+          name = \"variables\"\n+          type = \"object\"\n+          additionalProperties = true\n+          last = true\n+          dto = \"VariableValueDto\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc85e19d2285c6b8348525799d2153b863e69a78"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTM4MjE3OnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/process-instance/variables-async/post.ftl", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNzoyNFrOHJxmyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTozNzoyNFrOHJxmyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxMTk3OA==", "bodyText": "Should we also include the following hint from camunda/camunda-docs-manual#664?\nPlease note that if processInstanceIds, processInstanceQuery and historicProcessInstanceQuery\nare defined, the resulting operation will be performed on the union of these sets.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/945#discussion_r480011978", "createdAt": "2020-08-31T09:37:24Z", "author": {"login": "tmetzke"}, "path": "engine-rest/engine-rest-openapi/src/main/templates/paths/process-instance/variables-async/post.ftl", "diffHunk": "@@ -0,0 +1,74 @@\n+{\n+  <@lib.endpointInfo\n+      id = \"setVariablesAsyncOperation\"\n+      tag = \"Process Instance\"\n+      desc = \"Update or create runtime process variables in the root scope of process instances.\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc85e19d2285c6b8348525799d2153b863e69a78"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4542, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}