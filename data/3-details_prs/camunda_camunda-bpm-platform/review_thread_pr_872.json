{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTY3OTc1", "number": 872, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoxNToyN1rOEJ_Edw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyODo0NVrOEJ_aQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTA1OTc1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoxNToyN1rOGqxEZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoxNToyN1rOGqxEZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5NzMxNg==", "bodyText": "Anonymous new Command() can be replaced with lambda.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/872#discussion_r447497316", "createdAt": "2020-06-30T08:15:27Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -68,21 +68,26 @@ protected void sendData() {\n     commandExecutor.execute(new Command<Void>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82309b0ae2f8d51ff469bb01b4632690c0b56196"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTA2NTU0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoxNjo0OVrOGqxHzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoxNjo0OVrOGqxHzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5ODE4OA==", "bodyText": "Gson is an expensive object. Can we extend the JsonUtil and use it from there?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/872#discussion_r447498188", "createdAt": "2020-06-30T08:16:49Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -68,21 +68,26 @@ protected void sendData() {\n     commandExecutor.execute(new Command<Void>() {\n       @Override\n       public Void execute(CommandContext commandContext) {\n-        try {\n-          HttpPost request = new HttpPost(telemetryEndpoint);\n-          String telemetryData = new Gson().toJson(data);\n-          StringEntity requestBody = new StringEntity(telemetryData, StandardCharsets.UTF_8);\n-          request.setHeader(\"content-type\", MediaType.APPLICATION_JSON);\n-          request.setEntity(requestBody);\n-          HttpResponse response = httpClient.execute(request);\n+        // send data only if telemetry is enabled\n+        if (commandContext.getProcessEngineConfiguration().getManagementService().isTelemetryEnabled()) {\n+          try {\n+            HttpPost request = new HttpPost(telemetryEndpoint);\n+            String telemetryData = new Gson().toJson(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82309b0ae2f8d51ff469bb01b4632690c0b56196"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTA2OTE0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetryReporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoxNzo0MlrOGqxJ_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNDowMlrOGqxaCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5ODc1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                timer = new Timer(\"Camunda Telemetry Reporter\", true);\n          \n          \n            \n                timer = new Timer(\"Camunda BPM Runtime Telemetry Reporter\", true);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/872#discussion_r447498751", "createdAt": "2020-06-30T08:17:42Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetryReporter.java", "diffHunk": "@@ -54,22 +56,25 @@ protected void initTelemetrySendingTask() {\n   }\n \n   public void start() {\n+    if (stopped) {\n+      // if the reporter was already stopped another task should be scheduled\n+      initTelemetrySendingTask();\n+    }\n     timer = new Timer(\"Camunda Telemetry Reporter\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82309b0ae2f8d51ff469bb01b4632690c0b56196"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwMjg1OA==", "bodyText": "Right now, this method can be called multiple times via ManagementService#toggleTelemetry(true). This leads to multiple timers running in parallel. The timers which are not referenced anymore are still active in the background and continue to execute the telemetry sending task. They cannot be canceled and will eventually be force killed when the JVM is shutdown.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/872#discussion_r447502858", "createdAt": "2020-06-30T08:24:02Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetryReporter.java", "diffHunk": "@@ -54,22 +56,25 @@ protected void initTelemetrySendingTask() {\n   }\n \n   public void start() {\n+    if (stopped) {\n+      // if the reporter was already stopped another task should be scheduled\n+      initTelemetrySendingTask();\n+    }\n     timer = new Timer(\"Camunda Telemetry Reporter\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ5ODc1MQ=="}, "originalCommit": {"oid": "82309b0ae2f8d51ff469bb01b4632690c0b56196"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTEwNDY0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNjoxOFrOGqxgEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyNjoxOFrOGqxgEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNDQwMA==", "bodyText": "System properties are not taken into account. When a user wants to proxy the telemetry endpoint, an HTTP client needs to be instantiated manually, which is tricky (engine plugin needed). Let's #useSystemProperties by default.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/872#discussion_r447504400", "createdAt": "2020-06-30T08:26:18Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -2557,6 +2575,37 @@ protected void initAdminGroups() {\n     }\n   }\n \n+  protected void initTelemetry() {\n+    if (telemetryData == null) {\n+      initTelemetryData();\n+    }\n+    if (telemetryHttpClient == null) {\n+      telemetryHttpClient = HttpClientBuilder.create().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82309b0ae2f8d51ff469bb01b4632690c0b56196"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTExMzg2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetryReporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyODoyMlrOGqxllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyODoyMlrOGqxllQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNTgxMw==", "bodyText": "Throws IllegalStateException if the task...\n\n... was already scheduled or canceled\n... the timer was canceled\n... the timer thread terminated", "url": "https://github.com/camunda/camunda-bpm-platform/pull/872#discussion_r447505813", "createdAt": "2020-06-30T08:28:22Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetryReporter.java", "diffHunk": "@@ -54,22 +56,25 @@ protected void initTelemetrySendingTask() {\n   }\n \n   public void start() {\n+    if (stopped) {\n+      // if the reporter was already stopped another task should be scheduled\n+      initTelemetrySendingTask();\n+    }\n     timer = new Timer(\"Camunda Telemetry Reporter\", true);\n     long reportingIntervalInMillis =  reportingIntervalInSeconds * 1000;\n \n     timer.scheduleAtFixedRate(telemetrySendingTask, reportingIntervalInMillis, reportingIntervalInMillis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82309b0ae2f8d51ff469bb01b4632690c0b56196"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTExNTUzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyODo0NVrOGqxmnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODoyODo0NVrOGqxmnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUwNjA3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              protected static final String PRODUCT_NAME = \"Camunda BPM\";\n          \n          \n            \n              protected static final String PRODUCT_NAME = \"Camunda BPM Runtime\";", "url": "https://github.com/camunda/camunda-bpm-platform/pull/872#discussion_r447506076", "createdAt": "2020-06-30T08:28:45Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -387,6 +395,10 @@\n \n   public static final int DEFAULT_INVOCATIONS_PER_BATCH_JOB = 1;\n \n+  protected static final String EDITION_ENTERPRISE = \"enterprise\";\n+  protected static final String EDITION_COMMUNITY = \"community\";\n+  protected static final String PRODUCT_NAME = \"Camunda BPM\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82309b0ae2f8d51ff469bb01b4632690c0b56196"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4504, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}