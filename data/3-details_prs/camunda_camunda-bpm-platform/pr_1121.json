{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzYwOTYy", "number": 1121, "title": "chore(cockpit): add process instance provider", "bodyText": "related to CAM-12720", "createdAt": "2020-11-12T09:53:02Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121", "merged": true, "mergeCommit": {"oid": "d439fab18ad84edf783693e3e876cb105a9e169e"}, "closed": true, "closedAt": "2020-11-16T08:36:53Z", "author": {"login": "tasso94"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbwNZaAFqTUyODk0NTg4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdcGmMoAFqTUzMDAzMzQxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4OTQ1ODg3", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#pullrequestreview-528945887", "createdAt": "2020-11-12T10:24:46Z", "commit": {"oid": "f957691da3ecfe331761084a235566fb5e6279bd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyNDo0NlrOHx0L4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMDoyNTo0M1rOHx0ONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5NzI4MA==", "bodyText": "With Complex Objects, we should not add every key as a prop directly. Instead, let's create a processInstance prop with the query result. This way, processInstance and processDefinition providers would not override the id prop:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              <Component {...useContext(ProcessInstanceContext)} {...props} />\n          \n          \n            \n              <Component processInstance={useContext(ProcessInstanceContext)} {...props} />", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#discussion_r521997280", "createdAt": "2020-11-12T10:24:46Z", "author": {"login": "marstamm"}, "path": "webapps/ui/cockpit/src/components/ProcessInstance/HOC/withProcessInstance.js", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import React, { useEffect, useState, createContext, useContext } from \"react\";\n+\n+import { get } from \"utils/request\";\n+\n+const ProcessInstanceContext = createContext();\n+\n+export function ProcessInstanceProvider({ processInstanceId, children }) {\n+  const [processInstance, setProcessInstance] = useState(null);\n+\n+  useEffect(() => {\n+    const loadProcessInstance = async () => {\n+      return await (await get(\n+        `%ENGINE_API%/process-instance/${processInstanceId}`\n+      )).json();\n+    };\n+\n+    loadProcessInstance().then(processInstance => {\n+      setProcessInstance(processInstance);\n+    });\n+  }, [processInstanceId]);\n+\n+  return (\n+    <ProcessInstanceContext.Provider value={processInstance}>\n+      {children}\n+    </ProcessInstanceContext.Provider>\n+  );\n+}\n+\n+export default Component => props => (\n+  <Component {...useContext(ProcessInstanceContext)} {...props} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f957691da3ecfe331761084a235566fb5e6279bd"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTk5Nzg3Ng==", "bodyText": "Note: Only works when initialized, as mentioned in the top comment 2. Can be worked around by initializing the context with {} instead of null\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            function CancelProcessInstance({ id, definitionId }) {\n          \n          \n            \n            function CancelProcessInstance({ processInstance }) {\n          \n          \n            \n              const {id, definitionId} = processInstance;", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#discussion_r521997876", "createdAt": "2020-11-12T10:25:43Z", "author": {"login": "marstamm"}, "path": "webapps/ui/cockpit/src/modules/components/processInstance/CancelProcessInstance/CancelProcessInstance.js", "diffHunk": "@@ -37,10 +38,9 @@ const STATUS = Object.freeze({\n   NOT_FOUND: 6\n });\n \n-export default function CancelProcessInstance({ processInstanceId }) {\n+function CancelProcessInstance({ id, definitionId }) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f957691da3ecfe331761084a235566fb5e6279bd"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7686465cd9d16888d6461346b23bd3eec0bef3ac", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/7686465cd9d16888d6461346b23bd3eec0bef3ac", "committedDate": "2020-11-12T15:51:59Z", "message": "chore(cockpit): add process instance provider\n\nrelated to CAM-12720"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee2da794e0d7e41751df71df558e5940f794d054", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/ee2da794e0d7e41751df71df558e5940f794d054", "committedDate": "2020-11-12T15:52:02Z", "message": "SQUASH ME: follow review hints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d4ec1cad9084f86e041c42c7394b50127fbbd3c", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/2d4ec1cad9084f86e041c42c7394b50127fbbd3c", "committedDate": "2020-11-12T15:52:02Z", "message": "SQUASH ME: avoid recreation of default wrapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "committedDate": "2020-11-12T15:52:44Z", "message": "SQUASH ME"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a32eb2783853b5aa0b29e719a464445657c83084", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a32eb2783853b5aa0b29e719a464445657c83084", "committedDate": "2020-11-12T12:30:51Z", "message": "SQUASH ME: follow review hints"}, "afterCommit": {"oid": "a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9560e1b0a913ed1981bc39e24ba1eadc07b66de", "committedDate": "2020-11-12T15:52:44Z", "message": "SQUASH ME"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMDMzNDE0", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1121#pullrequestreview-530033414", "createdAt": "2020-11-13T12:48:16Z", "commit": {"oid": "a9560e1b0a913ed1981bc39e24ba1eadc07b66de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2174, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}