{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NzYyNDU0", "number": 777, "title": "I can grant Historic Process Instance Authorizations", "bodyText": "related to CAM-11189", "createdAt": "2020-04-06T16:29:44Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777", "merged": true, "mergeCommit": {"oid": "2c6c5411fa6205228dc7fedc1586db8509234423"}, "closed": true, "closedAt": "2020-04-20T14:17:01Z", "author": {"login": "tasso94"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYKiPfgFqTM5Mjg3Mzc4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZfwRHABqjMyNTE5NTU4NDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODczNzg3", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#pullrequestreview-392873787", "createdAt": "2020-04-14T12:23:54Z", "commit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjozODo1M1rOGFMlzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxMDowNzozNlrOGGeJqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEwMjM1MQ==", "bodyText": "Shouldn't this check HistoricProcessInstancePermissions.READ?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408102351", "createdAt": "2020-04-14T12:38:53Z", "author": {"login": "mboskamp"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEyMTQ4OA==", "bodyText": "Shouldn't this check HistoricProcessInstancePermissions.READ?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408121488", "createdAt": "2020-04-14T13:08:11Z", "author": {"login": "mboskamp"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/AuthorizationManager.java", "diffHunk": "@@ -676,13 +690,51 @@ public void configureJobQuery(JobQueryImpl query) {\n   // historic process instance query ///////////////////////////////////\n \n   public void configureHistoricProcessInstanceQuery(HistoricProcessInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"SELF.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"SELF.ID_\", READ)\n+          .build();\n+\n+      addPermissionCheck(authCheck, permissionCheck);\n+\n+    }\n   }\n \n   // historic activity instance query /////////////////////////////////\n \n   public void configureHistoricActivityInstanceQuery(HistoricActivityInstanceQueryImpl query) {\n-    configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+    AuthorizationCheck authCheck = query.getAuthCheck();\n+\n+    boolean isHistoricInstancePermissionsEnabled = isHistoricInstancePermissionsEnabled();\n+    authCheck.setHistoricInstancePermissionsEnabled(isHistoricInstancePermissionsEnabled);\n+\n+    if (!isHistoricInstancePermissionsEnabled) {\n+      configureQuery(query, PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY);\n+\n+    } else {\n+      configureQuery(query);\n+\n+      CompositePermissionCheck permissionCheck = new PermissionCheckBuilder()\n+          .disjunctive()\n+          .atomicCheck(PROCESS_DEFINITION, \"RES.PROC_DEF_KEY_\", READ_HISTORY)\n+          .atomicCheck(HISTORIC_PROCESS_INSTANCE, \"RES.PROC_INST_ID_\", READ)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODg3OTczNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n          \n          \n            \n              public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r408879735", "createdAt": "2020-04-15T14:20:24Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricDetailAuthorizationTest.java", "diffHunk": "@@ -998,6 +1000,137 @@ public void testHistoricTaskPermissionsAuthorizationDisabled() {\n     assertEquals(1, result.size());\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(0, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_GlobalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    disableAuthorization();\n+    runtimeService.setVariable(processInstanceId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance_LocalVariable() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckReadPermissionOnCompletedHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(PROCESS_KEY).getId();\n+    String taskId = selectSingleTask().getId();\n+    disableAuthorization();\n+    taskService.setVariable(taskId, \"foo\", \"bar\");\n+    taskService.complete(taskId);\n+    enableAuthorization();\n+\n+    createGrantAuthorization(HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    List<HistoricDetail> result = historyService.createHistoricDetailQuery()\n+        .list();\n+\n+    // then\n+    assertEquals(1, result.size());\n+  }\n+\n+  public void testCheckNoneOnHHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxNzgyNg==", "bodyText": "Should go into @ After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409417826", "createdAt": "2020-04-16T09:34:09Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyEndTest.java", "diffHunk": "@@ -506,6 +506,169 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    String processInstanceId = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), nullValue());\n+\n+    // when\n+    String taskId = taskService.createTaskQuery().singleResult().getId();\n+\n+    ClockUtil.setCurrentTime(END_DATE);\n+\n+    taskService.complete(taskId);\n+\n+    // then\n+    Date removalTime = addDays(END_DATE, 5);\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQxODM4Mw==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409418383", "createdAt": "2020-04-16T09:35:02Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/RemovalTimeStrategyStartTest.java", "diffHunk": "@@ -577,6 +577,143 @@ public void shouldResolveAuthorizationAfterUpdate() {\n     clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldResolveHistoricTaskAuthorization_HistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    testRule.deploy(CALLING_PROCESS);\n+\n+    testRule.deploy(CALLED_PROCESS);\n+\n+    ClockUtil.setCurrentTime(START_DATE);\n+\n+    ProcessInstance processInstance = runtimeService.startProcessInstanceByKey(CALLING_PROCESS_KEY);\n+\n+    // when\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+\n+    authorization.setUserId(\"myUserId\");\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+\n+    String processInstanceId = processInstance.getProcessInstanceId();\n+    authorization.setResourceId(processInstanceId);\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // then\n+    Date removalTime = addDays(START_DATE, 5);\n+\n+    assertThat(authorization.getRootProcessInstanceId(), is(processInstance.getRootProcessInstanceId()));\n+    assertThat(authorization.getRemovalTime(), is(removalTime));\n+\n+    // clear\n+    clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67e7a3a84d3213b8b6ac3e3e2416b663a9683352"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTU4Mw==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409425583", "createdAt": "2020-04-16T09:46:39Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQyNTY0MA==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409425640", "createdAt": "2020-04-16T09:46:45Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeNonHierarchicalTest.java", "diffHunk": "@@ -503,6 +503,80 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // when\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(REMOVAL_TIME);\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    HistoricProcessInstanceQuery query = historyService.createHistoricProcessInstanceQuery();\n+\n+    // when\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .absoluteRemovalTime(REMOVAL_TIME)\n+            .byQuery(query)\n+            .executeAsync()\n+    );\n+\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    // then\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODU3OA==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409438578", "createdAt": "2020-04-16T10:07:31Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTQzODYzMg==", "bodyText": "Should go into @After method to make sure it clears authorizations even if an assert statement fails.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#discussion_r409438632", "createdAt": "2020-04-16T10:07:36Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/history/removaltime/batch/BatchSetRemovalTimeHierarchicalTest.java", "diffHunk": "@@ -702,6 +702,93 @@ public void shouldNotSetRemovalTime_HistoricInstancePermissionsDisabled() {\n     testRule.clearAuthorization();\n   }\n \n+  @Test\n+  public void shouldSetRemovalTime_HistoricProcessInstanceAuthorization() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    // assume\n+    authorization = authorizationService.createAuthorizationQuery().singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // when\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+            .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+            .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isEqualTo(addDays(CURRENT_DATE, 5));\n+\n+    // clear\n+    testRule.clearAuthorization();\n+  }\n+\n+  @Test\n+  public void shouldNotSetRemovalTime_HistoricProcessInstancePermissionsDisabled() {\n+    // given\n+    testRule.getProcessEngineConfiguration()\n+        .setEnableHistoricInstancePermissions(false);\n+\n+    String processInstanceId = testRule.process().call().userTask().deploy().start();\n+\n+    Authorization authorization =\n+        authorizationService.createNewAuthorization(Authorization.AUTH_TYPE_GRANT);\n+    authorization.setResource(Resources.HISTORIC_PROCESS_INSTANCE);\n+    authorization.setResourceId(processInstanceId);\n+    authorization.setUserId(\"foo\");\n+\n+    authorizationService.saveAuthorization(authorization);\n+\n+    testRule.updateHistoryTimeToLive(\"rootProcess\", 5);\n+\n+    // when\n+    HistoricProcessInstanceQuery query =\n+        historyService.createHistoricProcessInstanceQuery().rootProcessInstances();\n+\n+    testRule.syncExec(\n+        historyService.setRemovalTimeToHistoricProcessInstances()\n+            .calculatedRemovalTime()\n+            .byQuery(query)\n+            .hierarchical()\n+            .executeAsync()\n+    );\n+\n+    // then\n+    authorization = authorizationService.createAuthorizationQuery()\n+        .resourceType(Resources.HISTORIC_PROCESS_INSTANCE)\n+        .singleResult();\n+\n+    assertThat(authorization.getRemovalTime()).isNull();\n+\n+    // clear\n+    testRule.clearAuthorization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c90e14aaff79e0c6495b00f1bbb8fd227a8cf8"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NDU4MTYy", "url": "https://github.com/camunda/camunda-bpm-platform/pull/777#pullrequestreview-396458162", "createdAt": "2020-04-20T13:35:45Z", "commit": {"oid": "9e9d7d00f0d15f02b4c7ee9f722d8dce10f4c9b1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6fc0f3dc552abbf87831b3e7af498ad473b692", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/ba6fc0f3dc552abbf87831b3e7af498ad473b692", "committedDate": "2020-04-20T13:54:55Z", "message": "feat(engine): introduce historic process instance permissions\n\nrelated to CAM-11630"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61347289d0fe3208af23ec4f30a5a94dfd072542", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/61347289d0fe3208af23ec4f30a5a94dfd072542", "committedDate": "2020-04-20T13:54:55Z", "message": "feat(engine): reuse config flag for hist. process instance permissions\n\nrelated to CAM-11638"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f01cf17ea4204abe702e8e136623a4c9e7da6a0", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/2f01cf17ea4204abe702e8e136623a4c9e7da6a0", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): enforce hist. process auth. for process query\n\nrelated to CAM-11631"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9ee66a386f4f67bf5e1a25aac2f06bf178f92bc", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a9ee66a386f4f67bf5e1a25aac2f06bf178f92bc", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): enforce hist. process auth. for act. inst. query\n\nrelated to CAM-11632"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad052d2dfaed6ee1c3ef87964393cfaa1323981b", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/ad052d2dfaed6ee1c3ef87964393cfaa1323981b", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): enforce hist. process auth. for variab.&detail query\n\nrelated to CAM-11633"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9385d56bfa436723f86b1b6b89c16b2bf635db9c", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/9385d56bfa436723f86b1b6b89c16b2bf635db9c", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): enforce hist. process auth. for task query\n\nrelated to CAM-11635"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbcbf47bce566fa319cd4580745b5ab00c45c634", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/bbcbf47bce566fa319cd4580745b5ab00c45c634", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): enforce hist. process auth. for ident.link log\n\nrelated to CAM-11637"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66e1a7df6732b01277cb407e021b0e7374ac1a6d", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/66e1a7df6732b01277cb407e021b0e7374ac1a6d", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): set remov. time to hist.proc.inst. related authorization\n\nrelated to CAM-11640"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc9e7ad1188eea2bf914e9937e2c2b553a8396fd", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/bc9e7ad1188eea2bf914e9937e2c2b553a8396fd", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): add deletion of hist. proc. inst. authorization\n\nrelated to CAM-11728"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd9cec880868b198452ef2c37745b121a1dc3e30", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/dd9cec880868b198452ef2c37745b121a1dc3e30", "committedDate": "2020-04-20T14:06:05Z", "message": "fix(engine): improve query of hist.inst.auth. for detail & variable\n\nrelated to CAM-11741"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70583ae292cd20608e5b10960a571d10122b7b86", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/70583ae292cd20608e5b10960a571d10122b7b86", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): add non-hierarch. set remo. time to hist.proc.inst. auth\n\nrelated to CAM-11744"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e9d7d00f0d15f02b4c7ee9f722d8dce10f4c9b1", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/9e9d7d00f0d15f02b4c7ee9f722d8dce10f4c9b1", "committedDate": "2020-04-20T09:40:41Z", "message": "assert user cannot perform an action with missing auth"}, "afterCommit": {"oid": "70583ae292cd20608e5b10960a571d10122b7b86", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/70583ae292cd20608e5b10960a571d10122b7b86", "committedDate": "2020-04-20T14:06:05Z", "message": "feat(engine): add non-hierarch. set remo. time to hist.proc.inst. auth\n\nrelated to CAM-11744"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1837, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}