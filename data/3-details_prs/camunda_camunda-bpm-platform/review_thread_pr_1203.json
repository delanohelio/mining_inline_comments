{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMzI2OTk2", "number": 1203, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzoxOTozNVrOFGMCcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzoxOTozNVrOFGMCcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDMzMDEwOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMzoxOTozNVrOIHE5vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNDowODoyM1rOIHHBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI5MTI2MQ==", "bodyText": "It seems that the qa stash is not needed (however, it takes only 1s to unstash)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            cambpmRunMaven('qa/', 'clean install -Pwildfly,h2,webapps-integration,embedded-engine-rest', runtimeStash: true, archiveStash: true, qaStash: true)\n          \n          \n            \n                            cambpmRunMaven('qa/', 'clean install -Pwildfly,h2,webapps-integration,embedded-engine-rest', runtimeStash: true, archiveStash: true)", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1203#discussion_r544291261", "createdAt": "2020-12-16T13:19:35Z", "author": {"login": "yanavasileva"}, "path": "Jenkinsfile", "diffHunk": "@@ -254,6 +279,156 @@ pipeline {\n             }\n           }\n         }\n+        stage('engine-rest-UNIT-cxf') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pcxf', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-UNIT-wink') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pwink', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-jaxrs2-UNIT-jersey2') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest-jaxrs2/', 'clean install -Pjersey2', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-jaxrs2-UNIT-resteasy3') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest-jaxrs2/', 'clean install -Presteasy3', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-UNIT-compatibility-wildfly') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pwildfly-compatibility,resteasy', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-IT-embedded-wildfly') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('qa/', 'clean install -Pwildfly,h2,webapps-integration,embedded-engine-rest', runtimeStash: true, archiveStash: true, qaStash: true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59d7870e37a8b7f68773ace9ce0a0c86ad25e3ad"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDMyNjAyNg==", "bodyText": "You're right. I'll remove it.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/1203#discussion_r544326026", "createdAt": "2020-12-16T14:08:23Z", "author": {"login": "koevskinikola"}, "path": "Jenkinsfile", "diffHunk": "@@ -254,6 +279,156 @@ pipeline {\n             }\n           }\n         }\n+        stage('engine-rest-UNIT-cxf') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pcxf', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-UNIT-wink') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pwink', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-jaxrs2-UNIT-jersey2') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest-jaxrs2/', 'clean install -Pjersey2', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-jaxrs2-UNIT-resteasy3') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest-jaxrs2/', 'clean install -Presteasy3', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-UNIT-compatibility-wildfly') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('engine-rest/engine-rest/', 'clean install -Pwildfly-compatibility,resteasy', runtimeStash: true)\n+              }\n+            }\n+          }\n+          post {\n+            always {\n+              cambpmPublishTestResult();\n+            }\n+          }\n+        }\n+        stage('engine-rest-IT-embedded-wildfly') {\n+          when {\n+            expression {\n+              cambpmWithLabels('rest-api')\n+            }\n+            beforeAgent true\n+          }\n+          agent {\n+            node {\n+              label 'h2'\n+            }\n+          }\n+          steps {\n+            catchError(stageResult: 'FAILURE') {\n+              withMaven(jdk: 'jdk-8-latest', maven: 'maven-3.2-latest', mavenSettingsConfig: 'camunda-maven-settings', options: [artifactsPublisher(disabled: true), junitPublisher(disabled: true)]) {\n+                cambpmRunMaven('qa/', 'clean install -Pwildfly,h2,webapps-integration,embedded-engine-rest', runtimeStash: true, archiveStash: true, qaStash: true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI5MTI2MQ=="}, "originalCommit": {"oid": "59d7870e37a8b7f68773ace9ce0a0c86ad25e3ad"}, "originalPosition": 176}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4401, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}