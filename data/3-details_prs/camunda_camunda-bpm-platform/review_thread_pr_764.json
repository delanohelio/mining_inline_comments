{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1Njc3NzMw", "number": 764, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyNDoxMVrODvnTBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyNTozM1rODvnVkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjUzNTExOnYy", "diffSide": "RIGHT", "path": "engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/DecisionDefinition.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyNDoxMVrOGCI_kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyNDoxMVrOGCI_kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg5NzY4MQ==", "bodyText": "Please escape the comparison operator.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/764#discussion_r404897681", "createdAt": "2020-04-07T15:24:11Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/resources/org/camunda/bpm/engine/impl/mapping/entity/DecisionDefinition.xml", "diffHunk": "@@ -306,9 +292,15 @@\n       <if test=\"deploymentId != null\">\n         and RES.DEPLOYMENT_ID_ = #{deploymentId}\n       </if>\n+      <if test=\"deployedAfter != null\">\n+        and DEP.DEPLOY_TIME_ > #{deployedAfter}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96ef081b5149492ee048439903f2f8bdd2da1b1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjU0MTYxOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/DecisionDefinitionQueryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyNTozM1rOGCJDqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyNTozM1rOGCJDqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg5ODczMA==", "bodyText": "This duplicate call to ClockUtil#setCurrentTime is not necessary.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/764#discussion_r404898730", "createdAt": "2020-04-07T15:25:33Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/repository/DecisionDefinitionQueryTest.java", "diffHunk": "@@ -126,79 +136,155 @@ public void queryByDecisionDefinitionIds() {\n       .decisionDefinitionIdIn(ids.toArray(new String[ids.size()]))\n       .list();\n \n-    assertEquals(ids.size(), decisionDefinitions.size());\n+    assertThat(decisionDefinitions).hasSize(ids.size());\n     for (DecisionDefinition decisionDefinition : decisionDefinitions) {\n-      if (!ids.contains(decisionDefinition.getId())) {\n-        fail(\"Expected to find decision definition \"+ decisionDefinition);\n-      }\n+      assertThat(ids).contains(decisionDefinition.getId()).withFailMessage(\"Expected to find decision definition \" + decisionDefinition);\n     }\n   }\n \n   @Test\n-\tpublic void queryByDeploymentId() {\n+  public void queryByDeploymentId() {\n     DecisionDefinitionQuery query = repositoryService.createDecisionDefinitionQuery();\n \n-    query\n-      .deploymentId(firstDeploymentId);\n+    query.deploymentId(firstDeploymentId);\n \n     verifyQueryResults(query, 2);\n   }\n \n   @Test\n-\tpublic void queryByInvalidDeploymentId() {\n+  public void queryByInvalidDeploymentId() {\n     DecisionDefinitionQuery query = repositoryService.createDecisionDefinitionQuery();\n \n    query\n      .deploymentId(\"invalid\");\n \n     verifyQueryResults(query, 0);\n \n-    try {\n-      query.deploymentId(null);\n-      fail();\n-    } catch (NotValidException e) {\n-      // Expected exception\n-    }\n+    exceptionRule.expect(NotValidException.class);\n+    query.deploymentId(null);\n   }\n \n   @Test\n-\tpublic void queryByName() {\n+  public void testQueryByDeploymentTimeAfter() {\n+    // given\n+    Date startTest = DateUtils.addSeconds(ClockUtil.now(), 5);\n+    ClockUtil.setCurrentTime(startTest);\n+\n+    ClockUtil.setCurrentTime(DateUtils.addSeconds(startTest, 5));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96ef081b5149492ee048439903f2f8bdd2da1b1"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4575, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}