{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MzkxODg5", "number": 888, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODozMDo0NFrOENtpZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTowMToxNlrOEOK1aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyODE0ODIyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/DbOperationManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODozMDo0NFrOGweSlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwODozMDo0NFrOGweSlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ4MTExMQ==", "bodyText": "I will not add them so far. We can add them later if we need it.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r453481111", "createdAt": "2020-07-13T08:30:44Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/DbOperationManager.java", "diffHunk": "@@ -133,9 +135,38 @@ public boolean addOperationPreserveOrder(DbBulkOperation newOperation) {\n     addSortedInserts(flush);\n     // then UPDATEs + DELETEs\n     addSortedModifications(flush);\n+    \n+    resolveDependencies(flush);\n     return flush;\n   }\n \n+  // TODO: resolve is probably not the correct verb\n+  private void resolveDependencies(List<DbOperation> flush) {\n+    for (DbOperation operation : flush) {\n+      if (operation instanceof DbEntityOperation) {\n+        DbEntity entity = ((DbEntityOperation) operation).getEntity();\n+        if (entity instanceof HasDbReferences) {\n+          Map<String, Class> dependentEntities = ((HasDbReferences) entity).getDependentEntities();\n+          \n+          \n+          if (dependentEntities != null) {\n+            dependentEntities.forEach((id, type) -> {\n+              // TODO: also updates and inserts?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b143b413b289e51e639a461cccc6b6361f781273"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjgwNzQ2OnYy", "diffSide": "RIGHT", "path": "engine/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODoyNzo0OVrOGxJm6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODoyNzo0OVrOGxJm6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MDgyNA==", "bodyText": "We can (optionally) add a comment here why this test is ignored for this profile.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r454190824", "createdAt": "2020-07-14T08:27:49Z", "author": {"login": "koevskinikola"}, "path": "engine/pom.xml", "diffHunk": "@@ -807,6 +807,7 @@\n                 <exclude>**/removaltime/cleanup/HistoryCleanupScheduler*Test.java</exclude>\n                 <exclude>**/HistoryCleanupDisabledOnBootstrapTest.java</exclude>\n                 <exclude>**/LoginAttemptsTest.java</exclude>\n+                <exclude>**/ConcurrentHistoryCleanupUpdateOfFailingJobTest.java</exclude>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5b2e0f3a32f4965b3e5e229af36d6b67be35d0"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjgxMDkwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODoyODo0NFrOGxJpEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTo1MTo0OVrOGxMkiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MTM3Ng==", "bodyText": "Is it possible to pass some contextual info here? E.g. \"parent operation failed\".", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r454191376", "createdAt": "2020-07-14T08:28:44Z", "author": {"login": "koevskinikola"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -792,4 +792,9 @@ public void installationIdPropertyFound(String value) {\n         \"100\", \"Installation id property found in the database: {}\", value);\n   }\n \n+  public void ignoreFailureDuePreconditionNotMet() {\n+    logDebug(\n+        \"101\", \"Ignoring operation failure due to unmet precondition\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5b2e0f3a32f4965b3e5e229af36d6b67be35d0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwNTE0OA==", "bodyText": "Also which operation this message concerns.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r454205148", "createdAt": "2020-07-14T08:52:36Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -792,4 +792,9 @@ public void installationIdPropertyFound(String value) {\n         \"100\", \"Installation id property found in the database: {}\", value);\n   }\n \n+  public void ignoreFailureDuePreconditionNotMet() {\n+    logDebug(\n+        \"101\", \"Ignoring operation failure due to unmet precondition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MTM3Ng=="}, "originalCommit": {"oid": "5d5b2e0f3a32f4965b3e5e229af36d6b67be35d0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzNzMzMA==", "bodyText": "How does it sound:\nIgnoring database operation failure due to an unmet precondition. Parent database operation failed: 'UPDATE EverLivingJobEntity[1]'", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r454237330", "createdAt": "2020-07-14T09:48:13Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -792,4 +792,9 @@ public void installationIdPropertyFound(String value) {\n         \"100\", \"Installation id property found in the database: {}\", value);\n   }\n \n+  public void ignoreFailureDuePreconditionNotMet() {\n+    logDebug(\n+        \"101\", \"Ignoring operation failure due to unmet precondition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MTM3Ng=="}, "originalCommit": {"oid": "5d5b2e0f3a32f4965b3e5e229af36d6b67be35d0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIzOTM2OA==", "bodyText": "Sounds good. If possible, include_ \"DELETE ByteArray[X]\" as well so the message is self-contained.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r454239368", "createdAt": "2020-07-14T09:51:49Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -792,4 +792,9 @@ public void installationIdPropertyFound(String value) {\n         \"100\", \"Installation id property found in the database: {}\", value);\n   }\n \n+  public void ignoreFailureDuePreconditionNotMet() {\n+    logDebug(\n+        \"101\", \"Ignoring operation failure due to unmet precondition\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE5MTM3Ng=="}, "originalCommit": {"oid": "5d5b2e0f3a32f4965b3e5e229af36d6b67be35d0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjkxNTUyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/DbOperationManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo1NzoxNFrOGxKp4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwODo1NzoxNFrOGxKp4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIwNzk2OQ==", "bodyText": "*determine", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r454207969", "createdAt": "2020-07-14T08:57:14Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/entitymanager/operation/DbOperationManager.java", "diffHunk": "@@ -243,4 +246,28 @@ protected void addSortedModificationsForType(Class<?> type, SortedSet<DbEntityOp\n \n     return opList;\n   }\n+\n+  protected void determinateDependencies(List<DbOperation> flush) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5b2e0f3a32f4965b3e5e229af36d6b67be35d0"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjkzMDM1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTowMToxNlrOGxKzFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOTowMToxNlrOGxKzFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIxMDMyNQ==", "bodyText": "Let's try to get the wording right to avoid future confusion. I propose we call the parent operation (here: job update) the \"dependency\" and the child operation (here: byte array delete) the \"dependent\" (based on https://english.stackexchange.com/questions/25575/what-is-the-correct-word-for-dependee).", "url": "https://github.com/camunda/camunda-bpm-platform/pull/888#discussion_r454210325", "createdAt": "2020-07-14T09:01:16Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/DbSqlSession.java", "diffHunk": "@@ -184,12 +184,19 @@ protected void bulkOperationPerformed(DbBulkOperation operation, int rowsAffecte\n   }\n \n   protected void entityDeletePerformed(DbEntityOperation operation, int rowsAffected, Exception failure) {\n+    \n     if (failure != null) {\n       operation.setRowsAffected(0);\n       operation.setFailure(failure);\n \n+      DbOperation dependentOperation = operation.getDependentOperation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5b2e0f3a32f4965b3e5e229af36d6b67be35d0"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4512, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}