{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNzM4ODMx", "number": 923, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzo1MDowMlrOEa1yxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDozNDoyNFrOEe7q7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NTc5NzgwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzo1MDowMlrOHEgXSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwNzo1MDowMlrOHEgXSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQ4NjYwMQ==", "bodyText": "This method should be also thread safe\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void setApplicationServer(String applicationServerVersion) {\n          \n          \n            \n              public synchronized void setApplicationServer(String applicationServerVersion) {", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r474486601", "createdAt": "2020-08-21T07:50:02Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryRegistry.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.impl.telemetry;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.camunda.bpm.engine.impl.telemetry.dto.ApplicationServer;\n+\n+public class TelemetryRegistry {\n+\n+  protected Map<String, Object> entries = new HashMap<>();\n+  protected ApplicationServer applicationServer;\n+\n+  public synchronized ApplicationServer getApplicationServer() {\n+    return applicationServer;\n+  }\n+\n+  public synchronized void setApplicationServer(ApplicationServer applicationServer) {\n+    this.applicationServer = applicationServer;\n+  }\n+\n+  public void setApplicationServer(String applicationServerVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "260aae148535629c4104f0c7214625328cea0bad"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjM3NzAzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1NTozMlrOHJHC-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1NTozMlrOHJHC-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxNDY4Mg==", "bodyText": "I don't like this setter. It is much cleaner if we just get the respective object and then set it.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479314682", "createdAt": "2020-08-28T13:55:32Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/dto/Data.java", "diffHunk": "@@ -43,4 +45,12 @@ public void setProduct(Product product) {\n     this.product = product;\n   }\n \n+  public void setApplicationServer(ApplicationServer applicationServer) {\n+    this.product.internals.applicationServer = applicationServer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjM5NzM5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1OToxMlrOHJHQVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1OToxMlrOHJHQVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxODEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");\n          \n          \n            \n                Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479318101", "createdAt": "2020-08-28T13:59:12Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "diffHunk": "@@ -116,4 +116,18 @@ public static ProcessEngineDetails parseProcessEngineVersion(String packageImple\n \n     return new ProcessEngineDetails(version, edition);\n   }\n+\n+  public static String parseServerVendor(String applicationServerInfo) {\n+    String serverVendor = null;\n+    Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjQwODQ3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowMTowM1rOHJHXnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDowMTowM1rOHJHXnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxOTk2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return \"JBoss WildFly\";\n          \n          \n            \n                  return \"WildFly\";\n          \n      \n    \n    \n  \n\nI think the official name is not JBoss Wildfly. What is the idea behind this wording?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479319965", "createdAt": "2020-08-28T14:01:03Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "diffHunk": "@@ -116,4 +116,18 @@ public static ProcessEngineDetails parseProcessEngineVersion(String packageImple\n \n     return new ProcessEngineDetails(version, edition);\n   }\n+\n+  public static String parseServerVendor(String applicationServerInfo) {\n+    String serverVendor = null;\n+    Pattern pattern = Pattern.compile(\"[ A-Za-z]+\");\n+    Matcher matcher = pattern.matcher(applicationServerInfo);\n+    if (matcher.find()) {\n+      serverVendor = matcher.group(0).trim();\n+    }\n+    if (serverVendor.contains(\"WildFly\")) {\n+      return \"JBoss WildFly\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjUyNTIxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDoyNDowOVrOHJIkQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDoyNDowOVrOHJIkQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMzOTU4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (data.getProduct().getInternals().getApplicationServer() == null &&\n          \n          \n            \n                    processEngineConfiguration.getTelemetryRegistry().getApplicationServer() != null) {\n          \n          \n            \n                  data.setApplicationServer(processEngineConfiguration.getTelemetryRegistry().getApplicationServer());\n          \n          \n            \n                }\n          \n          \n            \n                Internals internals = data.getProduct().getInternals();\n          \n          \n            \n                ApplicationServer applicationServer = processEngineConfiguration.getTelemetryRegistry().getApplicationServer();\n          \n          \n            \n                if (internals.getApplicationServer() == null && applicationServer != null) {\n          \n          \n            \n                  internals.setApplicationServer(applicationServer);\n          \n          \n            \n                }", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479339587", "createdAt": "2020-08-28T14:24:09Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -98,5 +102,11 @@ protected void sendData() {\n     });\n   }\n \n+  protected void resolveDataFromRegistry(ProcessEngineConfigurationImpl processEngineConfiguration) {\n+    if (data.getProduct().getInternals().getApplicationServer() == null &&\n+        processEngineConfiguration.getTelemetryRegistry().getApplicationServer() != null) {\n+      data.setApplicationServer(processEngineConfiguration.getTelemetryRegistry().getApplicationServer());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjUzNTczOnYy", "diffSide": "RIGHT", "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDoyNjo1NFrOHJIq3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNDoyNzo1MVrOHJItCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MTI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (serverInfo != null && !sce.getServletContext().getServerInfo().isEmpty() ) {\n          \n          \n            \n                  Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n          \n          \n            \n                  for (String engineName : processEngineNames) {\n          \n          \n            \n                    ProcessEngine processEngine = lookupProcessEngine(engineName);\n          \n          \n            \n                    try {\n          \n          \n            \n                      if (processEngine.getProcessEngineConfiguration().getTelemetryRegistry() != null &&\n          \n          \n            \n                          processEngine.getProcessEngineConfiguration().getTelemetryRegistry().getApplicationServer() == null) {\n          \n          \n            \n            \n          \n          \n            \n                        processEngine.getProcessEngineConfiguration()\n          \n          \n            \n                            .getTelemetryRegistry()\n          \n          \n            \n                            .setApplicationServer(serverInfo);\n          \n          \n            \n                      }\n          \n          \n            \n                    } catch (Exception e) {\n          \n          \n            \n                      // do nothing\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                if (serverInfo != null && !serverInfo.isEmpty() ) {\n          \n          \n            \n                  Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n          \n          \n            \n                  for (String engineName : processEngineNames) {\n          \n          \n            \n                    ProcessEngine processEngine = lookupProcessEngine(engineName);\n          \n          \n            \n                    ProcessEngineConfiguration configuration = processEngine.getProcessEngineConfiguration();\n          \n          \n            \n                    TelemetryRegistry telemetryRegistry = configuration.getTelemetryRegistry();\n          \n          \n            \n                    if (telemetryRegistry != null && telemetryRegistry.getApplicationServer() == null) {\n          \n          \n            \n                        telemetryRegistry.setApplicationServer(serverInfo);\n          \n          \n            \n                    }\n          \n          \n            \n                  }\n          \n          \n            \n                }", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479341279", "createdAt": "2020-08-28T14:26:54Z", "author": {"login": "tasso94"}, "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.impl.web.bootstrap;\n+\n+import static org.camunda.bpm.engine.rest.util.EngineUtil.getProcessEngineProvider;\n+import static org.camunda.bpm.engine.rest.util.EngineUtil.lookupProcessEngine;\n+\n+import java.util.Set;\n+\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+\n+import org.camunda.bpm.engine.ProcessEngine;\n+\n+public class RestContainerBootstrap implements ServletContextListener {\n+\n+  @Override\n+  public void contextInitialized(ServletContextEvent sce) {\n+    String serverInfo = sce.getServletContext().getServerInfo();\n+    if (serverInfo != null && !sce.getServletContext().getServerInfo().isEmpty() ) {\n+      Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n+      for (String engineName : processEngineNames) {\n+        ProcessEngine processEngine = lookupProcessEngine(engineName);\n+        try {\n+          if (processEngine.getProcessEngineConfiguration().getTelemetryRegistry() != null &&\n+              processEngine.getProcessEngineConfiguration().getTelemetryRegistry().getApplicationServer() == null) {\n+\n+            processEngine.getProcessEngineConfiguration()\n+                .getTelemetryRegistry()\n+                .setApplicationServer(serverInfo);\n+          }\n+        } catch (Exception e) {\n+          // do nothing\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MTgzMw==", "bodyText": "Instead of this exception handling, let's just take care that in ParseUtil#parseServerVendor no exceptions are thrown.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r479341833", "createdAt": "2020-08-28T14:27:51Z", "author": {"login": "tasso94"}, "path": "engine-rest/engine-rest/src/main/java/org/camunda/bpm/engine/rest/impl/web/bootstrap/RestContainerBootstrap.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.engine.rest.impl.web.bootstrap;\n+\n+import static org.camunda.bpm.engine.rest.util.EngineUtil.getProcessEngineProvider;\n+import static org.camunda.bpm.engine.rest.util.EngineUtil.lookupProcessEngine;\n+\n+import java.util.Set;\n+\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+\n+import org.camunda.bpm.engine.ProcessEngine;\n+\n+public class RestContainerBootstrap implements ServletContextListener {\n+\n+  @Override\n+  public void contextInitialized(ServletContextEvent sce) {\n+    String serverInfo = sce.getServletContext().getServerInfo();\n+    if (serverInfo != null && !sce.getServletContext().getServerInfo().isEmpty() ) {\n+      Set<String> processEngineNames = getProcessEngineProvider().getProcessEngineNames();\n+      for (String engineName : processEngineNames) {\n+        ProcessEngine processEngine = lookupProcessEngine(engineName);\n+        try {\n+          if (processEngine.getProcessEngineConfiguration().getTelemetryRegistry() != null &&\n+              processEngine.getProcessEngineConfiguration().getTelemetryRegistry().getApplicationServer() == null) {\n+\n+            processEngine.getProcessEngineConfiguration()\n+                .getTelemetryRegistry()\n+                .setApplicationServer(serverInfo);\n+          }\n+        } catch (Exception e) {\n+          // do nothing\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTM0MTI3OQ=="}, "originalCommit": {"oid": "e19e69749bcd65f8c4d21cbe38c84ce65a27dc29"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODcwMzgxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDozNDoyNFrOHK5L9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDozNDoyNFrOHK5L9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE4NDc1OA==", "bodyText": "A proposal to be super sure that an exception is never thrown:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                String serverVendor = null;\n          \n          \n            \n                Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n          \n          \n            \n                Matcher matcher = pattern.matcher(applicationServerInfo);\n          \n          \n            \n                if (matcher.find()) {\n          \n          \n            \n                  serverVendor = matcher.group(0).trim();\n          \n          \n            \n                }\n          \n          \n            \n                if (serverVendor.contains(\"WildFly\")) {\n          \n          \n            \n                  return \"WildFly\";\n          \n          \n            \n                }\n          \n          \n            \n                return serverVendor;\n          \n          \n            \n                String serverVendor = \"\";\n          \n          \n            \n            \n          \n          \n            \n                Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n          \n          \n            \n                Matcher matcher = pattern.matcher(applicationServerInfo);\n          \n          \n            \n                if (matcher.find()) {\n          \n          \n            \n                  try {\n          \n          \n            \n                    serverVendor = matcher.group();\n          \n          \n            \n                  } catch (IllegalStateException ignored) {\n          \n          \n            \n                  }\n          \n          \n            \n            \n          \n          \n            \n                  serverVendor = serverVendor.trim();\n          \n          \n            \n            \n          \n          \n            \n                  if (serverVendor.contains(\"WildFly\")) {\n          \n          \n            \n                    return \"WildFly\";\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                return serverVendor;", "url": "https://github.com/camunda/camunda-bpm-platform/pull/923#discussion_r481184758", "createdAt": "2020-09-01T14:34:24Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ParseUtil.java", "diffHunk": "@@ -116,4 +116,18 @@ public static ProcessEngineDetails parseProcessEngineVersion(String packageImple\n \n     return new ProcessEngineDetails(version, edition);\n   }\n+\n+  public static String parseServerVendor(String applicationServerInfo) {\n+    String serverVendor = null;\n+    Pattern pattern = Pattern.compile(\"[\\\\sA-Za-z]+\");\n+    Matcher matcher = pattern.matcher(applicationServerInfo);\n+    if (matcher.find()) {\n+      serverVendor = matcher.group(0).trim();\n+    }\n+    if (serverVendor.contains(\"WildFly\")) {\n+      return \"WildFly\";\n+    }\n+    return serverVendor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4f5d771f34a9194d6e21144cae29c4bc79eeab9"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4525, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}