{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMTM2NzEw", "number": 903, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDoyMTozNFrOERY7sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxMjo0MFrOEWOyOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjY5NzQ0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDoyMTozNFrOG2Elcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo0MzowMVrOG2G2lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1MTQxMQ==", "bodyText": "Instead of hard coded value 202  you can use java.net.HttpURLConnection.HTTP_ACCEPTED.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r459351411", "createdAt": "2020-07-23T10:21:34Z", "author": {"login": "langfr"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -67,14 +62,15 @@ protected void sendData() {\n       // send data only if telemetry is enabled\n       if (commandContext.getProcessEngineConfiguration().getManagementService().isTelemetryEnabled()) {\n         try {\n-          HttpPost request = new HttpPost(telemetryEndpoint);\n           String telemetryData = JsonUtil.asString(data);\n-          StringEntity requestBody = new StringEntity(telemetryData, StandardCharsets.UTF_8);\n-          request.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n-          request.setEntity(requestBody);\n-          HttpResponse response = httpClient.execute(request);\n+          HttpResponse response = http.createRequest()\n+              .url(telemetryEndpoint)\n+              .post()\n+              .contentType(MediaType.APPLICATION_JSON)\n+              .payload(telemetryData)\n+              .execute();\n \n-          if (response == null || HttpStatus.SC_ACCEPTED != response.getStatusLine().getStatusCode()) {\n+          if (response == null || response.getStatusCode() != 202) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20bfceecb5c9252a33c91112a6857beb2eed4fd7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3NTI1Mg==", "bodyText": "thanks for the hint", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r459375252", "createdAt": "2020-07-23T11:13:13Z", "author": {"login": "yanavasileva"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -67,14 +62,15 @@ protected void sendData() {\n       // send data only if telemetry is enabled\n       if (commandContext.getProcessEngineConfiguration().getManagementService().isTelemetryEnabled()) {\n         try {\n-          HttpPost request = new HttpPost(telemetryEndpoint);\n           String telemetryData = JsonUtil.asString(data);\n-          StringEntity requestBody = new StringEntity(telemetryData, StandardCharsets.UTF_8);\n-          request.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n-          request.setEntity(requestBody);\n-          HttpResponse response = httpClient.execute(request);\n+          HttpResponse response = http.createRequest()\n+              .url(telemetryEndpoint)\n+              .post()\n+              .contentType(MediaType.APPLICATION_JSON)\n+              .payload(telemetryData)\n+              .execute();\n \n-          if (response == null || HttpStatus.SC_ACCEPTED != response.getStatusLine().getStatusCode()) {\n+          if (response == null || response.getStatusCode() != 202) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1MTQxMQ=="}, "originalCommit": {"oid": "20bfceecb5c9252a33c91112a6857beb2eed4fd7"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4ODU2NA==", "bodyText": "Or alternatively use our own constant. Same for the tests.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r459388564", "createdAt": "2020-07-23T11:43:01Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -67,14 +62,15 @@ protected void sendData() {\n       // send data only if telemetry is enabled\n       if (commandContext.getProcessEngineConfiguration().getManagementService().isTelemetryEnabled()) {\n         try {\n-          HttpPost request = new HttpPost(telemetryEndpoint);\n           String telemetryData = JsonUtil.asString(data);\n-          StringEntity requestBody = new StringEntity(telemetryData, StandardCharsets.UTF_8);\n-          request.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n-          request.setEntity(requestBody);\n-          HttpResponse response = httpClient.execute(request);\n+          HttpResponse response = http.createRequest()\n+              .url(telemetryEndpoint)\n+              .post()\n+              .contentType(MediaType.APPLICATION_JSON)\n+              .payload(telemetryData)\n+              .execute();\n \n-          if (response == null || HttpStatus.SC_ACCEPTED != response.getStatusLine().getStatusCode()) {\n+          if (response == null || response.getStatusCode() != 202) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM1MTQxMQ=="}, "originalCommit": {"oid": "20bfceecb5c9252a33c91112a6857beb2eed4fd7"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjkwNzQzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMjo0NFrOG2GkSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozMjo0NFrOG2GkSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4Mzg4MQ==", "bodyText": "The variable name is not great. telemetryHttpConnector would better describe the object.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r459383881", "createdAt": "2020-07-23T11:32:44Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -888,7 +888,7 @@\n   protected String telemetryEndpoint = \"https://api.telemetry.camunda.cloud/pings\";\n   protected TelemetryReporter telemetryReporter;\n   /** http client used for sending telemetry */\n-  protected HttpClient telemetryHttpClient;\n+  protected HttpConnector telemetryHttp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20bfceecb5c9252a33c91112a6857beb2eed4fd7"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjkzNDk5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo0MTo1NVrOG2G0wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo0MTo1NVrOG2G0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4ODA5OA==", "bodyText": "Not directly related to this change: We shoud log some details here, e.g. response code so that debugging is easier.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r459388098", "createdAt": "2020-07-23T11:41:55Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -67,14 +62,15 @@ protected void sendData() {\n       // send data only if telemetry is enabled\n       if (commandContext.getProcessEngineConfiguration().getManagementService().isTelemetryEnabled()) {\n         try {\n-          HttpPost request = new HttpPost(telemetryEndpoint);\n           String telemetryData = JsonUtil.asString(data);\n-          StringEntity requestBody = new StringEntity(telemetryData, StandardCharsets.UTF_8);\n-          request.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n-          request.setEntity(requestBody);\n-          HttpResponse response = httpClient.execute(request);\n+          HttpResponse response = http.createRequest()\n+              .url(telemetryEndpoint)\n+              .post()\n+              .contentType(MediaType.APPLICATION_JSON)\n+              .payload(telemetryData)\n+              .execute();\n \n-          if (response == null || HttpStatus.SC_ACCEPTED != response.getStatusLine().getStatusCode()) {\n+          if (response == null || response.getStatusCode() != 202) {\n             LOG.unexpectedResponseWhileSendingTelemetryData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20bfceecb5c9252a33c91112a6857beb2eed4fd7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Njk1NTY2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo0OToxM1rOG2HBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTo0OToxM1rOG2HBwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM5MTQyNQ==", "bodyText": "Why do some of the tests use Mockito instead of making a request against Wiremock like the others?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r459391425", "createdAt": "2020-07-23T11:49:13Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "diffHunk": "@@ -140,19 +135,24 @@ public void shouldReportDataWhenTelemetryInitialized() {\n \n   @Test\n   @WatchLogger(loggerNames = {\"org.camunda.bpm.engine.telemetry\"}, level = \"DEBUG\")\n-  public void shouldLogTelemetrySent() throws ClientProtocolException, IOException {\n+  public void shouldLogTelemetrySent() {\n     // given\n     managementService.toggleTelemetry(true);\n-    HttpClient mockedClient = mock(HttpClient.class);\n+    HttpConnector http = mock(HttpConnector.class);\n     TelemetryReporter telemetryReporter = new TelemetryReporter(configuration.getCommandExecutorTxRequired(),\n                                                                 TELEMETRY_ENDPOINT,\n                                                                 createDataToSend(),\n-                                                                mockedClient);\n+                                                                http);\n+    HttpRequest mockedRequest = mock(HttpRequest.class);\n     HttpResponse mockedResponse = mock(HttpResponse.class);\n-    when(mockedClient.execute(any())).thenReturn(mockedResponse);\n-    StatusLine mockedStatus = mock(StatusLine.class);\n-    when(mockedResponse.getStatusLine()).thenReturn(mockedStatus);\n-    when(mockedStatus.getStatusCode()).thenReturn(HttpStatus.SC_ACCEPTED);\n+    when(http.createRequest()).thenReturn(mockedRequest);\n+\n+    when(mockedRequest.url(any())).thenReturn(mockedRequest);\n+    when(mockedRequest.post()).thenReturn(mockedRequest);\n+    when(mockedRequest.contentType(any())).thenReturn(mockedRequest);\n+    when(mockedRequest.payload(any())).thenReturn(mockedRequest);\n+    when(mockedRequest.execute()).thenReturn(mockedResponse);\n+    when(mockedResponse.getStatusCode()).thenReturn(202);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20bfceecb5c9252a33c91112a6857beb2eed4fd7"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY1NTExOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozNjo0N1rOG791sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozNjo0N1rOG791sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMjMzNw==", "bodyText": "I think we can log this message on a higher level, e.g. warning. It is only logged once on engine start and relevant to understand if telemetry works at all. For the message, maybe something like No http connector found. No telemetry data will be sent. is a little clearer for people reading the logs.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r465532337", "createdAt": "2020-08-05T07:36:47Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/TelemetryLogger.java", "diffHunk": "@@ -25,42 +25,60 @@ public void startTelemetrySendingTask() {\n         \"001\", \"Start telemetry sending task.\");\n   }\n \n-  public void exceptionWhileSendingTelemetryData(String message) {\n+  public void exceptionWhileSendingTelemetryData(Exception e) {\n     logDebug(\n-        \"002\", \"An exception occurred while sending telemetry data: {}\", message);\n+        \"002\", \"'{}' exception occurred while sending telemetry data with message: {}\", \n+        e.getClass().getCanonicalName(),\n+        e.getMessage());\n+  }\n+\n+  public void unexpectedResponseWhileSendingTelemetryData(int responseCode) {\n+    logDebug(\n+        \"003\", \"Unexpected response while sending telemetry data. Status code: {}\", responseCode);\n   }\n \n   public void unexpectedResponseWhileSendingTelemetryData() {\n     logDebug(\n-        \"003\", \"Unexpect response while sending telemetry data.\");\n+        \"004\", \"Unexpected 'null' response while sending telemetry data.\");\n   }\n \n   public void telemetryDataSent(String data) {\n     logDebug(\n-        \"004\", \"Telemetry data sent: {}\", data);\n+        \"005\", \"Telemetry data sent: {}\", data);\n   }\n \n   public void databaseTelemetryPropertyMissingInfo(boolean telemetryEnabled) {\n     logInfo(\n-        \"005\",\n+        \"006\",\n         \"`camunda.telemetry.enabled` property is missing in the database, creating the property with value: {}\",\n         Boolean.toString(telemetryEnabled));\n   }\n \n   public void databaseTelemetryPropertyMissingInfo() {\n     logInfo(\n-        \"006\",\n+        \"007\",\n         \"`camunda.telemetry.enabled` property is missing in the database\");\n   }\n \n   public void telemetryDisabled() {\n     logDebug(\n-        \"007\", \"Sending telemetry is disabled.\");\n+        \"008\", \"Sending telemetry is disabled.\");\n   }\n \n   public void schedulingTaskFails(String message) {\n     logDebug(\n-        \"008\", \"An exception occured during scheduling telemetry task: {}\", message);\n+        \"009\", \"An exception occured during scheduling telemetry task: {}\", message);\n   }\n \n+  public void unableToConfigureHttpConnector() {\n+    logDebug(\n+        \"010\", \"The http connector used to send telemetry is `null`, telemetry data will not be sent.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c087c6274623979bd96194b466440ac897659f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY2MTgzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozOTowMVrOG7958w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzozOTowMVrOG7958w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzMzQyNw==", "bodyText": "I think this adds no benefit. Connectors#getConnector already initializes the connectors if they are not loaded yet.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r465533427", "createdAt": "2020-08-05T07:39:01Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/cfg/ProcessEngineConfigurationImpl.java", "diffHunk": "@@ -2579,14 +2581,24 @@ protected void initTelemetry() {\n     if (telemetryData == null) {\n       initTelemetryData();\n     }\n-    if (telemetryHttpClient == null) {\n-      telemetryHttpClient = HttpClientBuilder.create().useSystemProperties().build();\n+    try {\n+      if (telemetryHttpConnector == null ) {\n+        if (Connectors.getConnector(Connectors.HTTP_CONNECTOR_ID) == null) {\n+          Connectors.loadConnectors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c087c6274623979bd96194b466440ac897659f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY2ODExOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0MDo1MlrOG799mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0MDo1MlrOG799mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNDM2Mg==", "bodyText": "There's a typo in the method name.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r465534362", "createdAt": "2020-08-05T07:40:52Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/telemetry/reporter/TelemetrySendingTask.java", "diffHunk": "@@ -67,20 +70,36 @@ protected void sendData() {\n       // send data only if telemetry is enabled\n       if (commandContext.getProcessEngineConfiguration().getManagementService().isTelemetryEnabled()) {\n         try {\n-          HttpPost request = new HttpPost(telemetryEndpoint);\n           String telemetryData = JsonUtil.asString(data);\n-          StringEntity requestBody = new StringEntity(telemetryData, StandardCharsets.UTF_8);\n-          request.setHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n-          request.setEntity(requestBody);\n-          HttpResponse response = httpClient.execute(request);\n+          Map<String, Object> requestParams = assemleRequestParameters(METHOD_NAME_POST,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c087c6274623979bd96194b466440ac897659f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzY4NDQwOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0NTozNFrOG7-HYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo0NTozNFrOG7-HYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUzNjg2Ng==", "bodyText": "This should be a class rule to avoid building a new engine with every test.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r465536866", "createdAt": "2020-08-05T07:45:34Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "diffHunk": "@@ -48,31 +37,41 @@\n import org.camunda.bpm.engine.impl.telemetry.dto.Product;\n import org.camunda.bpm.engine.impl.telemetry.reporter.TelemetryReporter;\n import org.camunda.bpm.engine.test.ProcessEngineRule;\n+import org.camunda.bpm.engine.test.util.ProcessEngineBootstrapRule;\n import org.camunda.bpm.engine.test.util.ProcessEngineTestRule;\n import org.camunda.bpm.engine.test.util.ProvidedProcessEngineRule;\n import org.camunda.commons.testing.ProcessEngineLoggingRule;\n import org.camunda.commons.testing.WatchLogger;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.RuleChain;\n \n+import com.github.tomakehurst.wiremock.junit.WireMockRule;\n+import com.google.gson.Gson;\n+\n public class TelemetryReporterTest {\n \n   protected static final String TELEMETRY_ENDPOINT = \"http://localhost:8082/pings\";\n \n-  protected ProcessEngineRule engineRule = new ProvidedProcessEngineRule();\n-  protected ProcessEngineTestRule testRule = new ProcessEngineTestRule(engineRule);\n-\n   @Rule\n-  public ProcessEngineLoggingRule loggingRule = new ProcessEngineLoggingRule();\n+  public ProcessEngineBootstrapRule bootstrapRule =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c087c6274623979bd96194b466440ac897659f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNzcwNDc3OnYy", "diffSide": "RIGHT", "path": "javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/EjbBpmPlatformBootstrap.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MToxOFrOG7-Tzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNzo1MToxOFrOG7-Tzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTU0MDA0Nw==", "bodyText": "Does this actually work? It loads the connectors with the classloader of Connectors.class which would be the shared lib classloader in the case of WLS and WAS, right?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r465540047", "createdAt": "2020-08-05T07:51:18Z", "author": {"login": "ThorbenLindhauer"}, "path": "javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/EjbBpmPlatformBootstrap.java", "diffHunk": "@@ -78,6 +82,11 @@ protected void start() {\n     processEngineService = containerDelegate.getProcessEngineService();\n     processApplicationService = containerDelegate.getProcessApplicationService();\n \n+    Set<Connector<? extends ConnectorRequest<?>>> availableConnectors = Connectors.getAvailableConnectors();\n+    if (availableConnectors == null || availableConnectors.isEmpty()) {\n+      Connectors.loadConnectors();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4c087c6274623979bd96194b466440ac897659f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzA5NjAwOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjoyOToxNVrOG9X_CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjoyOToxNVrOG9X_CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwOTI4OA==", "bodyText": "This should happen in an @After method", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r467009288", "createdAt": "2020-08-07T12:29:15Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "diffHunk": "@@ -136,49 +137,71 @@ public void shouldReportDataWhenTelemetryInitialized() {\n     verify(postRequestedFor(urlEqualTo(\"/pings\"))\n               .withRequestBody(equalToJson(requestBody))\n               .withHeader(\"Content-Type\",  equalTo(\"application/json\")));\n+\n+    // cleanup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890429c0ecd7f65570adb482697b466b4c933523"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzA5NzQzOnYy", "diffSide": "RIGHT", "path": "javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/InitializeConnectors.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjoyOTo0OVrOG9YAAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjoyOTo0OVrOG9YAAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAwOTUzNw==", "bodyText": "This class can be removed.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r467009537", "createdAt": "2020-08-07T12:29:49Z", "author": {"login": "ThorbenLindhauer"}, "path": "javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/InitializeConnectors.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.container.impl.ejb;\n+\n+import org.camunda.bpm.container.impl.spi.DeploymentOperation;\n+import org.camunda.bpm.container.impl.spi.DeploymentOperationStep;\n+import org.camunda.bpm.engine.impl.util.ClassLoaderUtil;\n+import org.camunda.connect.Connectors;\n+\n+public class InitializeConnectors extends DeploymentOperationStep {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890429c0ecd7f65570adb482697b466b4c933523"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzEwNDE2OnYy", "diffSide": "RIGHT", "path": "distro/jbossas7/modules/src/main/modules/org/camunda/bpm/camunda-engine/main/module.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozMTo1NVrOG9YEAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozMTo1NVrOG9YEAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxMDU2Mw==", "bodyText": "Is this import still needed when the connectors are initialized in the subsystem?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r467010563", "createdAt": "2020-08-07T12:31:55Z", "author": {"login": "ThorbenLindhauer"}, "path": "distro/jbossas7/modules/src/main/modules/org/camunda/bpm/camunda-engine/main/module.xml", "diffHunk": "@@ -32,6 +30,8 @@\n     <module name=\"org.camunda.commons.camunda-commons-logging\" />\n     <module name=\"org.camunda.commons.camunda-commons-utils\" />\n     <module name=\"org.camunda.commons.camunda-commons-typed-values\" export=\"true\" />\n+    <module name=\"org.camunda.connect.camunda-connect-core\" />\n+    <module name=\"org.camunda.connect.camunda-connect-http-client\" services=\"import\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890429c0ecd7f65570adb482697b466b4c933523"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzEwNTAzOnYy", "diffSide": "RIGHT", "path": "distro/jbossas7/modules/src/main/modules/org/camunda/bpm/jboss/camunda-jboss-subsystem/main/module.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozMjoxMVrOG9YEgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzo1MDoxNlrOG9ap3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxMDY5MQ==", "bodyText": "This change must also be made in the Wildfly subsystem, right?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r467010691", "createdAt": "2020-08-07T12:32:11Z", "author": {"login": "ThorbenLindhauer"}, "path": "distro/jbossas7/modules/src/main/modules/org/camunda/bpm/jboss/camunda-jboss-subsystem/main/module.xml", "diffHunk": "@@ -39,6 +39,9 @@\n \n     <module name=\"org.camunda.bpm.camunda-engine-plugins\" optional=\"true\" />\n \n+    <module name=\"org.camunda.connect.camunda-connect-core\" />\n+    <module name=\"org.camunda.connect.camunda-connect-http-client\" services=\"import\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "890429c0ecd7f65570adb482697b466b4c933523"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1MzAyMg==", "bodyText": "as discussed, it's applied.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r467053022", "createdAt": "2020-08-07T13:50:16Z", "author": {"login": "yanavasileva"}, "path": "distro/jbossas7/modules/src/main/modules/org/camunda/bpm/jboss/camunda-jboss-subsystem/main/module.xml", "diffHunk": "@@ -39,6 +39,9 @@\n \n     <module name=\"org.camunda.bpm.camunda-engine-plugins\" optional=\"true\" />\n \n+    <module name=\"org.camunda.connect.camunda-connect-core\" />\n+    <module name=\"org.camunda.connect.camunda-connect-http-client\" services=\"import\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxMDY5MQ=="}, "originalCommit": {"oid": "890429c0ecd7f65570adb482697b466b4c933523"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzQ2MzYyOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxMjo0MFrOG9beFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxMjo0MFrOG9beFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2NjM4OA==", "bodyText": "Please set to private or protected.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/903#discussion_r467066388", "createdAt": "2020-08-07T14:12:40Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/mgmt/telemetry/TelemetryReporterTest.java", "diffHunk": "@@ -75,6 +75,7 @@\n   @ClassRule\n   public static WireMockRule wireMockRule = new WireMockRule(8082);\n \n+  ProcessEngine engine;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f05506209f859348095ede19e9549bd8c62a0ce6"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4518, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}