{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDczNzgx", "number": 794, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxOToxMVrOD1p1UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxNTowNVrOD1vr1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTg2NTEyOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricIncidentAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxOToxMVrOGLMLFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowMzo1NlrOGLWrFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4Njk2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414386967", "createdAt": "2020-04-24T08:19:11Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricIncidentAuthorizationTest.java", "diffHunk": "@@ -209,6 +214,102 @@ public void testSimpleQueryWithMultiple() {\n     verifyQueryResults(query, 1);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6ebe5c4de42684ddf2d7f9ebbffc2e179bde14"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1ODk5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414558998", "createdAt": "2020-04-24T13:03:56Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricIncidentAuthorizationTest.java", "diffHunk": "@@ -209,6 +214,102 @@ public void testSimpleQueryWithMultiple() {\n     verifyQueryResults(query, 1);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4Njk2Nw=="}, "originalCommit": {"oid": "fc6ebe5c4de42684ddf2d7f9ebbffc2e179bde14"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTk1NTg5OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricExternalTaskLogAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0MDozN1rOGLNAyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowNDowMlrOGLWrUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMDcxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);\n          \n      \n    \n    \n  \n\nBoth works, I guess. But since you used ProcessDefinitionPermissions.NONE in testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition, maybe we should stick to one format.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414400712", "createdAt": "2020-04-24T08:40:37Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricExternalTaskLogAuthorizationTest.java", "diffHunk": "@@ -217,6 +222,101 @@ public void testGetErrorDetailsWithHistoryReadPermissionOnProcessAnyDefinition()\n     assertEquals(ERROR_DETAILS, stacktrace);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa5f9f074f968892e9ec7838d11b2fa242b7da6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1OTA1Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414559056", "createdAt": "2020-04-24T13:04:02Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricExternalTaskLogAuthorizationTest.java", "diffHunk": "@@ -217,6 +222,101 @@ public void testGetErrorDetailsWithHistoryReadPermissionOnProcessAnyDefinition()\n     assertEquals(ERROR_DETAILS, stacktrace);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMDcxMg=="}, "originalCommit": {"oid": "caa5f9f074f968892e9ec7838d11b2fa242b7da6"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTk4Mjk5OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODo0NjozNVrOGLNQSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowNDoxMVrOGLWrpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNDY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);\n          \n      \n    \n    \n  \n\nBoth works, I guess. But since you used ProcessDefinitionPermissions.NONE in testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition, maybe we should stick to one format.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414404681", "createdAt": "2020-04-24T08:46:35Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -338,7 +344,165 @@ public void testQuerySetAssigneeTaskUserOperationLogWithMultiple() {\n     // then\n     verifyQueryResults(query, 2);\n   }\n-  \n+\n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId, processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19a52e988578dd362bd48cb2a6147becec68a806"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1OTE0MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414559141", "createdAt": "2020-04-24T13:04:11Z", "author": {"login": "tasso94"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -338,7 +344,165 @@ public void testQuerySetAssigneeTaskUserOperationLogWithMultiple() {\n     // then\n     verifyQueryResults(query, 2);\n   }\n-  \n+\n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId, processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNDY4MQ=="}, "originalCommit": {"oid": "19a52e988578dd362bd48cb2a6147becec68a806"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjgyMzg4OnYy", "diffSide": "RIGHT", "path": "qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7130/histperms/HistoricInstancePermissionsAuthorizationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxNTowNVrOGLU2yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzowMzo0NVrOGLWqnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTIyNA==", "bodyText": "I think it's not good practise to have multiple methods with an @Before annotation as the order of execution is not guaranteed. This is not so relevant in this case, but for good practise maybe consider moving everything in one method.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414529224", "createdAt": "2020-04-24T12:15:05Z", "author": {"login": "mboskamp"}, "path": "qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7130/histperms/HistoricInstancePermissionsAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.qa.upgrade.scenarios7130.histperms;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import org.camunda.bpm.engine.AuthorizationService;\n+import org.camunda.bpm.engine.HistoryService;\n+import org.camunda.bpm.engine.IdentityService;\n+import org.camunda.bpm.engine.authorization.Authorization;\n+import org.camunda.bpm.engine.authorization.HistoricProcessInstancePermissions;\n+import org.camunda.bpm.engine.authorization.Resources;\n+import org.camunda.bpm.engine.history.HistoricProcessInstance;\n+import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;\n+import org.camunda.bpm.engine.history.UserOperationLogQuery;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.test.ProcessEngineRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class HistoricInstancePermissionsAuthorizationTest {\n+\n+  protected final String BUSINESS_KEY = \"HistPermsWithoutProcDefKeyScenarioBusinessKey\";\n+\n+  protected final String USER_ID = getClass().getName() + \"-User\";\n+\n+  @Rule\n+  public ProcessEngineRule engineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+\n+  protected HistoryService historyService;\n+  protected AuthorizationService authorizationService;\n+  protected IdentityService identityService;\n+  protected ProcessEngineConfigurationImpl engineConfiguration;\n+\n+  @Before\n+  public void assignServices() {\n+    historyService = engineRule.getHistoryService();\n+    authorizationService = engineRule.getAuthorizationService();\n+    identityService = engineRule.getIdentityService();\n+\n+    engineConfiguration = engineRule.getProcessEngineConfiguration();\n+  }\n+\n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f3db69a55c25b289aac61a5d4899d4d717ffee"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU1ODg3OQ==", "bodyText": "Since the order of the execution doesn't matter here, let's keep it as it is. I think it increases readability.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414558879", "createdAt": "2020-04-24T13:03:45Z", "author": {"login": "tasso94"}, "path": "qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7130/histperms/HistoricInstancePermissionsAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.qa.upgrade.scenarios7130.histperms;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import org.camunda.bpm.engine.AuthorizationService;\n+import org.camunda.bpm.engine.HistoryService;\n+import org.camunda.bpm.engine.IdentityService;\n+import org.camunda.bpm.engine.authorization.Authorization;\n+import org.camunda.bpm.engine.authorization.HistoricProcessInstancePermissions;\n+import org.camunda.bpm.engine.authorization.Resources;\n+import org.camunda.bpm.engine.history.HistoricProcessInstance;\n+import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;\n+import org.camunda.bpm.engine.history.UserOperationLogQuery;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.test.ProcessEngineRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class HistoricInstancePermissionsAuthorizationTest {\n+\n+  protected final String BUSINESS_KEY = \"HistPermsWithoutProcDefKeyScenarioBusinessKey\";\n+\n+  protected final String USER_ID = getClass().getName() + \"-User\";\n+\n+  @Rule\n+  public ProcessEngineRule engineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+\n+  protected HistoryService historyService;\n+  protected AuthorizationService authorizationService;\n+  protected IdentityService identityService;\n+  protected ProcessEngineConfigurationImpl engineConfiguration;\n+\n+  @Before\n+  public void assignServices() {\n+    historyService = engineRule.getHistoryService();\n+    authorizationService = engineRule.getAuthorizationService();\n+    identityService = engineRule.getIdentityService();\n+\n+    engineConfiguration = engineRule.getProcessEngineConfiguration();\n+  }\n+\n+  @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTIyNA=="}, "originalCommit": {"oid": "a5f3db69a55c25b289aac61a5d4899d4d717ffee"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4607, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}