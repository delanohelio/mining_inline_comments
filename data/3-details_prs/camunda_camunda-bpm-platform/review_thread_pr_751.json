{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyODUxMjQ3", "number": 751, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowMzozMlrODq3ESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowMzozMlrODq3ESg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjY5MDAyOnYy", "diffSide": "RIGHT", "path": "javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/inflow/JcaInflowExecuteJobsRunnable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjowMzozMlrOF63fTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNjo0OTowMVrOF7N7UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MDg2Mw==", "bodyText": "@mboskamp, just to make sure I understand correctly since I'm not sure how to test this:\nEven though ExecuteJobHelper.executeJob is not called explicitly anymore, calling endoint.executeJob here ensures that the ExecuteJobHelper is called through an instance of JobExecutionHandler and the Process Data Context for logging feature is intact, i.e. MDC properties are still added?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/751#discussion_r397270863", "createdAt": "2020-03-24T16:03:32Z", "author": {"login": "koevskinikola"}, "path": "javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/inflow/JcaInflowExecuteJobsRunnable.java", "diffHunk": "@@ -73,7 +73,6 @@ protected void executeJob(String nextJobId, CommandExecutor commandExecutor) {\n       } catch (ResourceException e) {\n         log.log(Level.WARNING, \"ResourceException while invoking beforeDelivery() on MessageEndpoint '\"+endpoint+\"'\", e);\n       }\n-      JobFailureCollector jobFailureCollector = null;\n       try {\n         jobFailureCollector = ((JobExecutionHandler)endpoint).executeJob(nextJobId, commandExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d92f2c9c82fe871d2cd09556a38cba9d3183a9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzODQ4MA==", "bodyText": "Not sure, if I understand you correctly.\nExecuteJobHelper.executeJob is called from the JobExecutionHandler implementation and should behave the same in regards to ProcessDataContext as the main implementation: https://github.com/camunda/camunda-bpm-platform/blob/master/javaee/ejb-service/src/main/java/org/camunda/bpm/container/impl/ejb/JobExecutionHandlerMDB.java#L44", "url": "https://github.com/camunda/camunda-bpm-platform/pull/751#discussion_r397638480", "createdAt": "2020-03-25T06:49:01Z", "author": {"login": "mboskamp"}, "path": "javaee/jobexecutor-ra/src/main/java/org/camunda/bpm/container/impl/threading/ra/inflow/JcaInflowExecuteJobsRunnable.java", "diffHunk": "@@ -73,7 +73,6 @@ protected void executeJob(String nextJobId, CommandExecutor commandExecutor) {\n       } catch (ResourceException e) {\n         log.log(Level.WARNING, \"ResourceException while invoking beforeDelivery() on MessageEndpoint '\"+endpoint+\"'\", e);\n       }\n-      JobFailureCollector jobFailureCollector = null;\n       try {\n         jobFailureCollector = ((JobExecutionHandler)endpoint).executeJob(nextJobId, commandExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3MDg2Mw=="}, "originalCommit": {"oid": "65d92f2c9c82fe871d2cd09556a38cba9d3183a9"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4551, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}