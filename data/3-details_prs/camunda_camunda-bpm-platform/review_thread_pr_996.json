{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTMxODQ1", "number": 996, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozMTozN1rOEnC4hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozMTo1N1rOEnC5KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mzc3MTU5OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozMTozN1rOHXa0-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNToxNzoyNlrOHYH-XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA==", "bodyText": "Instead of the complex try, catch and instanceof check, you could simply expect an exception of type NullValueException with the ExpectedExceptionRule. You can also use this rule to expect a certain exception message.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494318840", "createdAt": "2020-09-24T13:31:37Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyMDQ1NA==", "bodyText": "Example: https://github.com/camunda/camunda-bpm-platform/blob/master/engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java#L367-L373", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494320454", "createdAt": "2020-09-24T13:33:54Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA=="}, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDg3NDM5Mg==", "bodyText": "@mboskamp thanks for your inputs. will do the changes.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494874392", "createdAt": "2020-09-25T09:45:02Z", "author": {"login": "hirenpandit"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA=="}, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA1ODUyNA==", "bodyText": "@mboskamp done!", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r495058524", "createdAt": "2020-09-25T15:17:26Z", "author": {"login": "hirenpandit"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxODg0MA=="}, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mzc3MzIxOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozMTo1N1rOHXa18Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzozMTo1N1rOHXa18Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxOTA4OQ==", "bodyText": "Same as above", "url": "https://github.com/camunda/camunda-bpm-platform/pull/996#discussion_r494319089", "createdAt": "2020-09-24T13:31:57Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/identity/IdentityServiceTest.java", "diffHunk": "@@ -333,20 +334,31 @@ public void findGroupByUnexistingId() {\n   public void testCreateMembershipUnexistingGroup() {\n     User johndoe = identityService.newUser(\"johndoe\");\n     identityService.saveUser(johndoe);\n-\n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+    try {\n+      identityService.createMembership(johndoe.getId(), \"unexistinggroup\");\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No group found with id 'unexistinggroup'.: group is null\", ex.getMessage());\n+    }\n   }\n \n   @Test\n   public void testCreateMembershipUnexistingUser() {\n     Group sales = identityService.newGroup(\"sales\");\n     identityService.saveGroup(sales);\n+    try {\n+      identityService.createMembership(\"unexistinguser\", sales.getId());\n+      fail(\"NullValueException is expected\");\n+    } catch(Exception ex) {\n+      if(!(ex instanceof NullValueException)) {\n+        fail(\"NullValueException is expected  but other exception was received: \" + ex);\n+      }\n+      assertEquals(\"No user found with id 'unexistinguser'.: user is null\", ex.getMessage());\n+    }\n \n-    thrown.expect(ProcessEngineException.class);\n-\n-    identityService.createMembership(\"unexistinguser\", sales.getId());\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ee2a20d4123df82198df53eb9ac8f492731fe3c"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4475, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}