{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDg2NTQ3", "number": 894, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzoxNDoxNFrOEO_m-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzoxNDoxNFrOEO_m-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTU3Njg5OnYy", "diffSide": "RIGHT", "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/optimize/OptimizeApiPageSizeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzoxNDoxNFrOGydH9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzozMjo1NVrOGyduhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1OTE1Nw==", "bodyText": "Wouldn't OPTIMIZE_PAGE_SIZE * 2 quadruple the amount of entities since the size is already doubled in EngineDataGenerator?\nIs this intentional?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/894#discussion_r455559157", "createdAt": "2020-07-16T07:14:14Z", "author": {"login": "koevskinikola"}, "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/optimize/OptimizeApiPageSizeTest.java", "diffHunk": "@@ -41,13 +41,13 @@\n   @ClassRule\n   public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n \n-\n   @BeforeClass\n   public static void init() {\n     optimizeService = processEngineRule.getProcessEngineConfiguration().getOptimizeService();\n \n     // given the generated engine data\n-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE);\n+    // make sure that there are at least two pages of each entity available\n+    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22eda1bdb49a723035b7239975b37fe1b668a92c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2NDY1OA==", "bodyText": "I removed the doubling of the amount in the EngineDataGenerator so it can be used for other tests as well. See https://github.com/camunda/camunda-bpm-platform/pull/894/files?file-filters%5B%5D=.java#diff-38e8226d6f10d7399ca8c47f8b0e9d1dR80\nOr am I missing something?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/894#discussion_r455564658", "createdAt": "2020-07-16T07:24:59Z", "author": {"login": "mboskamp"}, "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/optimize/OptimizeApiPageSizeTest.java", "diffHunk": "@@ -41,13 +41,13 @@\n   @ClassRule\n   public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n \n-\n   @BeforeClass\n   public static void init() {\n     optimizeService = processEngineRule.getProcessEngineConfiguration().getOptimizeService();\n \n     // given the generated engine data\n-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE);\n+    // make sure that there are at least two pages of each entity available\n+    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE * 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1OTE1Nw=="}, "originalCommit": {"oid": "22eda1bdb49a723035b7239975b37fe1b668a92c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU2OTAyOQ==", "bodyText": "Sorry, mixed up the diffs. Completely my bad :)", "url": "https://github.com/camunda/camunda-bpm-platform/pull/894#discussion_r455569029", "createdAt": "2020-07-16T07:32:55Z", "author": {"login": "koevskinikola"}, "path": "qa/large-data-tests/src/test/java/org/camunda/bpm/qa/largedata/optimize/OptimizeApiPageSizeTest.java", "diffHunk": "@@ -41,13 +41,13 @@\n   @ClassRule\n   public static ProcessEngineRule processEngineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n \n-\n   @BeforeClass\n   public static void init() {\n     optimizeService = processEngineRule.getProcessEngineConfiguration().getOptimizeService();\n \n     // given the generated engine data\n-    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE);\n+    // make sure that there are at least two pages of each entity available\n+    EngineDataGenerator generator = new EngineDataGenerator(processEngineRule.getProcessEngine(), OPTIMIZE_PAGE_SIZE * 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1OTE1Nw=="}, "originalCommit": {"oid": "22eda1bdb49a723035b7239975b37fe1b668a92c"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4515, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}