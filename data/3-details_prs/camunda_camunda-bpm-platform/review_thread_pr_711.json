{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MjcxNjg5", "number": 711, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoyMzoyMFrODm-bbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyODowNVrODoaH-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMTk1MzEwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODoyMzoyMFrOF0s7Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMToxMDo1MFrOF0yiCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNjI4Ng==", "bodyText": "Should probably be <=, or?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r390806286", "createdAt": "2020-03-11T08:23:20Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "diffHunk": "@@ -103,12 +103,7 @@ public void reschedule(JobEntity jobEntity, Date newDuedate) {\n   }\n \n   private void hintJobExecutorIfNeeded(JobEntity jobEntity, Date duedate) {\n-    // Check if this timer fires before the next time the job executor will check for new timers to fire.\n-    // This is highly unlikely because normally waitTimeInMillis is 5000 (5 seconds)\n-    // and timers are usually set further in the future\n-    JobExecutor jobExecutor = Context.getProcessEngineConfiguration().getJobExecutor();\n-    int waitTimeInMillis = jobExecutor.getWaitTimeInMillis();\n-    if (duedate.getTime() < (ClockUtil.getCurrentTime().getTime() + waitTimeInMillis)) {\n+    if (duedate.getTime() < ClockUtil.getCurrentTime().getTime()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a378e3e9bf4a6f88630b0d71184e344ad44b787b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg5ODE4NA==", "bodyText": "Yes, correct! There are some failing tests and I'll include this with the fix.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r390898184", "createdAt": "2020-03-11T11:10:50Z", "author": {"login": "koevskinikola"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "diffHunk": "@@ -103,12 +103,7 @@ public void reschedule(JobEntity jobEntity, Date newDuedate) {\n   }\n \n   private void hintJobExecutorIfNeeded(JobEntity jobEntity, Date duedate) {\n-    // Check if this timer fires before the next time the job executor will check for new timers to fire.\n-    // This is highly unlikely because normally waitTimeInMillis is 5000 (5 seconds)\n-    // and timers are usually set further in the future\n-    JobExecutor jobExecutor = Context.getProcessEngineConfiguration().getJobExecutor();\n-    int waitTimeInMillis = jobExecutor.getWaitTimeInMillis();\n-    if (duedate.getTime() < (ClockUtil.getCurrentTime().getTime() + waitTimeInMillis)) {\n+    if (duedate.getTime() < ClockUtil.getCurrentTime().getTime()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgwNjI4Ng=="}, "originalCommit": {"oid": "a378e3e9bf4a6f88630b0d71184e344ad44b787b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk3NjU3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyODowNVrOF28DoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODowMTo1MVrOF3RS0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTM5Mw==", "bodyText": "schedule job for the next processor: what exactly do you mean here?", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r393151393", "createdAt": "2020-03-16T16:28:05Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "diffHunk": "@@ -132,6 +153,7 @@ protected void hintJobExecutor(JobEntity job) {\n       job.setLockOwner(jobExecutor.getLockOwner());\n       transactionListener = new ExclusiveJobAddedNotification(job.getId(), jobExecutorContext);\n     } else {\n+      // schedule job for the next processor and reset Acquisition strategy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74e4b4fb3c6b8a4b7500736c62a6908d0eafa252"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ4MzE0Mw==", "bodyText": "I was trying to use the same terminology as the one on line 147 (lock job & add to the queue of the current processor) so that it's clear in the future that the else block, with the MessageAddedNotification will not result in the immediate execution of a Job, but will reset the (Backoff) acquisition strategy to 0 wait time. This will result in the above job being executed on the next run.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r393483143", "createdAt": "2020-03-17T07:20:33Z", "author": {"login": "koevskinikola"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "diffHunk": "@@ -132,6 +153,7 @@ protected void hintJobExecutor(JobEntity job) {\n       job.setLockOwner(jobExecutor.getLockOwner());\n       transactionListener = new ExclusiveJobAddedNotification(job.getId(), jobExecutorContext);\n     } else {\n+      // schedule job for the next processor and reset Acquisition strategy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTM5Mw=="}, "originalCommit": {"oid": "74e4b4fb3c6b8a4b7500736c62a6908d0eafa252"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQ5OTM0NA==", "bodyText": "@ThorbenLindhauer please check the comment now.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/711#discussion_r393499344", "createdAt": "2020-03-17T08:01:51Z", "author": {"login": "koevskinikola"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/persistence/entity/JobManager.java", "diffHunk": "@@ -132,6 +153,7 @@ protected void hintJobExecutor(JobEntity job) {\n       job.setLockOwner(jobExecutor.getLockOwner());\n       transactionListener = new ExclusiveJobAddedNotification(job.getId(), jobExecutorContext);\n     } else {\n+      // schedule job for the next processor and reset Acquisition strategy", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTM5Mw=="}, "originalCommit": {"oid": "74e4b4fb3c6b8a4b7500736c62a6908d0eafa252"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4669, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}