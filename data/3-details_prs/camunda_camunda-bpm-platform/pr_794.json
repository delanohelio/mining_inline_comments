{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDczNzgx", "number": 794, "title": "Enforce Historic Process Instance Authorizations for more queries", "bodyText": "Enforces Historic Process Instance Authorizations for the following queries:\n\nHistoric Incident\nJob Log\nExternal Task Log\nUser Operation Log\n\nParent Ticket: CAM-11189", "createdAt": "2020-04-21T06:46:54Z", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794", "merged": true, "mergeCommit": {"oid": "fee1d17f63b1513bf67c37cba36d485ad903efb0"}, "closed": true, "closedAt": "2020-04-24T13:16:53Z", "author": {"login": "tasso94"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ1SJrgBqjMyNTY3MzY1NTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaxUSKgFqTM5OTkzNTAxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4702aa77776bca52dcaf69f5b2e6e3c0643f0ea3", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/4702aa77776bca52dcaf69f5b2e6e3c0643f0ea3", "committedDate": "2020-04-21T07:17:03Z", "message": "feat(engine): enforce hist. process auth. for job log query\n\nrelated to CAM-11644"}, "afterCommit": {"oid": "ab6cb737922097363561dcf9ce9f0ebf1d35b4e3", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/ab6cb737922097363561dcf9ce9f0ebf1d35b4e3", "committedDate": "2020-04-21T14:59:36Z", "message": "fix(engine): move javadocs to historic activity instance query\n\nrelated to CAM-11784"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab6cb737922097363561dcf9ce9f0ebf1d35b4e3", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/ab6cb737922097363561dcf9ce9f0ebf1d35b4e3", "committedDate": "2020-04-21T14:59:36Z", "message": "fix(engine): move javadocs to historic activity instance query\n\nrelated to CAM-11784"}, "afterCommit": {"oid": "d2a8203828d93f616961b1c5b30bae2b8b731aa8", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/d2a8203828d93f616961b1c5b30bae2b8b731aa8", "committedDate": "2020-04-22T11:32:16Z", "message": "fix(engine): preserve hist.proc.inst.query auth checks legacy behavior\n\nrelated to CAM-11791"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d2a8203828d93f616961b1c5b30bae2b8b731aa8", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/d2a8203828d93f616961b1c5b30bae2b8b731aa8", "committedDate": "2020-04-22T11:32:16Z", "message": "fix(engine): preserve hist.proc.inst.query auth checks legacy behavior\n\nrelated to CAM-11791"}, "afterCommit": {"oid": "917af46d0d9b1fc48288e1a360f3b91c35140ecc", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/917af46d0d9b1fc48288e1a360f3b91c35140ecc", "committedDate": "2020-04-22T16:16:08Z", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "917af46d0d9b1fc48288e1a360f3b91c35140ecc", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/917af46d0d9b1fc48288e1a360f3b91c35140ecc", "committedDate": "2020-04-22T16:16:08Z", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796"}, "afterCommit": {"oid": "a5f3db69a55c25b289aac61a5d4899d4d717ffee", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a5f3db69a55c25b289aac61a5d4899d4d717ffee", "committedDate": "2020-04-23T06:48:27Z", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NzM2NDIw", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#pullrequestreview-399736420", "createdAt": "2020-04-24T08:19:11Z", "commit": {"oid": "fc6ebe5c4de42684ddf2d7f9ebbffc2e179bde14"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwODoxOToxMVrOGLMLFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxNTowNVrOGLU2yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM4Njk2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414386967", "createdAt": "2020-04-24T08:19:11Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricIncidentAuthorizationTest.java", "diffHunk": "@@ -209,6 +214,102 @@ public void testSimpleQueryWithMultiple() {\n     verifyQueryResults(query, 1);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricIncidentQuery query = historyService.createHistoricIncidentQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(ONE_INCIDENT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, ONE_INCIDENT_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6ebe5c4de42684ddf2d7f9ebbffc2e179bde14"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwMDcxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);\n          \n      \n    \n    \n  \n\nBoth works, I guess. But since you used ProcessDefinitionPermissions.NONE in testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition, maybe we should stick to one format.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414400712", "createdAt": "2020-04-24T08:40:37Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/HistoricExternalTaskLogAuthorizationTest.java", "diffHunk": "@@ -217,6 +222,101 @@ public void testGetErrorDetailsWithHistoryReadPermissionOnProcessAnyDefinition()\n     assertEquals(ERROR_DETAILS, stacktrace);\n   }\n \n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    HistoricExternalTaskLogQuery query = historyService.createHistoricExternalTaskLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessAndExecuteJob(DEFAULT_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    createGrantAuthorization(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorization(PROCESS_DEFINITION, DEFAULT_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa5f9f074f968892e9ec7838d11b2fa242b7da6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQwNDY4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, READ_HISTORY);\n          \n          \n            \n                createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, ProcessDefinitionPermissions.READ_HISTORY);\n          \n      \n    \n    \n  \n\nBoth works, I guess. But since you used ProcessDefinitionPermissions.NONE in testCheckReadOnHistoricProcessInstanceAndNonePermissionOnProcessDefinition, maybe we should stick to one format.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414404681", "createdAt": "2020-04-24T08:46:35Z", "author": {"login": "mboskamp"}, "path": "engine/src/test/java/org/camunda/bpm/engine/test/api/authorization/history/UserOperationLogAuthorizationTest.java", "diffHunk": "@@ -338,7 +344,165 @@ public void testQuerySetAssigneeTaskUserOperationLogWithMultiple() {\n     // then\n     verifyQueryResults(query, 2);\n   }\n-  \n+\n+  public void testCheckNonePermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list()).isEmpty();\n+  }\n+\n+  public void testCheckReadPermissionOnHistoricProcessInstance() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.READ);\n+\n+    // when\n+    UserOperationLogQuery query = historyService.createUserOperationLogQuery();\n+\n+    // then\n+    assertThat(query.list())\n+        .extracting(\"processInstanceId\")\n+        .containsExactly(processInstanceId, processInstanceId);\n+  }\n+\n+  public void testCheckNoneOnHistoricProcessInstanceAndReadHistoryPermissionOnProcessDefinition() {\n+    // given\n+    processEngineConfiguration.setEnableHistoricInstancePermissions(true);\n+\n+    String processInstanceId = startProcessInstanceByKey(ONE_TASK_PROCESS_KEY)\n+        .getProcessInstanceId();\n+\n+    String taskId = selectSingleTask().getId();\n+    setAssignee(taskId, \"demo\");\n+\n+    createGrantAuthorizationWithoutAuthentication(Resources.HISTORIC_PROCESS_INSTANCE, processInstanceId, userId,\n+        HistoricProcessInstancePermissions.NONE);\n+    createGrantAuthorizationWithoutAuthentication(PROCESS_DEFINITION, ONE_TASK_PROCESS_KEY, userId, READ_HISTORY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19a52e988578dd362bd48cb2a6147becec68a806"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTIyNA==", "bodyText": "I think it's not good practise to have multiple methods with an @Before annotation as the order of execution is not guaranteed. This is not so relevant in this case, but for good practise maybe consider moving everything in one method.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#discussion_r414529224", "createdAt": "2020-04-24T12:15:05Z", "author": {"login": "mboskamp"}, "path": "qa/test-db-instance-migration/test-migration/src/test/java/org/camunda/bpm/qa/upgrade/scenarios7130/histperms/HistoricInstancePermissionsAuthorizationTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH\n+ * under one or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information regarding copyright\n+ * ownership. Camunda licenses this file to you under the Apache License,\n+ * Version 2.0; you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.camunda.bpm.qa.upgrade.scenarios7130.histperms;\n+\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.List;\n+\n+import org.camunda.bpm.engine.AuthorizationService;\n+import org.camunda.bpm.engine.HistoryService;\n+import org.camunda.bpm.engine.IdentityService;\n+import org.camunda.bpm.engine.authorization.Authorization;\n+import org.camunda.bpm.engine.authorization.HistoricProcessInstancePermissions;\n+import org.camunda.bpm.engine.authorization.Resources;\n+import org.camunda.bpm.engine.history.HistoricProcessInstance;\n+import org.camunda.bpm.engine.history.HistoricProcessInstanceQuery;\n+import org.camunda.bpm.engine.history.UserOperationLogQuery;\n+import org.camunda.bpm.engine.impl.cfg.ProcessEngineConfigurationImpl;\n+import org.camunda.bpm.engine.test.ProcessEngineRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class HistoricInstancePermissionsAuthorizationTest {\n+\n+  protected final String BUSINESS_KEY = \"HistPermsWithoutProcDefKeyScenarioBusinessKey\";\n+\n+  protected final String USER_ID = getClass().getName() + \"-User\";\n+\n+  @Rule\n+  public ProcessEngineRule engineRule = new ProcessEngineRule(\"camunda.cfg.xml\");\n+\n+  protected HistoryService historyService;\n+  protected AuthorizationService authorizationService;\n+  protected IdentityService identityService;\n+  protected ProcessEngineConfigurationImpl engineConfiguration;\n+\n+  @Before\n+  public void assignServices() {\n+    historyService = engineRule.getHistoryService();\n+    authorizationService = engineRule.getAuthorizationService();\n+    identityService = engineRule.getIdentityService();\n+\n+    engineConfiguration = engineRule.getProcessEngineConfiguration();\n+  }\n+\n+  @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5f3db69a55c25b289aac61a5d4899d4d717ffee"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade7ef1f9d632717232d6e2a696954580bfc297e", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/ade7ef1f9d632717232d6e2a696954580bfc297e", "committedDate": "2020-04-24T13:09:03Z", "message": "feat(engine): enforce hist. process auth. for historic incident query\n\nrelated to CAM-11643"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2422458e3edde99047b29696988df95b2c2e3aad", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/2422458e3edde99047b29696988df95b2c2e3aad", "committedDate": "2020-04-24T13:09:03Z", "message": "feat(engine): enforce hist. process auth. for job log query\n\nrelated to CAM-11644"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50d19af46e4824f9d3165a496c6369fea6e79277", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/50d19af46e4824f9d3165a496c6369fea6e79277", "committedDate": "2020-04-24T13:09:04Z", "message": "feat(engine): enforce hist. process auth. for ext. task log query\n\nrelated to CAM-11645"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9b6782acd03893fc149fc9c5d42ff6b82df871", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/2d9b6782acd03893fc149fc9c5d42ff6b82df871", "committedDate": "2020-04-24T13:09:04Z", "message": "feat(engine): enforce hist. process auth. for op log query\n\nrelated to CAM-11636"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f757a536e0309e838ad319854379f3d1e992aeae", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/f757a536e0309e838ad319854379f3d1e992aeae", "committedDate": "2020-04-24T13:09:04Z", "message": "fix(engine): move javadocs to historic activity instance query\n\nrelated to CAM-11784"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "904f88c5397d2f7be570e30b7edb584a19cb1bf1", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/904f88c5397d2f7be570e30b7edb584a19cb1bf1", "committedDate": "2020-04-24T13:09:04Z", "message": "fix(engine): preserve hist.proc.inst.query auth checks legacy behavior\n\nrelated to CAM-11791"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "committedDate": "2020-04-24T13:09:04Z", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5f3db69a55c25b289aac61a5d4899d4d717ffee", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/a5f3db69a55c25b289aac61a5d4899d4d717ffee", "committedDate": "2020-04-23T06:48:27Z", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796"}, "afterCommit": {"oid": "337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "author": {"user": {"login": "tasso94", "name": "Tassilo Weidner"}}, "url": "https://github.com/camunda/camunda-bpm-platform/commit/337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab", "committedDate": "2020-04-24T13:09:04Z", "message": "test(engine): adjust auth query test cases to check additionally ids\n\nrelated to CAM-11796"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTM1MDEz", "url": "https://github.com/camunda/camunda-bpm-platform/pull/794#pullrequestreview-399935013", "createdAt": "2020-04-24T13:15:37Z", "commit": {"oid": "337d2f20bd1af23f62d79f34fe22b8b05b4ba1ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1857, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}