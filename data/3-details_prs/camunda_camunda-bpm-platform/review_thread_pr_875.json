{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzkwMjU2", "number": 875, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo1MDo1MFrOEJ_-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyODo1NFrOEKYPhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTIwOTMzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/externaltask/LockedExternalTaskImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODo1MDo1MFrOGqygXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwOTowNjoyNVrOGqzG8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyMDg2Mg==", "bodyText": "It is suggested to use the functions rather than the constants for type-safety.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    properties = Collections.EMPTY_MAP;\n          \n          \n            \n                    properties = Collections.emptyMap();", "url": "https://github.com/camunda/camunda-bpm-platform/pull/875#discussion_r447520862", "createdAt": "2020-06-30T08:50:50Z", "author": {"login": "tmetzke"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/externaltask/LockedExternalTaskImpl.java", "diffHunk": "@@ -164,6 +174,14 @@ public static LockedExternalTaskImpl fromEntity(ExternalTaskEntity externalTaskE\n     result.variables = new VariableMapImpl();\n     execution.collectVariables(result.variables, variablesToFetch, isLocal, deserializeVariables);\n \n+    if(includeExtensionProperties) {\n+      Map<String, String> properties = (Map<String, String>) execution.getActivity().getProperty(BpmnProperties.EXTENSION_PROPERTIES.getName());\n+      if(properties == null) {\n+        properties = Collections.EMPTY_MAP;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31080c0d5d5bd8282bef8fe4dcf9e7b26ee52411"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyOTY3MA==", "bodyText": "I feared you might say that. :D Although, I think it's nice to have that additional info, I agree that there seems to be rarely a use-case for it. I am fine with changing it to always return an empty map. Using the function instead of constant for that makes sense.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/875#discussion_r447529670", "createdAt": "2020-06-30T09:04:44Z", "author": {"login": "mboskamp"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/externaltask/LockedExternalTaskImpl.java", "diffHunk": "@@ -164,6 +174,14 @@ public static LockedExternalTaskImpl fromEntity(ExternalTaskEntity externalTaskE\n     result.variables = new VariableMapImpl();\n     execution.collectVariables(result.variables, variablesToFetch, isLocal, deserializeVariables);\n \n+    if(includeExtensionProperties) {\n+      Map<String, String> properties = (Map<String, String>) execution.getActivity().getProperty(BpmnProperties.EXTENSION_PROPERTIES.getName());\n+      if(properties == null) {\n+        properties = Collections.EMPTY_MAP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyMDg2Mg=="}, "originalCommit": {"oid": "31080c0d5d5bd8282bef8fe4dcf9e7b26ee52411"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUzMDczNg==", "bodyText": "I think it makes sense from a consumer's point of view. I don't really want to care if I enabled the option or not and I don't want to change my implementation with regards to that in case I disable/enable the option.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/875#discussion_r447530736", "createdAt": "2020-06-30T09:06:25Z", "author": {"login": "tmetzke"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/externaltask/LockedExternalTaskImpl.java", "diffHunk": "@@ -164,6 +174,14 @@ public static LockedExternalTaskImpl fromEntity(ExternalTaskEntity externalTaskE\n     result.variables = new VariableMapImpl();\n     execution.collectVariables(result.variables, variablesToFetch, isLocal, deserializeVariables);\n \n+    if(includeExtensionProperties) {\n+      Map<String, String> properties = (Map<String, String>) execution.getActivity().getProperty(BpmnProperties.EXTENSION_PROPERTIES.getName());\n+      if(properties == null) {\n+        properties = Collections.EMPTY_MAP;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzUyMDg2Mg=="}, "originalCommit": {"oid": "31080c0d5d5bd8282bef8fe4dcf9e7b26ee52411"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE4MDk3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/externaltask/ExternalTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNzozMVrOGrYaEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyNzozMVrOGrYaEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MTg0MA==", "bodyText": "I guess it's self-explanatory that a map can be empty and it's an implementation detail as well.\nI think the \"never null\" contract is more interesting for consumers.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return the properties or {@link Collections#emptyMap()} if no properties were configured\n          \n          \n            \n               * @return the properties, never <code>null</code>", "url": "https://github.com/camunda/camunda-bpm-platform/pull/875#discussion_r448141840", "createdAt": "2020-07-01T06:27:31Z", "author": {"login": "tmetzke"}, "path": "engine/src/main/java/org/camunda/bpm/engine/externaltask/ExternalTask.java", "diffHunk": "@@ -121,6 +123,12 @@\n    */\n   long getPriority();\n \n+  /**\n+   * Returns a map containing all custom extension properties of the external task.\n+   * \n+   * @return the properties or {@link Collections#emptyMap()} if no properties were configured", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b8de4162d1040e53d4e5bd052e1a70a820af94"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzE4NDA2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/externaltask/LockedExternalTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyODo1NFrOGrYcBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNjoyODo1NFrOGrYcBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MjM0MQ==", "bodyText": "You explained the circumstances pretty well beforehand, no need for duplicated information I would say, the \"never null\" part is more interesting API-wise I would say\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return a potentially empty map of all defined custom extension properties\n          \n          \n            \n               *         if the fetch-and-lock instructions include extension properties,\n          \n          \n            \n               *         otherwise {@link Collections#emptyMap()}\n          \n          \n            \n               * @return all defined custom extension properties, never <code>null</code>", "url": "https://github.com/camunda/camunda-bpm-platform/pull/875#discussion_r448142341", "createdAt": "2020-07-01T06:28:54Z", "author": {"login": "tmetzke"}, "path": "engine/src/main/java/org/camunda/bpm/engine/externaltask/LockedExternalTask.java", "diffHunk": "@@ -134,4 +136,19 @@\n    */\n   String getBusinessKey();\n \n+  /**\n+   * Returns a map of custom extension properties if the fetch instructions\n+   * indicate to include extension properties.\n+   * \n+   * If extension properties are included, the returned map contains any\n+   * extension property that is defined in the model definition of the external\n+   * task. If extension properties not included or no properties are defined for\n+   * the external task, the map will be empty.\n+   * \n+   * @return a potentially empty map of all defined custom extension properties\n+   *         if the fetch-and-lock instructions include extension properties,\n+   *         otherwise {@link Collections#emptyMap()}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b8de4162d1040e53d4e5bd052e1a70a820af94"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4507, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}