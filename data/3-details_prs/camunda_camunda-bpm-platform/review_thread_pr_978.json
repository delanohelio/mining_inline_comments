{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNzI5MDE4", "number": 978, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzozNFrOEjeS4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoyNjoxMlrOEjevgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjMxOTY5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODowNzozNFrOHR11fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1MToxMlrOHS3cYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2OTg4NQ==", "bodyText": "This will now only list a chunk of the flush (see the partitioning of operations in DbEntityManager#flushDbOperationManager). For debugging purposes, we should still include the entire flush in the exception message.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r488469885", "createdAt": "2020-09-15T08:07:34Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -115,19 +113,21 @@ public ProcessEngineException alreadyMarkedEntityInEntityCacheException(String i\n     ));\n   }\n \n-  public ProcessEngineException flushDbOperationException(List<DbOperation> operationsToFlush, DbOperation operation,\n-      Throwable cause) {\n+  public ProcessEngineException flushDbOperationException(List<DbOperation> operationsToFlush,\n+                                                          DbOperation failedOperation,\n+                                                          String message,\n+                                                          Throwable e) {\n \n-    String message = ExceptionUtil.collectExceptionMessages(cause);\n     String exceptionMessage = exceptionMessage(\n-      \"004\",\n-      \"Exception while executing Database Operation '{}' with message '{}'. Flush summary: \\n {}\",\n-      operation.toString(),\n-      message,\n-      buildStringFromList(operationsToFlush)\n+        \"004\",\n+        \"Exception while executing Database Operation '{}' with message '{}'. Flush summary: \\n {}\",\n+        failedOperation,\n+        message,\n+        buildStringFromList(operationsToFlush)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0NDgwMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r489544800", "createdAt": "2020-09-16T15:51:12Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/EnginePersistenceLogger.java", "diffHunk": "@@ -115,19 +113,21 @@ public ProcessEngineException alreadyMarkedEntityInEntityCacheException(String i\n     ));\n   }\n \n-  public ProcessEngineException flushDbOperationException(List<DbOperation> operationsToFlush, DbOperation operation,\n-      Throwable cause) {\n+  public ProcessEngineException flushDbOperationException(List<DbOperation> operationsToFlush,\n+                                                          DbOperation failedOperation,\n+                                                          String message,\n+                                                          Throwable e) {\n \n-    String message = ExceptionUtil.collectExceptionMessages(cause);\n     String exceptionMessage = exceptionMessage(\n-      \"004\",\n-      \"Exception while executing Database Operation '{}' with message '{}'. Flush summary: \\n {}\",\n-      operation.toString(),\n-      message,\n-      buildStringFromList(operationsToFlush)\n+        \"004\",\n+        \"Exception while executing Database Operation '{}' with message '{}'. Flush summary: \\n {}\",\n+        failedOperation,\n+        message,\n+        buildStringFromList(operationsToFlush)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ2OTg4NQ=="}, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjM2NTE0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoxOToyMFrOHR2SOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1MToyM1rOHS3c1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3NzI0Mg==", "bodyText": "Let's have a full sentence as an exception message.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r488477242", "createdAt": "2020-09-15T08:19:20Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java", "diffHunk": "@@ -212,4 +213,19 @@ public static String collectExceptionMessages(Throwable cause) {\n \n     return message;\n   }\n+\n+  public static <T> T throwPersistenceException(Supplier<T> supplier) {\n+    try {\n+      return supplier.get();\n+\n+    } catch (Exception ex) {\n+      throw wrapPersistenceException(ex);\n+\n+    }\n+  }\n+\n+  public static ProcessEngineException wrapPersistenceException(Exception ex) {\n+    return new ProcessEngineException(\"Persistence Exception\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0NDkxNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r489544917", "createdAt": "2020-09-16T15:51:23Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java", "diffHunk": "@@ -212,4 +213,19 @@ public static String collectExceptionMessages(Throwable cause) {\n \n     return message;\n   }\n+\n+  public static <T> T throwPersistenceException(Supplier<T> supplier) {\n+    try {\n+      return supplier.get();\n+\n+    } catch (Exception ex) {\n+      throw wrapPersistenceException(ex);\n+\n+    }\n+  }\n+\n+  public static ProcessEngineException wrapPersistenceException(Exception ex) {\n+    return new ProcessEngineException(\"Persistence Exception\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3NzI0Mg=="}, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjM3NTAwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoyMTo1NFrOHR2Ysg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1MToyOVrOHS3dKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3ODg5OA==", "bodyText": "The name of the method suggests that it always throws an exception. Can we rename it to something like doWithExceptionWrapper?\nAlso, let's add a Javadoc comment here why we are wrapping these exceptions. This will help other developers understand and refactor this in the future.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r488478898", "createdAt": "2020-09-15T08:21:54Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java", "diffHunk": "@@ -212,4 +213,19 @@ public static String collectExceptionMessages(Throwable cause) {\n \n     return message;\n   }\n+\n+  public static <T> T throwPersistenceException(Supplier<T> supplier) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0NTAwMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r489545003", "createdAt": "2020-09-16T15:51:29Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/util/ExceptionUtil.java", "diffHunk": "@@ -212,4 +213,19 @@ public static String collectExceptionMessages(Throwable cause) {\n \n     return message;\n   }\n+\n+  public static <T> T throwPersistenceException(Supplier<T> supplier) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ3ODg5OA=="}, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjM5Mjk5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/BatchDbSqlSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwODoyNjoxMlrOHR2jzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNTo1MTozNVrOHS3dcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4MTc0Mw==", "bodyText": "To reduce code complexity, I suggest to not override these methods. We will then have the wrapper exception twice in the hierarchy in case an operation fails in these methods when batching is used. I think that is ok.", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r488481743", "createdAt": "2020-09-15T08:26:12Z", "author": {"login": "ThorbenLindhauer"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/BatchDbSqlSession.java", "diffHunk": "@@ -259,6 +283,19 @@ protected void updateBulk(DbBulkOperation operation) {\n     executeUpdate(statement, parameter);\n   }\n \n+  @Override\n+  public int executeUpdate(String updateStatement, Object parameter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU0NTA3NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda/camunda-bpm-platform/pull/978#discussion_r489545074", "createdAt": "2020-09-16T15:51:35Z", "author": {"login": "tasso94"}, "path": "engine/src/main/java/org/camunda/bpm/engine/impl/db/sql/BatchDbSqlSession.java", "diffHunk": "@@ -259,6 +283,19 @@ protected void updateBulk(DbBulkOperation operation) {\n     executeUpdate(statement, parameter);\n   }\n \n+  @Override\n+  public int executeUpdate(String updateStatement, Object parameter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQ4MTc0Mw=="}, "originalCommit": {"oid": "b82f689fc01b313c2203185c12ddfaacae1b374c"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4460, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}