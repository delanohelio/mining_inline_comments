{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMzY0MzAx", "number": 1092, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo1NVrOEPdigw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1Mjo1NlrOETSsrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjQ4MDY3OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToxNzo1NVrOGzLz3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNDo0MTowMlrOG4QA7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDA2Mw==", "bodyText": "These OneSignal public methods now seem to go through these steps.\n\nCheck if remote params are done\nIf not add to queue\nAfter remote params finishes check if privacy consent is required.\nCheck if OneSignal has been initialized\n\nHowever with step 4 if we got here we already download remote params so OneSignal has been initialized. So this is a redundant check.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r456324063", "createdAt": "2020-07-17T09:17:55Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -1316,25 +1218,35 @@ public static void setEmail(@NonNull final String email, @Nullable final String\n     *                      Omit this value if you do not have a backend to authenticate the user.\n     * @param callback Fire onSuccess or onFailure depending if the update successes or fails\n     */\n-   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable EmailUpdateHandler callback) {\n-\n-      //if applicable, check if the user provided privacy consent\n+   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable final EmailUpdateHandler callback) {\n+      if (taskController.shouldQueueTaskForInit(\"setEmail()\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6a4eb3ae9d20da2f9e3bf7e912d402bf1c5c28"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ2MjA4Nw==", "bodyText": "yeah agree 4th step could be removed", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r456462087", "createdAt": "2020-07-17T14:02:11Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -1316,25 +1218,35 @@ public static void setEmail(@NonNull final String email, @Nullable final String\n     *                      Omit this value if you do not have a backend to authenticate the user.\n     * @param callback Fire onSuccess or onFailure depending if the update successes or fails\n     */\n-   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable EmailUpdateHandler callback) {\n-\n-      //if applicable, check if the user provided privacy consent\n+   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable final EmailUpdateHandler callback) {\n+      if (taskController.shouldQueueTaskForInit(\"setEmail()\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDA2Mw=="}, "originalCommit": {"oid": "4e6a4eb3ae9d20da2f9e3bf7e912d402bf1c5c28"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTEwMzM2OQ==", "bodyText": "Some odd reason removing step 4 causing the test on the method to stall. Noticed this setExternalUserId it gets stuck on threadAndTaskWait but probably for other methods too", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461103369", "createdAt": "2020-07-27T18:59:53Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -1316,25 +1218,35 @@ public static void setEmail(@NonNull final String email, @Nullable final String\n     *                      Omit this value if you do not have a backend to authenticate the user.\n     * @param callback Fire onSuccess or onFailure depending if the update successes or fails\n     */\n-   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable EmailUpdateHandler callback) {\n-\n-      //if applicable, check if the user provided privacy consent\n+   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable final EmailUpdateHandler callback) {\n+      if (taskController.shouldQueueTaskForInit(\"setEmail()\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDA2Mw=="}, "originalCommit": {"oid": "4e6a4eb3ae9d20da2f9e3bf7e912d402bf1c5c28"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYzNTgyMg==", "bodyText": "Solved this, the reason was It was only queuing runnable not pending runnable, and because of that, Executor was not being finished", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461635822", "createdAt": "2020-07-28T14:41:02Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -1316,25 +1218,35 @@ public static void setEmail(@NonNull final String email, @Nullable final String\n     *                      Omit this value if you do not have a backend to authenticate the user.\n     * @param callback Fire onSuccess or onFailure depending if the update successes or fails\n     */\n-   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable EmailUpdateHandler callback) {\n-\n-      //if applicable, check if the user provided privacy consent\n+   public static void setEmail(@NonNull final String email, @Nullable final String emailAuthHash, @Nullable final EmailUpdateHandler callback) {\n+      if (taskController.shouldQueueTaskForInit(\"setEmail()\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNDA2Mw=="}, "originalCommit": {"oid": "4e6a4eb3ae9d20da2f9e3bf7e912d402bf1c5c28"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Nzc0MjgyOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/LocationController.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNTozNTo1MFrOG3oC5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMzo0NjozOVrOG7MOBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDk2Ng==", "bodyText": "Is there a way we use a single null check for locationHandlerThread == null\ninstead of having one externally and internally to the synchronized?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r460980966", "createdAt": "2020-07-27T15:35:50Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/LocationController.java", "diffHunk": "@@ -58,7 +58,18 @@\n    private static boolean locationCoarse;\n \n    static final Object syncLock = new Object() {};\n-   static LocationHandlerThread locationHandlerThread;\n+\n+   private static LocationHandlerThread locationHandlerThread;\n+   static LocationHandlerThread getLocationHandlerThread() {\n+      if (locationHandlerThread == null) {\n+         synchronized (syncLock) {\n+            if (locationHandlerThread == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MTMyNQ==", "bodyText": "Actually this is a cost of the double-checks for synchronized initialization to work ok. In Java, there are different ways to make it thread-safe. One is to make the method synchronized but that will slow performance since we only care about the thread-safe on the initialization.  And the second one is to make thread-safe the initialization, but you know that it can happen that maybe one thread released the lock while other was waiting for it, then it can happen that the thread 1 init the locationHandlerThread while the second thread was waiting to init it, so that's why we need the second check. You can search for double check singleton, which is a common pattern. Let me know if it doesn't make sense \ud83d\ude2c", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461171325", "createdAt": "2020-07-27T21:09:00Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/LocationController.java", "diffHunk": "@@ -58,7 +58,18 @@\n    private static boolean locationCoarse;\n \n    static final Object syncLock = new Object() {};\n-   static LocationHandlerThread locationHandlerThread;\n+\n+   private static LocationHandlerThread locationHandlerThread;\n+   static LocationHandlerThread getLocationHandlerThread() {\n+      if (locationHandlerThread == null) {\n+         synchronized (syncLock) {\n+            if (locationHandlerThread == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDk2Ng=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NDczMQ==", "bodyText": "Makes sense, thank you for the explanation\nJust wanted to double check in case", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461654731", "createdAt": "2020-07-28T15:04:09Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/LocationController.java", "diffHunk": "@@ -58,7 +58,18 @@\n    private static boolean locationCoarse;\n \n    static final Object syncLock = new Object() {};\n-   static LocationHandlerThread locationHandlerThread;\n+\n+   private static LocationHandlerThread locationHandlerThread;\n+   static LocationHandlerThread getLocationHandlerThread() {\n+      if (locationHandlerThread == null) {\n+         synchronized (syncLock) {\n+            if (locationHandlerThread == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDk2Ng=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDcxOTM2Nw==", "bodyText": "ah interesting, ya locking can be heavy. Only can be done a lazy loading singleton pattern where value is null like we have here.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r464719367", "createdAt": "2020-08-03T23:46:39Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/LocationController.java", "diffHunk": "@@ -58,7 +58,18 @@\n    private static boolean locationCoarse;\n \n    static final Object syncLock = new Object() {};\n-   static LocationHandlerThread locationHandlerThread;\n+\n+   private static LocationHandlerThread locationHandlerThread;\n+   static LocationHandlerThread getLocationHandlerThread() {\n+      if (locationHandlerThread == null) {\n+         synchronized (syncLock) {\n+            if (locationHandlerThread == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk4MDk2Ng=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODE0OTU0OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzoxNjowNlrOG3r76g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTo1NDoyOFrOG30-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDcxNA==", "bodyText": "Does this have to be within the constructor of the TaskController?\nSeems like we could just make this global static HashSet<String> for O(1) access using the .contains method\nprivate HashSet<String> methodsAvailableForDelay = new HashSet<>(Arrays.asList(\n        \"getTags()\",\n        \"SyncHashedEmail()\",\n        \"setExternalUserId()\",\n        \"setSubscription()\",\n        \"promptLocation()\",\n        \"idsAvailable()\",\n        \"sendTag()\",\n        \"sendTags()\",\n        \"handleNotificationOpen()\",\n        \"setEmail()\"));", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461044714", "createdAt": "2020-07-27T17:16:06Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.onesignal;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class OSTaskController {\n+\n+    // the concurrent queue in which we pin pending tasks upon finishing initialization\n+    static final ConcurrentLinkedQueue<Runnable> taskQueueWaitingForInit = new ConcurrentLinkedQueue<>();\n+    private static final AtomicLong lastTaskId = new AtomicLong();\n+    private static ExecutorService pendingTaskExecutor;\n+\n+    private final OSLogger logger;\n+    private final OSRemoteParamController paramController;\n+\n+    private List<String> methodsAvailableForDelay;\n+\n+    OSTaskController(OSRemoteParamController paramController, OSLogger logger) {\n+        this.paramController = paramController;\n+        this.logger = logger;\n+\n+        methodsAvailableForDelay = new ArrayList<>(\n+                Arrays.asList(\"getTags()\", \"SyncHashedEmail()\", \"setExternalUserId()\", \"setSubscription()\",\n+                        \"promptLocation()\", \"idsAvailable()\", \"sendTag()\", \"sendTags()\", \"handleNotificationOpen()\",\n+                        \"setEmail()\"));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTM0Ng==", "bodyText": "Also lets make things consistent and change this SyncHashedEmail() task method name to syncHashedEmail()", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461045346", "createdAt": "2020-07-27T17:17:16Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.onesignal;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class OSTaskController {\n+\n+    // the concurrent queue in which we pin pending tasks upon finishing initialization\n+    static final ConcurrentLinkedQueue<Runnable> taskQueueWaitingForInit = new ConcurrentLinkedQueue<>();\n+    private static final AtomicLong lastTaskId = new AtomicLong();\n+    private static ExecutorService pendingTaskExecutor;\n+\n+    private final OSLogger logger;\n+    private final OSRemoteParamController paramController;\n+\n+    private List<String> methodsAvailableForDelay;\n+\n+    OSTaskController(OSRemoteParamController paramController, OSLogger logger) {\n+        this.paramController = paramController;\n+        this.logger = logger;\n+\n+        methodsAvailableForDelay = new ArrayList<>(\n+                Arrays.asList(\"getTags()\", \"SyncHashedEmail()\", \"setExternalUserId()\", \"setSubscription()\",\n+                        \"promptLocation()\", \"idsAvailable()\", \"sendTag()\", \"sendTags()\", \"handleNotificationOpen()\",\n+                        \"setEmail()\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDcxNA=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NTQwOA==", "bodyText": "And if we wanna make it easier to change in the future we should create static final String for each method name\nOR\nWe make a helper that calls and returns the current enclosing method name\nExample:\nString name = new Object(){}.getClass().getEnclosingMethod().getName();\nWhich would return \"sendTag\" if we called this within the sendTag method", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461045408", "createdAt": "2020-07-27T17:17:24Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.onesignal;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class OSTaskController {\n+\n+    // the concurrent queue in which we pin pending tasks upon finishing initialization\n+    static final ConcurrentLinkedQueue<Runnable> taskQueueWaitingForInit = new ConcurrentLinkedQueue<>();\n+    private static final AtomicLong lastTaskId = new AtomicLong();\n+    private static ExecutorService pendingTaskExecutor;\n+\n+    private final OSLogger logger;\n+    private final OSRemoteParamController paramController;\n+\n+    private List<String> methodsAvailableForDelay;\n+\n+    OSTaskController(OSRemoteParamController paramController, OSLogger logger) {\n+        this.paramController = paramController;\n+        this.logger = logger;\n+\n+        methodsAvailableForDelay = new ArrayList<>(\n+                Arrays.asList(\"getTags()\", \"SyncHashedEmail()\", \"setExternalUserId()\", \"setSubscription()\",\n+                        \"promptLocation()\", \"idsAvailable()\", \"sendTag()\", \"sendTags()\", \"handleNotificationOpen()\",\n+                        \"setEmail()\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDcxNA=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4ODgwNg==", "bodyText": "good catch!", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461188806", "createdAt": "2020-07-27T21:45:21Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.onesignal;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class OSTaskController {\n+\n+    // the concurrent queue in which we pin pending tasks upon finishing initialization\n+    static final ConcurrentLinkedQueue<Runnable> taskQueueWaitingForInit = new ConcurrentLinkedQueue<>();\n+    private static final AtomicLong lastTaskId = new AtomicLong();\n+    private static ExecutorService pendingTaskExecutor;\n+\n+    private final OSLogger logger;\n+    private final OSRemoteParamController paramController;\n+\n+    private List<String> methodsAvailableForDelay;\n+\n+    OSTaskController(OSRemoteParamController paramController, OSLogger logger) {\n+        this.paramController = paramController;\n+        this.logger = logger;\n+\n+        methodsAvailableForDelay = new ArrayList<>(\n+                Arrays.asList(\"getTags()\", \"SyncHashedEmail()\", \"setExternalUserId()\", \"setSubscription()\",\n+                        \"promptLocation()\", \"idsAvailable()\", \"sendTag()\", \"sendTags()\", \"handleNotificationOpen()\",\n+                        \"setEmail()\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDcxNA=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE5MjkwNg==", "bodyText": "And if we wanna make it easier to change in the future we should create static final String for each method name\nOR\nWe make a helper that calls and returns the current enclosing method name\nExample:\nString name = new Object(){}.getClass().getEnclosingMethod().getName();\nWhich would return \"sendTag\" if we called this within the sendTag method\n\nI like this suggestion, but Im wondering the performance cost, because that one is creating an anonymous class, and well you know that anonymous class compiled adds some extra code to the compilation, also getEnclosingMethod I think is a reflection method, and by definition reflection = not performant \ud83d\ude01 . I think i will continue with the constants, that seems right", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461192906", "createdAt": "2020-07-27T21:54:28Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.onesignal;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class OSTaskController {\n+\n+    // the concurrent queue in which we pin pending tasks upon finishing initialization\n+    static final ConcurrentLinkedQueue<Runnable> taskQueueWaitingForInit = new ConcurrentLinkedQueue<>();\n+    private static final AtomicLong lastTaskId = new AtomicLong();\n+    private static ExecutorService pendingTaskExecutor;\n+\n+    private final OSLogger logger;\n+    private final OSRemoteParamController paramController;\n+\n+    private List<String> methodsAvailableForDelay;\n+\n+    OSTaskController(OSRemoteParamController paramController, OSLogger logger) {\n+        this.paramController = paramController;\n+        this.logger = logger;\n+\n+        methodsAvailableForDelay = new ArrayList<>(\n+                Arrays.asList(\"getTags()\", \"SyncHashedEmail()\", \"setExternalUserId()\", \"setSubscription()\",\n+                        \"promptLocation()\", \"idsAvailable()\", \"sendTag()\", \"sendTags()\", \"handleNotificationOpen()\",\n+                        \"setEmail()\"));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA0NDcxNA=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODIzNzQ3OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSRemoteParamController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozOTo1OFrOG3sykQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzozOTo1OFrOG3sykQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1ODcwNQ==", "bodyText": "It might be easier to read this if we place this method call inside of the OneSignal class underneath instead of inside, like this:\nremoteParamController.saveRemoteParams(params, trackerFactory, preferences, logger);\nonRemoteParamSet();", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461058705", "createdAt": "2020-07-27T17:39:58Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSRemoteParamController.java", "diffHunk": "@@ -69,6 +69,10 @@ void saveRemoteParams(OneSignalRemoteParams.Params remoteParams,\n         OneSignal.onRemoteParamSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3ODI0NDM3OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNzo0MTo1NFrOG3s2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxNTo0MlrOG3z3cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTcyNQ==", "bodyText": "CallBack should be Callback, this is one word", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461059725", "createdAt": "2020-07-27T17:41:54Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -912,15 +807,12 @@ private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n    }\n \n    private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null) {\n-         remoteParamsCall = true;\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n       OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.CallBack() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3MjAzNw==", "bodyText": "I think this is already covered on major release changes when I rebase this will be fixed", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461172037", "createdAt": "2020-07-27T21:10:25Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -912,15 +807,12 @@ private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n    }\n \n    private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null) {\n-         remoteParamsCall = true;\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n       OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.CallBack() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTcyNQ=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NDY0MQ==", "bodyText": "If not i will double check again", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r461174641", "createdAt": "2020-07-27T21:15:42Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -912,15 +807,12 @@ private static boolean pushStatusRuntimeError(int subscriptionStatus) {\n    }\n \n    private static void makeAndroidParamsRequest(String appId, String userId) {\n-      if (getRemoteParams() != null) {\n-         remoteParamsCall = true;\n+      if (getRemoteParams() != null)\n          return;\n-      }\n \n       OneSignalRemoteParams.makeAndroidParamsRequest(appId, userId, new OneSignalRemoteParams.CallBack() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTA1OTcyNQ=="}, "originalCommit": {"oid": "079158157511e4e4611c2c67a9f4ca63e464aee4"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjY0NzQ5OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1Mjo1N1rOG48Vig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToxNzoyNVrOG49dhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MTk5NA==", "bodyText": "Just curious why we have an _ at the end of the OS_PENDING_EXECUTOR_", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r462361994", "createdAt": "2020-07-29T14:52:57Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.onesignal;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class OSTaskController {\n+\n+    static final String OS_PENDING_EXECUTOR = \"OS_PENDING_EXECUTOR_\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2964d727266044c1c5dc04f63839ba65cabe31"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4MDQyMQ==", "bodyText": "Oh that's because\nnewThread.setName(OS_PENDING_EXECUTOR + newThread.getId());\nwe append the thread id on the bottom", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1092#discussion_r462380421", "createdAt": "2020-07-29T15:17:25Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSTaskController.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package com.onesignal;\n+\n+import androidx.annotation.NonNull;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class OSTaskController {\n+\n+    static final String OS_PENDING_EXECUTOR = \"OS_PENDING_EXECUTOR_\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MTk5NA=="}, "originalCommit": {"oid": "6e2964d727266044c1c5dc04f63839ba65cabe31"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2322, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}