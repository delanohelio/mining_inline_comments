{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjExNTMz", "number": 1005, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNToxMTozNlrOD6F5eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1NTowNlrOD7WA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjQwNjM0OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNToxMTozNlrOGRuo0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNToxMTozNlrOGRuo0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzA4OQ==", "bodyText": "We can remove outcomes_ from the string as this is under the outcomes json key anyway. v2_enabled I think is the most clear.\nWe should keep OUTCOMES_ in the name so it is clear when we use it though.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421243089", "createdAt": "2020-05-07T05:11:36Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalRemoteParams.java", "diffHunk": "@@ -92,12 +92,12 @@ public String toString() {\n    private static int androidParamsRetries = 0;\n \n    private static final String OUTCOME_PARAM = \"outcomes\";\n-   private static final String V2_PARAM = \"v2_active\";\n+   private static final String OUTCOMES_V2_SERVICE_PARAM = \"outcomes_v2_service_enabled\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTc4Mzk4OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo0Nzo0MlrOGSPp1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo0Nzo0MlrOGSPp1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4NDAyMQ==", "bodyText": "rename this test maybe?\ntestIAMActionSendsOutcome_usingOutcomesV2 or\ntestOnIAMActionSendsOutcome_usingOutcomesV2", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421784021", "createdAt": "2020-05-07T20:47:42Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTg0NDk2OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTowNDo1N1rOGSQO-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTowNDo1N1rOGSQO-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MzUyOQ==", "bodyText": "rename this test maybe?\ntestIAMActionSendsOutcome_afterDismiss_usingOutcomesV2 or\ntestOnIAMActionSendsOutcome_afterDismiss_usingOutcomesV2", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421793529", "createdAt": "2020-05-07T21:04:57Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n+                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n+                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+                try {\n+                    // Check outcome was DIRECT from IAM\n+                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n+                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n+                    JSONObject direct = sources.getJSONObject(\"direct\");\n+                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n+                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n+                    assertEquals(1, iamIds.length());\n+                    assertEquals(message.messageId, iamIds.get(0));\n+                    assertFalse(sources.has(\"indirect\"));\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+    }\n+\n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTg1Njk2OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTowODoyNFrOGSQV8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTowODoyNFrOGSQV8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5NTMxMw==", "bodyText": "fix extra tabbing", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421795313", "createdAt": "2020-05-07T21:08:24Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -1041,8 +1041,8 @@ public void complete(OneSignalRemoteParams.Params params) {\n             );\n             OneSignalPrefs.saveBool(\n                OneSignalPrefs.PREFS_ONESIGNAL,\n-               OneSignalPrefs.PREFS_OS_OUTCOMES_V2,\n-                    params.influenceParams.v2Enabled\n+               preferences.getOutcomesV2KeyName(),\n+                    params.influenceParams.outcomesV2ServiceEnabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTg4MDg5OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxNTo0M1rOGSQkOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxNTo0M1rOGSQkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5ODk2OQ==", "bodyText": "Rename?\nvalidateRepositoryVersion or\nvalidateOutcomeRepositoryVersion", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421798969", "createdAt": "2020-05-07T21:15:43Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsFactory.java", "diffHunk": "@@ -23,11 +23,22 @@ public OSOutcomeEventsFactory(OSLogger logger, OneSignalAPIClient apiClient, One\n     public OSOutcomeEventsRepository getRepository() {\n         if (repository == null)\n             createRepository();\n+        else\n+            checkVersionChanged();\n         return repository;\n     }\n \n+    private void checkVersionChanged() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTkxNTM1OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToyNjoyNVrOGSQ5HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToyNjoyNVrOGSQ5HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDMxNg==", "bodyText": "Below you are doing a lot of Request asserts\nWe should continuously update RestClientAsserts.java whenever we find new endpoints for testing\nAsk me for help or check the current implementation and try to mimic it for the measure_sources endpoint", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421804316", "createdAt": "2020-05-07T21:26:25Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTkxNzA1OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToyNjo1NlrOGSQ6Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToyNjo1NlrOGSQ6Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNDU5NQ==", "bodyText": "Use RestClientAsserts.java, similar to above comment", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r421804595", "createdAt": "2020-05-07T21:26:56Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +635,160 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                // Ensure outcome is sent\n+                ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(4);\n+\n+                assertEquals(\"outcomes/measure_sources\", iamOutcomeRequest.url);\n+                // Requests: Param request + Players Request + IAM Request + Impression + Outcome Request\n+                assertEquals(5, ShadowOneSignalRestClient.requests.size());\n+                assertFalse(iamOutcomeRequest.payload.has(\"weight\"));\n+                try {\n+                    // Check outcome was DIRECT from IAM\n+                    assertEquals(\"test\", iamOutcomeRequest.payload.get(\"id\"));\n+                    assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n+                    JSONObject sources = iamOutcomeRequest.payload.getJSONObject(\"sources\");\n+                    JSONObject direct = sources.getJSONObject(\"direct\");\n+                    JSONArray iamIds = direct.getJSONArray(\"in_app_message_ids\");\n+                    assertEquals(0, direct.getJSONArray(\"notification_ids\").length());\n+                    assertEquals(1, iamIds.length());\n+                    assertEquals(message.messageId, iamIds.get(0));\n+                    assertFalse(sources.has(\"indirect\"));\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+    }\n+\n+    @Test\n+    public void testOnMessageActionOccurredOnMessageSendOutcomeV2AfterDismiss() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+            }\n+        });\n+        threadAndTaskWait();\n+\n+        // Add trigger to make IAM display\n+        OneSignal.addTrigger(\"test_1\", 2);\n+        assertEquals(1, OneSignalPackagePrivateHelper.getInAppMessageDisplayQueue().size());\n+\n+        OneSignalPackagePrivateHelper.onMessageActionOccurredOnMessage(message,\n+                new JSONObject() {{\n+                    put(\"id\", \"button_id_123\");\n+                    put(\"name\", \"my_click_name\");\n+                }}\n+        );\n+\n+        // Ensure we fire public callback that In-App was clicked.\n+        assertEquals(lastAction[0].clickName, \"my_click_name\");\n+\n+        OneSignalPackagePrivateHelper.dismissCurrentMessage();\n+\n+        OneSignal.sendOutcome(\"test1\");\n+        // Ensure outcome is sent but with INDIRECT influence from IAM\n+        ShadowOneSignalRestClient.Request iamOutcomeRequest = ShadowOneSignalRestClient.requests.get(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d534751b52f0edaf8084317b995bca44c896d7f"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTUzMjQ5OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1NTowNlrOGTnGQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1NTowNlrOGTnGQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNjcwNQ==", "bodyText": "NICE!", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1005#discussion_r423216705", "createdAt": "2020-05-11T17:55:06Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/InAppMessageIntegrationTests.java", "diffHunk": "@@ -633,6 +622,130 @@ public void testInAppMessageClickActionOutcomeWithValue() throws Exception {\n         assertEquals(1, iamOutcomeRequest.payload.get(\"device_type\"));\n     }\n \n+    @Test\n+    public void testOnIAMActionSendsOutcome_usingOutcomesV2() throws Exception {\n+        // Enable IAM v2\n+        preferences = new MockOSSharedPreferences();\n+        preferences.saveBool(preferences.getPreferencesName(), preferences.getOutcomesV2KeyName(), true);\n+        trackerFactory = new OSTrackerFactory(preferences, new MockOSLog());\n+        sessionManager = new MockSessionManager(OneSignal_getSessionListener(), trackerFactory, new MockOSLog());\n+\n+        OneSignal_setSharedPreferences(preferences);\n+        OneSignal_setTrackerFactory(trackerFactory);\n+        OneSignal_setSessionManager(sessionManager);\n+\n+        final OSTestInAppMessage message = InAppMessagingHelpers.buildTestMessageWithSingleTrigger(\n+                OSTriggerKind.CUSTOM, \"test_1\", OSTestTrigger.OSTriggerOperator.EQUAL_TO.toString(), 2);\n+\n+        setMockRegistrationResponseWithMessages(new ArrayList<OSTestInAppMessage>() {{\n+            add(message);\n+        }});\n+\n+        // 1. Init OneSignal\n+        OneSignalInit();\n+        threadAndTaskWait();\n+\n+        // Enable influence outcomes\n+        trackerFactory.saveInfluenceParams(new OneSignalPackagePrivateHelper.RemoteOutcomeParams());\n+\n+        final OSInAppMessageAction[] lastAction = new OSInAppMessageAction[1];\n+        OneSignal.getCurrentOrNewInitBuilder().setInAppMessageClickHandler(new OneSignal.InAppMessageClickHandler() {\n+            @Override\n+            public void inAppMessageClicked(OSInAppMessageAction result) {\n+                lastAction[0] = result;\n+                // Ensure we are on the main thread when running the callback, since the app developer\n+                //   will most likely need to update UI.\n+                assertMainThread();\n+\n+                OneSignal.sendOutcome(\"test\");\n+                try {\n+                    // Ensure outcome is sent\n+                    assertMeasureOnV2AtIndex(4, \"test\", new JSONArray().put(message.messageId), new JSONArray(), null, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e172b53a0266686435fb2a0a75e3ec3cd5426e9e"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2231, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}