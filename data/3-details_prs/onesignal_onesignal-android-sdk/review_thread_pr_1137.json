{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNjUzNDkx", "number": 1137, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDozMzo1NFrOEhE6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1NToyOVrOEhFHgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTE4ODU5OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationExtender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDozMzo1NFrOHOMWEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDozMzo1NFrOHOMWEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0NDM2OA==", "bodyText": "The boolean internalComplete was added to OSNotificationReceived in this PR. I think we should use this name here to keep it consistent.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r484644368", "createdAt": "2020-09-08T04:33:54Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationExtender.java", "diffHunk": "@@ -133,34 +133,42 @@ OSNotificationDisplayedResult displayNotification() {\n     * <br/><br/>\n     * @see OSNotificationReceived#complete()\n     */\n-   void processNotification() {\n-      // If the developer did not call display from notificationProcessing handler\n-      if (!developerProcessed) {\n-\n+   void processNotification(boolean internalFlow) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd567f83438bf6384f618c251c92cbd56f64d21"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTIyMzA0OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNDo1NToyOVrOHOMp5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODowMTo1MFrOHOoP_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTQ0NA==", "bodyText": "Should have threadAndTaskWait(); or something here to wait for the timeout to fire.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r484649444", "createdAt": "2020-09-08T04:55:29Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java", "diffHunk": "@@ -1553,6 +1554,167 @@ public void notificationProcessing(Context context, OSNotificationReceived notif\n       }\n    }\n \n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_displayNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure the AppNotificationJob is null\n+      assertNull(lastAppNotificationJob);\n+\n+      // 7. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_displayNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingDisplayNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // No call display, this will avoid notification display\n+\n+         // Complete is called to end NotificationProcessingHandler\n+         notification.complete();\n+      }\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_completeNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure the AppNotificationJob is not null\n+      assertNotNull(lastAppNotificationJob);\n+      assertEquals(OneSignal.OSNotificationDisplay.NOTIFICATION, lastAppNotificationJob.getNotificationDisplayOption());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_completeNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingCompleteNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // Display called to show notification\n+         OSNotificationDisplayedResult notificationDisplayedResult = notification.display();\n+\n+         // Complete not called to end NotificationProcessingHandler, depend on timeout to finish", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8dd567f83438bf6384f618c251c92cbd56f64d21"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzOTc4NQ==", "bodyText": "We already have the\nFCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\nthreadAndTaskWait();\n\nthat threadAndTaskWait should cover the timeout fire \ud83e\udd14", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r485039785", "createdAt": "2020-09-08T16:13:08Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java", "diffHunk": "@@ -1553,6 +1554,167 @@ public void notificationProcessing(Context context, OSNotificationReceived notif\n       }\n    }\n \n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_displayNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure the AppNotificationJob is null\n+      assertNull(lastAppNotificationJob);\n+\n+      // 7. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_displayNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingDisplayNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // No call display, this will avoid notification display\n+\n+         // Complete is called to end NotificationProcessingHandler\n+         notification.complete();\n+      }\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_completeNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure the AppNotificationJob is not null\n+      assertNotNull(lastAppNotificationJob);\n+      assertEquals(OneSignal.OSNotificationDisplay.NOTIFICATION, lastAppNotificationJob.getNotificationDisplayOption());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_completeNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingCompleteNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // Display called to show notification\n+         OSNotificationDisplayedResult notificationDisplayedResult = notification.display();\n+\n+         // Complete not called to end NotificationProcessingHandler, depend on timeout to finish", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTQ0NA=="}, "originalCommit": {"oid": "8dd567f83438bf6384f618c251c92cbd56f64d21"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEwMTU2Nw==", "bodyText": "ah sorry my bad, this is a class to be used by the two tests above. Ignore my comment here.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1137#discussion_r485101567", "createdAt": "2020-09-08T18:01:50Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/GenerateNotificationRunner.java", "diffHunk": "@@ -1553,6 +1554,167 @@ public void notificationProcessing(Context context, OSNotificationReceived notif\n       }\n    }\n \n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_displayNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingDisplayNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure running on main thread check was not called, this is only called for showing the notification\n+      assertFalse(ShadowGenerateNotification.isRunningOnMainThreadCheckCalled());\n+\n+      // 6. Make sure the AppNotificationJob is null\n+      assertNull(lastAppNotificationJob);\n+\n+      // 7. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_displayNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_displayNotCalled_notCallsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingDisplayNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // No call display, this will avoid notification display\n+\n+         // Complete is called to end NotificationProcessingHandler\n+         notification.complete();\n+      }\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessing_completeNotCalled() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Add app context and setup the established notification extension service\n+      OneSignal.setAppContext(ApplicationProvider.getApplicationContext());\n+      OneSignal_setupNotificationExtensionServiceClass();\n+\n+      // 3. Receive a notification\n+      Bundle bundle = getBaseNotifBundle();\n+      FCMBroadcastReceiver_processBundle(blankActivity, bundle);\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   @Test\n+   @Config(shadows = { ShadowGenerateNotification.class })\n+   public void testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler() throws Exception {\n+      // 1. Setup correct notification extension service class\n+      startNotificationExtensionService(\"com.test.onesignal.GenerateNotificationRunner$\" +\n+              \"NotificationExtensionService_notificationProcessingCompleteNotCalled\");\n+\n+      // 2. Init OneSignal\n+      OneSignal.setAppId(\"b2f7f966-d8cc-11e4-bed1-df8f05be55ba\");\n+      OneSignal.setAppContext(blankActivity);\n+      OneSignal.setNotificationWillShowInForegroundHandler(new OneSignal.AppNotificationWillShowInForegroundHandler() {\n+         @Override\n+         public void notificationWillShowInForeground(OSNotificationGenerationJob.AppNotificationGenerationJob notificationJob) {\n+            lastAppNotificationJob = notificationJob;\n+            // Call complete to end without waiting default 30 second timeout\n+            notificationJob.complete();\n+         }\n+      });\n+      threadAndTaskWait();\n+\n+      blankActivityController.resume();\n+      threadAndTaskWait();\n+\n+      // 3. Receive a notification in foreground\n+      FCMBroadcastReceiver_processBundle(blankActivity, getBaseNotifBundle());\n+      threadAndTaskWait();\n+\n+      // 4. Make sure service was called\n+      assertNotNull(lastNotificationReceived);\n+\n+      // 5. Make sure the AppNotificationJob is not null\n+      assertNotNull(lastAppNotificationJob);\n+      assertEquals(OneSignal.OSNotificationDisplay.NOTIFICATION, lastAppNotificationJob.getNotificationDisplayOption());\n+\n+      // 6. Make sure 1 notification exists in DB\n+      assertNotificationDbRecords(1);\n+   }\n+\n+   /**\n+    * @see #testNotificationProcessing_completeNotCalled\n+    * @see #testNotificationProcessingAndForegroundHandler_completeNotCalled_callsForegroundHandler\n+    */\n+   public static class NotificationExtensionService_notificationProcessingCompleteNotCalled implements OneSignal.NotificationProcessingHandler {\n+\n+      @Override\n+      public void notificationProcessing(Context context, OSNotificationReceived notification) {\n+         lastNotificationReceived = notification;\n+\n+         // Display called to show notification\n+         OSNotificationDisplayedResult notificationDisplayedResult = notification.display();\n+\n+         // Complete not called to end NotificationProcessingHandler, depend on timeout to finish", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY0OTQ0NA=="}, "originalCommit": {"oid": "8dd567f83438bf6384f618c251c92cbd56f64d21"}, "originalPosition": 169}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2120, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}