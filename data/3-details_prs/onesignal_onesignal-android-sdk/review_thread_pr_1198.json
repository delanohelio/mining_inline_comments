{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwOTg2NDQw", "number": 1198, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0NjowNlrOEzhZkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1MDoxM1rOEzhc_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDYwMDUwOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo0NjowNlrOHqyhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDowNDo1NFrOHqy2fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTkzMA==", "bodyText": "We don't want this to be a public method, it should only be called internally by the SDK.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1198#discussion_r514629930", "createdAt": "2020-10-29T23:46:06Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -316,6 +316,10 @@ static boolean isInitDone() {\n    static boolean isInForeground() {\n       return inForeground;\n    }\n+   public static void setInForeground(boolean inForeground) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00edd6369a3011f27f75dcafb01366873d77cbb5"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNTM5MQ==", "bodyText": "good catch! this was actually only for debugging", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1198#discussion_r514635391", "createdAt": "2020-10-30T00:04:54Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -316,6 +316,10 @@ static boolean isInitDone() {\n    static boolean isInForeground() {\n       return inForeground;\n    }\n+   public static void setInForeground(boolean inForeground) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyOTkzMA=="}, "originalCommit": {"oid": "00edd6369a3011f27f75dcafb01366873d77cbb5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDYwOTI3OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/TestHelpers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1MDoxM1rOHqymKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQyMzo1MDoxM1rOHqymKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTIwOA==", "bodyText": "\ud83d\udc4d Nice helper!\nIt was a lot of line changes, would be nice in the future if this it was its own commit. That way it is easier to review the other changes in smaller chunks.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1198#discussion_r514631208", "createdAt": "2020-10-29T23:50:13Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/TestHelpers.java", "diffHunk": "@@ -499,26 +503,97 @@ public static void assertMainThread() {\n          Assert.fail(\"assertMainThread - Not running on main thread when expected to!\");\n    }\n \n-\n+   static void stopJobs() throws Exception {\n+      JobScheduler jobScheduler =\n+              (JobScheduler) ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+      if (jobScheduler != null) {\n+         List<JobInfo> jobs = jobScheduler.getAllPendingJobs();\n+         for (JobInfo jobInfo : jobs) {\n+            stopJob(jobInfo);\n+            threadAndTaskWait();\n+         }\n+      }\n+   }\n    public static @Nullable JobInfo getNextJob() {\n+      return getJob(0);\n+   }\n+\n+   private static @Nullable JobInfo getJob(int index) {\n       JobScheduler jobScheduler =\n-         (JobScheduler)ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+              (JobScheduler)ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n       List<JobInfo> jobs = jobScheduler.getAllPendingJobs();\n-      if (jobs.size() == 0)\n+      if (jobs.size() == 0 || jobs.size() <= index)\n          return null;\n-      return jobs.get(0);\n+      else\n+         return jobs.get(index);\n    }\n \n    public static void runNextJob() {\n       try {\n          Class jobClass = Class.forName(getNextJob().getService().getClassName());\n-         JobService jobService = (JobService)Robolectric.buildService(jobClass).create().get();\n-         jobService.onStartJob(null);\n+         runJob(jobClass);\n       } catch (ClassNotFoundException e) {\n          e.printStackTrace();\n       }\n    }\n \n+   public static void runJob(Class jobClass) {\n+      JobService jobService = (JobService) Robolectric.buildService(jobClass).create().get();\n+      jobService.onStartJob(null);\n+   }\n+\n+   public static void stopJob(JobInfo jobInfo) {\n+      try {\n+         Class jobClass = Class.forName(jobInfo.getService().getClassName());\n+         JobService jobService = (JobService) Robolectric.buildService(jobClass).create().get();\n+         jobService.jobFinished(null, false);\n+      } catch (ClassNotFoundException e) {\n+         e.printStackTrace();\n+      }\n+   }\n+\n+   public static void assertNumberOfServicesAvailable(int quantity) {\n+      JobScheduler jobScheduler =\n+              (JobScheduler)ApplicationProvider.getApplicationContext().getSystemService(Context.JOB_SCHEDULER_SERVICE);\n+      List<JobInfo> jobs = jobScheduler.getAllPendingJobs();\n+      assertEquals(quantity, jobs.size());\n+   }\n+\n+   public static void assertAndRunNextJob(Class jobClass) {\n+      assertNumberOfServicesAvailable(1);\n+      assertNextJob(jobClass);\n+      runNextJob();\n+   }\n+\n+   public static void assertAndRunJobAtIndex(Class jobClass, int index) {\n+      assertNextJob(jobClass, index);\n+      runJob(jobClass);\n+   }\n+\n+   public static void assertNextJob(Class jobClass) {\n+      assertNextJob(jobClass, 0);\n+   }\n+\n+   public static void assertNextJob(Class jobClass, int index) {\n+      assertEquals(jobClass.getName(), getJob(index).getService().getClassName());\n+   }\n+\n+   public static void pauseActivity(ActivityController activityController) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00edd6369a3011f27f75dcafb01366873d77cbb5"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2170, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}