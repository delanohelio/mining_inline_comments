{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDM2NzU5", "number": 1007, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNToyNFrOD6ROyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjoyMjo0M1rOD7bLcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDI2MzEzOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNToyNFrOGSAp-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoxNToyNFrOGSAp-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTUzODI5OA==", "bodyText": "why are these methods (cleanCachedNotifications and cleanCachedUniqueOutcomeEventNotifications) inside the thread definition?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r421538298", "createdAt": "2020-05-07T14:15:24Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,188 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_MILLIS = 604_800L;\n+    private final static long SIX_MONTHS_IN_MILLIS = 15_552_000L;\n+\n+    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n+    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n \n     /**\n      * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. In App Messaging id sets (impressions, clicks, views)\n-     * 2. Notifications after 1 week\n-     * 3. Unique outcome events linked to notification ids (1 week)\n+     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n+     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n      */\n-    synchronized static void cleanOldCachedData(final Context context) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-                SQLiteDatabase writableDb = dbHelper.getWritableDbWithRetries();\n+    static void cleanOldCachedData(final Context context) {\n+        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n+        SQLiteDatabase writableDb = dbHelper.getSQLiteDatabaseWithRetries();\n \n-                cleanInAppMessagingCache();\n-                cleanNotificationCache(writableDb);\n-            }\n-        }, OS_DELETE_OLD_CACHED_DATA).start();\n-    }\n-\n-    /**\n-     * TODO: Needs to be implemented to clean out old IAM data used to track impressions, clicks, and viewed IAMs\n-     */\n-    static void cleanInAppMessagingCache() {\n-        // NOTE: Currently IAMs will pile up overtime and since IAMs can be modified, active, inactive, etc.\n-        //  we never truly know when it is the correct time to remove these ids form our cache\n+        cleanNotificationCache(writableDb);\n+        cleanCachedInAppMessages(writableDb);\n     }\n \n     /**\n      * Cleans two notification tables\n      * 1. NotificationTable.TABLE_NAME\n      * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    static void cleanNotificationCache(SQLiteDatabase writableDb) {\n-        cleanOldNotificationData(writableDb);\n-        cleanOldUniqueOutcomeEventNotificationsCache(writableDb);\n-    }\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-    /**\n-     * Deletes any notifications with created timestamps older than 7 days\n-     */\n-    private static void cleanOldNotificationData(SQLiteDatabase writableDb) {\n-        writableDb.delete(NotificationTable.TABLE_NAME,\n-                NotificationTable.COLUMN_NAME_CREATED_TIME + \" < \" + ((System.currentTimeMillis() / 1_000L) - 604_800L),\n-                null);\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+            }\n+\n+            /**\n+             * Deletes notifications with created timestamps older than 7 days\n+             */\n+            private void cleanCachedNotifications(SQLiteDatabase writableDb) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe8513eb7f367c94c98b25afd2798ce2b0bd5fa"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNDMwNjQ0OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoyNDowOVrOGSBEzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNDoyNDowOVrOGSBEzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0NTE2NQ==", "bodyText": "small optimization, but you can avoid dismissedMessages and impressionedMessages shared preference query if you already know that oldMessageIds is null or empty", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r421545165", "createdAt": "2020-05-07T14:24:09Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,188 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_MILLIS = 604_800L;\n+    private final static long SIX_MONTHS_IN_MILLIS = 15_552_000L;\n+\n+    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n+    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n \n     /**\n      * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. In App Messaging id sets (impressions, clicks, views)\n-     * 2. Notifications after 1 week\n-     * 3. Unique outcome events linked to notification ids (1 week)\n+     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n+     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n      */\n-    synchronized static void cleanOldCachedData(final Context context) {\n-        new Thread(new Runnable() {\n-            @Override\n-            public void run() {\n-                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-                SQLiteDatabase writableDb = dbHelper.getWritableDbWithRetries();\n+    static void cleanOldCachedData(final Context context) {\n+        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n+        SQLiteDatabase writableDb = dbHelper.getSQLiteDatabaseWithRetries();\n \n-                cleanInAppMessagingCache();\n-                cleanNotificationCache(writableDb);\n-            }\n-        }, OS_DELETE_OLD_CACHED_DATA).start();\n-    }\n-\n-    /**\n-     * TODO: Needs to be implemented to clean out old IAM data used to track impressions, clicks, and viewed IAMs\n-     */\n-    static void cleanInAppMessagingCache() {\n-        // NOTE: Currently IAMs will pile up overtime and since IAMs can be modified, active, inactive, etc.\n-        //  we never truly know when it is the correct time to remove these ids form our cache\n+        cleanNotificationCache(writableDb);\n+        cleanCachedInAppMessages(writableDb);\n     }\n \n     /**\n      * Cleans two notification tables\n      * 1. NotificationTable.TABLE_NAME\n      * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    static void cleanNotificationCache(SQLiteDatabase writableDb) {\n-        cleanOldNotificationData(writableDb);\n-        cleanOldUniqueOutcomeEventNotificationsCache(writableDb);\n-    }\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n \n-    /**\n-     * Deletes any notifications with created timestamps older than 7 days\n-     */\n-    private static void cleanOldNotificationData(SQLiteDatabase writableDb) {\n-        writableDb.delete(NotificationTable.TABLE_NAME,\n-                NotificationTable.COLUMN_NAME_CREATED_TIME + \" < \" + ((System.currentTimeMillis() / 1_000L) - 604_800L),\n-                null);\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n+            }\n+\n+            /**\n+             * Deletes notifications with created timestamps older than 7 days\n+             */\n+            private void cleanCachedNotifications(SQLiteDatabase writableDb) {\n+                String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n+\n+                String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - ONE_WEEK_IN_MILLIS);\n+                String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n+\n+                writableDb.delete(\n+                        NotificationTable.TABLE_NAME,\n+                        whereStr,\n+                        whereArgs);\n+            }\n+\n+            /**\n+             * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+             */\n+            private void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+                String whereStr = \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n+                        \" n WHERE\" +\n+                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID +\n+                        \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+\n+                writableDb.delete(\n+                        CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                        whereStr,\n+                        null);\n+            }\n+\n+        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n     }\n \n     /**\n-     * Deletes any notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * Remove IAMs that the last display time was six month ago\n+     * 1. Query for all old message ids and old clicked click ids\n+     * 2. Delete old IAMs from SQL\n+     * 3. Use queried data to clean SharedPreferences\n      */\n-    static void cleanOldUniqueOutcomeEventNotificationsCache(SQLiteDatabase writableDb) {\n-        writableDb.delete(CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n-                \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n-                        \" n WHERE\" +\n-                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID  + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\",\n-                null);\n+    @WorkerThread\n+    synchronized static void cleanCachedInAppMessages(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n+\n+                // 1. Query for all old message ids and old clicked click ids\n+                String[] retColumns = new String[]{\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID,\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS\n+                };\n+\n+                String whereStr = OneSignalDbContract.InAppMessageTable.COLUMN_NAME_LAST_DISPLAY + \" < ?\";\n+\n+                String sixMonthsAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - SIX_MONTHS_IN_MILLIS);\n+                String[] whereArgs = new String[]{sixMonthsAgoInSeconds};\n+\n+                Cursor cursor = writableDb.query(OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                        retColumns,\n+                        whereStr,\n+                        whereArgs,\n+                        null,\n+                        null,\n+                        null);\n+\n+                // From cursor get all of the old message ids and old clicked click ids\n+                Set<String> oldMessageIds = OSUtils.newConcurrentSet();\n+                Set<String> oldClickedClickIds = OSUtils.newConcurrentSet();\n+                if (cursor.moveToFirst()) {\n+                    do {\n+                        String oldMessageId = cursor.getString(\n+                                cursor.getColumnIndex(\n+                                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID));\n+                        String oldClickIds = cursor.getString(\n+                                cursor.getColumnIndex(\n+                                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID));\n+\n+                        oldMessageIds.add(oldMessageId);\n+                        oldClickedClickIds.addAll(OSUtils.newStringSetFromString(oldClickIds));\n+                    } while (cursor.moveToNext());\n+                }\n+                cursor.close();\n+\n+                // 2. Delete old IAMs from SQL\n+                writableDb.delete(\n+                        OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                        whereStr,\n+                        whereArgs);\n+\n+                // 3. Use queried data to clean SharedPreferences\n+                cleanCachedSharedPreferenceIamData(oldMessageIds, oldClickedClickIds);\n+            }\n+\n+            private void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n+                // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+                Set<String> dismissedMessages = OneSignalPrefs.getStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_DISMISSED_IAMS,\n+                        OSUtils.<String>newConcurrentSet());\n+\n+                Set<String> impressionedMessages = OneSignalPrefs.getStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_IMPRESSIONED_IAMS,\n+                        OSUtils.<String>newConcurrentSet());\n+\n+                Set<String> clickedClickIds = OneSignalPrefs.getStringSet(\n+                        OneSignalPrefs.PREFS_ONESIGNAL,\n+                        OneSignalPrefs.PREFS_OS_CLICKED_CLICK_IDS_IAMS,\n+                        OSUtils.<String>newConcurrentSet());\n+\n+                if (oldMessageIds != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe8513eb7f367c94c98b25afd2798ce2b0bd5fa"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTI1OTg1OnYy", "diffSide": "LEFT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTowMjozMlrOGSwNZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1MjoxMVrOGTm_3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNzQxNQ==", "bodyText": "why is this deleted?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r422317415", "createdAt": "2020-05-08T19:02:32Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "diffHunk": "@@ -448,24 +435,21 @@ void onFailure(int statusCode, String response, Throwable throwable) {\n      * For click counting, every message has it click id array\n      * */\n     private void setDataForRedisplay(OSInAppMessage message) {\n-        if (!message.getDisplayStats().isRedisplayEnabled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNTA2OQ==", "bodyText": "This is why im always trying to rename things, we want to have redisplay data for IAMs so when we save them to SQL it matches the scheme and nothing is NULL\nRedisplay isnt something we \"enable\" and \"disable\" also its just whether or not the IAM will show more than once. I think every IAM should have the same scheme and should be cached together, not separately", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423215069", "createdAt": "2020-05-11T17:52:11Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "diffHunk": "@@ -448,24 +435,21 @@ void onFailure(int statusCode, String response, Throwable throwable) {\n      * For click counting, every message has it click id array\n      * */\n     private void setDataForRedisplay(OSInAppMessage message) {\n-        if (!message.getDisplayStats().isRedisplayEnabled())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxNzQxNQ=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTI2MzUzOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTowMzo1MlrOGSwPxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNzo1MDoxN1rOGTm76A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODAyMA==", "bodyText": "Sry I think you already explained me this, but why is always saving redisplay now?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r422318020", "createdAt": "2020-05-08T19:03:52Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "diffHunk": "@@ -572,14 +556,10 @@ private void dismissCurrentMessage(@Nullable OSInAppMessage message) {\n         }\n     }\n \n-    private void persistInAppMessageForRedisplay(final OSInAppMessage message) {\n-        //If the IAM doesn't have the re display configuration then no need to save it\n-        if (!message.getDisplayStats().isRedisplayEnabled())\n-            return;\n-\n+    private void persistInAppMessage(final OSInAppMessage message) {\n         long displayTimeSeconds = System.currentTimeMillis() / 1000;\n-        message.getDisplayStats().setLastDisplayTime(displayTimeSeconds);\n-        message.getDisplayStats().incrementDisplayQuantity();\n+        message.getRedisplayStats().setLastDisplayTime(displayTimeSeconds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzIxNDA1Ng==", "bodyText": "We should treat all IAMs the same way as it creates consistency\nEven though we arent visually seeing an IAM with a limit of 1, we still need to cache it and keep track of it. Its confusing saving only specific set of IAMs to SQL when you can easily do them all.\nSpecifically why I did this was because I needed to know when to clean Shared Preferences after 6 months and if we arent saving all IAMs we only end up the redisplay ones", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423214056", "createdAt": "2020-05-11T17:50:17Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageController.java", "diffHunk": "@@ -572,14 +556,10 @@ private void dismissCurrentMessage(@Nullable OSInAppMessage message) {\n         }\n     }\n \n-    private void persistInAppMessageForRedisplay(final OSInAppMessage message) {\n-        //If the IAM doesn't have the re display configuration then no need to save it\n-        if (!message.getDisplayStats().isRedisplayEnabled())\n-            return;\n-\n+    private void persistInAppMessage(final OSInAppMessage message) {\n         long displayTimeSeconds = System.currentTimeMillis() / 1000;\n-        message.getDisplayStats().setLastDisplayTime(displayTimeSeconds);\n-        message.getDisplayStats().incrementDisplayQuantity();\n+        message.getRedisplayStats().setLastDisplayTime(displayTimeSeconds);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODAyMA=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTI2NTYwOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTowNDoyN1rOGSwQ8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTowNDoyN1rOGSwQ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMxODMyMQ==", "bodyText": "good one!", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r422318321", "createdAt": "2020-05-08T19:04:27Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk3Njk3OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageRedisplayStats.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowODoxOVrOGTrgXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjoxODoyNlrOGTvXZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw==", "bodyText": "Let's ensure the backend will always send this value for unlimited reshows.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423288927", "createdAt": "2020-05-11T20:08:19Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageRedisplayStats.java", "diffHunk": "@@ -3,31 +3,31 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n-class OSInAppMessageDisplayStats {\n+class OSInAppMessageRedisplayStats {\n \n     private static final String DISPLAY_LIMIT = \"limit\";\n     private static final String DISPLAY_DELAY = \"delay\";\n \n-    //Last IAM display time in seconds\n+    // Last IAM display time in seconds\n     private long lastDisplayTime = -1;\n-    //Current quantity of displays\n+    // Current quantity of displays\n     private int displayQuantity = 0;\n-    //Quantity of displays limit\n-    private int displayLimit = Integer.MAX_VALUE;\n-    //Delay between displays in seconds\n+    // Quantity of displays limit\n+    private int displayLimit = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMDY5OQ==", "bodyText": "good UnitTest, on it", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423300699", "createdAt": "2020-05-11T20:30:22Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageRedisplayStats.java", "diffHunk": "@@ -3,31 +3,31 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n-class OSInAppMessageDisplayStats {\n+class OSInAppMessageRedisplayStats {\n \n     private static final String DISPLAY_LIMIT = \"limit\";\n     private static final String DISPLAY_DELAY = \"delay\";\n \n-    //Last IAM display time in seconds\n+    // Last IAM display time in seconds\n     private long lastDisplayTime = -1;\n-    //Current quantity of displays\n+    // Current quantity of displays\n     private int displayQuantity = 0;\n-    //Quantity of displays limit\n-    private int displayLimit = Integer.MAX_VALUE;\n-    //Delay between displays in seconds\n+    // Quantity of displays limit\n+    private int displayLimit = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxNzk0Nw==", "bodyText": "are you making this change on iOS too?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423317947", "createdAt": "2020-05-11T21:02:47Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageRedisplayStats.java", "diffHunk": "@@ -3,31 +3,31 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n-class OSInAppMessageDisplayStats {\n+class OSInAppMessageRedisplayStats {\n \n     private static final String DISPLAY_LIMIT = \"limit\";\n     private static final String DISPLAY_DELAY = \"delay\";\n \n-    //Last IAM display time in seconds\n+    // Last IAM display time in seconds\n     private long lastDisplayTime = -1;\n-    //Current quantity of displays\n+    // Current quantity of displays\n     private int displayQuantity = 0;\n-    //Quantity of displays limit\n-    private int displayLimit = Integer.MAX_VALUE;\n-    //Delay between displays in seconds\n+    // Quantity of displays limit\n+    private int displayLimit = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0MTc2Mg==", "bodyText": "I will be but not yet", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423341762", "createdAt": "2020-05-11T21:53:03Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageRedisplayStats.java", "diffHunk": "@@ -3,31 +3,31 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n-class OSInAppMessageDisplayStats {\n+class OSInAppMessageRedisplayStats {\n \n     private static final String DISPLAY_LIMIT = \"limit\";\n     private static final String DISPLAY_DELAY = \"delay\";\n \n-    //Last IAM display time in seconds\n+    // Last IAM display time in seconds\n     private long lastDisplayTime = -1;\n-    //Current quantity of displays\n+    // Current quantity of displays\n     private int displayQuantity = 0;\n-    //Quantity of displays limit\n-    private int displayLimit = Integer.MAX_VALUE;\n-    //Delay between displays in seconds\n+    // Quantity of displays limit\n+    private int displayLimit = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1MjE2Nw==", "bodyText": "I did a quick check on the backed, looks like redisplay won't even get sent unless this value is set to 1 is what we want.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423352167", "createdAt": "2020-05-11T22:18:26Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSInAppMessageRedisplayStats.java", "diffHunk": "@@ -3,31 +3,31 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n-class OSInAppMessageDisplayStats {\n+class OSInAppMessageRedisplayStats {\n \n     private static final String DISPLAY_LIMIT = \"limit\";\n     private static final String DISPLAY_DELAY = \"delay\";\n \n-    //Last IAM display time in seconds\n+    // Last IAM display time in seconds\n     private long lastDisplayTime = -1;\n-    //Current quantity of displays\n+    // Current quantity of displays\n     private int displayQuantity = 0;\n-    //Quantity of displays limit\n-    private int displayLimit = Integer.MAX_VALUE;\n-    //Delay between displays in seconds\n+    // Quantity of displays limit\n+    private int displayLimit = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4ODkyNw=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk4MTY0OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowOTo1MFrOGTrjTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMToxMVrOGTsQUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTY3Nw==", "bodyText": "setString should be something like jsonArray instead.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423289677", "createdAt": "2020-05-11T20:09:50Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTIwMA==", "bodyText": "good idea, on it", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423301200", "createdAt": "2020-05-11T20:31:11Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4OTY3Nw=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk4NDI2OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMDoyN1rOGTrk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMTozMFrOGTsQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDA2OA==", "bodyText": "I think you forgot to rename clickIdsArray to something more generic when you moved it to OSUtils.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423290068", "createdAt": "2020-05-11T20:10:27Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+      Set<String> stringSet = new HashSet<>();\n+\n+      JSONArray clickIdsArray = new JSONArray(setString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTM3NA==", "bodyText": "Whoops. thank you", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423301374", "createdAt": "2020-05-11T20:31:30Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSUtils.java", "diffHunk": "@@ -444,6 +447,18 @@ private static void openURLInBrowser(@NonNull Uri uri) {\n       return Collections.newSetFromMap(new ConcurrentHashMap<T, Boolean>());\n    }\n \n+   // Creates a new Set<String> from a Set String by converting and iterating a JSONArray\n+   static Set<String> newStringSetFromString(String setString) throws JSONException {\n+      Set<String> stringSet = new HashSet<>();\n+\n+      JSONArray clickIdsArray = new JSONArray(setString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MDA2OA=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk5MTAwOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjozMVrOGTro6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozMTo1MFrOGTsRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTExNQ==", "bodyText": "SIX_MONTHS_IN_SECONDS should be something more descriptive to what is it used for like IAM_MAX_CACHE_SEC", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423291115", "createdAt": "2020-05-11T20:12:31Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,218 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n+    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTY4OQ==", "bodyText": "6 months should be a comment instead.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423291689", "createdAt": "2020-05-11T20:13:37Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,218 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n+    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTExNQ=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwMTUzMg==", "bodyText": "You are correct, on it", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423301532", "createdAt": "2020-05-11T20:31:50Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,218 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_SECONDS = 604_800L;\n+    private final static long SIX_MONTHS_IN_SECONDS = 15_552_000L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTExNQ=="}, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk5MjQ1OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjo1NFrOGTrpzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDoxMjo1NFrOGTrpzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI5MTM0Mg==", "bodyText": "ONE_WEEK_IN_SECONDS should be something more descriptive to what is it used. One week should be a comment instead.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423291342", "createdAt": "2020-05-11T20:12:54Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,218 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long ONE_WEEK_IN_SECONDS = 604_800L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "566c0694a87bb7e6bd77be46e7fe98135c26b255"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjM3ODczOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMjoyMjo0M1rOGTvdpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjo1NDoxMlrOGUQB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1Mzc2NQ==", "bodyText": "This would be cleaner with 2 methods instead of long if blocks.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423353765", "createdAt": "2020-05-11T22:22:43Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,219 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+\n+    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n+    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n \n     /**\n      * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. In App Messaging id sets (impressions, clicks, views)\n-     * 2. Notifications after 1 week\n-     * 3. Unique outcome events linked to notification ids (1 week)\n+     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n+     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n+     */\n+    static void cleanOldCachedData(final Context context) {\n+        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n+        SQLiteDatabase writableDb = dbHelper.getSQLiteDatabaseWithRetries();\n+\n+        cleanNotificationCache(writableDb);\n+        cleanCachedInAppMessages(writableDb);\n+    }\n+\n+    /**\n+     * Cleans two notification tables\n+     * 1. NotificationTable.TABLE_NAME\n+     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    synchronized static void cleanOldCachedData(final Context context) {\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n         new Thread(new Runnable() {\n             @Override\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-                SQLiteDatabase writableDb = dbHelper.getWritableDbWithRetries();\n \n-                cleanInAppMessagingCache();\n-                cleanNotificationCache(writableDb);\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n-        }, OS_DELETE_OLD_CACHED_DATA).start();\n+\n+        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n     }\n \n     /**\n-     * TODO: Needs to be implemented to clean out old IAM data used to track impressions, clicks, and viewed IAMs\n+     * Remove IAMs that the last display time was six month ago\n+     * 1. Query for all old message ids and old clicked click ids\n+     * 2. Delete old IAMs from SQL\n+     * 3. Use queried data to clean SharedPreferences\n      */\n-    static void cleanInAppMessagingCache() {\n-        // NOTE: Currently IAMs will pile up overtime and since IAMs can be modified, active, inactive, etc.\n-        //  we never truly know when it is the correct time to remove these ids form our cache\n+    @WorkerThread\n+    synchronized static void cleanCachedInAppMessages(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n+\n+                // 1. Query for all old message ids and old clicked click ids\n+                String[] retColumns = new String[]{\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID,\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS\n+                };\n+\n+                String whereStr = OneSignalDbContract.InAppMessageTable.COLUMN_NAME_LAST_DISPLAY + \" < ?\";\n+\n+                String sixMonthsAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - IAM_CACHE_DATA_LIFETIME);\n+                String[] whereArgs = new String[]{sixMonthsAgoInSeconds};\n+\n+                Set<String> oldMessageIds = OSUtils.newConcurrentSet();\n+                Set<String> oldClickedClickIds = OSUtils.newConcurrentSet();\n+\n+                Cursor cursor = null;\n+                try {\n+                    cursor = writableDb.query(OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                            retColumns,\n+                            whereStr,\n+                            whereArgs,\n+                            null,\n+                            null,\n+                            null);\n+\n+                    if (cursor == null || cursor.getCount() == 0) {\n+                        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Attempted to clean 6 month old IAM data, but none exists!\");\n+                        return;\n+                    }\n+\n+                    // From cursor get all of the old message ids and old clicked click ids\n+                    if (cursor.moveToFirst()) {\n+                        do {\n+                            String oldMessageId = cursor.getString(\n+                                    cursor.getColumnIndex(\n+                                            OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID));\n+                            String oldClickIds = cursor.getString(\n+                                    cursor.getColumnIndex(\n+                                            OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS));\n+\n+                            oldMessageIds.add(oldMessageId);\n+                            oldClickedClickIds.addAll(OSUtils.newStringSetFromJSONArray(new JSONArray(oldClickIds)));\n+                        } while (cursor.moveToNext());\n+                    }\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    if (cursor != null & !cursor.isClosed())\n+                        cursor.close();\n+                }\n+\n+                // 2. Delete old IAMs from SQL\n+                writableDb.delete(\n+                        OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                        whereStr,\n+                        whereArgs);\n+\n+                // 3. Use queried data to clean SharedPreferences\n+                cleanCachedSharedPreferenceIamData(oldMessageIds, oldClickedClickIds);\n+            }\n+\n+        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n     }\n \n     /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n+     * Deletes notifications with created timestamps older than 7 days\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    static void cleanNotificationCache(SQLiteDatabase writableDb) {\n-        cleanOldNotificationData(writableDb);\n-        cleanOldUniqueOutcomeEventNotificationsCache(writableDb);\n+    private static void cleanCachedNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n+\n+        String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n+        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n+\n+        writableDb.delete(\n+                NotificationTable.TABLE_NAME,\n+                whereStr,\n+                whereArgs);\n     }\n \n     /**\n-     * Deletes any notifications with created timestamps older than 7 days\n+     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    private static void cleanOldNotificationData(SQLiteDatabase writableDb) {\n-        writableDb.delete(NotificationTable.TABLE_NAME,\n-                NotificationTable.COLUMN_NAME_CREATED_TIME + \" < \" + ((System.currentTimeMillis() / 1_000L) - 604_800L),\n+    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = \"NOT EXISTS(\" +\n+                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+\n+        writableDb.delete(\n+                CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                whereStr,\n                 null);\n     }\n \n     /**\n-     * Deletes any notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * Deletes old IAM SharedPreference dismissed and impressioned message ids as well as clicked click ids\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n      */\n-    static void cleanOldUniqueOutcomeEventNotificationsCache(SQLiteDatabase writableDb) {\n-        writableDb.delete(CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n-                \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n-                        \" n WHERE\" +\n-                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID  + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\",\n-                null);\n+    private static void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n+        // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+        if (oldMessageIds != null && oldMessageIds.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a552dd564f1b40f5cbb6b085181fc265527c961"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg4NzMzOQ==", "bodyText": "On it!", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1007#discussion_r423887339", "createdAt": "2020-05-12T16:54:12Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalCacheCleaner.java", "diffHunk": "@@ -4,69 +4,219 @@\n import com.onesignal.OneSignalDbContract.CachedUniqueOutcomeNotificationTable;\n \n import android.content.Context;\n+import android.database.Cursor;\n import android.database.sqlite.SQLiteDatabase;\n import android.os.Process;\n+import android.support.annotation.WorkerThread;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+\n+import java.util.Set;\n \n class OneSignalCacheCleaner {\n \n-    private static String OS_DELETE_OLD_CACHED_DATA = \"OS_DELETE_OLD_CACHED_DATA\";\n+    private final static long NOTIFICATION_CACHE_DATA_LIFETIME = 604_800L; // 7 days in seconds\n+    private final static long IAM_CACHE_DATA_LIFETIME = 15_552_000L; // 6 months in seconds\n+\n+    private final static String OS_DELETE_CACHED_NOTIFICATIONS_THREAD = \"OS_DELETE_CACHED_NOTIFICATIONS_THREAD\";\n+    private final static String OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD = \"OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD\";\n \n     /**\n      * We clean outdated cache from several places within the OneSignal SDK here\n-     * 1. In App Messaging id sets (impressions, clicks, views)\n-     * 2. Notifications after 1 week\n-     * 3. Unique outcome events linked to notification ids (1 week)\n+     * 1. Notifications & unique outcome events linked to notification ids (1 week)\n+     * 2. Cached In App Messaging Sets in SharedPreferences (impressions, clicks, views) and SQL IAMs\n+     */\n+    static void cleanOldCachedData(final Context context) {\n+        OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n+        SQLiteDatabase writableDb = dbHelper.getSQLiteDatabaseWithRetries();\n+\n+        cleanNotificationCache(writableDb);\n+        cleanCachedInAppMessages(writableDb);\n+    }\n+\n+    /**\n+     * Cleans two notification tables\n+     * 1. NotificationTable.TABLE_NAME\n+     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n      */\n-    synchronized static void cleanOldCachedData(final Context context) {\n+    synchronized static void cleanNotificationCache(final SQLiteDatabase writableDb) {\n         new Thread(new Runnable() {\n             @Override\n             public void run() {\n                 Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n-                OneSignalDbHelper dbHelper = OneSignalDbHelper.getInstance(context);\n-                SQLiteDatabase writableDb = dbHelper.getWritableDbWithRetries();\n \n-                cleanInAppMessagingCache();\n-                cleanNotificationCache(writableDb);\n+                cleanCachedNotifications(writableDb);\n+                cleanCachedUniqueOutcomeEventNotifications(writableDb);\n             }\n-        }, OS_DELETE_OLD_CACHED_DATA).start();\n+\n+        }, OS_DELETE_CACHED_NOTIFICATIONS_THREAD).start();\n     }\n \n     /**\n-     * TODO: Needs to be implemented to clean out old IAM data used to track impressions, clicks, and viewed IAMs\n+     * Remove IAMs that the last display time was six month ago\n+     * 1. Query for all old message ids and old clicked click ids\n+     * 2. Delete old IAMs from SQL\n+     * 3. Use queried data to clean SharedPreferences\n      */\n-    static void cleanInAppMessagingCache() {\n-        // NOTE: Currently IAMs will pile up overtime and since IAMs can be modified, active, inactive, etc.\n-        //  we never truly know when it is the correct time to remove these ids form our cache\n+    @WorkerThread\n+    synchronized static void cleanCachedInAppMessages(final SQLiteDatabase writableDb) {\n+        new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                Thread.currentThread().setPriority(Process.THREAD_PRIORITY_BACKGROUND);\n+\n+                // 1. Query for all old message ids and old clicked click ids\n+                String[] retColumns = new String[]{\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID,\n+                        OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS\n+                };\n+\n+                String whereStr = OneSignalDbContract.InAppMessageTable.COLUMN_NAME_LAST_DISPLAY + \" < ?\";\n+\n+                String sixMonthsAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - IAM_CACHE_DATA_LIFETIME);\n+                String[] whereArgs = new String[]{sixMonthsAgoInSeconds};\n+\n+                Set<String> oldMessageIds = OSUtils.newConcurrentSet();\n+                Set<String> oldClickedClickIds = OSUtils.newConcurrentSet();\n+\n+                Cursor cursor = null;\n+                try {\n+                    cursor = writableDb.query(OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                            retColumns,\n+                            whereStr,\n+                            whereArgs,\n+                            null,\n+                            null,\n+                            null);\n+\n+                    if (cursor == null || cursor.getCount() == 0) {\n+                        OneSignal.onesignalLog(OneSignal.LOG_LEVEL.DEBUG, \"Attempted to clean 6 month old IAM data, but none exists!\");\n+                        return;\n+                    }\n+\n+                    // From cursor get all of the old message ids and old clicked click ids\n+                    if (cursor.moveToFirst()) {\n+                        do {\n+                            String oldMessageId = cursor.getString(\n+                                    cursor.getColumnIndex(\n+                                            OneSignalDbContract.InAppMessageTable.COLUMN_NAME_MESSAGE_ID));\n+                            String oldClickIds = cursor.getString(\n+                                    cursor.getColumnIndex(\n+                                            OneSignalDbContract.InAppMessageTable.COLUMN_CLICK_IDS));\n+\n+                            oldMessageIds.add(oldMessageId);\n+                            oldClickedClickIds.addAll(OSUtils.newStringSetFromJSONArray(new JSONArray(oldClickIds)));\n+                        } while (cursor.moveToNext());\n+                    }\n+                } catch (JSONException e) {\n+                    e.printStackTrace();\n+                } finally {\n+                    if (cursor != null & !cursor.isClosed())\n+                        cursor.close();\n+                }\n+\n+                // 2. Delete old IAMs from SQL\n+                writableDb.delete(\n+                        OneSignalDbContract.InAppMessageTable.TABLE_NAME,\n+                        whereStr,\n+                        whereArgs);\n+\n+                // 3. Use queried data to clean SharedPreferences\n+                cleanCachedSharedPreferenceIamData(oldMessageIds, oldClickedClickIds);\n+            }\n+\n+        }, OS_DELETE_CACHED_REDISPLAYED_IAMS_THREAD).start();\n     }\n \n     /**\n-     * Cleans two notification tables\n-     * 1. NotificationTable.TABLE_NAME\n-     * 2. CachedUniqueOutcomeNotificationTable.TABLE_NAME\n+     * Deletes notifications with created timestamps older than 7 days\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    static void cleanNotificationCache(SQLiteDatabase writableDb) {\n-        cleanOldNotificationData(writableDb);\n-        cleanOldUniqueOutcomeEventNotificationsCache(writableDb);\n+    private static void cleanCachedNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = NotificationTable.COLUMN_NAME_CREATED_TIME + \" < ?\";\n+\n+        String sevenDaysAgoInSeconds = String.valueOf((System.currentTimeMillis() / 1_000L) - NOTIFICATION_CACHE_DATA_LIFETIME);\n+        String[] whereArgs = new String[]{ sevenDaysAgoInSeconds };\n+\n+        writableDb.delete(\n+                NotificationTable.TABLE_NAME,\n+                whereStr,\n+                whereArgs);\n     }\n \n     /**\n-     * Deletes any notifications with created timestamps older than 7 days\n+     * Deletes cached unique outcome notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanNotificationCache(SQLiteDatabase)\n      */\n-    private static void cleanOldNotificationData(SQLiteDatabase writableDb) {\n-        writableDb.delete(NotificationTable.TABLE_NAME,\n-                NotificationTable.COLUMN_NAME_CREATED_TIME + \" < \" + ((System.currentTimeMillis() / 1_000L) - 604_800L),\n+    private static void cleanCachedUniqueOutcomeEventNotifications(SQLiteDatabase writableDb) {\n+        String whereStr = \"NOT EXISTS(\" +\n+                \"SELECT NULL FROM \" + NotificationTable.TABLE_NAME + \" n \" +\n+                \"WHERE\" + \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\";\n+\n+        writableDb.delete(\n+                CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n+                whereStr,\n                 null);\n     }\n \n     /**\n-     * Deletes any notifications whose ids do not exist inside of the NotificationTable.TABLE_NAME\n+     * Deletes old IAM SharedPreference dismissed and impressioned message ids as well as clicked click ids\n+     * <br/><br/>\n+     * Note: This should only ever be called by {@link OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)}\n+     * <br/><br/>\n+     * @see OneSignalCacheCleaner#cleanCachedInAppMessages(SQLiteDatabase)\n      */\n-    static void cleanOldUniqueOutcomeEventNotificationsCache(SQLiteDatabase writableDb) {\n-        writableDb.delete(CachedUniqueOutcomeNotificationTable.TABLE_NAME,\n-                \"NOT EXISTS(SELECT NULL FROM \" + NotificationTable.TABLE_NAME +\n-                        \" n WHERE\" +\n-                        \" n.\" + NotificationTable.COLUMN_NAME_NOTIFICATION_ID  + \" = \" + CachedUniqueOutcomeNotificationTable.COLUMN_NAME_NOTIFICATION_ID + \")\",\n-                null);\n+    private static void cleanCachedSharedPreferenceIamData(Set<String> oldMessageIds, Set<String> oldClickedClickIds) {\n+        // IAMs without redisplay on with pile up and we need to clean these for dismissing, impressions, and clicks\n+        if (oldMessageIds != null && oldMessageIds.size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM1Mzc2NQ=="}, "originalCommit": {"oid": "3a552dd564f1b40f5cbb6b085181fc265527c961"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2239, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}