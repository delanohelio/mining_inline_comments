{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NDE1MDM1", "number": 994, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMDowNlrOD0537g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMDowNlrOD0537g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODAwNzUwOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/unittest/src/test/java/com/onesignal/ShadowOSUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMDowNlrOGKE9yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxOTozOVrOGKHBrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMDI5Ng==", "bodyText": "This looks good for now, as getDeviceType gets more complex with more platforms we will probably want to not mock this method. But that can be done in the task where we add the new platform.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/994#discussion_r413220296", "createdAt": "2020-04-22T18:30:06Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/unittest/src/test/java/com/onesignal/ShadowOSUtils.java", "diffHunk": "@@ -1,23 +1,63 @@\n package com.onesignal;\n \n+import android.content.Context;\n+\n import org.robolectric.annotation.Implements;\n \n+import java.util.HashSet;\n+\n @Implements(OSUtils.class)\n public class ShadowOSUtils {\n-   static int deviceType = 1;\n-   public static String carrierName = \"test1\";\n \n-   public static int subscribableStatus = 1;\n+   private static String FIRE_OS_CLASS = \"com.amazon.device.messaging.ADM\";\n+\n+   static int deviceType;\n+   public static String carrierName;\n+   public static int subscribableStatus;\n+\n+   /**\n+    * Used to mock the existence of FireOS ADM class for Amazon devices\n+    * TODO: This could apply to other classes that might not be available in our UnitTests but\n+    *  we want to mock in a way that makes sense and tests our SDK the closest to production functionality\n+    */\n+   private static HashSet<String> availableClasses;\n+\n+   public static void mockAmazonDevice() {\n+      ShadowOSUtils.addClass(ShadowOSUtils.FIRE_OS_CLASS);\n+   }\n+\n+   private static void addClass(String className) {\n+      availableClasses.add(className);\n+   }\n+\n+   /**\n+    * Reset all static values (should be called before each test)\n+    */\n+   public static void resetStatics() {\n+      deviceType = 0;\n+      carrierName = \"test1\";\n+      subscribableStatus = 1;\n+\n+      availableClasses = new HashSet<>();\n+   }\n \n    public int getDeviceType() {\n+      // Class only available on the FireOS, if this class exists we want to mock Amazon deviceType", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315536f354eb0cd5e161df806c956ff5dbdb78b1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1NDA2MQ==", "bodyText": "Yeah we would need a better way to mock a class existing within our unit tests and that way when the REAL getDeviceType method is called it just uses that functionality rather then my HashSet", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/994#discussion_r413254061", "createdAt": "2020-04-22T19:19:39Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/onesignal/ShadowOSUtils.java", "diffHunk": "@@ -1,23 +1,63 @@\n package com.onesignal;\n \n+import android.content.Context;\n+\n import org.robolectric.annotation.Implements;\n \n+import java.util.HashSet;\n+\n @Implements(OSUtils.class)\n public class ShadowOSUtils {\n-   static int deviceType = 1;\n-   public static String carrierName = \"test1\";\n \n-   public static int subscribableStatus = 1;\n+   private static String FIRE_OS_CLASS = \"com.amazon.device.messaging.ADM\";\n+\n+   static int deviceType;\n+   public static String carrierName;\n+   public static int subscribableStatus;\n+\n+   /**\n+    * Used to mock the existence of FireOS ADM class for Amazon devices\n+    * TODO: This could apply to other classes that might not be available in our UnitTests but\n+    *  we want to mock in a way that makes sense and tests our SDK the closest to production functionality\n+    */\n+   private static HashSet<String> availableClasses;\n+\n+   public static void mockAmazonDevice() {\n+      ShadowOSUtils.addClass(ShadowOSUtils.FIRE_OS_CLASS);\n+   }\n+\n+   private static void addClass(String className) {\n+      availableClasses.add(className);\n+   }\n+\n+   /**\n+    * Reset all static values (should be called before each test)\n+    */\n+   public static void resetStatics() {\n+      deviceType = 0;\n+      carrierName = \"test1\";\n+      subscribableStatus = 1;\n+\n+      availableClasses = new HashSet<>();\n+   }\n \n    public int getDeviceType() {\n+      // Class only available on the FireOS, if this class exists we want to mock Amazon deviceType", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMDI5Ng=="}, "originalCommit": {"oid": "315536f354eb0cd5e161df806c956ff5dbdb78b1"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2230, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}