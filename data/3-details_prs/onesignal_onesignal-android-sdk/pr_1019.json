{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODQyNTEz", "number": 1019, "title": "Fixes rare IllegalThreadStateException from Thread.start()", "bodyText": "The root issue is that Thread.start() could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the determining factor if the\nthread had started or not.\nWhen calling Thread.start() there is no guarantee that the thread\nhas started after returning or that is may have already completed.\nTo overcome the following 2 changes were made\n\nOverride HandlerThread's onLooperPrepared\n\nMoving our getLooper() call here guarantees it will never be null\nThen this means we can create a new Handler everytime successfully\n\n\nAdded a boolean to make sure we only call start() once\n\nthreadStartCalled is set to true after start() is called.\nThis is needed as onLooperPrepared may not fire by the time some\nother part of the OneSignal SDK calls scheduleFlushToDiskJob\nagain.\n\n\n\n\n\nRelates to PR #993\nFixes #917\n\n\nThis change is\u2002", "createdAt": "2020-05-15T21:53:53Z", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019", "merged": true, "mergeCommit": {"oid": "e569faabbffe6ea722b7ddece7ed3ce523472264"}, "closed": true, "closedAt": "2020-05-20T20:17:11Z", "author": {"login": "jkasten2"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchpUzmgBqjMzNDI3NTI4MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcij2ThAH2gAyNDE4ODQyNTEzOjcyYjcxNTA4Yjk5ZWRkZGZhZjM5NDhhZjIxYTdiM2RhNzBiODE1ZmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab70aeb1fb80e6e24d47c6ad24f7b27a4e9b6bad", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/ab70aeb1fb80e6e24d47c6ad24f7b27a4e9b6bad", "committedDate": "2020-05-15T21:52:20Z", "message": "Fixes rare IllegalThreadStateException start()\n\n* The root issue is that Thread.start() could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1.Override `HandlerThread`'s `onLooperPrepared`\n    - Moving our `getLooper()` call here guarantees it will never be `null`\n    - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n    - `threadStartCalled` is set to `true` after `start()` is called.\n    - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again."}, "afterCommit": {"oid": "0668bd21ee15e7934bcb5c8065437c1da12631ce", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/0668bd21ee15e7934bcb5c8065437c1da12631ce", "committedDate": "2020-05-15T21:54:16Z", "message": "* The root issue is that Thread.start() could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1. Override `HandlerThread`'s `onLooperPrepared`\n     - Moving our `getLooper()` call here guarantees it will never be `null`\n     - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n     - `threadStartCalled` is set to `true` after `start()` is called.\n     - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "committedDate": "2020-05-15T21:55:34Z", "message": "Fixes rare `IllegalThreadStateException` `start()`\n\n* The root issue is that `Thread.start()` could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1. Override `HandlerThread`'s `onLooperPrepared`\n     - Moving our `getLooper()` call here guarantees it will never be `null`\n     - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n     - `threadStartCalled` is set to `true` after `start()` is called.\n     - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0668bd21ee15e7934bcb5c8065437c1da12631ce", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/0668bd21ee15e7934bcb5c8065437c1da12631ce", "committedDate": "2020-05-15T21:54:16Z", "message": "* The root issue is that Thread.start() could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1. Override `HandlerThread`'s `onLooperPrepared`\n     - Moving our `getLooper()` call here guarantees it will never be `null`\n     - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n     - `threadStartCalled` is set to `true` after `start()` is called.\n     - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again."}, "afterCommit": {"oid": "286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/286cc641db7ee7eeed1bd9851516d1253f3dc5f5", "committedDate": "2020-05-15T21:55:34Z", "message": "Fixes rare `IllegalThreadStateException` `start()`\n\n* The root issue is that `Thread.start()` could be called a 2nd time if\nthere was a problem getting a Handler after starting the thread.\nGetting a Handler instance was used as the deturming factor if the\nthread had started or not.\n* When calling `Thread.start()` there is no guarantee that the thread\nhas started after finishing or that is may have alrady completed.\n* To overcome the following 2 changes were made\n  1. Override `HandlerThread`'s `onLooperPrepared`\n     - Moving our `getLooper()` call here guarantees it will never be `null`\n     - Then this means we can create a new `Handler` everytime successfully\n  2. Added a boolean to make sure we only call `start()` once\n     - `threadStartCalled` is set to `true` after `start()` is called.\n     - This is needed as `onLooperPrepared` may not fire by the time some\n       other part of the OneSignal SDK calls `scheduleFlushToDiskJob`\n       again."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba8308d796f39cefb923d5d1282a93adb43c076", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/0ba8308d796f39cefb923d5d1282a93adb43c076", "committedDate": "2020-05-15T22:01:00Z", "message": "Clean up startThread\n\n* Now that we have fixed the root cuase we can remove all the\nexpection handling from startThread"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDEwMjIz", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019#pullrequestreview-413010223", "createdAt": "2020-05-15T23:00:11Z", "commit": {"oid": "0ba8308d796f39cefb923d5d1282a93adb43c076"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzowMDoxMlrOGWV8Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQyMzowMDoxMlrOGWV8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjA4MTI5NA==", "bodyText": "do you still need this call, cant you depend only on onLooperPrepared?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019#discussion_r426081294", "createdAt": "2020-05-15T23:00:12Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignalPrefs.java", "diffHunk": "@@ -132,113 +132,52 @@\n             super(name);\n         }\n \n+        @Override\n+        protected void onLooperPrepared() {\n+            super.onLooperPrepared();\n+\n+            // Getting handler here as onLooperPrepared guarantees getLooper() will not return null\n+            mHandler = new Handler(getLooper());\n+            scheduleFlushToDiskJob();\n+        }\n+\n         private synchronized void startDelayedWrite() {\n             // A Context is required to write,\n             //   if not available now later OneSignal.setContext will call this again.\n             if (OneSignal.appContext == null)\n                 return;\n \n-            if (mHandler == null) {\n-                startThread();\n-                mHandler = new Handler(getLooper());\n-            }\n+            startThread();\n+            scheduleFlushToDiskJob();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ba8308d796f39cefb923d5d1282a93adb43c076"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNjYzNDc3", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1019#pullrequestreview-413663477", "createdAt": "2020-05-18T14:44:28Z", "commit": {"oid": "0ba8308d796f39cefb923d5d1282a93adb43c076"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72b71508b99edddfaf3948af21a7b3da70b815ff", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/72b71508b99edddfaf3948af21a7b3da70b815ff", "committedDate": "2020-05-18T18:05:30Z", "message": "Comments and readability clean up"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3567, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}