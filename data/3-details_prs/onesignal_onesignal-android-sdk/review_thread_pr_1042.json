{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2Nzk4NTA4", "number": 1042, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyNzozNlrOERTtgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyNzozNlrOERTtgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg0MTk0OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsV1Repository.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyNzozNlrOG18pBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo0MzowMlrOG7yiNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMTI1NA==", "bodyText": "Might be better to use just object so there isn't a companion object under the hood.\nhttps://stackoverflow.com/a/50520935\n@Jeasmine Thoughts on this?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1042#discussion_r459221254", "createdAt": "2020-07-23T05:27:36Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsV1Repository.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.onesignal.outcomes\n+\n+import com.onesignal.OSLogger\n+import com.onesignal.OneSignalApiResponseHandler\n+import com.onesignal.OutcomeEvent\n+import com.onesignal.influence.model.OSInfluenceType\n+import com.onesignal.outcomes.domain.OutcomeEventsService\n+import com.onesignal.outcomes.model.OSOutcomeEventParams\n+import org.json.JSONException\n+\n+internal class OSOutcomeEventsV1Repository(logger: OSLogger,\n+                                           outcomeEventsCache: OSOutcomeEventsCache,\n+                                           outcomeEventsService: OutcomeEventsService) : OSOutcomeEventsRepository(logger, outcomeEventsCache, outcomeEventsService) {\n+    override fun requestMeasureOutcomeEvent(appId: String, deviceType: Int, eventParams: OSOutcomeEventParams, responseHandler: OneSignalApiResponseHandler) {\n+        val event = OutcomeEvent.fromOutcomeEventParamsV2toOutcomeEventV1(eventParams)\n+        when (event.session) {\n+            OSInfluenceType.DIRECT -> requestMeasureDirectOutcomeEvent(appId, deviceType, event, responseHandler)\n+            OSInfluenceType.INDIRECT -> requestMeasureIndirectOutcomeEvent(appId, deviceType, event, responseHandler)\n+            OSInfluenceType.UNATTRIBUTED -> requestMeasureUnattributedOutcomeEvent(appId, deviceType, event, responseHandler)\n+            else -> {\n+            }\n+        }\n+    }\n+\n+    private fun requestMeasureDirectOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .put(DIRECT, true)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating direct outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    private fun requestMeasureIndirectOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .put(DIRECT, false)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating indirect outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    private fun requestMeasureUnattributedOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating unattributed outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    companion object {\n+        private const val DIRECT = \"direct\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c923b8f665dc00b6d9a47ce2786bdf8f3aa5985"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NTc5OA==", "bodyText": "Agree, still need to fix the companion for DB, but I need to rebase first due to some changes on that classes, I need them in order to don't do too much re-work", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1042#discussion_r461175798", "createdAt": "2020-07-27T21:17:57Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsV1Repository.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.onesignal.outcomes\n+\n+import com.onesignal.OSLogger\n+import com.onesignal.OneSignalApiResponseHandler\n+import com.onesignal.OutcomeEvent\n+import com.onesignal.influence.model.OSInfluenceType\n+import com.onesignal.outcomes.domain.OutcomeEventsService\n+import com.onesignal.outcomes.model.OSOutcomeEventParams\n+import org.json.JSONException\n+\n+internal class OSOutcomeEventsV1Repository(logger: OSLogger,\n+                                           outcomeEventsCache: OSOutcomeEventsCache,\n+                                           outcomeEventsService: OutcomeEventsService) : OSOutcomeEventsRepository(logger, outcomeEventsCache, outcomeEventsService) {\n+    override fun requestMeasureOutcomeEvent(appId: String, deviceType: Int, eventParams: OSOutcomeEventParams, responseHandler: OneSignalApiResponseHandler) {\n+        val event = OutcomeEvent.fromOutcomeEventParamsV2toOutcomeEventV1(eventParams)\n+        when (event.session) {\n+            OSInfluenceType.DIRECT -> requestMeasureDirectOutcomeEvent(appId, deviceType, event, responseHandler)\n+            OSInfluenceType.INDIRECT -> requestMeasureIndirectOutcomeEvent(appId, deviceType, event, responseHandler)\n+            OSInfluenceType.UNATTRIBUTED -> requestMeasureUnattributedOutcomeEvent(appId, deviceType, event, responseHandler)\n+            else -> {\n+            }\n+        }\n+    }\n+\n+    private fun requestMeasureDirectOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .put(DIRECT, true)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating direct outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    private fun requestMeasureIndirectOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .put(DIRECT, false)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating indirect outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    private fun requestMeasureUnattributedOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating unattributed outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    companion object {\n+        private const val DIRECT = \"direct\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMTI1NA=="}, "originalCommit": {"oid": "5c923b8f665dc00b6d9a47ce2786bdf8f3aa5985"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NzEyNg==", "bodyText": "\ud83d\udc4d I see this is now cleaned up\nhttps://github.com/OneSignal/OneSignal-Android-SDK/pull/1042/files#diff-ebb1a5f7f3ff02ae231e90aa99ed7818R3", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1042#discussion_r465347126", "createdAt": "2020-08-04T21:43:02Z", "author": {"login": "jkasten2"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/outcomes/OSOutcomeEventsV1Repository.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package com.onesignal.outcomes\n+\n+import com.onesignal.OSLogger\n+import com.onesignal.OneSignalApiResponseHandler\n+import com.onesignal.OutcomeEvent\n+import com.onesignal.influence.model.OSInfluenceType\n+import com.onesignal.outcomes.domain.OutcomeEventsService\n+import com.onesignal.outcomes.model.OSOutcomeEventParams\n+import org.json.JSONException\n+\n+internal class OSOutcomeEventsV1Repository(logger: OSLogger,\n+                                           outcomeEventsCache: OSOutcomeEventsCache,\n+                                           outcomeEventsService: OutcomeEventsService) : OSOutcomeEventsRepository(logger, outcomeEventsCache, outcomeEventsService) {\n+    override fun requestMeasureOutcomeEvent(appId: String, deviceType: Int, eventParams: OSOutcomeEventParams, responseHandler: OneSignalApiResponseHandler) {\n+        val event = OutcomeEvent.fromOutcomeEventParamsV2toOutcomeEventV1(eventParams)\n+        when (event.session) {\n+            OSInfluenceType.DIRECT -> requestMeasureDirectOutcomeEvent(appId, deviceType, event, responseHandler)\n+            OSInfluenceType.INDIRECT -> requestMeasureIndirectOutcomeEvent(appId, deviceType, event, responseHandler)\n+            OSInfluenceType.UNATTRIBUTED -> requestMeasureUnattributedOutcomeEvent(appId, deviceType, event, responseHandler)\n+            else -> {\n+            }\n+        }\n+    }\n+\n+    private fun requestMeasureDirectOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .put(DIRECT, true)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating direct outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    private fun requestMeasureIndirectOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .put(DIRECT, false)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating indirect outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    private fun requestMeasureUnattributedOutcomeEvent(appId: String, deviceType: Int, event: OutcomeEvent, responseHandler: OneSignalApiResponseHandler) {\n+        try {\n+            event.toJSONObjectForMeasure()\n+                    .put(APP_ID, appId)\n+                    .put(DEVICE_TYPE, deviceType)\n+                    .also { jsonObject ->\n+                        outcomeEventsService.sendOutcomeEvent(jsonObject, responseHandler)\n+                    }\n+        } catch (e: JSONException) {\n+            logger.error(\"Generating unattributed outcome:JSON Failed.\", e)\n+        }\n+    }\n+\n+    companion object {\n+        private const val DIRECT = \"direct\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMTI1NA=="}, "originalCommit": {"oid": "5c923b8f665dc00b6d9a47ce2786bdf8f3aa5985"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2269, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}