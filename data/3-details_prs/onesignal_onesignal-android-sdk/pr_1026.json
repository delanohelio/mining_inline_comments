{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTA3Mzc3", "number": 1026, "title": "HMS device_type detection and HMS token registration ", "bodyText": "Added Huawei as device_type 13\nAdded detecting if HMS exists and only use it if\nGoogle play services is not on the device and is not enabled.\n\n\n\nThis change is\u2002", "createdAt": "2020-05-21T02:04:01Z", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026", "merged": true, "mergeCommit": {"oid": "3e7af814880067af946aa82bba432d3572e6d03c"}, "closed": true, "closedAt": "2020-06-10T01:54:51Z", "author": {"login": "jkasten2"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclmGkjgBqjMzODEwMDMzMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpt8a5ABqjM0MjcyNDA4OTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4caa96016765d72c2cb6b3c3296faaa7cf3c5459", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/4caa96016765d72c2cb6b3c3296faaa7cf3c5459", "committedDate": "2020-05-28T04:13:08Z", "message": "Added getDeviceType tests"}, "afterCommit": {"oid": "1c6b45472b1d80cdd2dddc5e51f1f67eb193b259", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/1c6b45472b1d80cdd2dddc5e51f1f67eb193b259", "committedDate": "2020-05-28T04:24:33Z", "message": "Added getDeviceType tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c6b45472b1d80cdd2dddc5e51f1f67eb193b259", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/1c6b45472b1d80cdd2dddc5e51f1f67eb193b259", "committedDate": "2020-05-28T04:24:33Z", "message": "Added getDeviceType tests"}, "afterCommit": {"oid": "35b7ededd88f3b4bc6fb7ce6d9b9f81d8e1c408e", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/35b7ededd88f3b4bc6fb7ce6d9b9f81d8e1c408e", "committedDate": "2020-05-28T04:37:27Z", "message": "Added getDeviceType tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "caafa800c8a95e225ebfce9730c6611500462842", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/caafa800c8a95e225ebfce9730c6611500462842", "committedDate": "2020-05-28T09:23:52Z", "message": "Added tests for PushRegistratorHMS"}, "afterCommit": {"oid": "88a9573b67a007df0850df0102ec94f723a07059", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/88a9573b67a007df0850df0102ec94f723a07059", "committedDate": "2020-05-28T09:29:39Z", "message": "Added tests for PushRegistratorHMS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88a9573b67a007df0850df0102ec94f723a07059", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/88a9573b67a007df0850df0102ec94f723a07059", "committedDate": "2020-05-28T09:29:39Z", "message": "Added tests for PushRegistratorHMS"}, "afterCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d46eb631a9017436360895e51e2a42ce91cc2d2a", "committedDate": "2020-05-28T09:31:17Z", "message": "Added tests for PushRegistratorHMS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTEzNDQz", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#pullrequestreview-422113443", "createdAt": "2020-06-01T19:19:01Z", "commit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxOTowMlrOGdW6Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozNTozNlrOGdXa_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNzIzOA==", "bodyText": "Should we include a range here or keep it specific for now?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433437238", "createdAt": "2020-06-01T19:19:02Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/build.gradle", "diffHunk": "@@ -56,6 +56,10 @@ dependencies {\n     // firebase-messaging:17.6.0 is the max version since we still have code looking for FirebaseInstanceIdService\n     api 'com.google.firebase:firebase-messaging:[10.2.1, 17.3.99]'\n \n+    // Huawei PushKit\n+    // KEEP as \"compileOnly\", so OneSignal isn't a direct dependency in the POM file.\n+    compileOnly 'com.huawei.hms:push:4.0.2.300'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNzYxOQ==", "bodyText": "Convert ShowUpdateGPSDialog to lowercase first letter?\nshowUpdateGPSDialog", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433437619", "createdAt": "2020-06-01T19:19:47Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java", "diffHunk": "@@ -39,7 +28,7 @@ private static boolean isGooglePlayStoreInstalled() {\n    }\n \n    static void ShowUpdateGPSDialog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODQyOA==", "bodyText": "Maybe we can refactor something along these lines across the codebase?\nUserState deviceType = new OSUtils().getDeviceType();\nif (!deviceType.isAndroidDevice() || !isGooglePlayStoreInstalled())\n\nThis would make the getDeviceType() return UserState instead of int though\nSeems a bit out of scope for this but thought I would bring it up\nSo maybe...?\nint deviceType = new OSUtils().getDeviceType();\nif (deviceType != UserState.DEVICE_TYPE_ANDROID || !isGooglePlayStoreInstalled())", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433438428", "createdAt": "2020-06-01T19:21:26Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java", "diffHunk": "@@ -39,7 +28,7 @@ private static boolean isGooglePlayStoreInstalled() {\n    }\n \n    static void ShowUpdateGPSDialog() {\n-      if (isGMSInstalledAndEnabled() || !isGooglePlayStoreInstalled())\n+      if (new OSUtils().getDeviceType() != UserState.DEVICE_TYPE_ANDROID || !isGooglePlayStoreInstalled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NDU3MA==", "bodyText": "Just an overall comment for these UnitTests, maybe we should offer some steps explaining what each line truly means or create more specific test names.\nThis one is a good example and offers clarity\nsupportsFCMAndADM_PreferADM\nbut even could be testDevice_withFCMAndADMSupport_prefersADM\nhowever, this one\nsupportedHMS_isHuawei\ncould be\ntestDevice_withHMSSupport_prefersHMS\nI'm probably being to critical though since it only took me a few seconds to figure out the pattern here. I guess this could stay the same since I recognized the consistent pattern, but wanted to bring it up to see what you thought.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433444570", "createdAt": "2020-06-01T19:33:19Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/DeviceTypeTestsRunner.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.test.onesignal;\r\n+\r\n+import com.onesignal.OneSignal;\r\n+import com.onesignal.ShadowOSUtils;\r\n+import com.onesignal.StaticResetHelper;\r\n+\r\n+import org.junit.Before;\r\n+import org.junit.BeforeClass;\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+import org.robolectric.RobolectricTestRunner;\r\n+import org.robolectric.RuntimeEnvironment;\r\n+import org.robolectric.annotation.Config;\r\n+import org.robolectric.shadows.ShadowLog;\r\n+\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_ANDROID;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_HUAWEI;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.DEVICE_TYPE_FIREOS;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.getDeviceType;\r\n+\r\n+import static org.junit.Assert.assertEquals;\r\n+\r\n+@Config(\r\n+    packageName = \"com.onesignal.example\",\r\n+    shadows = {\r\n+        ShadowOSUtils.class\r\n+    },\r\n+    sdk = 26\r\n+)\r\n+@RunWith(RobolectricTestRunner.class)\r\n+public class DeviceTypeTestsRunner {\r\n+\r\n+    @BeforeClass // Runs only once, before any tests\r\n+    public static void setUpClass() throws Exception {\r\n+        ShadowLog.stream = System.out;\r\n+        TestHelpers.beforeTestSuite();\r\n+        StaticResetHelper.saveStaticValues();\r\n+    }\r\n+\r\n+    @Before\r\n+    public void beforeEachTest() throws Exception {\r\n+        TestHelpers.beforeTestInitAndCleanup();\r\n+        OneSignal.setAppContext(RuntimeEnvironment.application);\r\n+    }\r\n+\r\n+    @Test\r\n+    public void noAvailablePushChannels_defaultsToAndroid() {\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void onlyADM_isFireOS() {\r\n+        ShadowOSUtils.supportsADM = true;\r\n+        assertEquals(DEVICE_TYPE_FIREOS, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void onlyFCM_isAndroid() {\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void FCMAndGMSEnabled_isAndroid() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void onlyGCM_isAndroid() {\r\n+        ShadowOSUtils.hasGCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void GCMAndGMSEnabled_isAndroid() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasGCMLibrary = true;\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void supportedHMS_isHuawei() {\r\n+        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasHMSAvailability = true;\r\n+        ShadowOSUtils.hasHMSPushKitLibrary = true;\r\n+\r\n+        assertEquals(DEVICE_TYPE_HUAWEI, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void supportsFCMAndHMS_PreferAndroid() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+\r\n+        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasHMSAvailability = true;\r\n+        ShadowOSUtils.hasHMSPushKitLibrary = true;\r\n+\r\n+        // Prefer Google Services over Huawei if both available\r\n+        assertEquals(DEVICE_TYPE_ANDROID, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void hasFCMButNoGMSOnDeviceAndHasHMS_isHuawei() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = false;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+\r\n+        ShadowOSUtils.isHMSCoreInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasHMSAvailability = true;\r\n+        ShadowOSUtils.hasHMSPushKitLibrary = true;\r\n+\r\n+        // Use HMS since device does not have the \"Google Play services\" app or it is disabled\r\n+        assertEquals(DEVICE_TYPE_HUAWEI, getDeviceType());\r\n+    }\r\n+\r\n+    @Test\r\n+    public void supportsFCMAndADM_PreferADM() {\r\n+        ShadowOSUtils.isGMSInstalledAndEnabled = true;\r\n+        ShadowOSUtils.hasFCMLibrary = true;\r\n+\r\n+        ShadowOSUtils.supportsADM = true;\r\n+\r\n+        // Prefer ADM as if available it will always be native to the device\r\n+        assertEquals(DEVICE_TYPE_FIREOS, getDeviceType());\r\n+    }\r\n+}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NTYyOQ==", "bodyText": "Should we throw these Assert helpers inside another class like JsonAsserts and RestClientAsserts\nmaybe DeviceTypeAsserts?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433445629", "createdAt": "2020-06-01T19:35:36Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/unittest/src/test/java/com/test/onesignal/PushRegistratorHMSIntegrationTestsRunner.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.test.onesignal;\r\n+\r\n+import android.annotation.SuppressLint;\r\n+import android.app.Activity;\r\n+\r\n+import com.huawei.hms.common.ApiException;\r\n+import com.huawei.hms.support.api.client.Status;\r\n+import com.onesignal.InAppMessagingHelpers;\r\n+import com.onesignal.OneSignal;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.PUSH_STATUS_HMS_TOKEN_TIMEOUT;\r\n+import static com.onesignal.OneSignalPackagePrivateHelper.UserState.PUSH_STATUS_HMS_API_EXCEPTION_OTHER;\r\n+import com.onesignal.ShadowCustomTabsClient;\r\n+import com.onesignal.ShadowCustomTabsSession;\r\n+import com.onesignal.ShadowHmsInstanceId;\r\n+import com.onesignal.ShadowOSUtils;\r\n+import com.onesignal.ShadowOneSignalRestClient;\r\n+import com.onesignal.ShadowPushRegistratorHMS;\r\n+import com.onesignal.StaticResetHelper;\r\n+import com.onesignal.example.BlankActivity;\r\n+\r\n+import org.json.JSONException;\r\n+import org.junit.Before;\r\n+import org.junit.BeforeClass;\r\n+import org.junit.Test;\r\n+import org.junit.runner.RunWith;\r\n+import org.robolectric.Robolectric;\r\n+import org.robolectric.RobolectricTestRunner;\r\n+import org.robolectric.android.controller.ActivityController;\r\n+import org.robolectric.annotation.Config;\r\n+import org.robolectric.shadows.ShadowLog;\r\n+\r\n+import static com.test.onesignal.RestClientAsserts.assertHuaweiPlayerCreateAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertPlayerCreateNotSubscribedAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertPlayerCreateSubscribedAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertPlayerCreateWithNotificationTypesAtIndex;\r\n+import static com.test.onesignal.RestClientAsserts.assertRestCalls;\r\n+import static com.test.onesignal.TestHelpers.threadAndTaskWait;\r\n+\r\n+@Config(\r\n+    packageName = \"com.onesignal.example\",\r\n+    shadows = {\r\n+        ShadowOSUtils.class,\r\n+        ShadowOneSignalRestClient.class,\r\n+        ShadowCustomTabsClient.class,\r\n+        ShadowCustomTabsSession.class,\r\n+        ShadowHmsInstanceId.class,\r\n+        ShadowPushRegistratorHMS.class\r\n+    },\r\n+    sdk = 26\r\n+)\r\n+@RunWith(RobolectricTestRunner.class)\r\n+public class PushRegistratorHMSIntegrationTestsRunner {\r\n+\r\n+    @SuppressLint(\"StaticFieldLeak\")\r\n+    private static Activity blankActivity;\r\n+    private static ActivityController<BlankActivity> blankActivityController;\r\n+\r\n+    @BeforeClass // Runs only once, before any tests\r\n+    public static void setUpClass() throws Exception {\r\n+        ShadowLog.stream = System.out;\r\n+        TestHelpers.beforeTestSuite();\r\n+        StaticResetHelper.saveStaticValues();\r\n+    }\r\n+\r\n+    @Before\r\n+    public void beforeEachTest() throws Exception {\r\n+        TestHelpers.beforeTestInitAndCleanup();\r\n+\r\n+        ShadowOSUtils.supportsHMS(true);\r\n+\r\n+        blankActivityController = Robolectric.buildActivity(BlankActivity.class).create();\r\n+        blankActivity = blankActivityController.get();\r\n+    }\r\n+\r\n+    private static void assertHuaweiSubscribe() throws JSONException {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjY5MjU1", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#pullrequestreview-422269255", "createdAt": "2020-06-02T00:39:39Z", "commit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDozOTo0MFrOGdebLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMDo0MToyMlrOGdecuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDM2Ng==", "bodyText": "do you need to sleep the thread? cant this be runnable with post delay?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433560366", "createdAt": "2020-06-02T00:39:40Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/PushRegistratorHMS.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.onesignal;\r\n+\r\n+import android.content.Context;\r\n+import android.support.annotation.NonNull;\r\n+import android.support.annotation.Nullable;\r\n+import android.text.TextUtils;\r\n+\r\n+import com.huawei.agconnect.config.AGConnectServicesConfig;\r\n+import com.huawei.hms.aaid.HmsInstanceId;\r\n+import com.huawei.hms.common.ApiException;\r\n+import com.huawei.hms.push.HmsMessaging;\r\n+import com.huawei.hms.support.api.entity.core.CommonCode;\r\n+\r\n+import static com.onesignal.OneSignal.LOG_LEVEL;\r\n+\r\n+class PushRegistratorHMS implements PushRegistrator {\r\n+\r\n+    static final String HMS_CLIENT_APP_ID = \"client/app_id\";\r\n+\r\n+    private static final int NEW_TOKEN_TIMEOUT_MS = 30_000;\r\n+\r\n+    private static boolean callbackSuccessful;\r\n+    private @Nullable static RegisteredHandler registeredHandler;\r\n+\r\n+    static void fireCallback(String token) {\r\n+        if (registeredHandler == null)\r\n+            return;\r\n+        callbackSuccessful = true;\r\n+        registeredHandler.complete(token, UserState.PUSH_STATUS_SUBSCRIBED);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void registerForPush(@NonNull final Context context, final String senderId, @NonNull final RegisteredHandler callback) {\r\n+        registeredHandler = callback;\r\n+        new Thread(new Runnable() {\r\n+            @Override\r\n+            public void run() {\r\n+                try {\r\n+                    getHMSTokenTask(context, callback);\r\n+                } catch (ApiException e) {\r\n+                    OneSignal.Log(LOG_LEVEL.ERROR, \"HMS ApiException getting Huawei push token!\", e);\r\n+\r\n+                    int pushStatus;\r\n+                    if (e.getStatusCode() == CommonCode.ErrorCode.ARGUMENTS_INVALID)\r\n+                        pushStatus = UserState.PUSH_STATUS_HMS_ARGUMENTS_INVALID;\r\n+                    else\r\n+                        pushStatus = UserState.PUSH_STATUS_HMS_API_EXCEPTION_OTHER;\r\n+\r\n+                    callback.complete(null, pushStatus);\r\n+                }\r\n+            }\r\n+        }, \"OS_HMS_GET_TOKEN\").start();\r\n+    }\r\n+\r\n+    private synchronized void getHMSTokenTask(@NonNull Context context, @NonNull RegisteredHandler callback) throws ApiException {\r\n+        // TODO: See if we can handle an exact message like this\r\n+        // 2020-04-14 23:06:36.164 1565-1743/com.onesignal.example E/HMSSDK_Util: In getMetaDataAppId, Failed to read meta data for the AppID.\r\n+\r\n+        String appId = AGConnectServicesConfig.fromContext(context).getString(HMS_CLIENT_APP_ID);\r\n+        HmsInstanceId hmsInstanceId = HmsInstanceId.getInstance(context);\r\n+\r\n+        String pushToken = hmsInstanceId.getToken(appId, HmsMessaging.DEFAULT_TOKEN_SCOPE);\r\n+\r\n+        if (!TextUtils.isEmpty(pushToken)) {\r\n+            OneSignal.Log(LOG_LEVEL.INFO, \"Device registered for HMS, push token = \" + pushToken);\r\n+            callback.complete(pushToken, UserState.PUSH_STATUS_SUBSCRIBED);\r\n+        }\r\n+        else\r\n+            waitForOnNewPushTokenEvent(callback);\r\n+    }\r\n+\r\n+    private static void doTimeOutWait() {\r\n+        try {\r\n+            Thread.sleep(NEW_TOKEN_TIMEOUT_MS);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDc2Mw==", "bodyText": "Uhm maybe have on OSUtils a method\nboolean isAndroidDevice(){\nreturn getDeviceType() == UserState.DEVICE_TYPE_ANDROID;\n}\nif that make sense", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r433560763", "createdAt": "2020-06-02T00:41:22Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/GooglePlayServicesUpgradePrompt.java", "diffHunk": "@@ -39,7 +28,7 @@ private static boolean isGooglePlayStoreInstalled() {\n    }\n \n    static void ShowUpdateGPSDialog() {\n-      if (isGMSInstalledAndEnabled() || !isGooglePlayStoreInstalled())\n+      if (new OSUtils().getDeviceType() != UserState.DEVICE_TYPE_ANDROID || !isGooglePlayStoreInstalled())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzODQyOA=="}, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d46eb631a9017436360895e51e2a42ce91cc2d2a", "committedDate": "2020-05-28T09:31:17Z", "message": "Added tests for PushRegistratorHMS"}, "afterCommit": {"oid": "fdc57d57527312dcd0d925da8d9c1f7866f2cb70", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/fdc57d57527312dcd0d925da8d9c1f7866f2cb70", "committedDate": "2020-06-05T04:56:35Z", "message": "Added tests for PushRegistratorHMS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2c93bb087e96e29f5e973770eb817b5b4be88b2", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d2c93bb087e96e29f5e973770eb817b5b4be88b2", "committedDate": "2020-06-05T05:14:54Z", "message": "HMS device_type detection and value\n\n* Added Huawei as device_type 13\n* Added detecting if HMS exists and only use it if\nGoogle play servcies is not on the device and is not enabled."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d4a62e7cecd34bc0b2951126b48bf8c5d0e6258", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/6d4a62e7cecd34bc0b2951126b48bf8c5d0e6258", "committedDate": "2020-06-05T05:14:54Z", "message": "Added Huawei Gradle dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3411be396968b29fc738481f46af9ea8e5a2815", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/e3411be396968b29fc738481f46af9ea8e5a2815", "committedDate": "2020-06-05T05:14:54Z", "message": "Added PushRegistratorHMS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d028114c5e6dfb3b3d1fca7c70df28f09d25e055", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/d028114c5e6dfb3b3d1fca7c70df28f09d25e055", "committedDate": "2020-06-05T05:14:54Z", "message": "Added getDeviceType tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d812ace140d1c82ee86b288c37b645ee6278956", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/3d812ace140d1c82ee86b288c37b645ee6278956", "committedDate": "2020-06-05T05:15:40Z", "message": "Added tests for PushRegistratorHMS"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdc57d57527312dcd0d925da8d9c1f7866f2cb70", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/fdc57d57527312dcd0d925da8d9c1f7866f2cb70", "committedDate": "2020-06-05T04:56:35Z", "message": "Added tests for PushRegistratorHMS"}, "afterCommit": {"oid": "3d812ace140d1c82ee86b288c37b645ee6278956", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/3d812ace140d1c82ee86b288c37b645ee6278956", "committedDate": "2020-06-05T05:15:40Z", "message": "Added tests for PushRegistratorHMS"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDMyMTY5", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#pullrequestreview-425432169", "createdAt": "2020-06-05T16:04:07Z", "commit": {"oid": "8ba3957508a568e7b2dba9d1ea6c4631521fbed9"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjowNDowN1rOGf0czA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjoyMTo1NFrOGf1CvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODM4MA==", "bodyText": "You can use the new utils function", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r436018380", "createdAt": "2020-06-05T16:04:07Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -972,10 +972,14 @@ private static PushRegistrator getPushRegistrator() {\n       int deviceType = osUtils.getDeviceType();\n       if (deviceType == UserState.DEVICE_TYPE_FIREOS)\n          mPushRegistrator = new PushRegistratorADM();\n-      else if (OSUtils.hasFCMLibrary())\n-         mPushRegistrator = new PushRegistratorFCM();\n+      else if (new OSUtils().getDeviceType() == UserState.DEVICE_TYPE_ANDROID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba3957508a568e7b2dba9d1ea6c4631521fbed9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxOTIzOQ==", "bodyText": "oh I think the new util function is in the other PR \ud83d\ude22", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r436019239", "createdAt": "2020-06-05T16:05:34Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -972,10 +972,14 @@ private static PushRegistrator getPushRegistrator() {\n       int deviceType = osUtils.getDeviceType();\n       if (deviceType == UserState.DEVICE_TYPE_FIREOS)\n          mPushRegistrator = new PushRegistratorADM();\n-      else if (OSUtils.hasFCMLibrary())\n-         mPushRegistrator = new PushRegistratorFCM();\n+      else if (new OSUtils().getDeviceType() == UserState.DEVICE_TYPE_ANDROID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxODM4MA=="}, "originalCommit": {"oid": "8ba3957508a568e7b2dba9d1ea6c4631521fbed9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAyODA5Mg==", "bodyText": "I was worried if the thread was being shared, but is it all runs in the same thread I suppose there is no harm. The postDelay was to not leave a thread without doing nothing.", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1026#discussion_r436028092", "createdAt": "2020-06-05T16:21:54Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/PushRegistratorHMS.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.onesignal;\r\n+\r\n+import android.content.Context;\r\n+import android.support.annotation.NonNull;\r\n+import android.support.annotation.Nullable;\r\n+import android.text.TextUtils;\r\n+\r\n+import com.huawei.agconnect.config.AGConnectServicesConfig;\r\n+import com.huawei.hms.aaid.HmsInstanceId;\r\n+import com.huawei.hms.common.ApiException;\r\n+import com.huawei.hms.push.HmsMessaging;\r\n+import com.huawei.hms.support.api.entity.core.CommonCode;\r\n+\r\n+import static com.onesignal.OneSignal.LOG_LEVEL;\r\n+\r\n+class PushRegistratorHMS implements PushRegistrator {\r\n+\r\n+    static final String HMS_CLIENT_APP_ID = \"client/app_id\";\r\n+\r\n+    private static final int NEW_TOKEN_TIMEOUT_MS = 30_000;\r\n+\r\n+    private static boolean callbackSuccessful;\r\n+    private @Nullable static RegisteredHandler registeredHandler;\r\n+\r\n+    static void fireCallback(String token) {\r\n+        if (registeredHandler == null)\r\n+            return;\r\n+        callbackSuccessful = true;\r\n+        registeredHandler.complete(token, UserState.PUSH_STATUS_SUBSCRIBED);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void registerForPush(@NonNull final Context context, final String senderId, @NonNull final RegisteredHandler callback) {\r\n+        registeredHandler = callback;\r\n+        new Thread(new Runnable() {\r\n+            @Override\r\n+            public void run() {\r\n+                try {\r\n+                    getHMSTokenTask(context, callback);\r\n+                } catch (ApiException e) {\r\n+                    OneSignal.Log(LOG_LEVEL.ERROR, \"HMS ApiException getting Huawei push token!\", e);\r\n+\r\n+                    int pushStatus;\r\n+                    if (e.getStatusCode() == CommonCode.ErrorCode.ARGUMENTS_INVALID)\r\n+                        pushStatus = UserState.PUSH_STATUS_HMS_ARGUMENTS_INVALID;\r\n+                    else\r\n+                        pushStatus = UserState.PUSH_STATUS_HMS_API_EXCEPTION_OTHER;\r\n+\r\n+                    callback.complete(null, pushStatus);\r\n+                }\r\n+            }\r\n+        }, \"OS_HMS_GET_TOKEN\").start();\r\n+    }\r\n+\r\n+    private synchronized void getHMSTokenTask(@NonNull Context context, @NonNull RegisteredHandler callback) throws ApiException {\r\n+        // TODO: See if we can handle an exact message like this\r\n+        // 2020-04-14 23:06:36.164 1565-1743/com.onesignal.example E/HMSSDK_Util: In getMetaDataAppId, Failed to read meta data for the AppID.\r\n+\r\n+        String appId = AGConnectServicesConfig.fromContext(context).getString(HMS_CLIENT_APP_ID);\r\n+        HmsInstanceId hmsInstanceId = HmsInstanceId.getInstance(context);\r\n+\r\n+        String pushToken = hmsInstanceId.getToken(appId, HmsMessaging.DEFAULT_TOKEN_SCOPE);\r\n+\r\n+        if (!TextUtils.isEmpty(pushToken)) {\r\n+            OneSignal.Log(LOG_LEVEL.INFO, \"Device registered for HMS, push token = \" + pushToken);\r\n+            callback.complete(pushToken, UserState.PUSH_STATUS_SUBSCRIBED);\r\n+        }\r\n+        else\r\n+            waitForOnNewPushTokenEvent(callback);\r\n+    }\r\n+\r\n+    private static void doTimeOutWait() {\r\n+        try {\r\n+            Thread.sleep(NEW_TOKEN_TIMEOUT_MS);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzU2MDM2Ng=="}, "originalCommit": {"oid": "d46eb631a9017436360895e51e2a42ce91cc2d2a"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "committedDate": "2020-06-09T23:48:20Z", "message": "Added is*DeviceType helpers\n\n* Also fix method name casing on showUpdateGPSDialog"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ba3957508a568e7b2dba9d1ea6c4631521fbed9", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/8ba3957508a568e7b2dba9d1ea6c4631521fbed9", "committedDate": "2020-06-05T05:57:03Z", "message": "Added isAndroidDeviceType helper\n\n* Also fix method name casing on showUpdateGPSDialog"}, "afterCommit": {"oid": "5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "author": {"user": {"login": "jkasten2", "name": "Josh Kasten"}}, "url": "https://github.com/OneSignal/OneSignal-Android-SDK/commit/5c2ca10d73f6ae97d9d7d4c02d6177c33098bf9a", "committedDate": "2020-06-09T23:48:20Z", "message": "Added is*DeviceType helpers\n\n* Also fix method name casing on showUpdateGPSDialog"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3573, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}