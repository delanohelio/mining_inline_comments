{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTc2Mzc5", "number": 1014, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNDozNFrOD8PUOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyOTo1M1rOD8Pl2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkyMDg4OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNDozNFrOGVDxKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxNDozNFrOGVDxKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNTAxOA==", "bodyText": "reformat code in here, space between if and (", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424735018", "createdAt": "2020-05-13T21:14:34Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -2001,18 +2084,53 @@ public void run() {\n       });\n    }\n \n-   // Called when receiving FCM/ADM message after it has been displayed.\n-   // Or right when it is received if it is a silent one\n-   //   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n-   static void handleNotificationReceived(JSONArray data, boolean displayed) {\n-      OSNotificationOpenResult openResult = generateOsNotificationOpenResult(data, displayed);\n-      if(trackFirebaseAnalytics != null && getFirebaseAnalyticsEnabled())\n-         trackFirebaseAnalytics.trackReceivedEvent(openResult);\n+   /**\n+    * Called when receiving FCM/ADM message after it has been displayed.\n+    * Or right when it is received if it is a silent one\n+    *   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n+    */\n+   static void handleNotificationReceived(OSNotificationGenerationJob notifJob, boolean displayed) {\n+      int androidNotificationId = notifJob.getAndroidId();\n+\n+      try {\n+         JSONObject jsonObject = new JSONObject(notifJob.jsonPayload.toString());\n+         jsonObject.put(\"notificationId\", androidNotificationId);\n+\n+         OSNotificationOpenResult openResult = generateOsNotificationOpenResult(newJsonArray(jsonObject), displayed);\n+         if(trackFirebaseAnalytics != null && getFirebaseAnalyticsEnabled())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 252}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkzNTk4OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxOTozM1rOGVD62g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxOTozM1rOGVD62g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczNzQ5OA==", "bodyText": "something I already should know, but whyt is the generating job need a context?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424737498", "createdAt": "2020-05-13T21:19:33Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Handler;\n+\n+import com.onesignal.OneSignal.OSNotificationDisplay;\n+\n+import org.json.JSONObject;\n+\n+import java.security.SecureRandom;\n+\n+public class OSNotificationGenerationJob {\n+\n+   Context context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkzOTk1OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyMDo0OFrOGVD9PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyMDo0OFrOGVD9PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczODEwOA==", "bodyText": "maybe we can start having this strings as constants?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424738108", "createdAt": "2020-05-13T21:20:48Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Handler;\n+\n+import com.onesignal.OneSignal.OSNotificationDisplay;\n+\n+import org.json.JSONObject;\n+\n+import java.security.SecureRandom;\n+\n+public class OSNotificationGenerationJob {\n+\n+   Context context;\n+   JSONObject jsonPayload;\n+   boolean isRestoring;\n+   boolean isIamPreview;\n+   OSNotificationDisplay displayOption = OSNotificationDisplay.NOTIFICATION;\n+\n+   Long shownTimeStamp;\n+\n+   CharSequence overriddenBodyFromExtender;\n+   CharSequence overriddenTitleFromExtender;\n+   Uri overriddenSound;\n+   Integer overriddenFlags;\n+   Integer orgFlags;\n+   Uri orgSound;\n+\n+   NotificationExtenderService.OverrideSettings overrideSettings;\n+\n+   OSNotificationGenerationJob(Context context) {\n+      this.context = context;\n+   }\n+\n+   CharSequence getTitle() {\n+      if (overriddenTitleFromExtender != null)\n+         return overriddenTitleFromExtender;\n+      return jsonPayload.optString(\"title\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDk0NDUwOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyMjoyNFrOGVEAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyMjoyNFrOGVEAKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczODg1Ng==", "bodyText": "make sense to change it to 2020?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424738856", "createdAt": "2020-05-13T21:22:24Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDk0ODY2OnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyMzo0OFrOGVECug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzozNDo0MlrOGXBGbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczOTUxNA==", "bodyText": "Without no camelcase", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424739514", "createdAt": "2020-05-13T21:23:48Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Handler;\n+\n+import com.onesignal.OneSignal.OSNotificationDisplay;\n+\n+import org.json.JSONObject;\n+\n+import java.security.SecureRandom;\n+\n+public class OSNotificationGenerationJob {\n+\n+   Context context;\n+   JSONObject jsonPayload;\n+   boolean isRestoring;\n+   boolean isIamPreview;\n+   OSNotificationDisplay displayOption = OSNotificationDisplay.NOTIFICATION;\n+\n+   Long shownTimeStamp;\n+\n+   CharSequence overriddenBodyFromExtender;\n+   CharSequence overriddenTitleFromExtender;\n+   Uri overriddenSound;\n+   Integer overriddenFlags;\n+   Integer orgFlags;\n+   Uri orgSound;\n+\n+   NotificationExtenderService.OverrideSettings overrideSettings;\n+\n+   OSNotificationGenerationJob(Context context) {\n+      this.context = context;\n+   }\n+\n+   CharSequence getTitle() {\n+      if (overriddenTitleFromExtender != null)\n+         return overriddenTitleFromExtender;\n+      return jsonPayload.optString(\"title\", null);\n+   }\n+   \n+   CharSequence getBody() {\n+      if (overriddenBodyFromExtender != null)\n+         return overriddenBodyFromExtender;\n+      return jsonPayload.optString(\"alert\", null);\n+   }\n+   \n+   Integer getAndroidId() {\n+      if (overrideSettings == null)\n+         overrideSettings = new NotificationExtenderService.OverrideSettings();\n+      if (overrideSettings.androidNotificationId == null)\n+         overrideSettings.androidNotificationId = new SecureRandom().nextInt();\n+      \n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   int getAndroidIdWithoutCreate() {\n+      if (overrideSettings == null || overrideSettings.androidNotificationId == null)\n+         return -1;\n+\n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   /**\n+    * If notificationId is -1 then the notification is a silent one\n+    */\n+   boolean isNotificationToDisplay() {\n+      return getAndroidIdWithoutCreate() != -1;\n+   }\n+\n+   String getApiNotificationId() {\n+      return OneSignal.getNotificationIdFromFCMJson(jsonPayload);\n+   }\n+\n+   void setAndroidIdWithOutOverriding(Integer id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MDQ1Mg==", "bodyText": "maybe setAndroidIdOnOverrideSettings?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424740452", "createdAt": "2020-05-13T21:25:38Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Handler;\n+\n+import com.onesignal.OneSignal.OSNotificationDisplay;\n+\n+import org.json.JSONObject;\n+\n+import java.security.SecureRandom;\n+\n+public class OSNotificationGenerationJob {\n+\n+   Context context;\n+   JSONObject jsonPayload;\n+   boolean isRestoring;\n+   boolean isIamPreview;\n+   OSNotificationDisplay displayOption = OSNotificationDisplay.NOTIFICATION;\n+\n+   Long shownTimeStamp;\n+\n+   CharSequence overriddenBodyFromExtender;\n+   CharSequence overriddenTitleFromExtender;\n+   Uri overriddenSound;\n+   Integer overriddenFlags;\n+   Integer orgFlags;\n+   Uri orgSound;\n+\n+   NotificationExtenderService.OverrideSettings overrideSettings;\n+\n+   OSNotificationGenerationJob(Context context) {\n+      this.context = context;\n+   }\n+\n+   CharSequence getTitle() {\n+      if (overriddenTitleFromExtender != null)\n+         return overriddenTitleFromExtender;\n+      return jsonPayload.optString(\"title\", null);\n+   }\n+   \n+   CharSequence getBody() {\n+      if (overriddenBodyFromExtender != null)\n+         return overriddenBodyFromExtender;\n+      return jsonPayload.optString(\"alert\", null);\n+   }\n+   \n+   Integer getAndroidId() {\n+      if (overrideSettings == null)\n+         overrideSettings = new NotificationExtenderService.OverrideSettings();\n+      if (overrideSettings.androidNotificationId == null)\n+         overrideSettings.androidNotificationId = new SecureRandom().nextInt();\n+      \n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   int getAndroidIdWithoutCreate() {\n+      if (overrideSettings == null || overrideSettings.androidNotificationId == null)\n+         return -1;\n+\n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   /**\n+    * If notificationId is -1 then the notification is a silent one\n+    */\n+   boolean isNotificationToDisplay() {\n+      return getAndroidIdWithoutCreate() != -1;\n+   }\n+\n+   String getApiNotificationId() {\n+      return OneSignal.getNotificationIdFromFCMJson(jsonPayload);\n+   }\n+\n+   void setAndroidIdWithOutOverriding(Integer id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczOTUxNA=="}, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1Njk2MQ==", "bodyText": "This is called setAndroidIdWithoutOverriding because it only lets you set an Android id in the case where no overrides settings have been set yet and no Android id has been set yet", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424856961", "createdAt": "2020-05-14T03:57:11Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Handler;\n+\n+import com.onesignal.OneSignal.OSNotificationDisplay;\n+\n+import org.json.JSONObject;\n+\n+import java.security.SecureRandom;\n+\n+public class OSNotificationGenerationJob {\n+\n+   Context context;\n+   JSONObject jsonPayload;\n+   boolean isRestoring;\n+   boolean isIamPreview;\n+   OSNotificationDisplay displayOption = OSNotificationDisplay.NOTIFICATION;\n+\n+   Long shownTimeStamp;\n+\n+   CharSequence overriddenBodyFromExtender;\n+   CharSequence overriddenTitleFromExtender;\n+   Uri overriddenSound;\n+   Integer overriddenFlags;\n+   Integer orgFlags;\n+   Uri orgSound;\n+\n+   NotificationExtenderService.OverrideSettings overrideSettings;\n+\n+   OSNotificationGenerationJob(Context context) {\n+      this.context = context;\n+   }\n+\n+   CharSequence getTitle() {\n+      if (overriddenTitleFromExtender != null)\n+         return overriddenTitleFromExtender;\n+      return jsonPayload.optString(\"title\", null);\n+   }\n+   \n+   CharSequence getBody() {\n+      if (overriddenBodyFromExtender != null)\n+         return overriddenBodyFromExtender;\n+      return jsonPayload.optString(\"alert\", null);\n+   }\n+   \n+   Integer getAndroidId() {\n+      if (overrideSettings == null)\n+         overrideSettings = new NotificationExtenderService.OverrideSettings();\n+      if (overrideSettings.androidNotificationId == null)\n+         overrideSettings.androidNotificationId = new SecureRandom().nextInt();\n+      \n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   int getAndroidIdWithoutCreate() {\n+      if (overrideSettings == null || overrideSettings.androidNotificationId == null)\n+         return -1;\n+\n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   /**\n+    * If notificationId is -1 then the notification is a silent one\n+    */\n+   boolean isNotificationToDisplay() {\n+      return getAndroidIdWithoutCreate() != -1;\n+   }\n+\n+   String getApiNotificationId() {\n+      return OneSignal.getNotificationIdFromFCMJson(jsonPayload);\n+   }\n+\n+   void setAndroidIdWithOutOverriding(Integer id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczOTUxNA=="}, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4ODQ2MQ==", "bodyText": "Fixed the camel case issue", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r426788461", "createdAt": "2020-05-18T17:34:42Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Handler;\n+\n+import com.onesignal.OneSignal.OSNotificationDisplay;\n+\n+import org.json.JSONObject;\n+\n+import java.security.SecureRandom;\n+\n+public class OSNotificationGenerationJob {\n+\n+   Context context;\n+   JSONObject jsonPayload;\n+   boolean isRestoring;\n+   boolean isIamPreview;\n+   OSNotificationDisplay displayOption = OSNotificationDisplay.NOTIFICATION;\n+\n+   Long shownTimeStamp;\n+\n+   CharSequence overriddenBodyFromExtender;\n+   CharSequence overriddenTitleFromExtender;\n+   Uri overriddenSound;\n+   Integer overriddenFlags;\n+   Integer orgFlags;\n+   Uri orgSound;\n+\n+   NotificationExtenderService.OverrideSettings overrideSettings;\n+\n+   OSNotificationGenerationJob(Context context) {\n+      this.context = context;\n+   }\n+\n+   CharSequence getTitle() {\n+      if (overriddenTitleFromExtender != null)\n+         return overriddenTitleFromExtender;\n+      return jsonPayload.optString(\"title\", null);\n+   }\n+   \n+   CharSequence getBody() {\n+      if (overriddenBodyFromExtender != null)\n+         return overriddenBodyFromExtender;\n+      return jsonPayload.optString(\"alert\", null);\n+   }\n+   \n+   Integer getAndroidId() {\n+      if (overrideSettings == null)\n+         overrideSettings = new NotificationExtenderService.OverrideSettings();\n+      if (overrideSettings.androidNotificationId == null)\n+         overrideSettings.androidNotificationId = new SecureRandom().nextInt();\n+      \n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   int getAndroidIdWithoutCreate() {\n+      if (overrideSettings == null || overrideSettings.androidNotificationId == null)\n+         return -1;\n+\n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   /**\n+    * If notificationId is -1 then the notification is a silent one\n+    */\n+   boolean isNotificationToDisplay() {\n+      return getAndroidIdWithoutCreate() != -1;\n+   }\n+\n+   String getApiNotificationId() {\n+      return OneSignal.getNotificationIdFromFCMJson(jsonPayload);\n+   }\n+\n+   void setAndroidIdWithOutOverriding(Integer id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczOTUxNA=="}, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDk1ODkxOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyNzowOVrOGVEJJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyNzowOVrOGVEJJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MTE1OA==", "bodyText": "can this method be called more than once? and have overridden the handler?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424741158", "createdAt": "2020-05-13T21:27:09Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OSNotificationGenerationJob.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/**\n+ * Modified MIT License\n+ *\n+ * Copyright 2017 OneSignal\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * 1. The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * 2. All copies of substantial portions of the Software may only be used in connection\n+ * with services provided by OneSignal.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+\n+package com.onesignal;\n+\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Handler;\n+\n+import com.onesignal.OneSignal.OSNotificationDisplay;\n+\n+import org.json.JSONObject;\n+\n+import java.security.SecureRandom;\n+\n+public class OSNotificationGenerationJob {\n+\n+   Context context;\n+   JSONObject jsonPayload;\n+   boolean isRestoring;\n+   boolean isIamPreview;\n+   OSNotificationDisplay displayOption = OSNotificationDisplay.NOTIFICATION;\n+\n+   Long shownTimeStamp;\n+\n+   CharSequence overriddenBodyFromExtender;\n+   CharSequence overriddenTitleFromExtender;\n+   Uri overriddenSound;\n+   Integer overriddenFlags;\n+   Integer orgFlags;\n+   Uri orgSound;\n+\n+   NotificationExtenderService.OverrideSettings overrideSettings;\n+\n+   OSNotificationGenerationJob(Context context) {\n+      this.context = context;\n+   }\n+\n+   CharSequence getTitle() {\n+      if (overriddenTitleFromExtender != null)\n+         return overriddenTitleFromExtender;\n+      return jsonPayload.optString(\"title\", null);\n+   }\n+   \n+   CharSequence getBody() {\n+      if (overriddenBodyFromExtender != null)\n+         return overriddenBodyFromExtender;\n+      return jsonPayload.optString(\"alert\", null);\n+   }\n+   \n+   Integer getAndroidId() {\n+      if (overrideSettings == null)\n+         overrideSettings = new NotificationExtenderService.OverrideSettings();\n+      if (overrideSettings.androidNotificationId == null)\n+         overrideSettings.androidNotificationId = new SecureRandom().nextInt();\n+      \n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   int getAndroidIdWithoutCreate() {\n+      if (overrideSettings == null || overrideSettings.androidNotificationId == null)\n+         return -1;\n+\n+      return overrideSettings.androidNotificationId;\n+   }\n+\n+   /**\n+    * If notificationId is -1 then the notification is a silent one\n+    */\n+   boolean isNotificationToDisplay() {\n+      return getAndroidIdWithoutCreate() != -1;\n+   }\n+\n+   String getApiNotificationId() {\n+      return OneSignal.getNotificationIdFromFCMJson(jsonPayload);\n+   }\n+\n+   void setAndroidIdWithOutOverriding(Integer id) {\n+      if (id == null)\n+         return;\n+\n+      if (overrideSettings != null && overrideSettings.androidNotificationId != null)\n+         return;\n+\n+      if (overrideSettings == null)\n+         overrideSettings = new NotificationExtenderService.OverrideSettings();\n+      overrideSettings.androidNotificationId = id;\n+   }\n+\n+   boolean hasExtender() {\n+      return overrideSettings != null && overrideSettings.extender != null;\n+   }\n+\n+   private void setNotificationDisplayOption(OSNotificationDisplay displayOption) {\n+      this.displayOption = displayOption;\n+   }\n+\n+   ExtNotificationGenerationJob toExtNotificationGenerationJob() {\n+      return new ExtNotificationGenerationJob(this);\n+   }\n+\n+   AppNotificationGenerationJob toAppNotificationGenerationJob() {\n+      return new AppNotificationGenerationJob(this);\n+   }\n+\n+   /**\n+    * A wrapper for the {@link OSNotificationGenerationJob}\n+    * Contains two other classes which implement this one {@link NotificationGenerationJob}:\n+    *    1. {@link ExtNotificationGenerationJob}\n+    *    2. {@link AppNotificationGenerationJob}\n+    */\n+   private static class NotificationGenerationJob {\n+\n+      // Timeout in seconds before applying defaults\n+      private static final long SHOW_NOTIFICATION_TIMEOUT = 30 * 1_000L;\n+\n+      // The actual notifJob with notification payload data\n+      private OSNotificationGenerationJob notifJob;\n+\n+      // Handler used to timeout the handler if bubble or complete is not called\n+      private Handler timeoutHandler;\n+\n+      NotificationGenerationJob(OSNotificationGenerationJob notifJob) {\n+         this.notifJob = notifJob;\n+      }\n+\n+      void startShowNotificationTimeout(final Runnable timeoutRunnable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDk2NjAyOnYy", "diffSide": "RIGHT", "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyOTo1M1rOGVEN5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzozNDoyMVrOGXBFrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MjM3Mg==", "bodyText": "does it make sense to start having this string as constant?", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424742372", "createdAt": "2020-05-13T21:29:53Z", "author": {"login": "Jeasmine"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -2001,18 +2084,53 @@ public void run() {\n       });\n    }\n \n-   // Called when receiving FCM/ADM message after it has been displayed.\n-   // Or right when it is received if it is a silent one\n-   //   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n-   static void handleNotificationReceived(JSONArray data, boolean displayed) {\n-      OSNotificationOpenResult openResult = generateOsNotificationOpenResult(data, displayed);\n-      if(trackFirebaseAnalytics != null && getFirebaseAnalyticsEnabled())\n-         trackFirebaseAnalytics.trackReceivedEvent(openResult);\n+   /**\n+    * Called when receiving FCM/ADM message after it has been displayed.\n+    * Or right when it is received if it is a silent one\n+    *   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n+    */\n+   static void handleNotificationReceived(OSNotificationGenerationJob notifJob, boolean displayed) {\n+      int androidNotificationId = notifJob.getAndroidId();\n+\n+      try {\n+         JSONObject jsonObject = new JSONObject(notifJob.jsonPayload.toString());\n+         jsonObject.put(\"notificationId\", androidNotificationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg1NjI4Nw==", "bodyText": "We shouldnt have any string constants in OneSignal.java\nI will eventually clean this up, but for now we will leave it like this", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r424856287", "createdAt": "2020-05-14T03:54:29Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -2001,18 +2084,53 @@ public void run() {\n       });\n    }\n \n-   // Called when receiving FCM/ADM message after it has been displayed.\n-   // Or right when it is received if it is a silent one\n-   //   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n-   static void handleNotificationReceived(JSONArray data, boolean displayed) {\n-      OSNotificationOpenResult openResult = generateOsNotificationOpenResult(data, displayed);\n-      if(trackFirebaseAnalytics != null && getFirebaseAnalyticsEnabled())\n-         trackFirebaseAnalytics.trackReceivedEvent(openResult);\n+   /**\n+    * Called when receiving FCM/ADM message after it has been displayed.\n+    * Or right when it is received if it is a silent one\n+    *   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n+    */\n+   static void handleNotificationReceived(OSNotificationGenerationJob notifJob, boolean displayed) {\n+      int androidNotificationId = notifJob.getAndroidId();\n+\n+      try {\n+         JSONObject jsonObject = new JSONObject(notifJob.jsonPayload.toString());\n+         jsonObject.put(\"notificationId\", androidNotificationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MjM3Mg=="}, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 249}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc4ODI3MA==", "bodyText": "I take back the previous comment, Josh made a constant for this and we are suing it now", "url": "https://github.com/OneSignal/OneSignal-Android-SDK/pull/1014#discussion_r426788270", "createdAt": "2020-05-18T17:34:21Z", "author": {"login": "mikechoch"}, "path": "OneSignalSDK/onesignal/src/main/java/com/onesignal/OneSignal.java", "diffHunk": "@@ -2001,18 +2084,53 @@ public void run() {\n       });\n    }\n \n-   // Called when receiving FCM/ADM message after it has been displayed.\n-   // Or right when it is received if it is a silent one\n-   //   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n-   static void handleNotificationReceived(JSONArray data, boolean displayed) {\n-      OSNotificationOpenResult openResult = generateOsNotificationOpenResult(data, displayed);\n-      if(trackFirebaseAnalytics != null && getFirebaseAnalyticsEnabled())\n-         trackFirebaseAnalytics.trackReceivedEvent(openResult);\n+   /**\n+    * Called when receiving FCM/ADM message after it has been displayed.\n+    * Or right when it is received if it is a silent one\n+    *   If a NotificationExtenderService is present in the developers app this will not fire for silent notifications.\n+    */\n+   static void handleNotificationReceived(OSNotificationGenerationJob notifJob, boolean displayed) {\n+      int androidNotificationId = notifJob.getAndroidId();\n+\n+      try {\n+         JSONObject jsonObject = new JSONObject(notifJob.jsonPayload.toString());\n+         jsonObject.put(\"notificationId\", androidNotificationId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MjM3Mg=="}, "originalCommit": {"oid": "b96b76cabea3f4854b03c5cf19e459ef19adafef"}, "originalPosition": 249}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2249, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}