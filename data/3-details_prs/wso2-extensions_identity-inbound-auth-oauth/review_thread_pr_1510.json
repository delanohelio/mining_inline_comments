{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDIzOTg2", "number": 1510, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0Mzo0NlrOFHrnGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzoyNlrOFIA6Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk4ODczOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0Mzo0NlrOIJN2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0Mzo0NlrOIJN2DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDkyNA==", "bodyText": "Shall we change this variable to expireExistingToken? WDYT?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546534924", "createdAt": "2020-12-21T06:43:46Z", "author": {"login": "ShanChathusanda93"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -351,6 +352,7 @@ private OAuth2AccessTokenRespDTO issueExistingAccessToken(OAuthTokenReqMessageCo\n \n     private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageContext tokReqMsgCtx, String scope,\n                                                             String consumerKey, AccessTokenDO existingTokenBean,\n+                                                            boolean markExistingTokenExpired,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNTk5Mjk4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0NTo0MVrOIJN4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0NTo0MVrOIJN4Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNTUwNw==", "bodyText": "Shall we add a comment to describe the if condition? Similar one to the following.\nFrom the below if condition, it will check whether the existing token needs to be expired or not. Based on that the corresponding parameters will be sent to the persistAccessTokenInDB method.\nWDYT?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546535507", "createdAt": "2020-12-21T06:45:41Z", "author": {"login": "ShanChathusanda93"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,15 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+        if (markExistingTokenExpired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjAwNDEzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo1MToyOVrOIJN-tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo1MToyOVrOIJN-tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNzE0MQ==", "bodyText": "Shall we add a comment to describe the if condition? Similar one to the following.\nPersist the access token in database. Here the existingTokenBean is already updated in the database as revoked. Because of that we are sending the existingTokenBean as a null.\nWDYT?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546537141", "createdAt": "2020-12-21T06:51:29Z", "author": {"login": "ShanChathusanda93"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,15 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+        if (markExistingTokenExpired) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQ3NzcxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzowMFrOIJtiDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwOTowMDoxOFrOIOPEqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDA5Mw==", "bodyText": "lets the change comment to\n// Persist the access token in database without updating the existing token.\n// The existing token should already be updated by this point.\n\nWe need to say that expireExistingToken == false should only be when the existing token is already updated in the db to a non active state.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054093", "createdAt": "2020-12-22T03:57:00Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database without updating the existingTokenBean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDY0NA==", "bodyText": "Also lets add a debug log to check which condition gets through.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054644", "createdAt": "2020-12-22T03:59:00Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database without updating the existingTokenBean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDA5Mw=="}, "originalCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc5NzkyOA==", "bodyText": "Also lets add a debug log to check which condition gets through.\n\nAll the flows which invoke this method have debug logs stating what's going to happen next. So I believe they describe the value that comes here", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r551797928", "createdAt": "2021-01-05T09:00:18Z", "author": {"login": "rksk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database without updating the existingTokenBean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDA5Mw=="}, "originalCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQ3ODU0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzoyNlrOIJtigQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzoyNlrOIJtigQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDIwOQ==", "bodyText": "Add a fullstop at the end.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054209", "createdAt": "2020-12-22T03:57:26Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3547, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}