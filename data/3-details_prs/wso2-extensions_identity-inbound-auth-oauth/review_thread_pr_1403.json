{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTc4NzAw", "number": 1403, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxNzo0MFrOEIFRhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoxMDo1OFrOEKcw8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTEwNDY5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxNzo0MFrOGn1I2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODoxNzo0MFrOGn1I2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxODI2Nw==", "bodyText": "Let's move this to a constant. (DCRMConstants.java)", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r444418267", "createdAt": "2020-06-23T18:17:40Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "diffHunk": "@@ -75,6 +78,16 @@\n      */\n     public Application getApplication(String clientId) throws DCRMException {\n \n+        try {\n+            String tenantDomainOfApp = OAuth2Util.getTenantDomainOfOauthApp(clientId);\n+            OAuth2Util.validateRequestTenantDomain(tenantDomainOfApp);\n+        } catch (InvalidOAuthClientException e) {\n+            throw new DCRMClientException(\"NOT_FOUND_60001\", \"Tenant domain in request does not match with the \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e178a461d27bab7c261da8d92647d8ad94c2b69"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzUzNTQ1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODoxOTo1MVrOGrbzIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODozMToyNVrOGrcPdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NzQxMQ==", "bodyText": "Can we move this to a common private method and reuse?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448197411", "createdAt": "2020-07-01T08:19:51Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "diffHunk": "@@ -75,6 +78,16 @@\n      */\n     public Application getApplication(String clientId) throws DCRMException {\n \n+        try {\n+            String tenantDomainOfApp = OAuth2Util.getTenantDomainOfOauthApp(clientId);\n+            OAuth2Util.validateRequestTenantDomain(tenantDomainOfApp);\n+        } catch (InvalidOAuthClientException e) {\n+            throw new DCRMClientException(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getErrorCode(),\n+                    String.format(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getMessage(), clientId));\n+        } catch (IdentityOAuth2Exception e) {\n+            throw new DCRMServerException(String.format(DCRMConstants.ErrorMessages.FAILED_TO_VALIDATE_TENANT_DOMAIN\n+                    .getMessage(), clientId));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c00fa03a2871bc2e4f9ae2a54fa2c0454bc5ab8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwNDY2Mg==", "bodyText": "fixed", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448204662", "createdAt": "2020-07-01T08:31:25Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "diffHunk": "@@ -75,6 +78,16 @@\n      */\n     public Application getApplication(String clientId) throws DCRMException {\n \n+        try {\n+            String tenantDomainOfApp = OAuth2Util.getTenantDomainOfOauthApp(clientId);\n+            OAuth2Util.validateRequestTenantDomain(tenantDomainOfApp);\n+        } catch (InvalidOAuthClientException e) {\n+            throw new DCRMClientException(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getErrorCode(),\n+                    String.format(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getMessage(), clientId));\n+        } catch (IdentityOAuth2Exception e) {\n+            throw new DCRMServerException(String.format(DCRMConstants.ErrorMessages.FAILED_TO_VALIDATE_TENANT_DOMAIN\n+                    .getMessage(), clientId));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE5NzQxMQ=="}, "originalCommit": {"oid": "0c00fa03a2871bc2e4f9ae2a54fa2c0454bc5ab8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzYwNjc2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/DCRMConstants.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwODozODo0NlrOGrcfgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0ODo1OFrOGre7nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwODc3MA==", "bodyText": "Any reason why we are sending the error code in \"NOT_FOUND_60001\" format?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448208770", "createdAt": "2020-07-01T08:38:46Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/DCRMConstants.java", "diffHunk": "@@ -48,20 +48,35 @@\n         CONFLICT_EXISTING_CLIENT_ID(\"Client id %s already exist in the system\"),\n         BAD_REQUEST_CLIENT_ID_VIOLATES_PATTERN(\"Provided client id is not adhering to the provided regex %s\"),\n         FORBIDDEN_UNAUTHORIZED_USER(\"User does not have access to the application %s\"),\n-        ERROR_CODE_UNEXPECTED(\"Unexpected error\");\n+        ERROR_CODE_UNEXPECTED(\"Unexpected error\"),\n+        TENANT_DOMAIN_MISMATCH(\"NOT_FOUND_60001\", \"Tenant domain in request does not match with the application \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6695d83c5836ea8dfbf9be4a9138f37d294d94"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyMzYyOQ==", "bodyText": "it is the format used to generate HTTP error response to the client\nhttps://github.com/wso2-extensions/identity-inbound-auth-oauth/blob/master/components/org.wso2.carbon.identity.oauth.dcr.endpoint/src/main/java/org/wso2/carbon/identity/oauth2/dcr/endpoint/util/DCRMUtils.java#L98", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448223629", "createdAt": "2020-07-01T09:04:32Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/DCRMConstants.java", "diffHunk": "@@ -48,20 +48,35 @@\n         CONFLICT_EXISTING_CLIENT_ID(\"Client id %s already exist in the system\"),\n         BAD_REQUEST_CLIENT_ID_VIOLATES_PATTERN(\"Provided client id is not adhering to the provided regex %s\"),\n         FORBIDDEN_UNAUTHORIZED_USER(\"User does not have access to the application %s\"),\n-        ERROR_CODE_UNEXPECTED(\"Unexpected error\");\n+        ERROR_CODE_UNEXPECTED(\"Unexpected error\"),\n+        TENANT_DOMAIN_MISMATCH(\"NOT_FOUND_60001\", \"Tenant domain in request does not match with the application \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwODc3MA=="}, "originalCommit": {"oid": "ea6695d83c5836ea8dfbf9be4a9138f37d294d94"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIyNDE3Mw==", "bodyText": "otherwise 500 internal server error will be returned by default for all the cases if we don't add an error code", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448224173", "createdAt": "2020-07-01T09:05:30Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/DCRMConstants.java", "diffHunk": "@@ -48,20 +48,35 @@\n         CONFLICT_EXISTING_CLIENT_ID(\"Client id %s already exist in the system\"),\n         BAD_REQUEST_CLIENT_ID_VIOLATES_PATTERN(\"Provided client id is not adhering to the provided regex %s\"),\n         FORBIDDEN_UNAUTHORIZED_USER(\"User does not have access to the application %s\"),\n-        ERROR_CODE_UNEXPECTED(\"Unexpected error\");\n+        ERROR_CODE_UNEXPECTED(\"Unexpected error\"),\n+        TENANT_DOMAIN_MISMATCH(\"NOT_FOUND_60001\", \"Tenant domain in request does not match with the application \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwODc3MA=="}, "originalCommit": {"oid": "ea6695d83c5836ea8dfbf9be4a9138f37d294d94"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NTgwOA==", "bodyText": "Can we create a git issue to improve this?\nIt looks like a bit of a hack to pass the http status code \ud83d\ude03", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448245808", "createdAt": "2020-07-01T09:43:56Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/DCRMConstants.java", "diffHunk": "@@ -48,20 +48,35 @@\n         CONFLICT_EXISTING_CLIENT_ID(\"Client id %s already exist in the system\"),\n         BAD_REQUEST_CLIENT_ID_VIOLATES_PATTERN(\"Provided client id is not adhering to the provided regex %s\"),\n         FORBIDDEN_UNAUTHORIZED_USER(\"User does not have access to the application %s\"),\n-        ERROR_CODE_UNEXPECTED(\"Unexpected error\");\n+        ERROR_CODE_UNEXPECTED(\"Unexpected error\"),\n+        TENANT_DOMAIN_MISMATCH(\"NOT_FOUND_60001\", \"Tenant domain in request does not match with the application \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwODc3MA=="}, "originalCommit": {"oid": "ea6695d83c5836ea8dfbf9be4a9138f37d294d94"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0ODczNQ==", "bodyText": "created an issue for that wso2/product-is#8615", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448248735", "createdAt": "2020-07-01T09:48:58Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/DCRMConstants.java", "diffHunk": "@@ -48,20 +48,35 @@\n         CONFLICT_EXISTING_CLIENT_ID(\"Client id %s already exist in the system\"),\n         BAD_REQUEST_CLIENT_ID_VIOLATES_PATTERN(\"Provided client id is not adhering to the provided regex %s\"),\n         FORBIDDEN_UNAUTHORIZED_USER(\"User does not have access to the application %s\"),\n-        ERROR_CODE_UNEXPECTED(\"Unexpected error\");\n+        ERROR_CODE_UNEXPECTED(\"Unexpected error\"),\n+        TENANT_DOMAIN_MISMATCH(\"NOT_FOUND_60001\", \"Tenant domain in request does not match with the application \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODIwODc3MA=="}, "originalCommit": {"oid": "ea6695d83c5836ea8dfbf9be4a9138f37d294d94"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzkyNDk3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoxMDo1OFrOGrfqrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTowNjowMVrOGrp7yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2MDc4Mw==", "bodyText": "Shouldn't this be a client error?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448260783", "createdAt": "2020-07-01T10:10:58Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "diffHunk": "@@ -669,4 +675,24 @@ private static boolean clientIdMatchesRegex(String clientId, String clientIdVali\n         }\n         return clientIdRegexPattern.matcher(clientId).matches();\n     }\n+\n+    /**\n+     * Validates whether the tenant domain in the request matches with the application tenant domain.\n+     *\n+     * @param clientId Consumer key of application.\n+     * @throws DCRMException DCRMException\n+     */\n+    private void validateRequestTenantDomain(String clientId) throws DCRMException {\n+\n+        try {\n+            String tenantDomainOfApp = OAuth2Util.getTenantDomainOfOauthApp(clientId);\n+            OAuth2Util.validateRequestTenantDomain(tenantDomainOfApp);\n+        } catch (InvalidOAuthClientException e) {\n+            throw new DCRMClientException(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getErrorCode(),\n+                    String.format(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getMessage(), clientId));\n+        } catch (IdentityOAuth2Exception e) {\n+            throw new DCRMServerException(String.format(DCRMConstants.ErrorMessages.FAILED_TO_VALIDATE_TENANT_DOMAIN", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6695d83c5836ea8dfbf9be4a9138f37d294d94"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyOTAwMg==", "bodyText": "this exception is thrown from OAuth2Util.getTenantDomainOfOauthApp method which is due to an internal server error.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1403#discussion_r448429002", "createdAt": "2020-07-01T15:06:01Z", "author": {"login": "emswbandara"}, "path": "components/org.wso2.carbon.identity.oauth.dcr/src/main/java/org/wso2/carbon/identity/oauth/dcr/service/DCRMService.java", "diffHunk": "@@ -669,4 +675,24 @@ private static boolean clientIdMatchesRegex(String clientId, String clientIdVali\n         }\n         return clientIdRegexPattern.matcher(clientId).matches();\n     }\n+\n+    /**\n+     * Validates whether the tenant domain in the request matches with the application tenant domain.\n+     *\n+     * @param clientId Consumer key of application.\n+     * @throws DCRMException DCRMException\n+     */\n+    private void validateRequestTenantDomain(String clientId) throws DCRMException {\n+\n+        try {\n+            String tenantDomainOfApp = OAuth2Util.getTenantDomainOfOauthApp(clientId);\n+            OAuth2Util.validateRequestTenantDomain(tenantDomainOfApp);\n+        } catch (InvalidOAuthClientException e) {\n+            throw new DCRMClientException(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getErrorCode(),\n+                    String.format(DCRMConstants.ErrorMessages.TENANT_DOMAIN_MISMATCH.getMessage(), clientId));\n+        } catch (IdentityOAuth2Exception e) {\n+            throw new DCRMServerException(String.format(DCRMConstants.ErrorMessages.FAILED_TO_VALIDATE_TENANT_DOMAIN", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2MDc4Mw=="}, "originalCommit": {"oid": "ea6695d83c5836ea8dfbf9be4a9138f37d294d94"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3564, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}