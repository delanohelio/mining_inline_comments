{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NDcwNDQz", "number": 1413, "title": "Introduce token revocation with binding expiry", "bodyText": "Description\nAccess token binding can be defined for the OAuth applications. Once the binding is defined, a unique access token is issued per binding. Therefore there is no use of keeping the access token once the binding is expired. So that this PR adds the functionality to revoke the access token when the access token binding is expired. This feature will work only if it is enabled in the service provider.\nApproach\nA new property is added to the OAuth/OIDC inbound authentication configuration.\n\nWhen this property is enabled only the tokens issued for the application will get revoked once the IDP session terminates.\nFor this feature to work, the application should have a binding type defined. We have two binding types, cookie and sso-session as of now. When the user logs out of the application, the new event handler added to listen to the SESSION_TERMINATE event will be triggered. This handler will revoke the access token of the token binding reference issued for the application.\nThe following flow chart explains the behavior of this feature.\n\nFollow up actions\nUpdate the default.json of <IS_HOME>/repository/resources/conf/ folder to enable this event listener by default\nFixes wso2/product-is#8569", "createdAt": "2020-07-15T13:09:34Z", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413", "merged": true, "mergeCommit": {"oid": "3c03dd27c2d8a7aa67d82357ea6af325d1dda796"}, "closed": true, "closedAt": "2020-08-12T06:39:52Z", "author": {"login": "pamodaaw"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1abWAABqjM1NTE4NjA3NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-FlRCgFqTQ2NTYyODQ4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ffd2669698bddac2bcd1d09cf6ed366dce49073", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6ffd2669698bddac2bcd1d09cf6ed366dce49073", "committedDate": "2020-07-15T09:18:25Z", "message": "Introduce token revocation with binding expiry"}, "afterCommit": {"oid": "eb3828fa3df8c1bacd6e4872a18e41f8fb9b941d", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/eb3828fa3df8c1bacd6e4872a18e41f8fb9b941d", "committedDate": "2020-07-16T07:50:03Z", "message": "Introduce token revocation with binding expiry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb3828fa3df8c1bacd6e4872a18e41f8fb9b941d", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/eb3828fa3df8c1bacd6e4872a18e41f8fb9b941d", "committedDate": "2020-07-16T07:50:03Z", "message": "Introduce token revocation with binding expiry"}, "afterCommit": {"oid": "2c4cb4610b287543167da6de8b837f528bcf0efe", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2c4cb4610b287543167da6de8b837f528bcf0efe", "committedDate": "2020-07-16T07:54:25Z", "message": "Introduce token revocation with binding expiry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c4cb4610b287543167da6de8b837f528bcf0efe", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2c4cb4610b287543167da6de8b837f528bcf0efe", "committedDate": "2020-07-16T07:54:25Z", "message": "Introduce token revocation with binding expiry"}, "afterCommit": {"oid": "c3de72657fc19101456fb6b764cf963d8ce50273", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/c3de72657fc19101456fb6b764cf963d8ce50273", "committedDate": "2020-07-17T04:40:55Z", "message": "Introduce token revocation with binding expiry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c3de72657fc19101456fb6b764cf963d8ce50273", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/c3de72657fc19101456fb6b764cf963d8ce50273", "committedDate": "2020-07-17T04:40:55Z", "message": "Introduce token revocation with binding expiry"}, "afterCommit": {"oid": "a7652d7ee894f9ff3fd5523cc6876ecdae4e9358", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a7652d7ee894f9ff3fd5523cc6876ecdae4e9358", "committedDate": "2020-07-17T04:44:50Z", "message": "Introduce token revocation with binding expiry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5861287df66549e5c5f697bbedc04b540f1a4d22", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/5861287df66549e5c5f697bbedc04b540f1a4d22", "committedDate": "2020-08-07T11:31:26Z", "message": "Introduce a new OIDC property for apps to revoke tokens"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a7652d7ee894f9ff3fd5523cc6876ecdae4e9358", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/a7652d7ee894f9ff3fd5523cc6876ecdae4e9358", "committedDate": "2020-07-17T04:44:50Z", "message": "Introduce token revocation with binding expiry"}, "afterCommit": {"oid": "9f67237a1b23fa2b3dac22821d96c06ad4e3c4cf", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9f67237a1b23fa2b3dac22821d96c06ad4e3c4cf", "committedDate": "2020-08-07T11:32:13Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f67237a1b23fa2b3dac22821d96c06ad4e3c4cf", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9f67237a1b23fa2b3dac22821d96c06ad4e3c4cf", "committedDate": "2020-08-07T11:32:13Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}, "afterCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "committedDate": "2020-08-07T11:58:20Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjc2Nzc3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463276777", "createdAt": "2020-08-07T12:37:14Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozNzoxNVrOG9YNlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozNzoxNVrOG9YNlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxMzAxMw==", "bodyText": "remove this", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467013013", "createdAt": "2020-08-07T12:37:15Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/edit.jsp", "diffHunk": "@@ -95,7 +95,7 @@\n         supportedIdTokenEncryptionMethods =\n                 client.getSupportedIDTokenAlgorithms().getSupportedIdTokenEncryptionMethods();\n         supportedTokenBindingsMetaData = client.getSupportedTokenBindingsMetaData();\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjc4OTk3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463278997", "createdAt": "2020-08-07T12:41:02Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MTowMlrOG9YUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MTowMlrOG9YUmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDgwOA==", "bodyText": "Are we using all of these values which are set to the accessTokenDO?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467014808", "createdAt": "2020-08-07T12:41:02Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);\n+                        } else {\n+                            String consumerKey = resultSet.getString(\"CONSUMER_KEY\");\n+                            String tokenScope = resultSet.getString(\"TOKEN_SCOPE\");\n+                            String refreshToken = resultSet.getString(\"REFRESH_TOKEN\");\n+                            String tokenId = resultSet.getString(\"TOKEN_ID\");\n+\n+                            String[] scope = OAuth2Util.buildScopeArray(tokenScope);\n+                            accessTokenDO.setAccessToken(token);\n+                            accessTokenDO.setConsumerKey(consumerKey);\n+                            accessTokenDO.setScope(scope);\n+                            accessTokenDO.setAuthzUser(user);\n+                            accessTokenDO.setTenantID(tenantId);\n+                            accessTokenDO.setRefreshToken(refreshToken);\n+                            accessTokenDO.setTokenId(tokenId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjgwNTI4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463280528", "createdAt": "2020-08-07T12:43:26Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MzoyNlrOG9YZIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MzoyNlrOG9YZIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNTk3MA==", "bodyText": "We are not using the scope values", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467015970", "createdAt": "2020-08-07T12:43:26Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjgyNDU1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463282455", "createdAt": "2020-08-07T12:46:28Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0NjoyOFrOG9YfGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0NjoyOFrOG9YfGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNzQ5Ng==", "bodyText": "Use a common constant for this and the SSOSessionBasedCookieBinder", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467017496", "createdAt": "2020-08-07T12:46:28Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjgzNzc3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463283777", "createdAt": "2020-08-07T12:48:26Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODoyNlrOG9YjCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODoyNlrOG9YjCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODUwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n          \n          \n            \n                    if (!IdentityEventConstants.EventName.SESSION_TERMINATE.name().equals(event.getEventName())) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467018504", "createdAt": "2020-08-07T12:48:26Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjg0MTMx", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463284131", "createdAt": "2020-08-07T12:48:57Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODo1N1rOG9Yj-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODo1N1rOG9Yj-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODc0NA==", "bodyText": "Don't we need to check is the listener enabled here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467018744", "createdAt": "2020-08-07T12:48:57Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjg1NTU1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463285555", "createdAt": "2020-08-07T12:51:10Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1MToxMFrOG9YobA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1MToxMFrOG9YobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {\n          \n          \n            \n                            if (FrameworkConstants.RequestType.CLAIM_TYPE_OIDC.equals(request.getParameter(TYPE))) {", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467019884", "createdAt": "2020-08-07T12:51:10Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n+\n+            HttpServletRequest request = getHttpRequestFromEvent(event);\n+            Map<String, Object> eventProperties = event.getEventProperties();\n+            AuthenticationContext context = (AuthenticationContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.CONTEXT);\n+            try {\n+                if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjg2NjIy", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463286622", "createdAt": "2020-08-07T12:52:48Z", "commit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1Mjo0OFrOG9Yr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1Mjo0OFrOG9Yr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMDc1Mw==", "bodyText": "if there are no binding type we can skip this", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467020753", "createdAt": "2020-08-07T12:52:48Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n+\n+            HttpServletRequest request = getHttpRequestFromEvent(event);\n+            Map<String, Object> eventProperties = event.getEventProperties();\n+            AuthenticationContext context = (AuthenticationContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.CONTEXT);\n+            try {\n+                if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {\n+\n+                    String consumerKey = context.getRelyingParty();\n+                    String bindingType = OAuth2Util.getAppInformationByClientId(consumerKey).getTokenBindingType();\n+\n+                    revokeTokensForBindingType(request, context.getLastAuthenticatedUser(), consumerKey, bindingType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e0fbbc46f366b29371adaa1b2f053cd5272eeb01", "committedDate": "2020-08-07T11:58:20Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}, "afterCommit": {"oid": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "committedDate": "2020-08-07T14:05:57Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0699ffd5b137d19b720b381c96867aef6587a3d4", "committedDate": "2020-08-07T14:14:07Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/ae0138d40d54e6f56d9d09e990b1fb1ae1df1f0a", "committedDate": "2020-08-07T14:05:57Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}, "afterCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0699ffd5b137d19b720b381c96867aef6587a3d4", "committedDate": "2020-08-07T14:14:07Z", "message": "Add an event handler to revoke tokens when IDP session terminates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzY2MDg1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463366085", "createdAt": "2020-08-07T14:37:59Z", "commit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozNzo1OVrOG9cbPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozNzo1OVrOG9cbPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4MjA0Ng==", "bodyText": "format this line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467082046", "createdAt": "2020-08-07T14:37:59Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/add-finish-ajaxprocessor.jsp", "diffHunk": "@@ -79,6 +80,10 @@\n         bypassClientCredentials = true;\n     }\n     \n+    if (request.getParameter(\"revokeTokensWhenIDPSessionTerminated\") != null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzY2NTE5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463366519", "createdAt": "2020-08-07T14:38:29Z", "commit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozODoyOVrOG9ccpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozODoyOVrOG9ccpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4MjQwNw==", "bodyText": "format this line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467082407", "createdAt": "2020-08-07T14:38:29Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/edit-finish-ajaxprocessor.jsp", "diffHunk": "@@ -82,6 +83,10 @@\n         bypassClientCredentials = true;\n     }\n     \n+    if (request.getParameter(\"revokeTokensWhenIDPSessionTerminated\") != null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzY4NjAx", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-463368601", "createdAt": "2020-08-07T14:41:02Z", "commit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MTowM1rOG9ci5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MTowM1rOG9ci5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDAwNA==", "bodyText": "Do we need this class?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467084004", "createdAt": "2020-08-07T14:41:03Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2;\n+\n+/**\n+ * This class contains the constants required by the OAuth2 components.\n+ */\n+public class OAuth2Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d10e176a6569774907d589664f7f7fd125f82596", "author": {"user": {"login": "pamodaaw", "name": "Pamoda Wimalasiri"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/d10e176a6569774907d589664f7f7fd125f82596", "committedDate": "2020-08-10T16:12:40Z", "message": "Refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Nzk2OTU4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-464796958", "createdAt": "2020-08-11T07:00:15Z", "commit": {"oid": "d10e176a6569774907d589664f7f7fd125f82596"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NjI4NDgx", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#pullrequestreview-465628481", "createdAt": "2020-08-12T06:39:37Z", "commit": {"oid": "d10e176a6569774907d589664f7f7fd125f82596"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3129, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}