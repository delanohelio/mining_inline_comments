{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDIzOTg2", "number": 1510, "title": "Reuse existing refresh token when issuing a new access token", "bodyText": "Resolves wso2/product-is#10684\nProposed changes in this pull request\nThis issue has been introduced while fixing wso2/product-is#4876 since we had not passed exisitngTokenBean to generateNewAccessToken() to avoid it getting marked as EXPIRED while it is already REVOKED.\nHence, a new parameter called markExistingTokenExpired was added for generateNewAccessToken() and passed the exisitngTokenBean in both of the following scenarios.\n\nRevoke existing and issue a new token; markExistingTokenExpired is false since we have already revoked the token\nIssue a new token since the existing one is expired; markExistingTokenExpired is true\n\nInside generateNewAccessToken() we are generating the newTokenBean and it will include the refresh token from exisitngTokenBean if it is not already expired.\nBut  the exisitngTokenBean is passed to  persistAccessTokenInDB() only if markExistingTokenExpired is true since it does the token expiry task which is not required when markExistingTokenExpired is true.\n\n\n\nWhen should this PR be merged\n[Please describe any preconditions that need to be addressed before we\ncan merge this pull request.]\nFollow up actions\n[List any possible follow-up actions here; for instance, testing data\nmigrations, software that we need to install on staging and production\nenvironments.]\n\n\n\nChecklist (for reviewing)\nGeneral\n\n Is this PR explained thoroughly? All code changes must be accounted for in the PR description.\n Is the PR labeled correctly?\n\nFunctionality\n\n Are all requirements met? Compare implemented functionality with the requirements specification.\n Does the UI work as expected? There should be no Javascript errors in the console; all resources should load. There should be no unexpected errors. Deliberately try to break the feature to find out if there are corner cases that are not handled.\n\nCode\n\n Do you fully understand the introduced changes to the code? If not ask for clarification, it might uncover ways to solve a problem in a more elegant and efficient way.\n Does the PR introduce any inefficient database requests? Use the debug server to check for duplicate requests.\n Are all necessary strings marked for translation? All strings that are exposed to users via the UI must be marked for translation.\n\nTests\n\n Are there sufficient test cases? Ensure that all components are tested individually; models, forms, and serializers should be tested in isolation even if a test for a view covers these components.\n If this is a bug fix, are tests for the issue in place?  There must be a test case for the bug to ensure the issue won\u2019t regress. Make sure that the tests break without the new code to fix the issue.\n If this is a new feature or a significant change to an existing feature? has the manual testing spreadsheet been updated with instructions for manual testing?\n\nSecurity\n\n Confirm this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets.\n Are all UI and API inputs run through forms or serializers?\n Are all external inputs validated and sanitized appropriately?\n Does all branching logic have a default case?\n Does this solution handle outliers and edge cases gracefully?\n Are all external communications secured and restricted to SSL?\n\nDocumentation\n\n Are changes to the UI documented in the platform docs? If this PR introduces new platform site functionality or changes existing ones, the changes should be documented.\n Are changes to the API documented in the API docs? If this PR introduces new API functionality or changes existing ones, the changes must be documented.\n Are reusable components documented? If this PR introduces components that are relevant to other developers (for instance a mixin for a view or a generic form) they should be documented in the Wiki.", "createdAt": "2020-12-05T14:20:05Z", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510", "merged": true, "mergeCommit": {"oid": "94cda7eac97852f698e63f564054c5a366b37765"}, "closed": true, "closedAt": "2021-01-05T13:59:59Z", "author": {"login": "rksk"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoQRj0AFqTU1NjE1OTY0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtKo-ZAFqTU2MTc3MjQ3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTU5NjQ1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#pullrequestreview-556159645", "createdAt": "2020-12-21T06:43:46Z", "commit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo0Mzo0NlrOIJN2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjo1MToyOVrOIJN-tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNDkyNA==", "bodyText": "Shall we change this variable to expireExistingToken? WDYT?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546534924", "createdAt": "2020-12-21T06:43:46Z", "author": {"login": "ShanChathusanda93"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -351,6 +352,7 @@ private OAuth2AccessTokenRespDTO issueExistingAccessToken(OAuthTokenReqMessageCo\n \n     private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageContext tokReqMsgCtx, String scope,\n                                                             String consumerKey, AccessTokenDO existingTokenBean,\n+                                                            boolean markExistingTokenExpired,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNTUwNw==", "bodyText": "Shall we add a comment to describe the if condition? Similar one to the following.\nFrom the below if condition, it will check whether the existing token needs to be expired or not. Based on that the corresponding parameters will be sent to the persistAccessTokenInDB method.\nWDYT?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546535507", "createdAt": "2020-12-21T06:45:41Z", "author": {"login": "ShanChathusanda93"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,15 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+        if (markExistingTokenExpired) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUzNzE0MQ==", "bodyText": "Shall we add a comment to describe the if condition? Similar one to the following.\nPersist the access token in database. Here the existingTokenBean is already updated in the database as revoked. Because of that we are sending the existingTokenBean as a null.\nWDYT?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r546537141", "createdAt": "2020-12-21T06:51:29Z", "author": {"login": "ShanChathusanda93"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,15 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+        if (markExistingTokenExpired) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6bf03126d88543ad21f54b7fc2a5d4a2ed52452c", "author": {"user": {"login": "rksk", "name": "Sajith Ekanayaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6bf03126d88543ad21f54b7fc2a5d4a2ed52452c", "committedDate": "2020-12-05T14:17:14Z", "message": "Reuse existing refresh token when issuing a new access token"}, "afterCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "author": {"user": {"login": "rksk", "name": "Sajith Ekanayaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/687a16efaf8fb4d3c865d294fc2d9568fb315602", "committedDate": "2020-12-21T19:45:28Z", "message": "Reuse existing refresh token when issuing a new access token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODAzNjc5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#pullrequestreview-556803679", "createdAt": "2020-12-22T03:57:00Z", "commit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzowMFrOIJtiDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzowMFrOIJtiDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDA5Mw==", "bodyText": "lets the change comment to\n// Persist the access token in database without updating the existing token.\n// The existing token should already be updated by this point.\n\nWe need to say that expireExistingToken == false should only be when the existing token is already updated in the db to a non active state.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054093", "createdAt": "2020-12-22T03:57:00Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired\n+            persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n+                    newTokenBean.getAccessToken());\n+        } else {\n+            // Persist the access token in database without updating the existingTokenBean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2ODAzODI4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#pullrequestreview-556803828", "createdAt": "2020-12-22T03:57:25Z", "commit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzoyNlrOIJtigQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzo1NzoyNlrOIJtigQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA1NDIwOQ==", "bodyText": "Add a fullstop at the end.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#discussion_r547054209", "createdAt": "2020-12-22T03:57:26Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -360,9 +362,19 @@ private OAuth2AccessTokenRespDTO generateNewAccessToken(OAuthTokenReqMessageCont\n         AccessTokenDO newTokenBean = createNewTokenBean(tokReqMsgCtx, oAuthAppBean, existingTokenBean, timestamp,\n                 validityPeriodInMillis, oauthTokenIssuer);\n         setDetailsToMessageContext(tokReqMsgCtx, validityPeriodInMillis, newTokenBean, timestamp);\n-        // Persist the access token in database\n-        persistAccessTokenInDB(tokReqMsgCtx, existingTokenBean, newTokenBean, timestamp,\n-                newTokenBean.getAccessToken());\n+\n+        /* Check whether the existing token needs to be expired and send the corresponding parameters\n+        to the persistAccessTokenInDB method. */\n+        if (expireExistingToken) {\n+            // Persist the access token in database and mark the existing token as expired", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ea89f04672e13f59dce0ba490c80f418874ccf", "author": {"user": {"login": "rksk", "name": "Sajith Ekanayaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/19ea89f04672e13f59dce0ba490c80f418874ccf", "committedDate": "2021-01-05T09:01:11Z", "message": "Reuse existing refresh token when issuing a new access token"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "687a16efaf8fb4d3c865d294fc2d9568fb315602", "author": {"user": {"login": "rksk", "name": "Sajith Ekanayaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/687a16efaf8fb4d3c865d294fc2d9568fb315602", "committedDate": "2020-12-21T19:45:28Z", "message": "Reuse existing refresh token when issuing a new access token"}, "afterCommit": {"oid": "19ea89f04672e13f59dce0ba490c80f418874ccf", "author": {"user": {"login": "rksk", "name": "Sajith Ekanayaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/19ea89f04672e13f59dce0ba490c80f418874ccf", "committedDate": "2021-01-05T09:01:11Z", "message": "Reuse existing refresh token when issuing a new access token"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNjQ5NzM4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#pullrequestreview-561649738", "createdAt": "2021-01-05T09:50:35Z", "commit": {"oid": "19ea89f04672e13f59dce0ba490c80f418874ccf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNjUwODkw", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#pullrequestreview-561650890", "createdAt": "2021-01-05T09:52:17Z", "commit": {"oid": "19ea89f04672e13f59dce0ba490c80f418874ccf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNzcyNDc5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1510#pullrequestreview-561772479", "createdAt": "2021-01-05T13:07:38Z", "commit": {"oid": "19ea89f04672e13f59dce0ba490c80f418874ccf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3101, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}