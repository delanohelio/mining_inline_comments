{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5Nzg1MDU2", "number": 1501, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0OTo1MlrOE4K0Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1MTozNFrOE4K3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzMyOTY3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOauthEventHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo0OTo1MlrOHx7lAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxOTo0MlrOHx85PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExODQwMQ==", "bodyText": "we have to check both POST_SET_USER_CLAIMS and POST_SET_USER_CLAIM events", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1501#discussion_r522118401", "createdAt": "2020-11-12T13:49:52Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOauthEventHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityRuntimeException;\n+import org.wso2.carbon.identity.core.bean.context.MessageContext;\n+import org.wso2.carbon.identity.core.handler.InitConfig;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreException;\n+import org.wso2.carbon.user.core.UserStoreManager;\n+\n+/**\n+ * This is an event handler listening for some of the core user management operations.\n+ */\n+public class IdentityOauthEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(IdentityOauthEventHandler.class);\n+\n+    public String getName() {\n+\n+        return \"identityOauthEventHandler\";\n+    }\n+\n+    public String getFriendlyName() {\n+\n+        return \"Identity Oauth Event Handler\";\n+    }\n+\n+    @Override\n+    public void init(InitConfig configuration) throws IdentityRuntimeException {\n+\n+        super.init(configuration);\n+    }\n+\n+    @Override\n+    public int getPriority(MessageContext messageContext) {\n+\n+        int priority = super.getPriority(messageContext);\n+        if (priority == -1) {\n+            priority = 51;\n+        }\n+        return priority;\n+    }\n+\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (IdentityEventConstants.Event.POST_SET_USER_CLAIMS.equals(event.getEventName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a156d1c769148e1d7a739b97ec08ab1b2d0e1445"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyODIzOQ==", "bodyText": "accountlockhandler is listening only to POST_SET_USER_CLAIMS and setting the lock/disable claims https://github.com/wso2-extensions/identity-event-handler-account-lock/blob/master/components/org.wso2.carbon.identity.handler.event.account.lock/src/main/java/org/wso2/carbon/identity/handler/event/account/lock/AccountLockHandler.java#L188.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1501#discussion_r522128239", "createdAt": "2020-11-12T14:03:32Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOauthEventHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityRuntimeException;\n+import org.wso2.carbon.identity.core.bean.context.MessageContext;\n+import org.wso2.carbon.identity.core.handler.InitConfig;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreException;\n+import org.wso2.carbon.user.core.UserStoreManager;\n+\n+/**\n+ * This is an event handler listening for some of the core user management operations.\n+ */\n+public class IdentityOauthEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(IdentityOauthEventHandler.class);\n+\n+    public String getName() {\n+\n+        return \"identityOauthEventHandler\";\n+    }\n+\n+    public String getFriendlyName() {\n+\n+        return \"Identity Oauth Event Handler\";\n+    }\n+\n+    @Override\n+    public void init(InitConfig configuration) throws IdentityRuntimeException {\n+\n+        super.init(configuration);\n+    }\n+\n+    @Override\n+    public int getPriority(MessageContext messageContext) {\n+\n+        int priority = super.getPriority(messageContext);\n+        if (priority == -1) {\n+            priority = 51;\n+        }\n+        return priority;\n+    }\n+\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (IdentityEventConstants.Event.POST_SET_USER_CLAIMS.equals(event.getEventName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExODQwMQ=="}, "originalCommit": {"oid": "a156d1c769148e1d7a739b97ec08ab1b2d0e1445"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzOTk2NA==", "bodyText": "Since IdentityOauthEventHandler.java  is listening to POST_SET_USER_CLAIM event , moved it also to IdentityOauthEventListener.java  as suggested", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1501#discussion_r522139964", "createdAt": "2020-11-12T14:19:42Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOauthEventHandler.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.base.IdentityRuntimeException;\n+import org.wso2.carbon.identity.core.bean.context.MessageContext;\n+import org.wso2.carbon.identity.core.handler.InitConfig;\n+import org.wso2.carbon.identity.core.util.IdentityCoreConstants;\n+import org.wso2.carbon.identity.core.util.IdentityUtil;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.user.core.UserCoreConstants;\n+import org.wso2.carbon.user.core.UserStoreException;\n+import org.wso2.carbon.user.core.UserStoreManager;\n+\n+/**\n+ * This is an event handler listening for some of the core user management operations.\n+ */\n+public class IdentityOauthEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(IdentityOauthEventHandler.class);\n+\n+    public String getName() {\n+\n+        return \"identityOauthEventHandler\";\n+    }\n+\n+    public String getFriendlyName() {\n+\n+        return \"Identity Oauth Event Handler\";\n+    }\n+\n+    @Override\n+    public void init(InitConfig configuration) throws IdentityRuntimeException {\n+\n+        super.init(configuration);\n+    }\n+\n+    @Override\n+    public int getPriority(MessageContext messageContext) {\n+\n+        int priority = super.getPriority(messageContext);\n+        if (priority == -1) {\n+            priority = 51;\n+        }\n+        return priority;\n+    }\n+\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (IdentityEventConstants.Event.POST_SET_USER_CLAIMS.equals(event.getEventName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExODQwMQ=="}, "originalCommit": {"oid": "a156d1c769148e1d7a739b97ec08ab1b2d0e1445"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzMzNjUwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOathEventListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1MToyOFrOHx7pSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNTozNlrOHx8RTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExOTQ5OA==", "bodyText": "Isn't this happening in IdentityOauthEventHandler?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1501#discussion_r522119498", "createdAt": "2020-11-12T13:51:28Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOathEventListener.java", "diffHunk": "@@ -140,9 +130,7 @@ public boolean doPostSetUserClaimValues(String userName, Map<String, String> cla\n         if (!isEnable()) {\n             return true;\n         }\n-        return revokeTokensOfLockedUser(userName, userStoreManager) &&\n-                revokeTokensOfDisabledUser(userName, userStoreManager)\n-                && removeUserClaimsFromCache(userName, userStoreManager);\n+        return OAuthUtil.removeUserClaimsFromCache(userName, userStoreManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a156d1c769148e1d7a739b97ec08ab1b2d0e1445"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyOTc0Mw==", "bodyText": "fixed it. moved it to IdentityOauthEventHandler", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1501#discussion_r522129743", "createdAt": "2020-11-12T14:05:36Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOathEventListener.java", "diffHunk": "@@ -140,9 +130,7 @@ public boolean doPostSetUserClaimValues(String userName, Map<String, String> cla\n         if (!isEnable()) {\n             return true;\n         }\n-        return revokeTokensOfLockedUser(userName, userStoreManager) &&\n-                revokeTokensOfDisabledUser(userName, userStoreManager)\n-                && removeUserClaimsFromCache(userName, userStoreManager);\n+        return OAuthUtil.removeUserClaimsFromCache(userName, userStoreManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExOTQ5OA=="}, "originalCommit": {"oid": "a156d1c769148e1d7a739b97ec08ab1b2d0e1445"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzMzNjgzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOathEventListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1MTozNFrOHx7phQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDowNzozM1rOHx8Wuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExOTU1Nw==", "bodyText": "Isn't this happening in IdentityOauthEventHandler?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1501#discussion_r522119557", "createdAt": "2020-11-12T13:51:34Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOathEventListener.java", "diffHunk": "@@ -130,7 +120,7 @@ public boolean doPostSetUserClaimValue(String userName, UserStoreManager userSto\n         }\n         return revokeTokensOfLockedUser(userName, userStoreManager) &&\n                 revokeTokensOfDisabledUser(userName, userStoreManager)\n-                && removeUserClaimsFromCache(userName, userStoreManager);\n+                && OAuthUtil.removeUserClaimsFromCache(userName, userStoreManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a156d1c769148e1d7a739b97ec08ab1b2d0e1445"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzMTEzMQ==", "bodyText": "moved it to IdentityOauthEventHandler", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1501#discussion_r522131131", "createdAt": "2020-11-12T14:07:33Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/IdentityOathEventListener.java", "diffHunk": "@@ -130,7 +120,7 @@ public boolean doPostSetUserClaimValue(String userName, UserStoreManager userSto\n         }\n         return revokeTokensOfLockedUser(userName, userStoreManager) &&\n                 revokeTokensOfDisabledUser(userName, userStoreManager)\n-                && removeUserClaimsFromCache(userName, userStoreManager);\n+                && OAuthUtil.removeUserClaimsFromCache(userName, userStoreManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjExOTU1Nw=="}, "originalCommit": {"oid": "a156d1c769148e1d7a739b97ec08ab1b2d0e1445"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3620, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}