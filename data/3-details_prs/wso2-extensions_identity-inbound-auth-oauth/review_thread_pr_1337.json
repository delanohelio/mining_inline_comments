{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzEwNzIy", "number": 1337, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1ODo0MVrODjxjlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTo0NDoxNlrOEsQGQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODM4Njc4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1ODo0MVrOFvxK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowOTowM1rOFvxcxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMjk5Ng==", "bodyText": "Add new line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r385632996", "createdAt": "2020-02-28T10:58:41Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,44 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+\n+    /**\n+     * Get the IdToken Encryption Method registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionMethod\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionMethod(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionMethods = OAuthServerConfiguration.getInstance()\n+                .getSupportedIdTokenEncryptionMethods();\n+        String idTokenEncryptionMethod = application.getIdTokenEncryptionMethod();\n+        if (!supportedIdTokenEncryptionMethods.contains(idTokenEncryptionMethod)) {\n+            String msg = String.format(\"'%s' IdToken Encryption Method is not allowed.\", idTokenEncryptionMethod);\n+            throw handleClientError(INVALID_REQUEST, msg);\n+        }\n+        return idTokenEncryptionMethod;\n+    }\n+\n+    /**\n+     * Get the IdToken Encryption Algorithm registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionAlgorithm\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionAlgorithm(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionAlgorithms = OAuthServerConfiguration.getInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba6b892cfa18a3ff2c5016c2b8b2263ce374dc1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzNzU3Mg==", "bodyText": "Fixed", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r385637572", "createdAt": "2020-02-28T11:09:03Z", "author": {"login": "Sathiyakugan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,44 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+\n+    /**\n+     * Get the IdToken Encryption Method registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionMethod\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionMethod(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionMethods = OAuthServerConfiguration.getInstance()\n+                .getSupportedIdTokenEncryptionMethods();\n+        String idTokenEncryptionMethod = application.getIdTokenEncryptionMethod();\n+        if (!supportedIdTokenEncryptionMethods.contains(idTokenEncryptionMethod)) {\n+            String msg = String.format(\"'%s' IdToken Encryption Method is not allowed.\", idTokenEncryptionMethod);\n+            throw handleClientError(INVALID_REQUEST, msg);\n+        }\n+        return idTokenEncryptionMethod;\n+    }\n+\n+    /**\n+     * Get the IdToken Encryption Algorithm registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionAlgorithm\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionAlgorithm(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionAlgorithms = OAuthServerConfiguration.getInstance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMjk5Ng=="}, "originalCommit": {"oid": "2ba6b892cfa18a3ff2c5016c2b8b2263ce374dc1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODM4NzQxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1ODo1M1rOFvxLSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowOTowNlrOFvxc1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzA5Ng==", "bodyText": "Remove extra line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r385633096", "createdAt": "2020-02-28T10:58:53Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,44 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+\n+    /**\n+     * Get the IdToken Encryption Method registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionMethod\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionMethod(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionMethods = OAuthServerConfiguration.getInstance()\n+                .getSupportedIdTokenEncryptionMethods();\n+        String idTokenEncryptionMethod = application.getIdTokenEncryptionMethod();\n+        if (!supportedIdTokenEncryptionMethods.contains(idTokenEncryptionMethod)) {\n+            String msg = String.format(\"'%s' IdToken Encryption Method is not allowed.\", idTokenEncryptionMethod);\n+            throw handleClientError(INVALID_REQUEST, msg);\n+        }\n+        return idTokenEncryptionMethod;\n+    }\n+\n+    /**\n+     * Get the IdToken Encryption Algorithm registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionAlgorithm\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionAlgorithm(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionAlgorithms = OAuthServerConfiguration.getInstance()\n+                .getSupportedIdTokenEncryptionAlgorithm();\n+        String idTokenEncryptionAlgorithm = application.getIdTokenEncryptionAlgorithm();\n+        if (!supportedIdTokenEncryptionAlgorithms.contains(idTokenEncryptionAlgorithm)) {\n+            String msg = String.format(\"'%s' IdToken Encryption Method is not allowed.\", idTokenEncryptionAlgorithm);\n+            throw handleClientError(INVALID_REQUEST, msg);\n+        }\n+        return idTokenEncryptionAlgorithm;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba6b892cfa18a3ff2c5016c2b8b2263ce374dc1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzNzU5MQ==", "bodyText": "Fixed", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r385637591", "createdAt": "2020-02-28T11:09:06Z", "author": {"login": "Sathiyakugan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,44 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+\n+    /**\n+     * Get the IdToken Encryption Method registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionMethod\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionMethod(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionMethods = OAuthServerConfiguration.getInstance()\n+                .getSupportedIdTokenEncryptionMethods();\n+        String idTokenEncryptionMethod = application.getIdTokenEncryptionMethod();\n+        if (!supportedIdTokenEncryptionMethods.contains(idTokenEncryptionMethod)) {\n+            String msg = String.format(\"'%s' IdToken Encryption Method is not allowed.\", idTokenEncryptionMethod);\n+            throw handleClientError(INVALID_REQUEST, msg);\n+        }\n+        return idTokenEncryptionMethod;\n+    }\n+\n+    /**\n+     * Get the IdToken Encryption Algorithm registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionAlgorithm\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionAlgorithm(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {\n+        List<String> supportedIdTokenEncryptionAlgorithms = OAuthServerConfiguration.getInstance()\n+                .getSupportedIdTokenEncryptionAlgorithm();\n+        String idTokenEncryptionAlgorithm = application.getIdTokenEncryptionAlgorithm();\n+        if (!supportedIdTokenEncryptionAlgorithms.contains(idTokenEncryptionAlgorithm)) {\n+            String msg = String.format(\"'%s' IdToken Encryption Method is not allowed.\", idTokenEncryptionAlgorithm);\n+            throw handleClientError(INVALID_REQUEST, msg);\n+        }\n+        return idTokenEncryptionAlgorithm;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzA5Ng=="}, "originalCommit": {"oid": "2ba6b892cfa18a3ff2c5016c2b8b2263ce374dc1"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODM4ODQyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo1OToxN1rOFvxL9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMTowOTowOVrOFvxc5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzI3MQ==", "bodyText": "remove extra line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r385633271", "createdAt": "2020-02-28T10:59:17Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,44 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ba6b892cfa18a3ff2c5016c2b8b2263ce374dc1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzNzYwNw==", "bodyText": "Fixed", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r385637607", "createdAt": "2020-02-28T11:09:09Z", "author": {"login": "Sathiyakugan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,44 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYzMzI3MQ=="}, "originalCommit": {"oid": "2ba6b892cfa18a3ff2c5016c2b8b2263ce374dc1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM2NDgwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTo0Mjo0OVrOHfdcLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNDoyMVrOHgI_Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MDI1Mg==", "bodyText": "Isn't this redundant?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r502750252", "createdAt": "2020-10-10T05:42:49Z", "author": {"login": "darshanasbg"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -279,9 +279,16 @@ public OAuthConsumerAppDTO registerAndRetrieveOAuthApplicationData(OAuthConsumer\n                     // Set OIDC Config Properties.\n                     app.setRequestObjectSignatureValidationEnabled(\n                             application.isRequestObjectSignatureValidationEnabled());\n-                    app.setIdTokenEncryptionEnabled(application.isIdTokenEncryptionEnabled());\n-                    app.setIdTokenEncryptionAlgorithm(application.getIdTokenEncryptionAlgorithm());\n-                    app.setIdTokenEncryptionMethod(application.getIdTokenEncryptionMethod());\n+\n+                    // Validate IdToken Encryption configurations.\n+                    if (application.isIdTokenEncryptionEnabled()) {\n+                        app.setIdTokenEncryptionEnabled(application.isIdTokenEncryptionEnabled());\n+                        if (application.isIdTokenEncryptionEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4875b1c8a1e92f0fc8c01dcf04f5d27528c1364"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2Mzc0Mg==", "bodyText": "Fixed in 4adb239#diff-1e769d65ab3dba0fc2f6ab9b801f1e72", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r503463742", "createdAt": "2020-10-12T18:24:21Z", "author": {"login": "Sathiyakugan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -279,9 +279,16 @@ public OAuthConsumerAppDTO registerAndRetrieveOAuthApplicationData(OAuthConsumer\n                     // Set OIDC Config Properties.\n                     app.setRequestObjectSignatureValidationEnabled(\n                             application.isRequestObjectSignatureValidationEnabled());\n-                    app.setIdTokenEncryptionEnabled(application.isIdTokenEncryptionEnabled());\n-                    app.setIdTokenEncryptionAlgorithm(application.getIdTokenEncryptionAlgorithm());\n-                    app.setIdTokenEncryptionMethod(application.getIdTokenEncryptionMethod());\n+\n+                    // Validate IdToken Encryption configurations.\n+                    if (application.isIdTokenEncryptionEnabled()) {\n+                        app.setIdTokenEncryptionEnabled(application.isIdTokenEncryptionEnabled());\n+                        if (application.isIdTokenEncryptionEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MDI1Mg=="}, "originalCommit": {"oid": "b4875b1c8a1e92f0fc8c01dcf04f5d27528c1364"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM2NDg3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTo0Mjo1NFrOHfdcNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyNDoyOFrOHgI_cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MDI2MQ==", "bodyText": "Isn't this redundant?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r502750261", "createdAt": "2020-10-10T05:42:54Z", "author": {"login": "darshanasbg"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -449,9 +456,15 @@ public void updateConsumerApplication(OAuthConsumerAppDTO consumerAppDTO) throws\n             oauthappdo.setScopeValidators(filterScopeValidators(consumerAppDTO));\n             oauthappdo.setRequestObjectSignatureValidationEnabled(consumerAppDTO\n                     .isRequestObjectSignatureValidationEnabled());\n-            oauthappdo.setIdTokenEncryptionEnabled(consumerAppDTO.isIdTokenEncryptionEnabled());\n-            oauthappdo.setIdTokenEncryptionAlgorithm(consumerAppDTO.getIdTokenEncryptionAlgorithm());\n-            oauthappdo.setIdTokenEncryptionMethod(consumerAppDTO.getIdTokenEncryptionMethod());\n+            // Validate IdToken Encryption configurations.\n+            if (consumerAppDTO.isIdTokenEncryptionEnabled()) {\n+                oauthappdo.setIdTokenEncryptionEnabled(consumerAppDTO.isIdTokenEncryptionEnabled());\n+                if (consumerAppDTO.isIdTokenEncryptionEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4875b1c8a1e92f0fc8c01dcf04f5d27528c1364"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2Mzc5Mg==", "bodyText": "Fixed in 4adb239#diff-1e769d65ab3dba0fc2f6ab9b801f1e72", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r503463792", "createdAt": "2020-10-12T18:24:28Z", "author": {"login": "Sathiyakugan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -449,9 +456,15 @@ public void updateConsumerApplication(OAuthConsumerAppDTO consumerAppDTO) throws\n             oauthappdo.setScopeValidators(filterScopeValidators(consumerAppDTO));\n             oauthappdo.setRequestObjectSignatureValidationEnabled(consumerAppDTO\n                     .isRequestObjectSignatureValidationEnabled());\n-            oauthappdo.setIdTokenEncryptionEnabled(consumerAppDTO.isIdTokenEncryptionEnabled());\n-            oauthappdo.setIdTokenEncryptionAlgorithm(consumerAppDTO.getIdTokenEncryptionAlgorithm());\n-            oauthappdo.setIdTokenEncryptionMethod(consumerAppDTO.getIdTokenEncryptionMethod());\n+            // Validate IdToken Encryption configurations.\n+            if (consumerAppDTO.isIdTokenEncryptionEnabled()) {\n+                oauthappdo.setIdTokenEncryptionEnabled(consumerAppDTO.isIdTokenEncryptionEnabled());\n+                if (consumerAppDTO.isIdTokenEncryptionEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MDI2MQ=="}, "originalCommit": {"oid": "b4875b1c8a1e92f0fc8c01dcf04f5d27528c1364"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODM2NTQ1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNTo0NDoxNlrOHfdcgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNDowNTo0NlrOHswPBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MDMzNg==", "bodyText": "Should this be a private method?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r502750336", "createdAt": "2020-10-10T05:44:16Z", "author": {"login": "darshanasbg"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,45 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+\n+    /**\n+     * Get the IdToken Encryption Method registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionMethod\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionMethod(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4875b1c8a1e92f0fc8c01dcf04f5d27528c1364"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY4OTY3MQ==", "bodyText": "Fixed with #1470", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1337#discussion_r516689671", "createdAt": "2020-11-03T14:05:46Z", "author": {"login": "Sathiyakugan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1295,6 +1308,45 @@ void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n         return requestedScopeValidators;\n     }\n \n+\n+    /**\n+     * Get the IdToken Encryption Method registered by the user and filter the allowed one.\n+     *\n+     * @param application Application user have registered\n+     * @return idTokenEncryptionMethod\n+     * @throws IdentityOAuthAdminException Identity OAuthAdmin exception.\n+     */\n+    String filterIdTokenEncryptionMethod(OAuthConsumerAppDTO application) throws IdentityOAuthAdminException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MDMzNg=="}, "originalCommit": {"oid": "b4875b1c8a1e92f0fc8c01dcf04f5d27528c1364"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3657, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}