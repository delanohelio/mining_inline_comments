{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4ODUwNzI5", "number": 1380, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzoyOTo0OVrOD9EcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNDowOTo0M1rOD9PAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzYyNDkwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNzoyOTo0OVrOGWY0MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoyNzo0MVrOGWb4Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyODQzMw==", "bodyText": "Lets add a debug log with the exception", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1380#discussion_r426128433", "createdAt": "2020-05-16T07:29:49Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -2822,6 +2823,25 @@ public static Certificate getX509CertOfOAuthApp(String clientId,\n         }\n     }\n \n+    /**\n+     * Return true if the token identifier is a parsable JWT.\n+     *\n+     * @param tokenIdentifier String JWT token identifier.\n+     * @return true for a JWT token.\n+     */\n+    public static boolean isParsableJWT(String tokenIdentifier) {\n+\n+        if (StringUtils.isEmpty(tokenIdentifier)) {\n+            return false;\n+        }\n+        try {\n+            JWTParser.parse(tokenIdentifier);\n+            return true;\n+        } catch (ParseException e) {\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "201acce27c9b11a2c09edacdaaea5e9367bae1fa"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODYwMw==", "bodyText": "Fixed in 8b47032", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1380#discussion_r426178603", "createdAt": "2020-05-16T18:27:41Z", "author": {"login": "tharindu-bandara"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -2822,6 +2823,25 @@ public static Certificate getX509CertOfOAuthApp(String clientId,\n         }\n     }\n \n+    /**\n+     * Return true if the token identifier is a parsable JWT.\n+     *\n+     * @param tokenIdentifier String JWT token identifier.\n+     * @return true for a JWT token.\n+     */\n+    public static boolean isParsableJWT(String tokenIdentifier) {\n+\n+        if (StringUtils.isEmpty(tokenIdentifier)) {\n+            return false;\n+        }\n+        try {\n+            JWTParser.parse(tokenIdentifier);\n+            return true;\n+        } catch (ParseException e) {\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyODQzMw=="}, "originalCommit": {"oid": "201acce27c9b11a2c09edacdaaea5e9367bae1fa"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTM1NTMxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNDowOTo0M1rOGWm85Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxMTowNjo1OVrOGWyUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MDAzNw==", "bodyText": "OAuth2JWTTokenValidator is extending DefaultOAuth2TokenValidator. this can cause a problem, right?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1380#discussion_r426360037", "createdAt": "2020-05-18T04:09:43Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -230,11 +233,16 @@ public OAuth2IntrospectionResponseDTO buildIntrospectionResponse(OAuth2TokenVali\n         // To hold the applicable validators list from all the available validators. This list will be prioritized if we\n         // have a token_type_hint.\n         List<OAuth2TokenValidator> applicableValidators = new ArrayList<>();\n+        boolean isJWTTokenValidation = isJWTTokenValidation(oAuth2Token.getIdentifier());\n \n         // If we have a token type hint, we have to prioritize our list.\n         if (oAuth2Token.getTokenType() != null) {\n             if (tokenValidators.get(oAuth2Token.getTokenType()) != null) {\n-                applicableValidators.add(tokenValidators.get(oAuth2Token.getTokenType()));\n+                // Ignore bearer token validators if the token is JWT.\n+                if (!(isJWTTokenValidation && tokenValidators.get(oAuth2Token.getTokenType()) instanceof", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b470323deb3712aede396c84307e8c6c5d305e9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjU0NjMxMw==", "bodyText": "Fixed in 1b45f0d", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1380#discussion_r426546313", "createdAt": "2020-05-18T11:06:59Z", "author": {"login": "tharindu-bandara"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -230,11 +233,16 @@ public OAuth2IntrospectionResponseDTO buildIntrospectionResponse(OAuth2TokenVali\n         // To hold the applicable validators list from all the available validators. This list will be prioritized if we\n         // have a token_type_hint.\n         List<OAuth2TokenValidator> applicableValidators = new ArrayList<>();\n+        boolean isJWTTokenValidation = isJWTTokenValidation(oAuth2Token.getIdentifier());\n \n         // If we have a token type hint, we have to prioritize our list.\n         if (oAuth2Token.getTokenType() != null) {\n             if (tokenValidators.get(oAuth2Token.getTokenType()) != null) {\n-                applicableValidators.add(tokenValidators.get(oAuth2Token.getTokenType()));\n+                // Ignore bearer token validators if the token is JWT.\n+                if (!(isJWTTokenValidation && tokenValidators.get(oAuth2Token.getTokenType()) instanceof", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjM2MDAzNw=="}, "originalCommit": {"oid": "8b470323deb3712aede396c84307e8c6c5d305e9"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3703, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}