{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNzM4NzEw", "number": 1374, "title": "Add Global scope validator api", "bodyText": "Proposed changes in this pull request\n\n\nResolves wso2/product-is#8248\n\n\nThis introduces a new interface to engage scope validators at the server/tenant level. Therefore all the validators implement this interface should Engage after application-level validators at ResponseTypeHandler level or GrantHandler level.", "createdAt": "2020-05-04T05:01:25Z", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374", "merged": true, "mergeCommit": {"oid": "9bf192eb47655236734dfba671ad331752741cb7"}, "closed": true, "closedAt": "2020-05-04T17:02:28Z", "author": {"login": "piraveena"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd40xwgBqjMyOTgzNTgyNDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceA3KqAH2gAyNDEyNzM4NzEwOjliZDcyNGU0MGViNjljOWI4MGJjNzk2ZDAyMmJiMjkxYWJhZWZmMmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0488ec2da745eebbf6f74aa6abed7555f408b40", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/f0488ec2da745eebbf6f74aa6abed7555f408b40", "committedDate": "2020-05-04T05:00:23Z", "message": "Add Global scope validator api"}, "afterCommit": {"oid": "0dd5234a834b3eba86b992db700e56f2acd3146c", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0dd5234a834b3eba86b992db700e56f2acd3146c", "committedDate": "2020-05-04T05:41:58Z", "message": "Add Global scope validator api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dd5234a834b3eba86b992db700e56f2acd3146c", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/0dd5234a834b3eba86b992db700e56f2acd3146c", "committedDate": "2020-05-04T05:41:58Z", "message": "Add Global scope validator api"}, "afterCommit": {"oid": "6484d835bc4b2924832cf577776ca6b55738324a", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6484d835bc4b2924832cf577776ca6b55738324a", "committedDate": "2020-05-04T05:43:26Z", "message": "Add Global scope validator api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NzUzNjcy", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#pullrequestreview-404753672", "createdAt": "2020-05-04T07:20:14Z", "commit": {"oid": "6484d835bc4b2924832cf577776ca6b55738324a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzoyMDoxNFrOGP1AuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwNzoyMDoxNFrOGP1AuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI1MDM2MQ==", "bodyText": "Let's not have this API at all", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419250361", "createdAt": "2020-05-04T07:20:14Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws UserStoreException,\n+            IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.\n+     *\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @return True if the user has enough permission to generate tokens with requested scopes or\n+     * no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws IdentityOAuth2Exception,\n+            UserStoreException;\n+\n+    /**\n+     * Validates scopes in the token validation request and manipulate the permitted scopes within the request.\n+     *\n+     * @param accessTokenDO AccessTokenDO.\n+     * @return True if the user has enough permission to access the resource with requested scopes or no scopes are\n+     * requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(AccessTokenDO accessTokenDO) throws IdentityOAuth2Exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6484d835bc4b2924832cf577776ca6b55738324a"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6484d835bc4b2924832cf577776ca6b55738324a", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6484d835bc4b2924832cf577776ca6b55738324a", "committedDate": "2020-05-04T05:43:26Z", "message": "Add Global scope validator api"}, "afterCommit": {"oid": "75e88c09b8f1935ebd0496bf1c7b9e419f5992e0", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/75e88c09b8f1935ebd0496bf1c7b9e419f5992e0", "committedDate": "2020-05-04T08:52:52Z", "message": "Add Global scope validator api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75e88c09b8f1935ebd0496bf1c7b9e419f5992e0", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/75e88c09b8f1935ebd0496bf1c7b9e419f5992e0", "committedDate": "2020-05-04T08:52:52Z", "message": "Add Global scope validator api"}, "afterCommit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "committedDate": "2020-05-04T08:57:21Z", "message": "Add Global scope validator api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODEzODgw", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#pullrequestreview-404813880", "createdAt": "2020-05-04T09:01:05Z", "commit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTowMTowNlrOGP3_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTowMTowNlrOGP3_KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5OTExMw==", "bodyText": "How do we intend this API to be used?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419299113", "createdAt": "2020-05-04T09:01:06Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODE0Mjkx", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#pullrequestreview-404814291", "createdAt": "2020-05-04T09:01:44Z", "commit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTowMTo0NFrOGP4AcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTowMTo0NFrOGP4AcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5OTQ0MQ==", "bodyText": "Do we need to allow UserStoreException to be thrown from the interface?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419299441", "createdAt": "2020-05-04T09:01:44Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws UserStoreException,\n+            IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.\n+     *\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @return True if the user has enough permission to generate tokens with requested scopes or\n+     * no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws IdentityOAuth2Exception,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODc4Nzg1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#pullrequestreview-404878785", "createdAt": "2020-05-04T10:45:54Z", "commit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0NTo1NFrOGP7JNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMDo0NTo1NFrOGP7JNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1MDgzOA==", "bodyText": "Should throw only 'IdentityOAuth2Exception'", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419350838", "createdAt": "2020-05-04T10:45:54Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.user.api.UserStoreException;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws UserStoreException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/2e89aa9f9fc0c34564ed7dce4d88339d83d4555c", "committedDate": "2020-05-04T08:57:21Z", "message": "Add Global scope validator api"}, "afterCommit": {"oid": "b4f7db5beb6336150362d67a3b2d49c4ca87c49e", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b4f7db5beb6336150362d67a3b2d49c4ca87c49e", "committedDate": "2020-05-04T11:26:44Z", "message": "Add Global scope validator api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTk4NzE5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#pullrequestreview-404998719", "createdAt": "2020-05-04T13:42:55Z", "commit": {"oid": "b4f7db5beb6336150362d67a3b2d49c4ca87c49e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDExMjU2", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#pullrequestreview-405011256", "createdAt": "2020-05-04T13:56:54Z", "commit": {"oid": "b4f7db5beb6336150362d67a3b2d49c4ca87c49e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo1Njo1NVrOGQBifg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzo1Njo1NVrOGQBifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ1NTYxNA==", "bodyText": "Shall we say 'token validation request' here", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419455614", "createdAt": "2020-05-04T13:56:55Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.validators.OAuth2TokenValidationMessageContext;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request.\n+     *\n+     * @param authzReqMessageContext Authorization request.\n+     * @return True if the user has enough permission to generate tokens or authorization codes with requested\n+     * scopes or no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthAuthzReqMessageContext authzReqMessageContext) throws IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.\n+     *\n+     * @param tokReqMsgCtx OAuthTokenReqMessageContext.\n+     * @return True if the user has enough permission to generate tokens with requested scopes or\n+     * no scopes are requested, otherwise false.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws IdentityOAuth2Exception;\n+\n+    /**\n+     * Validates scopes in the token request and manipulate the permitted scopes within the request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4f7db5beb6336150362d67a3b2d49c4ca87c49e"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dce897a9485a56733c8ffd1db2b2851f0826f82", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/5dce897a9485a56733c8ffd1db2b2851f0826f82", "committedDate": "2020-05-04T14:19:40Z", "message": "Add Global scope validator api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b4f7db5beb6336150362d67a3b2d49c4ca87c49e", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b4f7db5beb6336150362d67a3b2d49c4ca87c49e", "committedDate": "2020-05-04T11:26:44Z", "message": "Add Global scope validator api"}, "afterCommit": {"oid": "5dce897a9485a56733c8ffd1db2b2851f0826f82", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/5dce897a9485a56733c8ffd1db2b2851f0826f82", "committedDate": "2020-05-04T14:19:40Z", "message": "Add Global scope validator api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDU5NzM2", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#pullrequestreview-405059736", "createdAt": "2020-05-04T14:48:10Z", "commit": {"oid": "5dce897a9485a56733c8ffd1db2b2851f0826f82"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo0ODoxMFrOGQD1tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo0ODoxMFrOGQD1tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MzMwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Validates scopes in the authorization  request and manipulate the permitted scopes within the request. Engage\n          \n          \n            \n                 * Validates scopes in the authorization request and manipulate the permitted scopes within the request. Engage", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1374#discussion_r419493300", "createdAt": "2020-05-04T14:48:10Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.validators.scope;\n+\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.validators.OAuth2TokenValidationMessageContext;\n+\n+/**\n+ * This is a global level interface for scope validation. This needs to be engaged after application level validators.\n+ */\n+public interface ScopeValidator {\n+\n+    /**\n+     * Checks whether the validator can be engaged.\n+     *\n+     * @return True if it can handle, otherwise false.\n+     */\n+    boolean canHandle();\n+\n+    /**\n+     * Validates scopes in the authorization  request and manipulate the permitted scopes within the request. Engage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dce897a9485a56733c8ffd1db2b2851f0826f82"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd724e40eb69c9b80bc796d022bb291abaeff2a", "author": {"user": {"login": "piraveena", "name": "Piraveena Paralogarajah"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9bd724e40eb69c9b80bc796d022bb291abaeff2a", "committedDate": "2020-05-04T15:04:04Z", "message": "Update components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/scope/ScopeValidator.java\n\nCo-authored-by: Farasath Ahamed <mefarazath@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3275, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}