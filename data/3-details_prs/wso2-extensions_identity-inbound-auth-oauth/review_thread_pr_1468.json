{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDE1MzM0", "number": 1468, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoxNDoxNVrOEskU0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDoxNDo0N1rOEvl2rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY3OTU1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoxNDoxNVrOHf4T0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMzo0N1rOHh5f4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDQ4Mg==", "bodyText": "Lets move the variable to the top. Would be cleaner.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r503190482", "createdAt": "2020-10-12T10:14:15Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "diffHunk": "@@ -47,6 +48,28 @@\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n \n+    public List<ScopeValidator> getScopeValidators() {\n+\n+        return scopeValidators;\n+    }\n+\n+    public void addScopeValidator(ScopeValidator scopeValidator) {\n+\n+        scopeValidators.add(scopeValidator);\n+    }\n+\n+    public void removeScopeValidator(ScopeValidator scopeValidator) {\n+\n+        scopeValidators.remove(scopeValidator);\n+    }\n+\n+    public void setScopeValidators(List<ScopeValidator> scopeValidators) {\n+\n+        this.scopeValidators = scopeValidators;\n+    }\n+\n+    private List<ScopeValidator> scopeValidators = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f56dc3bfdb08306c6a9935b88786a99f728df4b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNzEwNg==", "bodyText": "moved in 79d44c4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r505307106", "createdAt": "2020-10-15T08:03:47Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "diffHunk": "@@ -47,6 +48,28 @@\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n \n+    public List<ScopeValidator> getScopeValidators() {\n+\n+        return scopeValidators;\n+    }\n+\n+    public void addScopeValidator(ScopeValidator scopeValidator) {\n+\n+        scopeValidators.add(scopeValidator);\n+    }\n+\n+    public void removeScopeValidator(ScopeValidator scopeValidator) {\n+\n+        scopeValidators.remove(scopeValidator);\n+    }\n+\n+    public void setScopeValidators(List<ScopeValidator> scopeValidators) {\n+\n+        this.scopeValidators = scopeValidators;\n+    }\n+\n+    private List<ScopeValidator> scopeValidators = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDQ4Mg=="}, "originalCommit": {"oid": "2f56dc3bfdb08306c6a9935b88786a99f728df4b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY4MTgzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoxNDo1NFrOHf4VRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowMzo1OVrOHh5hPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDg1Mg==", "bodyText": "Add method comments to the public methods", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r503190852", "createdAt": "2020-10-12T10:14:54Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "diffHunk": "@@ -47,6 +48,28 @@\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n \n+    public List<ScopeValidator> getScopeValidators() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f56dc3bfdb08306c6a9935b88786a99f728df4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNzQ1Mg==", "bodyText": "added in 79d44c4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r505307452", "createdAt": "2020-10-15T08:03:59Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthComponentServiceHolder.java", "diffHunk": "@@ -47,6 +48,28 @@\n     private List<TokenBindingMetaDataDTO> tokenBindingMetaDataDTOs = new ArrayList<>();\n     private OAuthAdminServiceImpl oAuthAdminService;\n \n+    public List<ScopeValidator> getScopeValidators() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5MDg1Mg=="}, "originalCommit": {"oid": "2f56dc3bfdb08306c6a9935b88786a99f728df4b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTcxMzIzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDoyNDoxMVrOHf4orw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODowNDowOVrOHh5h_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NTgyMw==", "bodyText": "Let's add a method comment", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r503195823", "createdAt": "2020-10-12T10:24:11Z", "author": {"login": "GANGANI"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java", "diffHunk": "@@ -454,6 +478,11 @@ public boolean isShowDisplayNameInConsentPage() {\n         return showDisplayNameInConsentPage;\n     }\n \n+    public List<String> getAllowedScopes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f56dc3bfdb08306c6a9935b88786a99f728df4b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTMwNzY0Nw==", "bodyText": "added in 79d44c4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r505307647", "createdAt": "2020-10-15T08:04:09Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/config/OAuthServerConfiguration.java", "diffHunk": "@@ -454,6 +478,11 @@ public boolean isShowDisplayNameInConsentPage() {\n         return showDisplayNameInConsentPage;\n     }\n \n+    public List<String> getAllowedScopes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE5NTgyMw=="}, "originalCommit": {"oid": "2f56dc3bfdb08306c6a9935b88786a99f728df4b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTY1NTYwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/DefaultOAuth2TokenValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoxOTowOFrOHi5irA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMjowNzozMVrOHjuTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjM5Ng==", "bodyText": "Need to add the logic to handle allowed scopes", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r506356396", "createdAt": "2020-10-16T12:19:08Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/DefaultOAuth2TokenValidator.java", "diffHunk": "@@ -110,6 +113,21 @@ public boolean validateScope(OAuth2TokenValidationMessageContext messageContext)\n                             \" are not found in the server configuration \", StringUtils.join(appScopeValidators, \", \"),\n                     app.getApplicationName(), OAuth2Util.getTenantDomainOfOauthApp(app)));\n         }\n+\n+        // Deriving the global level scope validator implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIyMDg5OQ==", "bodyText": "Added in AccessTokenIssuer  in 328d264", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507220899", "createdAt": "2020-10-18T22:07:31Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/DefaultOAuth2TokenValidator.java", "diffHunk": "@@ -110,6 +113,21 @@ public boolean validateScope(OAuth2TokenValidationMessageContext messageContext)\n                             \" are not found in the server configuration \", StringUtils.join(appScopeValidators, \", \"),\n                     app.getApplicationName(), OAuth2Util.getTenantDomainOfOauthApp(app)));\n         }\n+\n+        // Deriving the global level scope validator implementations.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjM5Ng=="}, "originalCommit": {"oid": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTY1NjA0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoxOToxMlrOHi5i-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMjowNzowNlrOHjuTCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjQ3Mg==", "bodyText": "Need to add the logic to handle allowed scopes", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r506356472", "createdAt": "2020-10-16T12:19:12Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -250,6 +252,20 @@ public boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws Id\n                 }\n             }\n         }\n+        // Deriving the list of global level scope validation implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIyMDc0Ng==", "bodyText": "Added in 328d264", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507220746", "createdAt": "2020-10-18T22:07:06Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -250,6 +252,20 @@ public boolean validateScope(OAuthTokenReqMessageContext tokReqMsgCtx) throws Id\n                 }\n             }\n         }\n+        // Deriving the list of global level scope validation implementations.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjQ3Mg=="}, "originalCommit": {"oid": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTY1NzU5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/AbstractResponseTypeHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjoxOTozOFrOHi5j-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQyMjowNjozOFrOHjuSeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjcyOQ==", "bodyText": "Need to add the logic to handle allowed scopes.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r506356729", "createdAt": "2020-10-16T12:19:38Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/AbstractResponseTypeHandler.java", "diffHunk": "@@ -101,6 +103,19 @@ public boolean validateScope(OAuthAuthzReqMessageContext oauthAuthzMsgCtx) throw\n                 .getAuthorizationCodeValidityPeriod());\n         oauthAuthzMsgCtx.setAccessTokenIssuedTime(scopeValidationCallback.getAccessTokenValidityPeriod());\n         oauthAuthzMsgCtx.setApprovedScope(scopeValidationCallback.getApprovedScope());\n+        // Deriving the global level scope validator implementations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzIyMDYwMA==", "bodyText": "Added in upper level (AuthorizationHandlerManager) in 328d264", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507220600", "createdAt": "2020-10-18T22:06:38Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/handlers/AbstractResponseTypeHandler.java", "diffHunk": "@@ -101,6 +103,19 @@ public boolean validateScope(OAuthAuthzReqMessageContext oauthAuthzMsgCtx) throw\n                 .getAuthorizationCodeValidityPeriod());\n         oauthAuthzMsgCtx.setAccessTokenIssuedTime(scopeValidationCallback.getAccessTokenValidityPeriod());\n         oauthAuthzMsgCtx.setApprovedScope(scopeValidationCallback.getApprovedScope());\n+        // Deriving the global level scope validator implementations.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM1NjcyOQ=="}, "originalCommit": {"oid": "79d44c4e3bce8a5f1c57e5dce757c1bb19337031"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODU3MjI0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDo0MTowM1rOHj8SkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMjowNDowN1rOHkLA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MDAwMQ==", "bodyText": "Do we need to mention at which level the scope validation fails in the response?\nWe could include that detail in a debug log.\n@IsuraD WDYT?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507450001", "createdAt": "2020-10-19T04:41:03Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -473,13 +481,14 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             return buildIntrospectionErrorResponse(\"Invalid access delegation\");\n         }\n \n-        // Validate scopes.\n+        // Validate scopes at app level.\n         if (!tokenValidator.validateScope(messageContext)) {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n-            return buildIntrospectionErrorResponse(\"Scope validation failed\");\n+            return buildIntrospectionErrorResponse(\"Scope validation failed at app level\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4NjQ5Mg==", "bodyText": "+1 to have a detailed debug log", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507686492", "createdAt": "2020-10-19T11:55:28Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -473,13 +481,14 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             return buildIntrospectionErrorResponse(\"Invalid access delegation\");\n         }\n \n-        // Validate scopes.\n+        // Validate scopes at app level.\n         if (!tokenValidator.validateScope(messageContext)) {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n-            return buildIntrospectionErrorResponse(\"Scope validation failed\");\n+            return buildIntrospectionErrorResponse(\"Scope validation failed at app level\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MDAwMQ=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY5MTI1MA==", "bodyText": "changed in 9e9c853", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507691250", "createdAt": "2020-10-19T12:04:07Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -473,13 +481,14 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             return buildIntrospectionErrorResponse(\"Invalid access delegation\");\n         }\n \n-        // Validate scopes.\n+        // Validate scopes at app level.\n         if (!tokenValidator.validateScope(messageContext)) {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n-            return buildIntrospectionErrorResponse(\"Scope validation failed\");\n+            return buildIntrospectionErrorResponse(\"Scope validation failed at app level\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MDAwMQ=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODU3ODc3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDo0MzoyMVrOHj8W0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyMzo0NFrOHj_SXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTA5MQ==", "bodyText": "Duplicate code. Reuse the method defined in OAuth2Util", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507451091", "createdAt": "2020-10-19T04:43:21Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -142,10 +151,27 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n         if (valid) {\n             //Add authorized internal scopes to the request for sending in the response.\n             addAuthorizedInternalScopes(authzReqMsgCtx, authorizedInternalScopes);\n+            addAllowedScopes(authzReqMsgCtx, requestedAllowedScopes.toArray(new String[requestedAllowedScopes.size()]));\n         }\n         return authorizeRespDTO;\n     }\n \n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check\n+     * @return - 'true' if the scope is white listed. 'false' if not.\n+     */\n+    public boolean isAllowedScope(List<String> scopeSkipList, String scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5OTEwMA==", "bodyText": "removed in 4d2bf08", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507499100", "createdAt": "2020-10-19T06:23:44Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -142,10 +151,27 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n         if (valid) {\n             //Add authorized internal scopes to the request for sending in the response.\n             addAuthorizedInternalScopes(authzReqMsgCtx, authorizedInternalScopes);\n+            addAllowedScopes(authzReqMsgCtx, requestedAllowedScopes.toArray(new String[requestedAllowedScopes.size()]));\n         }\n         return authorizeRespDTO;\n     }\n \n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check\n+     * @return - 'true' if the scope is white listed. 'false' if not.\n+     */\n+    public boolean isAllowedScope(List<String> scopeSkipList, String scope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTA5MQ=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODU4MjIxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNDo0NDoyMlrOHj8ZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNjoyMzozM1rOHj_R_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTY2Mg==", "bodyText": "Let's change the variable name to allowedScopes", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507451662", "createdAt": "2020-10-19T04:44:22Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5OTAwNA==", "bodyText": "changed in 4d2bf08", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507499004", "createdAt": "2020-10-19T06:23:33Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ1MTY2Mg=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3ODY3Mjg0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwNToxMzoyM1rOHj9VZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOToxMjoyMFrOHkFAbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA==", "bodyText": "We need to remove these scopes from authzReqMsgCtx before engaging the  validateScope method.\nCheck the usage of removeInternalScopes method for reference.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507467108", "createdAt": "2020-10-19T05:13:23Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        for (String scope : requestedScope) {\n+            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+                requestedAllowedScopes.add(scope);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ5Njg5MQ==", "bodyText": "Some scopes which can come under allowed scopes like openId can used at the grant handler level as well, so we can not remove it from the requested scopes like internal scopes.  @malithie can confirm this, as we had a discussion on this previously as well.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507496891", "createdAt": "2020-10-19T06:20:16Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        for (String scope : requestedScope) {\n+            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+                requestedAllowedScopes.add(scope);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzUwODg0Ng==", "bodyText": "In the default scope validator we have specially handled[1] the openid scope so we don't need to add it to the allowed scopes. If we don't skip the allowed scopes from scope validators then there is a chance one of the scope validators will fail the request.\n[1] - https://github.com/wso2-extensions/identity-inbound-auth-oauth/blob/master/components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/JDBCScopeValidator.java#L208", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507508846", "createdAt": "2020-10-19T06:46:45Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        for (String scope : requestedScope) {\n+            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+                requestedAllowedScopes.add(scope);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU0MDAyNg==", "bodyText": "To address the requirement, the correct approach is to skip passing allowed scopes for further validations for downstream handlers.\nTo do that, what I suggested was to identify the impact of allowing scopes at the handler level, based on the fact that those are being utilized at a grant handler or lower levels for decisions.\nIn such a case, we need to take such validations to the handler level and fix the downstream handlers, and also capture the backward compatibility concerns (document) in case someone has extended in lower levels and have taken decisions.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507540026", "createdAt": "2020-10-19T07:49:21Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        for (String scope : requestedScope) {\n+            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+                requestedAllowedScopes.add(scope);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzU5MjgxMw==", "bodyText": "ack , addressed in 712da68", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507592813", "createdAt": "2020-10-19T09:12:20Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,15 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScope = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        for (String scope : requestedScope) {\n+            if (OAuth2Util.isAllowedScope(allowedScope, scope)) {\n+                requestedAllowedScopes.add(scope);\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQ2NzEwOA=="}, "originalCommit": {"oid": "328d264a2e70a4028ddfcbf05a25f57e3e873174"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTU1ODIzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOToyOToyNVrOHkFqbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1MTowMFrOHkGgJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzU2NQ==", "bodyText": "Add space after method signature.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507603565", "createdAt": "2020-10-19T09:29:25Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n+        for (String scopeTobeSkipped : scopeSkipList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzMxOQ==", "bodyText": "addressed in 9f55ee3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507617319", "createdAt": "2020-10-19T09:51:00Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n+        for (String scopeTobeSkipped : scopeSkipList) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzU2NQ=="}, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTU2MDY4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOToyOTo1OFrOHkFr7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1MDo0MlrOHkGfdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Determines if the scope is specified in the whitelist.\n          \n          \n            \n                 * Determines if the scope is specified in the allowed list.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507603950", "createdAt": "2020-10-19T09:29:58Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzE0MA==", "bodyText": "changed in 9f55ee3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507617140", "createdAt": "2020-10-19T09:50:42Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwMzk1MA=="}, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTU3ODc3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTozNDoyMlrOHkF3EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1MDozNFrOHkGfJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNjgwMA==", "bodyText": "Missing param in javadoc comment", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507606800", "createdAt": "2020-10-19T09:34:22Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNzA2MA==", "bodyText": "fixed in 9f55ee3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507617060", "createdAt": "2020-10-19T09:50:34Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNjgwMA=="}, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTU4MTQ3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTozNTowM1rOHkF4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1MDoyM1rOHkGetA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzIwOQ==", "bodyText": "Lets rename scopeSkipList to something like allowedList for more clarity.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507607209", "createdAt": "2020-10-19T09:35:03Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNjk0OA==", "bodyText": "changed in 9f55ee3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507616948", "createdAt": "2020-10-19T09:50:23Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzIwOQ=="}, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTU4MzIwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTozNTozMVrOHkF5vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwOTo1MDoxNFrOHkGeVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzQ4Ng==", "bodyText": "Lets add a debug log to find what scopes were allowed since we are doing regex matching", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507607486", "createdAt": "2020-10-19T09:35:31Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n+        for (String scopeTobeSkipped : scopeSkipList) {\n+            if (scope.matches(scopeTobeSkipped)) {\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYxNjg1Mg==", "bodyText": "added in 9f55ee3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507616852", "createdAt": "2020-10-19T09:50:14Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3856,4 +3856,19 @@ private static void endTenantFlow() {\n \n         PrivilegedCarbonContext.endTenantFlow();\n     }\n+\n+    /**\n+     * Determines if the scope is specified in the whitelist.\n+     *\n+     * @param scope - The scope key to check.\n+     * @return - 'true' if the scope is allowed. 'false' if not.\n+     */\n+    public static boolean isAllowedScope(List<String> scopeSkipList, String scope) {\n+        for (String scopeTobeSkipped : scopeSkipList) {\n+            if (scope.matches(scopeTobeSkipped)) {\n+                return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzYwNzQ4Ng=="}, "originalCommit": {"oid": "712da68b56ac47cad8d15e773720e036846df432"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3OTgyODE4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMDozOToxN1rOHkIO-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMToyODozNFrOHkJ2UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0NTY4OA==", "bodyText": "Add null check for requestedScope. Also rename requestedScope to requestedScopes", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507645688", "createdAt": "2020-10-19T10:39:17Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,20 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();;\n+        for (String scope : requestedScope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f55ee3aa001b5471ee20f6625ffebee8394af5e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3MjE0NA==", "bodyText": "added in a93b154", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507672144", "createdAt": "2020-10-19T11:28:34Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,20 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScope = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();;\n+        for (String scope : requestedScope) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY0NTY4OA=="}, "originalCommit": {"oid": "9f55ee3aa001b5471ee20f6625ffebee8394af5e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDAwMjIyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMToyOToxNFrOHkJ3fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0ODo1N1rOHkKgSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3MjQ0NA==", "bodyText": "new String[0])", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507672444", "createdAt": "2020-10-19T11:29:14Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,22 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();\n+        if (requestedScopes != null) {\n+            for (String scope : requestedScopes) {\n+                if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n+                    requestedAllowedScopes.add(scope);\n+                } else {\n+                    requestedScopesList.add(scope);\n+                }\n+            }\n+            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(requestedScopesList.toArray(\n+                    new String[requestedScopesList.size()]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93b154c4c7b205e58ded516c4d53be85f268998"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4Mjg5MQ==", "bodyText": "changed in 760fadc", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507682891", "createdAt": "2020-10-19T11:48:57Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,22 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();\n+        if (requestedScopes != null) {\n+            for (String scope : requestedScopes) {\n+                if (OAuth2Util.isAllowedScope(allowedScopes, scope)) {\n+                    requestedAllowedScopes.add(scope);\n+                } else {\n+                    requestedScopesList.add(scope);\n+                }\n+            }\n+            authzReqMsgCtx.getAuthorizationReqDTO().setScopes(requestedScopesList.toArray(\n+                    new String[requestedScopesList.size()]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3MjQ0NA=="}, "originalCommit": {"oid": "a93b154c4c7b205e58ded516c4d53be85f268998"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDAxNTcwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTozMjo1MlrOHkJ_Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0OToxMFrOHkKg0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NDQyNw==", "bodyText": "rename requestedScopesList to scopesToValidate or scopesToBeValidated", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507674427", "createdAt": "2020-10-19T11:32:52Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,22 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a93b154c4c7b205e58ded516c4d53be85f268998"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MzAyNQ==", "bodyText": "renamed in 760fadc", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r507683025", "createdAt": "2020-10-19T11:49:10Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/authz/AuthorizationHandlerManager.java", "diffHunk": "@@ -129,6 +129,22 @@ private OAuth2AuthorizeRespDTO validateAuthzRequest(OAuth2AuthorizeReqDTO authzR\n             return authorizeRespDTO;\n         }\n \n+        List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+        List<String> requestedAllowedScopes = new ArrayList<>();\n+        String[] requestedScopes = authzReqMsgCtx.getAuthorizationReqDTO().getScopes();\n+        List<String> requestedScopesList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3NDQyNw=="}, "originalCommit": {"oid": "a93b154c4c7b205e58ded516c4d53be85f268998"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzM4NjMwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDoxNDoyMVrOHkp-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTowMDoxMVrOHkqr3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODY0Nw==", "bodyText": "additional ;", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508198647", "createdAt": "2020-10-20T04:14:21Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -408,9 +410,21 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             }\n \n         } else {\n-\n             try {\n                 accessTokenDO = OAuth2Util.findAccessToken(validationRequest.getAccessToken().getIdentifier(), false);\n+                List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+                String[] requestedScopes = accessTokenDO.getScope();\n+                List<String> scopesToBeValidated = new ArrayList<>();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9c8538844849ed3ae1ab5576aab28d498cc017"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxMDE0Mg==", "bodyText": "removed in a1fc7cc", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508210142", "createdAt": "2020-10-20T05:00:11Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -408,9 +410,21 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             }\n \n         } else {\n-\n             try {\n                 accessTokenDO = OAuth2Util.findAccessToken(validationRequest.getAccessToken().getIdentifier(), false);\n+                List<String> allowedScopes = OAuthServerConfiguration.getInstance().getAllowedScopes();\n+                String[] requestedScopes = accessTokenDO.getScope();\n+                List<String> scopesToBeValidated = new ArrayList<>();;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODY0Nw=="}, "originalCommit": {"oid": "9e9c8538844849ed3ae1ab5576aab28d498cc017"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzM4NzM1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDoxNDo0N1rOHkp_ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTowMDowMVrOHkqrqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODc5NA==", "bodyText": "add fullstop at the end", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508198794", "createdAt": "2020-10-20T04:14:47Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -473,13 +487,17 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             return buildIntrospectionErrorResponse(\"Invalid access delegation\");\n         }\n \n-        // Validate scopes.\n+        // Validate scopes at app level.\n         if (!tokenValidator.validateScope(messageContext)) {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Scope validation has failed at app level\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e9c8538844849ed3ae1ab5576aab28d498cc017"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxMDA5MA==", "bodyText": "added in a1fc7cc", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1468#discussion_r508210090", "createdAt": "2020-10-20T05:00:01Z", "author": {"login": "shilmyhasan"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/validators/TokenValidationHandler.java", "diffHunk": "@@ -473,13 +487,17 @@ private OAuth2IntrospectionResponseDTO validateAccessToken(OAuth2TokenValidation\n             return buildIntrospectionErrorResponse(\"Invalid access delegation\");\n         }\n \n-        // Validate scopes.\n+        // Validate scopes at app level.\n         if (!tokenValidator.validateScope(messageContext)) {\n             // This is redundant. But sake of readability.\n             introResp.setActive(false);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Scope validation has failed at app level\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODE5ODc5NA=="}, "originalCommit": {"oid": "9e9c8538844849ed3ae1ab5576aab28d498cc017"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3607, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}