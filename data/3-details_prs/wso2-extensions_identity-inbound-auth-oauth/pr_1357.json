{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTk2NDQ1", "number": 1357, "title": "Add analytics support for password grant type", "bodyText": "Proposed changes in this pull request\n\nFix : wso2/product-is#5065\nAdded authentication publish methods for password grant type to publish authentication events to analytics.\nChanged a test case to support the added publish methods.\n\nWhen should this PR be merged\n\nPlease merge this PR after wso2-extensions/identity-data-publisher-authentication#81", "createdAt": "2020-04-17T08:30:36Z", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357", "merged": true, "mergeCommit": {"oid": "76058c7e330db0d7f54be547e97f69ada2f0639d"}, "closed": true, "closedAt": "2020-04-23T07:09:36Z", "author": {"login": "ShanChathusanda93"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYeNw3gFqTM5NTMxNzk1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaBR2fgFqTM5Nzg0OTcxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzE3OTU4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-395317958", "createdAt": "2020-04-17T09:52:27Z", "commit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MjoyN1rOGHHnCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1MjoyN1rOGHHnCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNzg5OQ==", "bodyText": "Start with a capital letter and end with a full stop for the comments. Do this in all applicable places.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410117899", "createdAt": "2020-04-17T09:52:27Z", "author": {"login": "dewniMW"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java", "diffHunk": "@@ -174,6 +200,86 @@ private boolean validateUserCredentials(OAuth2AccessTokenReqDTO tokenReq, Servic\n         return true;\n     }\n \n+    /**\n+     * This method will publish the Password Grant Authentication data.\n+     *\n+     * @param tokenReq Token request which contains all the details of the request.\n+     * @param authenticated Boolean value which determines whether the user is authenticated or not.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     */\n+    private void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,\n+                                           ServiceProvider serviceProvider) {\n+\n+        AuthenticatedUser authenticatedUser = getAuthenticatedUser(tokenReq, serviceProvider);\n+        AuthenticationContext authenticationContext = initializeAuthContext(authenticatedUser, serviceProvider);\n+        AuthenticationDataPublisher authnDataPublisherProxy =\n+                OAuth2ServiceComponentHolder.getAuthenticationDataPublisherProxy();\n+        if (authnDataPublisherProxy != null && authnDataPublisherProxy.isEnabled(authenticationContext)) {\n+            Map<String, Object> paramMap = new HashMap<>();\n+            paramMap.put(FrameworkConstants.AnalyticsAttributes.USER, authenticatedUser);\n+            Map<String, Object> unmodifiableParamMap = Collections.unmodifiableMap(paramMap);\n+            if (authenticated) {\n+                authnDataPublisherProxy\n+                        .publishAuthenticationStepSuccess(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationSuccess(null, authenticationContext, unmodifiableParamMap);\n+            } else {\n+                authnDataPublisherProxy.\n+                        publishAuthenticationStepFailure(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationFailure(null, authenticationContext,\n+                        unmodifiableParamMap);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method will create an AuthenticationContext object which needs to be passed to the publish methods.\n+     *\n+     * @param authenticatedUser User which tries to be authenticate.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     * @return An AuthenticationContest object with relevant details.\n+     */\n+    private AuthenticationContext initializeAuthContext(AuthenticatedUser authenticatedUser,\n+                                                        ServiceProvider serviceProvider) {\n+\n+        AuthenticationContext authenticationContext = new AuthenticationContext();\n+        String contextId = UUIDGenerator.generateUUID();\n+        authenticationContext.setContextIdentifier(contextId);\n+        authenticationContext.setTenantDomain(authenticatedUser.getTenantDomain());\n+        authenticationContext.setRequestType(OAUTH2);\n+        authenticationContext.setRememberMe(false);\n+        authenticationContext.setForceAuthenticate(true);\n+        authenticationContext.setPassiveAuthenticate(false);\n+        authenticationContext.setProperty(IS_INITIAL_LOGIN, true);\n+\n+        // setting sequenceConfig with authenticatedUser, serviceProvider", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzE4MzQ3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-395318347", "createdAt": "2020-04-17T09:52:59Z", "commit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1Mjo1OVrOGHHoPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1Mjo1OVrOGHHoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODIwNA==", "bodyText": "Use java multiline comment", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410118204", "createdAt": "2020-04-17T09:52:59Z", "author": {"login": "dewniMW"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java", "diffHunk": "@@ -174,6 +200,86 @@ private boolean validateUserCredentials(OAuth2AccessTokenReqDTO tokenReq, Servic\n         return true;\n     }\n \n+    /**\n+     * This method will publish the Password Grant Authentication data.\n+     *\n+     * @param tokenReq Token request which contains all the details of the request.\n+     * @param authenticated Boolean value which determines whether the user is authenticated or not.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     */\n+    private void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,\n+                                           ServiceProvider serviceProvider) {\n+\n+        AuthenticatedUser authenticatedUser = getAuthenticatedUser(tokenReq, serviceProvider);\n+        AuthenticationContext authenticationContext = initializeAuthContext(authenticatedUser, serviceProvider);\n+        AuthenticationDataPublisher authnDataPublisherProxy =\n+                OAuth2ServiceComponentHolder.getAuthenticationDataPublisherProxy();\n+        if (authnDataPublisherProxy != null && authnDataPublisherProxy.isEnabled(authenticationContext)) {\n+            Map<String, Object> paramMap = new HashMap<>();\n+            paramMap.put(FrameworkConstants.AnalyticsAttributes.USER, authenticatedUser);\n+            Map<String, Object> unmodifiableParamMap = Collections.unmodifiableMap(paramMap);\n+            if (authenticated) {\n+                authnDataPublisherProxy\n+                        .publishAuthenticationStepSuccess(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationSuccess(null, authenticationContext, unmodifiableParamMap);\n+            } else {\n+                authnDataPublisherProxy.\n+                        publishAuthenticationStepFailure(null, authenticationContext, unmodifiableParamMap);\n+                authnDataPublisherProxy.publishAuthenticationFailure(null, authenticationContext,\n+                        unmodifiableParamMap);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * This method will create an AuthenticationContext object which needs to be passed to the publish methods.\n+     *\n+     * @param authenticatedUser User which tries to be authenticate.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     * @return An AuthenticationContest object with relevant details.\n+     */\n+    private AuthenticationContext initializeAuthContext(AuthenticatedUser authenticatedUser,\n+                                                        ServiceProvider serviceProvider) {\n+\n+        AuthenticationContext authenticationContext = new AuthenticationContext();\n+        String contextId = UUIDGenerator.generateUUID();\n+        authenticationContext.setContextIdentifier(contextId);\n+        authenticationContext.setTenantDomain(authenticatedUser.getTenantDomain());\n+        authenticationContext.setRequestType(OAUTH2);\n+        authenticationContext.setRememberMe(false);\n+        authenticationContext.setForceAuthenticate(true);\n+        authenticationContext.setPassiveAuthenticate(false);\n+        authenticationContext.setProperty(IS_INITIAL_LOGIN, true);\n+\n+        // setting sequenceConfig with authenticatedUser, serviceProvider\n+        SequenceConfig sequenceConfig = new SequenceConfig();\n+        sequenceConfig.setAuthenticatedUser(authenticatedUser);\n+\n+        // setting applicationConfig with serviceProvider\n+        ApplicationConfig applicationConfig = new ApplicationConfig(serviceProvider);\n+        sequenceConfig.setApplicationConfig(applicationConfig);\n+\n+        sequenceConfig.setAuthenticatedIdPs(FrameworkConstants.LOCAL_IDP_NAME);\n+        authenticationContext.setSequenceConfig(sequenceConfig);\n+\n+        // setting the authenticated IDP for currentAuthenticatedIDPs to get\n+        // the tenant domain and other parameters when the login is a success", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "originalPosition": 150}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzE5Mzkw", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-395319390", "createdAt": "2020-04-17T09:54:31Z", "commit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1NDozMVrOGHHrTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1NDozMVrOGHHrTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODk5MA==", "bodyText": "Add a new line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410118990", "createdAt": "2020-04-17T09:54:31Z", "author": {"login": "dewniMW"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java", "diffHunk": "@@ -391,4 +393,25 @@ protected void unsetTokenBinderInfo(TokenBinderInfo tokenBinderInfo) {\n             OAuth2ServiceComponentHolder.getInstance().removeTokenBinder((TokenBinder) tokenBinderInfo);\n         }\n     }\n+\n+    @Reference(\n+            name = \"framework.authentication.data.publisher\",\n+            service = AuthenticationDataPublisher.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetAuthenticationDataPublisher\"\n+    )\n+    protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzE5NTcy", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-395319572", "createdAt": "2020-04-17T09:54:49Z", "commit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1NDo0OVrOGHHr0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1NDo0OVrOGHHr0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExOTEyMw==", "bodyText": "Add a new line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410119123", "createdAt": "2020-04-17T09:54:49Z", "author": {"login": "dewniMW"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java", "diffHunk": "@@ -391,4 +393,25 @@ protected void unsetTokenBinderInfo(TokenBinderInfo tokenBinderInfo) {\n             OAuth2ServiceComponentHolder.getInstance().removeTokenBinder((TokenBinder) tokenBinderInfo);\n         }\n     }\n+\n+    @Reference(\n+            name = \"framework.authentication.data.publisher\",\n+            service = AuthenticationDataPublisher.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetAuthenticationDataPublisher\"\n+    )\n+    protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {\n+        if (FrameworkConstants.AnalyticsAttributes.AUTHN_DATA_PUBLISHER_PROXY.equalsIgnoreCase(dataPublisher.\n+                getName()) && dataPublisher.isEnabled(null)) {\n+            OAuth2ServiceComponentHolder.setAuthenticationDataPublisherProxy(dataPublisher);\n+        }\n+    }\n+\n+    protected void unsetAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzE5OTkx", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-395319991", "createdAt": "2020-04-17T09:55:27Z", "commit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1NToyN1rOGHHtBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1NToyN1rOGHHtBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExOTQzMQ==", "bodyText": "Why do we pass null to the isEnabled() method?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410119431", "createdAt": "2020-04-17T09:55:27Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponent.java", "diffHunk": "@@ -391,4 +393,25 @@ protected void unsetTokenBinderInfo(TokenBinderInfo tokenBinderInfo) {\n             OAuth2ServiceComponentHolder.getInstance().removeTokenBinder((TokenBinder) tokenBinderInfo);\n         }\n     }\n+\n+    @Reference(\n+            name = \"framework.authentication.data.publisher\",\n+            service = AuthenticationDataPublisher.class,\n+            cardinality = ReferenceCardinality.MULTIPLE,\n+            policy = ReferencePolicy.DYNAMIC,\n+            unbind = \"unsetAuthenticationDataPublisher\"\n+    )\n+    protected void setAuthenticationDataPublisher(AuthenticationDataPublisher dataPublisher) {\n+        if (FrameworkConstants.AnalyticsAttributes.AUTHN_DATA_PUBLISHER_PROXY.equalsIgnoreCase(dataPublisher.\n+                getName()) && dataPublisher.isEnabled(null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NDA1MTQ0", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-395405144", "createdAt": "2020-04-17T12:21:34Z", "commit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoyMTozNFrOGHLwFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoyMTozNFrOGHLwFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NTc0OA==", "bodyText": "Add an empty line as the 1st line of the method. Check in other places as well.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r410185748", "createdAt": "2020-04-17T12:21:34Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/internal/OAuth2ServiceComponentHolder.java", "diffHunk": "@@ -198,4 +200,23 @@ public void setOAuthAdminService(OAuthAdminServiceImpl oauthAdminService) {\n \n         this.oauthAdminService = oauthAdminService;\n     }\n+\n+    /**\n+     * Set Authentication Data Publisher Proxy instance.\n+     *\n+     * @param authenticationDataPublisherProxy\n+     */\n+    public static void setAuthenticationDataPublisherProxy(AuthenticationDataPublisher\n+                                                                   authenticationDataPublisherProxy) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "397e811079d3936cc61587a525122f8889e3e115"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "397e811079d3936cc61587a525122f8889e3e115", "author": {"user": {"login": "ShanChathusanda93", "name": "Shan Chathusanda Jayathilaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/397e811079d3936cc61587a525122f8889e3e115", "committedDate": "2020-04-17T08:26:37Z", "message": "Add analytics support for password grant type"}, "afterCommit": {"oid": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "author": {"user": {"login": "ShanChathusanda93", "name": "Shan Chathusanda Jayathilaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "committedDate": "2020-04-17T12:48:06Z", "message": "Add analytics support for password grant type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTk2NTA0", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-397196504", "createdAt": "2020-04-21T10:25:36Z", "commit": {"oid": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDoyNTozNlrOGI-ZOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMDoyNTozNlrOGI-ZOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjA2NDA1Ng==", "bodyText": "Shall we make this method protected?\nWill be useful for anyone extending the grant handler.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#discussion_r412064056", "createdAt": "2020-04-21T10:25:36Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/PasswordGrantHandler.java", "diffHunk": "@@ -174,6 +200,86 @@ private boolean validateUserCredentials(OAuth2AccessTokenReqDTO tokenReq, Servic\n         return true;\n     }\n \n+    /**\n+     * This method will publish the Password Grant Authentication data.\n+     *\n+     * @param tokenReq Token request which contains all the details of the request.\n+     * @param authenticated Boolean value which determines whether the user is authenticated or not.\n+     * @param serviceProvider Service provider which contains the details of the application.\n+     */\n+    private void publishAuthenticationData(OAuth2AccessTokenReqDTO tokenReq, boolean authenticated,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22c02ed21461a1deee2dfa9b872b02b5285c16ce", "author": {"user": {"login": "ShanChathusanda93", "name": "Shan Chathusanda Jayathilaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/22c02ed21461a1deee2dfa9b872b02b5285c16ce", "committedDate": "2020-04-21T11:47:01Z", "message": "Add analytics support for password grant type"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "author": {"user": {"login": "ShanChathusanda93", "name": "Shan Chathusanda Jayathilaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/b9d2f866a66f7fb6ff98408f425034d5ebfe7555", "committedDate": "2020-04-17T12:48:06Z", "message": "Add analytics support for password grant type"}, "afterCommit": {"oid": "22c02ed21461a1deee2dfa9b872b02b5285c16ce", "author": {"user": {"login": "ShanChathusanda93", "name": "Shan Chathusanda Jayathilaka"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/22c02ed21461a1deee2dfa9b872b02b5285c16ce", "committedDate": "2020-04-21T11:47:01Z", "message": "Add analytics support for password grant type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODQ5NzE3", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1357#pullrequestreview-397849717", "createdAt": "2020-04-22T05:17:31Z", "commit": {"oid": "22c02ed21461a1deee2dfa9b872b02b5285c16ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3247, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}