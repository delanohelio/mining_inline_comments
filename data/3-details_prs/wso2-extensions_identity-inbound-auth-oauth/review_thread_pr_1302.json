{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzU0MDQz", "number": 1302, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjowODoxMFrODaxXfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1NjozNlrODa2hHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mzk4Mzk3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjowODoxMFrOFh4jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzozNDozMFrOFiYZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3Mzg5OQ==", "bodyText": "Can we pass the scope name here instead of null?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371073899", "createdAt": "2020-01-27T06:08:10Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "diffHunk": "@@ -294,4 +261,94 @@ public Scope updateScope(Scope updatedScope) throws IdentityOAuth2ScopeException\n         }\n         return scopes;\n     }\n+\n+    /**\n+     * Scope validation before adding the scope.\n+     *\n+     * @param scope Scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void addScopePreValidation(Scope scope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(scope.getName());\n+        validateDisplayName(scope.getDisplayName());\n+    }\n+\n+    /**\n+     * Do the validation before updating the scope.\n+     *\n+     * @param updatedScope Updated scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void updateScopePreValidation(Scope updatedScope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(updatedScope.getName());\n+        validateDisplayName(updatedScope.getDisplayName());\n+    }\n+\n+    /**\n+     * Check whether scope name is provided or not.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateScopeName(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name is provided.\n+        if (StringUtils.isBlank(scopeName)) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_NOT_SPECIFIED, null);\n+        }\n+        validateWhiteSpaces(scopeName);\n+    }\n+\n+    /**\n+     * Check whether scope name contains any white spaces.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateWhiteSpaces(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name contains any white spaces.\n+        Pattern pattern = Pattern.compile(\"\\\\s\");\n+        Matcher matcher = pattern.matcher(scopeName);\n+        boolean foundWhiteSpace = matcher.find();\n+\n+        if (foundWhiteSpace) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_CONTAINS_WHITESPACES, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MDE3Nw==", "bodyText": "+1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371180177", "createdAt": "2020-01-27T11:09:52Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "diffHunk": "@@ -294,4 +261,94 @@ public Scope updateScope(Scope updatedScope) throws IdentityOAuth2ScopeException\n         }\n         return scopes;\n     }\n+\n+    /**\n+     * Scope validation before adding the scope.\n+     *\n+     * @param scope Scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void addScopePreValidation(Scope scope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(scope.getName());\n+        validateDisplayName(scope.getDisplayName());\n+    }\n+\n+    /**\n+     * Do the validation before updating the scope.\n+     *\n+     * @param updatedScope Updated scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void updateScopePreValidation(Scope updatedScope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(updatedScope.getName());\n+        validateDisplayName(updatedScope.getDisplayName());\n+    }\n+\n+    /**\n+     * Check whether scope name is provided or not.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateScopeName(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name is provided.\n+        if (StringUtils.isBlank(scopeName)) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_NOT_SPECIFIED, null);\n+        }\n+        validateWhiteSpaces(scopeName);\n+    }\n+\n+    /**\n+     * Check whether scope name contains any white spaces.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateWhiteSpaces(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name contains any white spaces.\n+        Pattern pattern = Pattern.compile(\"\\\\s\");\n+        Matcher matcher = pattern.matcher(scopeName);\n+        boolean foundWhiteSpace = matcher.find();\n+\n+        if (foundWhiteSpace) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_CONTAINS_WHITESPACES, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3Mzg5OQ=="}, "originalCommit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NTcxMQ==", "bodyText": "fixed", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371595711", "createdAt": "2020-01-28T03:34:30Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "diffHunk": "@@ -294,4 +261,94 @@ public Scope updateScope(Scope updatedScope) throws IdentityOAuth2ScopeException\n         }\n         return scopes;\n     }\n+\n+    /**\n+     * Scope validation before adding the scope.\n+     *\n+     * @param scope Scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void addScopePreValidation(Scope scope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(scope.getName());\n+        validateDisplayName(scope.getDisplayName());\n+    }\n+\n+    /**\n+     * Do the validation before updating the scope.\n+     *\n+     * @param updatedScope Updated scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void updateScopePreValidation(Scope updatedScope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(updatedScope.getName());\n+        validateDisplayName(updatedScope.getDisplayName());\n+    }\n+\n+    /**\n+     * Check whether scope name is provided or not.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateScopeName(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name is provided.\n+        if (StringUtils.isBlank(scopeName)) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_NOT_SPECIFIED, null);\n+        }\n+        validateWhiteSpaces(scopeName);\n+    }\n+\n+    /**\n+     * Check whether scope name contains any white spaces.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateWhiteSpaces(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name contains any white spaces.\n+        Pattern pattern = Pattern.compile(\"\\\\s\");\n+        Matcher matcher = pattern.matcher(scopeName);\n+        boolean foundWhiteSpace = matcher.find();\n+\n+        if (foundWhiteSpace) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_CONTAINS_WHITESPACES, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3Mzg5OQ=="}, "originalCommit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDYyMjcyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/ScopeClaimMappingDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0NDoxMFrOFh-Xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoxMTo0MVrOFiAnpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTE2Ng==", "bodyText": "make this private", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371169166", "createdAt": "2020-01-27T10:44:10Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/ScopeClaimMappingDAOImpl.java", "diffHunk": "@@ -408,28 +515,35 @@ private void insertClaims(int tenantId, int scopeId, Set<String> claimsList) thr\n                 return null;\n             });\n         } catch (TransactionException e) {\n-            String errorMessage = \"Error when storing oidc claims for tenant: \" + tenantId;\n+            String errorMessage = String.format(\"Error when storing oidc claims for scope ID: %s for tenant: %s\",\n+                    scopeId, tenantId);\n             throw new IdentityOAuth2Exception(errorMessage, e);\n         }\n     }\n \n-    private List<ScopeDTO> buildScopeDTO(Map<String, List<String>> scopeClaimMap, int tenantId) {\n-\n-        List<ScopeDTO> oidcScopeClaimList = new ArrayList<>();\n-        for (Map.Entry<String, List<String>> scopeClaimEntry : scopeClaimMap.entrySet()) {\n-            ScopeDTO scopeDTO = new ScopeDTO();\n-            String scopeName = scopeClaimEntry.getKey();\n-            List<String> claimsList = scopeClaimEntry.getValue();\n-            scopeDTO.setName(scopeClaimEntry.getKey());\n-            if (CollectionUtils.isNotEmpty(claimsList)) {\n-                scopeDTO.setClaim(claimsList.toArray(new String[claimsList.size()]));\n-            }\n-            oidcScopeClaimList.add(scopeDTO);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"The scope: \" + scopeName + \" and the claims: \" + String.join(\",\", claimsList)\n-                        + \" are successfully loaded for the tenant: \" + tenantId);\n-            }\n+    /**\n+     * Update scope details on IDN_OAUTH2_SCOPE scope table.\n+     *\n+     * @param updatedScope Updated scope.\n+     * @param tenantId     Tenant ID.\n+     * @param jdbcTemplate JDBC template.\n+     * @param scopeId      Scope ID.\n+     * @throws DataAccessException\n+     */\n+    public void updateScopeDetails(ScopeDTO updatedScope, int tenantId, JdbcTemplate jdbcTemplate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "originalPosition": 374}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwNjA1NQ==", "bodyText": "fixed", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371206055", "createdAt": "2020-01-27T12:11:41Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/ScopeClaimMappingDAOImpl.java", "diffHunk": "@@ -408,28 +515,35 @@ private void insertClaims(int tenantId, int scopeId, Set<String> claimsList) thr\n                 return null;\n             });\n         } catch (TransactionException e) {\n-            String errorMessage = \"Error when storing oidc claims for tenant: \" + tenantId;\n+            String errorMessage = String.format(\"Error when storing oidc claims for scope ID: %s for tenant: %s\",\n+                    scopeId, tenantId);\n             throw new IdentityOAuth2Exception(errorMessage, e);\n         }\n     }\n \n-    private List<ScopeDTO> buildScopeDTO(Map<String, List<String>> scopeClaimMap, int tenantId) {\n-\n-        List<ScopeDTO> oidcScopeClaimList = new ArrayList<>();\n-        for (Map.Entry<String, List<String>> scopeClaimEntry : scopeClaimMap.entrySet()) {\n-            ScopeDTO scopeDTO = new ScopeDTO();\n-            String scopeName = scopeClaimEntry.getKey();\n-            List<String> claimsList = scopeClaimEntry.getValue();\n-            scopeDTO.setName(scopeClaimEntry.getKey());\n-            if (CollectionUtils.isNotEmpty(claimsList)) {\n-                scopeDTO.setClaim(claimsList.toArray(new String[claimsList.size()]));\n-            }\n-            oidcScopeClaimList.add(scopeDTO);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"The scope: \" + scopeName + \" and the claims: \" + String.join(\",\", claimsList)\n-                        + \" are successfully loaded for the tenant: \" + tenantId);\n-            }\n+    /**\n+     * Update scope details on IDN_OAUTH2_SCOPE scope table.\n+     *\n+     * @param updatedScope Updated scope.\n+     * @param tenantId     Tenant ID.\n+     * @param jdbcTemplate JDBC template.\n+     * @param scopeId      Scope ID.\n+     * @throws DataAccessException\n+     */\n+    public void updateScopeDetails(ScopeDTO updatedScope, int tenantId, JdbcTemplate jdbcTemplate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTE2Ng=="}, "originalCommit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "originalPosition": 374}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDcxMzk0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/OAuthScopeDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxNjoyNVrOFh_NqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzozNDozOVrOFiYZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MzAxNw==", "bodyText": "Better to use scopeID to delete and add the binding.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371183017", "createdAt": "2020-01-27T11:16:25Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/OAuthScopeDAOImpl.java", "diffHunk": "@@ -444,13 +456,15 @@ public void deleteScopeByName(String name, int tenantID) throws IdentityOAuth2Sc\n     public void updateScopeByName(Scope updatedScope, int tenantID) throws IdentityOAuth2ScopeServerException {\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Updae scope by name for scope name:\" + updatedScope.getName());\n+            log.debug(\"Update scope by name for scope name:\" + updatedScope.getName());\n         }\n \n         try (Connection conn = IdentityDatabaseUtil.getDBConnection()) {\n             try {\n-                deleteScope(updatedScope.getName(), tenantID, conn);\n-                addScope(updatedScope, conn, tenantID);\n+                int scopeId = getScopeId(updatedScope.getName(), tenantID, conn);\n+                updateScopeDetails(updatedScope, conn, scopeId);\n+                deleteBindings(updatedScope.getName(), tenantID, conn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NTczNw==", "bodyText": "fixed", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371595737", "createdAt": "2020-01-28T03:34:39Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/OAuthScopeDAOImpl.java", "diffHunk": "@@ -444,13 +456,15 @@ public void deleteScopeByName(String name, int tenantID) throws IdentityOAuth2Sc\n     public void updateScopeByName(Scope updatedScope, int tenantID) throws IdentityOAuth2ScopeServerException {\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Updae scope by name for scope name:\" + updatedScope.getName());\n+            log.debug(\"Update scope by name for scope name:\" + updatedScope.getName());\n         }\n \n         try (Connection conn = IdentityDatabaseUtil.getDBConnection()) {\n             try {\n-                deleteScope(updatedScope.getName(), tenantID, conn);\n-                addScope(updatedScope, conn, tenantID);\n+                int scopeId = getScopeId(updatedScope.getName(), tenantID, conn);\n+                updateScopeDetails(updatedScope, conn, scopeId);\n+                deleteBindings(updatedScope.getName(), tenantID, conn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MzAxNw=="}, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDc4Nzc1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo0MToxOVrOFh_3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoyNDozNlrOFiA8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MzgwNA==", "bodyText": "We might not be able to successfully say that scope does not exist from this validation. In a concurrent scenario, if the resource is existing while executing this check and while trying to delete the resource actually, it might have been deleted from another delete request. While it does not break any functionality for the delete operation, it might introduce inconsistencies.\nThis becomes more tricky for other operations.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371193804", "createdAt": "2020-01-27T11:41:19Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -508,11 +562,18 @@ public void addScope(String scope, String[] claims) throws IdentityOAuthAdminExc\n      */\n     public void deleteScope(String scope) throws IdentityOAuthAdminException {\n \n+        validateScopeName(scope);\n+        // Check whether a scope exists with the provided scope name which to be deleted.\n+        validateScopeExistence(scope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIxMTQyNw==", "bodyText": "yes, there are cases that we need to handle the concurrent scenarios properly. As per the offline discussion for the moment keep as it is and we'll address this later.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371211427", "createdAt": "2020-01-27T12:24:36Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -508,11 +562,18 @@ public void addScope(String scope, String[] claims) throws IdentityOAuthAdminExc\n      */\n     public void deleteScope(String scope) throws IdentityOAuthAdminException {\n \n+        validateScopeName(scope);\n+        // Check whether a scope exists with the provided scope name which to be deleted.\n+        validateScopeExistence(scope);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MzgwNA=="}, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDgyMDkwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1Mzo1M1rOFiALXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoxNDo1M1rOFiAsWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5ODgxMg==", "bodyText": "The same methods are implemented in OAuthAdminServiceImpl as well. Can we get rid of one implementation and invoke the other service's method.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371198812", "createdAt": "2020-01-27T11:53:53Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "diffHunk": "@@ -193,19 +181,11 @@ public boolean isScopeExists(String name) throws IdentityOAuth2ScopeException {\n      */\n     public void deleteScope(String name) throws IdentityOAuth2ScopeException {\n \n-        int tenantID = Oauth2ScopeUtils.getTenantID();\n-        if (name == null) {\n-            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n-                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_NOT_SPECIFIED, null);\n-        }\n-\n-        // check whether a scope exists with the provided scope name which to be deleted\n-        boolean isScopeExists = isScopeExists(name);\n-        if (!isScopeExists) {\n-            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n-                    ERROR_CODE_NOT_FOUND_SCOPE, name);\n-        }\n+        validateScopeName(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwNzI1Nw==", "bodyText": "Even though the names of the methods are same but internal logic is different, two different OSGI services hence keep as it is with two methods.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371207257", "createdAt": "2020-01-27T12:14:53Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "diffHunk": "@@ -193,19 +181,11 @@ public boolean isScopeExists(String name) throws IdentityOAuth2ScopeException {\n      */\n     public void deleteScope(String name) throws IdentityOAuth2ScopeException {\n \n-        int tenantID = Oauth2ScopeUtils.getTenantID();\n-        if (name == null) {\n-            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n-                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_NOT_SPECIFIED, null);\n-        }\n-\n-        // check whether a scope exists with the provided scope name which to be deleted\n-        boolean isScopeExists = isScopeExists(name);\n-        if (!isScopeExists) {\n-            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n-                    ERROR_CODE_NOT_FOUND_SCOPE, name);\n-        }\n+        validateScopeName(name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5ODgxMg=="}, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDgyNzgxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/CacheBackedScopeClaimMappingDAOImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1NjozNlrOFiAPlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzoyNjoxOVrOFiYUWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5OTg5Mg==", "bodyText": "don't we need to break the loop from here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371199892", "createdAt": "2020-01-27T11:56:36Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/CacheBackedScopeClaimMappingDAOImpl.java", "diffHunk": "@@ -135,4 +156,18 @@ private OIDCScopeClaimCacheEntry loadOIDCScopeClaims(int tenantId, OIDCScopeClai\n         }\n         return oidcScopeClaimCacheEntry;\n     }\n+\n+    @Override\n+    public ScopeDTO getScope(String scopeName, int tenantId) throws IdentityOAuth2Exception {\n+\n+        OIDCScopeClaimCacheEntry oidcScopeClaimCacheEntry = oidcScopeClaimCache.getScopeClaimMap(tenantId);\n+        oidcScopeClaimCacheEntry = loadOIDCScopeClaims(tenantId, oidcScopeClaimCacheEntry);\n+        ScopeDTO scopeDTO = null;\n+        for (ScopeDTO scopeObj : oidcScopeClaimCacheEntry.getScopeClaimMapping()) {\n+            if (scopeName.equals(scopeObj.getName())) {\n+                scopeDTO = scopeObj;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NDMyOA==", "bodyText": "Fxied", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371594328", "createdAt": "2020-01-28T03:26:19Z", "author": {"login": "sarubi"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/CacheBackedScopeClaimMappingDAOImpl.java", "diffHunk": "@@ -135,4 +156,18 @@ private OIDCScopeClaimCacheEntry loadOIDCScopeClaims(int tenantId, OIDCScopeClai\n         }\n         return oidcScopeClaimCacheEntry;\n     }\n+\n+    @Override\n+    public ScopeDTO getScope(String scopeName, int tenantId) throws IdentityOAuth2Exception {\n+\n+        OIDCScopeClaimCacheEntry oidcScopeClaimCacheEntry = oidcScopeClaimCache.getScopeClaimMap(tenantId);\n+        oidcScopeClaimCacheEntry = loadOIDCScopeClaims(tenantId, oidcScopeClaimCacheEntry);\n+        ScopeDTO scopeDTO = null;\n+        for (ScopeDTO scopeObj : oidcScopeClaimCacheEntry.getScopeClaimMapping()) {\n+            if (scopeName.equals(scopeObj.getName())) {\n+                scopeDTO = scopeObj;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5OTg5Mg=="}, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3626, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}