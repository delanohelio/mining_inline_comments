{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNjAzMjU3", "number": 1353, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoxNToyOVrODyMCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowMDozNlrOD0Oy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTUyNjQ5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODoxNToyOVrOGGF0Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjozMjowM1rOGISIhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzOTkyNw==", "bodyText": "Other than meta data are there any other places where this method is invoked", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r409039927", "createdAt": "2020-04-15T18:15:29Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1170,20 +1174,14 @@ public static String getOAuth1AccessTokenUrl() {\n \n         public static String getOAuth2AuthzEPUrl() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9973974d887a1d8fd3f52ed54f60b5a5cedc2360"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMzODg4NQ==", "bodyText": "no", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411338885", "createdAt": "2020-04-20T12:32:03Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1170,20 +1174,14 @@ public static String getOAuth1AccessTokenUrl() {\n \n         public static String getOAuth2AuthzEPUrl() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTAzOTkyNw=="}, "originalCommit": {"oid": "9973974d887a1d8fd3f52ed54f60b5a5cedc2360"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzI4NjMxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMDo1NjoxNFrOGH_a7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMDo1NjoxNFrOGH_a7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzMjMwMw==", "bodyText": "This API should be deprecated and not to be used any more. Only proxy context path will be utilized from new ServiceURLBuilder API.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411032303", "createdAt": "2020-04-20T00:56:14Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1339,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context, proxy context path and web context path.\n+     *\n+     * @param defaultContext                  Default URL context.\n+     * @param getValueFromFileBasedConfig     File-based Configuration.\n+     * @param addProxyContextPathInLegacyMode Add proxy context path to the URL.\n+     * @param addWebContextRootInLegacyMode   Add web context path to the URL.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig,\n+                                  boolean addProxyContextPathInLegacyMode, boolean addWebContextRootInLegacyMode) {\n+\n+        String url;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            url = buildTenantQualifiedUrl(defaultContext);\n+        } else {\n+            String oauth2EndpointURLInFile = null;\n+            if (getValueFromFileBasedConfig != null) {\n+                oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+            }\n+            if (StringUtils.isNotBlank(oauth2EndpointURLInFile)) {\n+                // Use the value configured in the file.\n+                url = oauth2EndpointURLInFile;\n+            } else {\n+                // Use the default context.\n+                url = IdentityUtil\n+                        .getServerURL(defaultContext, addProxyContextPathInLegacyMode, addWebContextRootInLegacyMode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0674c5526fa92db40a45715c1b33b830e462988c"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzI4NzM1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMDo1Njo1NFrOGH_bXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMDo1Njo1NFrOGH_bXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzMjQxNQ==", "bodyText": "Get rid of proxy context and web context related stuff", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411032415", "createdAt": "2020-04-20T00:56:54Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1339,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context, proxy context path and web context path.\n+     *\n+     * @param defaultContext                  Default URL context.\n+     * @param getValueFromFileBasedConfig     File-based Configuration.\n+     * @param addProxyContextPathInLegacyMode Add proxy context path to the URL.\n+     * @param addWebContextRootInLegacyMode   Add web context path to the URL.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig,\n+                                  boolean addProxyContextPathInLegacyMode, boolean addWebContextRootInLegacyMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0674c5526fa92db40a45715c1b33b830e462988c"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MzI5MTIxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMDo1ODo1N1rOGH_dIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwMDo1ODo1N1rOGH_dIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTAzMjg2NA==", "bodyText": "Don't throw the runtime exception from the private method. Handle the error at the respective APIs that fails to throw it back only", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411032864", "createdAt": "2020-04-20T00:58:57Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1339,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context, proxy context path and web context path.\n+     *\n+     * @param defaultContext                  Default URL context.\n+     * @param getValueFromFileBasedConfig     File-based Configuration.\n+     * @param addProxyContextPathInLegacyMode Add proxy context path to the URL.\n+     * @param addWebContextRootInLegacyMode   Add web context path to the URL.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig,\n+                                  boolean addProxyContextPathInLegacyMode, boolean addWebContextRootInLegacyMode) {\n+\n+        String url;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            url = buildTenantQualifiedUrl(defaultContext);\n+        } else {\n+            String oauth2EndpointURLInFile = null;\n+            if (getValueFromFileBasedConfig != null) {\n+                oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+            }\n+            if (StringUtils.isNotBlank(oauth2EndpointURLInFile)) {\n+                // Use the value configured in the file.\n+                url = oauth2EndpointURLInFile;\n+            } else {\n+                // Use the default context.\n+                url = IdentityUtil\n+                        .getServerURL(defaultContext, addProxyContextPathInLegacyMode, addWebContextRootInLegacyMode);\n+            }\n+        }\n+        return url;\n+    }\n+\n+    private static String buildTenantQualifiedUrl(String context) {\n+\n+        try {\n+            return ServiceURLBuilder.create().addPath(context).build().getAbsoluteURL();\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0674c5526fa92db40a45715c1b33b830e462988c"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTcyNTUxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzo0MToxOVrOGIVBVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMzo0MToxOVrOGIVBVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTM4NjE5OQ==", "bodyText": "Rather than passing null. It would be better to have an overloaded method with a single argument.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411386199", "createdAt": "2020-04-20T13:41:19Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "diffHunk": "@@ -110,10 +109,8 @@ public OIDProviderConfigResponse buildOIDProviderConfig(OIDProviderRequest reque\n \n         providerConfig.setSubjectTypesSupported(new String[]{\"pairwise\"});\n \n-        providerConfig.setCheckSessionIframe(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL), true, false));\n-        providerConfig.setEndSessionEndpoint(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL), true, false));\n+        providerConfig.setCheckSessionIframe(buildUrl(IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL, null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e01651b5564220aee0d1ab53189614ca49612f8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTkzMDI4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyMDoxOFrOGIW73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyMDoxOFrOGIW73w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQxNzU2Nw==", "bodyText": "Rather doing the null check here, it would be better to have another method that does not take the getValueFromFileBasedConfig function.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411417567", "createdAt": "2020-04-20T14:20:18Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1319,49 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String url = null;\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            try {\n+                url = buildServiceUrl(defaultContext);\n+            } catch (URLBuilderException e) {\n+                throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+            }\n+        } else {\n+            String oauth2EndpointURLInFile = null;\n+            if (getValueFromFileBasedConfig != null) {\n+                oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e01651b5564220aee0d1ab53189614ca49612f8"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk3MDE3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDoyODowMVrOGIXT1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo0MTo0MFrOGIX-EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzcwMw==", "bodyText": "build from file configuration context?\nis that correct?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411423703", "createdAt": "2020-04-20T14:28:01Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1319,55 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc2a21e6908fe368289d0286cb236e7a31b0892"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzNDUxMw==", "bodyText": "Updated.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411434513", "createdAt": "2020-04-20T14:41:40Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1319,55 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyMzcwMw=="}, "originalCommit": {"oid": "8fc2a21e6908fe368289d0286cb236e7a31b0892"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NTk4NDEyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozMDo0MFrOGIXcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDozNzo1MVrOGIXx9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTg1MA==", "bodyText": "Do we need to check the tenant qualified mode check here?\nI think we can extract that if condition out to make the code mode readable", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411425850", "createdAt": "2020-04-20T14:30:40Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1195,32 +1191,16 @@ public static String getOAuth2TokenEPUrl() {\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n+\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && StringUtils.isNotBlank(tenantDomain) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fc2a21e6908fe368289d0286cb236e7a31b0892"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQzMTQxNQ==", "bodyText": "Yes, the tenant qualified mode check is needed since we append the tenant domain as a query param only in the legacy mode.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411431415", "createdAt": "2020-04-20T14:37:51Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1195,32 +1191,16 @@ public static String getOAuth2TokenEPUrl() {\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n+\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && StringUtils.isNotBlank(tenantDomain) &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQyNTg1MA=="}, "originalCommit": {"oid": "8fc2a21e6908fe368289d0286cb236e7a31b0892"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjEzMzgyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1OTo0N1rOGIY25g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNDo1OTo0N1rOGIY25g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ0OTA2Mg==", "bodyText": "Fix formatting.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411449062", "createdAt": "2020-04-20T14:59:47Z", "author": {"login": "ashensw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,54 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext              Default URL context.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c6e1d53374f99ea94c11f48f46199c3a130a1b"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjE0NDMxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowMTo1MFrOGIY9QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowMTo1MFrOGIY9QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1MDY4OQ==", "bodyText": "Fix formatting.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411450689", "createdAt": "2020-04-20T15:01:50Z", "author": {"login": "ashensw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,54 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext) {\n+\n+        return buildUrl(defaultContext, null);\n+    }\n+\n+    private static String buildServiceUrl(String defaultContext, String oauth2EndpointURLInFile)\n+            throws URLBuilderException {\n+\n+        if (IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+            return ServiceURLBuilder.create().addPath(defaultContext).build().getAbsolutePublicURL();\n+        } else if (StringUtils.isNotBlank(oauth2EndpointURLInFile)) {\n+                // Use the value configured in the file.\n+                return oauth2EndpointURLInFile;\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c6e1d53374f99ea94c11f48f46199c3a130a1b"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjE2NDc5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowNTozMVrOGIZJLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowOTo1NlrOGIZWsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1Mzc0MA==", "bodyText": "How about having a single if statement here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411453740", "createdAt": "2020-04-20T15:05:31Z", "author": {"login": "ashensw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1258,34 +1241,26 @@ public static String getOAuth2JWKSPageUrl() throws URISyntaxException {\n \n         public static String getOidcWebFingerEPUrl() {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOidcWebFingerEPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OIDC_WEB_FINGER_EP_URL, true, false);\n-            }\n-            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, true);\n+            return buildUrl(OIDC_WEB_FINGER_EP_URL, OAuthServerConfiguration.getInstance()::getOidcWebFingerEPUrl);\n         }\n \n         public static String getOidcDiscoveryEPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oidcDiscoveryEPUrl = OAuthServerConfiguration.getInstance().getOidcDiscoveryUrl();\n-            if (StringUtils.isBlank(oidcDiscoveryEPUrl)) {\n-                oidcDiscoveryEPUrl = IdentityUtil.getServerURL(OAUTH2_DISCOVERY_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n-            }\n+            String oidcDiscoveryEPUrl = buildUrl(OAUTH2_DISCOVERY_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOidcDiscoveryUrl);\n \n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                if (StringUtils.isNotBlank(tenantDomain) &&\n+                        !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+                    oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c6e1d53374f99ea94c11f48f46199c3a130a1b"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NzIwMw==", "bodyText": "updated.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411457203", "createdAt": "2020-04-20T15:09:56Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1258,34 +1241,26 @@ public static String getOAuth2JWKSPageUrl() throws URISyntaxException {\n \n         public static String getOidcWebFingerEPUrl() {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOidcWebFingerEPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OIDC_WEB_FINGER_EP_URL, true, false);\n-            }\n-            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, true);\n+            return buildUrl(OIDC_WEB_FINGER_EP_URL, OAuthServerConfiguration.getInstance()::getOidcWebFingerEPUrl);\n         }\n \n         public static String getOidcDiscoveryEPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oidcDiscoveryEPUrl = OAuthServerConfiguration.getInstance().getOidcDiscoveryUrl();\n-            if (StringUtils.isBlank(oidcDiscoveryEPUrl)) {\n-                oidcDiscoveryEPUrl = IdentityUtil.getServerURL(OAUTH2_DISCOVERY_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n-            }\n+            String oidcDiscoveryEPUrl = buildUrl(OAUTH2_DISCOVERY_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOidcDiscoveryUrl);\n \n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                if (StringUtils.isNotBlank(tenantDomain) &&\n+                        !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+                    oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1Mzc0MA=="}, "originalCommit": {"oid": "10c6e1d53374f99ea94c11f48f46199c3a130a1b"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjE2NzU5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowNjowMlrOGIZKzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowNjowMlrOGIZKzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NDE1Nw==", "bodyText": "How about having a single if statement here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411454157", "createdAt": "2020-04-20T15:06:02Z", "author": {"login": "ashensw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1230,13 +1212,14 @@ public static String getOAuth2DCREPUrl() throws URISyntaxException {\n          */\n         public static String getOAuth2JWKSPageUrl(String tenantDomain) throws URISyntaxException {\n \n-            String auth2JWKSPageUrl = OAuthServerConfiguration.getInstance().getOAuth2JWKSPageUrl();\n-            if (StringUtils.isBlank(auth2JWKSPageUrl)) {\n-                auth2JWKSPageUrl = IdentityUtil.getServerURL(OAUTH2_JWKS_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+            String auth2JWKSPageUrl = buildUrl(OAUTH2_JWKS_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOAuth2JWKSPageUrl);\n+\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                if (StringUtils.isNotBlank(tenantDomain) &&\n+                        !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+                    auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c6e1d53374f99ea94c11f48f46199c3a130a1b"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjE2OTA4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowNjoxNlrOGIZLog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTowNjoxNlrOGIZLog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ1NDM3MA==", "bodyText": "How about having a single if statement here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411454370", "createdAt": "2020-04-20T15:06:16Z", "author": {"login": "ashensw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1195,30 +1191,16 @@ public static String getOAuth2TokenEPUrl() {\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n-            }\n-            return oauth2TokenEPUrl;\n-        }\n-\n-        /**\n-         * This method is used to get the resolved URL for the OAuth2 Registration Endpoint.\n-         *\n-         * @return String of the resolved URL for the Registration endpoint.\n-         * @throws URISyntaxException URI Syntax Exception.\n-         */\n-        public static String getOAuth2DCREPUrl() throws URISyntaxException {\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled()) {\n+                if (StringUtils.isNotBlank(tenantDomain) &&\n+                        !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals(tenantDomain)) {\n+                    oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10c6e1d53374f99ea94c11f48f46199c3a130a1b"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NjYxMTQzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjozNDowN1rOGIdXYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjozNDowN1rOGIdXYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUyMjkxNQ==", "bodyText": "Shall we use a variable for request.getTenantDomain()", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411522915", "createdAt": "2020-04-20T16:34:07Z", "author": {"login": "dewniMW"}, "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "diffHunk": "@@ -75,8 +74,8 @@ public OIDProviderConfigResponse buildOIDProviderConfig(OIDProviderRequest reque\n         providerConfig.setCodeChallengeMethodsSupported(OAuth2Util.getSupportedCodeChallengeMethods()\n                 .toArray(new String[0]));\n         try {\n-            providerConfig.setRegistrationEndpoint(OAuth2Util.OAuthURL.getOAuth2DCREPUrl());\n-            providerConfig.setJwksUri(OAuth2Util.OAuthURL.getOAuth2JWKSPageUrl());\n+            providerConfig.setRegistrationEndpoint(OAuth2Util.OAuthURL.getOAuth2DCREPUrl(request.getTenantDomain()));\n+            providerConfig.setJwksUri(OAuth2Util.OAuthURL.getOAuth2JWKSPageUrl(request.getTenantDomain()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY1MjU0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjozNjoxNlrOGIvy1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjozNjoxNlrOGIvy1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNDg1Mw==", "bodyText": "Can we format this comment", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411824853", "createdAt": "2020-04-21T02:36:16Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1194,33 +1190,19 @@ public static String getOAuth2TokenEPUrl() {\n          * @throws URISyntaxException URI Syntax Exception.\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY2Mjc3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0MDoyOVrOGIv4Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0MDoyOVrOGIv4Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNjI1OA==", "bodyText": "Looks to be this logic can be placed within and if else", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411826258", "createdAt": "2020-04-21T02:40:29Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1194,33 +1190,19 @@ public static String getOAuth2TokenEPUrl() {\n          * @throws URISyntaxException URI Syntax Exception.\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n+            /*When the tenant-qualified url mode is disabled, the tenant domain should be appended to the url as a\n+            query parameter.*/\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                    oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY3NTAyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0NTo1MVrOGIv_DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0NTo1MVrOGIv_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyNzk4MA==", "bodyText": "Same mentioned above", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411827980", "createdAt": "2020-04-21T02:45:51Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1229,14 +1211,15 @@ public static String getOAuth2DCREPUrl() throws URISyntaxException {\n          * @throws URISyntaxException URI Syntax Exception.\n          */\n         public static String getOAuth2JWKSPageUrl(String tenantDomain) throws URISyntaxException {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/\n+            String auth2JWKSPageUrl = buildUrl(OAUTH2_JWKS_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOAuth2JWKSPageUrl);\n \n-            String auth2JWKSPageUrl = OAuthServerConfiguration.getInstance().getOAuth2JWKSPageUrl();\n-            if (StringUtils.isBlank(auth2JWKSPageUrl)) {\n-                auth2JWKSPageUrl = IdentityUtil.getServerURL(OAUTH2_JWKS_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+            /*When the tenant-qualified url mode is disabled, the tenant domain should be appended to the url as a\n+            query parameter.*/\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                    auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY4MjIzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0OTowMFrOGIwC-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0OTowMFrOGIwC-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyODk4NQ==", "bodyText": "same mentioned above", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411828985", "createdAt": "2020-04-21T02:49:00Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1258,34 +1241,26 @@ public static String getOAuth2JWKSPageUrl() throws URISyntaxException {\n \n         public static String getOidcWebFingerEPUrl() {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOidcWebFingerEPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OIDC_WEB_FINGER_EP_URL, true, false);\n-            }\n-            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, true);\n+            return buildUrl(OIDC_WEB_FINGER_EP_URL, OAuthServerConfiguration.getInstance()::getOidcWebFingerEPUrl);\n         }\n \n         public static String getOidcDiscoveryEPUrl(String tenantDomain) throws URISyntaxException {\n-\n-            String oidcDiscoveryEPUrl = OAuthServerConfiguration.getInstance().getOidcDiscoveryUrl();\n-            if (StringUtils.isBlank(oidcDiscoveryEPUrl)) {\n-                oidcDiscoveryEPUrl = IdentityUtil.getServerURL(OAUTH2_DISCOVERY_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n+            /*When the tenant-qualified url mode is enabled, ServiceURLBuilder will append the tenant domain to the\n+            url path.*/\n+            String oidcDiscoveryEPUrl = buildUrl(OAUTH2_DISCOVERY_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOidcDiscoveryUrl);\n+\n+            /*When the tenant-qualified url mode is disabled, the tenant domain should be appended to the url as a\n+            query parameter.*/\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n                 oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY4MzI5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo0OTozNFrOGIwDiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDoxODo1OFrOGIxuug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTEyOQ==", "bodyText": "Should this be public ?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411829129", "createdAt": "2020-04-21T02:49:34Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1NjU3MA==", "bodyText": "Yes, we need to call this in the ProviderConfigBuilder", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411856570", "createdAt": "2020-04-21T04:18:58Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTEyOQ=="}, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY4NjIwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo1MDo1NVrOGIwFMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDoyNzozMVrOGIx4_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTU1NA==", "bodyText": "Should this be public ?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411829554", "createdAt": "2020-04-21T02:50:55Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext Default URL context.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTkzNQ==", "bodyText": "And why would we need this one", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411829935", "createdAt": "2020-04-21T02:51:58Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext Default URL context.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTU1NA=="}, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg1OTE5Nw==", "bodyText": "In ProviderConfigBuilder, we need to build a url. There, we don't have a config from the file. Instead of passing null in the above method, used this overloaded method.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411859197", "createdAt": "2020-04-21T04:27:31Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);\n+        }\n+    }\n+\n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context.\n+     *\n+     * @param defaultContext Default URL context.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyOTU1NA=="}, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODY5Mjk2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo1Mzo0MFrOGIwI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo1Mzo0MFrOGIwI9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMDUxNw==", "bodyText": "Ideally, if this is to be a public API, this should not throw a runtime exception. You should wrap this for an exception type defined in this module", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411830517", "createdAt": "2020-04-21T02:53:40Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1354,6 +1322,60 @@ private static String getTenantUrl(String url, String tenantDomain) throws URISy\n         }\n     }\n \n+    /**\n+     * Builds a URL with a given context in both the tenant-qualified url supported mode and the legacy mode. Returns\n+     * the absolute URL build from the default context in the tenant-qualified url supported mode and returns the\n+     * absolute url build from file configuration context.\n+     *\n+     * @param defaultContext              Default URL context.\n+     * @param getValueFromFileBasedConfig File-based Configuration.\n+     * @return Absolute URL.\n+     */\n+    public static String buildUrl(String defaultContext, Supplier<String> getValueFromFileBasedConfig) {\n+\n+        String oauth2EndpointURLInFile = null;\n+        if (getValueFromFileBasedConfig != null) {\n+            oauth2EndpointURLInFile = getValueFromFileBasedConfig.get();\n+        }\n+        try {\n+            return buildServiceUrl(defaultContext, oauth2EndpointURLInFile);\n+        } catch (URLBuilderException e) {\n+            throw new IdentityRuntimeException(\"Error while building url for context: \" + defaultContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODcwNjMxOnYy", "diffSide": "LEFT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjo1OToyOVrOGIwQKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNTowNjowM1rOGIyrPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMjM2Mw==", "bodyText": "who handles the logic when the value in db is empty", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411832363", "createdAt": "2020-04-21T02:59:29Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3145,14 +3167,8 @@ public static String getIdTokenIssuer(String tenantDomain) throws IdentityOAuth2\n         FederatedAuthenticatorConfig oidcAuthenticatorConfig =\n                 IdentityApplicationManagementUtil.getFederatedAuthenticator(fedAuthnConfigs,\n                         IdentityApplicationConstants.Authenticator.OIDC.NAME);\n-        String idpEntityId = IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n+        return IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n                 IDP_ENTITY_ID).getValue();\n-        if (StringUtils.isNotBlank(idpEntityId) && idpEntityId.equals(IdentityUtil.getProperty(\"OAuth.OpenIDConnect\" +\n-                \".IDTokenIssuerID\"))) {\n-            return IdentityUtil.resolveURL(idpEntityId, tenantDomain, true, false, false, false);\n-        } else {\n-            return idpEntityId;\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg3MjA2MA==", "bodyText": "The idPEntityId is written during the tenant creation and can't be empty", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r411872060", "createdAt": "2020-04-21T05:06:03Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -3145,14 +3167,8 @@ public static String getIdTokenIssuer(String tenantDomain) throws IdentityOAuth2\n         FederatedAuthenticatorConfig oidcAuthenticatorConfig =\n                 IdentityApplicationManagementUtil.getFederatedAuthenticator(fedAuthnConfigs,\n                         IdentityApplicationConstants.Authenticator.OIDC.NAME);\n-        String idpEntityId = IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n+        return IdentityApplicationManagementUtil.getProperty(oidcAuthenticatorConfig.getProperties(),\n                 IDP_ENTITY_ID).getValue();\n-        if (StringUtils.isNotBlank(idpEntityId) && idpEntityId.equals(IdentityUtil.getProperty(\"OAuth.OpenIDConnect\" +\n-                \".IDTokenIssuerID\"))) {\n-            return IdentityUtil.resolveURL(idpEntityId, tenantDomain, true, false, false, false);\n-        } else {\n-            return idpEntityId;\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgzMjM2Mw=="}, "originalCommit": {"oid": "a10f38d32aa5bb16ce3fa68e107c7110431bc344"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDU1NjQ0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMTozMTowOFrOGJA1Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzoxMTowMFrOGJE50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMzk4Ng==", "bodyText": "Isn't above loading from the file config", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412103986", "createdAt": "2020-04-21T11:31:08Z", "author": {"login": "malithie"}, "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "diffHunk": "@@ -110,10 +110,8 @@ public OIDProviderConfigResponse buildOIDProviderConfig(OIDProviderRequest reque\n \n         providerConfig.setSubjectTypesSupported(new String[]{\"pairwise\"});\n \n-        providerConfig.setCheckSessionIframe(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL), true, false));\n-        providerConfig.setEndSessionEndpoint(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL), true, false));\n+        providerConfig.setCheckSessionIframe(buildUrl(IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL));\n+        providerConfig.setEndSessionEndpoint(buildUrl(IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE3MDcwNg==", "bodyText": "updated", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412170706", "createdAt": "2020-04-21T13:11:00Z", "author": {"login": "chamathns"}, "path": "components/org.wso2.carbon.identity.discovery/src/main/java/org/wso2/carbon/identity/discovery/builders/ProviderConfigBuilder.java", "diffHunk": "@@ -110,10 +110,8 @@ public OIDProviderConfigResponse buildOIDProviderConfig(OIDProviderRequest reque\n \n         providerConfig.setSubjectTypesSupported(new String[]{\"pairwise\"});\n \n-        providerConfig.setCheckSessionIframe(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL), true, false));\n-        providerConfig.setEndSessionEndpoint(IdentityUtil.resolveURL(IdentityUtil.getProperty(\n-                IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL), true, false));\n+        providerConfig.setCheckSessionIframe(buildUrl(IdentityConstants.OAuth.OIDC_CHECK_SESSION_EP_URL));\n+        providerConfig.setEndSessionEndpoint(buildUrl(IdentityConstants.OAuth.OIDC_LOGOUT_EP_URL));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjEwMzk4Ng=="}, "originalCommit": {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDk0NzIzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowMDowMlrOGJEapw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowMDowMlrOGJEapw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MjcyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //Append tenant domain to path when the tenant-qualified url mode is disabled.\n          \n          \n            \n                            // Append tenant domain to the path when the tenant-qualified URL mode is disabled.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412162727", "createdAt": "2020-04-21T13:00:02Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1258,34 +1237,24 @@ public static String getOAuth2JWKSPageUrl() throws URISyntaxException {\n \n         public static String getOidcWebFingerEPUrl() {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOidcWebFingerEPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OIDC_WEB_FINGER_EP_URL, true, false);\n-            }\n-            return IdentityUtil.resolveURL(oauth2TokenEPUrl, true, true);\n+            return buildUrl(OIDC_WEB_FINGER_EP_URL, OAuthServerConfiguration.getInstance()::getOidcWebFingerEPUrl);\n         }\n \n         public static String getOidcDiscoveryEPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oidcDiscoveryEPUrl = OAuthServerConfiguration.getInstance().getOidcDiscoveryUrl();\n-            if (StringUtils.isBlank(oidcDiscoveryEPUrl)) {\n-                oidcDiscoveryEPUrl = IdentityUtil.getServerURL(OAUTH2_DISCOVERY_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oidcDiscoveryEPUrl = getTenantUrl(oidcDiscoveryEPUrl, tenantDomain);\n-            }\n+            String oidcDiscoveryEPUrl = buildUrl(OAUTH2_DISCOVERY_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOidcDiscoveryUrl);\n \n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                //Append tenant domain to path when the tenant-qualified url mode is disabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDk0ODc1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowMDoyM1rOGJEblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowMDoyM1rOGJEblA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2Mjk2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //Append tenant domain to path when the tenant-qualified url mode is disabled.\n          \n          \n            \n                            // Append tenant domain to the path when the tenant-qualified URL mode is disabled.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412162964", "createdAt": "2020-04-21T13:00:23Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1195,30 +1191,14 @@ public static String getOAuth2TokenEPUrl() {\n          */\n         public static String getOAuth2DCREPUrl(String tenantDomain) throws URISyntaxException {\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                oauth2TokenEPUrl = getTenantUrl(oauth2TokenEPUrl, tenantDomain);\n-            }\n-            return oauth2TokenEPUrl;\n-        }\n-\n-        /**\n-         * This method is used to get the resolved URL for the OAuth2 Registration Endpoint.\n-         *\n-         * @return String of the resolved URL for the Registration endpoint.\n-         * @throws URISyntaxException URI Syntax Exception.\n-         */\n-        public static String getOAuth2DCREPUrl() throws URISyntaxException {\n+            String oauth2TokenEPUrl =\n+                    buildUrl(OAUTH2_DCR_EP_URL, OAuthServerConfiguration.getInstance()::getOAuth2DCREPUrl);\n \n-            String oauth2TokenEPUrl = OAuthServerConfiguration.getInstance().getOAuth2DCREPUrl();\n-            if (StringUtils.isBlank(oauth2TokenEPUrl)) {\n-                oauth2TokenEPUrl = IdentityUtil.getServerURL(OAUTH2_DCR_EP_URL, true, false);\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                //Append tenant domain to path when the tenant-qualified url mode is disabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MDk0OTY1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowMDozNlrOGJEcLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzowMDozNlrOGJEcLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE2MzExNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            //Append tenant domain to path when the tenant-qualified url mode is disabled.\n          \n          \n            \n                            // Append tenant domain to the path when the tenant-qualified URL mode is disabled.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1353#discussion_r412163117", "createdAt": "2020-04-21T13:00:36Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/util/OAuth2Util.java", "diffHunk": "@@ -1230,13 +1210,12 @@ public static String getOAuth2DCREPUrl() throws URISyntaxException {\n          */\n         public static String getOAuth2JWKSPageUrl(String tenantDomain) throws URISyntaxException {\n \n-            String auth2JWKSPageUrl = OAuthServerConfiguration.getInstance().getOAuth2JWKSPageUrl();\n-            if (StringUtils.isBlank(auth2JWKSPageUrl)) {\n-                auth2JWKSPageUrl = IdentityUtil.getServerURL(OAUTH2_JWKS_EP_URL, true, false);\n-            }\n-            if (StringUtils.isNotBlank(tenantDomain) && !MultitenantConstants.SUPER_TENANT_DOMAIN_NAME.equals\n-                    (tenantDomain)) {\n-                auth2JWKSPageUrl = getTenantUrl(auth2JWKSPageUrl, tenantDomain);\n+            String auth2JWKSPageUrl = buildUrl(OAUTH2_JWKS_EP_URL,\n+                    OAuthServerConfiguration.getInstance()::getOAuth2JWKSPageUrl);\n+\n+            if (!IdentityTenantUtil.isTenantQualifiedUrlsEnabled() && isNotSuperTenant(tenantDomain)) {\n+                //Append tenant domain to path when the tenant-qualified url mode is disabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dab7125241b7c7d540d145196d1a88b9ee51467"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3668, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}