{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMTI2MjQ1", "number": 1333, "title": "Fix Device-Flow client validation", "bodyText": "Proposed changes in this pull request\nFix wso2/product-is#7275", "createdAt": "2020-02-26T10:06:10Z", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333", "merged": true, "mergeCommit": {"oid": "7bdc3d8ffcb8418744d123ddce9b168879cb440b"}, "closed": true, "closedAt": "2020-02-28T04:43:10Z", "author": {"login": "chamathns"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcH0r_gAH2gAyMzgwMTI2MjQ1OjhlMzlhZmY0Y2RjMGMwNWRjMTM1NmFlOGRkNDNkOGZiYTRhOWY3N2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEOTZBgFqTQ3ODQwODEwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8e39aff4cdc0c05dc1356ae8dd43d8fba4a9f77c", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/8e39aff4cdc0c05dc1356ae8dd43d8fba4a9f77c", "committedDate": "2020-02-25T16:26:40Z", "message": "fix client id validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7886b87d785245344b0fdcff8e645afae31b2b46", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/7886b87d785245344b0fdcff8e645afae31b2b46", "committedDate": "2020-02-26T09:41:02Z", "message": "fix device flow authentication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1913de05486b099be8b45cd1d383ada010c32352", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/1913de05486b099be8b45cd1d383ada010c32352", "committedDate": "2020-02-26T09:55:21Z", "message": "Merge branch 'fix-device-flow'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61ba490ab24d766ae83845de9a9aa25dce1b0954", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/61ba490ab24d766ae83845de9a9aa25dce1b0954", "committedDate": "2020-02-27T14:16:08Z", "message": "fix device-flow tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/8f21db926a40017c3a4ac16fbda9f16ec036fa60", "committedDate": "2020-02-27T14:19:42Z", "message": "Merge branch 'master' of https://github.com/wso2-extensions/identity-inbound-auth-oauth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODE2NTIz", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#pullrequestreview-365816523", "createdAt": "2020-02-27T16:41:01Z", "commit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0MTowMVrOFvYlOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0MTowMVrOFvYlOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzMDEzOA==", "bodyText": "Missing fullstop", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#discussion_r385230138", "createdAt": "2020-02-27T16:41:01Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth.endpoint/src/main/java/org/wso2/carbon/identity/oauth/endpoint/device/DeviceEndpoint.java", "diffHunk": "@@ -57,44 +66,81 @@ public void setDeviceAuthService(DeviceAuthService deviceAuthService) {\n     @Path(\"/\")\n     @Consumes(\"application/x-www-form-urlencoded\")\n     @Produces(\"application/json\")\n-    public Response authorize(@Context HttpServletRequest request, @Context HttpServletResponse response)\n-            throws IdentityOAuth2Exception {\n-\n-        String clientId = request.getParameter(Constants.CLIENT_ID);\n-        JSONObject errorResponse = new JSONObject();\n-        if (StringUtils.isBlank(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.INVALID_REQUEST)\n-                    .put(Constants.ERROR_DESCRIPTION, \"Request missing required parameters\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_BAD_REQUEST);\n-            return respBuilder.entity(errorResponse.toString()).build();\n-        }\n-        if (!validateClientId(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.UNAUTHORIZED_CLIENT)\n-                    .put(Constants.ERROR_DESCRIPTION, \"No registered client with the client id.\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_UNAUTHORIZED);\n-            return respBuilder.entity(errorResponse.toString()).build();\n+    public Response authorize(@Context HttpServletRequest request, MultivaluedMap<String, String> paramMap,\n+                              @Context HttpServletResponse response)\n+            throws IdentityOAuth2Exception, OAuthSystemException {\n+\n+        OAuthClientAuthnContext oAuthClientAuthnContext =  validateClient(request);\n+\n+        if (!oAuthClientAuthnContext.isAuthenticated()) {\n+            return handleErrorResponse(oAuthClientAuthnContext);\n         }\n+\n         String userCode = GenerateKeys.getKey(Constants.KEY_LENGTH);\n         String deviceCode = UUID.randomUUID().toString();\n         String scopes = request.getParameter(Constants.SCOPE);\n-        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\", false, false);\n+        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\",\n+                false, false);\n         String redirectionUriComplete = redirectionUri + \"?user_code=\" + userCode;\n-        deviceAuthService.generateDeviceResponse(deviceCode, userCode, clientId, scopes);\n+        deviceAuthService.generateDeviceResponse(deviceCode, userCode, oAuthClientAuthnContext.getClientId(), scopes);\n         return buildResponseObject(deviceCode, userCode, redirectionUri, redirectionUriComplete);\n     }\n \n-    /**\n-     * This method uses to validate the client is exist or not.\n-     *\n-     * @param clientId Consumer key of the client.\n-     * @return Client is exist or not.\n-     * @throws IdentityOAuth2Exception\n-     */\n-    private boolean validateClientId(String clientId) throws IdentityOAuth2Exception {\n+    private Response handleErrorResponse(OAuthClientAuthnContext oAuthClientAuthnContext) throws OAuthSystemException {\n+\n+        if (OAuth2ErrorCodes.INVALID_CLIENT.equals(oAuthClientAuthnContext.getErrorMessage())) {\n+            return handleBasicAuthFailure(oAuthClientAuthnContext.getErrorCode(),\n+                    oAuthClientAuthnContext.getErrorMessage());\n+        } else if (OAuth2ErrorCodes.SERVER_ERROR.equals(oAuthClientAuthnContext.getErrorMessage())) {\n \n-        return deviceAuthService.validateClientInfo(clientId);\n+            return handleServerError();\n+        } else {\n+            // Otherwise send back HTTP 400 Status Code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODE2NzM1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#pullrequestreview-365816735", "createdAt": "2020-02-27T16:41:18Z", "commit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0MToxOFrOFvYl9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0MToxOFrOFvYl9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzMDMyNg==", "bodyText": "keep a new line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#discussion_r385230326", "createdAt": "2020-02-27T16:41:18Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth.endpoint/src/main/java/org/wso2/carbon/identity/oauth/endpoint/device/DeviceEndpoint.java", "diffHunk": "@@ -57,44 +66,81 @@ public void setDeviceAuthService(DeviceAuthService deviceAuthService) {\n     @Path(\"/\")\n     @Consumes(\"application/x-www-form-urlencoded\")\n     @Produces(\"application/json\")\n-    public Response authorize(@Context HttpServletRequest request, @Context HttpServletResponse response)\n-            throws IdentityOAuth2Exception {\n-\n-        String clientId = request.getParameter(Constants.CLIENT_ID);\n-        JSONObject errorResponse = new JSONObject();\n-        if (StringUtils.isBlank(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.INVALID_REQUEST)\n-                    .put(Constants.ERROR_DESCRIPTION, \"Request missing required parameters\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_BAD_REQUEST);\n-            return respBuilder.entity(errorResponse.toString()).build();\n-        }\n-        if (!validateClientId(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.UNAUTHORIZED_CLIENT)\n-                    .put(Constants.ERROR_DESCRIPTION, \"No registered client with the client id.\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_UNAUTHORIZED);\n-            return respBuilder.entity(errorResponse.toString()).build();\n+    public Response authorize(@Context HttpServletRequest request, MultivaluedMap<String, String> paramMap,\n+                              @Context HttpServletResponse response)\n+            throws IdentityOAuth2Exception, OAuthSystemException {\n+\n+        OAuthClientAuthnContext oAuthClientAuthnContext =  validateClient(request);\n+\n+        if (!oAuthClientAuthnContext.isAuthenticated()) {\n+            return handleErrorResponse(oAuthClientAuthnContext);\n         }\n+\n         String userCode = GenerateKeys.getKey(Constants.KEY_LENGTH);\n         String deviceCode = UUID.randomUUID().toString();\n         String scopes = request.getParameter(Constants.SCOPE);\n-        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\", false, false);\n+        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\",\n+                false, false);\n         String redirectionUriComplete = redirectionUri + \"?user_code=\" + userCode;\n-        deviceAuthService.generateDeviceResponse(deviceCode, userCode, clientId, scopes);\n+        deviceAuthService.generateDeviceResponse(deviceCode, userCode, oAuthClientAuthnContext.getClientId(), scopes);\n         return buildResponseObject(deviceCode, userCode, redirectionUri, redirectionUriComplete);\n     }\n \n-    /**\n-     * This method uses to validate the client is exist or not.\n-     *\n-     * @param clientId Consumer key of the client.\n-     * @return Client is exist or not.\n-     * @throws IdentityOAuth2Exception\n-     */\n-    private boolean validateClientId(String clientId) throws IdentityOAuth2Exception {\n+    private Response handleErrorResponse(OAuthClientAuthnContext oAuthClientAuthnContext) throws OAuthSystemException {\n+\n+        if (OAuth2ErrorCodes.INVALID_CLIENT.equals(oAuthClientAuthnContext.getErrorMessage())) {\n+            return handleBasicAuthFailure(oAuthClientAuthnContext.getErrorCode(),\n+                    oAuthClientAuthnContext.getErrorMessage());\n+        } else if (OAuth2ErrorCodes.SERVER_ERROR.equals(oAuthClientAuthnContext.getErrorMessage())) {\n \n-        return deviceAuthService.validateClientInfo(clientId);\n+            return handleServerError();\n+        } else {\n+            // Otherwise send back HTTP 400 Status Code\n+            OAuthResponse response = OAuthASResponse\n+                    .errorResponse(HttpServletResponse.SC_BAD_REQUEST)\n+                    .setError(oAuthClientAuthnContext.getErrorCode())\n+                    .setErrorDescription(oAuthClientAuthnContext.getErrorMessage())\n+                    .buildJSONMessage();\n+            Response.ResponseBuilder respBuilder = Response.status(response.getResponseStatus());\n+            return respBuilder.entity(response.getBody()).build();\n+        }\n     }\n \n+    private OAuthClientAuthnContext validateClient(HttpServletRequest request) throws OAuthSystemException {\n+\n+        OAuthClientAuthnContext oAuthClientAuthnContext;\n+        Object oauthClientAuthnContextObj = request.getAttribute(OAuthConstants.CLIENT_AUTHN_CONTEXT);\n+        if (oauthClientAuthnContextObj instanceof OAuthClientAuthnContext) {\n+            oAuthClientAuthnContext = (OAuthClientAuthnContext) oauthClientAuthnContextObj;\n+        } else {\n+            oAuthClientAuthnContext = new OAuthClientAuthnContext();\n+            oAuthClientAuthnContext.setAuthenticated(false);\n+            oAuthClientAuthnContext.setErrorMessage(\"Client Authentication Failed\");\n+            oAuthClientAuthnContext.setErrorCode(OAuthError.TokenResponse.INVALID_REQUEST);\n+        }\n+        return oAuthClientAuthnContext;\n+    }\n+\n+    private Response handleServerError() throws OAuthSystemException {\n+\n+        OAuthResponse response = OAuthASResponse.errorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR).\n+                setError(OAuth2ErrorCodes.SERVER_ERROR).setErrorDescription(\"Internal Server Error.\")\n+                .buildJSONMessage();\n+\n+        return Response.status(response.getResponseStatus()).header(OAuthConstants.HTTP_RESP_HEADER_AUTHENTICATE,\n+                EndpointUtil.getRealmInfo()).entity(response.getBody()).build();\n+\n+    }\n+\n+    private Response handleBasicAuthFailure(String errorCode, String errorMessage) throws OAuthSystemException {\n+\n+        OAuthResponse response = OAuthASResponse.errorResponse(HttpServletResponse.SC_UNAUTHORIZED)\n+                .setError(OAuth2ErrorCodes.INVALID_CLIENT)\n+                .setErrorDescription(\"Client Authentication failed.\").buildJSONMessage();\n+        return Response.status(response.getResponseStatus())\n+                .header(OAuthConstants.HTTP_RESP_HEADER_AUTHENTICATE, EndpointUtil.getRealmInfo())\n+                .entity(response.getBody()).build();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "originalPosition": 149}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODIwODg5", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#pullrequestreview-365820889", "createdAt": "2020-02-27T16:46:09Z", "commit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0NjowOVrOFvYxyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0NjowOVrOFvYxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzMzM1NQ==", "bodyText": "Remove unnecessary new line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#discussion_r385233355", "createdAt": "2020-02-27T16:46:09Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth.endpoint/src/main/java/org/wso2/carbon/identity/oauth/endpoint/device/DeviceEndpoint.java", "diffHunk": "@@ -57,44 +66,81 @@ public void setDeviceAuthService(DeviceAuthService deviceAuthService) {\n     @Path(\"/\")\n     @Consumes(\"application/x-www-form-urlencoded\")\n     @Produces(\"application/json\")\n-    public Response authorize(@Context HttpServletRequest request, @Context HttpServletResponse response)\n-            throws IdentityOAuth2Exception {\n-\n-        String clientId = request.getParameter(Constants.CLIENT_ID);\n-        JSONObject errorResponse = new JSONObject();\n-        if (StringUtils.isBlank(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.INVALID_REQUEST)\n-                    .put(Constants.ERROR_DESCRIPTION, \"Request missing required parameters\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_BAD_REQUEST);\n-            return respBuilder.entity(errorResponse.toString()).build();\n-        }\n-        if (!validateClientId(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.UNAUTHORIZED_CLIENT)\n-                    .put(Constants.ERROR_DESCRIPTION, \"No registered client with the client id.\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_UNAUTHORIZED);\n-            return respBuilder.entity(errorResponse.toString()).build();\n+    public Response authorize(@Context HttpServletRequest request, MultivaluedMap<String, String> paramMap,\n+                              @Context HttpServletResponse response)\n+            throws IdentityOAuth2Exception, OAuthSystemException {\n+\n+        OAuthClientAuthnContext oAuthClientAuthnContext =  validateClient(request);\n+\n+        if (!oAuthClientAuthnContext.isAuthenticated()) {\n+            return handleErrorResponse(oAuthClientAuthnContext);\n         }\n+\n         String userCode = GenerateKeys.getKey(Constants.KEY_LENGTH);\n         String deviceCode = UUID.randomUUID().toString();\n         String scopes = request.getParameter(Constants.SCOPE);\n-        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\", false, false);\n+        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\",\n+                false, false);\n         String redirectionUriComplete = redirectionUri + \"?user_code=\" + userCode;\n-        deviceAuthService.generateDeviceResponse(deviceCode, userCode, clientId, scopes);\n+        deviceAuthService.generateDeviceResponse(deviceCode, userCode, oAuthClientAuthnContext.getClientId(), scopes);\n         return buildResponseObject(deviceCode, userCode, redirectionUri, redirectionUriComplete);\n     }\n \n-    /**\n-     * This method uses to validate the client is exist or not.\n-     *\n-     * @param clientId Consumer key of the client.\n-     * @return Client is exist or not.\n-     * @throws IdentityOAuth2Exception\n-     */\n-    private boolean validateClientId(String clientId) throws IdentityOAuth2Exception {\n+    private Response handleErrorResponse(OAuthClientAuthnContext oAuthClientAuthnContext) throws OAuthSystemException {\n+\n+        if (OAuth2ErrorCodes.INVALID_CLIENT.equals(oAuthClientAuthnContext.getErrorMessage())) {\n+            return handleBasicAuthFailure(oAuthClientAuthnContext.getErrorCode(),\n+                    oAuthClientAuthnContext.getErrorMessage());\n+        } else if (OAuth2ErrorCodes.SERVER_ERROR.equals(oAuthClientAuthnContext.getErrorMessage())) {\n \n-        return deviceAuthService.validateClientInfo(clientId);\n+            return handleServerError();\n+        } else {\n+            // Otherwise send back HTTP 400 Status Code\n+            OAuthResponse response = OAuthASResponse\n+                    .errorResponse(HttpServletResponse.SC_BAD_REQUEST)\n+                    .setError(oAuthClientAuthnContext.getErrorCode())\n+                    .setErrorDescription(oAuthClientAuthnContext.getErrorMessage())\n+                    .buildJSONMessage();\n+            Response.ResponseBuilder respBuilder = Response.status(response.getResponseStatus());\n+            return respBuilder.entity(response.getBody()).build();\n+        }\n     }\n \n+    private OAuthClientAuthnContext validateClient(HttpServletRequest request) throws OAuthSystemException {\n+\n+        OAuthClientAuthnContext oAuthClientAuthnContext;\n+        Object oauthClientAuthnContextObj = request.getAttribute(OAuthConstants.CLIENT_AUTHN_CONTEXT);\n+        if (oauthClientAuthnContextObj instanceof OAuthClientAuthnContext) {\n+            oAuthClientAuthnContext = (OAuthClientAuthnContext) oauthClientAuthnContextObj;\n+        } else {\n+            oAuthClientAuthnContext = new OAuthClientAuthnContext();\n+            oAuthClientAuthnContext.setAuthenticated(false);\n+            oAuthClientAuthnContext.setErrorMessage(\"Client Authentication Failed\");\n+            oAuthClientAuthnContext.setErrorCode(OAuthError.TokenResponse.INVALID_REQUEST);\n+        }\n+        return oAuthClientAuthnContext;\n+    }\n+\n+    private Response handleServerError() throws OAuthSystemException {\n+\n+        OAuthResponse response = OAuthASResponse.errorResponse(HttpServletResponse.SC_INTERNAL_SERVER_ERROR).\n+                setError(OAuth2ErrorCodes.SERVER_ERROR).setErrorDescription(\"Internal Server Error.\")\n+                .buildJSONMessage();\n+\n+        return Response.status(response.getResponseStatus()).header(OAuthConstants.HTTP_RESP_HEADER_AUTHENTICATE,\n+                EndpointUtil.getRealmInfo()).entity(response.getBody()).build();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODIxNTY2", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#pullrequestreview-365821566", "createdAt": "2020-02-27T16:46:55Z", "commit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0Njo1NVrOFvYz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNjo0Njo1NVrOFvYz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTIzMzg3Mw==", "bodyText": "Keep a new line after the method declaration", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#discussion_r385233873", "createdAt": "2020-02-27T16:46:55Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth.endpoint/src/test/java/org/wso2/carbon/identity/oauth/endpoint/device/DeviceEndpointTest.java", "diffHunk": "@@ -113,11 +124,16 @@ public void testStringValueInSeconds(long value) throws Exception {\n \n     @DataProvider(name = \"dataValues\")\n     public Object[][] dataValues() {\n+        MultivaluedMap<String, String> mapWithClientId = new MultivaluedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f21db926a40017c3a4ac16fbda9f16ec036fa60"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42aa78048126ab78394969ffdf5537f8d33ef305", "author": {"user": {"login": "chamathns", "name": "Chamath Samarawickrama"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/42aa78048126ab78394969ffdf5537f8d33ef305", "committedDate": "2020-02-27T16:52:29Z", "message": "fix minor issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MTU4MTE1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#pullrequestreview-366158115", "createdAt": "2020-02-28T04:43:00Z", "commit": {"oid": "42aa78048126ab78394969ffdf5537f8d33ef305"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NDA4MTAz", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#pullrequestreview-478408103", "createdAt": "2020-08-31T08:12:46Z", "commit": {"oid": "42aa78048126ab78394969ffdf5537f8d33ef305"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODoxMjo0NlrOHJu9-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODoxMjo0NlrOHJu9-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk2ODc2Mw==", "bodyText": "Is invalid request the appropriate error code here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1333#discussion_r479968763", "createdAt": "2020-08-31T08:12:46Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth.endpoint/src/main/java/org/wso2/carbon/identity/oauth/endpoint/device/DeviceEndpoint.java", "diffHunk": "@@ -57,42 +66,79 @@ public void setDeviceAuthService(DeviceAuthService deviceAuthService) {\n     @Path(\"/\")\n     @Consumes(\"application/x-www-form-urlencoded\")\n     @Produces(\"application/json\")\n-    public Response authorize(@Context HttpServletRequest request, @Context HttpServletResponse response)\n-            throws IdentityOAuth2Exception {\n-\n-        String clientId = request.getParameter(Constants.CLIENT_ID);\n-        JSONObject errorResponse = new JSONObject();\n-        if (StringUtils.isBlank(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.INVALID_REQUEST)\n-                    .put(Constants.ERROR_DESCRIPTION, \"Request missing required parameters\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_BAD_REQUEST);\n-            return respBuilder.entity(errorResponse.toString()).build();\n-        }\n-        if (!validateClientId(clientId)) {\n-            errorResponse.put(Constants.ERROR, DeviceErrorCodes.UNAUTHORIZED_CLIENT)\n-                    .put(Constants.ERROR_DESCRIPTION, \"No registered client with the client id.\");\n-            Response.ResponseBuilder respBuilder = Response.status(HttpServletResponse.SC_UNAUTHORIZED);\n-            return respBuilder.entity(errorResponse.toString()).build();\n+    public Response authorize(@Context HttpServletRequest request, MultivaluedMap<String, String> paramMap,\n+                              @Context HttpServletResponse response)\n+            throws IdentityOAuth2Exception, OAuthSystemException {\n+\n+        OAuthClientAuthnContext oAuthClientAuthnContext =  getValidationObject(request);\n+\n+        if (!oAuthClientAuthnContext.isAuthenticated()) {\n+            return handleErrorResponse(oAuthClientAuthnContext);\n         }\n+\n         String userCode = GenerateKeys.getKey(Constants.KEY_LENGTH);\n         String deviceCode = UUID.randomUUID().toString();\n         String scopes = request.getParameter(Constants.SCOPE);\n-        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\", false, false);\n+        String redirectionUri = IdentityUtil.getServerURL(\"/authenticationendpoint/device.do\",\n+                false, false);\n         String redirectionUriComplete = redirectionUri + \"?user_code=\" + userCode;\n-        deviceAuthService.generateDeviceResponse(deviceCode, userCode, clientId, scopes);\n+        deviceAuthService.generateDeviceResponse(deviceCode, userCode, oAuthClientAuthnContext.getClientId(), scopes);\n         return buildResponseObject(deviceCode, userCode, redirectionUri, redirectionUriComplete);\n     }\n \n-    /**\n-     * This method uses to validate the client is exist or not.\n-     *\n-     * @param clientId Consumer key of the client.\n-     * @return Client is exist or not.\n-     * @throws IdentityOAuth2Exception\n-     */\n-    private boolean validateClientId(String clientId) throws IdentityOAuth2Exception {\n+    private Response handleErrorResponse(OAuthClientAuthnContext oAuthClientAuthnContext) throws OAuthSystemException {\n+\n+        if (OAuth2ErrorCodes.INVALID_CLIENT.equals(oAuthClientAuthnContext.getErrorMessage())) {\n+            return handleBasicAuthFailure(oAuthClientAuthnContext.getErrorCode(),\n+                    oAuthClientAuthnContext.getErrorMessage());\n+        } else if (OAuth2ErrorCodes.SERVER_ERROR.equals(oAuthClientAuthnContext.getErrorMessage())) {\n+\n+            return handleServerError();\n+        } else {\n+            // Otherwise send back HTTP 400 Status Code.\n+            OAuthResponse response = OAuthASResponse\n+                    .errorResponse(HttpServletResponse.SC_BAD_REQUEST)\n+                    .setError(oAuthClientAuthnContext.getErrorCode())\n+                    .setErrorDescription(oAuthClientAuthnContext.getErrorMessage())\n+                    .buildJSONMessage();\n+            Response.ResponseBuilder respBuilder = Response.status(response.getResponseStatus());\n+            return respBuilder.entity(response.getBody()).build();\n+        }\n+    }\n+\n+    private OAuthClientAuthnContext getValidationObject(HttpServletRequest request) throws OAuthSystemException {\n+\n+        OAuthClientAuthnContext oAuthClientAuthnContext;\n+        Object oauthClientAuthnContextObj = request.getAttribute(OAuthConstants.CLIENT_AUTHN_CONTEXT);\n+        if (oauthClientAuthnContextObj instanceof OAuthClientAuthnContext) {\n+            oAuthClientAuthnContext = (OAuthClientAuthnContext) oauthClientAuthnContextObj;\n+        } else {\n+            oAuthClientAuthnContext = new OAuthClientAuthnContext();\n+            oAuthClientAuthnContext.setAuthenticated(false);\n+            oAuthClientAuthnContext.setErrorMessage(\"Client Authentication Failed\");\n+            oAuthClientAuthnContext.setErrorCode(OAuthError.TokenResponse.INVALID_REQUEST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42aa78048126ab78394969ffdf5537f8d33ef305"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3220, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}