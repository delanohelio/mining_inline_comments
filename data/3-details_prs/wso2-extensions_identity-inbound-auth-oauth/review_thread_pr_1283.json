{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4OTY2ODEz", "number": 1283, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNToyOTowMFrODV4-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1MDoyM1rODV5G4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgwMTg0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNToyOTowMFrOFaVsOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNToyOTowMFrOFaVsOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2MjY4MQ==", "bodyText": "Shall we add a colon : before the user parameter?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363162681", "createdAt": "2020-01-06T05:29:00Z", "author": {"login": "tharindu-bandara"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -97,8 +98,8 @@\n \n         String loggedInUser = CarbonContext.getThreadLocalCarbonContext().getUsername();\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Adding a consumer secret for the logged in user \" + loggedInUser);\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Adding a consumer secret for the logged in user \" + loggedInUser);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgwNTAwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTozMjozMFrOFaVt_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTozMjozMFrOFaVt_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2MzEzNA==", "bodyText": "Shall we add a colon before the parameters?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363163134", "createdAt": "2020-01-06T05:32:30Z", "author": {"login": "tharindu-bandara"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -887,52 +889,52 @@ public OAuthRevocationResponseDTO revokeAuthzForAppsByResourceOwner(\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getConsumerKey(), authzUser,\n                                     buildScopeString(accessTokenDO.getScope()), tokenBindingReference);\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getConsumerKey(), authzUser,\n-                                                      buildScopeString(accessTokenDO.getScope()));\n+                                    buildScopeString(accessTokenDO.getScope()));\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getConsumerKey(), authzUser);\n                             OAuthUtil.clearOAuthCache(accessTokenDO.getAccessToken());\n                             AccessTokenDO scopedToken;\n                             try {\n                                 // Retrieve latest access token for particular client, user and scope combination if\n                                 // its ACTIVE or EXPIRED.\n                                 scopedToken = OAuthTokenPersistenceFactory.getInstance().getAccessTokenDAO()\n-                                                                          .getLatestAccessToken(\n-                                                                                  appDTO.getOauthConsumerKey(), user,\n-                                                                                  userStoreDomain,\n-                                                                                  buildScopeString(\n-                                                                                          accessTokenDO.getScope()),\n-                                                                                  true);\n+                                        .getLatestAccessToken(\n+                                                appDTO.getOauthConsumerKey(), user,\n+                                                userStoreDomain,\n+                                                buildScopeString(\n+                                                        accessTokenDO.getScope()),\n+                                                true);\n                             } catch (IdentityOAuth2Exception e) {\n                                 String errorMsg = \"Error occurred while retrieving latest \" +\n-                                                  \"access token issued for Client ID : \" +\n-                                                  appDTO.getOauthConsumerKey() + \", User ID : \" + userName +\n-                                                  \" and Scope : \" + buildScopeString(accessTokenDO.getScope());\n+                                        \"access token issued for Client ID : \" +\n+                                        appDTO.getOauthConsumerKey() + \", User ID : \" + userName +\n+                                        \" and Scope : \" + buildScopeString(accessTokenDO.getScope());\n                                 throw handleError(errorMsg, e);\n                             }\n                             if (scopedToken != null) {\n                                 //Revoking token from database\n                                 try {\n                                     OAuthTokenPersistenceFactory.getInstance().getAccessTokenDAO()\n-                                                                .revokeAccessTokens(new String[]{scopedToken\n-                                                                        .getAccessToken()});\n+                                            .revokeAccessTokens(new String[]{scopedToken\n+                                                    .getAccessToken()});\n                                 } catch (IdentityOAuth2Exception e) {\n                                     String errorMsg = \"Error occurred while revoking \" + \"Access Token : \" +\n-                                                      scopedToken.getAccessToken();\n+                                            scopedToken.getAccessToken();\n                                     throw handleError(errorMsg, e);\n                                 }\n                                 //Revoking the oauth consent from database.\n                                 try {\n                                     OAuthTokenPersistenceFactory.getInstance().getTokenManagementDAO()\n-                                            .revokeOAuthConsentByApplicationAndUser((\n-                                                    (AuthenticatedUser) authzUser).getAuthenticatedSubjectIdentifier(),\n-                                                                                    tenantDomain, appName);\n+                                            .revokeOAuthConsentByApplicationAndUser(\n+                                                    authzUser.getAuthenticatedSubjectIdentifier(),\n+                                                    tenantDomain, appName);\n                                 } catch (IdentityOAuth2Exception e) {\n                                     String errorMsg = \"Error occurred while removing OAuth Consent of Application \" +\n-                                                      appName + \" of user \" + userName;\n+                                            appName + \" of user \" + userName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7"}, "originalPosition": 450}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgwOTI0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTozNzowN1rOFaVwjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTozNzowN1rOFaVwjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2Mzc4OA==", "bodyText": "Space at the end of the log might not be required.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363163788", "createdAt": "2020-01-06T05:37:07Z", "author": {"login": "tharindu-bandara"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -998,16 +1000,16 @@ void triggerPostRevokeListeners(OAuthRevocationRequestDTO revokeRequestDTO,\n                                     OAuthRevocationResponseDTO revokeRespDTO, AccessTokenDO[] accessTokenDOs) {\n \n         OAuthEventInterceptor oAuthEventInterceptorProxy = OAuthComponentServiceHolder.getInstance()\n-                                                                                      .getOAuthEventInterceptorProxy();\n+                .getOAuthEventInterceptorProxy();\n \n         for (AccessTokenDO accessTokenDO : accessTokenDOs) {\n             if (oAuthEventInterceptorProxy != null && oAuthEventInterceptorProxy.isEnabled()) {\n                 try {\n                     Map<String, Object> paramMap = new HashMap<String, Object>();\n                     oAuthEventInterceptorProxy.onPostTokenRevocationByResourceOwner(revokeRequestDTO, revokeRespDTO,\n-                                                                                    accessTokenDO, paramMap);\n+                            accessTokenDO, paramMap);\n                 } catch (IdentityOAuth2Exception e) {\n-                    log.error(\"Error occurred with post revocation listener \", e);\n+                    LOG.error(\"Error occurred with post revocation listener \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7"}, "originalPosition": 502}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgxMDE1OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTozODowN1rOFaVxFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTozODowN1rOFaVxFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2MzkyNA==", "bodyText": "Shall we add a colon before the token type parameter?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363163924", "createdAt": "2020-01-06T05:38:07Z", "author": {"login": "tharindu-bandara"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -1137,36 +1140,36 @@ void validateTokenExpiryConfigurations(OAuthConsumerAppDTO oAuthConsumerAppDTO)\n             oAuthConsumerAppDTO.setUserAccessTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getUserAccessTokenValidityPeriodInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"user access token\",\n-                               oAuthConsumerAppDTO.getUserAccessTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getUserAccessTokenExpiryTime());\n         }\n \n         if (oAuthConsumerAppDTO.getApplicationAccessTokenExpiryTime() == 0) {\n             oAuthConsumerAppDTO.setApplicationAccessTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getApplicationAccessTokenValidityPeriodInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"application access token\",\n-                               oAuthConsumerAppDTO.getApplicationAccessTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getApplicationAccessTokenExpiryTime());\n         }\n \n         if (oAuthConsumerAppDTO.getRefreshTokenExpiryTime() == 0) {\n             oAuthConsumerAppDTO.setRefreshTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getRefreshTokenValidityPeriodInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"refresh token\",\n-                               oAuthConsumerAppDTO.getRefreshTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getRefreshTokenExpiryTime());\n         }\n \n         if (oAuthConsumerAppDTO.getIdTokenExpiryTime() == 0) {\n             oAuthConsumerAppDTO.setIdTokenExpiryTime(\n                     OAuthServerConfiguration.getInstance().getOpenIDConnectIDTokenExpiryTimeInSeconds());\n             logOnInvalidConfig(oAuthConsumerAppDTO.getApplicationName(), \"id token\",\n-                               oAuthConsumerAppDTO.getIdTokenExpiryTime());\n+                    oAuthConsumerAppDTO.getIdTokenExpiryTime());\n         }\n     }\n \n     void logOnInvalidConfig(String appName, String tokenType, long defaultValue) {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Invalid expiry time value '0' set for \" + tokenType + \" in ServiceProvider: \" + appName + \". \"\n-                      + \"Defaulting to expiry value: \" + defaultValue + \" seconds.\");\n+        if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Invalid expiry time value '0' set for \" + tokenType + \" in ServiceProvider: \" + appName + \". \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7"}, "originalPosition": 580}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgxNjgzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0Mzo1NlrOFaV09A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo0Mzo1NlrOFaV09A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NDkxNg==", "bodyText": "Shall we add the full stop for the debug messages?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363164916", "createdAt": "2020-01-06T05:43:56Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -122,8 +123,8 @@\n \n         if (userName == null) {\n             String msg = \"User not logged in to get all registered OAuth Applications\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjgyMzM5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1MDoyM1rOFaV4tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQwNTo1MDoyM1rOFaV4tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzE2NTg3OA==", "bodyText": "Can't these two lines be combined?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1283#discussion_r363165878", "createdAt": "2020-01-06T05:50:23Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -700,36 +701,36 @@ void updateAppAndRevokeTokensAndAuthzCodes(String consumerKey,\n                     cacheKeyString = consumerKey + \":\" + authorizedUser + \":\" + scope + \":\" + authenticatedIDP;\n                 } else {\n                     cacheKeyString = consumerKey + \":\" + authorizedUser.toLowerCase() + \":\" + scope + \":\"\n-                                     + authenticatedIDP;\n+                            + authenticatedIDP;\n                 }\n                 OAuthCacheKey cacheKeyUser = new OAuthCacheKey(cacheKeyString);\n                 OAuthCache.getInstance().clearCacheEntry(cacheKeyUser);\n             }\n \n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Access tokens and token of users are removed from the cache for OAuth App with \" +\n-                          \"consumerKey: \" + consumerKey);\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Access tokens and token of users are removed from the cache for OAuth App with \" +\n+                        \"consumerKey: \" + consumerKey);\n             }\n \n             Set<String> authorizationCodes = OAuthTokenPersistenceFactory.getInstance().getAuthorizationCodeDAO()\n-                                                                         .getActiveAuthorizationCodesByConsumerKey\n-                                                                                 (consumerKey);\n+                    .getActiveAuthorizationCodesByConsumerKey\n+                            (consumerKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b087e150eddf3a94c4c4a7e8aa97c362b772b7"}, "originalPosition": 283}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3723, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}