{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NDcwNDQz", "number": 1413, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozNzoxNVrOEWMsPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MTowM1rOEWPeKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzEyMDYzOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/edit.jsp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozNzoxNVrOG9YNlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjozNzoxNVrOG9YNlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxMzAxMw==", "bodyText": "remove this", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467013013", "createdAt": "2020-08-07T12:37:15Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/edit.jsp", "diffHunk": "@@ -95,7 +95,7 @@\n         supportedIdTokenEncryptionMethods =\n                 client.getSupportedIDTokenAlgorithms().getSupportedIdTokenEncryptionMethods();\n         supportedTokenBindingsMetaData = client.getSupportedTokenBindingsMetaData();\n-\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzEzMjE5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MTowMlrOG9YUmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzo1MjozM1rOG9avlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDgwOA==", "bodyText": "Are we using all of these values which are set to the accessTokenDO?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467014808", "createdAt": "2020-08-07T12:41:02Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);\n+                        } else {\n+                            String consumerKey = resultSet.getString(\"CONSUMER_KEY\");\n+                            String tokenScope = resultSet.getString(\"TOKEN_SCOPE\");\n+                            String refreshToken = resultSet.getString(\"REFRESH_TOKEN\");\n+                            String tokenId = resultSet.getString(\"TOKEN_ID\");\n+\n+                            String[] scope = OAuth2Util.buildScopeArray(tokenScope);\n+                            accessTokenDO.setAccessToken(token);\n+                            accessTokenDO.setConsumerKey(consumerKey);\n+                            accessTokenDO.setScope(scope);\n+                            accessTokenDO.setAuthzUser(user);\n+                            accessTokenDO.setTenantID(tenantId);\n+                            accessTokenDO.setRefreshToken(refreshToken);\n+                            accessTokenDO.setTokenId(tokenId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1NDQ4NQ==", "bodyText": "We need the token, consumer key and scope.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467054485", "createdAt": "2020-08-07T13:52:33Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);\n+                        } else {\n+                            String consumerKey = resultSet.getString(\"CONSUMER_KEY\");\n+                            String tokenScope = resultSet.getString(\"TOKEN_SCOPE\");\n+                            String refreshToken = resultSet.getString(\"REFRESH_TOKEN\");\n+                            String tokenId = resultSet.getString(\"TOKEN_ID\");\n+\n+                            String[] scope = OAuth2Util.buildScopeArray(tokenScope);\n+                            accessTokenDO.setAccessToken(token);\n+                            accessTokenDO.setConsumerKey(consumerKey);\n+                            accessTokenDO.setScope(scope);\n+                            accessTokenDO.setAuthzUser(user);\n+                            accessTokenDO.setTenantID(tenantId);\n+                            accessTokenDO.setRefreshToken(refreshToken);\n+                            accessTokenDO.setTokenId(tokenId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNDgwOA=="}, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzEzOTcwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0MzoyNlrOG9YZIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzozMjowNVrOG9Z-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNTk3MA==", "bodyText": "We are not using the scope values", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467015970", "createdAt": "2020-08-07T12:43:26Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0MjAwMw==", "bodyText": "We need the scopes to invalidate the cache. https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413/files#diff-4e2e9dcf5da24d01c2cbe7ee9a8fd87dR205", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467042003", "createdAt": "2020-08-07T13:32:05Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -2439,4 +2442,59 @@ private boolean isAccessTokenExpired(long issuedTimeInMillis, long validityPerio\n \n         return OAuth2Util.getTimeToExpire(issuedTimeInMillis, validityPeriodMillis) < 0;\n     }\n+\n+    public Set<AccessTokenDO> getAccessTokensByBindingRef(AuthenticatedUser user, String bindingRef)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Retrieving active access tokens issued to user, \" + user.getUserName() + \" with binding \" +\n+                    \"reference \" + bindingRef);\n+        }\n+\n+        JdbcTemplate jdbcTemplate = JdbcUtils.getNewTemplate();\n+        try {\n+            String sqlQuery = OAuth2Util.getTokenPartitionedSqlByUserId(SQLQueries\n+                    .GET_ACCESS_TOKENS_BY_BINDING_REFERENCE, user.getUserName());\n+            int tenantId = OAuth2Util.getTenantId(user.getTenantDomain());\n+            Map<String, AccessTokenDO> tokenMap = new HashMap<>();\n+            jdbcTemplate.executeQuery(sqlQuery,\n+                    (resultSet, i) -> {\n+                        String token = resultSet.getString(\"ACCESS_TOKEN\");\n+                        AccessTokenDO accessTokenDO = new AccessTokenDO();\n+                        if (tokenMap.containsKey(token)) {\n+                            AccessTokenDO tokenObj = tokenMap.get(token);\n+                            String[] previousScope = tokenObj.getScope();\n+                            String[] newSope = new String[tokenObj.getScope().length + 1];\n+                            System.arraycopy(previousScope, 0, newSope, 0, previousScope.length);\n+                            newSope[previousScope.length] = resultSet.getString(2);\n+                            tokenObj.setScope(newSope);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNTk3MA=="}, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE0OTY3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0NjoyOFrOG9YfGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0NjoyOFrOG9YfGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxNzQ5Ng==", "bodyText": "Use a common constant for this and the SSOSessionBasedCookieBinder", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467017496", "createdAt": "2020-08-07T12:46:28Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE1NTkxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODoyNlrOG9YjCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODoyNlrOG9YjCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODUwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n          \n          \n            \n                    if (!IdentityEventConstants.EventName.SESSION_TERMINATE.name().equals(event.getEventName())) {\n          \n          \n            \n                        return true;\n          \n          \n            \n                    }", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467018504", "createdAt": "2020-08-07T12:48:26Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE1NzM2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo0ODo1N1rOG9Yj-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMzo0MjoxN1rOG9aWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODc0NA==", "bodyText": "Don't we need to check is the listener enabled here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467018744", "createdAt": "2020-08-07T12:48:57Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA0ODA5NA==", "bodyText": "The listener is hit only if it is subscribed for the specific event from the identity-event.properties file.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467048094", "createdAt": "2020-08-07T13:42:17Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxODc0NA=="}, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE2NTIyOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1MToxMFrOG9YobA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1MToxMFrOG9YobA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAxOTg4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {\n          \n          \n            \n                            if (FrameworkConstants.RequestType.CLAIM_TYPE_OIDC.equals(request.getParameter(TYPE))) {", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467019884", "createdAt": "2020-08-07T12:51:10Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n+\n+            HttpServletRequest request = getHttpRequestFromEvent(event);\n+            Map<String, Object> eventProperties = event.getEventProperties();\n+            AuthenticationContext context = (AuthenticationContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.CONTEXT);\n+            try {\n+                if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzE3MTAwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMjo1Mjo0OFrOG9Yr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjoxNDowNlrOG-Vufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMDc1Mw==", "bodyText": "if there are no binding type we can skip this", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467020753", "createdAt": "2020-08-07T12:52:48Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n+\n+            HttpServletRequest request = getHttpRequestFromEvent(event);\n+            Map<String, Object> eventProperties = event.getEventProperties();\n+            AuthenticationContext context = (AuthenticationContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.CONTEXT);\n+            try {\n+                if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {\n+\n+                    String consumerKey = context.getRelyingParty();\n+                    String bindingType = OAuth2Util.getAppInformationByClientId(consumerKey).getTokenBindingType();\n+\n+                    revokeTokensForBindingType(request, context.getLastAuthenticatedUser(), consumerKey, bindingType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODAyMDg2Mg==", "bodyText": "added a null check and called this method", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r468020862", "createdAt": "2020-08-10T16:14:06Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2.token.bindings.handlers;\n+\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.oltu.oauth2.common.exception.OAuthSystemException;\n+import org.wso2.carbon.identity.application.authentication.framework.context.AuthenticationContext;\n+import org.wso2.carbon.identity.application.authentication.framework.model.AuthenticatedUser;\n+import org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants;\n+import org.wso2.carbon.identity.event.IdentityEventConstants;\n+import org.wso2.carbon.identity.event.IdentityEventException;\n+import org.wso2.carbon.identity.event.event.Event;\n+import org.wso2.carbon.identity.event.handler.AbstractEventHandler;\n+import org.wso2.carbon.identity.oauth.OAuthUtil;\n+import org.wso2.carbon.identity.oauth.common.exception.InvalidOAuthClientException;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.internal.OAuth2ServiceComponentHolder;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.bindings.TokenBinder;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.servlet.http.Cookie;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.COMMONAUTH_COOKIE;\n+import static org.wso2.carbon.identity.application.authentication.framework.util.FrameworkConstants.RequestParams.TYPE;\n+\n+/**\n+ * Event handler for token revocation during access token binding expiration.\n+ */\n+public class TokenBindingExpiryEventHandler extends AbstractEventHandler {\n+\n+    private static final Log log = LogFactory.getLog(TokenBindingExpiryEventHandler.class);\n+    private static final String SSO_SESSION_BINDING = \"sso-session\";\n+\n+    @Override\n+    public void handleEvent(Event event) throws IdentityEventException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(event.getEventName() + \" event received to TokenBindingExpiryEventHandler.\");\n+        }\n+\n+        if (StringUtils.equals(event.getEventName(), IdentityEventConstants.EventName.SESSION_TERMINATE.name())) {\n+\n+            HttpServletRequest request = getHttpRequestFromEvent(event);\n+            Map<String, Object> eventProperties = event.getEventProperties();\n+            AuthenticationContext context = (AuthenticationContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.CONTEXT);\n+            try {\n+                if (StringUtils.equals(request.getParameter(TYPE), FrameworkConstants.RequestType.CLAIM_TYPE_OIDC)) {\n+\n+                    String consumerKey = context.getRelyingParty();\n+                    String bindingType = OAuth2Util.getAppInformationByClientId(consumerKey).getTokenBindingType();\n+\n+                    revokeTokensForBindingType(request, context.getLastAuthenticatedUser(), consumerKey, bindingType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzAyMDc1Mw=="}, "originalCommit": {"oid": "e0fbbc46f366b29371adaa1b2f053cd5272eeb01"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzU2MzkxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/add-finish-ajaxprocessor.jsp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozNzo1OVrOG9cbPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozNzo1OVrOG9cbPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4MjA0Ng==", "bodyText": "format this line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467082046", "createdAt": "2020-08-07T14:37:59Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/add-finish-ajaxprocessor.jsp", "diffHunk": "@@ -79,6 +80,10 @@\n         bypassClientCredentials = true;\n     }\n     \n+    if (request.getParameter(\"revokeTokensWhenIDPSessionTerminated\") != null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzU2NjMxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/edit-finish-ajaxprocessor.jsp", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozODoyOVrOG9ccpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDozODoyOVrOG9ccpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4MjQwNw==", "bodyText": "format this line", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467082407", "createdAt": "2020-08-07T14:38:29Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth.ui/src/main/resources/web/oauth/edit-finish-ajaxprocessor.jsp", "diffHunk": "@@ -82,6 +83,10 @@\n         bypassClientCredentials = true;\n     }\n     \n+    if (request.getParameter(\"revokeTokensWhenIDPSessionTerminated\") != null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNzU3NjA4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2Constants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0MTowM1rOG9ci5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTozOTowNVrOG9el5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDAwNA==", "bodyText": "Do we need this class?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467084004", "createdAt": "2020-08-07T14:41:03Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2;\n+\n+/**\n+ * This class contains the constants required by the OAuth2 components.\n+ */\n+public class OAuth2Constants {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzExNzU0Mg==", "bodyText": "There's no class for the constants. Or else we can define this constant in the org.wso2.carbon.identity.oauth.common component", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1413#discussion_r467117542", "createdAt": "2020-08-07T15:39:05Z", "author": {"login": "pamodaaw"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2Constants.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth2;\n+\n+/**\n+ * This class contains the constants required by the OAuth2 components.\n+ */\n+public class OAuth2Constants {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4NDAwNA=="}, "originalCommit": {"oid": "0699ffd5b137d19b720b381c96867aef6587a3d4"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3579, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}