{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MTU2NzIz", "number": 1450, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODozMzozMlrOEk3xXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODozMzozMlrOEk3xXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDk3OTQ5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/JWTTokenIssuer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODozMzozMlrOHUDbag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToyNDozMlrOHUFMbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4OTczOA==", "bodyText": "format this.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1450#discussion_r490789738", "createdAt": "2020-09-18T08:33:32Z", "author": {"login": "thanujalk"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/JWTTokenIssuer.java", "diffHunk": "@@ -518,6 +529,160 @@ private String getAuthenticatedSubjectIdentifier(OAuthAuthzReqMessageContext aut\n         return authenticatedUser.getAuthenticatedSubjectIdentifier();\n     }\n \n+    private String getSubjectClaim(String clientId, String spTenantDomain, AuthenticatedUser authorizedUser)\n+            throws IdentityOAuth2Exception {\n+\n+        String subjectClaim;\n+        if (isLocalUser(authorizedUser)) {\n+            // If the user is local then we need to find the subject claim of the user defined in SP configs and\n+            // append userStoreDomain/tenantDomain as configured\n+            ServiceProvider serviceProvider = getServiceProvider(spTenantDomain, clientId);\n+            if (serviceProvider == null) {\n+                throw new IdentityOAuth2Exception(\"Cannot find an service provider for client_id: \" + clientId + \" \" +\n+                        \"in tenantDomain: \" + spTenantDomain);\n+            }\n+            subjectClaim = getSubjectClaimForLocalUser(serviceProvider, authorizedUser);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subject claim: \" + subjectClaim + \" set for local user: \" + authorizedUser + \" for \" +\n+                        \"application: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n+            }\n+        } else {\n+            subjectClaim = authorizedUser.getAuthenticatedSubjectIdentifier();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subject claim: \" + subjectClaim + \" set for federated user: \" + authorizedUser + \" for \" +\n+                        \"application: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n+            }\n+        }\n+        return subjectClaim;\n+    }\n+\n+    private ServiceProvider getServiceProvider(String spTenantDomain,\n+                                               String clientId) throws IdentityOAuth2Exception {\n+\n+        ApplicationManagementService applicationMgtService = OAuth2ServiceComponentHolder.getApplicationMgtService();\n+        try {\n+            String spName = applicationMgtService.getServiceProviderNameByClientId(clientId, INBOUND_AUTH2_TYPE,\n+                    spTenantDomain);\n+            return applicationMgtService.getApplicationExcludingFileBasedSPs(spName, spTenantDomain);\n+        } catch (IdentityApplicationManagementException e) {\n+            throw new IdentityOAuth2Exception(\"Error while getting service provider information for client_id: \"\n+                    + clientId + \" tenantDomain: \" + spTenantDomain, e);\n+        }\n+    }\n+\n+    private boolean isLocalUser(AuthenticatedUser authorizedUser) {\n+\n+        return !authorizedUser.isFederatedUser();\n+    }\n+\n+    private String getSubjectClaimForLocalUser(ServiceProvider serviceProvider,\n+                                               AuthenticatedUser authorizedUser) throws IdentityOAuth2Exception {\n+\n+        String subject;\n+        String username = authorizedUser.getUserName();\n+        String userStoreDomain = authorizedUser.getUserStoreDomain();\n+        String userTenantDomain = authorizedUser.getTenantDomain();\n+\n+        String subjectClaimUri = getSubjectClaimUriInLocalDialect(serviceProvider);\n+        if (StringUtils.isNotBlank(subjectClaimUri)) {\n+            String fullQualifiedUsername = authorizedUser.toFullQualifiedUsername();\n+            try {\n+                subject = getSubjectClaimFromUserStore(subjectClaimUri, authorizedUser);\n+                if (StringUtils.isBlank(subject)) {\n+                    // Set username as the subject claim since we have no other option\n+                    subject = username;\n+                    log.warn(\"Cannot find subject claim: \" + subjectClaimUri + \" for user:\" + fullQualifiedUsername\n+                            + \". Defaulting to username: \" + subject + \" as the subject identifier.\");\n+                }\n+                // Get the subject claim in the correct format (ie. tenantDomain or userStoreDomain appended)\n+                subject = getFormattedSubjectClaim(serviceProvider, subject, userStoreDomain, userTenantDomain);\n+            } catch (IdentityException e) {\n+                String error = \"Error occurred while getting user claim for user: \" + authorizedUser + \", claim: \" +\n+                        subjectClaimUri;\n+                throw new IdentityOAuth2Exception(error, e);\n+            } catch (UserStoreException e) {\n+                String error = \"Error occurred while getting subject claim: \" + subjectClaimUri + \" for user: \"\n+                        + fullQualifiedUsername;\n+                throw new IdentityOAuth2Exception(error, e);\n+            }\n+        } else {\n+            subject = getFormattedSubjectClaim(serviceProvider, username, userStoreDomain, userTenantDomain);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"No subject claim defined for service provider: \" + serviceProvider.getApplicationName()\n+                        + \". Using username as the subject claim.\");\n+            }\n+        }\n+        return subject;\n+    }\n+\n+    private String getFormattedSubjectClaim(ServiceProvider serviceProvider,\n+                                            String subjectClaimValue,\n+                                            String userStoreDomain,\n+                                            String tenantDomain) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde1d3ecdd1ea9f3abdf5991bcf3baedd9f84ae3"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxODY3MQ==", "bodyText": "done", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1450#discussion_r490818671", "createdAt": "2020-09-18T09:24:32Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/JWTTokenIssuer.java", "diffHunk": "@@ -518,6 +529,160 @@ private String getAuthenticatedSubjectIdentifier(OAuthAuthzReqMessageContext aut\n         return authenticatedUser.getAuthenticatedSubjectIdentifier();\n     }\n \n+    private String getSubjectClaim(String clientId, String spTenantDomain, AuthenticatedUser authorizedUser)\n+            throws IdentityOAuth2Exception {\n+\n+        String subjectClaim;\n+        if (isLocalUser(authorizedUser)) {\n+            // If the user is local then we need to find the subject claim of the user defined in SP configs and\n+            // append userStoreDomain/tenantDomain as configured\n+            ServiceProvider serviceProvider = getServiceProvider(spTenantDomain, clientId);\n+            if (serviceProvider == null) {\n+                throw new IdentityOAuth2Exception(\"Cannot find an service provider for client_id: \" + clientId + \" \" +\n+                        \"in tenantDomain: \" + spTenantDomain);\n+            }\n+            subjectClaim = getSubjectClaimForLocalUser(serviceProvider, authorizedUser);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subject claim: \" + subjectClaim + \" set for local user: \" + authorizedUser + \" for \" +\n+                        \"application: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n+            }\n+        } else {\n+            subjectClaim = authorizedUser.getAuthenticatedSubjectIdentifier();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Subject claim: \" + subjectClaim + \" set for federated user: \" + authorizedUser + \" for \" +\n+                        \"application: \" + clientId + \" of tenantDomain: \" + spTenantDomain);\n+            }\n+        }\n+        return subjectClaim;\n+    }\n+\n+    private ServiceProvider getServiceProvider(String spTenantDomain,\n+                                               String clientId) throws IdentityOAuth2Exception {\n+\n+        ApplicationManagementService applicationMgtService = OAuth2ServiceComponentHolder.getApplicationMgtService();\n+        try {\n+            String spName = applicationMgtService.getServiceProviderNameByClientId(clientId, INBOUND_AUTH2_TYPE,\n+                    spTenantDomain);\n+            return applicationMgtService.getApplicationExcludingFileBasedSPs(spName, spTenantDomain);\n+        } catch (IdentityApplicationManagementException e) {\n+            throw new IdentityOAuth2Exception(\"Error while getting service provider information for client_id: \"\n+                    + clientId + \" tenantDomain: \" + spTenantDomain, e);\n+        }\n+    }\n+\n+    private boolean isLocalUser(AuthenticatedUser authorizedUser) {\n+\n+        return !authorizedUser.isFederatedUser();\n+    }\n+\n+    private String getSubjectClaimForLocalUser(ServiceProvider serviceProvider,\n+                                               AuthenticatedUser authorizedUser) throws IdentityOAuth2Exception {\n+\n+        String subject;\n+        String username = authorizedUser.getUserName();\n+        String userStoreDomain = authorizedUser.getUserStoreDomain();\n+        String userTenantDomain = authorizedUser.getTenantDomain();\n+\n+        String subjectClaimUri = getSubjectClaimUriInLocalDialect(serviceProvider);\n+        if (StringUtils.isNotBlank(subjectClaimUri)) {\n+            String fullQualifiedUsername = authorizedUser.toFullQualifiedUsername();\n+            try {\n+                subject = getSubjectClaimFromUserStore(subjectClaimUri, authorizedUser);\n+                if (StringUtils.isBlank(subject)) {\n+                    // Set username as the subject claim since we have no other option\n+                    subject = username;\n+                    log.warn(\"Cannot find subject claim: \" + subjectClaimUri + \" for user:\" + fullQualifiedUsername\n+                            + \". Defaulting to username: \" + subject + \" as the subject identifier.\");\n+                }\n+                // Get the subject claim in the correct format (ie. tenantDomain or userStoreDomain appended)\n+                subject = getFormattedSubjectClaim(serviceProvider, subject, userStoreDomain, userTenantDomain);\n+            } catch (IdentityException e) {\n+                String error = \"Error occurred while getting user claim for user: \" + authorizedUser + \", claim: \" +\n+                        subjectClaimUri;\n+                throw new IdentityOAuth2Exception(error, e);\n+            } catch (UserStoreException e) {\n+                String error = \"Error occurred while getting subject claim: \" + subjectClaimUri + \" for user: \"\n+                        + fullQualifiedUsername;\n+                throw new IdentityOAuth2Exception(error, e);\n+            }\n+        } else {\n+            subject = getFormattedSubjectClaim(serviceProvider, username, userStoreDomain, userTenantDomain);\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"No subject claim defined for service provider: \" + serviceProvider.getApplicationName()\n+                        + \". Using username as the subject claim.\");\n+            }\n+        }\n+        return subject;\n+    }\n+\n+    private String getFormattedSubjectClaim(ServiceProvider serviceProvider,\n+                                            String subjectClaimValue,\n+                                            String userStoreDomain,\n+                                            String tenantDomain) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4OTczOA=="}, "originalCommit": {"oid": "dde1d3ecdd1ea9f3abdf5991bcf3baedd9f84ae3"}, "originalPosition": 151}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3595, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}