{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyMjk1ODYw", "number": 1520, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyMzowN1rOFHvTVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo1NDoyNFrOFHv57A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjU5MzQ4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyMzowN1rOIJTVOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyMzowN1rOIJTVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNDgyNw==", "bodyText": "Change it to DEFAULT", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546624827", "createdAt": "2020-12-21T10:23:07Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -941,13 +942,65 @@ private void setTokenBindingToAccessTokenDO(AccessTokenDO dataDO, Connection con\n             tokenBindingPreparedStatement.setString(1, tokenId);\n             try (ResultSet tokenBindingResultSet = tokenBindingPreparedStatement.executeQuery()) {\n                 if (tokenBindingResultSet.next()) {\n-                    TokenBinding tokenBinding = new TokenBinding();\n-                    tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n-                    tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n-                    tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n-                    dataDO.setTokenBinding(tokenBinding);\n+                    if (!StringUtils.equals(\"commonauth\", tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"))) {\n+                        TokenBinding tokenBinding = new TokenBinding();\n+                        tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n+                        tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n+                        tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n+                        dataDO.setTokenBinding(tokenBinding);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void storeTokenToSessionMapping(String sessionContextIdentifier, String tokenId, int tenantId)\n+            throws IdentityOAuth2Exception {\n+\n+        if (isNotBlank(sessionContextIdentifier)) {\n+            Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(STORE_TOKEN_BINDING)) {\n+                preparedStatement.setString(1, tokenId);\n+                preparedStatement.setString(2, \"commonauth\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjYwMTUxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthServiceComponent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNToyOVrOIJTZ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNTo0OFrOIJTajA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNjAzNA==", "bodyText": "OAuthEventInterceptorListener -> OAuthTokenSessionMappingEventHandler", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546626034", "createdAt": "2020-12-21T10:25:29Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthServiceComponent.java", "diffHunk": "@@ -88,6 +89,8 @@ protected void activate(ComponentContext context) {\n \n             OAuthComponentServiceHolder.getInstance().setOAuthAdminService(oauthAdminService);\n             OAuth2ServiceComponentHolder.getInstance().setOAuthAdminService(oauthAdminService);\n+            context.getBundleContext().registerService(OAuthEventInterceptor.class, new OAuthEventInterceptorListener(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNjE4OA==", "bodyText": "add a debug logs for this", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546626188", "createdAt": "2020-12-21T10:25:48Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/internal/OAuthServiceComponent.java", "diffHunk": "@@ -88,6 +89,8 @@ protected void activate(ComponentContext context) {\n \n             OAuthComponentServiceHolder.getInstance().setOAuthAdminService(oauthAdminService);\n             OAuth2ServiceComponentHolder.getInstance().setOAuthAdminService(oauthAdminService);\n+            context.getBundleContext().registerService(OAuthEventInterceptor.class, new OAuthEventInterceptorListener(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNjAzNA=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjYwNTI2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNjozNFrOIJTcGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNjozNFrOIJTcGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNjU4Nw==", "bodyText": "add more context info to debug logs", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546626587", "createdAt": "2020-12-21T10:26:34Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCache;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheEntry;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheKey;\n+import org.wso2.carbon.identity.oauth.event.AbstractOAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenReqDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenRespDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Map;\n+\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+\n+/**\n+ * This class extends OAuthEventInterceptor and listen to oauth related events.\n+ */\n+public class OAuthEventInterceptorListener extends AbstractOAuthEventInterceptor {\n+\n+    private static final Log log = LogFactory.getLog(OAuthEventInterceptorListener.class);\n+\n+    @Override\n+    public void onPostTokenIssue(OAuth2AccessTokenReqDTO tokenReqDTO, OAuth2AccessTokenRespDTO tokenRespDTO,\n+                                 OAuthTokenReqMessageContext tokReqMsgCtx, Map<String, Object> params) throws\n+            IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the post token issue event\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjYwNjM2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNjo1M1rOIJTczA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDoyNjo1M1rOIJTczA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyNjc2NA==", "bodyText": "have method comments", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546626764", "createdAt": "2020-12-21T10:26:53Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCache;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheEntry;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheKey;\n+import org.wso2.carbon.identity.oauth.event.AbstractOAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenReqDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenRespDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Map;\n+\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+\n+/**\n+ * This class extends OAuthEventInterceptor and listen to oauth related events.\n+ */\n+public class OAuthEventInterceptorListener extends AbstractOAuthEventInterceptor {\n+\n+    private static final Log log = LogFactory.getLog(OAuthEventInterceptorListener.class);\n+\n+    @Override\n+    public void onPostTokenIssue(OAuth2AccessTokenReqDTO tokenReqDTO, OAuth2AccessTokenRespDTO tokenRespDTO,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjYyMzIwOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozMjoyMlrOIJTmyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozMjoyMlrOIJTmyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYyOTMyMA==", "bodyText": "simplify methods", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546629320", "createdAt": "2020-12-21T10:32:22Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCache;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheEntry;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheKey;\n+import org.wso2.carbon.identity.oauth.event.AbstractOAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenReqDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenRespDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Map;\n+\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+\n+/**\n+ * This class extends OAuthEventInterceptor and listen to oauth related events.\n+ */\n+public class OAuthEventInterceptorListener extends AbstractOAuthEventInterceptor {\n+\n+    private static final Log log = LogFactory.getLog(OAuthEventInterceptorListener.class);\n+\n+    @Override\n+    public void onPostTokenIssue(OAuth2AccessTokenReqDTO tokenReqDTO, OAuth2AccessTokenRespDTO tokenRespDTO,\n+                                 OAuthTokenReqMessageContext tokReqMsgCtx, Map<String, Object> params) throws\n+            IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the post token issue event\");\n+        }\n+        String tokenId = tokenRespDTO.getTokenId();\n+        String code = tokenReqDTO.getAuthorizationCode();\n+        String sessionContextId = null;\n+        if (StringUtils.isBlank(code)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Since Authorization code is null, couldn't find session context identifier \" +\n+                        \"for the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        sessionContextId = getSessionContextIdentifier(code);\n+        String tenantDomain = tokenReqDTO.getTenantDomain();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tenant domain of the application: \" + tokenReqDTO.getClientId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjYyODY5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozNDoxMVrOIJTp_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyMzozOFrOIKVDcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMDE0MA==", "bodyText": "add a audit log when session to token mapping  is revoked", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546630140", "createdAt": "2020-12-21T10:34:11Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -78,6 +86,11 @@ public void handleEvent(Event event) throws IdentityEventException {\n                 .EventProperty.CONTEXT);\n         try {\n             if (request == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"HttpServletRequest object is null. Hence getting the session related information from \" +\n+                            \"event and revoking the access tokens bound to sso-session binding\");\n+                }\n+                revokeAccessTokensMappedForSessions(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEyMzMxMQ==", "bodyText": "We have audit logs for each oauth related events in this repo https://github.com/wso2-extensions/identity-data-publisher-oauth/tree/02681715805e8d6375cee67c289e502f0df9ed43/components/org.wso2.carbon.identity.data.publisher.oauth/src/main/java/org/wso2/carbon/identity/data/publisher/oauth/listener. We have token revocationaudit logger as well. So that can have this logging part. We don't need the explicitly handle it", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r547123311", "createdAt": "2020-12-22T07:55:58Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -78,6 +86,11 @@ public void handleEvent(Event event) throws IdentityEventException {\n                 .EventProperty.CONTEXT);\n         try {\n             if (request == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"HttpServletRequest object is null. Hence getting the session related information from \" +\n+                            \"event and revoking the access tokens bound to sso-session binding\");\n+                }\n+                revokeAccessTokensMappedForSessions(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMDE0MA=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzY0Njk5Ng==", "bodyText": "Got to know that the audit logs from these components don't have detailed context information such as action/event what caused the token revocation. Check the possibility of adding an audit log with the information about the session termination event.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r547646996", "createdAt": "2020-12-23T05:09:50Z", "author": {"login": "ayshsandu"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -78,6 +86,11 @@ public void handleEvent(Event event) throws IdentityEventException {\n                 .EventProperty.CONTEXT);\n         try {\n             if (request == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"HttpServletRequest object is null. Hence getting the session related information from \" +\n+                            \"event and revoking the access tokens bound to sso-session binding\");\n+                }\n+                revokeAccessTokensMappedForSessions(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMDE0MA=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMTYxOQ==", "bodyText": "tracked with wso2/product-is#10843", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r547701619", "createdAt": "2020-12-23T06:23:38Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -78,6 +86,11 @@ public void handleEvent(Event event) throws IdentityEventException {\n                 .EventProperty.CONTEXT);\n         try {\n             if (request == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"HttpServletRequest object is null. Hence getting the session related information from \" +\n+                            \"event and revoking the access tokens bound to sso-session binding\");\n+                }\n+                revokeAccessTokensMappedForSessions(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMDE0MA=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjYzNTgxOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDozNjoyNlrOIJTuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0MToyNlrOIJT3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMTIwNA==", "bodyText": "read it from config in identity.xml to disable or enable it", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546631204", "createdAt": "2020-12-21T10:36:26Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCache;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheEntry;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheKey;\n+import org.wso2.carbon.identity.oauth.event.AbstractOAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenReqDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenRespDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Map;\n+\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+\n+/**\n+ * This class extends OAuthEventInterceptor and listen to oauth related events.\n+ */\n+public class OAuthEventInterceptorListener extends AbstractOAuthEventInterceptor {\n+\n+    private static final Log log = LogFactory.getLog(OAuthEventInterceptorListener.class);\n+\n+    @Override\n+    public void onPostTokenIssue(OAuth2AccessTokenReqDTO tokenReqDTO, OAuth2AccessTokenRespDTO tokenRespDTO,\n+                                 OAuthTokenReqMessageContext tokReqMsgCtx, Map<String, Object> params) throws\n+            IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the post token issue event\");\n+        }\n+        String tokenId = tokenRespDTO.getTokenId();\n+        String code = tokenReqDTO.getAuthorizationCode();\n+        String sessionContextId = null;\n+        if (StringUtils.isBlank(code)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Since Authorization code is null, couldn't find session context identifier \" +\n+                        \"for the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        sessionContextId = getSessionContextIdentifier(code);\n+        String tenantDomain = tokenReqDTO.getTenantDomain();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tenant domain of the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        if (StringUtils.isBlank(sessionContextId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the session context identifier for the application: \" +\n+                        tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        persistTokenToSessionMapping(sessionContextId, tokenId, OAuth2Util.getTenantId(tenantDomain));\n+    }\n+\n+    @Override\n+    public void onPostTokenRenewal(OAuth2AccessTokenReqDTO tokenReqDTO, OAuth2AccessTokenRespDTO tokenRespDTO,\n+                                   OAuthTokenReqMessageContext tokReqMsgCtx, Map<String, Object> params) throws\n+            IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the token renewal event\");\n+        }\n+        String tokenId = tokenRespDTO.getTokenId();\n+        if (StringUtils.isBlank(tokenId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tokenId of the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        String accessToken = tokenRespDTO.getAccessToken();\n+        if (StringUtils.isBlank(accessToken)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Since the accesstoken is invalid, couldn't find session context identifier \" +\n+                        \"for the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        String sessionContextId = getSessionContextIdentifier(accessToken);\n+        if (StringUtils.isBlank(sessionContextId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the session context identifier for the application: \" +\n+                        tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        String tenantDomain = tokenReqDTO.getTenantDomain();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tenant domain of the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        int tenantId = OAuth2Util.getTenantId(tenantDomain);\n+        persistTokenToSessionMapping(sessionContextId, tokenId, tenantId);\n+    }\n+\n+    @Override\n+    public void onPostTokenIssue(OAuthAuthzReqMessageContext oauthAuthzMsgCtx, AccessTokenDO tokenDO,\n+                                 OAuth2AuthorizeRespDTO respDTO, Map<String, Object> params)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the token renewal event\");\n+        }\n+        String sessionContextId = oauthAuthzMsgCtx.getAuthorizationReqDTO().getIdpSessionIdentifier();\n+        if (StringUtils.isBlank(sessionContextId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the session context identifier for the application: \" +\n+                        tokenDO.getConsumerKey());\n+            }\n+            return;\n+        }\n+        String tokenId = tokenDO.getTokenId();\n+        if (StringUtils.isBlank(tokenId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tokenId of the application: \" + tokenDO.getConsumerKey());\n+            }\n+            return;\n+        }\n+        int tenantId = tokenDO.getTenantID();\n+        persistTokenToSessionMapping(sessionContextId, tokenId, tenantId);\n+    }\n+\n+    public boolean isEnabled() {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMzU2Ng==", "bodyText": "if it is not added, it should be enabled.\nif it is added and enabled ->. enabled\nif it is added and no property ->. enabled", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546633566", "createdAt": "2020-12-21T10:41:26Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/listener/OAuthEventInterceptorListener.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.carbon.identity.oauth.listener;\n+\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCache;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheEntry;\n+import org.wso2.carbon.identity.oauth.cache.AuthorizationGrantCacheKey;\n+import org.wso2.carbon.identity.oauth.event.AbstractOAuthEventInterceptor;\n+import org.wso2.carbon.identity.oauth2.IdentityOAuth2Exception;\n+import org.wso2.carbon.identity.oauth2.authz.OAuthAuthzReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.dao.OAuthTokenPersistenceFactory;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenReqDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AccessTokenRespDTO;\n+import org.wso2.carbon.identity.oauth2.dto.OAuth2AuthorizeRespDTO;\n+import org.wso2.carbon.identity.oauth2.model.AccessTokenDO;\n+import org.wso2.carbon.identity.oauth2.token.OAuthTokenReqMessageContext;\n+import org.wso2.carbon.identity.oauth2.util.OAuth2Util;\n+\n+import java.util.Map;\n+\n+import static org.apache.commons.lang.StringUtils.isNotBlank;\n+\n+/**\n+ * This class extends OAuthEventInterceptor and listen to oauth related events.\n+ */\n+public class OAuthEventInterceptorListener extends AbstractOAuthEventInterceptor {\n+\n+    private static final Log log = LogFactory.getLog(OAuthEventInterceptorListener.class);\n+\n+    @Override\n+    public void onPostTokenIssue(OAuth2AccessTokenReqDTO tokenReqDTO, OAuth2AccessTokenRespDTO tokenRespDTO,\n+                                 OAuthTokenReqMessageContext tokReqMsgCtx, Map<String, Object> params) throws\n+            IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the post token issue event\");\n+        }\n+        String tokenId = tokenRespDTO.getTokenId();\n+        String code = tokenReqDTO.getAuthorizationCode();\n+        String sessionContextId = null;\n+        if (StringUtils.isBlank(code)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Since Authorization code is null, couldn't find session context identifier \" +\n+                        \"for the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        sessionContextId = getSessionContextIdentifier(code);\n+        String tenantDomain = tokenReqDTO.getTenantDomain();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tenant domain of the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        if (StringUtils.isBlank(sessionContextId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the session context identifier for the application: \" +\n+                        tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        persistTokenToSessionMapping(sessionContextId, tokenId, OAuth2Util.getTenantId(tenantDomain));\n+    }\n+\n+    @Override\n+    public void onPostTokenRenewal(OAuth2AccessTokenReqDTO tokenReqDTO, OAuth2AccessTokenRespDTO tokenRespDTO,\n+                                   OAuthTokenReqMessageContext tokReqMsgCtx, Map<String, Object> params) throws\n+            IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the token renewal event\");\n+        }\n+        String tokenId = tokenRespDTO.getTokenId();\n+        if (StringUtils.isBlank(tokenId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tokenId of the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        String accessToken = tokenRespDTO.getAccessToken();\n+        if (StringUtils.isBlank(accessToken)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Since the accesstoken is invalid, couldn't find session context identifier \" +\n+                        \"for the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        String sessionContextId = getSessionContextIdentifier(accessToken);\n+        if (StringUtils.isBlank(sessionContextId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the session context identifier for the application: \" +\n+                        tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        String tenantDomain = tokenReqDTO.getTenantDomain();\n+        if (StringUtils.isBlank(tenantDomain)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tenant domain of the application: \" + tokenReqDTO.getClientId());\n+            }\n+            return;\n+        }\n+        int tenantId = OAuth2Util.getTenantId(tenantDomain);\n+        persistTokenToSessionMapping(sessionContextId, tokenId, tenantId);\n+    }\n+\n+    @Override\n+    public void onPostTokenIssue(OAuthAuthzReqMessageContext oauthAuthzMsgCtx, AccessTokenDO tokenDO,\n+                                 OAuth2AuthorizeRespDTO respDTO, Map<String, Object> params)\n+            throws IdentityOAuth2Exception {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Listening to the token renewal event\");\n+        }\n+        String sessionContextId = oauthAuthzMsgCtx.getAuthorizationReqDTO().getIdpSessionIdentifier();\n+        if (StringUtils.isBlank(sessionContextId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the session context identifier for the application: \" +\n+                        tokenDO.getConsumerKey());\n+            }\n+            return;\n+        }\n+        String tokenId = tokenDO.getTokenId();\n+        if (StringUtils.isBlank(tokenId)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Could not find the tokenId of the application: \" + tokenDO.getConsumerKey());\n+            }\n+            return;\n+        }\n+        int tenantId = tokenDO.getTenantID();\n+        persistTokenToSessionMapping(sessionContextId, tokenId, tenantId);\n+    }\n+\n+    public boolean isEnabled() {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzMTIwNA=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjY2MDczOnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0NDoxOFrOIJT8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0NDoxOFrOIJT8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNDkzNA==", "bodyText": "rename commonauth", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546634934", "createdAt": "2020-12-21T10:44:18Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -941,13 +942,65 @@ private void setTokenBindingToAccessTokenDO(AccessTokenDO dataDO, Connection con\n             tokenBindingPreparedStatement.setString(1, tokenId);\n             try (ResultSet tokenBindingResultSet = tokenBindingPreparedStatement.executeQuery()) {\n                 if (tokenBindingResultSet.next()) {\n-                    TokenBinding tokenBinding = new TokenBinding();\n-                    tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n-                    tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n-                    tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n-                    dataDO.setTokenBinding(tokenBinding);\n+                    if (!StringUtils.equals(\"commonauth\", tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjY2NzI4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0NjoxMlrOIJUAag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0NjoxMlrOIJUAag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNTg4Mg==", "bodyText": "check for tokenId as well", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546635882", "createdAt": "2020-12-21T10:46:12Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -941,13 +942,65 @@ private void setTokenBindingToAccessTokenDO(AccessTokenDO dataDO, Connection con\n             tokenBindingPreparedStatement.setString(1, tokenId);\n             try (ResultSet tokenBindingResultSet = tokenBindingPreparedStatement.executeQuery()) {\n                 if (tokenBindingResultSet.next()) {\n-                    TokenBinding tokenBinding = new TokenBinding();\n-                    tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n-                    tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n-                    tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n-                    dataDO.setTokenBinding(tokenBinding);\n+                    if (!StringUtils.equals(\"commonauth\", tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"))) {\n+                        TokenBinding tokenBinding = new TokenBinding();\n+                        tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n+                        tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n+                        tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n+                        dataDO.setTokenBinding(tokenBinding);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void storeTokenToSessionMapping(String sessionContextIdentifier, String tokenId, int tenantId)\n+            throws IdentityOAuth2Exception {\n+\n+        if (isNotBlank(sessionContextIdentifier)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjY2ODE5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0NjoyOVrOIJUA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0NjoyOVrOIJUA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNjAwNQ==", "bodyText": "add some context info", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546636005", "createdAt": "2020-12-21T10:46:29Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -941,13 +942,65 @@ private void setTokenBindingToAccessTokenDO(AccessTokenDO dataDO, Connection con\n             tokenBindingPreparedStatement.setString(1, tokenId);\n             try (ResultSet tokenBindingResultSet = tokenBindingPreparedStatement.executeQuery()) {\n                 if (tokenBindingResultSet.next()) {\n-                    TokenBinding tokenBinding = new TokenBinding();\n-                    tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n-                    tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n-                    tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n-                    dataDO.setTokenBinding(tokenBinding);\n+                    if (!StringUtils.equals(\"commonauth\", tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"))) {\n+                        TokenBinding tokenBinding = new TokenBinding();\n+                        tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n+                        tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n+                        tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n+                        dataDO.setTokenBinding(tokenBinding);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void storeTokenToSessionMapping(String sessionContextIdentifier, String tokenId, int tenantId)\n+            throws IdentityOAuth2Exception {\n+\n+        if (isNotBlank(sessionContextIdentifier)) {\n+            Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(STORE_TOKEN_BINDING)) {\n+                preparedStatement.setString(1, tokenId);\n+                preparedStatement.setString(2, \"commonauth\");\n+                preparedStatement.setString(3,\n+                        OAuth2Util.getTokenBindingReference(sessionContextIdentifier));\n+                preparedStatement.setString(4, sessionContextIdentifier);\n+                preparedStatement.setInt(5, tenantId);\n+                preparedStatement.execute();\n+            } catch (SQLException e) {\n+                String errorMsg = \"Error while persisting token to session mapping\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjY3Mzg2OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0ODoxNVrOIJUEJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNzoxMToyOFrOIJwveA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNjgzNw==", "bodyText": "can be more tokenId for a same sessionId. need to handle it", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546636837", "createdAt": "2020-12-21T10:48:15Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -941,13 +942,65 @@ private void setTokenBindingToAccessTokenDO(AccessTokenDO dataDO, Connection con\n             tokenBindingPreparedStatement.setString(1, tokenId);\n             try (ResultSet tokenBindingResultSet = tokenBindingPreparedStatement.executeQuery()) {\n                 if (tokenBindingResultSet.next()) {\n-                    TokenBinding tokenBinding = new TokenBinding();\n-                    tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n-                    tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n-                    tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n-                    dataDO.setTokenBinding(tokenBinding);\n+                    if (!StringUtils.equals(\"commonauth\", tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"))) {\n+                        TokenBinding tokenBinding = new TokenBinding();\n+                        tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n+                        tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n+                        tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n+                        dataDO.setTokenBinding(tokenBinding);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void storeTokenToSessionMapping(String sessionContextIdentifier, String tokenId, int tenantId)\n+            throws IdentityOAuth2Exception {\n+\n+        if (isNotBlank(sessionContextIdentifier)) {\n+            Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(STORE_TOKEN_BINDING)) {\n+                preparedStatement.setString(1, tokenId);\n+                preparedStatement.setString(2, \"commonauth\");\n+                preparedStatement.setString(3,\n+                        OAuth2Util.getTokenBindingReference(sessionContextIdentifier));\n+                preparedStatement.setString(4, sessionContextIdentifier);\n+                preparedStatement.setInt(5, tenantId);\n+                preparedStatement.execute();\n+            } catch (SQLException e) {\n+                String errorMsg = \"Error while persisting token to session mapping\";\n+                if (log.isDebugEnabled()) {\n+                    log.debug(errorMsg);\n                 }\n+                throw new IdentityOAuth2Exception(errorMsg, e);\n+            } finally {\n+                IdentityDatabaseUtil.closeConnection(connection);\n+            }\n+        }\n+    }\n+\n+    public String getTokenIdByBindingRef(String bindingRef) throws IdentityOAuth2Exception {\n+\n+        String sql = SQLQueries.RETRIEVE_TOKEN_BINDING_BY_TOKEN_REF;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        PreparedStatement prepStmt = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzEwNjY4MA==", "bodyText": "handled it when we persist into the db https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520/files#diff-696a59cde0cb0f5ea0aa4addcfbafa14d3c3743a0ddf6424b2d44ad3e0517216R213", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r547106680", "createdAt": "2020-12-22T07:11:28Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/AccessTokenDAOImpl.java", "diffHunk": "@@ -941,13 +942,65 @@ private void setTokenBindingToAccessTokenDO(AccessTokenDO dataDO, Connection con\n             tokenBindingPreparedStatement.setString(1, tokenId);\n             try (ResultSet tokenBindingResultSet = tokenBindingPreparedStatement.executeQuery()) {\n                 if (tokenBindingResultSet.next()) {\n-                    TokenBinding tokenBinding = new TokenBinding();\n-                    tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n-                    tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n-                    tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n-                    dataDO.setTokenBinding(tokenBinding);\n+                    if (!StringUtils.equals(\"commonauth\", tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"))) {\n+                        TokenBinding tokenBinding = new TokenBinding();\n+                        tokenBinding.setBindingType(tokenBindingResultSet.getString(\"TOKEN_BINDING_TYPE\"));\n+                        tokenBinding.setBindingReference(tokenBindingResultSet.getString(\"TOKEN_BINDING_REF\"));\n+                        tokenBinding.setBindingValue(tokenBindingResultSet.getString(\"TOKEN_BINDING_VALUE\"));\n+                        dataDO.setTokenBinding(tokenBinding);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void storeTokenToSessionMapping(String sessionContextIdentifier, String tokenId, int tenantId)\n+            throws IdentityOAuth2Exception {\n+\n+        if (isNotBlank(sessionContextIdentifier)) {\n+            Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+            try (PreparedStatement preparedStatement = connection.prepareStatement(STORE_TOKEN_BINDING)) {\n+                preparedStatement.setString(1, tokenId);\n+                preparedStatement.setString(2, \"commonauth\");\n+                preparedStatement.setString(3,\n+                        OAuth2Util.getTokenBindingReference(sessionContextIdentifier));\n+                preparedStatement.setString(4, sessionContextIdentifier);\n+                preparedStatement.setInt(5, tenantId);\n+                preparedStatement.execute();\n+            } catch (SQLException e) {\n+                String errorMsg = \"Error while persisting token to session mapping\";\n+                if (log.isDebugEnabled()) {\n+                    log.debug(errorMsg);\n                 }\n+                throw new IdentityOAuth2Exception(errorMsg, e);\n+            } finally {\n+                IdentityDatabaseUtil.closeConnection(connection);\n+            }\n+        }\n+    }\n+\n+    public String getTokenIdByBindingRef(String bindingRef) throws IdentityOAuth2Exception {\n+\n+        String sql = SQLQueries.RETRIEVE_TOKEN_BINDING_BY_TOKEN_REF;\n+        Connection connection = IdentityDatabaseUtil.getDBConnection(false);\n+        PreparedStatement prepStmt = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNjgzNw=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjY3NDg0OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/SQLQueries.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo0ODozOVrOIJUEzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjoyMzoxOVrOIKVDFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNzAwNA==", "bodyText": "we need to make tokenId+type+ref as a unique key in the script", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546637004", "createdAt": "2020-12-21T10:48:39Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/SQLQueries.java", "diffHunk": "@@ -1214,6 +1214,9 @@\n     public static final String RETRIEVE_TOKEN_BINDING_BY_TOKEN_ID = \"SELECT TOKEN_BINDING_TYPE, \"\n             + \"TOKEN_BINDING_REF, TOKEN_BINDING_VALUE FROM IDN_OAUTH2_TOKEN_BINDING WHERE TOKEN_ID = ?\";\n \n+    public static final String RETRIEVE_TOKEN_BINDING_BY_TOKEN_REF = \"SELECT TOKEN_ID FROM IDN_OAUTH2_TOKEN_BINDING \" +\n+            \"WHERE TOKEN_BINDING_REF = ?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNzE1OQ==", "bodyText": "capture the migration impact", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546637159", "createdAt": "2020-12-21T10:48:57Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/SQLQueries.java", "diffHunk": "@@ -1214,6 +1214,9 @@\n     public static final String RETRIEVE_TOKEN_BINDING_BY_TOKEN_ID = \"SELECT TOKEN_BINDING_TYPE, \"\n             + \"TOKEN_BINDING_REF, TOKEN_BINDING_VALUE FROM IDN_OAUTH2_TOKEN_BINDING WHERE TOKEN_ID = ?\";\n \n+    public static final String RETRIEVE_TOKEN_BINDING_BY_TOKEN_REF = \"SELECT TOKEN_ID FROM IDN_OAUTH2_TOKEN_BINDING \" +\n+            \"WHERE TOKEN_BINDING_REF = ?\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNzAwNA=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcwMTUyNw==", "bodyText": "tracked with wso2/product-is#10843", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r547701527", "createdAt": "2020-12-23T06:23:19Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/SQLQueries.java", "diffHunk": "@@ -1214,6 +1214,9 @@\n     public static final String RETRIEVE_TOKEN_BINDING_BY_TOKEN_ID = \"SELECT TOKEN_BINDING_TYPE, \"\n             + \"TOKEN_BINDING_REF, TOKEN_BINDING_VALUE FROM IDN_OAUTH2_TOKEN_BINDING WHERE TOKEN_ID = ?\";\n \n+    public static final String RETRIEVE_TOKEN_BINDING_BY_TOKEN_REF = \"SELECT TOKEN_ID FROM IDN_OAUTH2_TOKEN_BINDING \" +\n+            \"WHERE TOKEN_BINDING_REF = ?\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzNzAwNA=="}, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjY4NTM3OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo1MjoxNFrOIJUKxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo1MjoxNFrOIJUKxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzODUzMw==", "bodyText": "remove this sso binding check. no need to handle it separately", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546638533", "createdAt": "2020-12-21T10:52:14Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -100,6 +113,143 @@ public void handleEvent(Event event) throws IdentityEventException {\n         }\n     }\n \n+    /**\n+     * This method will get the application information from session context and revoke access tokens of the\n+     * applications bound to that session. This method can be used when token binding information is not found in the\n+     * request.\n+     *\n+     * @param event Event.\n+     * @throws IdentityOAuth2Exception\n+     * @throws InvalidOAuthClientException\n+     */\n+    private void revokeAccessTokensMappedForSessions(Event event)\n+            throws IdentityOAuth2Exception, InvalidOAuthClientException {\n+\n+        String sessionContextIdentifier = getSessionIdentifier(event);\n+        Map<String, Object> eventProperties = event.getEventProperties();\n+        if (StringUtils.isNotBlank(sessionContextIdentifier)) {\n+            SessionContext sessionContext = (SessionContext) eventProperties.get(IdentityEventConstants\n+                    .EventProperty.SESSION_CONTEXT);\n+            if (sessionContext != null) {\n+                Map<String, SequenceConfig> authenticatedSequences = sessionContext.getAuthenticatedSequences();\n+                if (MapUtils.isEmpty(authenticatedSequences)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Could not find the authenticated sequence config map in the session context \" +\n+                                \"corresponding to the context identifier: \" + sessionContextIdentifier);\n+                    }\n+                    return;\n+                }\n+                AuthenticatedUser user = (AuthenticatedUser) sessionContext\n+                        .getProperty(FrameworkConstants.AUTHENTICATED_USER);\n+                if (user == null) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Authenticated user is not found in the session context \" +\n+                                \"corresponding to the context identifier: \" + sessionContextIdentifier);\n+                    }\n+                    return;\n+                }\n+                String tenantDomain = user.getTenantDomain();\n+                if (StringUtils.isBlank(tenantDomain)) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Could not find the tenant domain of the user: \" + user.getUserName());\n+                    }\n+                    return;\n+                }\n+                for (Map.Entry<String, SequenceConfig> sequenceConfigEntry : authenticatedSequences.entrySet()) {\n+                    String applicationName = sequenceConfigEntry.getValue().getApplicationId();\n+                    String clientId = getClientIdFromApplicationName(applicationName, tenantDomain);\n+                    if (StringUtils.isBlank(clientId)) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(String.format(\"Client id of the application: %s is not valid\", applicationName));\n+                        }\n+                        return;\n+                    }\n+                    String bindingType = OAuth2Util.getAppInformationByClientId(clientId).getTokenBindingType();\n+                    if (OAuth2Constants.TokenBinderType.SSO_SESSION_BASED_TOKEN_BINDER.equals(bindingType)) {\n+                        if (log.isDebugEnabled()) {\n+                            log.debug(String.format(\"Application: %s has sso-session binding. Hence revoking the access\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzNjY5MjI4OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo1NDoyNFrOIJUOzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxMDo1NDoyNFrOIJUOzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjYzOTU2NQ==", "bodyText": "no need to pass user here", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1520#discussion_r546639565", "createdAt": "2020-12-21T10:54:24Z", "author": {"login": "piraveena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/bindings/handlers/TokenBindingExpiryEventHandler.java", "diffHunk": "@@ -197,28 +347,61 @@ private void revokeTokensOfBindingRef(AuthenticatedUser user, String tokenBindin\n         if (StringUtils.isBlank(tokenBindingReference) || user == null) {\n             return;\n         }\n-\n         Set<AccessTokenDO> boundTokens = OAuthTokenPersistenceFactory.getInstance().getAccessTokenDAO()\n                 .getAccessTokensByBindingRef(user, tokenBindingReference);\n-\n         for (AccessTokenDO accessTokenDO : boundTokens) {\n-\n             String consumerKey = accessTokenDO.getConsumerKey();\n+            revokeTokens(consumerKey, accessTokenDO, tokenBindingReference);\n+        }\n+    }\n \n-            if (OAuth2Util.getAppInformationByClientId(consumerKey)\n-                    .isTokenRevocationWithIDPSessionTerminationEnabled()) {\n-\n-                OAuthUtil.clearOAuthCache(consumerKey, accessTokenDO.getAuthzUser(), OAuth2Util.buildScopeString\n-                        (accessTokenDO.getScope()), tokenBindingReference);\n-                OAuthUtil.clearOAuthCache(consumerKey, accessTokenDO.getAuthzUser(), OAuth2Util.buildScopeString\n-                        (accessTokenDO.getScope()));\n-                OAuthUtil.clearOAuthCache(consumerKey, accessTokenDO.getAuthzUser());\n-                OAuthUtil.clearOAuthCache(accessTokenDO.getAccessToken());\n-                OAuthUtil.invokePreRevocationBySystemListeners(accessTokenDO, Collections.emptyMap());\n-                OAuthTokenPersistenceFactory.getInstance().getAccessTokenDAO()\n-                        .revokeAccessTokens(new String[]{accessTokenDO.getAccessToken()}, OAuth2Util.isHashEnabled());\n-                OAuthUtil.invokePostRevocationBySystemListeners(accessTokenDO, Collections.emptyMap());\n+    /**\n+     * Get the access tokens mapped for the session identifier and revoke those tokens.\n+     *\n+     * @param user               Authenticated user.\n+     * @param sessionIdReference Hashed value of the session context identifier.\n+     * @throws IdentityOAuth2Exception\n+     */\n+    private void revokeTokensMappedToSession(AuthenticatedUser user, String sessionIdReference) throws", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "990ec7fa9dc66a29f4a7adfa3f8ba9052cc51f84"}, "originalPosition": 219}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3561, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}