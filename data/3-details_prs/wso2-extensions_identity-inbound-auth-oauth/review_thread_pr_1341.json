{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzYzNTgw", "number": 1341, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODowNDowNVrODk8bMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODowNDowNVrODk8bMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDY1MzI5OnYy", "diffSide": "RIGHT", "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODowNDowNVrOFxjNLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0NjowNFrOGNL1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwMTM1Nw==", "bodyText": "it would better to change the jti variable name to something else :)\npersistedAlias or something", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1341#discussion_r387501357", "createdAt": "2020-03-04T08:04:05Z", "author": {"login": "mefarazath"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -428,14 +429,35 @@ private void persistAccessTokenInDB(OAuthTokenReqMessageContext tokReqMsgCtx, Ac\n         }\n     }\n \n-    private void updateCacheIfEnabled(AccessTokenDO newTokenBean, String scope)\n+    private void updateCacheIfEnabled(AccessTokenDO newTokenBean, String scope, OauthTokenIssuer oauthTokenIssuer)\n             throws IdentityOAuth2Exception {\n \n         if (isHashDisabled && cacheEnabled) {\n-            OAuthCacheKey cacheKey = getOAuthCacheKey(scope, newTokenBean.getConsumerKey(),\n-                    newTokenBean.getAuthzUser().toString(), newTokenBean.getAuthzUser().getFederatedIdPName(),\n-                    getTokenBindingReference(newTokenBean));\n-            oauthCache.addToCache(cacheKey, newTokenBean);\n+            AccessTokenDO tokenToCache = AccessTokenDO.clone(newTokenBean);\n+            // If usePersistedAccessTokenAlias is enabled then in the DB the\n+            // access token alias taken from the OauthTokenIssuer's getAccessTokenHash\n+            // method is set as the token.\n+            if (oauthTokenIssuer.usePersistedAccessTokenAlias()) {\n+                try {\n+                    String jti = oauthTokenIssuer.getAccessTokenHash(newTokenBean.getAccessToken());\n+                    tokenToCache.setAccessToken(jti);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db00584ff1c0415a0aee35049f6f0268806fda0f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ3ODY2Mg==", "bodyText": "Resolved with #1342 and #1343", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1341#discussion_r416478662", "createdAt": "2020-04-28T09:46:04Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/token/handlers/grant/AbstractAuthorizationGrantHandler.java", "diffHunk": "@@ -428,14 +429,35 @@ private void persistAccessTokenInDB(OAuthTokenReqMessageContext tokReqMsgCtx, Ac\n         }\n     }\n \n-    private void updateCacheIfEnabled(AccessTokenDO newTokenBean, String scope)\n+    private void updateCacheIfEnabled(AccessTokenDO newTokenBean, String scope, OauthTokenIssuer oauthTokenIssuer)\n             throws IdentityOAuth2Exception {\n \n         if (isHashDisabled && cacheEnabled) {\n-            OAuthCacheKey cacheKey = getOAuthCacheKey(scope, newTokenBean.getConsumerKey(),\n-                    newTokenBean.getAuthzUser().toString(), newTokenBean.getAuthzUser().getFederatedIdPName(),\n-                    getTokenBindingReference(newTokenBean));\n-            oauthCache.addToCache(cacheKey, newTokenBean);\n+            AccessTokenDO tokenToCache = AccessTokenDO.clone(newTokenBean);\n+            // If usePersistedAccessTokenAlias is enabled then in the DB the\n+            // access token alias taken from the OauthTokenIssuer's getAccessTokenHash\n+            // method is set as the token.\n+            if (oauthTokenIssuer.usePersistedAccessTokenAlias()) {\n+                try {\n+                    String jti = oauthTokenIssuer.getAccessTokenHash(newTokenBean.getAccessToken());\n+                    tokenToCache.setAccessToken(jti);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUwMTM1Nw=="}, "originalCommit": {"oid": "db00584ff1c0415a0aee35049f6f0268806fda0f"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3660, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}