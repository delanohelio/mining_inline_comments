{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzU0MDQz", "number": 1302, "title": "OIDC Scope Management REST APIs upon one single Scope management table", "bodyText": "Proposed changes in this pull request\nThere are two types of scopes in IS, OAuth2 binding scopes and OIDC scope binding.\nOAuth2 Scope Binding related data persist in two tables such as in IDN_OAUTH2_SCOPE, IDN_OAUTH2_SCOPE_BINDING.\nOIDC Scopes related data persist against IDN_OIDC_SCOPE and IDN_OIDC_SCOPE_CLAIM_MAPPING tables.\nFrom this Pr onwards we decided to maintain one single Scope table under \"IDN_OAUTH2_SCOPE\" for both use-cases. We have introduced one new column SCOPE_TYPE in  IDN_OAUTH2_SCOPE table to track the scope type.\nFor OAuth2 binding scopes, we'll set SCOPE_TYPE as \"OAUTH2\"\nFor  OIDC scope binding, we'll set SCOPE_TYPE as \"OIDC\".\nRelated to wso2/product-is#7130\nRequired migration changes address in wso2/product-is#7347\nDepends on wso2/carbon-utils#19\n\n\n\nWhen should this PR be merged\n[Please describe any preconditions that need to be addressed before we\ncan merge this pull request.]\nFollow up actions\n[List any possible follow-up actions here; for instance, testing data\nmigrations, software that we need to install on staging and production\nenvironments.]\n\n\n\nChecklist (for reviewing)\nGeneral\n\n Is this PR explained thoroughly? All code changes must be accounted for in the PR description.\n Is the PR labeled correctly?\n\nFunctionality\n\n Are all requirements met? Compare implemented functionality with the requirements specification.\n Does the UI work as expected? There should be no Javascript errors in the console; all resources should load. There should be no unexpected errors. Deliberately try to break the feature to find out if there are corner cases that are not handled.\n\nCode\n\n Do you fully understand the introduced changes to the code? If not ask for clarification, it might uncover ways to solve a problem in a more elegant and efficient way.\n Does the PR introduce any inefficient database requests? Use the debug server to check for duplicate requests.\n Are all necessary strings marked for translation? All strings that are exposed to users via the UI must be marked for translation.\n\nTests\n\n Are there sufficient test cases? Ensure that all components are tested individually; models, forms, and serializers should be tested in isolation even if a test for a view covers these components.\n If this is a bug fix, are tests for the issue in place?  There must be a test case for the bug to ensure the issue won\u2019t regress. Make sure that the tests break without the new code to fix the issue.\n If this is a new feature or a significant change to an existing feature? has the manual testing spreadsheet been updated with instructions for manual testing?\n\nSecurity\n\n Confirm this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets.\n Are all UI and API inputs run through forms or serializers?\n Are all external inputs validated and sanitized appropriately?\n Does all branching logic have a default case?\n Does this solution handle outliers and edge cases gracefully?\n Are all external communications secured and restricted to SSL?\n\nDocumentation\n\n Are changes to the UI documented in the platform docs? If this PR introduces new platform site functionality or changes existing ones, the changes should be documented.\n Are changes to the API documented in the API docs? If this PR introduces new API functionality or changes existing ones, the changes must be documented.\n Are reusable components documented? If this PR introduces components that are relevant to other developers (for instance a mixin for a view or a generic form) they should be documented in the Wiki.", "createdAt": "2020-01-24T09:47:44Z", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302", "merged": true, "mergeCommit": {"oid": "d4025c46ab1b9d6c816de6f11cb8970150ef8173"}, "closed": true, "closedAt": "2020-01-29T06:38:15Z", "author": {"login": "sarubi"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6NuAMgH2gAyMzY2NzU0MDQzOjExMjc4NzA0OTUyMzhmOWEwMDAwNDQ5MGMwNjg4ZmI2Y2ZmNjc1OGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-v1ejgFqTM0OTMxMDg4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1127870495238f9a00004490c0688fb6cff6758b", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/1127870495238f9a00004490c0688fb6cff6758b", "committedDate": "2020-01-14T09:41:33Z", "message": "Single scope table for OAuth2 scope binding and OIDC scope."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d933323ac565428001293e595697f65abff8f306", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/d933323ac565428001293e595697f65abff8f306", "committedDate": "2020-01-16T16:09:18Z", "message": "Includ proper exception handling in scope mgt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bd2c5e8c0d7148bc7bdcf086abf2e03fbe21f53", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4bd2c5e8c0d7148bc7bdcf086abf2e03fbe21f53", "committedDate": "2020-01-16T18:44:22Z", "message": "fix list scope depends on endpoint."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "325138048a07e770e70f7971580657c115e8e503", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/325138048a07e770e70f7971580657c115e8e503", "committedDate": "2020-01-17T06:04:38Z", "message": "refactored"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c5d72f7237fa0231f9dca7bdafd34e2aec9302", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/02c5d72f7237fa0231f9dca7bdafd34e2aec9302", "committedDate": "2020-01-17T08:12:37Z", "message": "Clear the both binding cache and oidc cache before updating an scope."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46212ce62c2a35fbdbde558e49ddcdd49ca98250", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/46212ce62c2a35fbdbde558e49ddcdd49ca98250", "committedDate": "2020-01-24T05:05:38Z", "message": "reimplement scope mgt by having new column SCOPE_TYPE in IDN_OAUTH2_SCOPE table."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "449eaeb38a23a066101aa76c0346e0613e6e06ad", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/449eaeb38a23a066101aa76c0346e0613e6e06ad", "committedDate": "2020-01-24T09:38:33Z", "message": "Fix review comments."}, "afterCommit": {"oid": "9405960208d044910527ef20f94ad06c073fd346", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9405960208d044910527ef20f94ad06c073fd346", "committedDate": "2020-01-24T09:50:16Z", "message": "Fix review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba209a2d1afcd8947c277f89183cc21cccb74a8", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/8ba209a2d1afcd8947c277f89183cc21cccb74a8", "committedDate": "2020-01-24T09:52:16Z", "message": "Fix review comments."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9405960208d044910527ef20f94ad06c073fd346", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/9405960208d044910527ef20f94ad06c073fd346", "committedDate": "2020-01-24T09:50:16Z", "message": "Fix review comments."}, "afterCommit": {"oid": "8ba209a2d1afcd8947c277f89183cc21cccb74a8", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/8ba209a2d1afcd8947c277f89183cc21cccb74a8", "committedDate": "2020-01-24T09:52:16Z", "message": "Fix review comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e41e40d0624358539f172d2c69909319e047dc8a", "committedDate": "2020-01-26T09:39:51Z", "message": "fix scope related test failures."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NDUxODUx", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-348451851", "createdAt": "2020-01-27T06:08:10Z", "commit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjowODoxMFrOFh4jaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwNjowODoxMFrOFh4jaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTA3Mzg5OQ==", "bodyText": "Can we pass the scope name here instead of null?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371073899", "createdAt": "2020-01-27T06:08:10Z", "author": {"login": "janakamarasena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "diffHunk": "@@ -294,4 +261,94 @@ public Scope updateScope(Scope updatedScope) throws IdentityOAuth2ScopeException\n         }\n         return scopes;\n     }\n+\n+    /**\n+     * Scope validation before adding the scope.\n+     *\n+     * @param scope Scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void addScopePreValidation(Scope scope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(scope.getName());\n+        validateDisplayName(scope.getDisplayName());\n+    }\n+\n+    /**\n+     * Do the validation before updating the scope.\n+     *\n+     * @param updatedScope Updated scope.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void updateScopePreValidation(Scope updatedScope) throws IdentityOAuth2ScopeClientException {\n+\n+        validateScopeName(updatedScope.getName());\n+        validateDisplayName(updatedScope.getDisplayName());\n+    }\n+\n+    /**\n+     * Check whether scope name is provided or not.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateScopeName(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name is provided.\n+        if (StringUtils.isBlank(scopeName)) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_NOT_SPECIFIED, null);\n+        }\n+        validateWhiteSpaces(scopeName);\n+    }\n+\n+    /**\n+     * Check whether scope name contains any white spaces.\n+     *\n+     * @param scopeName Scope name.\n+     * @throws IdentityOAuth2ScopeClientException\n+     */\n+    private void validateWhiteSpaces(String scopeName) throws IdentityOAuth2ScopeClientException {\n+\n+        // Check whether the scope name contains any white spaces.\n+        Pattern pattern = Pattern.compile(\"\\\\s\");\n+        Matcher matcher = pattern.matcher(scopeName);\n+        boolean foundWhiteSpace = matcher.find();\n+\n+        if (foundWhiteSpace) {\n+            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n+                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_CONTAINS_WHITESPACES, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d9f57faa0f38a06e6b28d14be7d6eda9b3b1906", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/6d9f57faa0f38a06e6b28d14be7d6eda9b3b1906", "committedDate": "2020-01-27T09:44:58Z", "message": "Merge branch 'master' of https://github.com/wso2-extensions/identity-inbound-auth-oauth into scope-mgt-public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13694644cf0b505e90a29ec7d48e8081ef9190f2", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/13694644cf0b505e90a29ec7d48e8081ef9190f2", "committedDate": "2020-01-27T09:46:12Z", "message": "Add carbon database utils dependancy."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTcxMDQ4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-348571048", "createdAt": "2020-01-27T10:44:10Z", "commit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0NDoxMFrOFh-Xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0NDoxMFrOFh-Xjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE2OTE2Ng==", "bodyText": "make this private", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371169166", "createdAt": "2020-01-27T10:44:10Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/ScopeClaimMappingDAOImpl.java", "diffHunk": "@@ -408,28 +515,35 @@ private void insertClaims(int tenantId, int scopeId, Set<String> claimsList) thr\n                 return null;\n             });\n         } catch (TransactionException e) {\n-            String errorMessage = \"Error when storing oidc claims for tenant: \" + tenantId;\n+            String errorMessage = String.format(\"Error when storing oidc claims for scope ID: %s for tenant: %s\",\n+                    scopeId, tenantId);\n             throw new IdentityOAuth2Exception(errorMessage, e);\n         }\n     }\n \n-    private List<ScopeDTO> buildScopeDTO(Map<String, List<String>> scopeClaimMap, int tenantId) {\n-\n-        List<ScopeDTO> oidcScopeClaimList = new ArrayList<>();\n-        for (Map.Entry<String, List<String>> scopeClaimEntry : scopeClaimMap.entrySet()) {\n-            ScopeDTO scopeDTO = new ScopeDTO();\n-            String scopeName = scopeClaimEntry.getKey();\n-            List<String> claimsList = scopeClaimEntry.getValue();\n-            scopeDTO.setName(scopeClaimEntry.getKey());\n-            if (CollectionUtils.isNotEmpty(claimsList)) {\n-                scopeDTO.setClaim(claimsList.toArray(new String[claimsList.size()]));\n-            }\n-            oidcScopeClaimList.add(scopeDTO);\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"The scope: \" + scopeName + \" and the claims: \" + String.join(\",\", claimsList)\n-                        + \" are successfully loaded for the tenant: \" + tenantId);\n-            }\n+    /**\n+     * Update scope details on IDN_OAUTH2_SCOPE scope table.\n+     *\n+     * @param updatedScope Updated scope.\n+     * @param tenantId     Tenant ID.\n+     * @param jdbcTemplate JDBC template.\n+     * @param scopeId      Scope ID.\n+     * @throws DataAccessException\n+     */\n+    public void updateScopeDetails(ScopeDTO updatedScope, int tenantId, JdbcTemplate jdbcTemplate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e41e40d0624358539f172d2c69909319e047dc8a"}, "originalPosition": 374}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NTg4NTM4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-348588538", "createdAt": "2020-01-27T11:16:25Z", "commit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxNjoyNVrOFh_NqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxNjoyNVrOFh_NqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MzAxNw==", "bodyText": "Better to use scopeID to delete and add the binding.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371183017", "createdAt": "2020-01-27T11:16:25Z", "author": {"login": "IsuraD"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/dao/OAuthScopeDAOImpl.java", "diffHunk": "@@ -444,13 +456,15 @@ public void deleteScopeByName(String name, int tenantID) throws IdentityOAuth2Sc\n     public void updateScopeByName(Scope updatedScope, int tenantID) throws IdentityOAuth2ScopeServerException {\n \n         if (log.isDebugEnabled()) {\n-            log.debug(\"Updae scope by name for scope name:\" + updatedScope.getName());\n+            log.debug(\"Update scope by name for scope name:\" + updatedScope.getName());\n         }\n \n         try (Connection conn = IdentityDatabaseUtil.getDBConnection()) {\n             try {\n-                deleteScope(updatedScope.getName(), tenantID, conn);\n-                addScope(updatedScope, conn, tenantID);\n+                int scopeId = getScopeId(updatedScope.getName(), tenantID, conn);\n+                updateScopeDetails(updatedScope, conn, scopeId);\n+                deleteBindings(updatedScope.getName(), tenantID, conn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NjAyMTQ4", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-348602148", "createdAt": "2020-01-27T11:41:19Z", "commit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo0MToxOVrOFh_3zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo0MToxOVrOFh_3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5MzgwNA==", "bodyText": "We might not be able to successfully say that scope does not exist from this validation. In a concurrent scenario, if the resource is existing while executing this check and while trying to delete the resource actually, it might have been deleted from another delete request. While it does not break any functionality for the delete operation, it might introduce inconsistencies.\nThis becomes more tricky for other operations.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371193804", "createdAt": "2020-01-27T11:41:19Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth/OAuthAdminServiceImpl.java", "diffHunk": "@@ -508,11 +562,18 @@ public void addScope(String scope, String[] claims) throws IdentityOAuthAdminExc\n      */\n     public void deleteScope(String scope) throws IdentityOAuthAdminException {\n \n+        validateScopeName(scope);\n+        // Check whether a scope exists with the provided scope name which to be deleted.\n+        validateScopeExistence(scope);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NjA4NDU1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-348608455", "createdAt": "2020-01-27T11:53:53Z", "commit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1Mzo1M1rOFiALXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1Mzo1M1rOFiALXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5ODgxMg==", "bodyText": "The same methods are implemented in OAuthAdminServiceImpl as well. Can we get rid of one implementation and invoke the other service's method.", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371198812", "createdAt": "2020-01-27T11:53:53Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/oauth2/OAuth2ScopeService.java", "diffHunk": "@@ -193,19 +181,11 @@ public boolean isScopeExists(String name) throws IdentityOAuth2ScopeException {\n      */\n     public void deleteScope(String name) throws IdentityOAuth2ScopeException {\n \n-        int tenantID = Oauth2ScopeUtils.getTenantID();\n-        if (name == null) {\n-            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n-                    ERROR_CODE_BAD_REQUEST_SCOPE_NAME_NOT_SPECIFIED, null);\n-        }\n-\n-        // check whether a scope exists with the provided scope name which to be deleted\n-        boolean isScopeExists = isScopeExists(name);\n-        if (!isScopeExists) {\n-            throw Oauth2ScopeUtils.generateClientException(Oauth2ScopeConstants.ErrorMessages.\n-                    ERROR_CODE_NOT_FOUND_SCOPE, name);\n-        }\n+        validateScopeName(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NjA5ODU1", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-348609855", "createdAt": "2020-01-27T11:56:35Z", "commit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1NjozNlrOFiAPlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMTo1NjozNlrOFiAPlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE5OTg5Mg==", "bodyText": "don't we need to break the loop from here?", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#discussion_r371199892", "createdAt": "2020-01-27T11:56:36Z", "author": {"login": "madurangasiriwardena"}, "path": "components/org.wso2.carbon.identity.oauth/src/main/java/org/wso2/carbon/identity/openidconnect/dao/CacheBackedScopeClaimMappingDAOImpl.java", "diffHunk": "@@ -135,4 +156,18 @@ private OIDCScopeClaimCacheEntry loadOIDCScopeClaims(int tenantId, OIDCScopeClai\n         }\n         return oidcScopeClaimCacheEntry;\n     }\n+\n+    @Override\n+    public ScopeDTO getScope(String scopeName, int tenantId) throws IdentityOAuth2Exception {\n+\n+        OIDCScopeClaimCacheEntry oidcScopeClaimCacheEntry = oidcScopeClaimCache.getScopeClaimMap(tenantId);\n+        oidcScopeClaimCacheEntry = loadOIDCScopeClaims(tenantId, oidcScopeClaimCacheEntry);\n+        ScopeDTO scopeDTO = null;\n+        for (ScopeDTO scopeObj : oidcScopeClaimCacheEntry.getScopeClaimMapping()) {\n+            if (scopeName.equals(scopeObj.getName())) {\n+                scopeDTO = scopeObj;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/c5b7172144c7cab95ce8d2f86d1761afaf4f0ba4", "committedDate": "2020-01-27T10:59:46Z", "message": "Fix review comment"}, "afterCommit": {"oid": "c2caaa0d9cfbe323efc56450653640b447e36382", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/c2caaa0d9cfbe323efc56450653640b447e36382", "committedDate": "2020-01-28T03:25:07Z", "message": "Fix review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTEyNzkw", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-349112790", "createdAt": "2020-01-28T03:30:28Z", "commit": {"oid": "c2caaa0d9cfbe323efc56450653640b447e36382"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2caaa0d9cfbe323efc56450653640b447e36382", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/c2caaa0d9cfbe323efc56450653640b447e36382", "committedDate": "2020-01-28T03:25:07Z", "message": "Fix review comment"}, "afterCommit": {"oid": "e80db12feb5d7c1996abf1df399a91c335e00245", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e80db12feb5d7c1996abf1df399a91c335e00245", "committedDate": "2020-01-28T03:33:44Z", "message": "Fix review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dd5b36332ce960d67ac66ed1135d2930b5b5ae9", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4dd5b36332ce960d67ac66ed1135d2930b5b5ae9", "committedDate": "2020-01-28T11:17:46Z", "message": "Fix review comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e80db12feb5d7c1996abf1df399a91c335e00245", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/e80db12feb5d7c1996abf1df399a91c335e00245", "committedDate": "2020-01-28T03:33:44Z", "message": "Fix review comment"}, "afterCommit": {"oid": "4dd5b36332ce960d67ac66ed1135d2930b5b5ae9", "author": {"user": {"login": "sarubi", "name": "Sarubi Thillainathan"}}, "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/commit/4dd5b36332ce960d67ac66ed1135d2930b5b5ae9", "committedDate": "2020-01-28T11:17:46Z", "message": "Fix review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MzEwODgx", "url": "https://github.com/wso2-extensions/identity-inbound-auth-oauth/pull/1302#pullrequestreview-349310881", "createdAt": "2020-01-28T11:42:11Z", "commit": {"oid": "4dd5b36332ce960d67ac66ed1135d2930b5b5ae9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3192, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}