{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3MDk0MDcy", "number": 958, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDozNTo1MFrOEzh86A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozODozM1rOE3Osog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDY5MDk2OnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDozNTo1MFrOHqzVjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzo1MjoyOFrOHrP-ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MzM0MQ==", "bodyText": "return QueryPropertyMarkerVisitor.instanceOf(currNode, Arrays.asList(ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class,\n                        ExceededValueThresholdMarkerJexlNode.class, ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class,\n                        ASTEvaluationOnly.class), null);\n\nThis method is a dupe of (erroneously protected) JexlASTHelper.isDelayedPredicate.  We should rip this out, update the JexlASTHelper method to be public, and use that instead.\nAlso, instead of visiting the tree six times for each instanceof call, we should pass the list of types to the QueryPropertyMarkerVisitor, and run instanceof once (as shown above);", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r514643341", "createdAt": "2020-10-30T00:35:50Z", "author": {"login": "jwomeara"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java", "diffHunk": "@@ -155,12 +155,9 @@ public Object visit(ASTReference node, Object data) {\n      * @return\n      */\n     protected boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n                         || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73c8b0d6ace4ab640c74f8794b74c4c33b44d23d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDc1MTgyNA==", "bodyText": "I've deduped the method and used QueryPropertyMarkerVisitor. One change I made was to use QueryPropertyMarkerVisitor.instanceOfAny(node) instead, since that will default to the TYPE_IDENTIFIERS set that already contains the delayed predicate instance types.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r514751824", "createdAt": "2020-10-30T03:00:00Z", "author": {"login": "lbschanno"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java", "diffHunk": "@@ -155,12 +155,9 @@ public Object visit(ASTReference node, Object data) {\n      * @return\n      */\n     protected boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n                         || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MzM0MQ=="}, "originalCommit": {"oid": "73c8b0d6ace4ab640c74f8794b74c4c33b44d23d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTExMjU3MQ==", "bodyText": "Good call.  I didn't realize that there were only 6 marker nodes.  D'oh!  Nice work!", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r515112571", "createdAt": "2020-10-30T13:52:28Z", "author": {"login": "jwomeara"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ExpandMultiNormalizedTerms.java", "diffHunk": "@@ -155,12 +155,9 @@ public Object visit(ASTReference node, Object data) {\n      * @return\n      */\n     protected boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n                         || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MzM0MQ=="}, "originalCommit": {"oid": "73c8b0d6ace4ab640c74f8794b74c4c33b44d23d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzg5Mzg3OnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo0NjozN1rOHsHakw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjoyNDo0NlrOHseVlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw==", "bodyText": "I don't believe this should be changed.  isDelayedPredictate is specific to a certain set of query property markers.  BoundedRange is coming along in #926 which is specifically not a delayed predicate.  Please revert this to it original state.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516020883", "createdAt": "2020-11-02T14:46:37Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1201,15 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+    /**\n+     * Return whether to not the provided node is an instance of a delayed predicate.\n+     * \n+     * @param node\n+     *            the node\n+     * @return true if the node is an instance of a delayed predicate, or false otherwise\n+     */\n+    public static boolean isDelayedPredicate(JexlNode node) {\n+        return QueryPropertyMarkerVisitor.instanceOfAny(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33fe59f69defa7569142ea22ff5aae369f43cb7d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI0NzE0OA==", "bodyText": "Fixed.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516247148", "createdAt": "2020-11-02T20:52:17Z", "author": {"login": "lbschanno"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1201,15 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+    /**\n+     * Return whether to not the provided node is an instance of a delayed predicate.\n+     * \n+     * @param node\n+     *            the node\n+     * @return true if the node is an instance of a delayed predicate, or false otherwise\n+     */\n+    public static boolean isDelayedPredicate(JexlNode node) {\n+        return QueryPropertyMarkerVisitor.instanceOfAny(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw=="}, "originalCommit": {"oid": "33fe59f69defa7569142ea22ff5aae369f43cb7d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDM5Mg==", "bodyText": "Wait wait wait!  I still think we should avoid multiple recursions of the entire jexl tree.  Can we revert the revert, but update the isDelayedPredicate call to be...\nreturn QueryPropertyMarkerVisitor.instanceOf(currNode, Arrays.asList(ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class,\n                        ExceededValueThresholdMarkerJexlNode.class, ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class,\n                        ASTEvaluationOnly.class), null);\n\nI think this satisfies both my and Ivan's issue, right?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516384392", "createdAt": "2020-11-03T01:32:47Z", "author": {"login": "jwomeara"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1201,15 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+    /**\n+     * Return whether to not the provided node is an instance of a delayed predicate.\n+     * \n+     * @param node\n+     *            the node\n+     * @return true if the node is an instance of a delayed predicate, or false otherwise\n+     */\n+    public static boolean isDelayedPredicate(JexlNode node) {\n+        return QueryPropertyMarkerVisitor.instanceOfAny(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw=="}, "originalCommit": {"oid": "33fe59f69defa7569142ea22ff5aae369f43cb7d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NjQzOQ==", "bodyText": "Third time's the charm? Fixed.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516396439", "createdAt": "2020-11-03T02:24:46Z", "author": {"login": "lbschanno"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1201,15 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+    /**\n+     * Return whether to not the provided node is an instance of a delayed predicate.\n+     * \n+     * @param node\n+     *            the node\n+     * @return true if the node is an instance of a delayed predicate, or false otherwise\n+     */\n+    public static boolean isDelayedPredicate(JexlNode node) {\n+        return QueryPropertyMarkerVisitor.instanceOfAny(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAyMDg4Mw=="}, "originalCommit": {"oid": "33fe59f69defa7569142ea22ff5aae369f43cb7d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjIwNjQzOnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMTozNDoxNlrOHsdn4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwMjoyNToxNlrOHseWJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDczOA==", "bodyText": "If we do it this way, we only traverse the tree once:\nreturn QueryPropertyMarkerVisitor.instanceOf(currNode, Arrays.asList(ASTDelayedPredicate.class, ExceededOrThresholdMarkerJexlNode.class,\n                        ExceededValueThresholdMarkerJexlNode.class, ExceededTermThresholdMarkerJexlNode.class, IndexHoleMarkerJexlNode.class,\n                        ASTEvaluationOnly.class), null);", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516384738", "createdAt": "2020-11-03T01:34:16Z", "author": {"login": "jwomeara"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1204,10 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+    public static boolean isDelayedPredicate(JexlNode currNode) {\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n                         || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb2a52223dbb3d137159fe632809072267c96315"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM5NjU4Mw==", "bodyText": "Fixed in latest commit.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r516396583", "createdAt": "2020-11-03T02:25:16Z", "author": {"login": "lbschanno"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,13 +1204,10 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n+    public static boolean isDelayedPredicate(JexlNode currNode) {\n+        return ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n                         || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n+                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjM4NDczOA=="}, "originalCommit": {"oid": "fb2a52223dbb3d137159fe632809072267c96315"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzQ3OTM4OnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzozODozM1rOHwc6Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTozNDo1M1rOHwiWkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2NzMzNQ==", "bodyText": "This constant is not needed?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r520567335", "createdAt": "2020-11-10T13:38:33Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,14 +1206,9 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n-    }\n+    private static final List<Class<? extends QueryPropertyMarker>> DELAYED_PREDICATE_TYPES = Collections.unmodifiableList(Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89842633910c1b586fdc3802d6a13a87d43a6441"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1NjUyOQ==", "bodyText": "Good catch, I forgot to remove this. Fixed.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/958#discussion_r520656529", "createdAt": "2020-11-10T15:34:53Z", "author": {"login": "lbschanno"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/JexlASTHelper.java", "diffHunk": "@@ -1204,14 +1206,9 @@ private static void getERNodes(JexlNode node, List<ASTERNode> erNodes) {\n         return nodes;\n     }\n     \n-    protected static boolean isDelayedPredicate(JexlNode currNode) {\n-        if (ASTDelayedPredicate.instanceOf(currNode) || ExceededOrThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || ExceededValueThresholdMarkerJexlNode.instanceOf(currNode) || ExceededTermThresholdMarkerJexlNode.instanceOf(currNode)\n-                        || IndexHoleMarkerJexlNode.instanceOf(currNode) || ASTEvaluationOnly.instanceOf(currNode))\n-            return true;\n-        else\n-            return false;\n-    }\n+    private static final List<Class<? extends QueryPropertyMarker>> DELAYED_PREDICATE_TYPES = Collections.unmodifiableList(Arrays.asList(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2NzMzNQ=="}, "originalCommit": {"oid": "89842633910c1b586fdc3802d6a13a87d43a6441"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4449, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}