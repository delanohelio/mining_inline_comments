{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2Nzc5NDU4", "number": 910, "title": "Remove redundant conjunctions and disjunctions from query", "bodyText": "Note: I am not sure if these new visitors should be used somewhere by default, maybe after enforcing unique terms within an AND and OR expression in DefaultQueryPlanner.updateQueryTree()? If so, please leave a comment and I'll add them in.\nRemove duplicate terms that are distributed through AND and OR nodes.\nFor example:\nCase 1: (A && B) || A should be reduced to A.\nCase 2: (A || B) && A should be reduced to A.\nCreate ConjunctionEliminationVisitor to handle case 1.\nCreate DisjunctionEliminationVisitor to handle case 2.\nFixes #883", "createdAt": "2020-09-01T03:16:35Z", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910", "merged": true, "mergeCommit": {"oid": "5f1c673421bbcf92b509839e449f5a8adc6501c0"}, "closed": true, "closedAt": "2021-03-05T17:23:27Z", "author": {"login": "lbschanno"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdElYGygFqTQ3OTYwMzg5Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeANokcAFqTYwNTQ0MDEzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NjAzODk3", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#pullrequestreview-479603897", "createdAt": "2020-09-01T10:21:22Z", "commit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDoyMToyMlrOHKv-3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDo1NTo1N1rOHKxD2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzMzk1MQ==", "bodyText": "This should be able to handle any number of terms within an OrNode", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481033951", "createdAt": "2020-09-01T10:21:22Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ConjunctionEliminationVisitor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTAndNode;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ASTOrNode;\n+import org.apache.commons.jexl2.parser.ASTReference;\n+import org.apache.commons.jexl2.parser.ASTReferenceExpression;\n+import org.apache.commons.jexl2.parser.JexlNode;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.apache.log4j.Logger;\n+\n+import static org.apache.commons.jexl2.parser.JexlNodes.replaceChild;\n+\n+public class ConjunctionEliminationVisitor extends RebuildingVisitor {\n+    \n+    private static final Logger log = Logger.getLogger(ConjunctionEliminationVisitor.class);\n+    \n+    /**\n+     * Given a JexlNode, determine if any duplicate conjunctions in the node can be removed.\n+     *\n+     * @param node\n+     *            a query node\n+     * @return a re-written query tree for the node\n+     */\n+    public static <T extends JexlNode> T optimize(T node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        \n+        // Operate on copy of query tree.\n+        T copy = (T) copy(node);\n+        \n+        // Visit and enforce collapsing redundant nodes within expression.\n+        ConjunctionEliminationVisitor visitor = new ConjunctionEliminationVisitor();\n+        copy.jjtAccept(visitor, null);\n+        \n+        return copy;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTOrNode node, Object data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzNTM5MA==", "bodyText": "otherScript -> otherNode", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481035390", "createdAt": "2020-09-01T10:24:10Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ConjunctionEliminationVisitor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTAndNode;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ASTOrNode;\n+import org.apache.commons.jexl2.parser.ASTReference;\n+import org.apache.commons.jexl2.parser.ASTReferenceExpression;\n+import org.apache.commons.jexl2.parser.JexlNode;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.apache.log4j.Logger;\n+\n+import static org.apache.commons.jexl2.parser.JexlNodes.replaceChild;\n+\n+public class ConjunctionEliminationVisitor extends RebuildingVisitor {\n+    \n+    private static final Logger log = Logger.getLogger(ConjunctionEliminationVisitor.class);\n+    \n+    /**\n+     * Given a JexlNode, determine if any duplicate conjunctions in the node can be removed.\n+     *\n+     * @param node\n+     *            a query node\n+     * @return a re-written query tree for the node\n+     */\n+    public static <T extends JexlNode> T optimize(T node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        \n+        // Operate on copy of query tree.\n+        T copy = (T) copy(node);\n+        \n+        // Visit and enforce collapsing redundant nodes within expression.\n+        ConjunctionEliminationVisitor visitor = new ConjunctionEliminationVisitor();\n+        copy.jjtAccept(visitor, null);\n+        \n+        return copy;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTOrNode node, Object data) {\n+        JexlNode left = getFirstNonASTReference(node.jjtGetChild(0));\n+        JexlNode right = getFirstNonASTReference(node.jjtGetChild(1));\n+        try {\n+            if (isConjunction(left) && hasDuplicate(left, right)) {\n+                return copyChildAndUpdateParent(node, right);\n+            }\n+            if (isConjunction(right) && hasDuplicate(right, left)) {\n+                return copyChildAndUpdateParent(node, left);\n+            }\n+        } catch (ParseException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Failed to parse child node to check for equivalency\", e);\n+            }\n+        }\n+        return node;\n+    }\n+    \n+    // Return the first non-wrapped node.\n+    private JexlNode getFirstNonASTReference(JexlNode node) {\n+        if (node instanceof ASTReference || node instanceof ASTReferenceExpression) {\n+            return getFirstNonASTReference(node.jjtGetChild(0));\n+        } else {\n+            return node;\n+        }\n+    }\n+    \n+    // Return whether or not the given node is an AND.\n+    private boolean isConjunction(JexlNode node) {\n+        return node instanceof ASTAndNode;\n+    }\n+    \n+    // Return true if the conjunction node\n+    private boolean hasDuplicate(JexlNode conjunction, JexlNode otherScript) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAzNzc2NQ==", "bodyText": "Something like..?\n// Returns true if the conjunction contains a duplicate of the provided node", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481037765", "createdAt": "2020-09-01T10:28:47Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ConjunctionEliminationVisitor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTAndNode;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ASTOrNode;\n+import org.apache.commons.jexl2.parser.ASTReference;\n+import org.apache.commons.jexl2.parser.ASTReferenceExpression;\n+import org.apache.commons.jexl2.parser.JexlNode;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.apache.log4j.Logger;\n+\n+import static org.apache.commons.jexl2.parser.JexlNodes.replaceChild;\n+\n+public class ConjunctionEliminationVisitor extends RebuildingVisitor {\n+    \n+    private static final Logger log = Logger.getLogger(ConjunctionEliminationVisitor.class);\n+    \n+    /**\n+     * Given a JexlNode, determine if any duplicate conjunctions in the node can be removed.\n+     *\n+     * @param node\n+     *            a query node\n+     * @return a re-written query tree for the node\n+     */\n+    public static <T extends JexlNode> T optimize(T node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        \n+        // Operate on copy of query tree.\n+        T copy = (T) copy(node);\n+        \n+        // Visit and enforce collapsing redundant nodes within expression.\n+        ConjunctionEliminationVisitor visitor = new ConjunctionEliminationVisitor();\n+        copy.jjtAccept(visitor, null);\n+        \n+        return copy;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTOrNode node, Object data) {\n+        JexlNode left = getFirstNonASTReference(node.jjtGetChild(0));\n+        JexlNode right = getFirstNonASTReference(node.jjtGetChild(1));\n+        try {\n+            if (isConjunction(left) && hasDuplicate(left, right)) {\n+                return copyChildAndUpdateParent(node, right);\n+            }\n+            if (isConjunction(right) && hasDuplicate(right, left)) {\n+                return copyChildAndUpdateParent(node, left);\n+            }\n+        } catch (ParseException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Failed to parse child node to check for equivalency\", e);\n+            }\n+        }\n+        return node;\n+    }\n+    \n+    // Return the first non-wrapped node.\n+    private JexlNode getFirstNonASTReference(JexlNode node) {\n+        if (node instanceof ASTReference || node instanceof ASTReferenceExpression) {\n+            return getFirstNonASTReference(node.jjtGetChild(0));\n+        } else {\n+            return node;\n+        }\n+    }\n+    \n+    // Return whether or not the given node is an AND.\n+    private boolean isConjunction(JexlNode node) {\n+        return node instanceof ASTAndNode;\n+    }\n+    \n+    // Return true if the conjunction node", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTQzNA==", "bodyText": "I'm disliking that for each equivalence check we build a string, parse it, then wrap it in a ASTJexlScript to run the equality visitor. However, hacking in another TreeEqualityVisitor.isEqual() method that accepts jexl nodes instead of scripts doesn't play nicely with reference expressions.\nIn a perfect world the TreeEqualityVisitor would support evaluation of two jexl nodes that may or may not represent subtrees, with an option to descend into reference expressions. It should not force you into evaluation two jexl scripts.\nTo be clear, you are doing the correct thing here -- I'm complaining about exiting code.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481049434", "createdAt": "2020-09-01T10:51:33Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ConjunctionEliminationVisitor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTAndNode;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ASTOrNode;\n+import org.apache.commons.jexl2.parser.ASTReference;\n+import org.apache.commons.jexl2.parser.ASTReferenceExpression;\n+import org.apache.commons.jexl2.parser.JexlNode;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.apache.log4j.Logger;\n+\n+import static org.apache.commons.jexl2.parser.JexlNodes.replaceChild;\n+\n+public class ConjunctionEliminationVisitor extends RebuildingVisitor {\n+    \n+    private static final Logger log = Logger.getLogger(ConjunctionEliminationVisitor.class);\n+    \n+    /**\n+     * Given a JexlNode, determine if any duplicate conjunctions in the node can be removed.\n+     *\n+     * @param node\n+     *            a query node\n+     * @return a re-written query tree for the node\n+     */\n+    public static <T extends JexlNode> T optimize(T node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        \n+        // Operate on copy of query tree.\n+        T copy = (T) copy(node);\n+        \n+        // Visit and enforce collapsing redundant nodes within expression.\n+        ConjunctionEliminationVisitor visitor = new ConjunctionEliminationVisitor();\n+        copy.jjtAccept(visitor, null);\n+        \n+        return copy;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTOrNode node, Object data) {\n+        JexlNode left = getFirstNonASTReference(node.jjtGetChild(0));\n+        JexlNode right = getFirstNonASTReference(node.jjtGetChild(1));\n+        try {\n+            if (isConjunction(left) && hasDuplicate(left, right)) {\n+                return copyChildAndUpdateParent(node, right);\n+            }\n+            if (isConjunction(right) && hasDuplicate(right, left)) {\n+                return copyChildAndUpdateParent(node, left);\n+            }\n+        } catch (ParseException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Failed to parse child node to check for equivalency\", e);\n+            }\n+        }\n+        return node;\n+    }\n+    \n+    // Return the first non-wrapped node.\n+    private JexlNode getFirstNonASTReference(JexlNode node) {\n+        if (node instanceof ASTReference || node instanceof ASTReferenceExpression) {\n+            return getFirstNonASTReference(node.jjtGetChild(0));\n+        } else {\n+            return node;\n+        }\n+    }\n+    \n+    // Return whether or not the given node is an AND.\n+    private boolean isConjunction(JexlNode node) {\n+        return node instanceof ASTAndNode;\n+    }\n+    \n+    // Return true if the conjunction node\n+    private boolean hasDuplicate(JexlNode conjunction, JexlNode otherScript) throws ParseException {\n+        int totalChildren = conjunction.jjtGetNumChildren();\n+        ASTJexlScript script = getScript(otherScript);\n+        for (int i = 0; i < totalChildren; i++) {\n+            JexlNode child = conjunction.jjtGetChild(i);\n+            if (isEquivalent(child, script)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+    \n+    // Copy the child node and replace the original node with it in the original node's parent.\n+    private JexlNode copyChildAndUpdateParent(JexlNode original, JexlNode child) {\n+        JexlNode copy = copy(child);\n+        copy.image = original.image;\n+        replaceChild(original.jjtGetParent(), original, copy);\n+        return copy;\n+    }\n+    \n+    // Return whether or not the two JEXL queries are equivalent.\n+    private boolean isEquivalent(JexlNode node, ASTJexlScript script) throws ParseException {\n+        ASTJexlScript nodeScript = getScript(node);\n+        return TreeEqualityVisitor.isEqual(nodeScript, script, new TreeEqualityVisitor.Reason());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTYwOQ==", "bodyText": "disjunctions?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481049609", "createdAt": "2020-09-01T10:51:51Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/DisjunctionEliminationVisitor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTAndNode;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ASTOrNode;\n+import org.apache.commons.jexl2.parser.ASTReference;\n+import org.apache.commons.jexl2.parser.ASTReferenceExpression;\n+import org.apache.commons.jexl2.parser.JexlNode;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.apache.log4j.Logger;\n+\n+import static org.apache.commons.jexl2.parser.JexlNodes.replaceChild;\n+\n+public class DisjunctionEliminationVisitor extends RebuildingVisitor {\n+    \n+    private static final Logger log = Logger.getLogger(DisjunctionEliminationVisitor.class);\n+    \n+    /**\n+     * Given a JexlNode, determine if any duplicate conjunctions in the node can be removed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0OTgyMQ==", "bodyText": "otherScript -> otherNode", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481049821", "createdAt": "2020-09-01T10:52:18Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/DisjunctionEliminationVisitor.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTAndNode;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ASTOrNode;\n+import org.apache.commons.jexl2.parser.ASTReference;\n+import org.apache.commons.jexl2.parser.ASTReferenceExpression;\n+import org.apache.commons.jexl2.parser.JexlNode;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.apache.log4j.Logger;\n+\n+import static org.apache.commons.jexl2.parser.JexlNodes.replaceChild;\n+\n+public class DisjunctionEliminationVisitor extends RebuildingVisitor {\n+    \n+    private static final Logger log = Logger.getLogger(DisjunctionEliminationVisitor.class);\n+    \n+    /**\n+     * Given a JexlNode, determine if any duplicate conjunctions in the node can be removed.\n+     *\n+     * @param node\n+     *            a query node\n+     * @return a re-written query tree for the node\n+     */\n+    public static <T extends JexlNode> T optimize(T node) {\n+        if (node == null) {\n+            return null;\n+        }\n+        \n+        // Operate on copy of query tree.\n+        T copy = (T) copy(node);\n+        \n+        // Visit and enforce collapsing redundant nodes within expression.\n+        DisjunctionEliminationVisitor visitor = new DisjunctionEliminationVisitor();\n+        copy.jjtAccept(visitor, null);\n+        \n+        return copy;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTAndNode node, Object data) {\n+        JexlNode left = getFirstNonASTReference(node.jjtGetChild(0));\n+        JexlNode right = getFirstNonASTReference(node.jjtGetChild(1));\n+        try {\n+            if (isDisjunction(left) && hasDuplicate(left, right)) {\n+                return copyChildAndUpdateParent(node, right);\n+            }\n+            if (isDisjunction(right) && hasDuplicate(right, left)) {\n+                return copyChildAndUpdateParent(node, left);\n+            }\n+        } catch (ParseException e) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Failed to parse child node to check for equivalency\", e);\n+            }\n+        }\n+        return node;\n+    }\n+    \n+    // Return the first non-wrapped node.\n+    private JexlNode getFirstNonASTReference(JexlNode node) {\n+        if (node instanceof ASTReference || node instanceof ASTReferenceExpression) {\n+            return getFirstNonASTReference(node.jjtGetChild(0));\n+        } else {\n+            return node;\n+        }\n+    }\n+    \n+    // Return whether or not the given node is an OR.\n+    private boolean isDisjunction(JexlNode node) {\n+        return node instanceof ASTOrNode;\n+    }\n+    \n+    // Return true if the conjunction node\n+    private boolean hasDuplicate(JexlNode conjunction, JexlNode otherScript) throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MDA4OA==", "bodyText": "Don't need this class level annotation, same comment with other test.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481050088", "createdAt": "2020-09-01T10:52:50Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/test/java/datawave/query/jexl/visitors/ConjunctionEliminationVisitorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTIzMw==", "bodyText": "A test with more than 2 top level nodes will fail, in this case the node PET == 'fluffy' was added.\n@Test\npublic void testDuplicateConjunctionWithWrappedUniqueNestedDisjunction_threeTopLevelTerms() throws ParseException {\n    String original = \"(FOO == 'bar' && (FOO == 'baz' || FOO == 'zoo')) || PET == 'fluffy' || FOO == 'bar'\";\n    String expected = \"PET == 'fluffy' || FOO == 'bar'\";\n    visitAndValidate(original, expected);\n}", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481051233", "createdAt": "2020-09-01T10:55:05Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/test/java/datawave/query/jexl/visitors/ConjunctionEliminationVisitorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class ConjunctionEliminationVisitorTest {\n+    \n+    @Test\n+    public void testSingleTerm() throws ParseException {\n+        String original = \"FOO == 'bar'\";\n+        visitAndValidate(original, original);\n+    }\n+    \n+    @Test\n+    public void testUniqueConjunctionInTopLevelDisjunction() throws ParseException {\n+        String original = \"(FOO == 'bar' && FOO == 'baz') || FOO == 'zoo'\";\n+        visitAndValidate(original, original);\n+    }\n+    \n+    @Test\n+    public void testDuplicateInNestedConjunction() throws ParseException {\n+        String original = \"(FOO == 'bar' && FOO == 'baz') || FOO == 'bar'\";\n+        String expected = \"FOO == 'bar'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateConjunctionInWrappedTopLevelDisjunction() throws ParseException {\n+        String original = \"((FOO == 'bar' && FOO == 'baz') || FOO == 'bar')\";\n+        String expected = \"(FOO == 'bar')\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateNestedConjunction() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && FOO == 'bar') || (FOO == 'baz' && FOO == 'zoo')\";\n+        String expected = \"FOO == 'baz' && FOO == 'zoo'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateNestedConjunctionInWrappedTopLevelDisjunction() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && FOO == 'bar') || (FOO == 'baz' && FOO == 'zoo')\";\n+        String expected = \"FOO == 'baz' && FOO == 'zoo'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testMultipleNestedConjunctionsWithDuplicate() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && (FOO == 'bar' && FOO == 'dab')) || (FOO == 'baz' && FOO == 'zoo')\";\n+        String expected = \"FOO == 'baz' && FOO == 'zoo'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testMultipleNestedConjunctionsWithDifferentlyOrderedDuplicate() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && (FOO == 'bar' && FOO == 'dab')) || (FOO == 'zoo' && FOO == 'baz')\";\n+        String expected = \"FOO == 'zoo' && FOO == 'baz'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateConjunctionWithUniqueNestedDisjunction() throws ParseException {\n+        String original = \"((FOO == 'bar' && FOO == 'baz') || FOO == 'zoo') || FOO == 'bar'\";\n+        visitAndValidate(original, original);\n+    }\n+    \n+    @Test\n+    public void testDuplicateConjunctionWithWrappedUniqueNestedDisjunction() throws ParseException {\n+        String original = \"(FOO == 'bar' && (FOO == 'baz' || FOO == 'zoo')) || FOO == 'bar'\";\n+        String expected = \"FOO == 'bar'\";\n+        visitAndValidate(original, expected);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA1MTYwOA==", "bodyText": "If the original script is flattened a few test cases fail. Same comment with other test class.\noriginalScript = TreeFlatteningRebuilder.flatten(originalScript);", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#discussion_r481051608", "createdAt": "2020-09-01T10:55:57Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/test/java/datawave/query/jexl/visitors/ConjunctionEliminationVisitorTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package datawave.query.jexl.visitors;\n+\n+import datawave.query.jexl.JexlASTHelper;\n+import org.apache.commons.jexl2.parser.ASTJexlScript;\n+import org.apache.commons.jexl2.parser.ParseException;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(JUnit4.class)\n+public class ConjunctionEliminationVisitorTest {\n+    \n+    @Test\n+    public void testSingleTerm() throws ParseException {\n+        String original = \"FOO == 'bar'\";\n+        visitAndValidate(original, original);\n+    }\n+    \n+    @Test\n+    public void testUniqueConjunctionInTopLevelDisjunction() throws ParseException {\n+        String original = \"(FOO == 'bar' && FOO == 'baz') || FOO == 'zoo'\";\n+        visitAndValidate(original, original);\n+    }\n+    \n+    @Test\n+    public void testDuplicateInNestedConjunction() throws ParseException {\n+        String original = \"(FOO == 'bar' && FOO == 'baz') || FOO == 'bar'\";\n+        String expected = \"FOO == 'bar'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateConjunctionInWrappedTopLevelDisjunction() throws ParseException {\n+        String original = \"((FOO == 'bar' && FOO == 'baz') || FOO == 'bar')\";\n+        String expected = \"(FOO == 'bar')\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateNestedConjunction() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && FOO == 'bar') || (FOO == 'baz' && FOO == 'zoo')\";\n+        String expected = \"FOO == 'baz' && FOO == 'zoo'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateNestedConjunctionInWrappedTopLevelDisjunction() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && FOO == 'bar') || (FOO == 'baz' && FOO == 'zoo')\";\n+        String expected = \"FOO == 'baz' && FOO == 'zoo'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testMultipleNestedConjunctionsWithDuplicate() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && (FOO == 'bar' && FOO == 'dab')) || (FOO == 'baz' && FOO == 'zoo')\";\n+        String expected = \"FOO == 'baz' && FOO == 'zoo'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testMultipleNestedConjunctionsWithDifferentlyOrderedDuplicate() throws ParseException {\n+        String original = \"((FOO == 'baz' && FOO == 'zoo') && (FOO == 'bar' && FOO == 'dab')) || (FOO == 'zoo' && FOO == 'baz')\";\n+        String expected = \"FOO == 'zoo' && FOO == 'baz'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateConjunctionWithUniqueNestedDisjunction() throws ParseException {\n+        String original = \"((FOO == 'bar' && FOO == 'baz') || FOO == 'zoo') || FOO == 'bar'\";\n+        visitAndValidate(original, original);\n+    }\n+    \n+    @Test\n+    public void testDuplicateConjunctionWithWrappedUniqueNestedDisjunction() throws ParseException {\n+        String original = \"(FOO == 'bar' && (FOO == 'baz' || FOO == 'zoo')) || FOO == 'bar'\";\n+        String expected = \"FOO == 'bar'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    @Test\n+    public void testDuplicateDisjunctionInNestedConjunction() throws ParseException {\n+        String original = \"((FOO == 'bar' || FOO == 'baz') && FOO == 'zoo') || (FOO == 'bar' || FOO == 'baz')\";\n+        String expected = \"FOO == 'bar' || FOO == 'baz'\";\n+        visitAndValidate(original, expected);\n+    }\n+    \n+    private void visitAndValidate(String original, String expected) throws ParseException {\n+        ASTJexlScript originalScript = JexlASTHelper.parseJexlQuery(original);\n+        ASTJexlScript expectedScript = JexlASTHelper.parseJexlQuery(expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c89b6522440c589092f57de13bb0a3d8f8bbdcf4"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1ODIwNzM0", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#pullrequestreview-485820734", "createdAt": "2020-09-10T11:06:35Z", "commit": {"oid": "554e03e8cb985bbe99888611ecaafb10f2a30686"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "969e27568c0fd52449cbd394569590027b0dbfad", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/969e27568c0fd52449cbd394569590027b0dbfad", "committedDate": "2020-12-15T18:08:25Z", "message": "Remove redundant conjunctions and disjunctions from query\n\nRemove duplicate terms that are distributed through AND and OR nodes.\nFor example:\n\nCase 1: (A && B) || A should be reduced to A.\nCase 2: (A || B) && A should be reduced to A.\n\nCreate ConjunctionEliminationVisitor to handle case 1.\nCreate DisjunctionEliminationVisitor to handle case 2.\n\nFixes #883"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6c72136cfc0255764b442effaa953aae01140a2", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/e6c72136cfc0255764b442effaa953aae01140a2", "committedDate": "2020-12-15T18:08:25Z", "message": "Fix checkstyle violations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cc9b5313feb5ba5f73744ff55e70c941c9b274c", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/9cc9b5313feb5ba5f73744ff55e70c941c9b274c", "committedDate": "2020-12-15T18:08:26Z", "message": "Apply changes requested in review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3880761e8219037cb429da1c5e1b88ac948c09cb", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/3880761e8219037cb429da1c5e1b88ac948c09cb", "committedDate": "2020-12-15T18:08:26Z", "message": "Add visitor toggles to ShardQueryConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6baf42bb4853207a8b4fd8f72f943e40762ac9f5", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/6baf42bb4853207a8b4fd8f72f943e40762ac9f5", "committedDate": "2020-12-15T18:08:26Z", "message": "Handle flattening and multiple top-level terms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b244b5891d3a320cb12d34000c00c29cb3e87c7", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/6b244b5891d3a320cb12d34000c00c29cb3e87c7", "committedDate": "2020-12-15T18:08:26Z", "message": "Fix expected number of additions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56773e780f1be7404617125ef189c6e14787e26c", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/56773e780f1be7404617125ef189c6e14787e26c", "committedDate": "2020-12-15T18:08:26Z", "message": "Fix Javadoc issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cae05a76f8bc244ed492342c00219454e17242b5", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/cae05a76f8bc244ed492342c00219454e17242b5", "committedDate": "2020-12-15T18:08:26Z", "message": "Ensure both visitors maintain a valid lineage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "145ff2f2bf3f63c102d2c46a13b18537bbf1f008", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/145ff2f2bf3f63c102d2c46a13b18537bbf1f008", "committedDate": "2020-12-15T18:08:26Z", "message": "Fix code formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed4edd767b5caf6be04bc8f039bb0a4c705f75bf", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/ed4edd767b5caf6be04bc8f039bb0a4c705f75bf", "committedDate": "2020-12-15T18:08:26Z", "message": "Remove unnecessary traversal"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8398c4be8512f357054d5681b60977d7294ff102", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/8398c4be8512f357054d5681b60977d7294ff102", "committedDate": "2020-11-05T08:42:38Z", "message": "Remove unnecessary traversal"}, "afterCommit": {"oid": "ed4edd767b5caf6be04bc8f039bb0a4c705f75bf", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/ed4edd767b5caf6be04bc8f039bb0a4c705f75bf", "committedDate": "2020-12-15T18:08:26Z", "message": "Remove unnecessary traversal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c99b74aaaea52f2b15956a786f5d440f76404c", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/81c99b74aaaea52f2b15956a786f5d440f76404c", "committedDate": "2020-12-29T17:12:32Z", "message": "Merge remote-tracking branch 'upstream/release/version3.1' into redundant-query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MjkyMzkx", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#pullrequestreview-564292391", "createdAt": "2021-01-08T14:18:58Z", "commit": {"oid": "81c99b74aaaea52f2b15956a786f5d440f76404c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk2NTg0MTIy", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#pullrequestreview-596584122", "createdAt": "2021-02-23T17:14:43Z", "commit": {"oid": "81c99b74aaaea52f2b15956a786f5d440f76404c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19b2bb6d194946606ee73cc3ec0572166b4922c7", "author": {"user": {"login": "ivakegg", "name": "Ivan Bella"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/19b2bb6d194946606ee73cc3ec0572166b4922c7", "committedDate": "2021-02-23T17:16:32Z", "message": "Merge branch 'release/version3.2' into redundant-query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb16ff62bcb4f2e03e9d8c2c8f87ff7c1d301c1", "author": {"user": {"login": "lbschanno", "name": "Laura Schanno"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/acb16ff62bcb4f2e03e9d8c2c8f87ff7c1d301c1", "committedDate": "2021-03-05T16:53:15Z", "message": "Merge branch 'release/version3.2' into redundant-query"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1NDQwMTMx", "url": "https://github.com/NationalSecurityAgency/datawave/pull/910#pullrequestreview-605440131", "createdAt": "2021-03-05T17:21:28Z", "commit": {"oid": "acb16ff62bcb4f2e03e9d8c2c8f87ff7c1d301c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1046, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}