{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjE3Nzc3", "number": 787, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Nzo1MVrODuEFPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0NTowM1rODz3scA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NjI3OTY0OnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Nzo1MVrOF_2r3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODo1MjozM1rOF_5AiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg==", "bodyText": "I will have to say that a more robust solution here is to push this functionality into the function descriptor mechanism.  That way we can catch any function that might have a regex......", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402500572", "createdAt": "2020-04-02T17:47:51Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMzY3MA==", "bodyText": "The JexlArgumentDescriptor already has a regexArguments() method to determine if the literal arguments are to be treated as regexes.  We should use that along with fieldsForNormalization to determine which arguments to test.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402503670", "createdAt": "2020-04-02T17:53:04Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, "originalCommit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxOTU2NQ==", "bodyText": "And then we can apply this to all functions that return true for regexArguments().....", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402519565", "createdAt": "2020-04-02T18:19:58Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, "originalCommit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUyMzQ3Mg==", "bodyText": "I took a look at some of the existing descriptors and see where you're going with this. Should have an update for this pr tomorow sometime", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402523472", "createdAt": "2020-04-02T18:26:52Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, "originalCommit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUzODYzMw==", "bodyText": "An example of how to do this can be found in the datawave.query.jexl.visitors.FunctionNormalizationRebuildingVisitor.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402538633", "createdAt": "2020-04-02T18:52:33Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, "originalCommit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQxODM4OnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo0OTozNlrOGAUBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0MjoxMlrOGIib7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ==", "bodyText": "Pretty sure this is the right place to put these constants, let me know if that needs to change.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402981239", "createdAt": "2020-04-03T12:49:36Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String OPTIONS_FUNCTION = \"options\";\n     public static final String UNIQUE_FUNCTION = \"unique\";\n     public static final String GROUPBY_FUNCTION = \"groupby\";\n+    public static final String INCLUDE_FUNCTION = \"include\";\n+    public static final String EXCLUDE_FUNCTION = \"exclude\";\n     ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNTYxMg==", "bodyText": "These are EvaluationPhaseFilterFunctions, not QueryFunctions", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411605612", "createdAt": "2020-04-20T18:41:32Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String OPTIONS_FUNCTION = \"options\";\n     public static final String UNIQUE_FUNCTION = \"unique\";\n     public static final String GROUPBY_FUNCTION = \"groupby\";\n+    public static final String INCLUDE_FUNCTION = \"include\";\n+    public static final String EXCLUDE_FUNCTION = \"exclude\";\n     ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ=="}, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNTk5OA==", "bodyText": "and the functions are called includeRegex and excludeRegex", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411605998", "createdAt": "2020-04-20T18:42:12Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String OPTIONS_FUNCTION = \"options\";\n     public static final String UNIQUE_FUNCTION = \"unique\";\n     public static final String GROUPBY_FUNCTION = \"groupby\";\n+    public static final String INCLUDE_FUNCTION = \"include\";\n+    public static final String EXCLUDE_FUNCTION = \"exclude\";\n     ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ=="}, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTQyMjMyOnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1MDo0NlrOGAUD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0ODozN1rOGIiraw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTg4MQ==", "bodyText": "Tried to scope down the number of patterns that get parsed. Might not be necessary.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402981881", "createdAt": "2020-04-03T12:50:46Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +59,65 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n-        Object literalValue;\n+        parseAndPutPattern(node);\n+        return data;\n+    }\n+    \n+    /**\n+     * Visit an ASTFunctionNode to catch cases like #INCLUDE or #EXCLUDE that accept a regex as an argument\n+     * \n+     * @param node\n+     * @param data\n+     * @return\n+     */\n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n         \n-        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n-        try {\n-            literalValue = JexlASTHelper.getLiteralValue(node);\n-        } catch (NoSuchElementException e) {\n-            return data;\n+        // Should pull back an EvaluationPhaseFilterFunctionsDescriptor\n+        JexlArgumentDescriptor descriptor = JexlFunctionArgumentDescriptorFactory.F.getArgumentDescriptor(node);\n+        if (descriptor == null) {\n+            throw new IllegalStateException(\"Could not get descriptor for ASTFunctionNode\");\n         }\n         \n+        if (descriptor.regexArguments()) {\n+            // Extract the args for this function\n+            FunctionJexlNodeVisitor functionVisitor = new FunctionJexlNodeVisitor();\n+            functionVisitor.visit(node, null);\n+            List<JexlNode> args = functionVisitor.args();\n+            for (JexlNode arg : args) {\n+                // Only take the literals\n+                if (arg instanceof ASTStringLiteral) {\n+                    parseAndPutPattern(arg);\n+                }\n+            }\n+        }\n+        // Do not descend to children, the ValidPatternVisitor views a function node as a leaf node.\n+        return data;\n+    }\n+    \n+    /**\n+     * Parse a literal value and put into the pattern cache if it does not exist.\n+     *\n+     * @param node\n+     */\n+    public void parseAndPutPattern(JexlNode node) {\n+        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n+        Object literalValue = JexlASTHelper.getLiteralValue(node);\n         if (literalValue != null && String.class.equals(literalValue.getClass())) {\n             String literalString = (String) literalValue;\n-            if (patternCache.containsKey(literalString)) {\n-                return data;\n+            // Only parse literals that contain a regex char\n+            if (StringUtils.containsAny(literalString, \"?.*^+-_[](){}\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTk2Mw==", "bodyText": "I don't think this is necessary, and in fact could be problematic.  A Regex is not guaranteed to contain one of those characters.  Perhaps a better way to go is if the literal contains only alphanumeric characters.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411609963", "createdAt": "2020-04-20T18:48:37Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +59,65 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n-        Object literalValue;\n+        parseAndPutPattern(node);\n+        return data;\n+    }\n+    \n+    /**\n+     * Visit an ASTFunctionNode to catch cases like #INCLUDE or #EXCLUDE that accept a regex as an argument\n+     * \n+     * @param node\n+     * @param data\n+     * @return\n+     */\n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n         \n-        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n-        try {\n-            literalValue = JexlASTHelper.getLiteralValue(node);\n-        } catch (NoSuchElementException e) {\n-            return data;\n+        // Should pull back an EvaluationPhaseFilterFunctionsDescriptor\n+        JexlArgumentDescriptor descriptor = JexlFunctionArgumentDescriptorFactory.F.getArgumentDescriptor(node);\n+        if (descriptor == null) {\n+            throw new IllegalStateException(\"Could not get descriptor for ASTFunctionNode\");\n         }\n         \n+        if (descriptor.regexArguments()) {\n+            // Extract the args for this function\n+            FunctionJexlNodeVisitor functionVisitor = new FunctionJexlNodeVisitor();\n+            functionVisitor.visit(node, null);\n+            List<JexlNode> args = functionVisitor.args();\n+            for (JexlNode arg : args) {\n+                // Only take the literals\n+                if (arg instanceof ASTStringLiteral) {\n+                    parseAndPutPattern(arg);\n+                }\n+            }\n+        }\n+        // Do not descend to children, the ValidPatternVisitor views a function node as a leaf node.\n+        return data;\n+    }\n+    \n+    /**\n+     * Parse a literal value and put into the pattern cache if it does not exist.\n+     *\n+     * @param node\n+     */\n+    public void parseAndPutPattern(JexlNode node) {\n+        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n+        Object literalValue = JexlASTHelper.getLiteralValue(node);\n         if (literalValue != null && String.class.equals(literalValue.getClass())) {\n             String literalString = (String) literalValue;\n-            if (patternCache.containsKey(literalString)) {\n-                return data;\n+            // Only parse literals that contain a regex char\n+            if (StringUtils.containsAny(literalString, \"?.*^+-_[](){}\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTg4MQ=="}, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzE1MzcxOnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctionsDescriptor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0MjoyNFrOGIicfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowNTo1MlrOGMdehA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNjE0MQ==", "bodyText": "Wrong functions descriptor.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411606141", "createdAt": "2020-04-20T18:42:24Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctionsDescriptor.java", "diffHunk": "@@ -138,6 +138,10 @@ private static void verify(String name, int numArgs) {\n             if (numArgs == 0) {\n                 throw new IllegalArgumentException(\"Expected at least one argument to the \" + name + \" function\");\n             }\n+        } else if (name.equals(QueryFunctions.INCLUDE_FUNCTION) || name.equals(QueryFunctions.EXCLUDE_FUNCTION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxOTA0NA==", "bodyText": "Got it.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r415719044", "createdAt": "2020-04-27T11:05:52Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctionsDescriptor.java", "diffHunk": "@@ -138,6 +138,10 @@ private static void verify(String name, int numArgs) {\n             if (numArgs == 0) {\n                 throw new IllegalArgumentException(\"Expected at least one argument to the \" + name + \" function\");\n             }\n+        } else if (name.equals(QueryFunctions.INCLUDE_FUNCTION) || name.equals(QueryFunctions.EXCLUDE_FUNCTION)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNjE0MQ=="}, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzE2NDY0OnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/language/functions/jexl/Exclude.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0NTowM1rOGIii-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMTowNToyM1rOGMddag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg==", "bodyText": "I would leave this the way it was.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411607802", "createdAt": "2020-04-20T18:45:03Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/language/functions/jexl/Exclude.java", "diffHunk": "@@ -1,11 +1,12 @@\n package datawave.query.language.functions.jexl;\n \n+import datawave.query.jexl.functions.QueryFunctions;\n import datawave.query.language.functions.QueryFunction;\n import datawave.query.search.WildcardFieldedFilter;\n \n public class Exclude extends AbstractEvaluationPhaseFunction {\n     public Exclude() {\n-        super(\"exclude\");\n+        super(QueryFunctions.EXCLUDE_FUNCTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzk1MQ==", "bodyText": "and ditto for the other language function classes", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411607951", "createdAt": "2020-04-20T18:45:18Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/language/functions/jexl/Exclude.java", "diffHunk": "@@ -1,11 +1,12 @@\n package datawave.query.language.functions.jexl;\n \n+import datawave.query.jexl.functions.QueryFunctions;\n import datawave.query.language.functions.QueryFunction;\n import datawave.query.search.WildcardFieldedFilter;\n \n public class Exclude extends AbstractEvaluationPhaseFunction {\n     public Exclude() {\n-        super(\"exclude\");\n+        super(QueryFunctions.EXCLUDE_FUNCTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg=="}, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcxODc2Mg==", "bodyText": "I'll revert that to the way it was", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r415718762", "createdAt": "2020-04-27T11:05:23Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/language/functions/jexl/Exclude.java", "diffHunk": "@@ -1,11 +1,12 @@\n package datawave.query.language.functions.jexl;\n \n+import datawave.query.jexl.functions.QueryFunctions;\n import datawave.query.language.functions.QueryFunction;\n import datawave.query.search.WildcardFieldedFilter;\n \n public class Exclude extends AbstractEvaluationPhaseFunction {\n     public Exclude() {\n-        super(\"exclude\");\n+        super(QueryFunctions.EXCLUDE_FUNCTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg=="}, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4517, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}