{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Njg1MTIy", "number": 1014, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozMzoyMVrOFFLBOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTo1OTo1OFrOFFq4ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTY3NzM3OnYy", "diffSide": "RIGHT", "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozMzoyMVrOIFjCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoyMDoxOVrOIGNlgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4Nzc3NQ==", "bodyText": "Does this allow us to remove the infinispan dependency from the POM?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1014#discussion_r542687775", "createdAt": "2020-12-14T19:33:21Z", "author": {"login": "keith-ratcliffe"}, "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "diffHunk": "@@ -7,7 +7,11 @@\n import javax.interceptor.Interceptor;\n \n import datawave.security.authorization.DatawavePrincipal;\n-import org.infinispan.commons.util.Base64;\n+import org.apache.commons.codec.binary.Base64;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fd2808e25d35d4c7197bfef926482e03ea4add"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4MTc0MA==", "bodyText": "No - it looks like infinispan is used elsewhere.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1014#discussion_r543381740", "createdAt": "2020-12-15T14:17:45Z", "author": {"login": "billoley"}, "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "diffHunk": "@@ -7,7 +7,11 @@\n import javax.interceptor.Interceptor;\n \n import datawave.security.authorization.DatawavePrincipal;\n-import org.infinispan.commons.util.Base64;\n+import org.apache.commons.codec.binary.Base64;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4Nzc3NQ=="}, "originalCommit": {"oid": "f0fd2808e25d35d4c7197bfef926482e03ea4add"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4NDk2Mw==", "bodyText": "Looks like we can probably delete it from the map-reduce-embedded pom", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1014#discussion_r543384963", "createdAt": "2020-12-15T14:20:19Z", "author": {"login": "billoley"}, "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "diffHunk": "@@ -7,7 +7,11 @@\n import javax.interceptor.Interceptor;\n \n import datawave.security.authorization.DatawavePrincipal;\n-import org.infinispan.commons.util.Base64;\n+import org.apache.commons.codec.binary.Base64;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY4Nzc3NQ=="}, "originalCommit": {"oid": "f0fd2808e25d35d4c7197bfef926482e03ea4add"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTcwNjc2OnYy", "diffSide": "RIGHT", "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxOTozNzo0OFrOIFjVKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxNzoxMFrOIGNVbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjY0OA==", "bodyText": "Try-with-resources instead?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1014#discussion_r542692648", "createdAt": "2020-12-14T19:37:48Z", "author": {"login": "keith-ratcliffe"}, "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "diffHunk": "@@ -31,8 +35,21 @@ public DatawavePrincipal produceCallerPrincipal() {\n     \n     private void initializeCallerPrincipal() {\n         String encodedCallerPrincipal = System.getProperty(\"caller.principal\");\n-        if (encodedCallerPrincipal == null)\n-            throw new IllegalStateException(\"System property caller.principal must be set to a serialized, gzip'd, base64 encoded principal.\");\n-        callerPrincipal = (DatawavePrincipal) Base64.decodeToObject(encodedCallerPrincipal);\n+        if (encodedCallerPrincipal == null) {\n+            throw new IllegalStateException(\"System property caller.principal must be set to a serialized, base64 encoded principal.\");\n+        }\n+        ByteArrayInputStream bais = new ByteArrayInputStream(Base64.decodeBase64(encodedCallerPrincipal));\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0fd2808e25d35d4c7197bfef926482e03ea4add"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4MDg0NQ==", "bodyText": "Updated to use try with resources", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1014#discussion_r543380845", "createdAt": "2020-12-15T14:17:10Z", "author": {"login": "billoley"}, "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "diffHunk": "@@ -31,8 +35,21 @@ public DatawavePrincipal produceCallerPrincipal() {\n     \n     private void initializeCallerPrincipal() {\n         String encodedCallerPrincipal = System.getProperty(\"caller.principal\");\n-        if (encodedCallerPrincipal == null)\n-            throw new IllegalStateException(\"System property caller.principal must be set to a serialized, gzip'd, base64 encoded principal.\");\n-        callerPrincipal = (DatawavePrincipal) Base64.decodeToObject(encodedCallerPrincipal);\n+        if (encodedCallerPrincipal == null) {\n+            throw new IllegalStateException(\"System property caller.principal must be set to a serialized, base64 encoded principal.\");\n+        }\n+        ByteArrayInputStream bais = new ByteArrayInputStream(Base64.decodeBase64(encodedCallerPrincipal));\n+        try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY5MjY0OA=="}, "originalCommit": {"oid": "f0fd2808e25d35d4c7197bfef926482e03ea4add"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDg5ODU5OnYy", "diffSide": "RIGHT", "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/BulkResultsJobConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTo1OTo1OFrOIGS2Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNTo1OTo1OFrOIGS2Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3MTEzNA==", "bodyText": "try-with-resources, same as above? Sorry, thought I'd flagged this one already...guess not", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1014#discussion_r543471134", "createdAt": "2020-12-15T15:59:58Z", "author": {"login": "keith-ratcliffe"}, "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/BulkResultsJobConfiguration.java", "diffHunk": "@@ -304,7 +306,21 @@ private void setupJob(Job job, Path jobDir, GenericQueryConfiguration queryConfi\n     }\n     \n     private String encodePrincipal(DatawavePrincipal principal) throws IOException {\n-        return Base64.encodeObject(principal, Base64.GZIP | Base64.DONT_BREAK_LINES);\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = null;\n+        try {\n+            oos = new ObjectOutputStream(baos);\n+            // create a copy because this DatawavePrincipal might be CDI injected and have a reference to Weld\n+            oos.writeObject(new DatawavePrincipal(principal.getProxiedUsers(), principal.getCreationTime()));\n+            return Base64.encodeBase64String(baos.toByteArray());\n+        } finally {\n+            if (oos != null) {\n+                oos.close();\n+            }\n+            if (baos != null) {\n+                baos.close();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76e89802d352e83b244c00d279c36af55e5a0c11"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4363, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}