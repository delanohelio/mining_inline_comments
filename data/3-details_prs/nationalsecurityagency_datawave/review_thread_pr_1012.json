{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5MzYwODQ3", "number": 1012, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxODoyNjo1MFrOFV0K1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxODoyNjo1MFrOFV0K1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NDE5MTU2OnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/EventDataQueryExpressionVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxODoyNjo1MFrOIee0Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNTowMTo0OVrOIfGqAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODgzMzExOQ==", "bodyText": "The following operations only execute if seenType is false. Additionally, fieldValues, fieldPatterns, and fieldRanges are initialized in the constructor, so the check for null is unecessary. Thus, this section can be simplified to:\nif(!seenTypes.contains(type)) {\n\t\n    // Check for value normalization\n    if(!fieldValues.isEmpty())\n        allNormalizedValues.addAll(normalizeValuesForType(type));\n\n    // Check for pattern normalization\n    if (!fieldPatterns.isEmpty())\n        allNormalizedPatterns.addAll(normalizePatternsForType(type));\n\n    // Check for range normalization\n    if(!fieldRanges.isEmpty())\n        allNormalizedRanges.addAll(normalizeRangesForType(type));\n\n    // Add this type to seen types.\n    seenTypes.add(type);\n}", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1012#discussion_r568833119", "createdAt": "2021-02-02T18:26:50Z", "author": {"login": "lbschanno"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/EventDataQueryExpressionVisitor.java", "diffHunk": "@@ -167,78 +182,43 @@ private boolean apply(Key key, boolean update) {\n                 final Set<Type> types = EventDataQueryExpressionVisitor.extractTypes(attributeFactory, keyFieldName, keyFieldValue, key);\n                 // always add the NoOpType to ensure the original value gets propagated through\n                 types.add(new NoOpType(keyFieldValue));\n-                final Set<Matcher> normalizedPatternMatchers = new HashSet<>();\n-                final Set<String> normalizedFieldValues = new HashSet<>();\n-                final Set<LiteralRange> normalizedRanges = new HashSet<>();\n+                \n                 for (Type type : types) {\n-                    // normalize all patterns\n-                    for (Pattern fieldPattern : fieldPatterns.keySet()) {\n-                        try {\n-                            String normalizedPattern = type.normalizeRegex(fieldPattern.toString());\n-                            if (normalizedPattern != null) {\n-                                normalizedPatternMatchers.add(Pattern.compile(normalizedPattern).matcher(EMPTY_STRING));\n-                            } else {\n-                                // can't normalize so add the original matcher\n-                                normalizedPatternMatchers.add(fieldPatterns.get(fieldPattern));\n-                            }\n-                        } catch (Exception e) {\n-                            // can't normalize this pattern, add the original matcher\n-                            normalizedPatternMatchers.add(fieldPatterns.get(fieldPattern));\n-                        }\n+                    \n+                    boolean seenType = seenTypes.contains(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dc78c547015963d6b55fe5b086e922ffa7657c4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ4NTgyNA==", "bodyText": "Good suggestion, implemented while incorporated while resolving merge conflicts from bounded range changes.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/1012#discussion_r569485824", "createdAt": "2021-02-03T15:01:49Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/EventDataQueryExpressionVisitor.java", "diffHunk": "@@ -167,78 +182,43 @@ private boolean apply(Key key, boolean update) {\n                 final Set<Type> types = EventDataQueryExpressionVisitor.extractTypes(attributeFactory, keyFieldName, keyFieldValue, key);\n                 // always add the NoOpType to ensure the original value gets propagated through\n                 types.add(new NoOpType(keyFieldValue));\n-                final Set<Matcher> normalizedPatternMatchers = new HashSet<>();\n-                final Set<String> normalizedFieldValues = new HashSet<>();\n-                final Set<LiteralRange> normalizedRanges = new HashSet<>();\n+                \n                 for (Type type : types) {\n-                    // normalize all patterns\n-                    for (Pattern fieldPattern : fieldPatterns.keySet()) {\n-                        try {\n-                            String normalizedPattern = type.normalizeRegex(fieldPattern.toString());\n-                            if (normalizedPattern != null) {\n-                                normalizedPatternMatchers.add(Pattern.compile(normalizedPattern).matcher(EMPTY_STRING));\n-                            } else {\n-                                // can't normalize so add the original matcher\n-                                normalizedPatternMatchers.add(fieldPatterns.get(fieldPattern));\n-                            }\n-                        } catch (Exception e) {\n-                            // can't normalize this pattern, add the original matcher\n-                            normalizedPatternMatchers.add(fieldPatterns.get(fieldPattern));\n-                        }\n+                    \n+                    boolean seenType = seenTypes.contains(type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODgzMzExOQ=="}, "originalCommit": {"oid": "5dc78c547015963d6b55fe5b086e922ffa7657c4"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4358, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}