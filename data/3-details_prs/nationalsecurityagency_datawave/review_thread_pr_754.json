{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MjkxNTk3", "number": 754, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo1MjozMVrODh4mbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoyODoyNlrODh5UiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODU2OTQzOnYy", "diffSide": "RIGHT", "path": "properties/default.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMzo1MjozMVrOFs3hYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNTowMToxNFrOFs5zEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5MTMzMA==", "bodyText": "It's an unspoken convention, but I had been ensuring that any property that starts with dw. was not filtered by maven and only supplied via the wildfly system properties defined in add-datawave-configuration.cli. This way we can be sure that nothing that is filtered by maven is baked in to the source itself--the substitutions are limited to things under web-services/deploy.\nI think if you just change this property to something like mapreduce.securitydomain.useJobCache here and in add-datawave-configuratoin.cli that would be sufficient to fix.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/754#discussion_r382591330", "createdAt": "2020-02-21T13:52:31Z", "author": {"login": "brianloss"}, "path": "properties/default.properties", "diffHunk": "@@ -341,6 +341,7 @@ bulkResults.job.tracker=localhost:8021\n bulkResults.http.port=http://localhost:8080\n bulkResults.hdfs.uri=hdfs://localhost:8020/\n bulkResults.hdfs.base.dir=/datawave/BulkResults\n+dw.mapreduce.securitydomain.useJobCache=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba3b3a544ce458f2dd633c78ccf2a206ce2d7c9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYyODYyNg==", "bodyText": "Thanks - change pushed to pull request thread", "url": "https://github.com/NationalSecurityAgency/datawave/pull/754#discussion_r382628626", "createdAt": "2020-02-21T15:01:14Z", "author": {"login": "billoley"}, "path": "properties/default.properties", "diffHunk": "@@ -341,6 +341,7 @@ bulkResults.job.tracker=localhost:8021\n bulkResults.http.port=http://localhost:8080\n bulkResults.hdfs.uri=hdfs://localhost:8020/\n bulkResults.hdfs.base.dir=/datawave/BulkResults\n+dw.mapreduce.securitydomain.useJobCache=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU5MTMzMA=="}, "originalCommit": {"oid": "8ba3b3a544ce458f2dd633c78ccf2a206ce2d7c9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODY4NzQ0OnYy", "diffSide": "RIGHT", "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoyODoyNlrOFs4p1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDoyODoyNlrOFs4p1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYwOTg3Nw==", "bodyText": "Not a big deal, but since this is an ApplicationScoped bean, I believe you could just do this initialization in a constructor and then you wouldn't need the lazy init code in produceCallerPrincipal().", "url": "https://github.com/NationalSecurityAgency/datawave/pull/754#discussion_r382609877", "createdAt": "2020-02-21T14:28:26Z", "author": {"login": "brianloss"}, "path": "web-services/map-reduce-embedded/src/main/java/datawave/security/system/EmbeddedCallerPrincipalProducer.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package datawave.security.system;\n+\n+import datawave.security.authorization.DatawavePrincipal;\n+import org.infinispan.commons.util.Base64;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Alternative;\n+import javax.enterprise.inject.Produces;\n+import javax.interceptor.Interceptor;\n+\n+/**\n+ * Caller principal producer supplied just for Embedded mode (e.g., inside of MapReduce jars). This archive should not be included for normal web applications.\n+ */\n+@Alternative\n+@Priority(Interceptor.Priority.APPLICATION)\n+@ApplicationScoped\n+public class EmbeddedCallerPrincipalProducer {\n+    private boolean initialized = false;\n+    private DatawavePrincipal callerPrincipal;\n+    \n+    @Produces\n+    @ServerPrincipal\n+    public DatawavePrincipal produceCallerPrincipal() {\n+        if (!initialized) {\n+            initializeCallerPrincipal();\n+            initialized = true;\n+        }\n+        return callerPrincipal;\n+    }\n+    \n+    private void initializeCallerPrincipal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba3b3a544ce458f2dd633c78ccf2a206ce2d7c9"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}