{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjE3Nzc3", "number": 787, "title": "ValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions.", "bodyText": "Addresses #786", "createdAt": "2020-03-20T16:10:48Z", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787", "merged": true, "mergeCommit": {"oid": "6fe183a20091ceacdb7a2980a8598e28ce8a5750"}, "closed": true, "closedAt": "2020-05-14T11:40:26Z", "author": {"login": "apmoriarty"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPiyoIgH2gAyMzkxNjE3Nzc3OjcyN2NiN2QwYmU3MzE2OWVkNzdmNjhlMGM3Y2Q0OTg4YzIzYjI0MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchLKLDgH2gAyMzkxNjE3Nzc3OmM0ZGRlMjMxYmUxNmQxZDdhM2Q1ZDNlMDBjY2ZiMmY3MjA1NmY4ODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "727cb7d0be73169ed77f68e0c7cd4988c23b2409", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/727cb7d0be73169ed77f68e0c7cd4988c23b2409", "committedDate": "2020-03-20T16:07:01Z", "message": "ValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTA4MTcx", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-380508171", "createdAt": "2020-03-24T16:53:00Z", "commit": {"oid": "727cb7d0be73169ed77f68e0c7cd4988c23b2409"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17fd3e77ce8a8e1592b9af1a60374375dc405a8f", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/17fd3e77ce8a8e1592b9af1a60374375dc405a8f", "committedDate": "2020-03-30T16:43:44Z", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/ecaea0e1d6bb95e534310194b0dc51f1f0135bfe", "committedDate": "2020-04-02T13:48:21Z", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjI2Njcw", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-386626670", "createdAt": "2020-04-02T17:08:24Z", "commit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjU5NTQ2", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-386659546", "createdAt": "2020-04-02T17:47:51Z", "commit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Nzo1MVrOF_2r3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo0Nzo1MVrOF_2r3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg==", "bodyText": "I will have to say that a more robust solution here is to push this functionality into the function descriptor mechanism.  That way we can catch any function that might have a regex......", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402500572", "createdAt": "2020-04-02T17:47:51Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjYzMzEz", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-386663313", "createdAt": "2020-04-02T17:53:04Z", "commit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo1MzowNFrOF_239g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNzo1MzowNFrOF_239g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMzY3MA==", "bodyText": "The JexlArgumentDescriptor already has a regexArguments() method to determine if the literal arguments are to be treated as regexes.  We should use that along with fieldsForNormalization to determine which arguments to test.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402503670", "createdAt": "2020-04-02T17:53:04Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +56,73 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n+        parseAndPutLiteral(node);\n+        return data;\n+    }\n+    \n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n+        \n+        if (node.jjtGetNumChildren() >= 4) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUwMDU3Mg=="}, "originalCommit": {"oid": "ecaea0e1d6bb95e534310194b0dc51f1f0135bfe"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1a452d9207831004d03a274647efa87888c0959", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/a1a452d9207831004d03a274647efa87888c0959", "committedDate": "2020-04-03T12:34:24Z", "message": "Address PR comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjI0NTA5", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-387224509", "createdAt": "2020-04-03T12:49:36Z", "commit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo0OTozNlrOGAUBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo0OTozNlrOGAUBdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ==", "bodyText": "Pretty sure this is the right place to put these constants, let me know if that needs to change.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402981239", "createdAt": "2020-04-03T12:49:36Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String OPTIONS_FUNCTION = \"options\";\n     public static final String UNIQUE_FUNCTION = \"unique\";\n     public static final String GROUPBY_FUNCTION = \"groupby\";\n+    public static final String INCLUDE_FUNCTION = \"include\";\n+    public static final String EXCLUDE_FUNCTION = \"exclude\";\n     ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3MjI1MzU2", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-387225356", "createdAt": "2020-04-03T12:50:45Z", "commit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1MDo0NlrOGAUD-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMjo1MDo0NlrOGAUD-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTg4MQ==", "bodyText": "Tried to scope down the number of patterns that get parsed. Might not be necessary.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r402981881", "createdAt": "2020-04-03T12:50:46Z", "author": {"login": "apmoriarty"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +59,65 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n-        Object literalValue;\n+        parseAndPutPattern(node);\n+        return data;\n+    }\n+    \n+    /**\n+     * Visit an ASTFunctionNode to catch cases like #INCLUDE or #EXCLUDE that accept a regex as an argument\n+     * \n+     * @param node\n+     * @param data\n+     * @return\n+     */\n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n         \n-        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n-        try {\n-            literalValue = JexlASTHelper.getLiteralValue(node);\n-        } catch (NoSuchElementException e) {\n-            return data;\n+        // Should pull back an EvaluationPhaseFilterFunctionsDescriptor\n+        JexlArgumentDescriptor descriptor = JexlFunctionArgumentDescriptorFactory.F.getArgumentDescriptor(node);\n+        if (descriptor == null) {\n+            throw new IllegalStateException(\"Could not get descriptor for ASTFunctionNode\");\n         }\n         \n+        if (descriptor.regexArguments()) {\n+            // Extract the args for this function\n+            FunctionJexlNodeVisitor functionVisitor = new FunctionJexlNodeVisitor();\n+            functionVisitor.visit(node, null);\n+            List<JexlNode> args = functionVisitor.args();\n+            for (JexlNode arg : args) {\n+                // Only take the literals\n+                if (arg instanceof ASTStringLiteral) {\n+                    parseAndPutPattern(arg);\n+                }\n+            }\n+        }\n+        // Do not descend to children, the ValidPatternVisitor views a function node as a leaf node.\n+        return data;\n+    }\n+    \n+    /**\n+     * Parse a literal value and put into the pattern cache if it does not exist.\n+     *\n+     * @param node\n+     */\n+    public void parseAndPutPattern(JexlNode node) {\n+        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n+        Object literalValue = JexlASTHelper.getLiteralValue(node);\n         if (literalValue != null && String.class.equals(literalValue.getClass())) {\n             String literalString = (String) literalValue;\n-            if (patternCache.containsKey(literalString)) {\n-                return data;\n+            // Only parse literals that contain a regex char\n+            if (StringUtils.containsAny(literalString, \"?.*^+-_[](){}\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69", "author": {"user": {"login": "brianloss", "name": "Brian Loss"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/7fab0fec7738b6d183dd14d5912617525ebc8f69", "committedDate": "2020-04-03T14:16:03Z", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NzE1MjY2", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-396715266", "createdAt": "2020-04-20T18:41:32Z", "commit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0MTozMlrOGIiabA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODo0ODozN1rOGIiraw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNTYxMg==", "bodyText": "These are EvaluationPhaseFilterFunctions, not QueryFunctions", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411605612", "createdAt": "2020-04-20T18:41:32Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String OPTIONS_FUNCTION = \"options\";\n     public static final String UNIQUE_FUNCTION = \"unique\";\n     public static final String GROUPBY_FUNCTION = \"groupby\";\n+    public static final String INCLUDE_FUNCTION = \"include\";\n+    public static final String EXCLUDE_FUNCTION = \"exclude\";\n     ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ=="}, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNTk5OA==", "bodyText": "and the functions are called includeRegex and excludeRegex", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411605998", "createdAt": "2020-04-20T18:42:12Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctions.java", "diffHunk": "@@ -22,6 +22,8 @@\n     public static final String OPTIONS_FUNCTION = \"options\";\n     public static final String UNIQUE_FUNCTION = \"unique\";\n     public static final String GROUPBY_FUNCTION = \"groupby\";\n+    public static final String INCLUDE_FUNCTION = \"include\";\n+    public static final String EXCLUDE_FUNCTION = \"exclude\";\n     ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTIzOQ=="}, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNjE0MQ==", "bodyText": "Wrong functions descriptor.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411606141", "createdAt": "2020-04-20T18:42:24Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/functions/QueryFunctionsDescriptor.java", "diffHunk": "@@ -138,6 +138,10 @@ private static void verify(String name, int numArgs) {\n             if (numArgs == 0) {\n                 throw new IllegalArgumentException(\"Expected at least one argument to the \" + name + \" function\");\n             }\n+        } else if (name.equals(QueryFunctions.INCLUDE_FUNCTION) || name.equals(QueryFunctions.EXCLUDE_FUNCTION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg==", "bodyText": "I would leave this the way it was.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411607802", "createdAt": "2020-04-20T18:45:03Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/language/functions/jexl/Exclude.java", "diffHunk": "@@ -1,11 +1,12 @@\n package datawave.query.language.functions.jexl;\n \n+import datawave.query.jexl.functions.QueryFunctions;\n import datawave.query.language.functions.QueryFunction;\n import datawave.query.search.WildcardFieldedFilter;\n \n public class Exclude extends AbstractEvaluationPhaseFunction {\n     public Exclude() {\n-        super(\"exclude\");\n+        super(QueryFunctions.EXCLUDE_FUNCTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzk1MQ==", "bodyText": "and ditto for the other language function classes", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411607951", "createdAt": "2020-04-20T18:45:18Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/language/functions/jexl/Exclude.java", "diffHunk": "@@ -1,11 +1,12 @@\n package datawave.query.language.functions.jexl;\n \n+import datawave.query.jexl.functions.QueryFunctions;\n import datawave.query.language.functions.QueryFunction;\n import datawave.query.search.WildcardFieldedFilter;\n \n public class Exclude extends AbstractEvaluationPhaseFunction {\n     public Exclude() {\n-        super(\"exclude\");\n+        super(QueryFunctions.EXCLUDE_FUNCTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwNzgwMg=="}, "originalCommit": {"oid": "7fab0fec7738b6d183dd14d5912617525ebc8f69"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTYwOTk2Mw==", "bodyText": "I don't think this is necessary, and in fact could be problematic.  A Regex is not guaranteed to contain one of those characters.  Perhaps a better way to go is if the literal contains only alphanumeric characters.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#discussion_r411609963", "createdAt": "2020-04-20T18:48:37Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +59,65 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n-        Object literalValue;\n+        parseAndPutPattern(node);\n+        return data;\n+    }\n+    \n+    /**\n+     * Visit an ASTFunctionNode to catch cases like #INCLUDE or #EXCLUDE that accept a regex as an argument\n+     * \n+     * @param node\n+     * @param data\n+     * @return\n+     */\n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n         \n-        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n-        try {\n-            literalValue = JexlASTHelper.getLiteralValue(node);\n-        } catch (NoSuchElementException e) {\n-            return data;\n+        // Should pull back an EvaluationPhaseFilterFunctionsDescriptor\n+        JexlArgumentDescriptor descriptor = JexlFunctionArgumentDescriptorFactory.F.getArgumentDescriptor(node);\n+        if (descriptor == null) {\n+            throw new IllegalStateException(\"Could not get descriptor for ASTFunctionNode\");\n         }\n         \n+        if (descriptor.regexArguments()) {\n+            // Extract the args for this function\n+            FunctionJexlNodeVisitor functionVisitor = new FunctionJexlNodeVisitor();\n+            functionVisitor.visit(node, null);\n+            List<JexlNode> args = functionVisitor.args();\n+            for (JexlNode arg : args) {\n+                // Only take the literals\n+                if (arg instanceof ASTStringLiteral) {\n+                    parseAndPutPattern(arg);\n+                }\n+            }\n+        }\n+        // Do not descend to children, the ValidPatternVisitor views a function node as a leaf node.\n+        return data;\n+    }\n+    \n+    /**\n+     * Parse a literal value and put into the pattern cache if it does not exist.\n+     *\n+     * @param node\n+     */\n+    public void parseAndPutPattern(JexlNode node) {\n+        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n+        Object literalValue = JexlASTHelper.getLiteralValue(node);\n         if (literalValue != null && String.class.equals(literalValue.getClass())) {\n             String literalString = (String) literalValue;\n-            if (patternCache.containsKey(literalString)) {\n-                return data;\n+            // Only parse literals that contain a regex char\n+            if (StringUtils.containsAny(literalString, \"?.*^+-_[](){}\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjk4MTg4MQ=="}, "originalCommit": {"oid": "a1a452d9207831004d03a274647efa87888c0959"}, "originalPosition": 120}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e974537d9a65a0b3b852c3c26a093e9fab4f31d2", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/e974537d9a65a0b3b852c3c26a093e9fab4f31d2", "committedDate": "2020-04-27T11:04:31Z", "message": "Address PR comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21b7ef85ca58edac4f2d11788be9b38922426c25", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/21b7ef85ca58edac4f2d11788be9b38922426c25", "committedDate": "2020-04-27T15:07:07Z", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Nzg0ODAx", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-406784801", "createdAt": "2020-05-06T16:29:14Z", "commit": {"oid": "21b7ef85ca58edac4f2d11788be9b38922426c25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c84bdf03c16dda41edaed20157881452bf6088d8", "author": {"user": {"login": "ivakegg", "name": "Ivan Bella"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/c84bdf03c16dda41edaed20157881452bf6088d8", "committedDate": "2020-05-06T16:29:22Z", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33ac86ef0fcad99399341805218b523a6368e1c2", "author": {"user": {"login": "ivakegg", "name": "Ivan Bella"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/33ac86ef0fcad99399341805218b523a6368e1c2", "committedDate": "2020-05-06T17:23:28Z", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njk1MTMy", "url": "https://github.com/NationalSecurityAgency/datawave/pull/787#pullrequestreview-408695132", "createdAt": "2020-05-10T00:48:21Z", "commit": {"oid": "33ac86ef0fcad99399341805218b523a6368e1c2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4dde231be16d1d7a3d5d3e00ccfb2f72056f888", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/c4dde231be16d1d7a3d5d3e00ccfb2f72056f888", "committedDate": "2020-05-14T10:45:39Z", "message": "Merge branch 'master' into task/ValidPatternVisitor_checkFunctions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1175, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}