{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDEzNjUx", "number": 789, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNDo1M1rODqavGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyMjo1N1rODqj2mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA0ODI0OnYy", "diffSide": "RIGHT", "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNDo1M1rOF6JpJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowNDo1M1rOF6JpJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUxOTcxNw==", "bodyText": "Not required, but you can simplify this quite a bit with streams...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    boolean include = true;\n          \n          \n            \n                                    Iterator<Pattern> patternItr = patterns.iterator();\n          \n          \n            \n                                    while (patternItr.hasNext() && include == true) {\n          \n          \n            \n                                        Pattern p = patternItr.next();\n          \n          \n            \n                                        if (p.matcher(zipEntry.getName()).matches()) {\n          \n          \n            \n                                            include = false;\n          \n          \n            \n                                        }\n          \n          \n            \n                                    }\n          \n          \n            \n                                    if (include) {\n          \n          \n            \n                                    final String entryName = zipEntry.getName();\n          \n          \n            \n                                    if (patterns.stream().noneMatch(p -> p.matcher(entryName).matches())) {", "url": "https://github.com/NationalSecurityAgency/datawave/pull/789#discussion_r396519717", "createdAt": "2020-03-23T15:04:53Z", "author": {"login": "brianloss"}, "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "diffHunk": "@@ -302,6 +316,40 @@ protected void prepareClasspath(String jobId, Job job, Path jobDir) throws Excep\n         exportSystemProperties(jobId, job, fs, classpath);\n     }\n     \n+    private File filterJar(File source, List<Pattern> patterns) {\n+        File f = null;\n+        try {\n+            f = File.createTempFile(source.getName() + \".\", \"\");\n+            try (FileOutputStream fos = new FileOutputStream(f); ZipOutputStream zipOutputStream = new ZipOutputStream(fos)) {\n+                try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source))) {\n+                    for (ZipEntry zipEntry = zipInputStream.getNextEntry(); zipEntry != null; zipEntry = zipInputStream.getNextEntry()) {\n+                        boolean include = true;\n+                        Iterator<Pattern> patternItr = patterns.iterator();\n+                        while (patternItr.hasNext() && include == true) {\n+                            Pattern p = patternItr.next();\n+                            if (p.matcher(zipEntry.getName()).matches()) {\n+                                include = false;\n+                            }\n+                        }\n+                        if (include) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc424506498cddc3ccdbba84104e502fdb3da79"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODA2MjI5OnYy", "diffSide": "RIGHT", "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTowODowM1rOF6JyDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoxNTo1NFrOF6NAkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTk5OQ==", "bodyText": "Another way...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        byte[] buffer = new byte[2048];\n          \n          \n            \n                                        int len;\n          \n          \n            \n                                        while ((len = zipInputStream.read(buffer)) > 0) {\n          \n          \n            \n                                            zipOutputStream.write(buffer, 0, len);\n          \n          \n            \n                                        }\n          \n          \n            \n                                        ByteStreams.copy(zipInputStream, zipOutputStream);", "url": "https://github.com/NationalSecurityAgency/datawave/pull/789#discussion_r396521999", "createdAt": "2020-03-23T15:08:03Z", "author": {"login": "brianloss"}, "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "diffHunk": "@@ -302,6 +316,40 @@ protected void prepareClasspath(String jobId, Job job, Path jobDir) throws Excep\n         exportSystemProperties(jobId, job, fs, classpath);\n     }\n     \n+    private File filterJar(File source, List<Pattern> patterns) {\n+        File f = null;\n+        try {\n+            f = File.createTempFile(source.getName() + \".\", \"\");\n+            try (FileOutputStream fos = new FileOutputStream(f); ZipOutputStream zipOutputStream = new ZipOutputStream(fos)) {\n+                try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source))) {\n+                    for (ZipEntry zipEntry = zipInputStream.getNextEntry(); zipEntry != null; zipEntry = zipInputStream.getNextEntry()) {\n+                        boolean include = true;\n+                        Iterator<Pattern> patternItr = patterns.iterator();\n+                        while (patternItr.hasNext() && include == true) {\n+                            Pattern p = patternItr.next();\n+                            if (p.matcher(zipEntry.getName()).matches()) {\n+                                include = false;\n+                            }\n+                        }\n+                        if (include) {\n+                            zipOutputStream.putNextEntry(zipEntry);\n+                            byte[] buffer = new byte[2048];\n+                            int len;\n+                            while ((len = zipInputStream.read(buffer)) > 0) {\n+                                zipOutputStream.write(buffer, 0, len);\n+                            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dc424506498cddc3ccdbba84104e502fdb3da79"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NDA4Ng==", "bodyText": "Thanks for the suggestions.  This way is much cleaner.  It took me a while to figure out the Zip(Input/Output)Stream semantics and I didn't circle back to clean it up.\nOh the irony that we are using a guava class in the wildfly jvm to remove the wildfly classes from a shaded jar.  I combined both suggestions and pushed a commit.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/789#discussion_r396574086", "createdAt": "2020-03-23T16:14:53Z", "author": {"login": "billoley"}, "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "diffHunk": "@@ -302,6 +316,40 @@ protected void prepareClasspath(String jobId, Job job, Path jobDir) throws Excep\n         exportSystemProperties(jobId, job, fs, classpath);\n     }\n     \n+    private File filterJar(File source, List<Pattern> patterns) {\n+        File f = null;\n+        try {\n+            f = File.createTempFile(source.getName() + \".\", \"\");\n+            try (FileOutputStream fos = new FileOutputStream(f); ZipOutputStream zipOutputStream = new ZipOutputStream(fos)) {\n+                try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source))) {\n+                    for (ZipEntry zipEntry = zipInputStream.getNextEntry(); zipEntry != null; zipEntry = zipInputStream.getNextEntry()) {\n+                        boolean include = true;\n+                        Iterator<Pattern> patternItr = patterns.iterator();\n+                        while (patternItr.hasNext() && include == true) {\n+                            Pattern p = patternItr.next();\n+                            if (p.matcher(zipEntry.getName()).matches()) {\n+                                include = false;\n+                            }\n+                        }\n+                        if (include) {\n+                            zipOutputStream.putNextEntry(zipEntry);\n+                            byte[] buffer = new byte[2048];\n+                            int len;\n+                            while ((len = zipInputStream.read(buffer)) > 0) {\n+                                zipOutputStream.write(buffer, 0, len);\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTk5OQ=="}, "originalCommit": {"oid": "1dc424506498cddc3ccdbba84104e502fdb3da79"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3NDg2NQ==", "bodyText": "Figured you'd appreciate that. ;)", "url": "https://github.com/NationalSecurityAgency/datawave/pull/789#discussion_r396574865", "createdAt": "2020-03-23T16:15:54Z", "author": {"login": "brianloss"}, "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "diffHunk": "@@ -302,6 +316,40 @@ protected void prepareClasspath(String jobId, Job job, Path jobDir) throws Excep\n         exportSystemProperties(jobId, job, fs, classpath);\n     }\n     \n+    private File filterJar(File source, List<Pattern> patterns) {\n+        File f = null;\n+        try {\n+            f = File.createTempFile(source.getName() + \".\", \"\");\n+            try (FileOutputStream fos = new FileOutputStream(f); ZipOutputStream zipOutputStream = new ZipOutputStream(fos)) {\n+                try (ZipInputStream zipInputStream = new ZipInputStream(new FileInputStream(source))) {\n+                    for (ZipEntry zipEntry = zipInputStream.getNextEntry(); zipEntry != null; zipEntry = zipInputStream.getNextEntry()) {\n+                        boolean include = true;\n+                        Iterator<Pattern> patternItr = patterns.iterator();\n+                        while (patternItr.hasNext() && include == true) {\n+                            Pattern p = patternItr.next();\n+                            if (p.matcher(zipEntry.getName()).matches()) {\n+                                include = false;\n+                            }\n+                        }\n+                        if (include) {\n+                            zipOutputStream.putNextEntry(zipEntry);\n+                            byte[] buffer = new byte[2048];\n+                            int len;\n+                            while ((len = zipInputStream.read(buffer)) > 0) {\n+                                zipOutputStream.write(buffer, 0, len);\n+                            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUyMTk5OQ=="}, "originalCommit": {"oid": "1dc424506498cddc3ccdbba84104e502fdb3da79"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTU0MjAyOnYy", "diffSide": "RIGHT", "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyMjo1N1rOF6YniA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjowMDo1MFrOF6ZsqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NTA2NA==", "bodyText": "ugh, but ok for now I guess....", "url": "https://github.com/NationalSecurityAgency/datawave/pull/789#discussion_r396765064", "createdAt": "2020-03-23T21:22:57Z", "author": {"login": "ivakegg"}, "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "diffHunk": "@@ -284,7 +288,17 @@ protected void prepareClasspath(String jobId, Job job, Path jobDir) throws Excep\n         File[] jarFiles = libDir.listFiles(jarFilter);\n         if (jarFiles != null) {\n             for (File jar : jarFiles) {\n-                addSingleFile(jar, new Path(classpath, jar.getName()), jobId, job, fs);\n+                // remove guava classes from jboss-client.jar\n+                if (jar.getName().equals(\"jboss-client.jar\")) {\n+                    List<Pattern> patterns = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53bee4e8e0291ab1394996861c420d318244fde7"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc4Mjc2MQ==", "bodyText": "I know, but the alternative is storing a modified version of that file in our version control.  That's not great either.  The dependency is needed for our MapReduce jobs to run, but because of the inability to order the user classpath to the job we have to eliminate the newer guava classes that are shaded into that jar.\nI considered adding configuration to take care of this (which jar to transfer, which regexes to filter out).  I can do that later.  The java would be cleaner at least.   I ran out of time at the end of the week and this will work for now.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/789#discussion_r396782761", "createdAt": "2020-03-23T22:00:50Z", "author": {"login": "billoley"}, "path": "web-services/map-reduce/src/main/java/datawave/webservice/mr/configuration/MapReduceJobConfiguration.java", "diffHunk": "@@ -284,7 +288,17 @@ protected void prepareClasspath(String jobId, Job job, Path jobDir) throws Excep\n         File[] jarFiles = libDir.listFiles(jarFilter);\n         if (jarFiles != null) {\n             for (File jar : jarFiles) {\n-                addSingleFile(jar, new Path(classpath, jar.getName()), jobId, job, fs);\n+                // remove guava classes from jboss-client.jar\n+                if (jar.getName().equals(\"jboss-client.jar\")) {\n+                    List<Pattern> patterns = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NTA2NA=="}, "originalCommit": {"oid": "53bee4e8e0291ab1394996861c420d318244fde7"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}