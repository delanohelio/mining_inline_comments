{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTk3ODQ2", "number": 954, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMToxMDowN1rOEzicBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMToxMDowN1rOEzicBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNDc3MDYzOnYy", "diffSide": "RIGHT", "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/AllTermsIndexedVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMToxMDowN1rOHq0Gng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNzowNDoxOFrOHs4VAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY1NTkwMg==", "bodyText": "This method is essentially the same as the copy method in the base RebuildingVisitor.  The exception to this is the filtering step where it drops AND or OR node without any children.  That shouldn't happen, and if it is happening that points to problems elsewhere in the code base.  So, if we assume that we won't encounter an AND or OR node without any children (which I think is a fairly safe bet) then we could just use the RebuildingVisitor's copy method.  Even if we DO encounter an AND or OR node with 0 children, the switch statement in the and/or node visitors will handle that by returning null, which gets dropped by the rebuilding visitor's copy method.\nSorry for the wall of text... I think that using the visit methods of the parent RebuildingVisitor is a little bit cleaner and simplifies the code a bit.  So, in each place where you call 'getCopyWithVisitedChildren' you can instead call super.visit(node, data) which calls RebuildingVisitor.copy, which visits the entire subtree and creates copies.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/954#discussion_r514655902", "createdAt": "2020-10-30T01:10:07Z", "author": {"login": "jwomeara"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/AllTermsIndexedVisitor.java", "diffHunk": "@@ -63,111 +73,56 @@ public AllTermsIndexedVisitor(ShardQueryConfiguration config, MetadataHelper hel\n     \n     @Override\n     public Object visit(ASTJexlScript node, Object data) {\n-        ASTJexlScript newNode = new ASTJexlScript(ParserTreeConstants.JJTJEXLSCRIPT);\n-        newNode.image = node.image;\n-        \n-        int newIndex = 0;\n-        for (int i = 0; i < node.jjtGetNumChildren(); i++) {\n-            Node newChild = (Node) node.jjtGetChild(i).jjtAccept(this, data);\n-            \n-            if (newChild != null) {\n-                // When we have an AND or OR\n-                if ((newChild instanceof ASTOrNode || newChild instanceof ASTAndNode)) {\n-                    // Only add that node if it actually has children\n-                    if (0 < newChild.jjtGetNumChildren()) {\n-                        newNode.jjtAddChild(newChild, newIndex);\n-                        newIndex++;\n-                    }\n-                } else {\n-                    // Otherwise, we want to add the child regardless\n-                    newNode.jjtAddChild(newChild, newIndex);\n-                    newIndex++;\n-                }\n-            }\n-        }\n+        JexlNode copy = getCopyWithVisitedChildren(node, data);\n         \n-        if (newNode.jjtGetNumChildren() == 0) {\n+        if (copy.jjtGetNumChildren() == 0) {\n             NotFoundQueryException qe = new NotFoundQueryException(DatawaveErrorCode.NO_ANYFIELD_EXPANSION_MATCH);\n             log.warn(qe);\n             throw new EmptyUnfieldedTermExpansionException(qe);\n         }\n         \n-        return newNode;\n+        return copy;\n     }\n     \n     @Override\n     public Object visit(ASTOrNode node, Object data) {\n-        ASTOrNode newNode = new ASTOrNode(ParserTreeConstants.JJTORNODE);\n-        newNode.image = node.image;\n-        \n-        int newIndex = 0;\n-        for (int i = 0; i < node.jjtGetNumChildren(); i++) {\n-            Node newChild = (Node) node.jjtGetChild(i).jjtAccept(this, data);\n-            \n-            if (newChild != null) {\n-                // When we have an AND or OR\n-                if ((newChild instanceof ASTOrNode || newChild instanceof ASTAndNode)) {\n-                    // Only add that node if it actually has children\n-                    if (0 < newChild.jjtGetNumChildren()) {\n-                        newNode.jjtAddChild(newChild, newIndex);\n-                        newIndex++;\n-                    }\n-                } else {\n-                    // Otherwise, we want to add the child regardless\n-                    newNode.jjtAddChild(newChild, newIndex);\n-                    newIndex++;\n-                }\n-            }\n-        }\n-        \n-        switch (newNode.jjtGetNumChildren()) {\n-            case 0:\n-                return null;\n-            case 1:\n-                JexlNode child = newNode.jjtGetChild(0);\n-                JexlNodes.promote(newNode, child);\n-                return child;\n-            default:\n-                return newNode;\n-        }\n+        return visitJunctionNode(node, data);\n     }\n     \n     @Override\n     public Object visit(ASTAndNode node, Object data) {\n-        ASTAndNode newNode = new ASTAndNode(ParserTreeConstants.JJTANDNODE);\n-        newNode.image = node.image;\n+        return visitJunctionNode(node, data);\n+    }\n+    \n+    private Object visitJunctionNode(JexlNode node, Object data) {\n+        JexlNode copy = getCopyWithVisitedChildren(node, data);\n         \n-        int newIndex = 0;\n-        for (int i = 0; i < node.jjtGetNumChildren(); i++) {\n-            Node newChild = (Node) node.jjtGetChild(i).jjtAccept(this, data);\n-            \n-            if (newChild != null) {\n-                // When we have an AND or OR\n-                if ((newChild instanceof ASTOrNode || newChild instanceof ASTAndNode)) {\n-                    // Only add that node if it actually has children\n-                    if (0 < newChild.jjtGetNumChildren()) {\n-                        newNode.jjtAddChild(newChild, newIndex);\n-                        newIndex++;\n-                    }\n-                } else {\n-                    // Otherwise, we want to add the child regardless\n-                    newNode.jjtAddChild(newChild, newIndex);\n-                    newIndex++;\n-                }\n-            }\n-        }\n-        switch (newNode.jjtGetNumChildren()) {\n+        switch (copy.jjtGetNumChildren()) {\n             case 0:\n                 return null;\n             case 1:\n-                JexlNode child = newNode.jjtGetChild(0);\n-                JexlNodes.promote(newNode, child);\n+                JexlNode child = copy.jjtGetChild(0);\n+                promote(copy, child);\n                 return child;\n             default:\n-                return newNode;\n+                return copy;\n         }\n     }\n     \n+    private JexlNode getCopyWithVisitedChildren(JexlNode node, Object data) {\n+        // @formatter:off\n+        JexlNode[] children = Arrays.stream(JexlNodes.children(node))\n+                        .map(n -> (JexlNode) n.jjtAccept(this, data)) // Visit the node.\n+                        .filter(Objects::nonNull) // Remove null nodes.\n+                        .filter(n -> (!(n instanceof ASTAndNode) && !(n instanceof ASTOrNode)) || JexlNodes.isNotChildless(n)) // Remove empty junction nodes.\n+                        .toArray(JexlNode[]::new);\n+        // @formatter:on\n+        JexlNode copy = JexlNodes.newInstanceOfType(node);\n+        copy.image = node.image;\n+        JexlNodes.children(copy, children);\n+        return copy;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a42d16236dfd747439fc359bde546dc6be66c9c"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgyMjI3NA==", "bodyText": "Fixed.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/954#discussion_r516822274", "createdAt": "2020-11-03T17:04:18Z", "author": {"login": "lbschanno"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/AllTermsIndexedVisitor.java", "diffHunk": "@@ -63,111 +73,56 @@ public AllTermsIndexedVisitor(ShardQueryConfiguration config, MetadataHelper hel\n     \n     @Override\n     public Object visit(ASTJexlScript node, Object data) {\n-        ASTJexlScript newNode = new ASTJexlScript(ParserTreeConstants.JJTJEXLSCRIPT);\n-        newNode.image = node.image;\n-        \n-        int newIndex = 0;\n-        for (int i = 0; i < node.jjtGetNumChildren(); i++) {\n-            Node newChild = (Node) node.jjtGetChild(i).jjtAccept(this, data);\n-            \n-            if (newChild != null) {\n-                // When we have an AND or OR\n-                if ((newChild instanceof ASTOrNode || newChild instanceof ASTAndNode)) {\n-                    // Only add that node if it actually has children\n-                    if (0 < newChild.jjtGetNumChildren()) {\n-                        newNode.jjtAddChild(newChild, newIndex);\n-                        newIndex++;\n-                    }\n-                } else {\n-                    // Otherwise, we want to add the child regardless\n-                    newNode.jjtAddChild(newChild, newIndex);\n-                    newIndex++;\n-                }\n-            }\n-        }\n+        JexlNode copy = getCopyWithVisitedChildren(node, data);\n         \n-        if (newNode.jjtGetNumChildren() == 0) {\n+        if (copy.jjtGetNumChildren() == 0) {\n             NotFoundQueryException qe = new NotFoundQueryException(DatawaveErrorCode.NO_ANYFIELD_EXPANSION_MATCH);\n             log.warn(qe);\n             throw new EmptyUnfieldedTermExpansionException(qe);\n         }\n         \n-        return newNode;\n+        return copy;\n     }\n     \n     @Override\n     public Object visit(ASTOrNode node, Object data) {\n-        ASTOrNode newNode = new ASTOrNode(ParserTreeConstants.JJTORNODE);\n-        newNode.image = node.image;\n-        \n-        int newIndex = 0;\n-        for (int i = 0; i < node.jjtGetNumChildren(); i++) {\n-            Node newChild = (Node) node.jjtGetChild(i).jjtAccept(this, data);\n-            \n-            if (newChild != null) {\n-                // When we have an AND or OR\n-                if ((newChild instanceof ASTOrNode || newChild instanceof ASTAndNode)) {\n-                    // Only add that node if it actually has children\n-                    if (0 < newChild.jjtGetNumChildren()) {\n-                        newNode.jjtAddChild(newChild, newIndex);\n-                        newIndex++;\n-                    }\n-                } else {\n-                    // Otherwise, we want to add the child regardless\n-                    newNode.jjtAddChild(newChild, newIndex);\n-                    newIndex++;\n-                }\n-            }\n-        }\n-        \n-        switch (newNode.jjtGetNumChildren()) {\n-            case 0:\n-                return null;\n-            case 1:\n-                JexlNode child = newNode.jjtGetChild(0);\n-                JexlNodes.promote(newNode, child);\n-                return child;\n-            default:\n-                return newNode;\n-        }\n+        return visitJunctionNode(node, data);\n     }\n     \n     @Override\n     public Object visit(ASTAndNode node, Object data) {\n-        ASTAndNode newNode = new ASTAndNode(ParserTreeConstants.JJTANDNODE);\n-        newNode.image = node.image;\n+        return visitJunctionNode(node, data);\n+    }\n+    \n+    private Object visitJunctionNode(JexlNode node, Object data) {\n+        JexlNode copy = getCopyWithVisitedChildren(node, data);\n         \n-        int newIndex = 0;\n-        for (int i = 0; i < node.jjtGetNumChildren(); i++) {\n-            Node newChild = (Node) node.jjtGetChild(i).jjtAccept(this, data);\n-            \n-            if (newChild != null) {\n-                // When we have an AND or OR\n-                if ((newChild instanceof ASTOrNode || newChild instanceof ASTAndNode)) {\n-                    // Only add that node if it actually has children\n-                    if (0 < newChild.jjtGetNumChildren()) {\n-                        newNode.jjtAddChild(newChild, newIndex);\n-                        newIndex++;\n-                    }\n-                } else {\n-                    // Otherwise, we want to add the child regardless\n-                    newNode.jjtAddChild(newChild, newIndex);\n-                    newIndex++;\n-                }\n-            }\n-        }\n-        switch (newNode.jjtGetNumChildren()) {\n+        switch (copy.jjtGetNumChildren()) {\n             case 0:\n                 return null;\n             case 1:\n-                JexlNode child = newNode.jjtGetChild(0);\n-                JexlNodes.promote(newNode, child);\n+                JexlNode child = copy.jjtGetChild(0);\n+                promote(copy, child);\n                 return child;\n             default:\n-                return newNode;\n+                return copy;\n         }\n     }\n     \n+    private JexlNode getCopyWithVisitedChildren(JexlNode node, Object data) {\n+        // @formatter:off\n+        JexlNode[] children = Arrays.stream(JexlNodes.children(node))\n+                        .map(n -> (JexlNode) n.jjtAccept(this, data)) // Visit the node.\n+                        .filter(Objects::nonNull) // Remove null nodes.\n+                        .filter(n -> (!(n instanceof ASTAndNode) && !(n instanceof ASTOrNode)) || JexlNodes.isNotChildless(n)) // Remove empty junction nodes.\n+                        .toArray(JexlNode[]::new);\n+        // @formatter:on\n+        JexlNode copy = JexlNodes.newInstanceOfType(node);\n+        copy.image = node.image;\n+        JexlNodes.children(copy, children);\n+        return copy;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY1NTkwMg=="}, "originalCommit": {"oid": "1a42d16236dfd747439fc359bde546dc6be66c9c"}, "originalPosition": 186}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4443, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}