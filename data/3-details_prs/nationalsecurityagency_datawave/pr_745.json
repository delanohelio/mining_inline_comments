{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzcyMjYz", "number": 745, "title": "Refactored the FileSortedSet to avoid dependency on java Serializable.", "bodyText": "This allows extending the implementation to use a Writable such as the\naccumulo Key object.  Updated the ivarator to use sets of Key objects\ninstead of sets of KeyValueSerializable object avoiding unnecessary object\ncreations.", "createdAt": "2020-02-11T16:59:01Z", "url": "https://github.com/NationalSecurityAgency/datawave/pull/745", "merged": true, "mergeCommit": {"oid": "eb37ef92acb4aa7943ead0e29f20a2e8dab8b6b7"}, "closed": true, "closedAt": "2020-02-12T16:13:37Z", "author": {"login": "ivakegg"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDWmycAFqTM1NjkwMjkxNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDY9MagH2gAyMzczNzcyMjYzOjM2ZmM5NTI2YTA1ODM0YWNlMTY4NjhlMWE5ZjExZjNiZTYwMzY3YjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTAyOTE3", "url": "https://github.com/NationalSecurityAgency/datawave/pull/745#pullrequestreview-356902917", "createdAt": "2020-02-11T18:45:48Z", "commit": {"oid": "dd17ff9fb0224aba969ac5d3db3b6b7e6827061f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo0NTo0OFrOFoUtFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODo0Njo0OVrOFoUvaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNjU4Mg==", "bodyText": "This exception isn't thrown, so the build fails.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/745#discussion_r377826582", "createdAt": "2020-02-11T18:45:48Z", "author": {"login": "brianloss"}, "path": "warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileKeySortedSet.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package datawave.query.util.sortedset;\n+\n+import org.apache.accumulo.core.data.Key;\n+import org.apache.log4j.Logger;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.DataInputStream;\n+import java.io.DataOutputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+\n+/**\n+ * A sorted set that can be persisted into a file and still be read in its persisted state. The set can always be re-loaded and then all operations will work as\n+ * expected. This will support null contained in the underlying sets iff a comparator is supplied that can handle null values.\n+ *\n+ * The persisted file will contain the serialized entries, followed by the actual size.\n+ *\n+ */\n+public class FileKeySortedSet extends FileSortedSet<Key> {\n+    private static Logger log = Logger.getLogger(FileKeySortedSet.class);\n+    \n+    /**\n+     * Create a file sorted set from another one\n+     * \n+     * @param other\n+     */\n+    public FileKeySortedSet(FileKeySortedSet other) {\n+        super(other);\n+    }\n+    \n+    /**\n+     * Create a persisted sorted set\n+     * \n+     * @param handler\n+     * @param persisted\n+     */\n+    public FileKeySortedSet(SortedSetFileHandler handler, boolean persisted) {\n+        super(handler, persisted);\n+    }\n+    \n+    /**\n+     * Create a persistede sorted set\n+     * \n+     * @param comparator\n+     * @param handler\n+     * @param persisted\n+     */\n+    public FileKeySortedSet(Comparator<? super Key> comparator, SortedSetFileHandler handler, boolean persisted) {\n+        super(comparator, handler, persisted);\n+    }\n+    \n+    /**\n+     * Create an unpersisted sorted set (still in memory)\n+     * \n+     * @param set\n+     * @param handler\n+     */\n+    public FileKeySortedSet(SortedSet<Key> set, SortedSetFileHandler handler) {\n+        super(set, handler);\n+    }\n+    \n+    /**\n+     * Create an sorted set out of another sorted set. If persist is true, then the set will be directly persisted using the set's iterator which avoid pulling\n+     * all of its entries into memory at once.\n+     *\n+     * @param set\n+     * @param handler\n+     */\n+    public FileKeySortedSet(SortedSet<Key> set, SortedSetFileHandler handler, boolean persist) throws IOException {\n+        super(set, handler, persist);\n+    }\n+    \n+    /**\n+     * Get an input stream\n+     * \n+     * @return the input stream\n+     * @throws FileNotFoundException\n+     * @throws IOException\n+     */\n+    @Override\n+    protected DataInputStream getInputStream() throws IOException {\n+        return new DataInputStream(new BufferedInputStream(handler.getInputStream()));\n+    }\n+    \n+    /**\n+     * Get an output stream\n+     * \n+     * @return the output stream\n+     * @throws IOException\n+     */\n+    @Override\n+    protected DataOutputStream getOutputStream() throws IOException {\n+        return new DataOutputStream(new BufferedOutputStream(handler.getOutputStream()));\n+    }\n+    \n+    /**\n+     * Write T to an object output stream\n+     * \n+     * @param stream\n+     * @param t\n+     * @throws IOException\n+     */\n+    @Override\n+    protected void writeObject(OutputStream stream, Key t) throws IOException {\n+        t.write((DataOutputStream) stream);\n+    }\n+    \n+    /**\n+     * Read T from an object input stream\n+     *\n+     * @param stream\n+     * @return a key\n+     * @throws IOException\n+     * @throws ClassNotFoundException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd17ff9fb0224aba969ac5d3db3b6b7e6827061f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNjkxNA==", "bodyText": "This exception isn't thrown, so the build fails.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/745#discussion_r377826914", "createdAt": "2020-02-11T18:46:20Z", "author": {"login": "brianloss"}, "path": "warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSerializableSortedSet.java", "diffHunk": "@@ -0,0 +1,161 @@\n+package datawave.query.util.sortedset;\n+\n+import java.io.BufferedInputStream;\n+import java.io.BufferedOutputStream;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import java.util.SortedSet;\n+import org.apache.log4j.Logger;\n+\n+/**\n+ * A sorted set that can be persisted into a file and still be read in its persisted state. The set can always be re-loaded and then all operations will work as\n+ * expected. This will support null contained in the underlying sets iff a comparator is supplied that can handle null values.\n+ *\n+ * The persisted file will contain the serialized entries, followed by the actual size.\n+ *\n+ */\n+public class FileSerializableSortedSet<E extends Serializable> extends FileSortedSet<E> {\n+    private static Logger log = Logger.getLogger(FileSerializableSortedSet.class);\n+    \n+    /**\n+     * Create a file sorted set from another one\n+     *\n+     * @param other\n+     */\n+    public FileSerializableSortedSet(FileSerializableSortedSet other) {\n+        super(other);\n+    }\n+    \n+    /**\n+     * Create a persisted sorted set\n+     *\n+     * @param handler\n+     * @param persisted\n+     */\n+    public FileSerializableSortedSet(SortedSetFileHandler handler, boolean persisted) {\n+        super(handler, persisted);\n+    }\n+    \n+    /**\n+     * Create a persistede sorted set\n+     *\n+     * @param comparator\n+     * @param handler\n+     * @param persisted\n+     */\n+    public FileSerializableSortedSet(Comparator<? super E> comparator, SortedSetFileHandler handler, boolean persisted) {\n+        super(comparator, handler, persisted);\n+    }\n+    \n+    /**\n+     * Create an unpersisted sorted set (still in memory)\n+     *\n+     * @param set\n+     * @param handler\n+     */\n+    public FileSerializableSortedSet(SortedSet<E> set, SortedSetFileHandler handler) {\n+        super(set, handler);\n+    }\n+    \n+    /**\n+     * Create an sorted set out of another sorted set. If persist is true, then the set will be directly persisted using the set's iterator which avoid pulling\n+     * all of its entries into memory at once.\n+     *\n+     * @param set\n+     * @param handler\n+     */\n+    public FileSerializableSortedSet(SortedSet<E> set, SortedSetFileHandler handler, boolean persist) throws IOException {\n+        super(set, handler, persist);\n+    }\n+    \n+    /**\n+     * Get an input stream\n+     * \n+     * @return the input stream\n+     * @throws FileNotFoundException\n+     * @throws IOException\n+     */\n+    @Override\n+    protected ObjectInputStream getInputStream() throws IOException {\n+        return new ObjectInputStream(new BufferedInputStream(handler.getInputStream()));\n+    }\n+    \n+    /**\n+     * Get an output stream\n+     * \n+     * @return the output stream\n+     * @throws IOException\n+     */\n+    @Override\n+    protected ObjectOutputStream getOutputStream() throws IOException {\n+        return new ObjectOutputStream(new BufferedOutputStream(handler.getOutputStream()));\n+    }\n+    \n+    /**\n+     * Write KeyValueSerializable to an object output stream\n+     * \n+     * @param stream\n+     * @param t\n+     * @throws IOException\n+     */\n+    @Override\n+    protected void writeObject(OutputStream stream, E t) throws IOException {\n+        ((ObjectOutputStream) stream).writeObject(t);\n+    }\n+    \n+    /**\n+     * Read KeyValueSerializable from an object input stream\n+     *\n+     * @param stream\n+     * @return a key\n+     * @throws IOException\n+     * @throws ClassNotFoundException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd17ff9fb0224aba969ac5d3db3b6b7e6827061f"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyNzE3OQ==", "bodyText": "This exception isn't thrown anymore, so the build fails.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/745#discussion_r377827179", "createdAt": "2020-02-11T18:46:49Z", "author": {"login": "brianloss"}, "path": "warehouse/query-core/src/main/java/datawave/query/util/sortedset/FileSortedSet.java", "diffHunk": "@@ -270,58 +270,41 @@ public void load() throws IOException, ClassNotFoundException {\n     }\n     \n     /**\n-     * Get an input stream\n+     * Get an input stream. This should wrap handler.getInputStream with appropriate streams to handle reading the objects.\n      * \n      * @return the input stream\n      * @throws FileNotFoundException\n      * @throws IOException\n      */\n-    protected ObjectInputStream getInputStream() throws IOException {\n-        return new ObjectInputStream(new BufferedInputStream(handler.getInputStream()));\n-    }\n+    protected abstract InputStream getInputStream() throws IOException;\n     \n     /**\n-     * Get an output stream\n+     * Get an output stream. This should wrap handler.getOutputStream with appropriate streams to handle writing the objects.\n      * \n      * @return the output stream\n      * @throws IOException\n      */\n-    protected ObjectOutputStream getOutputStream() throws IOException {\n-        return new ObjectOutputStream(new BufferedOutputStream(handler.getOutputStream()));\n-    }\n+    protected abstract OutputStream getOutputStream() throws IOException;\n     \n     /**\n-     * Write T to an object output stream\n+     * Write T to an output stream as returned by getOutputStream()\n      * \n      * @param stream\n      * @param t\n      * @throws IOException\n      */\n-    protected void writeObject(ObjectOutputStream stream, E t) throws IOException {\n-        if (t == null) {\n-            stream.writeObject(NULL_OBJECT);\n-        } else {\n-            stream.writeObject(t);\n-        }\n-    }\n+    protected abstract void writeObject(OutputStream stream, E t) throws IOException;\n     \n     /**\n-     * Read T from an object input stream\n+     * Read T from an object input stream as returned by getInputStream()\n      *\n      * @param stream\n      * @return\n      * @throws IOException\n      * @throws ClassNotFoundException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd17ff9fb0224aba969ac5d3db3b6b7e6827061f"}, "originalPosition": 127}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "440e8d82cde6d36fda4e8c90a6dfad2a0713a84f", "author": {"user": {"login": "ivakegg", "name": "Ivan Bella"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/440e8d82cde6d36fda4e8c90a6dfad2a0713a84f", "committedDate": "2020-02-11T19:12:41Z", "message": "Refactored the FileSortedSet to avoid dependency on java Serializable.\nThis allows extending the implementation to use a Writable such as the\naccumulo Key object.  Updated the ivarator to use sets of Key objects\ninstead of sets of KeyValueSerializable object removing unnecessary object\ncreations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd17ff9fb0224aba969ac5d3db3b6b7e6827061f", "author": {"user": {"login": "brianloss", "name": "Brian Loss"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/dd17ff9fb0224aba969ac5d3db3b6b7e6827061f", "committedDate": "2020-02-11T17:54:49Z", "message": "Merge branch 'release/version2.8' into ivaratorObjectPool"}, "afterCommit": {"oid": "440e8d82cde6d36fda4e8c90a6dfad2a0713a84f", "author": {"user": {"login": "ivakegg", "name": "Ivan Bella"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/440e8d82cde6d36fda4e8c90a6dfad2a0713a84f", "committedDate": "2020-02-11T19:12:41Z", "message": "Refactored the FileSortedSet to avoid dependency on java Serializable.\nThis allows extending the implementation to use a Writable such as the\naccumulo Key object.  Updated the ivarator to use sets of Key objects\ninstead of sets of KeyValueSerializable object removing unnecessary object\ncreations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2OTQwNjA4", "url": "https://github.com/NationalSecurityAgency/datawave/pull/745#pullrequestreview-356940608", "createdAt": "2020-02-11T19:40:48Z", "commit": {"oid": "440e8d82cde6d36fda4e8c90a6dfad2a0713a84f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36fc9526a05834ace16868e1a9f11f3be60367b1", "author": {"user": {"login": "brianloss", "name": "Brian Loss"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/36fc9526a05834ace16868e1a9f11f3be60367b1", "committedDate": "2020-02-11T21:52:25Z", "message": "Merge branch 'release/version2.8' into ivaratorObjectPool"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1130, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}