{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MzE3OTgw", "number": 969, "title": "ValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions. (#787)", "bodyText": "Backport fix for valid pattern visitor to 2.9, original feature was merged into master.\n\n\nValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions.\n\n\nAddress PR comments.\n\n\nAddress PR comments.\n\n\nCo-authored-by: Brian Loss brianloss@gmail.com\nCo-authored-by: Ivan Bella ivan@bella.name", "createdAt": "2020-10-22T14:05:13Z", "url": "https://github.com/NationalSecurityAgency/datawave/pull/969", "merged": true, "mergeCommit": {"oid": "04280fd405ecdc04e3f210955b40e68457dbbada"}, "closed": true, "closedAt": "2020-10-28T19:36:39Z", "author": {"login": "apmoriarty"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVCUF2AH2gAyNTA4MzE3OTgwOjliYWZlMTMxNjQ1OTRhNzNiYzcyZmI1YmE4NjJlYzAwZWI0MmU0ZWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABda6Zq-AFqTUyNjYwOTg5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9bafe13164594a73bc72fb5ba862ec00eb42e4ee", "author": {"user": {"login": "apmoriarty", "name": "Moriarty"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/9bafe13164594a73bc72fb5ba862ec00eb42e4ee", "committedDate": "2020-10-22T13:51:24Z", "message": "ValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions. (#787)\n\n* ValidPatternVisitor now checks #INCLUDE and #EXCLUDE functions.\n\n* Address PR comments.\n\n* Address PR comments.\n\nCo-authored-by: Brian Loss <brianloss@gmail.com>\nCo-authored-by: Ivan Bella <ivan@bella.name>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0OTkxNTU0", "url": "https://github.com/NationalSecurityAgency/datawave/pull/969#pullrequestreview-514991554", "createdAt": "2020-10-22T18:07:22Z", "commit": {"oid": "9bafe13164594a73bc72fb5ba862ec00eb42e4ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3ODExODMx", "url": "https://github.com/NationalSecurityAgency/datawave/pull/969#pullrequestreview-517811831", "createdAt": "2020-10-27T15:07:05Z", "commit": {"oid": "9bafe13164594a73bc72fb5ba862ec00eb42e4ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjA5ODk5", "url": "https://github.com/NationalSecurityAgency/datawave/pull/969#pullrequestreview-526609899", "createdAt": "2020-11-09T20:01:48Z", "commit": {"oid": "9bafe13164594a73bc72fb5ba862ec00eb42e4ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowMTo0OFrOHv_f1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDowMTo0OFrOHv_f1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4NTQ2MA==", "bodyText": "As it turns out, the initial implementation wraps the call to getLiteralValue with a try-catch block.  This was allowing us to handle FIELD1 =~ FIELD2 constructs correctly.  Now this visitor will simply throw an exception in that case which is not what we want.  I am fixing this in the master branch.", "url": "https://github.com/NationalSecurityAgency/datawave/pull/969#discussion_r520085460", "createdAt": "2020-11-09T20:01:48Z", "author": {"login": "ivakegg"}, "path": "warehouse/query-core/src/main/java/datawave/query/jexl/visitors/ValidPatternVisitor.java", "diffHunk": "@@ -69,22 +59,64 @@ public Object visit(ASTERNode node, Object data) {\n      */\n     @Override\n     public Object visit(ASTNRNode node, Object data) {\n-        Object literalValue;\n+        parseAndPutPattern(node);\n+        return data;\n+    }\n+    \n+    /**\n+     * Visit an ASTFunctionNode to catch cases like #INCLUDE or #EXCLUDE that accept a regex as an argument\n+     * \n+     * @param node\n+     *            - an ASTFunctionNode\n+     * @param data\n+     *            - the data\n+     * @return\n+     */\n+    @Override\n+    public Object visit(ASTFunctionNode node, Object data) {\n         \n-        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n-        try {\n-            literalValue = JexlASTHelper.getLiteralValue(node);\n-        } catch (NoSuchElementException e) {\n-            return data;\n+        // Should pull back an EvaluationPhaseFilterFunctionsDescriptor\n+        JexlArgumentDescriptor descriptor = JexlFunctionArgumentDescriptorFactory.F.getArgumentDescriptor(node);\n+        if (descriptor == null) {\n+            throw new IllegalStateException(\"Could not get descriptor for ASTFunctionNode\");\n         }\n         \n+        if (descriptor.regexArguments()) {\n+            // Extract the args for this function\n+            FunctionJexlNodeVisitor functionVisitor = new FunctionJexlNodeVisitor();\n+            functionVisitor.visit(node, null);\n+            List<JexlNode> args = functionVisitor.args();\n+            for (JexlNode arg : args) {\n+                // Only take the literals\n+                if (arg instanceof ASTStringLiteral) {\n+                    parseAndPutPattern(arg);\n+                }\n+            }\n+        }\n+        // Do not descend to children, the ValidPatternVisitor views a function node as a leaf node.\n+        return data;\n+    }\n+    \n+    /**\n+     * Parse a literal value and put into the pattern cache if it does not exist.\n+     *\n+     * @param node\n+     */\n+    public void parseAndPutPattern(JexlNode node) {\n+        // Catch the situation where a user might enter FIELD1 !~ VALUE1\n+        Object literalValue = JexlASTHelper.getLiteralValue(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bafe13164594a73bc72fb5ba862ec00eb42e4ee"}, "originalPosition": 116}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1093, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}