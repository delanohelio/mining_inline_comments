{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDk1NzYw", "number": 895, "title": "FacetHandler improvements and additional unit tests", "bodyText": "CardinalityAggregator is a PropogatingCombiner that is configured\nfor the facet table via the FacetTableConfigHelper.\nIncluded unit test for CardinalityAggregator.\nUpdated FacetedQueryLogicTest to properly exercise and validate\ncardinality aggregation. Also updated this test to perform fine\ngrained results evaluation.", "createdAt": "2020-08-14T17:21:09Z", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895", "merged": true, "mergeCommit": {"oid": "ba1af2dff6f3f4d3b7b1b641603d094029f4af8a"}, "closed": true, "closedAt": "2020-09-28T17:06:51Z", "author": {"login": "drewfarris"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-39yLgBqjM2NTcwNjk2MDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNVhzpgH2gAyNDY4MDk1NzYwOjY0NjRiMDA5YmUzZWM3ZjQ3ZmFhOWE5ZTgyMGYyZjUzMzA3MWIyMjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1302a926680331168ddf497b6786384ad6ae695", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/c1302a926680331168ddf497b6786384ad6ae695", "committedDate": "2020-08-14T17:16:37Z", "message": "Adds CardinalityAggregator to properly merge facet table values\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}, "afterCommit": {"oid": "fc8bda1b133bf5917a19d212979bb4997677a431", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/fc8bda1b133bf5917a19d212979bb4997677a431", "committedDate": "2020-08-14T17:21:23Z", "message": "Adds CardinalityAggregator to properly merge facet table values (#895)\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc8bda1b133bf5917a19d212979bb4997677a431", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/fc8bda1b133bf5917a19d212979bb4997677a431", "committedDate": "2020-08-14T17:21:23Z", "message": "Adds CardinalityAggregator to properly merge facet table values (#895)\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}, "afterCommit": {"oid": "9741d49bca6b2c98ac441030aed5c23c64552b23", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/9741d49bca6b2c98ac441030aed5c23c64552b23", "committedDate": "2020-08-17T15:03:17Z", "message": "Adds CardinalityAggregator to properly merge facet table values (#895)\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9741d49bca6b2c98ac441030aed5c23c64552b23", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/9741d49bca6b2c98ac441030aed5c23c64552b23", "committedDate": "2020-08-17T15:03:17Z", "message": "Adds CardinalityAggregator to properly merge facet table values (#895)\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}, "afterCommit": {"oid": "4a30efce41be98e041d6783d825029273f10b41e", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/4a30efce41be98e041d6783d825029273f10b41e", "committedDate": "2020-08-17T17:37:33Z", "message": "Adds CardinalityAggregator to properly merge facet table values (#895)\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36fd2c4763447c9af4e238d3e22ec349cf8b99ac", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/36fd2c4763447c9af4e238d3e22ec349cf8b99ac", "committedDate": "2020-08-17T21:37:54Z", "message": "Merge branch 'spotbugs-fixes' into facet-cardinality-aggregator"}, "afterCommit": {"oid": "6422fa14a21274c480cc33435de86e8741c03df5", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/6422fa14a21274c480cc33435de86e8741c03df5", "committedDate": "2020-08-18T14:33:13Z", "message": "Adds CardinalityAggregator to properly merge facet table values (#895)\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6422fa14a21274c480cc33435de86e8741c03df5", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/6422fa14a21274c480cc33435de86e8741c03df5", "committedDate": "2020-08-18T14:33:13Z", "message": "Adds CardinalityAggregator to properly merge facet table values (#895)\n\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation."}, "afterCommit": {"oid": "1d22bdea4ef36c38e19783de3d3530bcd1577e44", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/1d22bdea4ef36c38e19783de3d3530bcd1577e44", "committedDate": "2020-08-21T19:20:48Z", "message": "FacetHandler private constants refactored to protected for subclassing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NzY4ODA2", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#pullrequestreview-478768806", "createdAt": "2020-08-31T16:37:44Z", "commit": {"oid": "52aea70e4e722b603b4b6c348f6e646adc926389"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjozNzo0NFrOHKAJPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODo0NDo0NFrOHKEVLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MDE3Mw==", "bodyText": "should this be looking at the Type to decide if this field is tokenized?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r480250173", "createdAt": "2020-08-31T16:37:44Z", "author": {"login": "FineAndDandy"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/mapreduce/handler/facet/FacetHandler.java", "diffHunk": "@@ -332,7 +485,6 @@ public FacetValue estimate(RawRecordContainer input) {\n     }\n     \n     /** A predicate used to ignore values that are generated via tokenization */\n-    // TODO: make configurable\n     public static class TokenPredicate implements Predicate<String> {\n         @Override\n         public boolean test(String input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aea70e4e722b603b4b6c348f6e646adc926389"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI1MjkwMA==", "bodyText": "should we filter before doing any of the work?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r480252900", "createdAt": "2020-08-31T16:42:50Z", "author": {"login": "FineAndDandy"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/mapreduce/handler/facet/FacetHandler.java", "diffHunk": "@@ -221,72 +200,149 @@ public long process(KEYIN key, RawRecordContainer event, Multimap<String,Normali\n         final String shardDate = ShardIdFactory.getDateString(shardId);\n         Text dateColumnQualifier = new Text(shardDate);\n         \n-        HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n-        cardinality.offer(event.getId().toString());\n-        \n         Text cv = new Text(flatten(event.getVisibility()));\n         \n-        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(contextWriter, context, facetHashTableName, facetHashThreshold,\n-                        event.getDate());\n-        Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // fields with a large number of values are hashed. See HashTableFunction for details\n+        // @formatter:off\n+        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(\n+                contextWriter, context, facetHashTableName, facetHashThreshold, event.getDate());\n+        final Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // @formatter:on\n         \n-        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(new TokenPredicate());\n-        if (fieldFilter != null) {\n-            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilter);\n+        // filter out event fields that are generated as the result of tokenization.\n+        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(fieldSelectionPredicate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aea70e4e722b603b4b6c348f6e646adc926389"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2NjA2Mg==", "bodyText": "Is creating this right? Down below we create the pivotType/facetType. Why create pivotType/pivotType here?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r480266062", "createdAt": "2020-08-31T17:05:27Z", "author": {"login": "FineAndDandy"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/mapreduce/handler/facet/FacetHandler.java", "diffHunk": "@@ -221,72 +200,149 @@ public long process(KEYIN key, RawRecordContainer event, Multimap<String,Normali\n         final String shardDate = ShardIdFactory.getDateString(shardId);\n         Text dateColumnQualifier = new Text(shardDate);\n         \n-        HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n-        cardinality.offer(event.getId().toString());\n-        \n         Text cv = new Text(flatten(event.getVisibility()));\n         \n-        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(contextWriter, context, facetHashTableName, facetHashThreshold,\n-                        event.getDate());\n-        Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // fields with a large number of values are hashed. See HashTableFunction for details\n+        // @formatter:off\n+        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(\n+                contextWriter, context, facetHashTableName, facetHashThreshold, event.getDate());\n+        final Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // @formatter:on\n         \n-        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(new TokenPredicate());\n-        if (fieldFilter != null) {\n-            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilter);\n+        // filter out event fields that are generated as the result of tokenization.\n+        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(fieldSelectionPredicate);\n+        if (fieldFilterPredicate != null) {\n+            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilterPredicate);\n         }\n-        Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n-        List<Set<String>> keySetList = Lists.newArrayList();\n-        keySetList.add(keySet);\n-        keySetList.add(keySet);\n+        final Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n+        Set<String> pivotFieldSet = new HashSet<>(keySet);\n+        Set<String> facetFieldSet = new HashSet<>(keySet);\n         \n         long countWritten = 0;\n         \n-        Value sharedValue = new Value(cardinality.getBytes());\n-        Multimap<BulkIngestKey,Value> results = ArrayListMultimap.create();\n+        // the event id offered to the cardinality is a uid based on the 'EVENT_ID',\n+        // so it's helpful to have that around for debugging when logging about the\n+        // facet keys that are created.\n+        String eventId = null;\n+        if (log.isDebugEnabled()) {\n+            StringBuilder b = new StringBuilder();\n+            for (NormalizedContentInterface f : eventFields.get(\"EVENT_ID\")) {\n+                b.append(f.getEventFieldValue());\n+            }\n+            eventId = b.toString();\n+        }\n+        \n+        // compute the cardinality based on the uid, this becomes the value shared\n+        // across each facet row generated.\n+        final HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n+        cardinality.offer(event.getId().toString());\n+        final Value sharedValue = new Value(cardinality.getBytes());\n+        \n+        final Multimap<BulkIngestKey,Value> results = ArrayListMultimap.create();\n         \n         for (String pivotFieldName : pivotMap.keySet()) {\n-            Text reflexiveCf = createColumnFamily(pivotFieldName, pivotFieldName);\n+            if (!pivotFieldSet.contains(pivotFieldName))\n+                continue;\n+            \n+            final Text reflexiveCf = createColumnFamily(pivotFieldName, pivotFieldName);\n+            \n             for (NormalizedContentInterface pivotTypes : eventFields.get(pivotFieldName)) {\n                 if (HashTableFunction.isReduced(pivotTypes))\n                     continue;\n                 \n+                // Generate the pivot entry.\n+                // @formatter:off\n+                final BulkIngestKey pivotIngestKey = generateFacetIngestKey(\n+                        pivotTypes.getIndexedFieldValue(),\n+                        pivotTypes.getIndexedFieldValue(),\n+                        event.getDataType(),\n+                        reflexiveCf,\n+                        dateColumnQualifier,\n+                        cv,\n+                        event.getDate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aea70e4e722b603b4b6c348f6e646adc926389"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODA4OQ==", "bodyText": "what happens if we see this event id multiple times?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r480268089", "createdAt": "2020-08-31T17:09:21Z", "author": {"login": "FineAndDandy"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/mapreduce/handler/facet/FacetHandler.java", "diffHunk": "@@ -221,72 +200,149 @@ public long process(KEYIN key, RawRecordContainer event, Multimap<String,Normali\n         final String shardDate = ShardIdFactory.getDateString(shardId);\n         Text dateColumnQualifier = new Text(shardDate);\n         \n-        HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n-        cardinality.offer(event.getId().toString());\n-        \n         Text cv = new Text(flatten(event.getVisibility()));\n         \n-        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(contextWriter, context, facetHashTableName, facetHashThreshold,\n-                        event.getDate());\n-        Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // fields with a large number of values are hashed. See HashTableFunction for details\n+        // @formatter:off\n+        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(\n+                contextWriter, context, facetHashTableName, facetHashThreshold, event.getDate());\n+        final Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // @formatter:on\n         \n-        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(new TokenPredicate());\n-        if (fieldFilter != null) {\n-            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilter);\n+        // filter out event fields that are generated as the result of tokenization.\n+        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(fieldSelectionPredicate);\n+        if (fieldFilterPredicate != null) {\n+            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilterPredicate);\n         }\n-        Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n-        List<Set<String>> keySetList = Lists.newArrayList();\n-        keySetList.add(keySet);\n-        keySetList.add(keySet);\n+        final Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n+        Set<String> pivotFieldSet = new HashSet<>(keySet);\n+        Set<String> facetFieldSet = new HashSet<>(keySet);\n         \n         long countWritten = 0;\n         \n-        Value sharedValue = new Value(cardinality.getBytes());\n-        Multimap<BulkIngestKey,Value> results = ArrayListMultimap.create();\n+        // the event id offered to the cardinality is a uid based on the 'EVENT_ID',\n+        // so it's helpful to have that around for debugging when logging about the\n+        // facet keys that are created.\n+        String eventId = null;\n+        if (log.isDebugEnabled()) {\n+            StringBuilder b = new StringBuilder();\n+            for (NormalizedContentInterface f : eventFields.get(\"EVENT_ID\")) {\n+                b.append(f.getEventFieldValue());\n+            }\n+            eventId = b.toString();\n+        }\n+        \n+        // compute the cardinality based on the uid, this becomes the value shared\n+        // across each facet row generated.\n+        final HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n+        cardinality.offer(event.getId().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aea70e4e722b603b4b6c348f6e646adc926389"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxNzAyOA==", "bodyText": "implement TODOs?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r480317028", "createdAt": "2020-08-31T18:41:28Z", "author": {"login": "FineAndDandy"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/table/config/FacetTableConfigHelper.java", "diffHunk": "@@ -73,7 +75,13 @@ public void configure(TableOperations tops) throws AccumuloException, AccumuloSe\n     }\n     \n     protected void configureFacetTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        // TODO:\n+        // Add the facet cardinality aggregator\n+        for (IteratorUtil.IteratorScope scope : IteratorUtil.IteratorScope.values()) {\n+            String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"UIDAggregator\");\n+            setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n+            stem += \".opt.\";\n+            setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.CardinalityAggregator\", tops, log);\n+        }\n     }\n     \n     protected void configureFacetMetadataTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52aea70e4e722b603b4b6c348f6e646adc926389"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMxODc2NQ==", "bodyText": "specifically does this throw off counts later if we see the same event_id multiple times?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r480318765", "createdAt": "2020-08-31T18:44:44Z", "author": {"login": "FineAndDandy"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/mapreduce/handler/facet/FacetHandler.java", "diffHunk": "@@ -221,72 +200,149 @@ public long process(KEYIN key, RawRecordContainer event, Multimap<String,Normali\n         final String shardDate = ShardIdFactory.getDateString(shardId);\n         Text dateColumnQualifier = new Text(shardDate);\n         \n-        HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n-        cardinality.offer(event.getId().toString());\n-        \n         Text cv = new Text(flatten(event.getVisibility()));\n         \n-        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(contextWriter, context, facetHashTableName, facetHashThreshold,\n-                        event.getDate());\n-        Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // fields with a large number of values are hashed. See HashTableFunction for details\n+        // @formatter:off\n+        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(\n+                contextWriter, context, facetHashTableName, facetHashThreshold, event.getDate());\n+        final Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n+        // @formatter:on\n         \n-        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(new TokenPredicate());\n-        if (fieldFilter != null) {\n-            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilter);\n+        // filter out event fields that are generated as the result of tokenization.\n+        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(fieldSelectionPredicate);\n+        if (fieldFilterPredicate != null) {\n+            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilterPredicate);\n         }\n-        Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n-        List<Set<String>> keySetList = Lists.newArrayList();\n-        keySetList.add(keySet);\n-        keySetList.add(keySet);\n+        final Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n+        Set<String> pivotFieldSet = new HashSet<>(keySet);\n+        Set<String> facetFieldSet = new HashSet<>(keySet);\n         \n         long countWritten = 0;\n         \n-        Value sharedValue = new Value(cardinality.getBytes());\n-        Multimap<BulkIngestKey,Value> results = ArrayListMultimap.create();\n+        // the event id offered to the cardinality is a uid based on the 'EVENT_ID',\n+        // so it's helpful to have that around for debugging when logging about the\n+        // facet keys that are created.\n+        String eventId = null;\n+        if (log.isDebugEnabled()) {\n+            StringBuilder b = new StringBuilder();\n+            for (NormalizedContentInterface f : eventFields.get(\"EVENT_ID\")) {\n+                b.append(f.getEventFieldValue());\n+            }\n+            eventId = b.toString();\n+        }\n+        \n+        // compute the cardinality based on the uid, this becomes the value shared\n+        // across each facet row generated.\n+        final HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n+        cardinality.offer(event.getId().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI2ODA4OQ=="}, "originalCommit": {"oid": "52aea70e4e722b603b4b6c348f6e646adc926389"}, "originalPosition": 178}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "462417b528491b026201badb2786a1e2ef8c2632", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/462417b528491b026201badb2786a1e2ef8c2632", "committedDate": "2020-09-03T21:27:14Z", "message": "Formatting fixes"}, "afterCommit": {"oid": "906ad5f6f3cb2958c47a2c80f638c0d01e86ec36", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/906ad5f6f3cb2958c47a2c80f638c0d01e86ec36", "committedDate": "2020-09-08T18:42:26Z", "message": "FacetHandler and FacetHandlerTest improvements (#895)\n\n* Adds `CardinalityAggregator` to properly merge facet table values on ingest.\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation.\n* `FacetHandler` private constants refactored to protected for subclassing.\n* Fixed predicate-based field filtering (to defeat facet generation for a configured set of field names).\n* Added configurable predicate for use in subclasses to override TokenPredicate.\n* Fixed multi-document unit test to check for missed keys.\n* Cleaned up warnings.\n* Added test for configurable predicates, this identified an\n  issue related to metadata generation which was fixed.\n* Fixed incomplete facet hashing and implemented unit test for validation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4Njc3MTY1", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#pullrequestreview-488677165", "createdAt": "2020-09-15T13:23:39Z", "commit": {"oid": "4d1cebe4a3bf00cedfe765a0951cda68a7c40fcd"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5579cab9bea5c358a929e41973a23a1da9a9212", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/b5579cab9bea5c358a929e41973a23a1da9a9212", "committedDate": "2020-09-16T14:04:10Z", "message": "FacetHandler and FacetHandlerTest improvements (#895)\n\n* Adds `CardinalityAggregator` to properly merge facet table values on ingest.\n* `CardinalityAggregator` is a `PropogatingCombiner` that is configured\n  for the facet table via the `FacetTableConfigHelper`.\n* Included unit test for `CardinalityAggregator`.\n* Updated `FacetedQueryLogicTest` to properly exercise and validate\n  cardinality aggregation. Also updated this test to perform fine\n  grained results evaluation.\n* `FacetHandler` private constants refactored to protected for subclassing.\n* Fixed predicate-based field filtering (to defeat facet generation for a configured set of field names).\n* Added configurable predicate for use in subclasses to override TokenPredicate.\n* Fixed multi-document unit test to check for missed keys.\n* Cleaned up warnings.\n* Added test for configurable predicates, this identified an\n  issue related to metadata generation which was fixed.\n* Fixed incomplete facet hashing and implemented unit test for validation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33ce289b94f8b69014a4be701c55eb7920873de9", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/33ce289b94f8b69014a4be701c55eb7920873de9", "committedDate": "2020-09-16T14:04:10Z", "message": "FacetHandler improvements based on code review (#895)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48d23dd247c16d86ba0d6bd68b952269a750eda4", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/48d23dd247c16d86ba0d6bd68b952269a750eda4", "committedDate": "2020-09-16T14:04:10Z", "message": "Updated unit test expectations for FacetedQueryLogicTest (#895)\n\n* Differentiated event ids by datatype, hence higher cardinality."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d1cebe4a3bf00cedfe765a0951cda68a7c40fcd", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/4d1cebe4a3bf00cedfe765a0951cda68a7c40fcd", "committedDate": "2020-09-14T20:55:58Z", "message": "Updated unit test expectations for FacetedQueryLogicTest (#895)\n\n* Differentiated event ids by datatype, hence higher cardinality."}, "afterCommit": {"oid": "48d23dd247c16d86ba0d6bd68b952269a750eda4", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/48d23dd247c16d86ba0d6bd68b952269a750eda4", "committedDate": "2020-09-16T14:04:10Z", "message": "Updated unit test expectations for FacetedQueryLogicTest (#895)\n\n* Differentiated event ids by datatype, hence higher cardinality."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21fa4d6be21727dc672b3756bd23005455e1080a", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/21fa4d6be21727dc672b3756bd23005455e1080a", "committedDate": "2020-09-16T20:01:54Z", "message": "Merge branch 'master' into facet-cardinality-aggregator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f321d151dba197af7ae54a2d6b33e363f396a4e2", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/f321d151dba197af7ae54a2d6b33e363f396a4e2", "committedDate": "2020-09-18T17:22:55Z", "message": "Merge branch 'master' into facet-cardinality-aggregator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNjQ5ODA2", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#pullrequestreview-491649806", "createdAt": "2020-09-18T17:21:45Z", "commit": {"oid": "21fa4d6be21727dc672b3756bd23005455e1080a"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyMTo0NVrOHUVp3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNzoyMTo0NVrOHUVp3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4ODM0OQ==", "bodyText": "do we still need this? should the use of id below (shard/datatype/uid) replace this?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r491088349", "createdAt": "2020-09-18T17:21:45Z", "author": {"login": "FineAndDandy"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/mapreduce/handler/facet/FacetHandler.java", "diffHunk": "@@ -221,118 +200,297 @@ public long process(KEYIN key, RawRecordContainer event, Multimap<String,Normali\n         final String shardDate = ShardIdFactory.getDateString(shardId);\n         Text dateColumnQualifier = new Text(shardDate);\n         \n-        HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n-        cardinality.offer(event.getId().toString());\n-        \n         Text cv = new Text(flatten(event.getVisibility()));\n         \n-        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(contextWriter, context, facetHashTableName, facetHashThreshold,\n-                        event.getDate());\n-        Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n-        \n-        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(new TokenPredicate());\n-        if (fieldFilter != null) {\n-            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilter);\n+        // filter out event fields that are generated as the result of tokenization.\n+        Stream<String> fieldKeyStream = fields.keySet().stream().filter(fieldSelectionPredicate);\n+        if (fieldFilterPredicate != null) {\n+            fieldKeyStream = fieldKeyStream.filter(fieldFilterPredicate);\n         }\n-        Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n-        List<Set<String>> keySetList = Lists.newArrayList();\n-        keySetList.add(keySet);\n-        keySetList.add(keySet);\n+        final Set<String> filteredFieldSet = fieldKeyStream.collect(Collectors.toSet());\n+        Set<String> pivotFieldSet = new HashSet<>(filteredFieldSet);\n+        Set<String> facetFieldSet = new HashSet<>(filteredFieldSet);\n+        \n+        // fields with a large number of values are hashed. See HashTableFunction for details\n+        // @formatter:off\n+        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(\n+                contextWriter, context, facetHashTableName, facetHashThreshold, event.getDate());\n+        final Multimap<String,NormalizedContentInterface> eventFields = filterAndHashEventFields(fields, filteredFieldSet, func);\n+        // @formatter:on\n         \n         long countWritten = 0;\n         \n-        Value sharedValue = new Value(cardinality.getBytes());\n-        Multimap<BulkIngestKey,Value> results = ArrayListMultimap.create();\n+        // the event id offered to the cardinality is a uid based on the 'EVENT_ID',\n+        // so it's helpful to have that around for debugging when logging about the\n+        // facet keys that are created.\n+        String eventId = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21fa4d6be21727dc672b3756bd23005455e1080a"}, "originalPosition": 167}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52fcc7c6470e3a5365b15b50187528f890f373f8", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/52fcc7c6470e3a5365b15b50187528f890f373f8", "committedDate": "2020-09-22T19:48:23Z", "message": "Merge branch 'master' into facet-cardinality-aggregator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDU5NTI3", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#pullrequestreview-496459527", "createdAt": "2020-09-25T14:11:09Z", "commit": {"oid": "a3ed8fa487710493dfc8d72b8856ba429960aa31"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDoxMToxMFrOHYFV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNDoxMToxMFrOHYFV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAxNTM5OA==", "bodyText": "It appears that eventId is needed to find the document if we failed to ingest.  May still be needed, but perhaps as trace and not debug?", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#discussion_r495015398", "createdAt": "2020-09-25T14:11:10Z", "author": {"login": "ivakegg"}, "path": "warehouse/ingest-core/src/main/java/datawave/ingest/mapreduce/handler/facet/FacetHandler.java", "diffHunk": "@@ -221,118 +200,297 @@ public long process(KEYIN key, RawRecordContainer event, Multimap<String,Normali\n         final String shardDate = ShardIdFactory.getDateString(shardId);\n         Text dateColumnQualifier = new Text(shardDate);\n         \n-        HyperLogLogPlus cardinality = new HyperLogLogPlus(10);\n-        cardinality.offer(event.getId().toString());\n-        \n         Text cv = new Text(flatten(event.getVisibility()));\n         \n-        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(contextWriter, context, facetHashTableName, facetHashThreshold,\n-                        event.getDate());\n-        Multimap<String,NormalizedContentInterface> eventFields = hashEventFields(fields, func);\n-        \n-        Stream<String> eventFieldKeyStream = eventFields.keySet().stream().filter(new TokenPredicate());\n-        if (fieldFilter != null) {\n-            eventFieldKeyStream = eventFieldKeyStream.filter(fieldFilter);\n+        // filter out event fields that are generated as the result of tokenization.\n+        Stream<String> fieldKeyStream = fields.keySet().stream().filter(fieldSelectionPredicate);\n+        if (fieldFilterPredicate != null) {\n+            fieldKeyStream = fieldKeyStream.filter(fieldFilterPredicate);\n         }\n-        Set<String> keySet = eventFieldKeyStream.collect(Collectors.toSet());\n-        List<Set<String>> keySetList = Lists.newArrayList();\n-        keySetList.add(keySet);\n-        keySetList.add(keySet);\n+        final Set<String> filteredFieldSet = fieldKeyStream.collect(Collectors.toSet());\n+        Set<String> pivotFieldSet = new HashSet<>(filteredFieldSet);\n+        Set<String> facetFieldSet = new HashSet<>(filteredFieldSet);\n+        \n+        // fields with a large number of values are hashed. See HashTableFunction for details\n+        // @formatter:off\n+        final HashTableFunction<KEYIN,KEYOUT,VALUEOUT> func = new HashTableFunction<>(\n+                contextWriter, context, facetHashTableName, facetHashThreshold, event.getDate());\n+        final Multimap<String,NormalizedContentInterface> eventFields = filterAndHashEventFields(fields, filteredFieldSet, func);\n+        // @formatter:on\n         \n         long countWritten = 0;\n         \n-        Value sharedValue = new Value(cardinality.getBytes());\n-        Multimap<BulkIngestKey,Value> results = ArrayListMultimap.create();\n+        // the event id offered to the cardinality is a uid based on the 'EVENT_ID',\n+        // so it's helpful to have that around for debugging when logging about the\n+        // facet keys that are created.\n+        String eventId = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA4ODM0OQ=="}, "originalCommit": {"oid": "21fa4d6be21727dc672b3756bd23005455e1080a"}, "originalPosition": 167}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDYzODgx", "url": "https://github.com/NationalSecurityAgency/datawave/pull/895#pullrequestreview-496463881", "createdAt": "2020-09-25T14:15:57Z", "commit": {"oid": "a3ed8fa487710493dfc8d72b8856ba429960aa31"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3ed8fa487710493dfc8d72b8856ba429960aa31", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/a3ed8fa487710493dfc8d72b8856ba429960aa31", "committedDate": "2020-09-23T19:42:11Z", "message": "FacetHandler now uses shard date for all Key timestamps  (#895)"}, "afterCommit": {"oid": "728c7979d35b9515efb5f128b73a4aba9b6a229d", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/728c7979d35b9515efb5f128b73a4aba9b6a229d", "committedDate": "2020-09-25T15:16:16Z", "message": "FacetHandler now uses shard date for all Key timestamps  (#895)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d9ce6cb8e5782cfe5855e3469b9e3794111f897", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/0d9ce6cb8e5782cfe5855e3469b9e3794111f897", "committedDate": "2020-09-28T15:05:29Z", "message": "FacetHandler now uses shard date for all Key timestamps  (#895)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "728c7979d35b9515efb5f128b73a4aba9b6a229d", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/728c7979d35b9515efb5f128b73a4aba9b6a229d", "committedDate": "2020-09-25T15:16:16Z", "message": "FacetHandler now uses shard date for all Key timestamps  (#895)"}, "afterCommit": {"oid": "0d9ce6cb8e5782cfe5855e3469b9e3794111f897", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/0d9ce6cb8e5782cfe5855e3469b9e3794111f897", "committedDate": "2020-09-28T15:05:29Z", "message": "FacetHandler now uses shard date for all Key timestamps  (#895)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6464b009be3ec7f47faa9a9e820f2f533071b224", "author": {"user": {"login": "drewfarris", "name": "Drew Farris"}}, "url": "https://github.com/NationalSecurityAgency/datawave/commit/6464b009be3ec7f47faa9a9e820f2f533071b224", "committedDate": "2020-09-28T15:43:11Z", "message": "Merge branch 'master' into facet-cardinality-aggregator"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1027, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}