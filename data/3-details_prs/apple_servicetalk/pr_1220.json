{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNTE1MTAy", "number": 1220, "title": "Publisher#flatMap*DelayError limit queued exceptions", "bodyText": "Motivation:\nPublisher#flatMap*DelayError operators will queue exceptions and add\nthem all as suppressed exceptions once the upstream source and all\nmapped publishers have terminated. However this operator maybe used for\nunbounded streams, with retry operators, and this may result in a large\namount of exceptions which will exhaust memory over time.\nModifications:\n\nLimit the number of exception that is accumulated, and allow users to\noverride the default value.\n\nResult:\nPublisher#flatMap*DelayError bounds the number of accumulated exceptions\nand will not exhaust memory for infinite streams.", "createdAt": "2020-11-18T22:08:53Z", "url": "https://github.com/apple/servicetalk/pull/1220", "merged": true, "mergeCommit": {"oid": "64861ec5fd9eaf8f41b2767c8240fa2b62aa0b11"}, "closed": true, "closedAt": "2020-11-19T18:58:51Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd3YSogH2gAyNTIzNTE1MTAyOjdlOGQzNGVlNGQzNmFmNWQ3OTgxZTJlOWNhODYyYTliODhkODAwYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeHQ2NAFqTUzNDc0NDI3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0", "committedDate": "2020-11-19T00:12:21Z", "message": "Publisher#flatMap*DelayError limit queued exceptions\n\nMotivation:\nPublisher#flatMap*DelayError operators will queue exceptions and add\nthem all as suppressed exceptions once the upstream source and all\nmapped publishers have terminated. However this operator maybe used for\nunbounded streams, with retry operators, and this may result in a large\namount of exceptions which will exhaust memory over time.\n\nModifications:\n- Limit the number of exception that is accumulated, and allow users to\noverride the default value.\n\nResult:\nPublisher#flatMap*DelayError bounds the number of accumulated exceptions\nand will not exhaust memory for infinite streams."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62a2793e08a5945398ae02e527bcab006be09824", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/62a2793e08a5945398ae02e527bcab006be09824", "committedDate": "2020-11-18T22:01:56Z", "message": "Publisher#flatMap*DelayError limit queued exceptions\n\nMotivation:\nPublisher#flatMap*DelayError operators will queue exceptions and add\nthem all as suppressed exceptions once the upstream source and all\nmapped publishers have terminated. However this operator maybe used for\nunbounded streams, with retry operators, and this may result in a large\namount of exceptions which will exhaust memory over time.\n\nModifications:\n- Limit the number of exception that is accumulated, and allow users to\noverride the default value.\n\nResult:\nPublisher#flatMap*DelayError bounds the number of accumulated exceptions\nand will not exhaust memory for infinite streams."}, "afterCommit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0", "committedDate": "2020-11-19T00:12:21Z", "message": "Publisher#flatMap*DelayError limit queued exceptions\n\nMotivation:\nPublisher#flatMap*DelayError operators will queue exceptions and add\nthem all as suppressed exceptions once the upstream source and all\nmapped publishers have terminated. However this operator maybe used for\nunbounded streams, with retry operators, and this may result in a large\namount of exceptions which will exhaust memory over time.\n\nModifications:\n- Limit the number of exception that is accumulated, and allow users to\noverride the default value.\n\nResult:\nPublisher#flatMap*DelayError bounds the number of accumulated exceptions\nand will not exhaust memory for infinite streams."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MDExMjQ4", "url": "https://github.com/apple/servicetalk/pull/1220#pullrequestreview-534011248", "createdAt": "2020-11-19T01:26:31Z", "commit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToyNjozMVrOH2I7vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTozMzozNlrOH2JEpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMTUxOA==", "bodyText": "Why this change is required?", "url": "https://github.com/apple/servicetalk/pull/1220#discussion_r526531518", "createdAt": "2020-11-19T01:26:31Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapMerge.java", "diffHunk": "@@ -383,6 +393,7 @@ private void drainPending() {\n                                     ++emittedCount;\n                                 }\n                             } catch (Throwable cause) {\n+                                ++emittedCount;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMTgxNA==", "bodyText": "maxConcurrency -> maxDelayedErrors", "url": "https://github.com/apple/servicetalk/pull/1220#discussion_r526531814", "createdAt": "2020-11-19T01:27:27Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapMerge.java", "diffHunk": "@@ -68,26 +69,35 @@\n  * @param <R> Type of {@link Publisher} returned by the operator.\n  */\n final class PublisherFlatMapMerge<T, R> extends AbstractAsynchronousPublisherOperator<T, R> {\n+    static final int FLAT_MAP_DEFAULT_CONCURRENCY = 16;\n     private static final Logger LOGGER = LoggerFactory.getLogger(PublisherFlatMapMerge.class);\n     private static final int MIN_MAPPED_DEMAND = 1;\n     private final Function<? super T, ? extends Publisher<? extends R>> mapper;\n     private final int maxConcurrency;\n-    private final boolean delayError;\n+    private final int maxDelayedErrors;\n \n     PublisherFlatMapMerge(Publisher<T> original, Function<? super T, ? extends Publisher<? extends R>> mapper,\n                           boolean delayError, Executor executor) {\n-        this(original, mapper, delayError, 8, executor);\n+        this(original, mapper, delayError, FLAT_MAP_DEFAULT_CONCURRENCY, executor);\n     }\n \n     PublisherFlatMapMerge(Publisher<T> original, Function<? super T, ? extends Publisher<? extends R>> mapper,\n                           boolean delayError, int maxConcurrency, Executor executor) {\n+        this(original, mapper, maxDelayedErrors(delayError), maxConcurrency, executor);\n+    }\n+\n+    PublisherFlatMapMerge(Publisher<T> original, Function<? super T, ? extends Publisher<? extends R>> mapper,\n+                          int maxDelayedErrors, int maxConcurrency, Executor executor) {\n         super(original, executor);\n-        this.mapper = requireNonNull(mapper);\n         if (maxConcurrency <= 0) {\n             throw new IllegalArgumentException(\"maxConcurrency: \" + maxConcurrency + \" (expected >0)\");\n         }\n+        if (maxDelayedErrors < 0) {\n+            throw new IllegalArgumentException(\"maxConcurrency: \" + maxDelayedErrors + \" (expected >=0)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMjM4Mg==", "bodyText": "Values < 0 are not allowed, consider using parent.source.maxDelayedErrors == 0 to make it more clear what 0 value means.", "url": "https://github.com/apple/servicetalk/pull/1220#discussion_r526532382", "createdAt": "2020-11-19T01:29:23Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapMerge.java", "diffHunk": "@@ -588,7 +599,7 @@ public void onNext(@Nullable final R r) {\n \n             @Override\n             public void onError(final Throwable t) {\n-                if (!parent.source.delayError) {\n+                if (parent.source.maxDelayedErrors <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMzQ4MQ==", "bodyText": "maxDelayedErrorsHint == 0 has a special different meaning. Users may think that if they use *DelayError methods and pass 0 here, all exceptions will be delayed, but none of them will be accumulated in the CompositeException. However, they will start seeing exceptions asap.", "url": "https://github.com/apple/servicetalk/pull/1220#discussion_r526533481", "createdAt": "2020-11-19T01:32:34Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Publisher.java", "diffHunk": "@@ -539,7 +589,62 @@ protected Publisher() {\n      */\n     public final <R> Publisher<R> flatMapMergeSingleDelayError(\n             Function<? super T, ? extends Single<? extends R>> mapper, int maxConcurrency) {\n-        return new PublisherFlatMapSingle<>(this, mapper, maxConcurrency, true, executor);\n+        return new PublisherFlatMapSingle<>(this, mapper, true, maxConcurrency, executor);\n+    }\n+\n+    /**\n+     * Map each element of this {@link Publisher} into a {@link Single}&lt;{@link R}&gt; and flatten all signals\n+     * emitted from each mapped {@link Single}&lt;{@link R}&gt; into the returned\n+     * {@link Publisher}&lt;{@link R}&gt;.\n+     * <p>\n+     * The behavior is the same as {@link #flatMapMergeSingle(Function, int)} with the exception that if any\n+     * {@link Single} returned by {@code mapper}, terminates with an error, the returned {@link Publisher} will not\n+     * immediately terminate. Instead, it will wait for this {@link Publisher} and all {@link Single}s to terminate and\n+     * then terminate the returned {@link Publisher} with all errors emitted by the {@link Single}s produced by the\n+     * {@code mapper}.\n+     * <p>\n+     * This method is similar to {@link #map(Function)} but the result is asynchronous, and provides a data\n+     * transformation in sequential programming similar to:\n+     * <pre>{@code\n+     *     Executor e = ...;\n+     *     List<T> tResults = resultOfThisPublisher();\n+     *     List<R> rResults = ...; // assume this is thread safe\n+     *     List<Throwable> errors = ...;  // assume this is thread safe\n+     *     CountDownLatch latch =  new CountDownLatch(tResults.size());\n+     *     for (T t : tResults) {\n+     *         // Note that flatMap process results in parallel.\n+     *         e.execute(() -> {\n+     *             try {\n+     *                 R r = mapper.apply(t); // Asynchronous result is flatten into a value by this operator.\n+     *                 rResults.add(r);\n+     *             } catch (Throwable cause) {\n+     *                 errors.add(cause);  // Asynchronous error is flatten into an error by this operator.\n+     *             } finally {\n+     *                 latch.countdown();\n+     *             }\n+     *         });\n+     *     }\n+     *     latch.await();\n+     *     if (errors.isEmpty()) {\n+     *         return rResults;\n+     *     }\n+     *     createAndThrowACompositeException(errors);\n+     * }</pre>\n+     *\n+     * @param mapper {@link Function} to convert each item emitted by this {@link Publisher} into a {@link Single}.\n+     * @param maxConcurrency Maximum active {@link Single}s at any time.\n+     * Even if the number of items requested by a {@link Subscriber} is more than this number,\n+     * this will never request more than this number at any point.\n+     * @param maxDelayedErrorsHint The maximum amount of errors that will be queued. After this point exceptions maybe\n+     * discarded to reduce memory consumption.\n+     * @param <R> Type of items emitted by the returned {@link Publisher}.\n+     * @return A new {@link Publisher} that emits all items emitted by each single produced by {@code mapper}.\n+     *\n+     * @see <a href=\"http://reactivex.io/documentation/operators/merge.html\">ReactiveX merge operator.</a>\n+     */\n+    public final <R> Publisher<R> flatMapMergeSingleDelayError(\n+            Function<? super T, ? extends Single<? extends R>> mapper, int maxConcurrency, int maxDelayedErrorsHint) {\n+        return new PublisherFlatMapSingle<>(this, mapper, maxDelayedErrorsHint, maxConcurrency, executor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMzY0OA==", "bodyText": "maxConcurrency -> maxDelayedErrors", "url": "https://github.com/apple/servicetalk/pull/1220#discussion_r526533648", "createdAt": "2020-11-19T01:33:10Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java", "diffHunk": "@@ -56,25 +58,32 @@\n  */\n final class PublisherFlatMapSingle<T, R> extends AbstractAsynchronousPublisherOperator<T, R> {\n     private static final Logger LOGGER = LoggerFactory.getLogger(PublisherFlatMapSingle.class);\n-\n     private final Function<? super T, ? extends Single<? extends R>> mapper;\n     private final int maxConcurrency;\n-    private final boolean delayError;\n+    private final int maxDelayedErrors;\n \n     PublisherFlatMapSingle(Publisher<T> original, Function<? super T, ? extends Single<? extends R>> mapper,\n                            boolean delayError, Executor executor) {\n-        this(original, mapper, 16, delayError, executor);\n+        this(original, mapper, delayError, FLAT_MAP_DEFAULT_CONCURRENCY, executor);\n+    }\n+\n+    PublisherFlatMapSingle(Publisher<T> original, Function<? super T, ? extends Single<? extends R>> mapper,\n+                           boolean delayError, int maxConcurrency, Executor executor) {\n+        this(original, mapper, maxDelayedErrors(delayError), maxConcurrency, executor);\n     }\n \n     PublisherFlatMapSingle(Publisher<T> original, Function<? super T, ? extends Single<? extends R>> mapper,\n-                           int maxConcurrency, boolean delayError, Executor executor) {\n+                           int maxDelayedErrors, int maxConcurrency, Executor executor) {\n         super(original, executor);\n-        this.mapper = requireNonNull(mapper);\n         if (maxConcurrency <= 0) {\n             throw new IllegalArgumentException(\"maxConcurrency: \" + maxConcurrency + \" (expected > 0)\");\n         }\n+        if (maxDelayedErrors < 0) {\n+            throw new IllegalArgumentException(\"maxConcurrency: \" + maxDelayedErrors + \" (expected >=0)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUzMzc5Nw==", "bodyText": "Values < 0 are not allowed, consider using parent.source.maxDelayedErrors == 0 to make it more clear what 0 value means.", "url": "https://github.com/apple/servicetalk/pull/1220#discussion_r526533797", "createdAt": "2020-11-19T01:33:36Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapSingle.java", "diffHunk": "@@ -390,12 +399,12 @@ public void onSuccess(@Nullable R result) {\n \n             @Override\n             public void onError(Throwable t) {\n-                if (!source.delayError) {\n+                if (source.maxDelayedErrors <= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e8d34ee4d36af5d7981e2e9ca862a9b88d800c0"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b10027d1b4a0c742d21f53ca7c5b5ecd24adc0fa", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/b10027d1b4a0c742d21f53ca7c5b5ecd24adc0fa", "committedDate": "2020-11-19T03:04:39Z", "message": "review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0NzQ0Mjcz", "url": "https://github.com/apple/servicetalk/pull/1220#pullrequestreview-534744273", "createdAt": "2020-11-19T18:42:42Z", "commit": {"oid": "b10027d1b4a0c742d21f53ca7c5b5ecd24adc0fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3337, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}