{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NzQ2MjU5", "number": 1081, "title": "Observer for DNS ServiceDiscoverer", "bodyText": "Motivation:\nProvides visibility into DNS resolutions behind DNS ServiceDiscoverer.\nModifications:\n\nAdd DnsServiceDiscovererObserver interface that users can use to\nbe notified about internal DNS resolutions;\nAdd DefaultDnsServiceDiscovererBuilder#oberser(...) method to\nconfigure DnsServiceDiscovererObserver;\nImprove javadoc;\nAdd tests;\n\nResult:\nUser can get visibility into DNS resolutions.", "createdAt": "2020-06-05T20:44:34Z", "url": "https://github.com/apple/servicetalk/pull/1081", "merged": true, "mergeCommit": {"oid": "ef44bcbcdb32efa1f6700140d01750195c718b93"}, "closed": true, "closedAt": "2020-06-08T23:18:02Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoVn8GgH2gAyNDI4NzQ2MjU5OjUxOWM4YjQ0YzE2YThiMDFlZmQ0MGJhMjE5MGQ0OGIyN2Q4MDk2ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpVF1CgFqTQyNjUyMDQ2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/519c8b44c16a8b01efd40ba2190d48b27d809686", "committedDate": "2020-06-05T16:54:41Z", "message": "Observer for DNS ServiceDiscoverer\n\nMotivation:\n\nProvides visibility into DNS resolutions behind DNS `ServiceDiscoverer`.\n\nModifications:\n\n- Add `DnsServiceDiscovererObserver` interface that users can use to\nbe notified about internal DNS resolutions;\n- Add `DefaultDnsServiceDiscovererBuilder#oberser(...)` method to\nconfigure `DnsServiceDiscovererObserver`;\n- Improve javadoc;\n- Add tests;\n\nResult:\n\nUser can get visibility into DNS resolutions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NjI3MTE0", "url": "https://github.com/apple/servicetalk/pull/1081#pullrequestreview-425627114", "createdAt": "2020-06-05T21:09:49Z", "commit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTowOTo1MFrOGf9bmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToxOToyM1rOGf9pOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTUzMA==", "bodyText": "This will create a new DnsDiscoveryObserver every time a retry strategy resubscribes. This is not ideal, but will work in consistent way with dnsSrvQuery.\nAlternative approaches I see:\n\nCreate a DnsDiscoveryObserver when users invoke ServiceDiscoverer#discover(...). Because ARecordPublisher does not support multiple subscribers anyway, that will work fine. However, the behavior will be different from dnsSrvQuery.\nCreate a DnsDiscoveryObserver inside handleSubscribe0. It will require rework of dnsSrvQuery to not trigger newResolution for subsequent A queries.", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436165530", "createdAt": "2020-06-05T21:09:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -146,27 +155,37 @@\n         resolver = builder.build();\n     }\n \n+    @Nullable\n+    private DnsDiscoveryObserver newDiscoveryObserver(final String address) {\n+        return observer != null ? observer.newDiscovery(address) : null;\n+    }\n+\n     @Override\n     public Publisher<ServiceDiscovererEvent<InetAddress>> dnsQuery(final String address) {\n-        return new ARecordPublisher(true, address).flatMapConcatIterable(identity());\n+        requireNonNull(address);\n+        return defer(() -> new ARecordPublisher(true, address, newDiscoveryObserver(address))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2OTAxNg==", "bodyText": "How should we react to exceptions from any method of the observer?\nCurrently, I fail the discovery publisher if newDiscovery or newResolution throws an exception. But log & ignore exceptions from resolutionFailed and resolutionCompleted methods of observer, because there we have additional logic that decides if we need to deliver a terminal now or not, and if we need to generate inactive events or not.\nI think we can say that an observer should not affect the behavior of the discovery publisher. Therefore, we can always log & ignore exceptions from the observer methods. WDYT?", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436169016", "createdAt": "2020-06-05T21:19:23Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -506,13 +548,25 @@ private void doQuery0() {\n                     handleTerminalError0(new ClosedServiceDiscovererException(DefaultDnsClient.this +\n                             \" has been closed!\"));\n                 } else {\n+                    final DnsResolutionObserver resolutionObserver;\n+                    if (discoveryObserver != null) {\n+                        try {\n+                            resolutionObserver = discoveryObserver.newResolution(name());\n+                        } catch (Throwable t) {\n+                            handleTerminalError0(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Njk3NTE4", "url": "https://github.com/apple/servicetalk/pull/1081#pullrequestreview-425697518", "createdAt": "2020-06-06T00:48:09Z", "commit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMDo0ODowOVrOGgAysw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQwMToxMjo1N1rOGgA9Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMDU5NQ==", "bodyText": "rename the field to observer?", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436220595", "createdAt": "2020-06-06T00:48:09Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsServiceDiscovererBuilder.java", "diffHunk": "@@ -54,6 +54,8 @@\n     private int minTTLSeconds = 10;\n     @Nullable\n     private DnsClientFilterFactory filterFactory;\n+    @Nullable\n+    private DnsServiceDiscovererObserver observerFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMDY3Mw==", "bodyText": "an observer -> a {@link DnsServiceDiscovererObserver}", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436220673", "createdAt": "2020-06-06T00:48:51Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsServiceDiscovererBuilder.java", "diffHunk": "@@ -189,6 +191,19 @@ public DefaultDnsServiceDiscovererBuilder ioExecutor(final IoExecutor ioExecutor\n         return this;\n     }\n \n+    /**\n+     * Sets an observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTE4Ng==", "bodyText": "Since this does not do a resolution but is a callback when a resolution starts; should we rename this to onNewQuery()?", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436221186", "createdAt": "2020-06-06T00:53:11Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserver.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.client.api.ServiceDiscoverer;\n+import io.servicetalk.client.api.ServiceDiscovererEvent;\n+\n+/**\n+ * An observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>\n+ * {@link ServiceDiscoverer} built by {@link DefaultDnsServiceDiscovererBuilder}.\n+ */\n+public interface DnsServiceDiscovererObserver {\n+\n+    /**\n+     * Notifies that a new {@link ServiceDiscoverer#discover(Object) discovery} started.\n+     *\n+     * @param name the name of DNS record to be discovered\n+     * @return {@link DnsDiscoveryObserver} that provides visibility into individual DNS resolutions behind the\n+     * associated discovery\n+     */\n+    DnsDiscoveryObserver newDiscovery(String name);\n+\n+    /**\n+     * An observer that provides visibility into individual DNS resolutions.\n+     */\n+    interface DnsDiscoveryObserver {\n+\n+        /**\n+         * Notifies that a new DNS resolution started.\n+         *\n+         * @param name the name for the <a href=\"https://tools.ietf.org/html/rfc1035#section-4.1.2\">DNS question</a> to\n+         * be queried\n+         * @return {@link DnsResolutionObserver} that provides visibility into results of the current DNS resolution\n+         */\n+        DnsResolutionObserver newResolution(String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTI3NA==", "bodyText": "Since we have resolution in the name; should we rename this to onError() and below to onSuccess()?", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436221274", "createdAt": "2020-06-06T00:53:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserver.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.client.api.ServiceDiscoverer;\n+import io.servicetalk.client.api.ServiceDiscovererEvent;\n+\n+/**\n+ * An observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>\n+ * {@link ServiceDiscoverer} built by {@link DefaultDnsServiceDiscovererBuilder}.\n+ */\n+public interface DnsServiceDiscovererObserver {\n+\n+    /**\n+     * Notifies that a new {@link ServiceDiscoverer#discover(Object) discovery} started.\n+     *\n+     * @param name the name of DNS record to be discovered\n+     * @return {@link DnsDiscoveryObserver} that provides visibility into individual DNS resolutions behind the\n+     * associated discovery\n+     */\n+    DnsDiscoveryObserver newDiscovery(String name);\n+\n+    /**\n+     * An observer that provides visibility into individual DNS resolutions.\n+     */\n+    interface DnsDiscoveryObserver {\n+\n+        /**\n+         * Notifies that a new DNS resolution started.\n+         *\n+         * @param name the name for the <a href=\"https://tools.ietf.org/html/rfc1035#section-4.1.2\">DNS question</a> to\n+         * be queried\n+         * @return {@link DnsResolutionObserver} that provides visibility into results of the current DNS resolution\n+         */\n+        DnsResolutionObserver newResolution(String name);\n+\n+        /**\n+         * An observer that provides visibility into DNS resolution results.\n+         */\n+        interface DnsResolutionObserver {\n+\n+            /**\n+             * Notifies that the current DNS resolution failed.\n+             *\n+             * @param cause {@link Throwable} as a cause for the failure\n+             */\n+            void resolutionFailed(Throwable cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTQyNw==", "bodyText": "Rename to added() and below to removed()?\nbecame* reads odd as this represents a record and became is past.", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436221427", "createdAt": "2020-06-06T00:55:20Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserver.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.client.api.ServiceDiscoverer;\n+import io.servicetalk.client.api.ServiceDiscovererEvent;\n+\n+/**\n+ * An observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>\n+ * {@link ServiceDiscoverer} built by {@link DefaultDnsServiceDiscovererBuilder}.\n+ */\n+public interface DnsServiceDiscovererObserver {\n+\n+    /**\n+     * Notifies that a new {@link ServiceDiscoverer#discover(Object) discovery} started.\n+     *\n+     * @param name the name of DNS record to be discovered\n+     * @return {@link DnsDiscoveryObserver} that provides visibility into individual DNS resolutions behind the\n+     * associated discovery\n+     */\n+    DnsDiscoveryObserver newDiscovery(String name);\n+\n+    /**\n+     * An observer that provides visibility into individual DNS resolutions.\n+     */\n+    interface DnsDiscoveryObserver {\n+\n+        /**\n+         * Notifies that a new DNS resolution started.\n+         *\n+         * @param name the name for the <a href=\"https://tools.ietf.org/html/rfc1035#section-4.1.2\">DNS question</a> to\n+         * be queried\n+         * @return {@link DnsResolutionObserver} that provides visibility into results of the current DNS resolution\n+         */\n+        DnsResolutionObserver newResolution(String name);\n+\n+        /**\n+         * An observer that provides visibility into DNS resolution results.\n+         */\n+        interface DnsResolutionObserver {\n+\n+            /**\n+             * Notifies that the current DNS resolution failed.\n+             *\n+             * @param cause {@link Throwable} as a cause for the failure\n+             */\n+            void resolutionFailed(Throwable cause);\n+\n+            /**\n+             * Notifies that the current DNS resolution completed successfully.\n+             *\n+             * @param result the {@link ResolutionResult}\n+             */\n+            void resolutionCompleted(ResolutionResult result);\n+\n+            /**\n+             * Results of the current DNS resolution.\n+             */\n+            interface ResolutionResult {\n+\n+                /**\n+                 * Number of resolved DNS records.\n+                 *\n+                 * @return the number of resolved DNS records\n+                 */\n+                int resolvedRecords();\n+\n+                /**\n+                 * Minimum Time To Live (TTL) of the resolved DNS records in seconds.\n+                 *\n+                 * @return the minimum Time To Live (TTL) of the resolved DNS records in seconds\n+                 */\n+                int ttl();\n+\n+                /**\n+                 * Number of records that became {@link ServiceDiscovererEvent#isAvailable() active}.\n+                 *\n+                 * @return the number of records that became {@link ServiceDiscovererEvent#isAvailable() active}\n+                 */\n+                int becameActive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTU1Mg==", "bodyText": "Prefix the name with on to indicate this does not do discovery, just a callback", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436221552", "createdAt": "2020-06-06T00:56:11Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserver.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.client.api.ServiceDiscoverer;\n+import io.servicetalk.client.api.ServiceDiscovererEvent;\n+\n+/**\n+ * An observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>\n+ * {@link ServiceDiscoverer} built by {@link DefaultDnsServiceDiscovererBuilder}.\n+ */\n+public interface DnsServiceDiscovererObserver {\n+\n+    /**\n+     * Notifies that a new {@link ServiceDiscoverer#discover(Object) discovery} started.\n+     *\n+     * @param name the name of DNS record to be discovered\n+     * @return {@link DnsDiscoveryObserver} that provides visibility into individual DNS resolutions behind the\n+     * associated discovery\n+     */\n+    DnsDiscoveryObserver newDiscovery(String name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTk3OQ==", "bodyText": "Just make the discoveryObserver protected in the base class instead of passing back again in this method.", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436221979", "createdAt": "2020-06-06T01:00:27Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -229,25 +248,25 @@ private void assertInEventloop() {\n     }\n \n     private final class SrvRecordPublisher extends AbstractDnsPublisher<HostAndPort> {\n-        private final String serviceName;\n \n-        private SrvRecordPublisher(String serviceName) {\n-            this.serviceName = requireNonNull(serviceName);\n+        private SrvRecordPublisher(final String serviceName, @Nullable final DnsDiscoveryObserver discoveryObserver) {\n+            super(serviceName, discoveryObserver);\n         }\n \n         @Override\n         public String toString() {\n-            return serviceName;\n+            return \"SRV lookups for \" + name();\n         }\n \n         @Override\n         protected AbstractDnsSubscription newSubscription(\n-                final Subscriber<? super Iterable<ServiceDiscovererEvent<HostAndPort>>> subscriber) {\n-            return new AbstractDnsSubscription(true, subscriber) {\n+                final Subscriber<? super Iterable<ServiceDiscovererEvent<HostAndPort>>> subscriber,\n+                @Nullable final DnsDiscoveryObserver discoveryObserver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjQ4MA==", "bodyText": "Since we can not distinguish between a retry vs a new subscribe, so creating a new observer per subscribe makes sense to me.\nSince, users control the scope of DnsServiceDiscovererObserver and association with a client, if the same observer instance needs to be shared across retries/subscribes, they can do so by returning the same observer instance from newDiscovery()?", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436222480", "createdAt": "2020-06-06T01:05:32Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -146,27 +155,37 @@\n         resolver = builder.build();\n     }\n \n+    @Nullable\n+    private DnsDiscoveryObserver newDiscoveryObserver(final String address) {\n+        return observer != null ? observer.newDiscovery(address) : null;\n+    }\n+\n     @Override\n     public Publisher<ServiceDiscovererEvent<InetAddress>> dnsQuery(final String address) {\n-        return new ARecordPublisher(true, address).flatMapConcatIterable(identity());\n+        requireNonNull(address);\n+        return defer(() -> new ARecordPublisher(true, address, newDiscoveryObserver(address))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2NTUzMA=="}, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMjg4OA==", "bodyText": "Logging and ignoring keeps the control-flow simple. Since, we do not expect the observer methods to throw, this sounds reasonable.", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436222888", "createdAt": "2020-06-06T01:09:21Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -506,13 +548,25 @@ private void doQuery0() {\n                     handleTerminalError0(new ClosedServiceDiscovererException(DefaultDnsClient.this +\n                             \" has been closed!\"));\n                 } else {\n+                    final DnsResolutionObserver resolutionObserver;\n+                    if (discoveryObserver != null) {\n+                        try {\n+                            resolutionObserver = discoveryObserver.newResolution(name());\n+                        } catch (Throwable t) {\n+                            handleTerminalError0(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE2OTAxNg=="}, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 245}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMzMwNw==", "bodyText": "Instead of reiterating the events list can we have calculateDifference() method accept a BiFunction to report the numbers?", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436223307", "createdAt": "2020-06-06T01:12:57Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -625,6 +682,42 @@ private void handleResolveDone0(final Future<DnsAnswer<T>> addressFuture) {\n                 }\n             }\n \n+            private void reportResolutionFailed(@Nullable final DnsResolutionObserver resolutionObserver,\n+                                                final Throwable cause) {\n+                if (resolutionObserver == null) {\n+                    return;\n+                }\n+                try {\n+                    resolutionObserver.resolutionFailed(cause);\n+                } catch (Throwable unexpected) {\n+                    LOGGER.warn(\"Unexpected exception from {} while reporting DNS resolution failure\",\n+                            resolutionObserver, unexpected);\n+                }\n+            }\n+\n+            private void reportResolutionResult(@Nullable final DnsResolutionObserver resolutionObserver,\n+                                                final DnsAnswer<T> dnsAnswer,\n+                                                @Nullable final List<ServiceDiscovererEvent<T>> events) {\n+                if (resolutionObserver == null) {\n+                    return;\n+                }\n+                final ResolutionResult result;\n+                final int ttl = (int) NANOSECONDS.toSeconds(dnsAnswer.ttlNanos());\n+                if (events == null) {\n+                    result = new DefaultResolutionResult(dnsAnswer.answer().size(), ttl, 0, 0);\n+                } else {\n+                    final int becameActive = (int) events.stream().filter(ServiceDiscovererEvent::isAvailable).count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 322}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "184cb90d650d33f7f9c3b0bd712a7085db718c3b", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/184cb90d650d33f7f9c3b0bd712a7085db718c3b", "committedDate": "2020-06-08T06:18:35Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14d3713c68326495211c00ba8a64d2ed0880e600", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/14d3713c68326495211c00ba8a64d2ed0880e600", "committedDate": "2020-06-08T06:43:22Z", "message": "Ignore if observer impl throws"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a83fe7dafdb93e5d8f04631b7aed42973f4cc70", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/6a83fe7dafdb93e5d8f04631b7aed42973f4cc70", "committedDate": "2020-06-08T07:38:04Z", "message": "Do not reiterate over events list to compute numbers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MDI0NDM3", "url": "https://github.com/apple/servicetalk/pull/1081#pullrequestreview-426024437", "createdAt": "2020-06-08T08:43:47Z", "commit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo0Mzo0N1rOGgUYMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwODo1MDoyNlrOGgUmNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MTQ5MQ==", "bodyText": "add javadocs to the protected methods", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436541491", "createdAt": "2020-06-08T08:43:47Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -377,11 +397,25 @@ long ttlNanos() {\n \n     private abstract class AbstractDnsPublisher<T>\n             extends SubscribablePublisher<Iterable<ServiceDiscovererEvent<T>>> {\n+\n+        private final String name;\n+        @Nullable\n+        private final DnsDiscoveryObserver discoveryObserver;\n         @Nullable\n         private AbstractDnsSubscription subscription;\n \n-        protected abstract AbstractDnsSubscription\n-                newSubscription(Subscriber<? super Iterable<ServiceDiscovererEvent<T>>> subscriber);\n+        AbstractDnsPublisher(final String name, @Nullable final DnsDiscoveryObserver discoveryObserver) {\n+            this.name = name;\n+            this.discoveryObserver = discoveryObserver;\n+        }\n+\n+        protected abstract AbstractDnsSubscription newSubscription(\n+                Subscriber<? super Iterable<ServiceDiscovererEvent<T>>> subscriber,\n+                @Nullable DnsDiscoveryObserver discoveryObserver);\n+\n+        protected final String name() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0MjIzOA==", "bodyText": "should we also add the cause as addSuppressed ?", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436542238", "createdAt": "2020-06-08T08:45:10Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -625,6 +682,42 @@ private void handleResolveDone0(final Future<DnsAnswer<T>> addressFuture) {\n                 }\n             }\n \n+            private void reportResolutionFailed(@Nullable final DnsResolutionObserver resolutionObserver,\n+                                                final Throwable cause) {\n+                if (resolutionObserver == null) {\n+                    return;\n+                }\n+                try {\n+                    resolutionObserver.resolutionFailed(cause);\n+                } catch (Throwable unexpected) {\n+                    LOGGER.warn(\"Unexpected exception from {} while reporting DNS resolution failure\",\n+                            resolutionObserver, unexpected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NDIzNQ==", "bodyText": "nit: this may be just a matter of style but this is quite some odd hierarchy with all these nested interfaces (3 levels).", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436544235", "createdAt": "2020-06-08T08:48:54Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserver.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.client.api.ServiceDiscoverer;\n+import io.servicetalk.client.api.ServiceDiscovererEvent;\n+\n+/**\n+ * An observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>\n+ * {@link ServiceDiscoverer} built by {@link DefaultDnsServiceDiscovererBuilder}.\n+ */\n+public interface DnsServiceDiscovererObserver {\n+\n+    /**\n+     * Notifies that a new {@link ServiceDiscoverer#discover(Object) discovery} started.\n+     *\n+     * @param name the name of DNS record to be discovered\n+     * @return {@link DnsDiscoveryObserver} that provides visibility into individual DNS resolutions behind the\n+     * associated discovery\n+     */\n+    DnsDiscoveryObserver newDiscovery(String name);\n+\n+    /**\n+     * An observer that provides visibility into individual DNS resolutions.\n+     */\n+    interface DnsDiscoveryObserver {\n+\n+        /**\n+         * Notifies that a new DNS resolution started.\n+         *\n+         * @param name the name for the <a href=\"https://tools.ietf.org/html/rfc1035#section-4.1.2\">DNS question</a> to\n+         * be queried\n+         * @return {@link DnsResolutionObserver} that provides visibility into results of the current DNS resolution\n+         */\n+        DnsResolutionObserver newResolution(String name);\n+\n+        /**\n+         * An observer that provides visibility into DNS resolution results.\n+         */\n+        interface DnsResolutionObserver {\n+\n+            /**\n+             * Notifies that the current DNS resolution failed.\n+             *\n+             * @param cause {@link Throwable} as a cause for the failure\n+             */\n+            void resolutionFailed(Throwable cause);\n+\n+            /**\n+             * Notifies that the current DNS resolution completed successfully.\n+             *\n+             * @param result the {@link ResolutionResult}\n+             */\n+            void resolutionCompleted(ResolutionResult result);\n+\n+            /**\n+             * Results of the current DNS resolution.\n+             */\n+            interface ResolutionResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NDUyNw==", "bodyText": "consider: numResolvedRecords", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436544527", "createdAt": "2020-06-08T08:49:25Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserver.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.client.api.ServiceDiscoverer;\n+import io.servicetalk.client.api.ServiceDiscovererEvent;\n+\n+/**\n+ * An observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>\n+ * {@link ServiceDiscoverer} built by {@link DefaultDnsServiceDiscovererBuilder}.\n+ */\n+public interface DnsServiceDiscovererObserver {\n+\n+    /**\n+     * Notifies that a new {@link ServiceDiscoverer#discover(Object) discovery} started.\n+     *\n+     * @param name the name of DNS record to be discovered\n+     * @return {@link DnsDiscoveryObserver} that provides visibility into individual DNS resolutions behind the\n+     * associated discovery\n+     */\n+    DnsDiscoveryObserver newDiscovery(String name);\n+\n+    /**\n+     * An observer that provides visibility into individual DNS resolutions.\n+     */\n+    interface DnsDiscoveryObserver {\n+\n+        /**\n+         * Notifies that a new DNS resolution started.\n+         *\n+         * @param name the name for the <a href=\"https://tools.ietf.org/html/rfc1035#section-4.1.2\">DNS question</a> to\n+         * be queried\n+         * @return {@link DnsResolutionObserver} that provides visibility into results of the current DNS resolution\n+         */\n+        DnsResolutionObserver newResolution(String name);\n+\n+        /**\n+         * An observer that provides visibility into DNS resolution results.\n+         */\n+        interface DnsResolutionObserver {\n+\n+            /**\n+             * Notifies that the current DNS resolution failed.\n+             *\n+             * @param cause {@link Throwable} as a cause for the failure\n+             */\n+            void resolutionFailed(Throwable cause);\n+\n+            /**\n+             * Notifies that the current DNS resolution completed successfully.\n+             *\n+             * @param result the {@link ResolutionResult}\n+             */\n+            void resolutionCompleted(ResolutionResult result);\n+\n+            /**\n+             * Results of the current DNS resolution.\n+             */\n+            interface ResolutionResult {\n+\n+                /**\n+                 * Number of resolved DNS records.\n+                 *\n+                 * @return the number of resolved DNS records\n+                 */\n+                int resolvedRecords();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NDY4Mw==", "bodyText": "Also consider prefix with num", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436544683", "createdAt": "2020-06-08T08:49:43Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserver.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.client.api.ServiceDiscoverer;\n+import io.servicetalk.client.api.ServiceDiscovererEvent;\n+\n+/**\n+ * An observer that provides visibility into <a href=\"https://tools.ietf.org/html/rfc1034\">DNS</a>\n+ * {@link ServiceDiscoverer} built by {@link DefaultDnsServiceDiscovererBuilder}.\n+ */\n+public interface DnsServiceDiscovererObserver {\n+\n+    /**\n+     * Notifies that a new {@link ServiceDiscoverer#discover(Object) discovery} started.\n+     *\n+     * @param name the name of DNS record to be discovered\n+     * @return {@link DnsDiscoveryObserver} that provides visibility into individual DNS resolutions behind the\n+     * associated discovery\n+     */\n+    DnsDiscoveryObserver newDiscovery(String name);\n+\n+    /**\n+     * An observer that provides visibility into individual DNS resolutions.\n+     */\n+    interface DnsDiscoveryObserver {\n+\n+        /**\n+         * Notifies that a new DNS resolution started.\n+         *\n+         * @param name the name for the <a href=\"https://tools.ietf.org/html/rfc1035#section-4.1.2\">DNS question</a> to\n+         * be queried\n+         * @return {@link DnsResolutionObserver} that provides visibility into results of the current DNS resolution\n+         */\n+        DnsResolutionObserver newResolution(String name);\n+\n+        /**\n+         * An observer that provides visibility into DNS resolution results.\n+         */\n+        interface DnsResolutionObserver {\n+\n+            /**\n+             * Notifies that the current DNS resolution failed.\n+             *\n+             * @param cause {@link Throwable} as a cause for the failure\n+             */\n+            void resolutionFailed(Throwable cause);\n+\n+            /**\n+             * Notifies that the current DNS resolution completed successfully.\n+             *\n+             * @param result the {@link ResolutionResult}\n+             */\n+            void resolutionCompleted(ResolutionResult result);\n+\n+            /**\n+             * Results of the current DNS resolution.\n+             */\n+            interface ResolutionResult {\n+\n+                /**\n+                 * Number of resolved DNS records.\n+                 *\n+                 * @return the number of resolved DNS records\n+                 */\n+                int resolvedRecords();\n+\n+                /**\n+                 * Minimum Time To Live (TTL) of the resolved DNS records in seconds.\n+                 *\n+                 * @return the minimum Time To Live (TTL) of the resolved DNS records in seconds\n+                 */\n+                int ttl();\n+\n+                /**\n+                 * Number of records that became {@link ServiceDiscovererEvent#isAvailable() active}.\n+                 *\n+                 * @return the number of records that became {@link ServiceDiscovererEvent#isAvailable() active}\n+                 */\n+                int becameActive();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTQyNw=="}, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjU0NTA3OA==", "bodyText": "nit: add private constructor.", "url": "https://github.com/apple/servicetalk/pull/1081#discussion_r436545078", "createdAt": "2020-06-08T08:50:26Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-dns-discovery-netty/src/test/java/io/servicetalk/dns/discovery/netty/DnsServiceDiscovererObserverTest.java", "diffHunk": "@@ -0,0 +1,266 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.dns.discovery.netty;\n+\n+import io.servicetalk.concurrent.api.CompositeCloseable;\n+import io.servicetalk.concurrent.api.Publisher;\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.dns.discovery.netty.DnsServiceDiscovererObserver.DnsDiscoveryObserver;\n+import io.servicetalk.dns.discovery.netty.DnsServiceDiscovererObserver.DnsDiscoveryObserver.DnsResolutionObserver;\n+import io.servicetalk.dns.discovery.netty.DnsServiceDiscovererObserver.DnsDiscoveryObserver.DnsResolutionObserver.ResolutionResult;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.net.UnknownHostException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.function.BiFunction;\n+\n+import static io.servicetalk.concurrent.api.AsyncCloseables.newCompositeCloseable;\n+import static io.servicetalk.dns.discovery.netty.DnsTestUtils.nextIp;\n+import static io.servicetalk.dns.discovery.netty.TestRecordStore.DEFAULT_TTL;\n+import static io.servicetalk.dns.discovery.netty.TestRecordStore.createSrvRecord;\n+import static java.util.Collections.singletonList;\n+import static org.apache.directory.server.dns.messages.RecordType.A;\n+import static org.apache.directory.server.dns.messages.RecordType.SRV;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.anyOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.junit.Assert.assertThrows;\n+\n+public class DnsServiceDiscovererObserverTest {\n+    private static final String HOST_NAME = \"servicetalk.io\";\n+    private static final String SERVICE_NAME = \"servicetalk\";\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final TestRecordStore recordStore = new TestRecordStore();\n+    private final TestDnsServer dnsServer = new TestDnsServer(recordStore);\n+    private final CompositeCloseable toClose = newCompositeCloseable();\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        recordStore.defaultResponse(HOST_NAME, A, nextIp(), nextIp());\n+        recordStore.defaultResponse(SERVICE_NAME, SRV, () -> singletonList(\n+                createSrvRecord(SERVICE_NAME, HOST_NAME, 10, 10, 443, DEFAULT_TTL)));\n+        dnsServer.start();\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            toClose.closeGracefully();\n+        } finally {\n+            dnsServer.stop();\n+        }\n+    }\n+\n+    private DnsClient dnsClient(DnsServiceDiscovererObserver observerFactory) {\n+        return toClose.append(new DefaultDnsServiceDiscovererBuilder()\n+                .observer(observerFactory)\n+                .dnsResolverAddressTypes(DnsResolverAddressTypes.IPV4_PREFERRED)\n+                .optResourceEnabled(false)\n+                .dnsServerAddressStreamProvider(new SingletonDnsServerAddressStreamProvider(\n+                        new SingletonDnsServerAddresses(dnsServer.localAddress())))\n+                .ndots(1)\n+                .minTTL(1)\n+                .build());\n+    }\n+\n+    @Test\n+    public void aQueryTriggersNewDiscoveryObserver() throws Exception {\n+        testNewDiscoveryObserver(DnsClient::dnsQuery, HOST_NAME);\n+    }\n+\n+    @Test\n+    public void srvQueryTriggersNewDiscoveryObserver() throws Exception {\n+        testNewDiscoveryObserver(DnsClient::dnsSrvQuery, SERVICE_NAME);\n+    }\n+\n+    private void testNewDiscoveryObserver(BiFunction<DnsClient, String, Publisher<?>> publisherFactory,\n+                                          String expectedName) throws Exception {\n+        List<String> newDiscoveryCalls = new ArrayList<>();\n+        DnsClient client = dnsClient(name -> {\n+            newDiscoveryCalls.add(name);\n+            return NoopDnsDiscoveryObserver.INSTANCE;\n+        });\n+\n+        Publisher<?> publisher = publisherFactory.apply(client, expectedName);\n+        assertThat(\"Unexpected calls to newDiscovery(name)\", newDiscoveryCalls, hasSize(0));\n+        // Wait until SD returns at least one address:\n+        publisher.takeAtMost(1).ignoreElements().toFuture().get();\n+        assertThat(\"Unexpected number of calls to newDiscovery(name)\", newDiscoveryCalls, hasSize(1));\n+        assertThat(\"Unexpected name for newDiscovery(name)\", newDiscoveryCalls, hasItem(equalTo(expectedName)));\n+    }\n+\n+    @Test\n+    public void aQueryTriggersNewResolutionObserver() throws Exception {\n+        List<String> newResolution = new ArrayList<>();\n+        DnsClient client = dnsClient(__ -> name -> {\n+            newResolution.add(name);\n+            return NoopDnsResolutionObserver.INSTANCE;\n+        });\n+\n+        Publisher<?> publisher = client.dnsQuery(HOST_NAME);\n+        assertThat(\"Unexpected calls to newResolution(name)\", newResolution, hasSize(0));\n+        // Wait until SD returns at least one address:\n+        publisher.takeAtMost(1).ignoreElements().toFuture().get();\n+        assertThat(\"Unexpected number of calls to newResolution(name)\", newResolution, hasSize(1));\n+        assertThat(\"Unexpected name for newResolution(name)\", newResolution, hasItem(equalTo(HOST_NAME)));\n+    }\n+\n+    @Test\n+    public void srvQueryTriggersNewResolutionObserver() throws Exception {\n+        System.err.println(NoopDnsResolutionObserver.INSTANCE.toString());\n+        List<String> newResolution = new ArrayList<>();\n+        DnsClient client = dnsClient(__ -> name -> {\n+            newResolution.add(name);\n+            return NoopDnsResolutionObserver.INSTANCE;\n+        });\n+\n+        Publisher<?> publisher = client.dnsSrvQuery(SERVICE_NAME);\n+        assertThat(\"Unexpected calls to newResolution(name)\", newResolution, hasSize(0));\n+        // Wait until SD returns at least one address:\n+        publisher.takeAtMost(1).ignoreElements().toFuture().get();\n+        assertThat(\"Unexpected number of calls to newResolution(name)\", newResolution,\n+                hasSize(greaterThanOrEqualTo(2)));\n+        assertThat(\"Unexpected name for newResolution(name)\", newResolution, hasItem(equalTo(SERVICE_NAME)));\n+        assertThat(\"Unexpected name for newResolution(name)\", newResolution,\n+                hasItem(anyOf(equalTo(HOST_NAME), equalTo(HOST_NAME + '.'))));\n+    }\n+\n+    @Test\n+    public void aQueryFailedResolution() {\n+        testFailedResolution(DnsClient::dnsQuery);\n+    }\n+\n+    @Test\n+    public void srvQueryFailedResolution() {\n+        testFailedResolution(DnsClient::dnsSrvQuery);\n+    }\n+\n+    private void testFailedResolution(BiFunction<DnsClient, String, Publisher<?>> publisherFactory) {\n+        List<Throwable> resolutionFailures = new ArrayList<>();\n+        DnsClient client = dnsClient(__ -> name -> new NoopDnsResolutionObserver() {\n+            @Override\n+            public void resolutionFailed(final Throwable cause) {\n+                resolutionFailures.add(cause);\n+            }\n+        });\n+\n+        Publisher<?> publisher = publisherFactory.apply(client, \"invalid.\");\n+        assertThat(\"Unexpected calls to resolutionFailed(t)\", resolutionFailures, hasSize(0));\n+        // Wait until SD returns at least one address:\n+        ExecutionException ee = assertThrows(ExecutionException.class,\n+                () -> publisher.takeAtMost(1).ignoreElements().toFuture().get());\n+        Throwable cause = ee.getCause();\n+        assertThat(cause, instanceOf(UnknownHostException.class));\n+        assertThat(\"Unexpected number of calls to resolutionFailed(t)\", resolutionFailures, hasSize(1));\n+        assertThat(\"Unexpected name for resolutionFailed(t)\", resolutionFailures, hasItem(sameInstance(cause)));\n+    }\n+\n+    @Test\n+    public void aQueryResolutionResult() throws Exception {\n+        List<ResolutionResult> results = new ArrayList<>();\n+        DnsClient client = dnsClient(__ -> name -> new NoopDnsResolutionObserver() {\n+            @Override\n+            public void resolutionCompleted(final ResolutionResult result) {\n+                results.add(result);\n+            }\n+        });\n+\n+        Publisher<?> publisher = client.dnsQuery(HOST_NAME);\n+        assertThat(\"Unexpected calls to resolutionComplete\", results, hasSize(0));\n+        // Wait until SD returns at least one address:\n+        publisher.takeAtMost(1).ignoreElements().toFuture().get();\n+        assertThat(\"Unexpected number of calls to resolutionComplete\", results, hasSize(1));\n+        ResolutionResult result = results.get(0);\n+        assertThat(result.resolvedRecords(), is(2));\n+        assertThat(result.ttl(), is(DEFAULT_TTL));\n+        assertThat(result.becameActive(), is(2));\n+        assertThat(result.becameInactive(), is(0));\n+    }\n+\n+    @Test\n+    public void srvQueryResolutionResult() throws Exception {\n+        Map<String, ResolutionResult> results = new HashMap<>();\n+        DnsClient client = dnsClient(__ -> name -> new NoopDnsResolutionObserver() {\n+            @Override\n+            public void resolutionCompleted(final ResolutionResult result) {\n+                results.put(name, result);\n+            }\n+        });\n+\n+        Publisher<?> publisher = client.dnsSrvQuery(SERVICE_NAME);\n+        assertThat(\"Unexpected calls to resolutionComplete\", results.entrySet(), hasSize(0));\n+        // Wait until SD returns at least one address:\n+        publisher.takeAtMost(1).ignoreElements().toFuture().get();\n+        assertThat(\"Unexpected number of calls to resolutionComplete\", results.entrySet(), hasSize(2));\n+\n+        ResolutionResult srvResult = results.get(SERVICE_NAME);\n+        assertThat(srvResult.resolvedRecords(), is(1));\n+        assertThat(srvResult.ttl(), is(DEFAULT_TTL));\n+        assertThat(srvResult.becameActive(), is(1));\n+        assertThat(srvResult.becameInactive(), is(0));\n+\n+        ResolutionResult dnsResult = results.get(HOST_NAME + '.');\n+        assertThat(dnsResult.resolvedRecords(), is(2));\n+        assertThat(dnsResult.ttl(), is(DEFAULT_TTL));\n+        assertThat(dnsResult.becameActive(), is(2));\n+        assertThat(dnsResult.becameInactive(), is(0));\n+    }\n+\n+    private static final class NoopDnsDiscoveryObserver implements DnsDiscoveryObserver {\n+        static final DnsDiscoveryObserver INSTANCE = new NoopDnsDiscoveryObserver();\n+\n+        private NoopDnsDiscoveryObserver() {\n+            // Singleton\n+        }\n+\n+        @Override\n+        public DnsResolutionObserver newResolution(final String name) {\n+            return NoopDnsResolutionObserver.INSTANCE;\n+        }\n+    }\n+\n+    private static class NoopDnsResolutionObserver implements DnsResolutionObserver {\n+        static final DnsResolutionObserver INSTANCE = new NoopDnsResolutionObserver();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "519c8b44c16a8b01efd40ba2190d48b27d809686"}, "originalPosition": 255}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76448c727dd0a7f71b6c54530ca4b88c097962f", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/c76448c727dd0a7f71b6c54530ca4b88c097962f", "committedDate": "2020-06-08T14:58:06Z", "message": "nAvailable/nUnavailable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a00367005676d0fd7ecbdba3a3dd741d87210110", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a00367005676d0fd7ecbdba3a3dd741d87210110", "committedDate": "2020-06-08T15:08:26Z", "message": "Add javadoc for protected methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64877e331e03a2cb8731d174ecc925b6895c46ce", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/64877e331e03a2cb8731d174ecc925b6895c46ce", "committedDate": "2020-06-08T15:14:22Z", "message": "addSuppressed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b9ba06c578f5049db3c2aef89a2ed64e06a9bc3", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/0b9ba06c578f5049db3c2aef89a2ed64e06a9bc3", "committedDate": "2020-06-08T15:16:32Z", "message": "Change 3-level nested interfaces into 1-level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "984ceafad0623b4929f06a1c7df6db3d7a3b6395", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/984ceafad0623b4929f06a1c7df6db3d7a3b6395", "committedDate": "2020-06-08T15:27:44Z", "message": "Suppress SpotBugs false alarm"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTIwNDYy", "url": "https://github.com/apple/servicetalk/pull/1081#pullrequestreview-426520462", "createdAt": "2020-06-08T18:51:21Z", "commit": {"oid": "984ceafad0623b4929f06a1c7df6db3d7a3b6395"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3736, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}