{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODUzNDg1", "number": 1034, "title": "More robust exception handling from Subscribers", "bodyText": "Motivation:\nThe ReactiveStreams specification states that Publisher#subscribe must\nnot throw [1] and also that Subscriber methods must not throw [2].\nHowever in practice these methods may throw and we need to make a best\neffort to propagate exceptions and preserve the asynchronous control\nflow. SubscriberUtils has utility methods deliverTerminalFromSource and\nhandleExceptionFromOnSubscribe to help with this task. However the\nlatter method may propagate exceptions which will result in our error\nrecovery code delivering multiple onSubscribe and onError calls which\nfurther violates the ReactiveStreams specification [1][3]. Here is an\nexample:\nNeverPublisher#subscribe()\nsubscriber.onSubscribe(..)\ncatch(cause)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause)\ncatch(cause2)  (in Publisher#handleSubscribe(..))\ndeliverTerminalFromSource(..)\nsubscriber.onSubscribe(..) // duplicate call by our error recovery\ncatch(cause3)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause3) // duplicate call by our error recovery\n\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.9\n[2] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#2.13\n[3] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.7\nModifications:\n\nSubscriberUtils#handleExceptionFromOnSubscribe should not re-throw\nUsage of IGNORE_CANCEL and EMPTY_SUBSCRIPTION should be investigated\nto utilize the SubscriberUtils methods to minimize impact of invalid\nSubscribers and preserve asynchronous control flow\n\nResult:\nMore robust best-effort error recovery in the event of invalid\nSubscribers throwing exceptions.", "createdAt": "2020-04-29T17:35:58Z", "url": "https://github.com/apple/servicetalk/pull/1034", "merged": true, "mergeCommit": {"oid": "f72b6d98da7c733cf3bf825bee466ddb4e4d6902"}, "closed": true, "closedAt": "2020-05-01T01:10:41Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcccaTZABqjMyODU3OTMzMzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc2SAPAFqTQwMzk1ODAxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3db69928baeb887c307d49d5c40287467836956", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/a3db69928baeb887c307d49d5c40287467836956", "committedDate": "2020-04-29T17:33:18Z", "message": "More robust exception handling from Subscribers\n\nMotivation:\nThe ReactiveStreams specification states that Publisher#subscribe must\nnot throw [1] and also that Subscriber methods must not throw [2].\nHowever in practice these methods may throw and we need to make a best\neffort to propagate exceptions and preserve the asynchronous control\nflow. SubscriberUtils has utility methods deliverTerminalFromSource and\nhandleExceptionFromOnSubscribe to help with this task. However the\nlatter method may propagate exceptions which will result in our error\nrecovery code delivering multiple onSubscribe and onError calls which\nfurther violates the ReactiveStreams specification [1][3]. Here is an\nexample:\n\n```\nNeverPublisher#subscribe()\nsubscriber.onSubscribe(..)\ncatch(cause)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause)\ncatch(cause2)  (in Publisher#handleSubscribe(..))\ndeliverTerminalFromSource(..)\nsubscriber.onSubscribe(..) // duplicate call by our error recovery\ncatch(cause3)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause3) // duplicate call by our error recovery\n```\n\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.9\n[2] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#2.13\n[3] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.7\n\nModifications:\n- SubscriberUtils#handleExceptionFromOnSubscribe should not re-throw\n- Usage of IGNORE_CANCEL and EMPTY_SUBSCRIPTION should be investigated\nto utilize the SubscriberUtils methods to minimize impact of invalid\nSubscribers and preserve asynchronous control flow\n\nResult:\nMore robust best-effort error recovery in the event of invalid\nSubscribers throwing exceptions."}, "afterCommit": {"oid": "57b744a27a3a2c285dfd2a85e673925cf3703ac1", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/57b744a27a3a2c285dfd2a85e673925cf3703ac1", "committedDate": "2020-04-29T18:01:41Z", "message": "More robust exception handling from Subscribers\n\nMotivation:\nThe ReactiveStreams specification states that Publisher#subscribe must\nnot throw [1] and also that Subscriber methods must not throw [2].\nHowever in practice these methods may throw and we need to make a best\neffort to propagate exceptions and preserve the asynchronous control\nflow. SubscriberUtils has utility methods deliverTerminalFromSource and\nhandleExceptionFromOnSubscribe to help with this task. However the\nlatter method may propagate exceptions which will result in our error\nrecovery code delivering multiple onSubscribe and onError calls which\nfurther violates the ReactiveStreams specification [1][3]. Here is an\nexample:\n\n```\nNeverPublisher#subscribe()\nsubscriber.onSubscribe(..)\ncatch(cause)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause)\ncatch(cause2)  (in Publisher#handleSubscribe(..))\ndeliverTerminalFromSource(..)\nsubscriber.onSubscribe(..) // duplicate call by our error recovery\ncatch(cause3)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause3) // duplicate call by our error recovery\n```\n\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.9\n[2] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#2.13\n[3] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.7\n\nModifications:\n- SubscriberUtils#handleExceptionFromOnSubscribe should not re-throw\n- Usage of IGNORE_CANCEL and EMPTY_SUBSCRIPTION should be investigated\nto utilize the SubscriberUtils methods to minimize impact of invalid\nSubscribers and preserve asynchronous control flow\n\nResult:\nMore robust best-effort error recovery in the event of invalid\nSubscribers throwing exceptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/d20bfac941a764c0c01374615cab5ada90361bb8", "committedDate": "2020-04-29T19:37:10Z", "message": "More robust exception handling from Subscribers\n\nMotivation:\nThe ReactiveStreams specification states that Publisher#subscribe must\nnot throw [1] and also that Subscriber methods must not throw [2].\nHowever in practice these methods may throw and we need to make a best\neffort to propagate exceptions and preserve the asynchronous control\nflow. SubscriberUtils has utility methods deliverTerminalFromSource and\nhandleExceptionFromOnSubscribe to help with this task. However the\nlatter method may propagate exceptions which will result in our error\nrecovery code delivering multiple onSubscribe and onError calls which\nfurther violates the ReactiveStreams specification [1][3]. Here is an\nexample:\n\n```\nNeverPublisher#subscribe()\nsubscriber.onSubscribe(..)\ncatch(cause)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause)\ncatch(cause2)  (in Publisher#handleSubscribe(..))\ndeliverTerminalFromSource(..)\nsubscriber.onSubscribe(..) // duplicate call by our error recovery\ncatch(cause3)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause3) // duplicate call by our error recovery\n```\n\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.9\n[2] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#2.13\n[3] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.7\n\nModifications:\n- SubscriberUtils#handleExceptionFromOnSubscribe should not re-throw\n- Usage of IGNORE_CANCEL and EMPTY_SUBSCRIPTION should be investigated\nto utilize the SubscriberUtils methods to minimize impact of invalid\nSubscribers and preserve asynchronous control flow\n\nResult:\nMore robust best-effort error recovery in the event of invalid\nSubscribers throwing exceptions."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57b744a27a3a2c285dfd2a85e673925cf3703ac1", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/57b744a27a3a2c285dfd2a85e673925cf3703ac1", "committedDate": "2020-04-29T18:01:41Z", "message": "More robust exception handling from Subscribers\n\nMotivation:\nThe ReactiveStreams specification states that Publisher#subscribe must\nnot throw [1] and also that Subscriber methods must not throw [2].\nHowever in practice these methods may throw and we need to make a best\neffort to propagate exceptions and preserve the asynchronous control\nflow. SubscriberUtils has utility methods deliverTerminalFromSource and\nhandleExceptionFromOnSubscribe to help with this task. However the\nlatter method may propagate exceptions which will result in our error\nrecovery code delivering multiple onSubscribe and onError calls which\nfurther violates the ReactiveStreams specification [1][3]. Here is an\nexample:\n\n```\nNeverPublisher#subscribe()\nsubscriber.onSubscribe(..)\ncatch(cause)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause)\ncatch(cause2)  (in Publisher#handleSubscribe(..))\ndeliverTerminalFromSource(..)\nsubscriber.onSubscribe(..) // duplicate call by our error recovery\ncatch(cause3)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause3) // duplicate call by our error recovery\n```\n\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.9\n[2] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#2.13\n[3] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.7\n\nModifications:\n- SubscriberUtils#handleExceptionFromOnSubscribe should not re-throw\n- Usage of IGNORE_CANCEL and EMPTY_SUBSCRIPTION should be investigated\nto utilize the SubscriberUtils methods to minimize impact of invalid\nSubscribers and preserve asynchronous control flow\n\nResult:\nMore robust best-effort error recovery in the event of invalid\nSubscribers throwing exceptions."}, "afterCommit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/d20bfac941a764c0c01374615cab5ada90361bb8", "committedDate": "2020-04-29T19:37:10Z", "message": "More robust exception handling from Subscribers\n\nMotivation:\nThe ReactiveStreams specification states that Publisher#subscribe must\nnot throw [1] and also that Subscriber methods must not throw [2].\nHowever in practice these methods may throw and we need to make a best\neffort to propagate exceptions and preserve the asynchronous control\nflow. SubscriberUtils has utility methods deliverTerminalFromSource and\nhandleExceptionFromOnSubscribe to help with this task. However the\nlatter method may propagate exceptions which will result in our error\nrecovery code delivering multiple onSubscribe and onError calls which\nfurther violates the ReactiveStreams specification [1][3]. Here is an\nexample:\n\n```\nNeverPublisher#subscribe()\nsubscriber.onSubscribe(..)\ncatch(cause)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause)\ncatch(cause2)  (in Publisher#handleSubscribe(..))\ndeliverTerminalFromSource(..)\nsubscriber.onSubscribe(..) // duplicate call by our error recovery\ncatch(cause3)\nhandleExceptionFromOnSubscribe(..)\nsubscriber.onError(cause3) // duplicate call by our error recovery\n```\n\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.9\n[2] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#2.13\n[3] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.7\n\nModifications:\n- SubscriberUtils#handleExceptionFromOnSubscribe should not re-throw\n- Usage of IGNORE_CANCEL and EMPTY_SUBSCRIPTION should be investigated\nto utilize the SubscriberUtils methods to minimize impact of invalid\nSubscribers and preserve asynchronous control flow\n\nResult:\nMore robust best-effort error recovery in the event of invalid\nSubscribers throwing exceptions."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODU1MjQ2", "url": "https://github.com/apple/servicetalk/pull/1034#pullrequestreview-403855246", "createdAt": "2020-04-30T20:31:14Z", "commit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDozMToxNFrOGO5POw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1ODoyNVrOGO6Fxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MTAzNQ==", "bodyText": "The name seems misleading, perhaps you wanted to name this deliverTerminalFromSource?", "url": "https://github.com/apple/servicetalk/pull/1034#discussion_r418271035", "createdAt": "2020-04-30T20:31:14Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/SubscriberUtils.java", "diffHunk": "@@ -335,4 +349,39 @@ public static void handleExceptionFromOnSubscribe(CompletableSource.Subscriber s\n             LOGGER.info(\"Ignoring exception from onComplete of Subscriber {}.\", subscriber, t);\n         }\n     }\n+\n+    /**\n+     * Invokes {@link SingleSource.Subscriber#onSuccess(Object)} ignoring an occurred exception if any.\n+     * @param subscriber The {@link SingleSource.Subscriber} that may throw an exception from\n+     * {@link SingleSource.Subscriber#onSuccess(Object)}.\n+     * @param value The value to pass to {@link SingleSource.Subscriber#onSuccess(Object)}.\n+     * @param <T> The type of {@link SingleSource.Subscriber}.\n+     */\n+    public static <T> void safeOnComplete(SingleSource.Subscriber<T> subscriber, @Nullable T value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NDk5OA==", "bodyText": "This seems to be different than what was happening before as we are not cancelling the subscription any more. I think the assumption here is that this exception will bubble up to the source which effectively cancels the subscription?", "url": "https://github.com/apple/servicetalk/pull/1034#discussion_r418284998", "createdAt": "2020-04-30T20:58:25Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/Flush.java", "diffHunk": "@@ -74,24 +73,22 @@ private Flush() {\n         public void onSubscribe(Subscription subscription) {\n             try {\n                 writeEventsListener.writeStarted();\n-            } catch (Throwable t) {\n-                subscription.cancel();\n-                subscriber.onSubscribe(EMPTY_SUBSCRIPTION);\n-                subscriber.onError(t);\n-                return;\n-            }\n-            subscriber.onSubscribe(new Subscription() {\n-                @Override\n-                public void request(long n) {\n-                    subscription.request(n);\n-                }\n+            } finally {\n+                // As long as we call onSubscribe we can let exceptions propagate and the source should terminate\n+                // this Subscriber for cleanup.\n+                subscriber.onSubscribe(new Subscription() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac9c081e4d94516ee80c05eef0a7663f5615b63e", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/ac9c081e4d94516ee80c05eef0a7663f5615b63e", "committedDate": "2020-04-30T22:45:11Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e66a2fa40e70e8d133be4acde527a48a614fad9d", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/e66a2fa40e70e8d133be4acde527a48a614fad9d", "committedDate": "2020-04-30T23:57:12Z", "message": "disambiguate method names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTU4MDEw", "url": "https://github.com/apple/servicetalk/pull/1034#pullrequestreview-403958010", "createdAt": "2020-05-01T00:10:30Z", "commit": {"oid": "e66a2fa40e70e8d133be4acde527a48a614fad9d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3655, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}