{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzI3ODc0", "number": 947, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0MzoxMlrODi2FZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1MDowMVrODi2NQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY0MjkyOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0MzoxMlrOFuUhCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0MzoxMlrOFuUhCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNDk1Mg==", "bodyText": "nit: perhaps better to do this switch on the client as the client is intending to make \"incorrect requests\"", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384114952", "createdAt": "2020-02-25T20:43:12Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.netty;\n+\n+import io.servicetalk.concurrent.BlockingIterable;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.grpc.api.GrpcPayloadWriter;\n+import io.servicetalk.grpc.api.GrpcServiceContext;\n+import io.servicetalk.grpc.api.GrpcStatusException;\n+import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n+import io.servicetalk.grpc.netty.TesterProto.TestResponse;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestBiDiStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestRequestStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestResponseStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterClient;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterService;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ClientFactory;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ServiceFactory;\n+import io.servicetalk.http.api.HttpServiceContext;\n+import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpResponse;\n+import io.servicetalk.http.api.StreamingHttpResponseFactory;\n+import io.servicetalk.http.api.StreamingHttpServiceFilter;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import static io.servicetalk.grpc.api.GrpcStatusCode.INVALID_ARGUMENT;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+import static org.junit.Assert.assertThrows;\n+\n+public class BlockingApiCorrectnessTest {\n+\n+    @Rule\n+    public Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final ServerContext serverContext;\n+\n+    public BlockingApiCorrectnessTest() throws Exception {\n+        serverContext = GrpcServers.forAddress(localAddress(0))\n+                // HTTP filter to modify paths to workaround API restrictions:\n+                .appendHttpServiceFilter(service -> new StreamingHttpServiceFilter(service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f240013abadd889602bd28ef3a07dcab926397"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY0ODI1OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NTowM1rOFuUkRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NTowM1rOFuUkRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTc4MA==", "bodyText": "Not changed in this PR but as you are changing code; this would be a better message.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                        \"Only a single request item is expected, but saw the second one\")\n          \n          \n            \n                                                        \"More than one request message received.\")", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384115780", "createdAt": "2020-02-25T20:45:03Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");\n+                                if (requestIterator.hasNext()) {\n+                                    // Consume the next item to make sure it's not a TerminalNotification with an error\n+                                    requestIterator.next();\n+                                    throw new GrpcStatus(INVALID_ARGUMENT, null,\n+                                            \"Only a single request item is expected, but saw the second one\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY1MjA2OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjoyM1rOFuUmnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NjoyM1rOFuUmnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjM4MA==", "bodyText": "Not changed in this PR but as you are changing code; this would be a better message.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");\n          \n          \n            \n                                throw new IllegalStateException(\"More than one response message received.\");", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384116380", "createdAt": "2020-02-25T20:46:23Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "diffHunk": "@@ -154,13 +154,14 @@\n         final BlockingStreamingClientCall<Req, Resp> streamingClientCall =\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n-            final BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator();\n-            final Resp firstItem = iterator.next();\n-            if (iterator.hasNext()) {\n-                throw new IllegalArgumentException(\"Only a single item expected, but saw the second value: \" +\n-                        iterator.next());\n+            try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n+                final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");\n+                if (iterator.hasNext()) {\n+                    iterator.next(); // Consume the next item to make sure it's not a TerminalNotification with an error\n+                    throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY1NTQzOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0NzoyNVrOFuUohQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQwNTo0NTozMVrOFue5sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ==", "bodyText": "It isn't changed in this PR but I think null should pass-through.", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384116869", "createdAt": "2020-02-25T20:47:25Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE2NjU2OQ==", "bodyText": "Our API for gRPC currently does not annotate client calls with @Nullable annotation. If I don't do a null check, intellij idea warns that we return a possible null value from @Nonnull method.\nAnd the ProtoBufSerializationProvider never returns null, even if the Buffer was empty: \n  \n    \n      servicetalk/servicetalk-grpc-protobuf/src/main/java/io/servicetalk/grpc/protobuf/ProtoBufSerializationProvider.java\n    \n    \n        Lines 121 to 123\n      in\n      c4ab887\n    \n    \n    \n    \n\n        \n          \n           if (toDeserialize.readableBytes() <= 0) { \n        \n\n        \n          \n               return emptyList(); // We don't have any additional data to process, so bail for now. \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nTherefore, it will never be null. Only NoSuchElementException is possible here.\nBtw, on the client-side we can simply throw NoSuchElementException. But on the server-side, do we need to generate a GrpcStatusException with INVALID_ARGUMENT if there were no items in the request?", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384166569", "createdAt": "2020-02-25T22:31:26Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ=="}, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4MzU0Mw==", "bodyText": "Therefore, it will never be null. Only NoSuchElementException is possible here.\n\n\nCan a filter modify the request payload to pass null since we allow null for our async sources?\nThe meta point here is that unless we require the item to be non-null, we should allow for null values to pass through as we do in all our async sources. If the intent is only to avoid code style/spotbugs warnings then we can ignore/suppress.", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384283543", "createdAt": "2020-02-26T05:38:33Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ=="}, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDI4NTEwNg==", "bodyText": "Emitting a GrpcStatusException SGTM", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384285106", "createdAt": "2020-02-26T05:45:31Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ=="}, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3ODY2MzA1OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1MDowMVrOFuUtRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1MDowMVrOFuUtRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExODA4Nw==", "bodyText": "I think we should pass through null values.", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384118087", "createdAt": "2020-02-25T20:50:01Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "diffHunk": "@@ -154,13 +154,14 @@\n         final BlockingStreamingClientCall<Req, Resp> streamingClientCall =\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n-            final BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator();\n-            final Resp firstItem = iterator.next();\n-            if (iterator.hasNext()) {\n-                throw new IllegalArgumentException(\"Only a single item expected, but saw the second value: \" +\n-                        iterator.next());\n+            try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n+                final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2866, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}