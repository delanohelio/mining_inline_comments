{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5ODI2MTIz", "number": 1141, "title": "Avoid `Connection reset by peer` error when server closes the connection", "bodyText": "Motivation:\nWhen users close the server gracefully or when the server adds a\nConnection: close header to the response, the Channel will be closed as\nsoon as server read the request and wrote the response. Because a client is\nnot aware that the server intends to close the connection, it may send a\nfollowing request on the same connection before it reads the response.\nIn this case, TCP stack on the server-side will respond with RST frame\n(because the Channel is already closed) that may erase data on the\nconnection that were delivered to the client but not acknowledged.\nSee https://tools.ietf.org/html/rfc7230#section-6.6 for more information.\nModifications:\n\nWhen the request is read swap the HttpRequestDecoder with a handler\nthat discards all new incoming requests;\nWhen response is written half-close the output side of the connection;\nWhen the FIN is received from the client, close the Channel;\nFor SSL connections send close_notify before shutdownOutput();\nSave the original CloseEvent and use it later to produce more accurate\nlogs for connection closure;\nUpdate RequestResponseCloseHandlerTest to account for a new state\nmachine;\nEnhance GracefulConnectionClosureHandlingTest to test the same\nscenarios when graceful closure is initiated on the server-side;\nAdd ServerGracefulConnectionClosureHandlingTest that reproduces\nConnection reset by peer issue described in Motivation section;\nMinor improvements for ConnectionCloseHeaderHandlingTest to align it\nwith other tests;\n\nResult:\nServer does to cause Connection reset by peer exception when it closes\ngracefully or adds Connection: close header.", "createdAt": "2020-09-04T15:53:42Z", "url": "https://github.com/apple/servicetalk/pull/1141", "merged": true, "mergeCommit": {"oid": "c3ff7bf27f461d6a138f48c784e3ceab8678bccb"}, "closed": true, "closedAt": "2020-10-13T06:25:22Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFcvl_gH2gAyNDc5ODI2MTIzOmEzZGRhZTkzZjIyMjdlNGE0Y2RjNTk5ODg3NGVjY2ZiOTZiYTY4MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSCLO0gH2gAyNDc5ODI2MTIzOjBlOTQ2ODdmMWVjYjQzMDIwZmQ5MjJlNDdkNGZjMzYwMjMyNjRhMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a3ddae93f2227e4a4cdc5998874eccfb96ba6825", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a3ddae93f2227e4a4cdc5998874eccfb96ba6825", "committedDate": "2020-09-04T03:36:11Z", "message": "Avoid `Connection reset by peer` error when server closes the connection\n\nMotivation:\n\nWhen users close the server gracefully or when the server adds a\n`Connection: close` header to the response, the `Channel` will be closed as\nsoon as server read the request and wrote the response. Because a client is\nnot aware that the server intends to close the connection, it may send a\nfollowing request on the same connection before it reads the response.\nIn this case, TCP stack on the server-side will respond with RST frame\n(because the `Channel` is already closed) that may erase data on the\nconnection that were delivered to the client but not acknowledged.\nSee https://tools.ietf.org/html/rfc7230#section-6.6 for more information.\n\nModifications:\n\n- When the request is read swap the `HttpRequestDecoder` with a handler\nthat discards all new incoming requests;\n- When response is written half-close the output side of the connection;\n- When the FIN is received from the client, close the `Channel`;\n- For SSL connections send `close_notify` before `shutdownOutput()`;\n- Save the original `CloseEvent` and use it later to produce more accurate\nlogs for connection closure;\n- Update `RequestResponseCloseHandlerTest` to account for a new state\nmachine;\n- Enhance `GracefulConnectionClosureHandlingTest` to test the same\nscenarios when graceful closure is initiated on the server-side;\n- Add `ServerGracefulConnectionClosureHandlingTest` that reproduces\n`Connection reset by peer` issue described in `Motivation` section;\n- Minor improvements for `ConnectionCloseHeaderHandlingTest` to align it\nwith other tests;\n\nResult:\n\nServer does to cause `Connection reset by peer` exception when it closes\ngracefully or adds `Connection: close` header."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "552f03ce079801862db091691f622721d6a3dccf", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/552f03ce079801862db091691f622721d6a3dccf", "committedDate": "2020-09-09T00:03:12Z", "message": "Account for the case when the server input shutdowns before output shutdown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93c526cf271dbc3a761106d4dd5b527a7843c244", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/93c526cf271dbc3a761106d4dd5b527a7843c244", "committedDate": "2020-09-09T18:07:26Z", "message": "Do not half-close INBOUND (reset) on graceful server closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e86d5fe1bfd7d1c36018753b15512f2b127c5ed4", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/e86d5fe1bfd7d1c36018753b15512f2b127c5ed4", "committedDate": "2020-09-09T18:08:57Z", "message": "Merge remote-tracking branch 'upstream/main' into server-graceful-closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da9727cc3bc3e2897e89eb27a2b254cdd8b6db30", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/da9727cc3bc3e2897e89eb27a2b254cdd8b6db30", "committedDate": "2020-09-09T23:12:00Z", "message": "Use `pending == MAX_VALUE` instead of `CLOSING_SERVER_GRACEFULLY`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8041c0e0226a1ca53725106358f203624ab078a", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f8041c0e0226a1ca53725106358f203624ab078a", "committedDate": "2020-09-09T23:12:16Z", "message": "Remove leftover Thread.dumpStack()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72c7d110fcd833bfb3851c5d207b627c0801b310", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/72c7d110fcd833bfb3851c5d207b627c0801b310", "committedDate": "2020-09-10T18:53:03Z", "message": "RequestResponseCloseHandlerTest: use IS event instead of implicit invocation of h.channelClosedInbound"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e1a5b26670c2ee4ddec82f5ed5745ce3c5fb14e", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/7e1a5b26670c2ee4ddec82f5ed5745ce3c5fb14e", "committedDate": "2020-09-10T18:54:26Z", "message": "Add tests to verify that read cancellation does not break graceful server shutdown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "836df80c0b28dcff25cd9c2640931ac29427645c", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/836df80c0b28dcff25cd9c2640931ac29427645c", "committedDate": "2020-09-10T20:29:11Z", "message": "Revert \"Use `pending == MAX_VALUE` instead of `CLOSING_SERVER_GRACEFULLY`\"\n\nThis reverts commit da9727cc3bc3e2897e89eb27a2b254cdd8b6db30."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b789912c8411893ee580c7e2150081ffee36815", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/4b789912c8411893ee580c7e2150081ffee36815", "committedDate": "2020-09-10T22:20:29Z", "message": "Fire UserEvent instead of registering a handler to discard inbound"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "347624b97ca711e19ec7b19522bfe4f284e0e0cd", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/347624b97ca711e19ec7b19522bfe4f284e0e0cd", "committedDate": "2020-09-14T17:06:24Z", "message": "Implement toString for all `NettyUserEvent`s"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c5b41c32b1f9dd3947bd44042f2f810e0698188", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/5c5b41c32b1f9dd3947bd44042f2f810e0698188", "committedDate": "2020-09-14T17:06:24Z", "message": "Do not abort server write if connection is in closing state\n\nServer may register a write after HttpRequestDecoder is already processed\nthe request with \"Connection: close\" header. As the result, server can not\nrespond if the write is aborted."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTc5MjE0", "url": "https://github.com/apple/servicetalk/pull/1141#pullrequestreview-487979214", "createdAt": "2020-09-14T17:09:52Z", "commit": {"oid": "5c5b41c32b1f9dd3947bd44042f2f810e0698188"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowOTo1M1rOHRey7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzowOTo1M1rOHRey7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5MjM5Nw==", "bodyText": "@NiteshKant upgrade to TLSv1.3 (client starts writing data earlier than server completes the handshake) helped to discover this issue, resulting in a lot of failed tests: https://ci.servicetalk.io/job/servicetalk-java11-prb/1521/\nMy fix isn't great: 5c5b41c. Open for suggestions.", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r488092397", "createdAt": "2020-09-14T17:09:53Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -470,10 +474,10 @@ private boolean failIfWriteActive(ChannelOutboundListener newChannelOutboundList\n             // It is possible that we have set the writeSubscriber, then the channel becomes inactive, and we will\n             // never notify the write writeSubscriber of the inactive event. So if the channel is inactive we notify\n             // the writeSubscriber.\n-            // It is also possible that Channel is in closing state, we should abort new writes if a closeReason was\n-            // observed:\n+            // It is also possible that Channel is in closing state, we should abort new writes from the client-side\n+            // if a closeReason was observed:\n             CloseEvent closeReason = null;\n-            if (!channel().isActive() || (closeReason = this.closeReason) != null) {\n+            if (!channel().isActive() || (isClient && (closeReason = this.closeReason) != null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c5b41c32b1f9dd3947bd44042f2f810e0698188"}, "originalPosition": 81}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58f8e66af5f4e5fd10cd8a96d5b2a712b5960732", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/58f8e66af5f4e5fd10cd8a96d5b2a712b5960732", "committedDate": "2020-09-14T18:40:11Z", "message": "Merge remote-tracking branch 'upstream/main' into server-graceful-closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68818055eff2f7a23f89f5b559e4e77898a7f585", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/68818055eff2f7a23f89f5b559e4e77898a7f585", "committedDate": "2020-09-14T21:55:07Z", "message": "ProxyTunnel: flush all written data before closing streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93acb441fedbd3e99ee564e2beceb74458f01b28", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/93acb441fedbd3e99ee564e2beceb74458f01b28", "committedDate": "2020-09-16T01:57:07Z", "message": "Use TLSv1.2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f042f0aac3c71776f26a44444b935d124abfde27", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f042f0aac3c71776f26a44444b935d124abfde27", "committedDate": "2020-09-17T22:53:00Z", "message": "Revert \"Use TLSv1.2\"\n\nThis reverts commit 93acb441"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f861c71e0574c30ff438eee26fc90c474ead11", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/e7f861c71e0574c30ff438eee26fc90c474ead11", "committedDate": "2020-09-17T22:53:43Z", "message": "Improve test: closePipelinedAfterTwoRequestsSentBeforeAnyResponseReceived"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/74744a3fa081d7040442e6ced07945b68dec3691", "committedDate": "2020-09-18T06:07:54Z", "message": "Revert \"Do not abort server write if connection is in closing state\"\n\nThis reverts commit 5c5b41c3"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxODI3Njcx", "url": "https://github.com/apple/servicetalk/pull/1141#pullrequestreview-491827671", "createdAt": "2020-09-18T23:14:15Z", "commit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzoxNDoxNVrOHUeYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoxMTo1NlrOHUe_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMTM0Mg==", "bodyText": "Is this really required?", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r491231342", "createdAt": "2020-09-18T23:14:15Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/CloseHandler.java", "diffHunk": "@@ -342,10 +344,18 @@ public void protocolClosingOutbound(final ChannelHandlerContext ctx) {\n         }\n     }\n \n+    private abstract static class NettyUserEvent {\n+\n+        @Override\n+        public String toString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMjE0Nw==", "bodyText": "I don't think we should depend on ordering between listener invocation and subscriber termination. Can you explain more what is the issue here and why was it not evident before?", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r491232147", "createdAt": "2020-09-18T23:18:16Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WriteStreamSubscriber.java", "diffHunk": "@@ -487,6 +486,9 @@ private void terminateSubscriber(@Nullable Throwable cause) {\n                     ChannelCloseUtils.close(channel, cause);\n                 }\n             }\n+            // Notify listeners after the subscriber is terminated. Otherwise, WriteStreamSubscriber#channelClosed may", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMzgzOA==", "bodyText": "I am not convinced this is doing anything useful since we are following first writer-wins with events that can be concurrent and are sequenced through the event loop queue.\nIf this isn't really required for this change, i would prefer considering as a followup", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r491233838", "createdAt": "2020-09-18T23:26:36Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -73,13 +78,21 @@\n      */\n     private int pending;\n \n+    /**\n+     * Original {@link CloseEvent} that initiated closing.\n+     */\n+    @Nullable\n+    private CloseEvent event;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzNTIzNw==", "bodyText": "Did you mean to use evt here instead of event as the callers of this method are reading event?", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r491235237", "createdAt": "2020-09-18T23:33:53Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -236,21 +268,31 @@ void userClosing(final Channel channel) {\n \n     // This closes the channel either completely when there are no more outstanding requests to drain or half-closes\n     // when a deferred request was encountered.\n-    private void closeChannelHalfOrFullyOnPayloadEnd(final Channel channel, final CloseEvent evt) {\n+    private void closeChannelHalfOrFullyOnPayloadEnd(final Channel channel, final CloseEvent evt,\n+                                                     final boolean endInbound) {\n+\n         if (idle(pending, state)) {\n-            // close when all pending requests drained\n-            closeChannel(channel, evt);\n-        } else if (!isClient && evt == PROTOCOL_CLOSING_INBOUND) {\n-            // deferred half close after current request is done\n+            if (isClient || has(state, IN_CLOSED) || (event != USER_CLOSING && event != PROTOCOL_CLOSING_OUTBOUND)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MTE2OQ==", "bodyText": "I am concerned about splitting the state b/w state and event. Can we set SERVER_CLOSING_GRACEFULLY upfront so that we do not have to rely on event here?", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r491241169", "createdAt": "2020-09-19T00:10:04Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -236,21 +268,31 @@ void userClosing(final Channel channel) {\n \n     // This closes the channel either completely when there are no more outstanding requests to drain or half-closes\n     // when a deferred request was encountered.\n-    private void closeChannelHalfOrFullyOnPayloadEnd(final Channel channel, final CloseEvent evt) {\n+    private void closeChannelHalfOrFullyOnPayloadEnd(final Channel channel, final CloseEvent evt,\n+                                                     final boolean endInbound) {\n+\n         if (idle(pending, state)) {\n-            // close when all pending requests drained\n-            closeChannel(channel, evt);\n-        } else if (!isClient && evt == PROTOCOL_CLOSING_INBOUND) {\n-            // deferred half close after current request is done\n+            if (isClient || has(state, IN_CLOSED) || (event != USER_CLOSING && event != PROTOCOL_CLOSING_OUTBOUND)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MTQzMg==", "bodyText": "Can we move this to the receiver of the discard event?", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r491241432", "createdAt": "2020-09-19T00:11:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -360,12 +406,50 @@ private void setSocketResetOnClose(final Channel channel) {\n         }\n     }\n \n+    private void serverCloseGracefully(final Channel channel) {\n+        // Perform half-closure as described in https://tools.ietf.org/html/rfc7230#section-6.6\n+        serverHalfCloseInbound(channel);\n+        serverHalfCloseOutbound(channel);\n+    }\n+\n     private void serverHalfCloseInbound(final Channel channel) {\n         assert !isClient;\n-        if (!has(state, IN_CLOSED) && channel instanceof DuplexChannel) {\n-            LOGGER.debug(\"{} Half-Closing INBOUND\", channel);\n+        if (!hasAny(state, DISCARDING_SERVER_INPUT, IN_CLOSED)) {\n+            // Instead of actual half-closure DuplexChannel.shutdownInput() we discard all further inbound data, but\n+            // keep reading to receive FIN from the remote peer.\n+            LOGGER.debug(\"{} Discarding further INBOUND\", channel);\n             state = unset(state, READ);\n-            ((DuplexChannel) channel).shutdownInput().addListener((ChannelFutureListener) this::onHalfClosed);\n+            channel.pipeline().fireUserEventTriggered(DiscardFurtherInboundEvent.INSTANCE);\n+            channel.config().setAutoRead(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74744a3fa081d7040442e6ced07945b68dec3691"}, "originalPosition": 239}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d279c699920281d76a7d8b27ab0e12759b7d7d9c", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/d279c699920281d76a7d8b27ab0e12759b7d7d9c", "committedDate": "2020-09-25T17:58:16Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd62e331642abd39d3ddc82d9b81a4badc19f928", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/fd62e331642abd39d3ddc82d9b81a4badc19f928", "committedDate": "2020-09-29T21:31:08Z", "message": "Revert changes for ConnectionCloseHeaderHandlingTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a7af41b30ca564824dec45e900cb3f74d62b76", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f8a7af41b30ca564824dec45e900cb3f74d62b76", "committedDate": "2020-09-29T21:34:58Z", "message": "Use TLSv1.2 to workaround #1156"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1398c1975da6321524d20c009a4bf65663ac3a3", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/d1398c1975da6321524d20c009a4bf65663ac3a3", "committedDate": "2020-09-29T21:41:14Z", "message": "Use `closeEvent` instead of `CLOSING` state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0374173a8cb34134abec81b5f3f274b40d3f50b", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f0374173a8cb34134abec81b5f3f274b40d3f50b", "committedDate": "2020-10-01T20:01:19Z", "message": "Merge remote-tracking branch 'upstream/main' into server-graceful-closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5165f290564dc1097ec0baf7459c13a67a096322", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/5165f290564dc1097ec0baf7459c13a67a096322", "committedDate": "2020-10-02T04:53:15Z", "message": "Fix checkstyle error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8c89080ef4c02adff433c23aa5400d842984f9d", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f8c89080ef4c02adff433c23aa5400d842984f9d", "committedDate": "2020-10-02T05:00:00Z", "message": "Support EmbeddedChannel in RequestResponseCloseHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdcbf76c73225a65bc95e2d9033e233c9df7d527", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/bdcbf76c73225a65bc95e2d9033e233c9df7d527", "committedDate": "2020-10-02T17:19:59Z", "message": "Revert \"Support EmbeddedChannel in RequestResponseCloseHandler\"\n\nThis reverts commit f8c89080"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc99310622dc52e80b54a7588629477980336dd", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/7fc99310622dc52e80b54a7588629477980336dd", "committedDate": "2020-10-02T18:02:55Z", "message": "Add tests for graceful closure when UDS is used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "001f052c113ed9cebcddc0ab5e1810ea74a349bd", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/001f052c113ed9cebcddc0ab5e1810ea74a349bd", "committedDate": "2020-10-08T22:16:45Z", "message": "Merge remote-tracking branch 'upstream/main' into server-graceful-closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f42fcf95d4e5e9fdb91bc73538f6aa8fd5c8e8", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/c9f42fcf95d4e5e9fdb91bc73538f6aa8fd5c8e8", "committedDate": "2020-10-08T22:18:34Z", "message": "fix import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1009715bb4e68bed0284499e1ce24e2caac4214", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f1009715bb4e68bed0284499e1ce24e2caac4214", "committedDate": "2020-10-08T23:42:33Z", "message": "Simulate FIN from the client in ServerRespondsOnClosingTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a15527b6a2e9befa64ca2c68c4f177e6cfa69e", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/44a15527b6a2e9befa64ca2c68c4f177e6cfa69e", "committedDate": "2020-10-09T00:04:56Z", "message": "Test that server discards further requests while it is in graceful closure state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0e9ec7f110853308c6cff9a2a9289ece7945fe0", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a0e9ec7f110853308c6cff9a2a9289ece7945fe0", "committedDate": "2020-10-09T00:28:09Z", "message": "Merge remote-tracking branch 'upstream/main' into server-graceful-closure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71a312d5741d1bc74214a3736893dc0d494a62b6", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/71a312d5741d1bc74214a3736893dc0d494a62b6", "committedDate": "2020-10-09T21:19:29Z", "message": "Ignore flushes without written objects in `OutboundWriteEventsInterceptor`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1OTc3MzQw", "url": "https://github.com/apple/servicetalk/pull/1141#pullrequestreview-505977340", "createdAt": "2020-10-09T20:42:21Z", "commit": {"oid": "a0e9ec7f110853308c6cff9a2a9289ece7945fe0"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDo0MjoyMlrOHfYDpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMDowMDozMFrOHfbaYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY2MjA1NQ==", "bodyText": "do we have to expose this method? ByteToMessageDecoder should clean up the cumulation when it is removed from the pipeline, not clear why we need to explicitly call this method.", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r502662055", "createdAt": "2020-10-09T20:42:22Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ByteToMessageDecoder.java", "diffHunk": "@@ -242,7 +242,7 @@ protected ByteBuf swapAndCopyCumulation(final ByteBuf cumulation, final ByteBuf\n     protected void cumulationReset() {\n     }\n \n-    private void releaseCumulation() {\n+    protected final void releaseCumulation() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0e9ec7f110853308c6cff9a2a9289ece7945fe0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY4MzU4MA==", "bodyText": "reminder @normanmaurer: we should fix half closure in Netty so actions go through the pipeline instead of the channel bypassing handlers.", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r502683580", "createdAt": "2020-10-09T21:43:11Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -359,12 +399,49 @@ private void setSocketResetOnClose(final Channel channel) {\n         }\n     }\n \n+    private void serverCloseGracefully(final Channel channel) {\n+        // Perform half-closure as described in https://tools.ietf.org/html/rfc7230#section-6.6\n+        serverHalfCloseInbound(channel);\n+        serverHalfCloseOutbound(channel);\n+    }\n+\n     private void serverHalfCloseInbound(final Channel channel) {\n         assert !isClient;\n-        if (!has(state, IN_CLOSED) && channel instanceof DuplexChannel) {\n-            LOGGER.debug(\"{} Half-Closing INBOUND\", channel);\n+        if (!hasAny(state, DISCARDING_SERVER_INPUT, IN_CLOSED)) {\n+            // Instead of actual half-closure DuplexChannel.shutdownInput() we discard all further inbound data, but\n+            // keep reading to receive FIN from the remote peer.\n+            LOGGER.debug(\"{} Discarding further INBOUND\", channel);\n             state = unset(state, READ);\n-            ((DuplexChannel) channel).shutdownInput().addListener((ChannelFutureListener) this::onHalfClosed);\n+            channel.pipeline().fireUserEventTriggered(DiscardFurtherInboundEvent.INSTANCE);\n+            state = set(state, DISCARDING_SERVER_INPUT);\n+        }\n+    }\n+\n+    private void serverHalfCloseOutbound(final Channel channel) {\n+        assert !isClient && idle(pending, state);\n+        if (!has(state, OUT_CLOSED)) {\n+            state = set(state, CLOSING_SERVER_GRACEFULLY);\n+            LOGGER.debug(\"{} Half-Closing OUTBOUND\", channel);\n+            halfCloseOutbound(channel, false);\n+            // Final channel.close() will happen when FIN (ChannelInputShutdownReadComplete) is received\n+        }\n+    }\n+\n+    private void halfCloseOutbound(final Channel channel, final boolean registerOnHalfClosed) {\n+        SslHandler sslHandler = channel.pipeline().get(SslHandler.class);\n+        if (sslHandler != null) {\n+            // send close_notify: https://tools.ietf.org/html/rfc5246#section-7.2.1\n+            sslHandler.closeOutbound().addListener(f -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a312d5741d1bc74214a3736893dc0d494a62b6"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwNzE5NA==", "bodyText": "we lose the ability to apply back pressure at this point. which may lead to a surprising \"attack\" vector from the user perspective. Consider adding a comment and reference to s6.6 (client writes before it receives FIN, server responds with RST, client TCP stack doesn't deliver buffered data when RST received).\nDid you explore alternative approaches (e.g. not read at all)? Even if we don't ask to read data for the native transports Netty will read/drain if a FIN/RST is received (via RDHUP), which means we will pickup on the FIN/RST as soon as it is delivered (assuming it is delivered). However if the client has more data to send than can be queued in its sendbuf (or that can fit in the server recvbuf) then the server won't see the FIN_ACK from the client until reading/draining data. However maybe this isn't a problem as if the client continues to read (which is expected) it will eventually see the server's close and should stop trying to write.", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r502707194", "createdAt": "2020-10-09T23:08:41Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpObjectDecoder.java", "diffHunk": "@@ -502,6 +505,12 @@ public final void userEventTriggered(final ChannelHandlerContext ctx, final Obje\n                 default:\n                     break;\n             }\n+        } else if (evt instanceof DiscardFurtherInboundEvent) {\n+            resetNow();\n+            releaseCumulation();\n+            ctx.pipeline().replace(HttpObjectDecoder.this, DiscardInboundHandler.INSTANCE.toString(),\n+                    DiscardInboundHandler.INSTANCE);\n+            ctx.channel().config().setAutoRead(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a312d5741d1bc74214a3736893dc0d494a62b6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcwOTE5NQ==", "bodyText": "can you remove the \"keep reading\" point here in case we do something different? Consider describing the problem with shutdownInput() (e.g. client send data, server rst, client sees rst and discards read queue) and that the protocol can handle the closure more gracefully.", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r502709195", "createdAt": "2020-10-09T23:18:07Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -359,12 +399,49 @@ private void setSocketResetOnClose(final Channel channel) {\n         }\n     }\n \n+    private void serverCloseGracefully(final Channel channel) {\n+        // Perform half-closure as described in https://tools.ietf.org/html/rfc7230#section-6.6\n+        serverHalfCloseInbound(channel);\n+        serverHalfCloseOutbound(channel);\n+    }\n+\n     private void serverHalfCloseInbound(final Channel channel) {\n         assert !isClient;\n-        if (!has(state, IN_CLOSED) && channel instanceof DuplexChannel) {\n-            LOGGER.debug(\"{} Half-Closing INBOUND\", channel);\n+        if (!hasAny(state, DISCARDING_SERVER_INPUT, IN_CLOSED)) {\n+            // Instead of actual half-closure DuplexChannel.shutdownInput() we discard all further inbound data, but\n+            // keep reading to receive FIN from the remote peer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a312d5741d1bc74214a3736893dc0d494a62b6"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxMDA3Mw==", "bodyText": "USER_CLOSING -> can you plz rename this (and userClosingmethod) to include graceful? not introduced by this PR but it is confusing when the concepts are mixed together.", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r502710073", "createdAt": "2020-10-09T23:22:32Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -235,21 +261,31 @@ void userClosing(final Channel channel) {\n \n     // This closes the channel either completely when there are no more outstanding requests to drain or half-closes\n     // when a deferred request was encountered.\n-    private void closeChannelHalfOrFullyOnPayloadEnd(final Channel channel, final CloseEvent evt) {\n+    private void closeChannelHalfOrFullyOnPayloadEnd(final Channel channel, final CloseEvent evt,\n+                                                     final boolean endInbound) {\n+\n         if (idle(pending, state)) {\n-            // close when all pending requests drained\n-            closeChannel(channel, evt);\n-        } else if (!isClient && evt == PROTOCOL_CLOSING_INBOUND) {\n-            // deferred half close after current request is done\n+            if (isClient || has(state, IN_CLOSED) || (evt != USER_CLOSING && evt != PROTOCOL_CLOSING_OUTBOUND)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a312d5741d1bc74214a3736893dc0d494a62b6"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxMjIwMw==", "bodyText": "consider renaming to avoid \"discard\" because we are assuming what action will be taken as a result of this event but don't control what is being done.\nDISCARDING_SERVER_INPUT -> IN_SHUTDOWN\nDiscardFurtherInboundEvent -> GracefulInputShutdownEvent", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r502712203", "createdAt": "2020-10-09T23:33:04Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -359,12 +399,49 @@ private void setSocketResetOnClose(final Channel channel) {\n         }\n     }\n \n+    private void serverCloseGracefully(final Channel channel) {\n+        // Perform half-closure as described in https://tools.ietf.org/html/rfc7230#section-6.6\n+        serverHalfCloseInbound(channel);\n+        serverHalfCloseOutbound(channel);\n+    }\n+\n     private void serverHalfCloseInbound(final Channel channel) {\n         assert !isClient;\n-        if (!has(state, IN_CLOSED) && channel instanceof DuplexChannel) {\n-            LOGGER.debug(\"{} Half-Closing INBOUND\", channel);\n+        if (!hasAny(state, DISCARDING_SERVER_INPUT, IN_CLOSED)) {\n+            // Instead of actual half-closure DuplexChannel.shutdownInput() we discard all further inbound data, but\n+            // keep reading to receive FIN from the remote peer.\n+            LOGGER.debug(\"{} Discarding further INBOUND\", channel);\n             state = unset(state, READ);\n-            ((DuplexChannel) channel).shutdownInput().addListener((ChannelFutureListener) this::onHalfClosed);\n+            channel.pipeline().fireUserEventTriggered(DiscardFurtherInboundEvent.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a312d5741d1bc74214a3736893dc0d494a62b6"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjcxNzAyNw==", "bodyText": "not introduced by this PR but the control flow here is somewhat confusing. This method is called before the trailers are actually written, and eventually goes to WriteStreamSubscriber#channelOutboundClosed which calls sourceTerminated, which will complete the promise if activeWrites==0 but since we haven't written yet I assume that is never possible?", "url": "https://github.com/apple/servicetalk/pull/1141#discussion_r502717027", "createdAt": "2020-10-10T00:00:30Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/RequestResponseCloseHandler.java", "diffHunk": "@@ -162,7 +179,7 @@ public void protocolPayloadBeginOutbound(final ChannelHandlerContext ctx) {\n \n     @Override\n     public void protocolPayloadEndOutbound(final ChannelHandlerContext ctx) {\n-        if (isClient || (has(state, CLOSING) && pending == 0)) {\n+        if (isClient || (closeEvent != null && pending == 0)) {\n             ctx.pipeline().fireUserEventTriggered(OutboundDataEndEvent.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a312d5741d1bc74214a3736893dc0d494a62b6"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a9085749af6f47a0ec48fdb95475177355dd432", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/4a9085749af6f47a0ec48fdb95475177355dd432", "committedDate": "2020-10-10T00:43:08Z", "message": "Test that PROTOCOL_CLOSING_OUTBOUND closes the connection even if it's already in USER_CLOSING state and more pipelined requests pending"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d21abfa75b033e939995ba73de4b2084e917a15", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/6d21abfa75b033e939995ba73de4b2084e917a15", "committedDate": "2020-10-10T01:34:27Z", "message": "Rename USER_CLOSING -> GRACEFUL_USER_CLOSING"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b90fec4b9381f1567eaea6d096647fb13147fb", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/77b90fec4b9381f1567eaea6d096647fb13147fb", "committedDate": "2020-10-12T22:10:03Z", "message": "Fix compilation error after rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db4afd96734df734ff7ca995ab1ed070b4748510", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/db4afd96734df734ff7ca995ab1ed070b4748510", "committedDate": "2020-10-12T22:39:01Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5274be43f6cd317e0c04cd4863d36a56000f7c", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/0b5274be43f6cd317e0c04cd4863d36a56000f7c", "committedDate": "2020-10-13T04:47:05Z", "message": "Do not use offloading in ServerRespondsOnClosingTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24a06d1d735bd6030dfa776994e45f9319d454bc", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/24a06d1d735bd6030dfa776994e45f9319d454bc", "committedDate": "2020-10-13T05:08:26Z", "message": "RequestResponseCloseHandlerTest: rename UCO -> GUC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edb01eb2ac2de6e372c113ebef3f07aff4ff632f", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/edb01eb2ac2de6e372c113ebef3f07aff4ff632f", "committedDate": "2020-10-13T05:43:11Z", "message": "Do not expose ByteToMessageDecoder#releaseCumulation()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d5bfdc24a80a6c7558cb587b4f05ba4c72a77bb", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/3d5bfdc24a80a6c7558cb587b4f05ba4c72a77bb", "committedDate": "2020-10-13T05:44:39Z", "message": "fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e94687f1ecb43020fd922e47d4fc36023264a06", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/0e94687f1ecb43020fd922e47d4fc36023264a06", "committedDate": "2020-10-13T05:59:57Z", "message": "Clarify comment for RequestResponseCloseHandler#serverHalfCloseInbound"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3470, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}