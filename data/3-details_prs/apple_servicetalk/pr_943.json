{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODgzNTE0", "number": 943, "title": "Optimize `ProtoBufSerializationProvider` by minimizing copying", "bodyText": "Motivation:\nCurrent implementation of ProtoBufSerializationProvider has a\nfew performance issues:\n\nProtoDeserializer may create an intermediate copy of the composite\nbuffers and then copy it again inside proto parser.\nDefaultSerializer.DEFAULT_SIZE_ESTIMATOR inaccurately predicts\nsize for destination Buffer. For aggregated API we may use\ngetSerializedSize() to allocate enough bytes for destination\nBuffer.\nMessageLite.writeTo(OutputStream) creates an internal copy of\ndata that could be avoided if we create CodedOutputStream from\ninternal data storage of destination Buffer.\n\nModifications:\n\nCreate optimized version of CodedInputStream for\nProtoDeserializer to do less copying during proto deserialization;\nProvide a number of bytesEstimate for serialization for aggregated\nAPI;\nCreate optimized version of CodedOutputStream for\nProtoSerializer to do less copying during proto serialization;\n\nResults:\nLess copying during protobuf serialization/deserialization leads to\nimproved throughput by 5-15% on the gRPC client and server when\nthey (de)serialize 16Kb payload body.", "createdAt": "2020-02-20T17:25:53Z", "url": "https://github.com/apple/servicetalk/pull/943", "merged": true, "mergeCommit": {"oid": "1653fc7135d59bcb98608342ad73027e9ab441e2"}, "closed": true, "closedAt": "2020-02-21T18:30:42Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGArvKAH2gAyMzc3ODgzNTE0OmUwZGNlYTU0Yzc1YWM3NzlhMGJmNzAxMWM1ZGZmNzI4OTY5Y2JjMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGj8_BgFqTM2MjgyNTI4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e0dcea54c75ac779a0bf7011c5dff728969cbc06", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/e0dcea54c75ac779a0bf7011c5dff728969cbc06", "committedDate": "2020-02-20T01:17:24Z", "message": "Optimize `ProtoBufSerializationProvider` by minimizing copying\n\nMotivation:\n\nCurrent implementation of `ProtoBufSerializationProvider` has a\nfew performance issues:\n1. `ProtoDeserializer` may create an intermediate copy of composite\nbuffers and then copy it again inside proto parser.\n2. `DefaultSerializer.DEFAULT_SIZE_ESTIMATOR` inaccurately predicts\nsize for destination `Buffer`. For aggregated API we may use\n`getSerializedSize()` to allocate enough bytes for destination\n`Buffer`.\n3. `MessageLite.writeTo(OutputStream)` creates internal copy of\ndata that could be avoided if we create `CodedOutputStream` from\ninternal data storage of destination `Buffer`.\n\nModifications:\n\n- Create optimized version of `CodedInputStream` for\n`ProtoDeserializer` to do less copying during proto deserialization;\n- Provide number of `bytesEstimate` for serialization for aggregated\nAPI;\n- Create optimized version of `CodedOutputStream` for\n`ProtoSerializer` to do less copying during proto serialization;\n\nResults:\n\nLess copying during protobuf serialization/deserialization leads to\nimproved throughput by 5-15% on the gRPC client and server when\nthey (de)serialize 16Kb payload body."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb742cab2dde59acba468dfc840907cca5b3662", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/acb742cab2dde59acba468dfc840907cca5b3662", "committedDate": "2020-02-20T17:27:12Z", "message": "add comment for METADATA_SIZE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ce88ebbf332e284532c9d794815948ee1096d0f", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/2ce88ebbf332e284532c9d794815948ee1096d0f", "committedDate": "2020-02-20T18:12:01Z", "message": "update copyright headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyMzMyNTc3", "url": "https://github.com/apple/servicetalk/pull/943#pullrequestreview-362332577", "createdAt": "2020-02-21T00:35:13Z", "commit": {"oid": "2ce88ebbf332e284532c9d794815948ee1096d0f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDozNToxM1rOFsoBWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDo1NTozNVrOFsoXkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzNzM2OQ==", "bodyText": "Is this check necessary since we will only be in this else block if toDeserialize.nioBufferCount() > 1?", "url": "https://github.com/apple/servicetalk/pull/943#discussion_r382337369", "createdAt": "2020-02-21T00:35:13Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-protobuf/src/main/java/io/servicetalk/grpc/protobuf/ProtoBufSerializationProvider.java", "diffHunk": "@@ -146,7 +150,22 @@ private static boolean isCompressed(Buffer buffer) throws SerializationException\n \n                     final T t;\n                     try {\n-                        t = parser.parseFrom(toDeserialize.toNioBuffer(toDeserialize.readerIndex(), lengthOfData));\n+                        final CodedInputStream in;\n+                        if (toDeserialize.nioBufferCount() == 1) {\n+                            in = CodedInputStream.newInstance(toDeserialize.toNioBuffer(toDeserialize.readerIndex(),\n+                                    lengthOfData));\n+                        } else {\n+                            // Aggregated payload body may consist of multiple Buffers. In this case,\n+                            // CompositeBuffer.toNioBuffer(idx, length) may return a single ByteBuffer (when requested\n+                            // length < components[0].length) or create a new ByteBuffer and copy multiple components\n+                            // into it. Later, proto parser will copy data from this temporary ByteBuffer again.\n+                            // To avoid unnecessary copying, we use newCodedInputStream(buffers, lengthOfData).\n+                            final ByteBuffer[] buffers = toDeserialize.toNioBuffers(toDeserialize.readerIndex(),\n+                                    lengthOfData);\n+                            in = buffers.length == 1 ? CodedInputStream.newInstance(buffers[0]) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce88ebbf332e284532c9d794815948ee1096d0f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MjE2NA==", "bodyText": "Wondering why we can not use ByteString.unsafeWrap() and aliasing for toDeserialize.nioBufferCount() == 1 case also? We are pretty sure that the buffer will not be mutated between creation of CodedInputStream and usage by the parser.", "url": "https://github.com/apple/servicetalk/pull/943#discussion_r382342164", "createdAt": "2020-02-21T00:52:43Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-protobuf/src/main/java/io/servicetalk/grpc/protobuf/ProtoBufSerializationProvider.java", "diffHunk": "@@ -186,6 +205,23 @@ private static boolean isCompressed(Buffer buffer) throws SerializationException\n             }\n         }\n \n+        private static CodedInputStream newCodedInputStream(final ByteBuffer[] buffers, final int lengthOfData) {\n+            // Because we allocated a new internal ByteBuffer that will never be mutated we may just wrap it and\n+            // enable aliasing to avoid an extra copying inside parser for a deserialized message.\n+            final CodedInputStream in = unsafeWrap(mergeByteBuffers(buffers, lengthOfData)).newCodedInput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce88ebbf332e284532c9d794815948ee1096d0f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM0MzA1Ng==", "bodyText": "If the size is not memoized, getSerializedSize() will use reflection to calculate the size. Is that worth the size optimization here?", "url": "https://github.com/apple/servicetalk/pull/943#discussion_r382343056", "createdAt": "2020-02-21T00:55:35Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-protobuf/src/main/java/io/servicetalk/grpc/protobuf/ProtoBufSerializationProviderBuilder.java", "diffHunk": "@@ -155,7 +157,7 @@ public GrpcSerializationProvider build() {\n         @Override\n         public Buffer serialize(final HttpHeaders headers, final T value, final BufferAllocator allocator) {\n             addContentHeaders(headers);\n-            return serializer.serialize(value, allocator);\n+            return serializer.serialize(value, allocator, METADATA_SIZE + value.getSerializedSize());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce88ebbf332e284532c9d794815948ee1096d0f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODI1Mjg5", "url": "https://github.com/apple/servicetalk/pull/943#pullrequestreview-362825289", "createdAt": "2020-02-21T18:22:55Z", "commit": {"oid": "2ce88ebbf332e284532c9d794815948ee1096d0f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3291, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}