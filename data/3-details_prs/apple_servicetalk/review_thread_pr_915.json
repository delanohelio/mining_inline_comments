{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODc5NzUw", "number": 915, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODowNTo1NlrODXOs9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxMTo1MVrODXSJfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njg0NzI3OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-protoc/src/main/java/io/servicetalk/grpc/protoc/Generator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODowNTo1NlrOFcb16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMToxMzoyNVrOFcgOag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MDYxNg==", "bodyText": "This will add annotation only for the Blocking*Rpc interfaces, you should do the same in another forEach above.", "url": "https://github.com/apple/servicetalk/pull/915#discussion_r365360616", "createdAt": "2020-01-10T18:05:56Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-protoc/src/main/java/io/servicetalk/grpc/protoc/Generator.java", "diffHunk": "@@ -252,6 +252,7 @@ private void addServiceRpcInterfaces(final State state, final TypeSpec.Builder s\n             final FieldSpec.Builder pathSpecBuilder = FieldSpec.builder(String.class, RPC_PATH, PUBLIC, STATIC, FINAL);\n             pathSpecBuilder.initializer(\"$T.$L\", rpcInterface.className, RPC_PATH);\n             final TypeSpec.Builder interfaceSpecBuilder = interfaceBuilder(name)\n+                    .addAnnotation(FunctionalInterface.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2802d2f35daa976654b5a29316bd7f25795fa1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQzMjQyNg==", "bodyText": "done", "url": "https://github.com/apple/servicetalk/pull/915#discussion_r365432426", "createdAt": "2020-01-10T21:13:25Z", "author": {"login": "volyx"}, "path": "servicetalk-grpc-protoc/src/main/java/io/servicetalk/grpc/protoc/Generator.java", "diffHunk": "@@ -252,6 +252,7 @@ private void addServiceRpcInterfaces(final State state, final TypeSpec.Builder s\n             final FieldSpec.Builder pathSpecBuilder = FieldSpec.builder(String.class, RPC_PATH, PUBLIC, STATIC, FINAL);\n             pathSpecBuilder.initializer(\"$T.$L\", rpcInterface.className, RPC_PATH);\n             final TypeSpec.Builder interfaceSpecBuilder = interfaceBuilder(name)\n+                    .addAnnotation(FunctionalInterface.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MDYxNg=="}, "originalCommit": {"oid": "bc2802d2f35daa976654b5a29316bd7f25795fa1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njg1Mjk0OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/protoc/GeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODowODoxNVrOFcb5YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODowODoxNVrOFcb5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MTUwNA==", "bodyText": "Please, prefer assertThat instead of assertNotNull and assertEquals. It produces better exception messages in case of failures.", "url": "https://github.com/apple/servicetalk/pull/915#discussion_r365361504", "createdAt": "2020-01-10T18:08:15Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/protoc/GeneratorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2019 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.protoc;\n+\n+import io.servicetalk.grpc.netty.TesterProto.Tester;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.RpcPaths;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.servicetalk.grpc.protoc.Words.Blocking;\n+import static io.servicetalk.grpc.protoc.Words.Rpc;\n+import static java.lang.Character.toUpperCase;\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class GeneratorTest {\n+\n+    @Test\n+    public void testGeneratedFunctionalInterfaces() {\n+\n+        final List<String> generatedInterfaces = new ArrayList<>();\n+\n+        for (RpcPaths rpcPath : RpcPaths.values()) {\n+            final String interfaceName = toUpperCase(rpcPath.name().charAt(0)) + rpcPath.name().substring(1);\n+            generatedInterfaces.add(interfaceName + Rpc);\n+            generatedInterfaces.add(Blocking + interfaceName + Rpc);\n+        }\n+\n+        final List<Class<?>> generatedRpcInterfaces = stream(Tester.class.getDeclaredClasses())\n+                .filter(declaredClass -> generatedInterfaces.contains(declaredClass.getSimpleName()))\n+                .collect(toList());\n+\n+        assertEquals(RpcPaths.values().length * 2, generatedRpcInterfaces.size());\n+\n+        for (Class<?> declaredClass : generatedRpcInterfaces) {\n+            assertNotNull(declaredClass.getAnnotation(FunctionalInterface.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2802d2f35daa976654b5a29316bd7f25795fa1"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Njg2NDAzOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/protoc/GeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODoxMjo0N1rOFccAMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxODoxMjo0N1rOFccAMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTM2MzI1MA==", "bodyText": "We do not have RpcPaths enum anymore. Looks like you used the old generated code. To regenerate it, use ./gradlew clean classes testClasses.", "url": "https://github.com/apple/servicetalk/pull/915#discussion_r365363250", "createdAt": "2020-01-10T18:12:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/protoc/GeneratorTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2019 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.protoc;\n+\n+import io.servicetalk.grpc.netty.TesterProto.Tester;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.RpcPaths;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static io.servicetalk.grpc.protoc.Words.Blocking;\n+import static io.servicetalk.grpc.protoc.Words.Rpc;\n+import static java.lang.Character.toUpperCase;\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toList;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public class GeneratorTest {\n+\n+    @Test\n+    public void testGeneratedFunctionalInterfaces() {\n+\n+        final List<String> generatedInterfaces = new ArrayList<>();\n+\n+        for (RpcPaths rpcPath : RpcPaths.values()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2802d2f35daa976654b5a29316bd7f25795fa1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NzQxMTgyOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/protoc/GeneratorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxMTo1MVrOFchWgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQyMjoxMTo1MVrOFchWgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTQ1MDg4MA==", "bodyText": "Because we want to test all 4 different API variants and we know that Tester class defines them all, I would make sure that the size of both Lists is 4.", "url": "https://github.com/apple/servicetalk/pull/915#discussion_r365450880", "createdAt": "2020-01-10T22:11:51Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/protoc/GeneratorTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright \u00a9 2019 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.protoc;\n+\n+import io.servicetalk.grpc.netty.TesterProto.Tester;\n+\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static io.servicetalk.grpc.protoc.Words.Blocking;\n+import static io.servicetalk.grpc.protoc.Words.Rpc;\n+import static java.util.Arrays.stream;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+\n+public class GeneratorTest {\n+\n+    @Test\n+    public void testGeneratedFunctionalInterfaces() {\n+\n+        final List<Class<?>> generatedRpcInterfaces = stream(Tester.class.getDeclaredClasses())\n+                .filter(declaredClass -> declaredClass.getAnnotation(FunctionalInterface.class) != null\n+                        && !declaredClass.getSimpleName().startsWith(Blocking)\n+                        && declaredClass.getSimpleName().endsWith(Rpc))\n+                .collect(toList());\n+\n+        final List<Class<?>> generatedBlockingRpcInterfaces = stream(Tester.class.getDeclaredClasses())\n+                .filter(declaredClass -> declaredClass.getAnnotation(FunctionalInterface.class) != null\n+                        && declaredClass.getSimpleName().startsWith(Blocking)\n+                        && declaredClass.getSimpleName().endsWith(Rpc))\n+                .collect(toList());\n+\n+        assertThat(generatedRpcInterfaces.size(), greaterThan(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68170a8261b6b020f5bf20bf1507931cbac86f14"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2821, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}