{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzY1MjA4", "number": 942, "title": "Use `PooledByteBufAllocator` for netty internally", "bodyText": "Motivation:\nWe configure Netty to use ST unpooled BufferAllocator.\nHowever, there are a lot of cases when netty needs to allocate\nbuffers internally and these buffers will never be exposed to the\nusers and will be properly released by netty. For example, when\nnetty writes data to the transport or when it cumulates for\ninternal state. Allocation of unpooled memory (especially direct\nmemory) significantly hurts performance and increases GC\npressure.\nModifications:\n\nConfigure netty to use it's PooledByteBufAllocator.DEFAULT\nallocator;\nUse allocator from the netty's ctx in HttpObjectEncoder\ninstead of hardcoded POOLED_ALLOCATOR;\nRemove RecvByteBufAllocator with pooled allocator that\nis not required anymore;\nDo not use CopyByteBufHandlerChannelInitializer for h2;\nCopy h2 DATA_FRAMEs from pooled to unpooled memory\nbefore propagating payload body to the user;\nDo not override ByteBufAllocator for SslHandler anymore;\nBufferAllocators.DEFAULT_ALLOCATOR should prefer heap\nmemory by default;\n\nResult:\n\nImproved performance of gRPC:\n\n\nAggregated API: RPS increased by 30-37%, p99 latency reduced\nby x1.8-5.7, depending on payload body size;\nStreaming API: RPS increased by 23-29%, p99 latency reduced\nby x2.1-4.7, depending on payload body size;\n\n\nImproved performance of HTTP:\n\n\nAggregated API: RPS increased by 7-13%, depending on payload\nbody size, no p99 latency change;\nStreaming API: RPS increased by 5-9%, depending on payload\nbody size, no p99 latency change;\n\n\nLess code to maintain.", "createdAt": "2020-02-18T18:18:50Z", "url": "https://github.com/apple/servicetalk/pull/942", "merged": true, "mergeCommit": {"oid": "82e04313758da7dbc54422bbce6607c390976deb"}, "closed": true, "closedAt": "2020-02-22T00:35:45Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFQ9bkgH2gAyMzc2NzY1MjA4OjM2NzIzMGVmZTRhYzJlMDgxOTQ2NzJmOTI0NmJkM2Q3NDc3OTcyMGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGo-bSgFqTM2Mjk4NjA3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "367230efe4ac2e08194672f9246bd3d74779720d", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/367230efe4ac2e08194672f9246bd3d74779720d", "committedDate": "2020-02-17T17:41:17Z", "message": "Configure netty to use pooled allocator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe4ab7315a85afe5ef7312260331b21363ab054", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/fbe4ab7315a85afe5ef7312260331b21363ab054", "committedDate": "2020-02-17T17:42:31Z", "message": "Use ctx.alloc() in HttpObjectEncoder instead of hardcoded POOLED_ALLOCATOR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59468687effc625e6ebad897cf89ae793df4d652", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/59468687effc625e6ebad897cf89ae793df4d652", "committedDate": "2020-02-17T17:42:32Z", "message": "Remove RecvByteBufAllocator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3d648cbeab3bbcba34e3f4a47e503733f8e0ed5", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/e3d648cbeab3bbcba34e3f4a47e503733f8e0ed5", "committedDate": "2020-02-17T17:42:32Z", "message": "Do not use CopyByteBufHandlerChannelInitializer for h2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "700d4e31167e23e890abd9e7e186cf07162e05c1", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/700d4e31167e23e890abd9e7e186cf07162e05c1", "committedDate": "2020-02-17T17:42:32Z", "message": "Use heap allocator as the default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b27c7c3290ca53a2431705de14b560813c7eaf", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/99b27c7c3290ca53a2431705de14b560813c7eaf", "committedDate": "2020-02-17T17:42:32Z", "message": "Revert AdaptiveRecvByteBufAllocator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9e5082fdf24e2855d1d8e2a3147df04f2a04739", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f9e5082fdf24e2855d1d8e2a3147df04f2a04739", "committedDate": "2020-02-17T17:47:19Z", "message": "Revert: Use `PooledByteBufAllocator` for `SslHandler` (#752)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca85071596c3484d40e1fe00e06278c7efe00c5b", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/ca85071596c3484d40e1fe00e06278c7efe00c5b", "committedDate": "2020-02-18T18:03:00Z", "message": "Fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e71f5265c1cf5528d9eb55e625ea54e281854216", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/e71f5265c1cf5528d9eb55e625ea54e281854216", "committedDate": "2020-02-18T18:08:04Z", "message": "Do not release ref objects in AbstractH2DuplexHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da0faa625c24263258f639d896851beac833e859", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/da0faa625c24263258f639d896851beac833e859", "committedDate": "2020-02-18T18:41:22Z", "message": "update copyright years"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c3d29b398c7d7f8d36845c79a705d9226373445", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/5c3d29b398c7d7f8d36845c79a705d9226373445", "committedDate": "2020-02-18T22:43:56Z", "message": "Merge remote-tracking branch 'upstream/master' into use-pooled-ba-in-netty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a13417029e9b44d2eb5af299386cbcc52a564a5", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/1a13417029e9b44d2eb5af299386cbcc52a564a5", "committedDate": "2020-02-18T23:01:39Z", "message": "Use BufferAllocator preference for memory type in AbstractH2DuplexHandler"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNzI5NTE5", "url": "https://github.com/apple/servicetalk/pull/942#pullrequestreview-360729519", "createdAt": "2020-02-18T22:45:49Z", "commit": {"oid": "da0faa625c24263258f639d896851beac833e859"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMjo0NTo0OVrOFrVOww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzo1MjozMFrOFrWpuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MDkzMQ==", "bodyText": "You can simplify control-flow as:\nfinal void readDataFrame(ChannelHandlerContext ctx, Http2DataFrame dataFrame) {\n    try {\n        if (dataFrame.content().isReadable()) {\n            // Copy to unpooled heap memory before passing to the user\n            Buffer data = allocator.newBuffer(dataFrame.content().readableBytes(), false);\n            ByteBuf nettyData = toByteBuf(data);\n            nettyData.writeBytes(dataFrame.content());\n            ctx.fireChannelRead(data);\n        }\n        if (dataFrame.isEndStream()) {\n            ctx.fireChannelRead(headersFactory.newEmptyTrailers());\n        }\n    } finally {\n        dataFrame.release();\n    }\n}", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r380980931", "createdAt": "2020-02-18T22:45:49Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/AbstractH2DuplexHandler.java", "diffHunk": "@@ -85,14 +96,32 @@ final void writeTrailers(ChannelHandlerContext ctx, Object msg, ChannelPromise p\n     }\n \n     final void readDataFrame(ChannelHandlerContext ctx, Object msg) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0faa625c24263258f639d896851beac833e859"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4MTIzNg==", "bodyText": "This is not used.", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r380981236", "createdAt": "2020-02-18T22:46:35Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/AbstractH2DuplexHandler.java", "diffHunk": "@@ -31,18 +32,28 @@\n import io.netty.handler.codec.http2.Http2DataFrame;\n import io.netty.handler.codec.http2.Http2Headers;\n import io.netty.handler.codec.http2.Http2ResetFrame;\n+import io.netty.util.ReferenceCountUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import javax.annotation.Nullable;\n \n import static io.netty.buffer.Unpooled.EMPTY_BUFFER;\n import static io.netty.handler.codec.http2.Http2Error.REFUSED_STREAM;\n-import static io.servicetalk.buffer.netty.BufferUtils.newBufferFrom;\n+import static io.servicetalk.buffer.netty.BufferUtils.toByteBuf;\n import static io.servicetalk.buffer.netty.BufferUtils.toByteBufNoThrow;\n import static io.servicetalk.http.netty.H2ToStH1Utils.h1HeadersToH2Headers;\n \n abstract class AbstractH2DuplexHandler extends ChannelDuplexHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractH2DuplexHandler.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0faa625c24263258f639d896851beac833e859"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4NDgyNA==", "bodyText": "nit: rename to cumulationAllocator to clarify intent.", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r380984824", "createdAt": "2020-02-18T22:54:48Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ByteToMessageDecoder.java", "diffHunk": "@@ -105,10 +105,19 @@\n      */\n     private byte decodeState = STATE_INIT;\n \n+    private final ByteBufAllocator alloc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0faa625c24263258f639d896851beac833e859"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk4OTYyMA==", "bodyText": "We should also check for ByteBufHolder objects here, H2 frames may be buffer holders.", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r380989620", "createdAt": "2020-02-18T23:07:11Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/CopyByteBufHandlerChannelInitializer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright \u00a9 2019-2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandler;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.util.ReferenceCountUtil;\n+\n+/**\n+ * Initializer to configure {@link ChannelInboundHandler} that will ensure no pooled {@link ByteBuf}s are passed to\n+ * the user and so no leaks are produced if the user does not call {@link ReferenceCountUtil#release(Object)}.\n+ */\n+public final class CopyByteBufHandlerChannelInitializer implements ChannelInitializer {\n+\n+    /**\n+     * {@link PooledByteBufAllocator} to use internally when we know memory won't be leaked.\n+     */\n+    public static final PooledByteBufAllocator POOLED_ALLOCATOR = PooledByteBufAllocator.DEFAULT;\n+\n+    private final CopyByteBufHandler copyHandler;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param alloc {@link ByteBufAllocator} to allocate unpooled memory.\n+     */\n+    public CopyByteBufHandlerChannelInitializer(final ByteBufAllocator alloc) {\n+        copyHandler = new CopyByteBufHandler(alloc);\n+    }\n+\n+    @Override\n+    public void init(final Channel channel) {\n+        channel.pipeline().addLast(copyHandler);\n+    }\n+\n+    /**\n+     * This handler has to be added to the {@link ChannelPipeline} when {@link PooledByteBufAllocator} is used for\n+     * reading data from the socket. The allocated {@link ByteBuf}s must be copied and released before handed over to\n+     * the user.\n+     */\n+    @Sharable\n+    private static final class CopyByteBufHandler extends SimpleChannelInboundHandler<ByteBuf> {\n+\n+        private final ByteBufAllocator alloc;\n+\n+        private CopyByteBufHandler(final ByteBufAllocator alloc) {\n+            if (alloc.isDirectBufferPooled()) {\n+                throw new IllegalArgumentException(\"ByteBufAllocator must be unpooled\");\n+            }\n+            this.alloc = alloc;\n+        }\n+\n+        @Override\n+        protected void channelRead0(final ChannelHandlerContext ctx, final ByteBuf buf) {\n+            // We must not release the incoming buf here because it will be released by SimpleChannelInboundHandler\n+            ctx.fireChannelRead(alloc.buffer(buf.readableBytes()).writeBytes(buf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0faa625c24263258f639d896851beac833e859"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NDA1OA==", "bodyText": "Please add comment here (and in NettyHttpServer) to explain why we are copying buffers before the HTTP encoder/decoder.", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r380994058", "createdAt": "2020-02-18T23:20:48Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpClientChannelInitializer.java", "diffHunk": "@@ -29,26 +31,27 @@\n \n final class HttpClientChannelInitializer implements ChannelInitializer {\n \n-    private final H1ProtocolConfig config;\n-    private final CloseHandler closeHandler;\n+    private final ChannelInitializer delegate;\n \n     /**\n      * Creates a new instance.\n      * @param config {@link H1ProtocolConfig}\n      * @param closeHandler observes protocol state events\n      */\n-    HttpClientChannelInitializer(H1ProtocolConfig config, CloseHandler closeHandler) {\n-        this.config = config;\n-        this.closeHandler = closeHandler;\n+    HttpClientChannelInitializer(final ByteBufAllocator alloc, final H1ProtocolConfig config,\n+                                 final CloseHandler closeHandler) {\n+        this.delegate = new CopyByteBufHandlerChannelInitializer(alloc).andThen(channel -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da0faa625c24263258f639d896851beac833e859"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5NDg2Ng==", "bodyText": "Should we be only doing the copy if the buffer is pooled?", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r380994866", "createdAt": "2020-02-18T23:23:25Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/CopyByteBufHandlerChannelInitializer.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright \u00a9 2019-2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandler.Sharable;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandler;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.util.ReferenceCountUtil;\n+\n+/**\n+ * Initializer to configure {@link ChannelInboundHandler} that will ensure no pooled {@link ByteBuf}s are passed to\n+ * the user and so no leaks are produced if the user does not call {@link ReferenceCountUtil#release(Object)}.\n+ */\n+public final class CopyByteBufHandlerChannelInitializer implements ChannelInitializer {\n+\n+    /**\n+     * {@link PooledByteBufAllocator} to use internally when we know memory won't be leaked.\n+     */\n+    public static final PooledByteBufAllocator POOLED_ALLOCATOR = PooledByteBufAllocator.DEFAULT;\n+\n+    private final CopyByteBufHandler copyHandler;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param alloc {@link ByteBufAllocator} to allocate unpooled memory.\n+     */\n+    public CopyByteBufHandlerChannelInitializer(final ByteBufAllocator alloc) {\n+        copyHandler = new CopyByteBufHandler(alloc);\n+    }\n+\n+    @Override\n+    public void init(final Channel channel) {\n+        channel.pipeline().addLast(copyHandler);\n+    }\n+\n+    /**\n+     * This handler has to be added to the {@link ChannelPipeline} when {@link PooledByteBufAllocator} is used for\n+     * reading data from the socket. The allocated {@link ByteBuf}s must be copied and released before handed over to\n+     * the user.\n+     */\n+    @Sharable\n+    private static final class CopyByteBufHandler extends SimpleChannelInboundHandler<ByteBuf> {\n+\n+        private final ByteBufAllocator alloc;\n+\n+        private CopyByteBufHandler(final ByteBufAllocator alloc) {\n+            if (alloc.isDirectBufferPooled()) {\n+                throw new IllegalArgumentException(\"ByteBufAllocator must be unpooled\");\n+            }\n+            this.alloc = alloc;\n+        }\n+\n+        @Override\n+        protected void channelRead0(final ChannelHandlerContext ctx, final ByteBuf buf) {\n+            // We must not release the incoming buf here because it will be released by SimpleChannelInboundHandler\n+            ctx.fireChannelRead(alloc.buffer(buf.readableBytes()).writeBytes(buf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a13417029e9b44d2eb5af299386cbcc52a564a5"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5ODA1NQ==", "bodyText": "Although highly unlikely, we should also add a handler to the accept pipeline (inside bootstrap.handler()) to make sure we do not leak pooled buffers.", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r380998055", "createdAt": "2020-02-18T23:33:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-tcp-netty-internal/src/main/java/io/servicetalk/tcp/netty/internal/TcpServerBinder.java", "diffHunk": "@@ -165,7 +165,7 @@ private static void configure(ReadOnlyTcpServerConfig config, boolean autoRead,\n         bs.option(ChannelOption.SO_BACKLOG, config.backlog());\n \n         // Set the correct ByteBufAllocator based on our BufferAllocator to minimize memory copies.\n-        ByteBufAllocator byteBufAllocator = BufferUtils.getByteBufAllocator(bufferAllocator);\n+        ByteBufAllocator byteBufAllocator = POOLED_ALLOCATOR;\n         bs.option(ChannelOption.ALLOCATOR, byteBufAllocator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a13417029e9b44d2eb5af299386cbcc52a564a5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTAwNDIxOQ==", "bodyText": "We should perhaps rename this class to H1StreamingConnectionFactory", "url": "https://github.com/apple/servicetalk/pull/942#discussion_r381004219", "createdAt": "2020-02-18T23:52:30Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/StreamingConnectionFactory.java", "diffHunk": "@@ -49,10 +50,12 @@ private StreamingConnectionFactory() {\n             final HttpExecutionContext executionContext, final ReadOnlyHttpClientConfig config,\n             final ChannelInitializer initializer) {\n         final CloseHandler closeHandler = forPipelinedRequestResponse(true, channel.config());\n+        assert config.h1Config() != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a13417029e9b44d2eb5af299386cbcc52a564a5"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66c2d2b6c0eb0d70553c8cb22383e15c48e8706e", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/66c2d2b6c0eb0d70553c8cb22383e15c48e8706e", "committedDate": "2020-02-20T21:55:09Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "572805670b1cf366ee90c853e363cfee2aaed171", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/572805670b1cf366ee90c853e363cfee2aaed171", "committedDate": "2020-02-21T19:35:42Z", "message": "Enhance CopyByteBufHandler to catch unexpected behavior and add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d5d061aa9b69a9688364cfd51d981f35c1f1d46", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/5d5d061aa9b69a9688364cfd51d981f35c1f1d46", "committedDate": "2020-02-21T19:36:07Z", "message": "Verify that we do not leak pooled memory in the \"accept\" pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e686a0ae8609f07199a1562491f784e4b2dfab", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a5e686a0ae8609f07199a1562491f784e4b2dfab", "committedDate": "2020-02-21T19:38:25Z", "message": "Remove unused BufferAllocator arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2643f2f7f2f92d01763700b9db8308c94de70ec", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/b2643f2f7f2f92d01763700b9db8308c94de70ec", "committedDate": "2020-02-21T19:39:06Z", "message": "Merge remote-tracking branch 'upstream/master' into use-pooled-ba-in-netty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38c2df50c8528e9f512f1f98c7c97197050f1e1c", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/38c2df50c8528e9f512f1f98c7c97197050f1e1c", "committedDate": "2020-02-21T19:46:20Z", "message": "Remove unused BufferAllocator argument"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8e129cb0a8b09bcb18bc1ad87c6d5595f64766e", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/e8e129cb0a8b09bcb18bc1ad87c6d5595f64766e", "committedDate": "2020-02-21T23:48:39Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2400d0e2afb54165987307c9347683c8d337ca0e", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/2400d0e2afb54165987307c9347683c8d337ca0e", "committedDate": "2020-02-22T00:10:19Z", "message": "small fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTg2MDc2", "url": "https://github.com/apple/servicetalk/pull/942#pullrequestreview-362986076", "createdAt": "2020-02-22T00:14:01Z", "commit": {"oid": "2400d0e2afb54165987307c9347683c8d337ca0e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3288, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}