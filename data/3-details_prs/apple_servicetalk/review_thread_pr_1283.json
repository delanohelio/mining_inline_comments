{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTQ1NDE3", "number": 1283, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTo0NjoyOVrOFGeyug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDo0NDowNFrOFHZFRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzQwMjgyOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/CompletableProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwMTo0NjoyOVrOIHg5IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMzo1OTo1NVrOII4mbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0OTg1Nw==", "bodyText": "Note that this.terminalSignal is no longer atomic and the visibility is provided by the queueUpdater atomic operations. The Subscriber API doesn't allow for concurrent access so this shouldn't violate the API but the value maybe overridden if no external synchronization is provided.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r544749857", "createdAt": "2020-12-17T01:46:29Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/CompletableProcessor.java", "diffHunk": "@@ -84,25 +87,32 @@ public void onError(Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(TerminalNotification terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, null, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n+    private void terminateLateSubscriber(Subscriber subscriber) {\n+        TerminalNotification terminalSignal = this.terminalSignal;\n+        assert terminalSignal != null;\n+        terminalSignal.terminate(subscriber);\n     }\n \n-    private void notifyListeners(TerminalNotification terminalSignal) {\n-        Throwable delayedCause = null;\n-        Subscriber subscriber;\n-        while ((subscriber = subscribers.poll()) != null) {\n-            try {\n-                terminalSignal.terminate(subscriber);\n-            } catch (Throwable cause) {\n-                delayedCause = catchUnexpected(delayedCause, cause);\n+    private void terminate(TerminalNotification terminalSignal) {\n+        if (this.terminalSignal == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "220d434e0181a9ac9e386e84506098bc9b205c83"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1ODIzNQ==", "bodyText": "Consider clarifying this in the comment in code", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546158235", "createdAt": "2020-12-19T00:18:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/CompletableProcessor.java", "diffHunk": "@@ -84,25 +87,32 @@ public void onError(Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(TerminalNotification terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, null, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n+    private void terminateLateSubscriber(Subscriber subscriber) {\n+        TerminalNotification terminalSignal = this.terminalSignal;\n+        assert terminalSignal != null;\n+        terminalSignal.terminate(subscriber);\n     }\n \n-    private void notifyListeners(TerminalNotification terminalSignal) {\n-        Throwable delayedCause = null;\n-        Subscriber subscriber;\n-        while ((subscriber = subscribers.poll()) != null) {\n-            try {\n-                terminalSignal.terminate(subscriber);\n-            } catch (Throwable cause) {\n-                delayedCause = catchUnexpected(delayedCause, cause);\n+    private void terminate(TerminalNotification terminalSignal) {\n+        if (this.terminalSignal == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0OTg1Nw=="}, "originalCommit": {"oid": "220d434e0181a9ac9e386e84506098bc9b205c83"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MDkyNA==", "bodyText": "Actually, it makes me feel a bit uncomfortable that late subscribers may terminate differently. WDYT if instead of a CLOSED node inside ConcurrentStack we will intoduce a subtype TerminalNode which will keep terminalSignal? ConcurrentStack will have 2 generic types: ConcurrentStack<Subscriber, TerminalNotification>. Then instead of top == CLOSED check we can use top instanceOf TerminalNode.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546160924", "createdAt": "2020-12-19T00:31:32Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/CompletableProcessor.java", "diffHunk": "@@ -84,25 +87,32 @@ public void onError(Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(TerminalNotification terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, null, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n+    private void terminateLateSubscriber(Subscriber subscriber) {\n+        TerminalNotification terminalSignal = this.terminalSignal;\n+        assert terminalSignal != null;\n+        terminalSignal.terminate(subscriber);\n     }\n \n-    private void notifyListeners(TerminalNotification terminalSignal) {\n-        Throwable delayedCause = null;\n-        Subscriber subscriber;\n-        while ((subscriber = subscribers.poll()) != null) {\n-            try {\n-                terminalSignal.terminate(subscriber);\n-            } catch (Throwable cause) {\n-                delayedCause = catchUnexpected(delayedCause, cause);\n+    private void terminate(TerminalNotification terminalSignal) {\n+        if (this.terminalSignal == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0OTg1Nw=="}, "originalCommit": {"oid": "220d434e0181a9ac9e386e84506098bc9b205c83"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4NTU1MA==", "bodyText": "yes I can do this. the extra memory barriers adds overhead in multithreaded cases, however it still is an improvement over what we had originally with the concurrent queue.\n# non-atomic terminal\nCompletableProcessorBenchmark.mtAdd20Complete  thrpt    5    951658.114 \u00b1  15566.060  ops/s\n\n# atomic terminal (with volatile coordination between threads)\nCompletableProcessorBenchmark.mtAdd20Complete  thrpt    5    715757.301 \u00b1  22471.221  ops/s", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546185550", "createdAt": "2020-12-19T03:45:45Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/CompletableProcessor.java", "diffHunk": "@@ -84,25 +87,32 @@ public void onError(Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(TerminalNotification terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, null, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n+    private void terminateLateSubscriber(Subscriber subscriber) {\n+        TerminalNotification terminalSignal = this.terminalSignal;\n+        assert terminalSignal != null;\n+        terminalSignal.terminate(subscriber);\n     }\n \n-    private void notifyListeners(TerminalNotification terminalSignal) {\n-        Throwable delayedCause = null;\n-        Subscriber subscriber;\n-        while ((subscriber = subscribers.poll()) != null) {\n-            try {\n-                terminalSignal.terminate(subscriber);\n-            } catch (Throwable cause) {\n-                delayedCause = catchUnexpected(delayedCause, cause);\n+    private void terminate(TerminalNotification terminalSignal) {\n+        if (this.terminalSignal == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0OTg1Nw=="}, "originalCommit": {"oid": "220d434e0181a9ac9e386e84506098bc9b205c83"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4Njg2MA==", "bodyText": "addressed in #1298", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546186860", "createdAt": "2020-12-19T03:59:55Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/CompletableProcessor.java", "diffHunk": "@@ -84,25 +87,32 @@ public void onError(Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(TerminalNotification terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, null, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n+    private void terminateLateSubscriber(Subscriber subscriber) {\n+        TerminalNotification terminalSignal = this.terminalSignal;\n+        assert terminalSignal != null;\n+        terminalSignal.terminate(subscriber);\n     }\n \n-    private void notifyListeners(TerminalNotification terminalSignal) {\n-        Throwable delayedCause = null;\n-        Subscriber subscriber;\n-        while ((subscriber = subscribers.poll()) != null) {\n-            try {\n-                terminalSignal.terminate(subscriber);\n-            } catch (Throwable cause) {\n-                delayedCause = catchUnexpected(delayedCause, cause);\n+    private void terminate(TerminalNotification terminalSignal) {\n+        if (this.terminalSignal == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDc0OTg1Nw=="}, "originalCommit": {"oid": "220d434e0181a9ac9e386e84506098bc9b205c83"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjc5ODI3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzoxMToyNlrOII1xVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzoyOToxMFrOII2C3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0MDUwMg==", "bodyText": "This is not safely published to other threads. (eg. volatile). Intended due to method contract?", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546140502", "createdAt": "2020-12-18T23:11:26Z", "author": {"login": "tkountis"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NDk5MA==", "bodyText": "correct we don't need strong guarantees of removal, mostly just for GC. if we needed stronger guarantees we would have to make item volatile and use atomics here and in pop, but the relaxed semantics are OK and this makes the hot-path (e.g. pop) less expensive.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546144990", "createdAt": "2020-12-18T23:29:10Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0MDUwMg=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjgwOTQzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzoxNzo1MFrOII13mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzozMDoxNlrOII2D2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0MjEwNQ==", "bodyText": "counter?", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546142105", "createdAt": "2020-12-18T23:17:50Z", "author": {"login": "tkountis"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "diffHunk": "@@ -88,38 +67,34 @@ public void onError(final Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(@Nullable Object terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, TERMINAL_NULL, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n-    }\n-\n-    private void notifyListeners(@Nullable Object terminalSignal) {\n-        Subscriber<? super T> subscriber;\n-        Throwable delayedCause = null;\n+    private void terminateLateSubscriber(Subscriber<? super T> subscriber) {\n+        Object terminalSignal = this.terminalSignal;\n+        assert terminalSignal != TERMINAL_UNSET;\n         if (terminalSignal instanceof TerminalNotification) {\n             final Throwable error = ((TerminalNotification) terminalSignal).cause();\n-            assert error != null : \"Cause can't be null from TerminalNotification.error(..)\";\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onError(error);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            assert error != null;\n+            subscriber.onError(error);\n         } else {\n             @SuppressWarnings(\"unchecked\")\n             final T value = (T) terminalSignal;\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onSuccess(value);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            subscriber.onSuccess(value);\n         }\n-        if (delayedCause != null) {\n-            throwException(delayedCause);\n+    }\n+\n+    private void terminate(@Nullable Object terminalSignal) {\n+        if (this.terminalSignal == TERMINAL_UNSET) {\n+            // We must set terminalSignal before counter as we depend upon happens-before relationship for this value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NTI0Mg==", "bodyText": "whoops, old comment let me update.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546145242", "createdAt": "2020-12-18T23:30:16Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "diffHunk": "@@ -88,38 +67,34 @@ public void onError(final Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(@Nullable Object terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, TERMINAL_NULL, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n-    }\n-\n-    private void notifyListeners(@Nullable Object terminalSignal) {\n-        Subscriber<? super T> subscriber;\n-        Throwable delayedCause = null;\n+    private void terminateLateSubscriber(Subscriber<? super T> subscriber) {\n+        Object terminalSignal = this.terminalSignal;\n+        assert terminalSignal != TERMINAL_UNSET;\n         if (terminalSignal instanceof TerminalNotification) {\n             final Throwable error = ((TerminalNotification) terminalSignal).cause();\n-            assert error != null : \"Cause can't be null from TerminalNotification.error(..)\";\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onError(error);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            assert error != null;\n+            subscriber.onError(error);\n         } else {\n             @SuppressWarnings(\"unchecked\")\n             final T value = (T) terminalSignal;\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onSuccess(value);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            subscriber.onSuccess(value);\n         }\n-        if (delayedCause != null) {\n-            throwException(delayedCause);\n+    }\n+\n+    private void terminate(@Nullable Object terminalSignal) {\n+        if (this.terminalSignal == TERMINAL_UNSET) {\n+            // We must set terminalSignal before counter as we depend upon happens-before relationship for this value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0MjEwNQ=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjgyMDYwOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzoyNDozNVrOII1-FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzoyNDozNVrOII1-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0Mzc2NQ==", "bodyText": "consider fast-exit when CLOSED", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546143765", "createdAt": "2020-12-18T23:24:35Z", "author": {"login": "tkountis"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg0NTEzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzozOToxN1rOII2L_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwNDowMDowN1rOII4mhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NzMyNw==", "bodyText": "Should we clarify in the javadoc that this method may return items that were already removed and the usage of the returned item should be idempotent?", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546147327", "createdAt": "2020-12-18T23:39:17Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2NjQ4Ng==", "bodyText": "I tired to clarify the \"relaxed\" constraints in the java docs for relaxedRemove. if you don't use relaxedRemove then there are no special cases to consider. any suggestions on how to improve?", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546166486", "createdAt": "2020-12-19T01:03:07Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NzMyNw=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2OTQ1Mg==", "bodyText": "Should we name it relaxedPop() then and reference #relaxedRemove(T)?", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546169452", "createdAt": "2020-12-19T01:20:19Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NzMyNw=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE4Njg4NA==", "bodyText": "addressed in #1298", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546186884", "createdAt": "2020-12-19T04:00:07Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE0NzMyNw=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg3MzgwOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo1MDozM1rOII2e2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMjozMjo0MVrOII4FLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1MjE1Mg==", "bodyText": "Not sure if we need, but we can add topUpdater.compareAndSet(this, currTop, currTop.next); before the return as the best effort in case the item was found in the top node. If the CAS returns false, we don't care.\nTo avoid annecessary CAS, we can add a local boolean flag to detect if we found the item in the top or not.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546152152", "createdAt": "2020-12-18T23:50:33Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.\n+                return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3ODM0OQ==", "bodyText": "similar comment to #1283 (comment) ... lets punt on trying to patch removals in this implementation.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546178349", "createdAt": "2020-12-19T02:32:41Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.\n+                return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1MjE1Mg=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg4NDE0OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo1NjowN1rOII2k7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMjozODozOFrOII4HxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1MzcxMQ==", "bodyText": "Not sure if it's worth additiona complexity, but we can try to clean up top nodes with null items every time we touch the top.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546153711", "createdAt": "2020-12-18T23:56:07Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3ODA3NQ==", "bodyText": "I don't think it is worth the complexity as this will only help in specific scenarios and we are assuming small sets. I think if we run into issues with the \"relaxed\" reclamation policy we can provide an alternative implementation which is more strict.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546178075", "createdAt": "2020-12-19T02:29:33Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1MzcxMQ=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3OTAxMg==", "bodyText": "sgtm!", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546179012", "createdAt": "2020-12-19T02:38:38Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1MzcxMQ=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg4NTcxOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo1NzowNVrOII2l2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMzo1NzowNVrOII2l2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1Mzk0NA==", "bodyText": "Same for relaxedRemove, if currTop.item == null we can try to update the top.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546153944", "createdAt": "2020-12-18T23:57:05Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.\n+                return true;\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg5NTUzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDowMzozNFrOII2rGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDowMzozNFrOII2rGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1NTI4OQ==", "bodyText": "requireNonNull(closer)?", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546155289", "createdAt": "2020-12-19T00:03:34Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.\n+                return true;\n+            } else {\n+                currTop = currTop.next;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    void close(Consumer<T> closer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg5NzM4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDowNDo1MFrOII2sDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDowNDo1MFrOII2sDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1NTUzMg==", "bodyText": "CLOSED can be only at the top. Consider removing this check from the loop and fast exit if oldTop == CLOSED.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546155532", "createdAt": "2020-12-19T00:04:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.\n+                return true;\n+            } else {\n+                currTop = currTop.next;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    void close(Consumer<T> closer) {\n+        @SuppressWarnings(\"unchecked\")\n+        Node<T> oldTop = topUpdater.getAndSet(this, closedNode());\n+        Throwable delayedCause = null;\n+        while (oldTop != null && oldTop != CLOSED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjg5OTQzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDowNjowMFrOII2tKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDowNjowMFrOII2tKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE1NTgxOQ==", "bodyText": "Doesn't look like next variable is useful. Can we remove it and just do oldTop = oldTop.next`?", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546155819", "createdAt": "2020-12-19T00:06:00Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ConcurrentStack.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import java.util.function.Consumer;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+final class ConcurrentStack<T> {\n+    private static final Node<?> CLOSED = new Node<>();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<ConcurrentStack, Node> topUpdater =\n+            newUpdater(ConcurrentStack.class, Node.class, \"top\");\n+    @Nullable\n+    private volatile Node<T> top;\n+\n+    boolean push(T item) {\n+        final Node<T> newTop = new Node<>(item);\n+        Node<T> oldTop;\n+        do {\n+            oldTop = top;\n+            if (oldTop == CLOSED) {\n+                return false;\n+            }\n+            newTop.next = oldTop;\n+        } while (!topUpdater.compareAndSet(this, oldTop, newTop));\n+        return true;\n+    }\n+\n+    @Nullable\n+    T pop() {\n+        for (;;) {\n+            final Node<T> oldTop = top;\n+            if (oldTop == null) {\n+                return null;\n+            } else if (topUpdater.compareAndSet(this, oldTop, oldTop.next)) {\n+                final T item = oldTop.item;\n+                if (item != null) {\n+                    return item;\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Best effort removal of {@code item} from this stack.\n+     * @param item The item to remove.\n+     * @return {@code true} if the item was found in this stack and marked for removal. The \"relaxed\" nature of\n+     * this method means {@code true} might be returned in the following scenarios without external synchronization:\n+     * <ul>\n+     *     <li>invoked multiple times with the same {@code item} from different threads</li>\n+     *     <li>{@link #pop()} removes this item from another thread</li>\n+     * </ul>\n+     */\n+    boolean relaxedRemove(T item) {\n+        requireNonNull(item);\n+        Node<T> currTop = top;\n+        while (currTop != null) {\n+            if (item.equals(currTop.item)) {\n+                currTop.item = null; // best effort null out the item. pop/close will discard the Node later.\n+                return true;\n+            } else {\n+                currTop = currTop.next;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    void close(Consumer<T> closer) {\n+        @SuppressWarnings(\"unchecked\")\n+        Node<T> oldTop = topUpdater.getAndSet(this, closedNode());\n+        Throwable delayedCause = null;\n+        while (oldTop != null && oldTop != CLOSED) {\n+            final Node<T> next = oldTop.next;\n+            final T item = oldTop.item;\n+            oldTop = next;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjk1MzAzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMDo0NDowNFrOII3J8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMjozMTo1NlrOII4E4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzE4NA==", "bodyText": "Instead of going back and forth between types, consider using Consumer<Subscriber<...>> type for terminalSignal. Then you can use null instead of TERMINAL_UNSET and simply pass the consumer into the stack.close(...).", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546163184", "createdAt": "2020-12-19T00:44:04Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "diffHunk": "@@ -88,38 +67,34 @@ public void onError(final Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(@Nullable Object terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, TERMINAL_NULL, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n-    }\n-\n-    private void notifyListeners(@Nullable Object terminalSignal) {\n-        Subscriber<? super T> subscriber;\n-        Throwable delayedCause = null;\n+    private void terminateLateSubscriber(Subscriber<? super T> subscriber) {\n+        Object terminalSignal = this.terminalSignal;\n+        assert terminalSignal != TERMINAL_UNSET;\n         if (terminalSignal instanceof TerminalNotification) {\n             final Throwable error = ((TerminalNotification) terminalSignal).cause();\n-            assert error != null : \"Cause can't be null from TerminalNotification.error(..)\";\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onError(error);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            assert error != null;\n+            subscriber.onError(error);\n         } else {\n             @SuppressWarnings(\"unchecked\")\n             final T value = (T) terminalSignal;\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onSuccess(value);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            subscriber.onSuccess(value);\n         }\n-        if (delayedCause != null) {\n-            throwException(delayedCause);\n+    }\n+\n+    private void terminate(@Nullable Object terminalSignal) {\n+        if (this.terminalSignal == TERMINAL_UNSET) {\n+            // We must set terminalSignal before counter as we depend upon happens-before relationship for this value\n+            // to be visible for any future late subscribers.\n+            this.terminalSignal = terminalSignal;\n+            if (terminalSignal instanceof TerminalNotification) {\n+                final Throwable error = ((TerminalNotification) terminalSignal).cause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MDYzOQ==", "bodyText": "interesting suggestion. this makes the code cleaner but may add allocation on the success path.", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546170639", "createdAt": "2020-12-19T01:28:13Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "diffHunk": "@@ -88,38 +67,34 @@ public void onError(final Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(@Nullable Object terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, TERMINAL_NULL, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n-    }\n-\n-    private void notifyListeners(@Nullable Object terminalSignal) {\n-        Subscriber<? super T> subscriber;\n-        Throwable delayedCause = null;\n+    private void terminateLateSubscriber(Subscriber<? super T> subscriber) {\n+        Object terminalSignal = this.terminalSignal;\n+        assert terminalSignal != TERMINAL_UNSET;\n         if (terminalSignal instanceof TerminalNotification) {\n             final Throwable error = ((TerminalNotification) terminalSignal).cause();\n-            assert error != null : \"Cause can't be null from TerminalNotification.error(..)\";\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onError(error);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            assert error != null;\n+            subscriber.onError(error);\n         } else {\n             @SuppressWarnings(\"unchecked\")\n             final T value = (T) terminalSignal;\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onSuccess(value);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            subscriber.onSuccess(value);\n         }\n-        if (delayedCause != null) {\n-            throwException(delayedCause);\n+    }\n+\n+    private void terminate(@Nullable Object terminalSignal) {\n+        if (this.terminalSignal == TERMINAL_UNSET) {\n+            // We must set terminalSignal before counter as we depend upon happens-before relationship for this value\n+            // to be visible for any future late subscribers.\n+            this.terminalSignal = terminalSignal;\n+            if (terminalSignal instanceof TerminalNotification) {\n+                final Throwable error = ((TerminalNotification) terminalSignal).cause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzE4NA=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTYxMg==", "bodyText": "onSuccess invokes this method and creates a lambda anyway, what will cause additional allocation? Assuming terminal methods are invoked only one time", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546171612", "createdAt": "2020-12-19T01:35:35Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "diffHunk": "@@ -88,38 +67,34 @@ public void onError(final Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(@Nullable Object terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, TERMINAL_NULL, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n-    }\n-\n-    private void notifyListeners(@Nullable Object terminalSignal) {\n-        Subscriber<? super T> subscriber;\n-        Throwable delayedCause = null;\n+    private void terminateLateSubscriber(Subscriber<? super T> subscriber) {\n+        Object terminalSignal = this.terminalSignal;\n+        assert terminalSignal != TERMINAL_UNSET;\n         if (terminalSignal instanceof TerminalNotification) {\n             final Throwable error = ((TerminalNotification) terminalSignal).cause();\n-            assert error != null : \"Cause can't be null from TerminalNotification.error(..)\";\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onError(error);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            assert error != null;\n+            subscriber.onError(error);\n         } else {\n             @SuppressWarnings(\"unchecked\")\n             final T value = (T) terminalSignal;\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onSuccess(value);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            subscriber.onSuccess(value);\n         }\n-        if (delayedCause != null) {\n-            throwException(delayedCause);\n+    }\n+\n+    private void terminate(@Nullable Object terminalSignal) {\n+        if (this.terminalSignal == TERMINAL_UNSET) {\n+            // We must set terminalSignal before counter as we depend upon happens-before relationship for this value\n+            // to be visible for any future late subscribers.\n+            this.terminalSignal = terminalSignal;\n+            if (terminalSignal instanceof TerminalNotification) {\n+                final Throwable error = ((TerminalNotification) terminalSignal).cause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzE4NA=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3ODI3Mw==", "bodyText": "good point, you are right let me make this change!", "url": "https://github.com/apple/servicetalk/pull/1283#discussion_r546178273", "createdAt": "2020-12-19T02:31:56Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleProcessor.java", "diffHunk": "@@ -88,38 +67,34 @@ public void onError(final Throwable t) {\n         terminate(TerminalNotification.error(t));\n     }\n \n-    private void terminate(@Nullable Object terminalSignal) {\n-        if (terminalSignalUpdater.compareAndSet(this, TERMINAL_NULL, terminalSignal)) {\n-            notifyListeners(terminalSignal);\n-        }\n-    }\n-\n-    private void notifyListeners(@Nullable Object terminalSignal) {\n-        Subscriber<? super T> subscriber;\n-        Throwable delayedCause = null;\n+    private void terminateLateSubscriber(Subscriber<? super T> subscriber) {\n+        Object terminalSignal = this.terminalSignal;\n+        assert terminalSignal != TERMINAL_UNSET;\n         if (terminalSignal instanceof TerminalNotification) {\n             final Throwable error = ((TerminalNotification) terminalSignal).cause();\n-            assert error != null : \"Cause can't be null from TerminalNotification.error(..)\";\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onError(error);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            assert error != null;\n+            subscriber.onError(error);\n         } else {\n             @SuppressWarnings(\"unchecked\")\n             final T value = (T) terminalSignal;\n-            while ((subscriber = subscribers.poll()) != null) {\n-                try {\n-                    subscriber.onSuccess(value);\n-                } catch (Throwable cause) {\n-                    delayedCause = catchUnexpected(delayedCause, cause);\n-                }\n-            }\n+            subscriber.onSuccess(value);\n         }\n-        if (delayedCause != null) {\n-            throwException(delayedCause);\n+    }\n+\n+    private void terminate(@Nullable Object terminalSignal) {\n+        if (this.terminalSignal == TERMINAL_UNSET) {\n+            // We must set terminalSignal before counter as we depend upon happens-before relationship for this value\n+            // to be visible for any future late subscribers.\n+            this.terminalSignal = terminalSignal;\n+            if (terminalSignal instanceof TerminalNotification) {\n+                final Throwable error = ((TerminalNotification) terminalSignal).cause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE2MzE4NA=="}, "originalCommit": {"oid": "e235249ac28b338ff801a537626e4be328702976"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2493, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}