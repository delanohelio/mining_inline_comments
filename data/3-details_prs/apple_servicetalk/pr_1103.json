{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDMxMTk0", "number": 1103, "title": "opentracing upgrade from 0.31 to 0.33", "bodyText": "upgraded opentracing from 0.31 to 0.33", "createdAt": "2020-07-24T18:35:29Z", "url": "https://github.com/apple/servicetalk/pull/1103", "merged": true, "mergeCommit": {"oid": "c9abf84b1f395ef0f94c82c7202e48284c05f1a4"}, "closed": true, "closedAt": "2020-07-27T16:55:54Z", "author": {"login": "suman-ganta"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4LbFlgFqTQ1NTIwNzczMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5Ey_igFqTQ1NTk2NDM0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjA3NzMw", "url": "https://github.com/apple/servicetalk/pull/1103#pullrequestreview-455207730", "createdAt": "2020-07-24T22:00:49Z", "commit": {"oid": "8bba6ddbb480ee510c30385dbd76c9b8399e3068"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjowMDo0OVrOG2-4Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjowNDowMFrOG2-7lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNjQ4Nw==", "bodyText": "can you make this package private (least access required)?", "url": "https://github.com/apple/servicetalk/pull/1103#discussion_r460306487", "createdAt": "2020-07-24T22:00:49Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/AbstractTracingHttpFilter.java", "diffHunk": "@@ -116,8 +126,20 @@ protected boolean isError(final HttpResponseMetaData metaData) {\n \n         private void tagStatusCode() {\n             if (metaData != null) {\n-                HTTP_STATUS.set(currentScope.span(), metaData.status().code());\n+                HTTP_STATUS.set(span, metaData.status().code());\n             }\n         }\n+\n+        private void closeAll() {\n+            try {\n+                currentScope.close();\n+            } finally {\n+                span.finish();\n+            }\n+        }\n+\n+        protected final Span getSpan() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bba6ddbb480ee510c30385dbd76c9b8399e3068"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNjY4MQ==", "bodyText": "can you make this method static?", "url": "https://github.com/apple/servicetalk/pull/1103#discussion_r460306681", "createdAt": "2020-07-24T22:01:33Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-opentracing-http/src/main/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilter.java", "diffHunk": "@@ -133,8 +134,26 @@ private ScopeTracker newTracker(final HttpRequestMetaData request) {\n         if (activeSpan != null) {\n             spanBuilder = spanBuilder.asChildOf(activeSpan);\n         }\n-        Scope scope = spanBuilder.startActive(true);\n-        tracer.inject(scope.span().context(), formatter, request.headers());\n-        return new ScopeTracker(scope);\n+        Span span = spanBuilder.start();\n+        Scope scope = tracer.activateSpan(span);\n+        try {\n+            tracer.inject(span.context(), formatter, request.headers());\n+            return new ScopeTracker(scope, span);\n+        } catch (Throwable cause) {\n+            handlePrematureError(span, scope);\n+            throw cause;\n+        }\n+    }\n+\n+    private void handlePrematureError(Span span, Scope scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bba6ddbb480ee510c30385dbd76c9b8399e3068"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwNzM1MA==", "bodyText": "can you add the following:\n finally {\n  clientSpan.finish();\n}", "url": "https://github.com/apple/servicetalk/pull/1103#discussion_r460307350", "createdAt": "2020-07-24T22:04:00Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-opentracing-http/src/test/java/io/servicetalk/opentracing/http/TracingHttpRequesterFilterTest.java", "diffHunk": "@@ -158,33 +158,34 @@ public void testInjectWithParent() throws Exception {\n             try (HttpClient client = forSingleAddress(serverHostAndPort(context))\n                     .appendClientFilter(new TracingHttpRequesterFilter(tracer, \"testClient\"))\n                     .appendClientFilter(new TestTracingLoggerFilter(TRACING_TEST_LOG_LINE_PREFIX)).build()) {\n-                try (InMemoryScope clientScope = tracer.buildSpan(\"test\").startActive(true)) {\n-                    HttpResponse response = client.request(client.get(requestUrl)).toFuture().get();\n-                    TestSpanState serverSpanState = response.payloadBody(httpSerializer.deserializerFor(\n+                    InMemorySpan clientSpan = tracer.buildSpan(\"test\").start();\n+                    try (Scope ignored = tracer.activateSpan(clientSpan)) {\n+                        HttpResponse response = client.request(client.get(requestUrl)).toFuture().get();\n+                        TestSpanState serverSpanState = response.payloadBody(httpSerializer.deserializerFor(\n                             TestSpanState.class));\n \n-                    assertThat(serverSpanState.traceId, isHexId());\n-                    assertThat(serverSpanState.spanId, isHexId());\n-                    assertThat(serverSpanState.parentSpanId, isHexId());\n+                        assertThat(serverSpanState.traceId, isHexId());\n+                        assertThat(serverSpanState.spanId, isHexId());\n+                        assertThat(serverSpanState.parentSpanId, isHexId());\n \n-                    assertThat(serverSpanState.traceId, equalToIgnoringCase(clientScope.span().traceIdHex()));\n-                    assertThat(serverSpanState.parentSpanId, equalToIgnoringCase(clientScope.span().spanIdHex()));\n+                        assertThat(serverSpanState.traceId, equalToIgnoringCase(clientSpan.traceIdHex()));\n+                        assertThat(serverSpanState.parentSpanId, equalToIgnoringCase(clientSpan.spanIdHex()));\n \n-                    // don't mess with caller span state\n-                    assertEquals(clientScope.span(), tracer.activeSpan());\n+                        // don't mess with caller span state\n+                        assertEquals(clientSpan, tracer.activeSpan());\n \n-                    assertEquals(1, spanListener.spanFinishedCount());\n-                    InMemorySpan lastFinishedSpan = spanListener.lastFinishedSpan();\n-                    assertNotNull(lastFinishedSpan);\n-                    assertEquals(SPAN_KIND_CLIENT, lastFinishedSpan.tags().get(SPAN_KIND.getKey()));\n-                    assertEquals(GET.name(), lastFinishedSpan.tags().get(HTTP_METHOD.getKey()));\n-                    assertEquals(requestUrl, lastFinishedSpan.tags().get(HTTP_URL.getKey()));\n-                    assertEquals(OK.code(), lastFinishedSpan.tags().get(HTTP_STATUS.getKey()));\n-                    assertFalse(lastFinishedSpan.tags().containsKey(ERROR.getKey()));\n+                        assertEquals(1, spanListener.spanFinishedCount());\n+                        InMemorySpan lastFinishedSpan = spanListener.lastFinishedSpan();\n+                        assertNotNull(lastFinishedSpan);\n+                        assertEquals(SPAN_KIND_CLIENT, lastFinishedSpan.tags().get(SPAN_KIND.getKey()));\n+                        assertEquals(GET.name(), lastFinishedSpan.tags().get(HTTP_METHOD.getKey()));\n+                        assertEquals(requestUrl, lastFinishedSpan.tags().get(HTTP_URL.getKey()));\n+                        assertEquals(OK.code(), lastFinishedSpan.tags().get(HTTP_STATUS.getKey()));\n+                        assertFalse(lastFinishedSpan.tags().containsKey(ERROR.getKey()));\n \n-                    verifyTraceIdPresentInLogs(stableAccumulated(1000), requestUrl, serverSpanState.traceId,\n+                        verifyTraceIdPresentInLogs(stableAccumulated(1000), requestUrl, serverSpanState.traceId,\n                             serverSpanState.spanId, serverSpanState.parentSpanId, TRACING_TEST_LOG_LINE_PREFIX);\n-                }\n+                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bba6ddbb480ee510c30385dbd76c9b8399e3068"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31360a1048e397ffae4e6f088555b49ceb922bc1", "author": {"user": {"login": "suman-ganta", "name": null}}, "url": "https://github.com/apple/servicetalk/commit/31360a1048e397ffae4e6f088555b49ceb922bc1", "committedDate": "2020-07-24T22:24:27Z", "message": "opentracing upgrade from 0.31 to 0.33"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bba6ddbb480ee510c30385dbd76c9b8399e3068", "author": {"user": {"login": "suman-ganta", "name": null}}, "url": "https://github.com/apple/servicetalk/commit/8bba6ddbb480ee510c30385dbd76c9b8399e3068", "committedDate": "2020-07-24T18:33:19Z", "message": "opentracing upgrade from 0.31 to 0.33"}, "afterCommit": {"oid": "9f602771695137c497913e38d1e7bc2727af034b", "author": {"user": {"login": "suman-ganta", "name": null}}, "url": "https://github.com/apple/servicetalk/commit/9f602771695137c497913e38d1e7bc2727af034b", "committedDate": "2020-07-24T18:29:36Z", "message": "opentracing upgrade from 0.31 to 0.33"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f602771695137c497913e38d1e7bc2727af034b", "author": {"user": {"login": "suman-ganta", "name": null}}, "url": "https://github.com/apple/servicetalk/commit/9f602771695137c497913e38d1e7bc2727af034b", "committedDate": "2020-07-24T18:29:36Z", "message": "opentracing upgrade from 0.31 to 0.33"}, "afterCommit": {"oid": "31360a1048e397ffae4e6f088555b49ceb922bc1", "author": {"user": {"login": "suman-ganta", "name": null}}, "url": "https://github.com/apple/servicetalk/commit/31360a1048e397ffae4e6f088555b49ceb922bc1", "committedDate": "2020-07-24T22:24:27Z", "message": "opentracing upgrade from 0.31 to 0.33"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjMyOTYy", "url": "https://github.com/apple/servicetalk/pull/1103#pullrequestreview-455232962", "createdAt": "2020-07-24T23:30:06Z", "commit": {"oid": "31360a1048e397ffae4e6f088555b49ceb922bc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1OTY0MzQ3", "url": "https://github.com/apple/servicetalk/pull/1103#pullrequestreview-455964347", "createdAt": "2020-07-27T16:55:05Z", "commit": {"oid": "31360a1048e397ffae4e6f088555b49ceb922bc1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3426, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}