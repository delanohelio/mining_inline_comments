{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1OTE4NDE4", "number": 961, "title": "Publisher#range operator", "bodyText": "Motivation:\nThe canonocal way to do an asynchornous for lop with integer indexes in reactive streams is to use a range() operator. We currently don't have a range operator.\nModifications:\n\nAdd Publisher#range(int begin, int end)\nAdd Publisher#range(int begin, int end, int stride)\n\nResult:\nFor loops with integer indexes can be done directly with Publisher#range(..)", "createdAt": "2020-03-10T03:29:17Z", "url": "https://github.com/apple/servicetalk/pull/961", "merged": true, "mergeCommit": {"oid": "fffe9a182ed4bb08b3baf85473e4b965524073bb"}, "closed": true, "closedAt": "2020-03-11T04:01:50Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMJ8zeAH2gAyMzg1OTE4NDE4OjU5YjE5NGRhMzg3NzkwNjg0N2NjMDJmZWQ1ODU3ODU0YmVjMjkyYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMc7TAgH2gAyMzg1OTE4NDE4OmY5MTY1NzljMTcxYzE2ZGEwY2NkNTcwZmFhODE0OGY0MDllNmI4NmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "59b194da3877906847cc02fed5857854bec292c7", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/59b194da3877906847cc02fed5857854bec292c7", "committedDate": "2020-03-10T03:28:44Z", "message": "Publisher#range operator\n\nMotivation:\nThe canonocal way to do an asynchornous for lop with integer indexes in reactive streams is to use a range() operator. We currently don't have a range operator.\n\nModifications:\n- Add Publisher#range(int begin, int end)\n- Add Publisher#range(int begin, int end, int stride)\n\nResult:\nFor loops with integer indexes can be done directly with Publisher#range(..)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzM2NTM3", "url": "https://github.com/apple/servicetalk/pull/961#pullrequestreview-371736537", "createdAt": "2020-03-10T07:55:26Z", "commit": {"oid": "59b194da3877906847cc02fed5857854bec292c7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNzo1NToyNlrOF0EVJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwODowMTozNFrOF0EeSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE0MTIyMQ==", "bodyText": "nit: consider adding details what a valid stride would be...", "url": "https://github.com/apple/servicetalk/pull/961#discussion_r390141221", "createdAt": "2020-03-10T07:55:26Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RangeIntPublisher.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static java.lang.Math.min;\n+import static java.util.Objects.requireNonNull;\n+\n+final class RangeIntPublisher extends AbstractSynchronousPublisher<Integer> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RangeIntPublisher.class);\n+    private final int begin;\n+    private final int end;\n+    private final int stride;\n+\n+    RangeIntPublisher(int begin, int end) {\n+        this(begin, end, 1);\n+    }\n+\n+    RangeIntPublisher(int begin, int end, int stride) {\n+        if (begin > end) {\n+            throw new IllegalArgumentException(\"begin(\" + begin + \") > end(\" + end + \")\");\n+        }\n+        if (stride <= 0) {\n+            throw new IllegalArgumentException(\"stride: \" + stride);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b194da3877906847cc02fed5857854bec292c7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE0MzE1Nw==", "bodyText": "nit: consider passing begin into the constructor so you can make the class static.", "url": "https://github.com/apple/servicetalk/pull/961#discussion_r390143157", "createdAt": "2020-03-10T08:00:33Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RangeIntPublisher.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static java.lang.Math.min;\n+import static java.util.Objects.requireNonNull;\n+\n+final class RangeIntPublisher extends AbstractSynchronousPublisher<Integer> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RangeIntPublisher.class);\n+    private final int begin;\n+    private final int end;\n+    private final int stride;\n+\n+    RangeIntPublisher(int begin, int end) {\n+        this(begin, end, 1);\n+    }\n+\n+    RangeIntPublisher(int begin, int end, int stride) {\n+        if (begin > end) {\n+            throw new IllegalArgumentException(\"begin(\" + begin + \") > end(\" + end + \")\");\n+        }\n+        if (stride <= 0) {\n+            throw new IllegalArgumentException(\"stride: \" + stride);\n+        }\n+        this.begin = begin;\n+        this.end = end;\n+        this.stride = stride;\n+    }\n+\n+    @Override\n+    void doSubscribe(final Subscriber<? super Integer> subscriber) {\n+        subscriber.onSubscribe(new RangeIntSubscription(subscriber));\n+    }\n+\n+    private final class RangeIntSubscription implements PublisherSource.Subscription {\n+        private final PublisherSource.Subscriber<? super Integer> subscriber;\n+        private long pendingN;\n+        private int index = RangeIntPublisher.this.begin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b194da3877906847cc02fed5857854bec292c7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE0MzU2Mw==", "bodyText": "nit:  == should be enough ?", "url": "https://github.com/apple/servicetalk/pull/961#discussion_r390143563", "createdAt": "2020-03-10T08:01:34Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RangeIntPublisher.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static java.lang.Math.min;\n+import static java.util.Objects.requireNonNull;\n+\n+final class RangeIntPublisher extends AbstractSynchronousPublisher<Integer> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RangeIntPublisher.class);\n+    private final int begin;\n+    private final int end;\n+    private final int stride;\n+\n+    RangeIntPublisher(int begin, int end) {\n+        this(begin, end, 1);\n+    }\n+\n+    RangeIntPublisher(int begin, int end, int stride) {\n+        if (begin > end) {\n+            throw new IllegalArgumentException(\"begin(\" + begin + \") > end(\" + end + \")\");\n+        }\n+        if (stride <= 0) {\n+            throw new IllegalArgumentException(\"stride: \" + stride);\n+        }\n+        this.begin = begin;\n+        this.end = end;\n+        this.stride = stride;\n+    }\n+\n+    @Override\n+    void doSubscribe(final Subscriber<? super Integer> subscriber) {\n+        subscriber.onSubscribe(new RangeIntSubscription(subscriber));\n+    }\n+\n+    private final class RangeIntSubscription implements PublisherSource.Subscription {\n+        private final PublisherSource.Subscriber<? super Integer> subscriber;\n+        private long pendingN;\n+        private int index = RangeIntPublisher.this.begin;\n+\n+        private RangeIntSubscription(PublisherSource.Subscriber<? super Integer> subscriber) {\n+            this.subscriber = requireNonNull(subscriber);\n+        }\n+\n+        @Override\n+        public void request(long n) {\n+            if (pendingN < 0) {\n+                return;\n+            }\n+            if (!isRequestNValid(n)) {\n+                sendOnError(newExceptionForInvalidRequestN(n));\n+                return;\n+            }\n+            if (pendingN != 0) {\n+                // this call is re-entrant. just add to pending and deliver onNext when the stack unwinds.\n+                pendingN = addWithOverflowProtection(pendingN, n);\n+                return;\n+            }\n+            pendingN = addWithOverflowProtection(pendingN, n);\n+            for (; pendingN > 0 && index < end; --pendingN, index += min(stride, (long) end - index)) {\n+                try {\n+                    subscriber.onNext(index);\n+                } catch (Throwable cause) {\n+                    sendOnError(cause);\n+                    return;\n+                }\n+            }\n+            if (index >= end) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59b194da3877906847cc02fed5857854bec292c7"}, "originalPosition": 88}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "efdf361f767f9e3bc1ffd2c2c836167671260c44", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/efdf361f767f9e3bc1ffd2c2c836167671260c44", "committedDate": "2020-03-10T16:11:24Z", "message": "norman's review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNDE4OTEx", "url": "https://github.com/apple/servicetalk/pull/961#pullrequestreview-372418911", "createdAt": "2020-03-11T01:11:19Z", "commit": {"oid": "efdf361f767f9e3bc1ffd2c2c836167671260c44"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMToxOVrOF0mMBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMToxMToxOVrOF0mMBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY5NTk0Mw==", "bodyText": "An additional test case may be useful to verify request-n post cancel are ignored.", "url": "https://github.com/apple/servicetalk/pull/961#discussion_r390695943", "createdAt": "2020-03-11T01:11:19Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/test/java/io/servicetalk/concurrent/api/publisher/FromIntRangePublisherTest.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api.publisher;\n+\n+import io.servicetalk.concurrent.api.TestPublisherSubscriber;\n+\n+import org.junit.Test;\n+\n+import static io.servicetalk.concurrent.api.Publisher.range;\n+import static io.servicetalk.concurrent.api.SourceAdapters.toSource;\n+import static io.servicetalk.concurrent.internal.DeliberateException.DELIBERATE_EXCEPTION;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+public class FromIntRangePublisherTest {\n+    final TestPublisherSubscriber<Integer> subscriber = new TestPublisherSubscriber<>();\n+\n+    @Test\n+    public void zeroElements() {\n+        toSource(range(Integer.MAX_VALUE, Integer.MAX_VALUE)).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeItems(), is(empty()));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void zeroElementsStride() {\n+        toSource(range(-1, -1, 2)).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeItems(), is(empty()));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void singleElement() {\n+        toSource(range(-1, 0)).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeItems(), contains(-1));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void singleElementStride() {\n+        toSource(range(0, 1, 2)).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeItems(), contains(0));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void multipleElements() {\n+        toSource(range(0, 5)).subscribe(subscriber);\n+        subscriber.request(5);\n+        assertThat(subscriber.takeItems(), contains(0, 1, 2, 3, 4));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void multipleElementsStride() {\n+        toSource(range(0, 10, 3)).subscribe(subscriber);\n+        subscriber.request(4);\n+        assertThat(subscriber.takeItems(), contains(0, 3, 6, 9));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void overflowStride() {\n+        int begin = Integer.MAX_VALUE - 1;\n+        toSource(range(begin, Integer.MAX_VALUE, 10)).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeItems(), contains(begin));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void negativeToPositive() {\n+        toSource(range(-2, 3)).subscribe(subscriber);\n+        subscriber.request(5);\n+        assertThat(subscriber.takeItems(), contains(-2, -1, 0, 1, 2));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void negativeToPositiveStride() {\n+        toSource(range(-1, Integer.MAX_VALUE, Integer.MAX_VALUE)).subscribe(subscriber);\n+        subscriber.request(2);\n+        assertThat(subscriber.takeItems(), contains(-1, Integer.MAX_VALUE - 1));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void allNegative() {\n+        toSource(range(-10, -5)).subscribe(subscriber);\n+        subscriber.request(5);\n+        assertThat(subscriber.takeItems(), contains(-10, -9, -8, -7, -6));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void allNegativeStride() {\n+        toSource(range(-20, -10, 2)).subscribe(subscriber);\n+        subscriber.request(5);\n+        assertThat(subscriber.takeItems(), contains(-20, -18, -16, -14, -12));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void thrownExceptionTerminatesOnError() {\n+        thrownExceptionTerminatesOnError(false);\n+    }\n+\n+    @Test\n+    public void thrownExceptionTerminatesOnErrorStride() {\n+        thrownExceptionTerminatesOnError(true);\n+    }\n+\n+    private void thrownExceptionTerminatesOnError(boolean stride) {\n+        toSource((stride ? range(0, 5, 2) : range(0, 5)).whenOnNext(n -> {\n+            throw DELIBERATE_EXCEPTION;\n+        })).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeError(), sameInstance(DELIBERATE_EXCEPTION));\n+    }\n+\n+    @Test\n+    public void reentrantDeliversInOrder() {\n+        toSource(range(0, 5).whenOnNext(n -> subscriber.request(1))).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeItems(), contains(0, 1, 2, 3, 4));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void reentrantDeliversInOrderStride() {\n+        toSource(range(5, 15, 4).whenOnNext(n -> subscriber.request(1))).subscribe(subscriber);\n+        subscriber.request(1);\n+        assertThat(subscriber.takeItems(), contains(5, 9, 13));\n+        assertTrue(subscriber.isCompleted());\n+    }\n+\n+    @Test\n+    public void reentrantCancelStopsDelivery() {\n+        reentrantCancelStopsDelivery(true);\n+    }\n+\n+    @Test\n+    public void reentrantCancelStopsDeliveryStride() {\n+        reentrantCancelStopsDelivery(false);\n+    }\n+\n+    private void reentrantCancelStopsDelivery(boolean stride) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdf361f767f9e3bc1ffd2c2c836167671260c44"}, "originalPosition": 169}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f916579c171c16da0ccd570faa8148f409e6b86a", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/f916579c171c16da0ccd570faa8148f409e6b86a", "committedDate": "2020-03-11T01:35:17Z", "message": "add test case for request-n after cancel"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3309, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}