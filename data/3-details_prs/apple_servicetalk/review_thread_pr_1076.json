{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MzQ0MjA3", "number": 1076, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo0Mjo1NVrOEBl2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo0Njo0NlrOEBx3Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTA0MTY0OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/EWMAWriteDemandEstimator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo0Mjo1NVrOGdh3Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDo0Mjo1NVrOGdh3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxNjY5MQ==", "bodyText": "we can make this more configurable in the future (e.g. 5 correlates to decay factor) ... but these classes aren't very exposed at the moment and I think we can defer until we get some more demand to expose.", "url": "https://github.com/apple/servicetalk/pull/1076#discussion_r433616691", "createdAt": "2020-06-02T04:42:55Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/EWMAWriteDemandEstimator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import static io.servicetalk.transport.netty.internal.OverlappingCapacityAwareEstimator.SizeEstimator.defaultEstimator;\n+import static java.lang.Math.max;\n+\n+final class EWMAWriteDemandEstimator extends OverlappingCapacityAwareEstimator {\n+    private static final double WEIGHT_NEW = 1 / 5d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5032816d30a2f88a2c32ee3de6b9d566096d081d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTUwNDE3OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/OverlappingCapacityAwareEstimator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzo1NzozNVrOGdmTsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDozOToxNVrOGd05Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTUyMQ==", "bodyText": "What is this import needed for ?", "url": "https://github.com/apple/servicetalk/pull/1076#discussion_r433689521", "createdAt": "2020-06-02T07:57:35Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/OverlappingCapacityAwareEstimator.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n import io.netty.channel.FileRegion;\n \n+import java.nio.ByteBuffer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5032816d30a2f88a2c32ee3de6b9d566096d081d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyODQ2Nw==", "bodyText": "good question, it isn't :) removed.", "url": "https://github.com/apple/servicetalk/pull/1076#discussion_r433928467", "createdAt": "2020-06-02T14:39:15Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/OverlappingCapacityAwareEstimator.java", "diffHunk": "@@ -17,6 +17,8 @@\n \n import io.netty.channel.FileRegion;\n \n+import java.nio.ByteBuffer;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY4OTUyMQ=="}, "originalCommit": {"oid": "5032816d30a2f88a2c32ee3de6b9d566096d081d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzAwOTM5OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/EWMAWriteDemandEstimator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo0Njo0NlrOGd1O4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDo1Mjo1MlrOGd1f0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzNDA0OA==", "bodyText": "btw why is this constructor needed at all ? This is private so it will never be used outside of this class which means we could just only keep the EWMAWriteDemandEstimator(long sizeAccumulator) constructor.", "url": "https://github.com/apple/servicetalk/pull/1076#discussion_r433934048", "createdAt": "2020-06-02T14:46:46Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/EWMAWriteDemandEstimator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import static io.servicetalk.transport.netty.internal.OverlappingCapacityAwareEstimator.SizeEstimator.defaultEstimator;\n+import static java.lang.Math.max;\n+\n+final class EWMAWriteDemandEstimator extends OverlappingCapacityAwareEstimator {\n+    private static final double WEIGHT_NEW = 1 / 5d;\n+    private static final double WEIGHT_HISTORICAL = 1 - WEIGHT_NEW;\n+    private long sizeAccumulator;\n+\n+    EWMAWriteDemandEstimator() {\n+        this(1024);\n+    }\n+\n+    EWMAWriteDemandEstimator(long sizeAccumulator) {\n+        this(sizeAccumulator, defaultEstimator());\n+    }\n+\n+    private EWMAWriteDemandEstimator(long sizeAccumulator, SizeEstimator sizeEstimator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82a949b5c610d5973d7309b148f60ee07e3450e8"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzODM4Ng==", "bodyText": "let me kill this for now", "url": "https://github.com/apple/servicetalk/pull/1076#discussion_r433938386", "createdAt": "2020-06-02T14:52:52Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/EWMAWriteDemandEstimator.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import static io.servicetalk.transport.netty.internal.OverlappingCapacityAwareEstimator.SizeEstimator.defaultEstimator;\n+import static java.lang.Math.max;\n+\n+final class EWMAWriteDemandEstimator extends OverlappingCapacityAwareEstimator {\n+    private static final double WEIGHT_NEW = 1 / 5d;\n+    private static final double WEIGHT_HISTORICAL = 1 - WEIGHT_NEW;\n+    private long sizeAccumulator;\n+\n+    EWMAWriteDemandEstimator() {\n+        this(1024);\n+    }\n+\n+    EWMAWriteDemandEstimator(long sizeAccumulator) {\n+        this(sizeAccumulator, defaultEstimator());\n+    }\n+\n+    private EWMAWriteDemandEstimator(long sizeAccumulator, SizeEstimator sizeEstimator) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkzNDA0OA=="}, "originalCommit": {"oid": "82a949b5c610d5973d7309b148f60ee07e3450e8"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2783, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}