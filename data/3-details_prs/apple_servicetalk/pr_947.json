{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzI3ODc0", "number": 947, "title": "gRPC `BlockingResponseStreamingRoute` expects only one request item", "bodyText": "Motivation:\ngRPC BlockingResponseStreamingRoute is implemented as a conversion\nbased on BlockingStreamingRoute, but must ensure that there is\nonly one proto item in the request and fail if there are more.\nOtherwise, it does not drain request BlockingIterable and may lead\nto the leaked resources.\nModifications:\n\nThrow if BlockingResponseStreamingRoute sees the second item\nin the request BlockingIterable;\nThrow if BlockingResponseStreamingRoute sees no items in the\nrequest BlockingIterable;\nMake exception messages of ResponseStreamingRoute consistent\nwith BlockingResponseStreamingRoute;\nAdd tests to verify that these cases work as expected and\nblocking/async API behavior is consistent;\n\nResult:\nBlockingResponseStreamingRoute fails if a client sends more than\none proto items in the request.", "createdAt": "2020-02-25T02:16:47Z", "url": "https://github.com/apple/servicetalk/pull/947", "merged": true, "mergeCommit": {"oid": "a8ea7e696c56e8905dc2bf172d991a8f64dfd7cf"}, "closed": true, "closedAt": "2020-02-27T21:55:39Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHoge1AH2gAyMzc5MzI3ODc0OmIwZjI0MDAxM2FiYWRkODg5NjAyYmQyOGVmM2EwN2RjYWI5MjYzOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIiXzhgH2gAyMzc5MzI3ODc0OmJlNzRiODFhZGVkYzdiODk1YzM3ZWM3Zjk1YmM2NjY3OTI0ZmEzMWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b0f240013abadd889602bd28ef3a07dcab926397", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/b0f240013abadd889602bd28ef3a07dcab926397", "committedDate": "2020-02-25T02:15:14Z", "message": "gRPC `BlockingResponseStreamingRoute` expects only one request item\n\nMotivation:\n\ngRPC `BlockingResponseStreamingRoute` is implemented as a conversion\nbased on `BlockingStreamingRoute`, but must ensure that there is\nonly one proto item in the request and fail if there are more.\nOtherwise, it does not drain request `BlockingIterable` and may lead\nto the leaked resources.\n\nModifications:\n\n- Throw if `BlockingResponseStreamingRoute` sees the second item\nin the request `BlockingIterable`;\n- Require non-null response item in `BlockingRequestStreamingCall`;\n- Add tests to verify these cases work as expected;\n\nResult:\n\n`BlockingResponseStreamingRoute` fails if a client sends more than\none proto items in the request."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49722537cddd1d3b7774da61f7ce71eb867c5609", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/49722537cddd1d3b7774da61f7ce71eb867c5609", "committedDate": "2020-02-25T18:47:24Z", "message": "Consume the next item from iterator to make sure it's not a TerminalNotification with an error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/e0ad876faf025156b730fd2c77b1c5583b6c5808", "committedDate": "2020-02-25T18:47:44Z", "message": "fix spotbugs error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDMzNzA0", "url": "https://github.com/apple/servicetalk/pull/947#pullrequestreview-364433704", "createdAt": "2020-02-25T20:43:12Z", "commit": {"oid": "b0f240013abadd889602bd28ef3a07dcab926397"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo0MzoxMlrOFuUhCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1MDowMVrOFuUtRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNDk1Mg==", "bodyText": "nit: perhaps better to do this switch on the client as the client is intending to make \"incorrect requests\"", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384114952", "createdAt": "2020-02-25T20:43:12Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/BlockingApiCorrectnessTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.netty;\n+\n+import io.servicetalk.concurrent.BlockingIterable;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.grpc.api.GrpcPayloadWriter;\n+import io.servicetalk.grpc.api.GrpcServiceContext;\n+import io.servicetalk.grpc.api.GrpcStatusException;\n+import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n+import io.servicetalk.grpc.netty.TesterProto.TestResponse;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestBiDiStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestRequestStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTestResponseStreamRpc;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterClient;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterService;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ClientFactory;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ServiceFactory;\n+import io.servicetalk.http.api.HttpServiceContext;\n+import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpResponse;\n+import io.servicetalk.http.api.StreamingHttpResponseFactory;\n+import io.servicetalk.http.api.StreamingHttpServiceFilter;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import static io.servicetalk.grpc.api.GrpcStatusCode.INVALID_ARGUMENT;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+import static org.junit.Assert.assertThrows;\n+\n+public class BlockingApiCorrectnessTest {\n+\n+    @Rule\n+    public Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final ServerContext serverContext;\n+\n+    public BlockingApiCorrectnessTest() throws Exception {\n+        serverContext = GrpcServers.forAddress(localAddress(0))\n+                // HTTP filter to modify paths to workaround API restrictions:\n+                .appendHttpServiceFilter(service -> new StreamingHttpServiceFilter(service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0f240013abadd889602bd28ef3a07dcab926397"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNTc4MA==", "bodyText": "Not changed in this PR but as you are changing code; this would be a better message.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                        \"Only a single request item is expected, but saw the second one\")\n          \n          \n            \n                                                        \"More than one request message received.\")", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384115780", "createdAt": "2020-02-25T20:45:03Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");\n+                                if (requestIterator.hasNext()) {\n+                                    // Consume the next item to make sure it's not a TerminalNotification with an error\n+                                    requestIterator.next();\n+                                    throw new GrpcStatus(INVALID_ARGUMENT, null,\n+                                            \"Only a single request item is expected, but saw the second one\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjM4MA==", "bodyText": "Not changed in this PR but as you are changing code; this would be a better message.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");\n          \n          \n            \n                                throw new IllegalStateException(\"More than one response message received.\");", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384116380", "createdAt": "2020-02-25T20:46:23Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "diffHunk": "@@ -154,13 +154,14 @@\n         final BlockingStreamingClientCall<Req, Resp> streamingClientCall =\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n-            final BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator();\n-            final Resp firstItem = iterator.next();\n-            if (iterator.hasNext()) {\n-                throw new IllegalArgumentException(\"Only a single item expected, but saw the second value: \" +\n-                        iterator.next());\n+            try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n+                final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");\n+                if (iterator.hasNext()) {\n+                    iterator.next(); // Consume the next item to make sure it's not a TerminalNotification with an error\n+                    throw new IllegalStateException(\"Only a single response item is expected, but saw the second one\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjg2OQ==", "bodyText": "It isn't changed in this PR but I think null should pass-through.", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384116869", "createdAt": "2020-02-25T20:47:25Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -572,7 +574,18 @@ public void closeGracefully() throws Exception {\n                         @Override\n                         public void handle(final GrpcServiceContext ctx, final BlockingIterable<Req> request,\n                                            final GrpcPayloadWriter<Resp> responseWriter) throws Exception {\n-                            route.handle(ctx, requireNonNull(request.iterator().next()), responseWriter);\n+                            final Req firstItem;\n+                            try (BlockingIterator<Req> requestIterator = request.iterator()) {\n+                                firstItem = requireNonNull(requestIterator.next(), \"Request item is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExODA4Nw==", "bodyText": "I think we should pass through null values.", "url": "https://github.com/apple/servicetalk/pull/947#discussion_r384118087", "createdAt": "2020-02-25T20:50:01Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcClientCallFactory.java", "diffHunk": "@@ -154,13 +154,14 @@\n         final BlockingStreamingClientCall<Req, Resp> streamingClientCall =\n                 newBlockingStreamingCall(serializationProvider, requestClass, responseClass);\n         return (metadata, request) -> {\n-            final BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator();\n-            final Resp firstItem = iterator.next();\n-            if (iterator.hasNext()) {\n-                throw new IllegalArgumentException(\"Only a single item expected, but saw the second value: \" +\n-                        iterator.next());\n+            try (BlockingIterator<Resp> iterator = streamingClientCall.request(metadata, request).iterator()) {\n+                final Resp firstItem = requireNonNull(iterator.next(), \"Response item is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ad876faf025156b730fd2c77b1c5583b6c5808"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/9fac5e5974e5babbf1b1712e99ecf4882d80ae13", "committedDate": "2020-02-25T22:21:17Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a2fa6355dd307dbc2267fb5bcb29f9b03e72129", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/6a2fa6355dd307dbc2267fb5bcb29f9b03e72129", "committedDate": "2020-02-25T23:58:17Z", "message": "Make blocking and streaming API consistent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8a7b073a9dc34104bd706b6273e51042048fc3", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/0a8a7b073a9dc34104bd706b6273e51042048fc3", "committedDate": "2020-02-26T00:28:26Z", "message": "Test async and blocking client consistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04a15e8932773a20c091d8e097bb397cab4c55af", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/04a15e8932773a20c091d8e097bb397cab4c55af", "committedDate": "2020-02-26T18:21:50Z", "message": "Revert requireNonNull"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjU4Njk0", "url": "https://github.com/apple/servicetalk/pull/947#pullrequestreview-365258694", "createdAt": "2020-02-26T21:33:31Z", "commit": {"oid": "04a15e8932773a20c091d8e097bb397cab4c55af"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be74b81adedc7b895c37ec7f95bc6667924fa31c", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/be74b81adedc7b895c37ec7f95bc6667924fa31c", "committedDate": "2020-02-27T21:40:15Z", "message": "Merge remote-tracking branch 'upstream/master' into BlockingResponseStreamingRoute"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3296, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}