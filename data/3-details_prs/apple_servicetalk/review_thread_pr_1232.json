{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2ODk5NzI3", "number": 1232, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozMzowMVrOE-75UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1MjoyMlrOE-8Hrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDI4NDk3OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozMzowMVrOH8W2Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozMzowMVrOH8W2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1MDkyMw==", "bodyText": "We do not need to explicitly add @Nonnull annotation, it's always added via @ElementsAreNonnullByDefault.", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533050923", "createdAt": "2020-12-01T03:33:01Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -758,10 +896,38 @@ public void serverStreamingCall(final GrpcServiceContext ctx, final CompatReques\n                             responseWriter.write(computeResponse(i));\n                         }\n                     }\n-                }));\n+                }, codings));\n         return TestServerContext.fromServiceTalkServerContext(serverContext);\n     }\n \n+    @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 819}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDI4NTE1OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozMzowN1rOH8W2RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozMzowN1rOH8W2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1MDk0OQ==", "bodyText": "Same", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533050949", "createdAt": "2020-12-01T03:33:07Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -758,10 +896,38 @@ public void serverStreamingCall(final GrpcServiceContext ctx, final CompatReques\n                             responseWriter.write(computeResponse(i));\n                         }\n                     }\n-                }));\n+                }, codings));\n         return TestServerContext.fromServiceTalkServerContext(serverContext);\n     }\n \n+    @Nonnull\n+    private static ContentCodec serviceTalkCodingFor(@Nullable final String compression) {\n+        if (compression == null || compression.contentEquals(identity().name())) {\n+            return identity();\n+        }\n+\n+        if (compression.contentEquals(gzipDefault().name())) {\n+            return gzipDefault();\n+        }\n+\n+        throw new UnsupportedOperationException(\"Unsupported compression \" + compression);\n+    }\n+\n+    @Nonnull", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 832}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDI4Njg2OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozNDoxM1rOH8W3SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozNDoxM1rOH8W3SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1MTIwOA==", "bodyText": "The value of compression is always gzip. Consider removing it.", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533051208", "createdAt": "2020-12-01T03:34:13Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -546,88 +643,122 @@ private static void testStreamResetOnUnexpectedErrorOnServiceTalkServer(final Co\n         }\n     }\n \n+    private static void testGrpcCompressionError(final CompatClient client, final TestServerContext server,\n+                                                 final boolean streaming,\n+                                                 @Nullable final String compression) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 617}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDI5MzEzOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozNzowNlrOH8W6xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozNzowNlrOH8W6xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1MjEwMA==", "bodyText": "Why did you add o? It's unused.", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533052100", "createdAt": "2020-12-01T03:37:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -546,88 +643,122 @@ private static void testStreamResetOnUnexpectedErrorOnServiceTalkServer(final Co\n         }\n     }\n \n+    private static void testGrpcCompressionError(final CompatClient client, final TestServerContext server,\n+                                                 final boolean streaming,\n+                                                 @Nullable final String compression) throws Exception {\n+        if (streaming) {\n+            testGrpcErrorStreaming(client, server, false, compression);\n+        } else {\n+            testGrpcErrorScalar(client, server, false, compression);\n+        }\n+    }\n+\n+\n     private static void testGrpcError(final CompatClient client, final TestServerContext server,\n                                       final boolean withStatus, final boolean streaming)\n             throws Exception {\n         if (streaming) {\n-            testGrpcErrorStreaming(client, server, withStatus);\n+            testGrpcErrorStreaming(client, server, withStatus, null);\n         } else {\n-            testGrpcErrorScalar(client, server, withStatus);\n+            testGrpcErrorScalar(client, server, withStatus, null);\n         }\n     }\n \n     private static void testGrpcErrorStreaming(final CompatClient client, final TestServerContext server,\n-                                               final boolean withStatus)\n+                                               final boolean withStatus, @Nullable final String compression)\n             throws Exception {\n         try {\n-            final Publisher<CompatResponse> streamingResponse = client.bidirectionalStreamingCall(Publisher.from(\n-                    CompatRequest.newBuilder().setId(3).build(),\n-                    CompatRequest.newBuilder().setId(4).build(),\n-                    CompatRequest.newBuilder().setId(5).build()\n-            ));\n-            validateGrpcErrorInResponse(streamingResponse.toFuture(), withStatus);\n+            BidirectionalStreamingCallMetadata metadata = BidirectionalStreamingCallMetadata.INSTANCE;\n+            if (compression != null) {\n+                metadata = new BidirectionalStreamingCallMetadata(serviceTalkCodingFor(compression));\n+            }\n+\n+            final Publisher<CompatResponse> streamingResponse = client.bidirectionalStreamingCall(metadata,\n+                    Publisher.from(CompatRequest.newBuilder().setId(3).build(),\n+                            CompatRequest.newBuilder().setId(4).build(),\n+                            CompatRequest.newBuilder().setId(5).build()\n+                    ));\n+\n+            validateGrpcErrorInResponse(streamingResponse.toFuture(), withStatus, compression != null);\n         } finally {\n             closeAll(client, server);\n         }\n     }\n \n     private static void testGrpcErrorScalar(final CompatClient client, final TestServerContext server,\n-                                            final boolean withStatus)\n+                                            final boolean withStatus, @Nullable final String compression)\n             throws Exception {\n         try {\n+            ScalarCallMetadata metadata = ScalarCallMetadata.INSTANCE;\n+            if (compression != null) {\n+                metadata = new ScalarCallMetadata(serviceTalkCodingFor(compression));\n+            }\n+\n             final Single<CompatResponse> scalarResponse =\n-                    client.scalarCall(CompatRequest.newBuilder().setId(1).build());\n+                    client.scalarCall(metadata, CompatRequest.newBuilder().setId(1).build());\n \n-            validateGrpcErrorInResponse(scalarResponse.toFuture(), withStatus);\n+            validateGrpcErrorInResponse(scalarResponse.toFuture(), withStatus, compression != null);\n         } finally {\n             closeAll(client, server);\n         }\n     }\n \n-    private static void validateGrpcErrorInResponse(final Future<?> future, final boolean withStatus)\n+    private static void validateGrpcErrorInResponse(final Future<?> future, final boolean withStatus,\n+                                                    final boolean withCompressionError)\n             throws InvalidProtocolBufferException {\n         try {\n-            future.get();\n+            final Object o = future.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 693}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDI5NDU0OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozODowMVrOH8W7lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzozODowMVrOH8W7lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1MjMwOQ==", "bodyText": "While you are here, please remove throws Exception, it's never thrown from this test.", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533052309", "createdAt": "2020-12-01T03:38:01Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -480,42 +565,54 @@ private static void testBlockingRequestResponse(final BlockingCompatClient clien\n     }\n \n     private static void testRequestResponse(final CompatClient client, final TestServerContext server,\n-                                            final boolean streaming) throws Exception {\n+                                            final boolean streaming,\n+                                            @Nullable final String compression) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 552}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDMwNjI0OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo0NDoxNlrOH8XB_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo0NDoxNlrOH8XB_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1Mzk0OA==", "bodyText": "The serviceTalkCodingFor method returns identity() when compresion == null. Can we return null in this case and use ScalarCallMetadata.INSTANCE later? It will verify a case when compression is not specified, similar to client.scalarCall(request) (without meta-data param).\nSame for the streaming variant, we can use ClientStreamingCallMetadata.INSTANCE.", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533053948", "createdAt": "2020-12-01T03:44:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -165,295 +174,369 @@ public SocketAddress listenAddress() {\n     @DataPoints(\"streaming\")\n     public static boolean[] streaming = {false, true};\n \n+    @DataPoints(\"compression\")\n+    public static String[] compression = {\"gzip\", \"identity\", null};\n+\n     @Rule\n     public final Timeout timeout = new ServiceTalkTestTimeout();\n \n     @Theory\n     public void grpcJavaToGrpcJava(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                   @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n-        testRequestResponse(client, server, streaming);\n+                                   @FromDataPoints(\"streaming\") final boolean streaming,\n+                                   @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n     public void serviceTalkToGrpcJava(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                      @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n-        testRequestResponse(client, server, streaming);\n+                                      @FromDataPoints(\"streaming\") final boolean streaming,\n+                                      @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalk(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                      @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n-        testRequestResponse(client, server, streaming);\n+                                      @FromDataPoints(\"streaming\") final boolean streaming,\n+                                      @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n+        testRequestResponse(client, server, streaming, compression);\n+    }\n+\n+    @Theory\n+    public void serviceTalkToServiceTalk(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                         @FromDataPoints(\"streaming\") final boolean streaming,\n+                                         @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n-    @Ignore(\"gRPC compression not supported by ServiceTalk yet\")\n     @Theory\n-    public void grpcJavaToServiceTalkCompressedGzip(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                    @FromDataPoints(\"streaming\") final boolean streaming)\n+    public void serviceTalkBlockingToServiceTalkBlocking(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                         @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                         @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl);\n-        // Only gzip is supported by GRPC out of the box atm.\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), \"gzip\", ssl);\n-        testRequestResponse(client, server, streaming);\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl, compression);\n+        final BlockingCompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression)\n+                .asBlockingClient();\n+        testBlockingRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n-    public void serviceTalkToServiceTalk(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                         @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n-        testRequestResponse(client, server, streaming);\n+    public void grpcJavaToGrpcJavaCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                   @FromDataPoints(\"streaming\") final boolean streaming)\n+            throws Exception {\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), clientCompression, ssl);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n     }\n \n     @Theory\n-    public void serviceTalkBlockingToServiceTalkBlocking(@FromDataPoints(\"ssl\") final boolean ssl,\n+    public void grpcJavaToServiceTalkCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                      @FromDataPoints(\"streaming\") final boolean streaming)\n+            throws Exception {\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), clientCompression, ssl);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n+    }\n+\n+    @Theory\n+    public void serviceTalkToGrpcJavaCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                      @FromDataPoints(\"streaming\") final boolean streaming)\n+            throws Exception {\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, clientCompression);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n+    }\n+\n+    @Theory\n+    public void serviceTalkToServiceTalkCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n                                                          @FromDataPoints(\"streaming\") final boolean streaming)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl);\n-        final BlockingCompatClient client = serviceTalkClient(server.listenAddress(), ssl).asBlockingClient();\n-        testBlockingRequestResponse(client, server, streaming);\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, clientCompression);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n     }\n \n     @Theory\n     public void grpcJavaToGrpcJavaError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                        @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+                                        @FromDataPoints(\"streaming\") final boolean streaming,\n+                                        @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToGrpcJavaErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                  @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                  @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                  @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToGrpcJavaError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                           @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+                                           @FromDataPoints(\"streaming\") final boolean streaming,\n+                                           @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToGrpcJavaErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                     @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                     @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                     @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                           @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+                                           @FromDataPoints(\"streaming\") final boolean streaming,\n+                                           @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorInScalarResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorInScalarResponse(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                           @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, false);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorInStreamingResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorInStreamingResponse(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                              @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testStreamResetOnUnexpectedErrorOnServiceTalkServer(client, server);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorInResponseNoOffload(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                              @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                              @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                              @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl, noOffloadsStrategy());\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl,\n+                noOffloadsStrategy(), compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorViaServiceFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                           @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                           @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                           @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorViaServerFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                          @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                          @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                          @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                     @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                     @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                     @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorWithStatusInScalarResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorWithStatusInScalarResponse(\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, false);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorWithStatusInStreamingResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorWithStatusInStreamingResponse(\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testStreamResetOnUnexpectedErrorOnServiceTalkServer(client, server);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatusInResponseNoOffloads(\n             @FromDataPoints(\"ssl\") final boolean ssl,\n-            @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl, noOffloadsStrategy());\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+            @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl,\n+                noOffloadsStrategy(), compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatusViaServiceFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatusViaServerFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkBlocking(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                              @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n-        testRequestResponse(client, server, streaming);\n+    public void grpcJavaToServiceTalkBlocking(\n+            @FromDataPoints(\"ssl\") final boolean ssl,\n+            @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkBlockingError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                   @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                   @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                   @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkBlockingErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                             @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                             @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                             @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.STATUS, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                              @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+                                              @FromDataPoints(\"streaming\") final boolean streaming,\n+                                              @FromDataPoints(\"compression\") final String compression)\n+            throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorViaServiceFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                              @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                              @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                              @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorViaServerFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                             @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                             @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                             @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                        @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                        @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                        @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorWithStatusViaServiceFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorWithStatusViaServerFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     private static void testBlockingRequestResponse(final BlockingCompatClient client, final TestServerContext server,\n-                                                    final boolean streaming) throws Exception {\n+                                                    final boolean streaming,\n+                                                    @Nullable final String compresion) throws Exception {\n         try {\n+            final ContentCodec codec = serviceTalkCodingFor(compresion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 500}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDMxMTAyOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo0Njo1MFrOH8XEpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo0Njo1MFrOH8XEpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NDYzMQ==", "bodyText": "Consider renaming to serverMetadata", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533054631", "createdAt": "2020-12-01T03:46:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -165,295 +174,369 @@ public SocketAddress listenAddress() {\n     @DataPoints(\"streaming\")\n     public static boolean[] streaming = {false, true};\n \n+    @DataPoints(\"compression\")\n+    public static String[] compression = {\"gzip\", \"identity\", null};\n+\n     @Rule\n     public final Timeout timeout = new ServiceTalkTestTimeout();\n \n     @Theory\n     public void grpcJavaToGrpcJava(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                   @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n-        testRequestResponse(client, server, streaming);\n+                                   @FromDataPoints(\"streaming\") final boolean streaming,\n+                                   @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n     public void serviceTalkToGrpcJava(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                      @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n-        testRequestResponse(client, server, streaming);\n+                                      @FromDataPoints(\"streaming\") final boolean streaming,\n+                                      @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalk(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                      @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n-        testRequestResponse(client, server, streaming);\n+                                      @FromDataPoints(\"streaming\") final boolean streaming,\n+                                      @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n+        testRequestResponse(client, server, streaming, compression);\n+    }\n+\n+    @Theory\n+    public void serviceTalkToServiceTalk(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                         @FromDataPoints(\"streaming\") final boolean streaming,\n+                                         @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n-    @Ignore(\"gRPC compression not supported by ServiceTalk yet\")\n     @Theory\n-    public void grpcJavaToServiceTalkCompressedGzip(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                    @FromDataPoints(\"streaming\") final boolean streaming)\n+    public void serviceTalkBlockingToServiceTalkBlocking(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                         @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                         @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl);\n-        // Only gzip is supported by GRPC out of the box atm.\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), \"gzip\", ssl);\n-        testRequestResponse(client, server, streaming);\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl, compression);\n+        final BlockingCompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression)\n+                .asBlockingClient();\n+        testBlockingRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n-    public void serviceTalkToServiceTalk(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                         @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n-        testRequestResponse(client, server, streaming);\n+    public void grpcJavaToGrpcJavaCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                   @FromDataPoints(\"streaming\") final boolean streaming)\n+            throws Exception {\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), clientCompression, ssl);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n     }\n \n     @Theory\n-    public void serviceTalkBlockingToServiceTalkBlocking(@FromDataPoints(\"ssl\") final boolean ssl,\n+    public void grpcJavaToServiceTalkCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                      @FromDataPoints(\"streaming\") final boolean streaming)\n+            throws Exception {\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), clientCompression, ssl);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n+    }\n+\n+    @Theory\n+    public void serviceTalkToGrpcJavaCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                      @FromDataPoints(\"streaming\") final boolean streaming)\n+            throws Exception {\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = grpcJavaServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, clientCompression);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n+    }\n+\n+    @Theory\n+    public void serviceTalkToServiceTalkCompressionError(@FromDataPoints(\"ssl\") final boolean ssl,\n                                                          @FromDataPoints(\"streaming\") final boolean streaming)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl);\n-        final BlockingCompatClient client = serviceTalkClient(server.listenAddress(), ssl).asBlockingClient();\n-        testBlockingRequestResponse(client, server, streaming);\n+        final String clientCompression = \"gzip\";\n+        final TestServerContext server = serviceTalkServer(ErrorMode.NONE, ssl, null);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, clientCompression);\n+        testGrpcCompressionError(client, server, streaming, clientCompression);\n     }\n \n     @Theory\n     public void grpcJavaToGrpcJavaError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                        @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+                                        @FromDataPoints(\"streaming\") final boolean streaming,\n+                                        @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToGrpcJavaErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                  @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                  @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                  @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToGrpcJavaError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                           @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+                                           @FromDataPoints(\"streaming\") final boolean streaming,\n+                                           @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = grpcJavaServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToGrpcJavaErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                     @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                     @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                     @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = grpcJavaServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                           @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+                                           @FromDataPoints(\"streaming\") final boolean streaming,\n+                                           @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorInScalarResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorInScalarResponse(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                           @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, false);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorInStreamingResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorInStreamingResponse(@FromDataPoints(\"ssl\") final boolean ssl,\n+                                                              @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testStreamResetOnUnexpectedErrorOnServiceTalkServer(client, server);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorInResponseNoOffload(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                              @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                              @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                              @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl, noOffloadsStrategy());\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_RESPONSE, ssl,\n+                noOffloadsStrategy(), compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorViaServiceFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                           @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                           @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                           @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorViaServerFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                          @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                          @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                          @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                     @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                     @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                     @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorWithStatusInScalarResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorWithStatusInScalarResponse(\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, false);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkErrorWithStatusInStreamingResponse(@FromDataPoints(\"ssl\") final boolean ssl)\n+    public void grpcJavaToServiceTalkErrorWithStatusInStreamingResponse(\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testStreamResetOnUnexpectedErrorOnServiceTalkServer(client, server);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatusInResponseNoOffloads(\n             @FromDataPoints(\"ssl\") final boolean ssl,\n-            @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl, noOffloadsStrategy());\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+            @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_RESPONSE, ssl,\n+                noOffloadsStrategy(), compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatusViaServiceFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkErrorWithStatusViaServerFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n-    public void grpcJavaToServiceTalkBlocking(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                              @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n-        testRequestResponse(client, server, streaming);\n+    public void grpcJavaToServiceTalkBlocking(\n+            @FromDataPoints(\"ssl\") final boolean ssl,\n+            @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression) throws Exception {\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.NONE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n+        testRequestResponse(client, server, streaming, compression);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkBlockingError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                   @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                   @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                   @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void grpcJavaToServiceTalkBlockingErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                             @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                             @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                             @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.STATUS, ssl);\n-        final CompatClient client = grpcJavaClient(server.listenAddress(), null, ssl);\n+        final TestServerContext server = serviceTalkServerBlocking(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = grpcJavaClient(server.listenAddress(), compression, ssl);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkError(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                              @FromDataPoints(\"streaming\") final boolean streaming) throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+                                              @FromDataPoints(\"streaming\") final boolean streaming,\n+                                              @FromDataPoints(\"compression\") final String compression)\n+            throws Exception {\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorViaServiceFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                              @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                              @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                              @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorViaServerFilter(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                             @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                             @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                             @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.SIMPLE_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, false, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorWithStatus(@FromDataPoints(\"ssl\") final boolean ssl,\n-                                                        @FromDataPoints(\"streaming\") final boolean streaming)\n+                                                        @FromDataPoints(\"streaming\") final boolean streaming,\n+                                                        @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorWithStatusViaServiceFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVICE_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     @Theory\n     public void serviceTalkToServiceTalkErrorWithStatusViaServerFilter(\n-            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming)\n+            @FromDataPoints(\"ssl\") final boolean ssl, @FromDataPoints(\"streaming\") final boolean streaming,\n+            @FromDataPoints(\"compression\") final String compression)\n             throws Exception {\n-        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl);\n-        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl);\n+        final TestServerContext server = serviceTalkServer(ErrorMode.STATUS_IN_SERVER_FILTER, ssl, compression);\n+        final CompatClient client = serviceTalkClient(server.listenAddress(), ssl, compression);\n         testGrpcError(client, server, true, streaming);\n     }\n \n     private static void testBlockingRequestResponse(final BlockingCompatClient client, final TestServerContext server,\n-                                                    final boolean streaming) throws Exception {\n+                                                    final boolean streaming,\n+                                                    @Nullable final String compresion) throws Exception {\n         try {\n+            final ContentCodec codec = serviceTalkCodingFor(compresion);\n+\n             if (!streaming) {\n-                final CompatResponse response1 = client.scalarCall(CompatRequest.newBuilder().setId(1).build());\n+                final ScalarCallMetadata metadata = new ScalarCallMetadata(codec);\n+                final CompatResponse response1 = client.scalarCall(metadata,\n+                        CompatRequest.newBuilder().setId(1).build());\n                 assertEquals(1000001, response1.getSize());\n             } else {\n                 // clientStreamingCall returns the \"sum\"\n-                final CompatResponse response2 = client.clientStreamingCall(asList(\n+                final ClientStreamingCallMetadata metadata = new ClientStreamingCallMetadata(codec);\n+                final CompatResponse response2 = client.clientStreamingCall(metadata, asList(\n                         CompatRequest.newBuilder().setId(1).build(),\n                         CompatRequest.newBuilder().setId(2).build(),\n                         CompatRequest.newBuilder().setId(3).build()\n                 ));\n                 assertEquals(1000006, response2.getSize());\n \n                 // serverStreamingCall returns a stream from 0 to N-1\n+                final ServerStreamingCallMetadata metadata1 = new ServerStreamingCallMetadata(codec);\n                 final BlockingIterable<CompatResponse> response3 =\n-                        client.serverStreamingCall(CompatRequest.newBuilder().setId(3).build());\n+                        client.serverStreamingCall(metadata1, CompatRequest.newBuilder().setId(3).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 523}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDMxMjI3OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo0NzoyNFrOH8XFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo0NzoyNFrOH8XFVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NDgwNw==", "bodyText": "Same here", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533054807", "createdAt": "2020-12-01T03:47:24Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -480,42 +565,54 @@ private static void testBlockingRequestResponse(final BlockingCompatClient clien\n     }\n \n     private static void testRequestResponse(final CompatClient client, final TestServerContext server,\n-                                            final boolean streaming) throws Exception {\n+                                            final boolean streaming,\n+                                            @Nullable final String compression) throws Exception {\n         try {\n+            final ContentCodec codec = serviceTalkCodingFor(compression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 554}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDMyMTc0OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1MjoyMlrOH8XKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMzo1MjoyMlrOH8XKhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NjEzNA==", "bodyText": "Why is this always null here?", "url": "https://github.com/apple/servicetalk/pull/1232#discussion_r533056134", "createdAt": "2020-12-01T03:52:22Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/ProtocolCompatibilityTest.java", "diffHunk": "@@ -546,88 +643,122 @@ private static void testStreamResetOnUnexpectedErrorOnServiceTalkServer(final Co\n         }\n     }\n \n+    private static void testGrpcCompressionError(final CompatClient client, final TestServerContext server,\n+                                                 final boolean streaming,\n+                                                 @Nullable final String compression) throws Exception {\n+        if (streaming) {\n+            testGrpcErrorStreaming(client, server, false, compression);\n+        } else {\n+            testGrpcErrorScalar(client, server, false, compression);\n+        }\n+    }\n+\n+\n     private static void testGrpcError(final CompatClient client, final TestServerContext server,\n                                       final boolean withStatus, final boolean streaming)\n             throws Exception {\n         if (streaming) {\n-            testGrpcErrorStreaming(client, server, withStatus);\n+            testGrpcErrorStreaming(client, server, withStatus, null);\n         } else {\n-            testGrpcErrorScalar(client, server, withStatus);\n+            testGrpcErrorScalar(client, server, withStatus, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f459d7d15295683ecc83469bc4f453dc3f2cac13"}, "originalPosition": 634}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2458, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}