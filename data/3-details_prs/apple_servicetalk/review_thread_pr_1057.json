{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzczNDE1", "number": 1057, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0Mjo1NlrOD9fjXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozNzoxMlrOD-UoOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODA2Njg2OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0Mjo1NlrOGXBXKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTowMjowNFrOGX3whw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5Mjc0NA==", "bodyText": "Is this useful anywhere else but for the concat case?\nCan the switch between cancellable and subscription be local to DelayedCancellableThenSubscription?", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r426792744", "createdAt": "2020-05-18T17:42:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java", "diffHunk": "@@ -52,4 +52,12 @@ public void cancel() {\n             oldCancellable.cancel();\n         }\n     }\n+\n+    /**\n+     * Dereference the internal {@link Cancellable} and prevent future calls to\n+     * {@link #delayedCancellable(Cancellable)}.\n+     */\n+    protected final void disableCancellable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4Mzk3NQ==", "bodyText": "DelayedCancellableThenSubscription is the only consumer of this API.\nOptions to accomplish dereference:\n\nDelayedCancellable#cancel() - this may involve additional offloading and complicates the control flow a bit.\nDelayedCancellable#disableCancellable - adds extra protected method to the API. The API\nDelayedCancellableThenSubscription to duplicate DelayedCancellable logic - logic isn't overly complicated so may not be a deal breaker, but more code duplication.\n\nI'll update to the last option to avoid API change.", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r427683975", "createdAt": "2020-05-20T01:02:04Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java", "diffHunk": "@@ -52,4 +52,12 @@ public void cancel() {\n             oldCancellable.cancel();\n         }\n     }\n+\n+    /**\n+     * Dereference the internal {@link Cancellable} and prevent future calls to\n+     * {@link #delayedCancellable(Cancellable)}.\n+     */\n+    protected final void disableCancellable() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5Mjc0NA=="}, "originalCommit": {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzYzNTUyOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTowNjoyNlrOGX30zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTo1ODoyNlrOGYSyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NTA3MQ==", "bodyText": "I considered making DelayedSubscription non-final and extending it, but lets defer this for a followup PR if necessary.", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r427685071", "createdAt": "2020-05-20T01:06:26Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+/**\n+ * An implementation of {@link Subscription} that starts as a {@link Cancellable} but then is replaced with an actual\n+ * {@link Subscription}. The expected sequence of events is:\n+ * <ul>\n+ *     <li>{@link #delayedCancellable(Cancellable)}</li>\n+ *     <li>{@link #delayedSubscription(Subscription)}</li>\n+ * </ul>\n+ * The {@link Subscription} methods can be invoked at any time.\n+ */\n+class DelayedCancellableThenSubscription implements Subscription {\n+    private final DelayedSubscription delayedSubscription = new DelayedSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODEyNjcyMg==", "bodyText": "This LGTM", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r428126722", "createdAt": "2020-05-20T15:58:26Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+/**\n+ * An implementation of {@link Subscription} that starts as a {@link Cancellable} but then is replaced with an actual\n+ * {@link Subscription}. The expected sequence of events is:\n+ * <ul>\n+ *     <li>{@link #delayedCancellable(Cancellable)}</li>\n+ *     <li>{@link #delayedSubscription(Subscription)}</li>\n+ * </ul>\n+ * The {@link Subscription} methods can be invoked at any time.\n+ */\n+class DelayedCancellableThenSubscription implements Subscription {\n+    private final DelayedSubscription delayedSubscription = new DelayedSubscription();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NTA3MQ=="}, "originalCommit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Njc2MjgxOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozNzoxMlrOGYWrUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozNzoxMlrOGYWrUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDU0Ng==", "bodyText": "small followup #1061 to just use current instead of current and delayedSubscription", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r428190546", "createdAt": "2020-05-20T17:37:12Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+/**\n+ * An implementation of {@link Subscription} that starts as a {@link Cancellable} but then is replaced with an actual\n+ * {@link Subscription}. The expected sequence of events is:\n+ * <ul>\n+ *     <li>{@link #delayedCancellable(Cancellable)}</li>\n+ *     <li>{@link #delayedSubscription(Subscription)}</li>\n+ * </ul>\n+ * The {@link Subscription} methods can be invoked at any time.\n+ */\n+class DelayedCancellableThenSubscription implements Subscription {\n+    private final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+    private static final AtomicReferenceFieldUpdater<DelayedCancellableThenSubscription, Cancellable> currentUpdater =\n+            newUpdater(DelayedCancellableThenSubscription.class, Cancellable.class, \"current\");\n+    @Nullable\n+    private volatile Cancellable current;\n+\n+    @Override\n+    public void request(final long n) {\n+        delayedSubscription.request(n);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2754, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}