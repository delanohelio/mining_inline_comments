{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTY3ODI0", "number": 1051, "title": "`RoundRobinLoadBalancer` should not sort the addresses", "bodyText": "Motivation\nFor quicker lookups on receiving Service discovery events,  RoundRobinLoadBalancer keeps a sorted list of addresses. This results in the same order of hosts for all client instances hence potentially creating hot spots. As, the sorting is not required functionally, we should avoid doing that.\nModification\nUse unsorted address list and let service discoverer maintain order of addresses.\nResult\nRoundRobinLoadBalancer does not store sorted addresses.", "createdAt": "2020-05-13T19:32:24Z", "url": "https://github.com/apple/servicetalk/pull/1051", "merged": true, "mergeCommit": {"oid": "b7cabe41d9b59978f48f7964835c1092412a00ab"}, "closed": true, "closedAt": "2020-05-13T23:12:02Z", "author": {"login": "NiteshKant"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg-EhrgH2gAyNDE3NTY3ODI0OmJmMDI4YWQyZmZkYzY1YWRiM2U1ODM1NWYyYWM5NTVhMmJjNjhhZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchA2bbAFqTQxMTM0OTk4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf028ad2ffdc65adb3e58355f2ac955a2bc68aef", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/bf028ad2ffdc65adb3e58355f2ac955a2bc68aef", "committedDate": "2020-05-13T19:30:43Z", "message": "`RoundRobinLoadBalancer` should not sort the addresses\n\n__Motivation__\n\nFor quicker lookups on receiving Service discovery events,  `RoundRobinLoadBalancer` keeps a sorted list of addresses. This results in the same order of hosts for all client instances hence potentially creating hot spots. As, the sorting is not required functionally, we should avoid doing that.\n\n__Modification__\n\nUse unsorted address list and let service discoverer maintain order of addresses.\n\n__Result__\n\n`RoundRobinLoadBalancer` does not store sorted addresses."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzAyOTUx", "url": "https://github.com/apple/servicetalk/pull/1051#pullrequestreview-411302951", "createdAt": "2020-05-13T21:12:03Z", "commit": {"oid": "bf028ad2ffdc65adb3e58355f2ac955a2bc68aef"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMjowM1rOGVDsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMjowM1rOGVDsUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzc3OQ==", "bodyText": "Doesn't look like we started to use equals and hashCode. Can we defer adding them for now?", "url": "https://github.com/apple/servicetalk/pull/1051#discussion_r424733779", "createdAt": "2020-05-13T21:12:03Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -440,6 +423,25 @@ public Completable closeAsyncGracefully() {\n                     .map(AsyncCloseable::closeAsyncGracefully)::iterator);\n         }\n \n+        @Override\n+        public boolean equals(final Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf028ad2ffdc65adb3e58355f2ac955a2bc68aef"}, "originalPosition": 146}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d", "committedDate": "2020-05-13T22:18:01Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMzQ5OTgy", "url": "https://github.com/apple/servicetalk/pull/1051#pullrequestreview-411349982", "createdAt": "2020-05-13T22:44:09Z", "commit": {"oid": "3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo0NDowOVrOGVGEcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo0NDowOVrOGVGEcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3MjcyMg==", "bodyText": "It is expected that the ServiceDiscoverer will filter duplicate events, and there is no modification outside of Subscriber#onNext(other than emptying the list). I think we can assume we won't find any duplicates on addition:\nThis will also avoid ArrayList copy/move of array elements after it has already been copied in the constructor.\n                            final ResolvedAddress addr = requireNonNull(event.address());\n                            final List<Host<ResolvedAddress, C>> refreshedAddresses;\n                            if (event.isAvailable()) {\n                                refreshedAddresses = new ArrayList<>(currentAddresses.size() + 1);\n                                refreshedAddresses.addAll(currentAddresses);\n                                refreshedAddresses.add(new Host<>(addr));\n                            } else if (currentAddresses.isEmpty()) {\n                                refreshedAddresses = currentAddresses;\n                            } else {\n                                refreshedAddresses = new ArrayList<>(currentAddresses.size() - 1);\n                                for (Host<ResolvedAddress, C> host : (List<Host<ResolvedAddress, C>>) currentAddresses) {\n                                    if (host.address.equals(addr)) {\n                                        host.markInactive();\n                                    } else {\n                                        refreshedAddresses.add(host);\n                                    }\n                                }\n                            }\n                            return refreshedAddresses;", "url": "https://github.com/apple/servicetalk/pull/1051#discussion_r424772722", "createdAt": "2020-05-13T22:44:09Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -161,26 +150,29 @@ public void onNext(final ServiceDiscovererEvent<ResolvedAddress> event) {\n                         event);\n                 final List<Host<ResolvedAddress, C>> activeAddresses =\n                         activeHostsUpdater.updateAndGet(RoundRobinLoadBalancer.this, currentAddresses -> {\n-                            final List<Host<ResolvedAddress, C>> refreshedAddresses = new ArrayList<>(currentAddresses);\n-                            final MutableAddressHost<ResolvedAddress, C> searchHost = new MutableAddressHost<>();\n-\n-                            searchHost.mutableAddress = event.address();\n-                            // Binary search because any insertion is performed at the index returned by the search,\n-                            // which is consistent with the ordering defined by the comparator\n-                            final int i = binarySearch(refreshedAddresses, searchHost, activeAddressComparator);\n-\n-                            if (event.isAvailable()) {\n-                                if (i < 0) {\n-                                    refreshedAddresses.add(-i - 1, new Host<>(event.address()));\n-                                }\n-                            } else if (i >= 0) {\n-                                Host<ResolvedAddress, C> removed = refreshedAddresses.remove(i);\n-                                if (removed != null) {\n-                                    removed.markInactive();\n+                            final List<Host<ResolvedAddress, C>> refreshedAddresses =\n+                                    new ArrayList<Host<ResolvedAddress, C>>(currentAddresses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3690, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}