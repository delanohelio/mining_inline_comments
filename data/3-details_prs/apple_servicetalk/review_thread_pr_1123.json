{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NDU0NDQy", "number": 1123, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjowMDo0NlrOEXcWbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0NjoyN1rOEiNH3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMDE3MTk4OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjowMDo0NlrOG_PKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTowMjoxNlrOG_R4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MTkxMQ==", "bodyText": "this API was designed to avoid exposing SL4J types in our public API, at the cost of multiple logger lookups (one in this method, one done by Netty via InternalLoggerFactory).", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r468961911", "createdAt": "2020-08-12T02:00:46Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjM1NQ==", "bodyText": "sounds good to me, should not harm at the build time", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r469006355", "createdAt": "2020-08-12T05:02:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MTkxMQ=="}, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDAxODI0OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo0Mjo0OVrOG_z5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo1MToyOVrOHPfDTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ==", "bodyText": "A behavior that is useful is to enable wire logging in code but disable it using logger levels. I think this will always enable wire logging if it is enabled in code, is that correct?", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r469563749", "createdAt": "2020-08-12T21:42:49Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NDE0MQ==", "bodyText": "Good question! Most of the logger implementations also support OFF that disables logging [1, 2] from the logger config. But we need to adjust getNettyLogLevel method to support it.\n\nhttps://logging.apache.org/log4j/2.x/log4j-api/apidocs/org/apache/logging/log4j/Level.html#OFF\nhttp://logback.qos.ch/apidocs/ch/qos/logback/classic/Level.html#OFF", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478584141", "createdAt": "2020-08-27T17:33:41Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxMDc2NQ==", "bodyText": "The configuration can be modified to accommodate this, an appender can include a threshold level. I will enhance our test log4j2-test.xml to accommodate this.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478610765", "createdAt": "2020-08-27T18:21:27Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyOTYwNw==", "bodyText": "I am not sure I am following the motivation now. Threshold filter is specific to log4j, so not ideal that we have to depend on that for the expected behavior.\nWhy not just let the user specify the level at which they want to log?", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478629607", "createdAt": "2020-08-27T18:56:47Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5OTQzNw==", "bodyText": "Threshold filter was one example of how this can be handled in configuration, setting the logging value to OFF is another example. Specifying the log level programmatically requires additional API surface area (e.g. log level API, propagation of log level) which seems redundant if the configuration has to be setup correctly to enable/disable the logger anyways. This change still allows for specifying the logger in builder code and disable it via config, which I think was your initial concern?", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r485999437", "createdAt": "2020-09-10T00:51:29Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ=="}, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTgxMjg1OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozNTowNlrOHIag6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozMToyOFrOHIcaEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NTA2Nw==", "bodyText": "As discussed in #1123 (comment) the logger config can disable logging. We should support it instead of throwing an exception.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478585067", "createdAt": "2020-08-27T17:35:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {\n+        final Logger logger = LoggerFactory.getLogger(loggerName);\n+        if (logger.isTraceEnabled()) {\n+            return TRACE;\n+        } else if (logger.isDebugEnabled()) {\n+            return DEBUG;\n+        } else if (logger.isInfoEnabled()) {\n+            return INFO;\n+        } else if (logger.isWarnEnabled()) {\n+            return WARN;\n+        } else if (logger.isErrorEnabled()) {\n+            return ERROR;\n+        }\n+        throw new IllegalArgumentException(\"unknown log level: \" + logger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNjA4MQ==", "bodyText": "good point, done.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478616081", "createdAt": "2020-08-27T18:31:28Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {\n+        final Logger logger = LoggerFactory.getLogger(loggerName);\n+        if (logger.isTraceEnabled()) {\n+            return TRACE;\n+        } else if (logger.isDebugEnabled()) {\n+            return DEBUG;\n+        } else if (logger.isInfoEnabled()) {\n+            return INFO;\n+        } else if (logger.isWarnEnabled()) {\n+            return WARN;\n+        } else if (logger.isErrorEnabled()) {\n+            return ERROR;\n+        }\n+        throw new IllegalArgumentException(\"unknown log level: \" + logger);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NTA2Nw=="}, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjAxMjIwOnYy", "diffSide": "LEFT", "path": "servicetalk-examples/grpc/helloworld/src/main/resources/log4j2.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozNDowNFrOHIcfMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozNDowNFrOHIcfMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNzM5NA==", "bodyText": "since there is no more strict requirement on the log level, we have an opportunity to simplify the examples. Log4j can be configured in many ways (filters, multiple appenders, using different loggers, etc.) and I don't think this is central to understanding servicetalk.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478617394", "createdAt": "2020-08-27T18:34:04Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-examples/grpc/helloworld/src/main/resources/log4j2.xml", "diffHunk": "@@ -21,14 +21,6 @@\n     </Console>\n   </Appenders>\n   <Loggers>\n-    <!--\n-        This is an example of how to configure logging of wire events:\n-          1. Add a Logger with `TRACE` level;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6647588ad19b40194b4c0a88dfd0bbdfc26248a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzAyMDQ0OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0NjoyN1rOHP85Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjoxMzowN1rOHQLzKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4ODM2Ng==", "bodyText": "Just a suggestion; feel free to ignore.\nThis approach precludes dynamic log level manipulation for existing channels. I think we should always add the handler if user opts-in to it using the builder setting.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r486488366", "createdAt": "2020-09-10T16:46:27Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java", "diffHunk": "@@ -34,11 +37,14 @@\n      * @param loggerName The name of the logger to log wire events.\n      */\n     public WireLoggingInitializer(final String loggerName) {\n-        loggingHandler = new LoggingHandler(loggerName, TRACE);\n+        LogLevel logLevel = getNettyLogLevel(loggerName);\n+        loggingHandler = logLevel != null ? new LoggingHandler(loggerName, logLevel) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dcd115214a266f69873d6f2a3cad5087048973"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjczMjU4NA==", "bodyText": "logLevel  == null will only if the logging level can't be mapped to a Netty LogLevel (e.g. \"OFF\"). The user's logging config can set the logging level set to a valid level (e.g. not \"OFF\") and use a filter to achieve the dynamic enable/disable of logs on pre-existing channels.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r486732584", "createdAt": "2020-09-11T02:13:07Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java", "diffHunk": "@@ -34,11 +37,14 @@\n      * @param loggerName The name of the logger to log wire events.\n      */\n     public WireLoggingInitializer(final String loggerName) {\n-        loggingHandler = new LoggingHandler(loggerName, TRACE);\n+        LogLevel logLevel = getNettyLogLevel(loggerName);\n+        loggingHandler = logLevel != null ? new LoggingHandler(loggerName, logLevel) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4ODM2Ng=="}, "originalCommit": {"oid": "42dcd115214a266f69873d6f2a3cad5087048973"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2536, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}