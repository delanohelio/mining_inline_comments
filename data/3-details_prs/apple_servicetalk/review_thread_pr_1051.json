{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NTY3ODI0", "number": 1051, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMjowM1rOD8PRTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo0NDowOVrOD8Qw9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDkxMzQxOnYy", "diffSide": "RIGHT", "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMjowM1rOGVDsUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToxMjowM1rOGVDsUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDczMzc3OQ==", "bodyText": "Doesn't look like we started to use equals and hashCode. Can we defer adding them for now?", "url": "https://github.com/apple/servicetalk/pull/1051#discussion_r424733779", "createdAt": "2020-05-13T21:12:03Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -440,6 +423,25 @@ public Completable closeAsyncGracefully() {\n                     .map(AsyncCloseable::closeAsyncGracefully)::iterator);\n         }\n \n+        @Override\n+        public boolean equals(final Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf028ad2ffdc65adb3e58355f2ac955a2bc68aef"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTE1ODMwOnYy", "diffSide": "RIGHT", "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjo0NDowOVrOGVGEcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMzo0Njo1OFrOGVHVDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3MjcyMg==", "bodyText": "It is expected that the ServiceDiscoverer will filter duplicate events, and there is no modification outside of Subscriber#onNext(other than emptying the list). I think we can assume we won't find any duplicates on addition:\nThis will also avoid ArrayList copy/move of array elements after it has already been copied in the constructor.\n                            final ResolvedAddress addr = requireNonNull(event.address());\n                            final List<Host<ResolvedAddress, C>> refreshedAddresses;\n                            if (event.isAvailable()) {\n                                refreshedAddresses = new ArrayList<>(currentAddresses.size() + 1);\n                                refreshedAddresses.addAll(currentAddresses);\n                                refreshedAddresses.add(new Host<>(addr));\n                            } else if (currentAddresses.isEmpty()) {\n                                refreshedAddresses = currentAddresses;\n                            } else {\n                                refreshedAddresses = new ArrayList<>(currentAddresses.size() - 1);\n                                for (Host<ResolvedAddress, C> host : (List<Host<ResolvedAddress, C>>) currentAddresses) {\n                                    if (host.address.equals(addr)) {\n                                        host.markInactive();\n                                    } else {\n                                        refreshedAddresses.add(host);\n                                    }\n                                }\n                            }\n                            return refreshedAddresses;", "url": "https://github.com/apple/servicetalk/pull/1051#discussion_r424772722", "createdAt": "2020-05-13T22:44:09Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -161,26 +150,29 @@ public void onNext(final ServiceDiscovererEvent<ResolvedAddress> event) {\n                         event);\n                 final List<Host<ResolvedAddress, C>> activeAddresses =\n                         activeHostsUpdater.updateAndGet(RoundRobinLoadBalancer.this, currentAddresses -> {\n-                            final List<Host<ResolvedAddress, C>> refreshedAddresses = new ArrayList<>(currentAddresses);\n-                            final MutableAddressHost<ResolvedAddress, C> searchHost = new MutableAddressHost<>();\n-\n-                            searchHost.mutableAddress = event.address();\n-                            // Binary search because any insertion is performed at the index returned by the search,\n-                            // which is consistent with the ordering defined by the comparator\n-                            final int i = binarySearch(refreshedAddresses, searchHost, activeAddressComparator);\n-\n-                            if (event.isAvailable()) {\n-                                if (i < 0) {\n-                                    refreshedAddresses.add(-i - 1, new Host<>(event.address()));\n-                                }\n-                            } else if (i >= 0) {\n-                                Host<ResolvedAddress, C> removed = refreshedAddresses.remove(i);\n-                                if (removed != null) {\n-                                    removed.markInactive();\n+                            final List<Host<ResolvedAddress, C>> refreshedAddresses =\n+                                    new ArrayList<Host<ResolvedAddress, C>>(currentAddresses);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MDk2Nw==", "bodyText": "I was thinking about double copying when we add an element. Unfortunately, refreshedAddresses.addAll(currentAddresses) does 2 copies internally. So, it will be the same as using new ArrayList(anotherList) + add with resize.\n\nIt is expected that the ServiceDiscoverer will filter duplicate events\n\nDNS SD currently does not filter duplicates. It takes a List from netty's resolver.resolveAll and passes it as-is. I didn't check netty's code but assume it just parses each DnsRecord from the response. If DNS response contains duplicated addresses, we will see them here.", "url": "https://github.com/apple/servicetalk/pull/1051#discussion_r424780967", "createdAt": "2020-05-13T23:07:35Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -161,26 +150,29 @@ public void onNext(final ServiceDiscovererEvent<ResolvedAddress> event) {\n                         event);\n                 final List<Host<ResolvedAddress, C>> activeAddresses =\n                         activeHostsUpdater.updateAndGet(RoundRobinLoadBalancer.this, currentAddresses -> {\n-                            final List<Host<ResolvedAddress, C>> refreshedAddresses = new ArrayList<>(currentAddresses);\n-                            final MutableAddressHost<ResolvedAddress, C> searchHost = new MutableAddressHost<>();\n-\n-                            searchHost.mutableAddress = event.address();\n-                            // Binary search because any insertion is performed at the index returned by the search,\n-                            // which is consistent with the ordering defined by the comparator\n-                            final int i = binarySearch(refreshedAddresses, searchHost, activeAddressComparator);\n-\n-                            if (event.isAvailable()) {\n-                                if (i < 0) {\n-                                    refreshedAddresses.add(-i - 1, new Host<>(event.address()));\n-                                }\n-                            } else if (i >= 0) {\n-                                Host<ResolvedAddress, C> removed = refreshedAddresses.remove(i);\n-                                if (removed != null) {\n-                                    removed.markInactive();\n+                            final List<Host<ResolvedAddress, C>> refreshedAddresses =\n+                                    new ArrayList<Host<ResolvedAddress, C>>(currentAddresses);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3MjcyMg=="}, "originalCommit": {"oid": "3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc4MjIwNA==", "bodyText": "I think we can assume we won't find any duplicates on addition\n\nActually I think we should allow duplicates which enables folks to effectively add weights to certain hosts. I would prefer not to do these two changes (unsorted and allow dups) in the same PR though. So, ya feel free to send a followup", "url": "https://github.com/apple/servicetalk/pull/1051#discussion_r424782204", "createdAt": "2020-05-13T23:11:17Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -161,26 +150,29 @@ public void onNext(final ServiceDiscovererEvent<ResolvedAddress> event) {\n                         event);\n                 final List<Host<ResolvedAddress, C>> activeAddresses =\n                         activeHostsUpdater.updateAndGet(RoundRobinLoadBalancer.this, currentAddresses -> {\n-                            final List<Host<ResolvedAddress, C>> refreshedAddresses = new ArrayList<>(currentAddresses);\n-                            final MutableAddressHost<ResolvedAddress, C> searchHost = new MutableAddressHost<>();\n-\n-                            searchHost.mutableAddress = event.address();\n-                            // Binary search because any insertion is performed at the index returned by the search,\n-                            // which is consistent with the ordering defined by the comparator\n-                            final int i = binarySearch(refreshedAddresses, searchHost, activeAddressComparator);\n-\n-                            if (event.isAvailable()) {\n-                                if (i < 0) {\n-                                    refreshedAddresses.add(-i - 1, new Host<>(event.address()));\n-                                }\n-                            } else if (i >= 0) {\n-                                Host<ResolvedAddress, C> removed = refreshedAddresses.remove(i);\n-                                if (removed != null) {\n-                                    removed.markInactive();\n+                            final List<Host<ResolvedAddress, C>> refreshedAddresses =\n+                                    new ArrayList<Host<ResolvedAddress, C>>(currentAddresses);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3MjcyMg=="}, "originalCommit": {"oid": "3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc5MzM1Nw==", "bodyText": "#1052", "url": "https://github.com/apple/servicetalk/pull/1051#discussion_r424793357", "createdAt": "2020-05-13T23:46:58Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -161,26 +150,29 @@ public void onNext(final ServiceDiscovererEvent<ResolvedAddress> event) {\n                         event);\n                 final List<Host<ResolvedAddress, C>> activeAddresses =\n                         activeHostsUpdater.updateAndGet(RoundRobinLoadBalancer.this, currentAddresses -> {\n-                            final List<Host<ResolvedAddress, C>> refreshedAddresses = new ArrayList<>(currentAddresses);\n-                            final MutableAddressHost<ResolvedAddress, C> searchHost = new MutableAddressHost<>();\n-\n-                            searchHost.mutableAddress = event.address();\n-                            // Binary search because any insertion is performed at the index returned by the search,\n-                            // which is consistent with the ordering defined by the comparator\n-                            final int i = binarySearch(refreshedAddresses, searchHost, activeAddressComparator);\n-\n-                            if (event.isAvailable()) {\n-                                if (i < 0) {\n-                                    refreshedAddresses.add(-i - 1, new Host<>(event.address()));\n-                                }\n-                            } else if (i >= 0) {\n-                                Host<ResolvedAddress, C> removed = refreshedAddresses.remove(i);\n-                                if (removed != null) {\n-                                    removed.markInactive();\n+                            final List<Host<ResolvedAddress, C>> refreshedAddresses =\n+                                    new ArrayList<Host<ResolvedAddress, C>>(currentAddresses);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc3MjcyMg=="}, "originalCommit": {"oid": "3ff4d54b44b8f68d40bbfd35e98a133b9fc06e3d"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2749, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}