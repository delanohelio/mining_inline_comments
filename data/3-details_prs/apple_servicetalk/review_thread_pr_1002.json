{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4NDM5NjMy", "number": 1002, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNjo0Mzo1NlrODu2A4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1NzoxNFrODwMdaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDQ2MDQ4OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNjo0Mzo1NlrOGA9TGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQwNjo0Mzo1NlrOGA9TGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzY1NzQ5OQ==", "bodyText": "nit: looks like formatting is off...", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r403657499", "createdAt": "2020-04-05T06:43:56Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);\n+                    }\n+                 });\n+            } catch (Exception e) {\n+                closeConnection(c);\n+                return failed(e);\n+            }\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTgzMjA3OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTozOTo1OVrOGBIddw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTozOTo1OVrOGBIddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MDM3NQ==", "bodyText": "Dangling subscribes are usually a bad idea. As this code is not composing the subscribe, if the returned Single from newConnection is cancelled, we will still keep consuming the response. Worse if the response does not complete, we will keep this subscribe around forever (and so the resources associated with the subscribe).\nWhat we were doing before, i.e. composing the response draining with the Single returned from this flatMap is the correct thing to do.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r403840375", "createdAt": "2020-04-06T05:39:59Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,14 +70,21 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+            try {\n                 // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n                 // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n                 // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n                  .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n+                    // Drain response payload body asynchronously as we are not interested in it:\n+                    response.payloadBodyAndTrailers().ignoreElements().subscribe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTgzNzkyOnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTo0MzoxOVrOGBIg-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTowNjo0N1rOGBzBCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MTI3NQ==", "bodyText": "Same as above, we should not be doing dangling subscribes, instead compose connection closure with error response.\nCancel path will be an exception to this rule as cancels are not composable.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r403841275", "createdAt": "2020-04-06T05:43:19Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);\n+                    }\n+                 });\n+            } catch (Exception e) {\n+                closeConnection(c);\n+                return failed(e);\n+            }\n+            });\n         }\n     }\n \n+    private static <C extends FilterableStreamingHttpConnection> void closeConnection(C connection) {\n+        connection.closeAsync().subscribe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1NjE4OQ==", "bodyText": "Good catch! Two questions:\n\nIf we concat with failed Single, there is a chance that connection.closeAsync() may also fail. Should we worry about handling that case and adding the original exception as a suppressed one for the failed closure?\nShould we make the same change for RRLB as a follow-up? Currently, we just subscribe to closeAsync and return an exception. For example: \n  \n    \n      servicetalk/servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java\n    \n    \n        Lines 279 to 285\n      in\n      52532d4\n    \n    \n    \n    \n\n        \n          \n           if (!selector.test(newCnx)) { \n        \n\n        \n          \n               newCnx.closeAsync().subscribe(); \n        \n\n        \n          \n               // Failure in selection could be temporary, hence add it to the queue and be consistent with the \n        \n\n        \n          \n               // fact that select failure does not close a connection. \n        \n\n        \n          \n               return failed(new ConnectionRejectedException(\"Newly created connection \" + newCnx + \n        \n\n        \n          \n                       \" rejected by the selection filter.\")); \n        \n\n        \n          \n           }", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404456189", "createdAt": "2020-04-06T23:52:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);\n+                    }\n+                 });\n+            } catch (Exception e) {\n+                closeConnection(c);\n+                return failed(e);\n+            }\n+            });\n         }\n     }\n \n+    private static <C extends FilterableStreamingHttpConnection> void closeConnection(C connection) {\n+        connection.closeAsync().subscribe();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MTI3NQ=="}, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NjQ5OQ==", "bodyText": "A1: As closeAsync() is idempotent and not expected to fail I will avoid handling that case and make the control flow complex here.\nA2: Good catch, yes please do a follow-up", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404476499", "createdAt": "2020-04-07T01:01:29Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);\n+                    }\n+                 });\n+            } catch (Exception e) {\n+                closeConnection(c);\n+                return failed(e);\n+            }\n+            });\n         }\n     }\n \n+    private static <C extends FilterableStreamingHttpConnection> void closeConnection(C connection) {\n+        connection.closeAsync().subscribe();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MTI3NQ=="}, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNzYwOQ==", "bodyText": "Follow-up for RRLB: #1006", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404537609", "createdAt": "2020-04-07T05:06:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);\n+                    }\n+                 });\n+            } catch (Exception e) {\n+                closeConnection(c);\n+                return failed(e);\n+            }\n+            });\n         }\n     }\n \n+    private static <C extends FilterableStreamingHttpConnection> void closeConnection(C connection) {\n+        connection.closeAsync().subscribe();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MTI3NQ=="}, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTg0NDE4OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTo0Njo0N1rOGBIkfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTo0Njo0N1rOGBIkfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MjE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } catch (Exception e) {\n          \n          \n            \n                        } catch (Throwable t) {", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r403842172", "createdAt": "2020-04-06T05:46:47Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);\n+                    }\n+                 });\n+            } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTg2MjA3OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTo1NjowOVrOGBIuwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwMDo1NTo1MVrOGBvMOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0NDgwMA==", "bodyText": "It seems cancel path may leak connection in general if the connection got emitted from here but the source got cancelled afterwards. eg: any operator added after this proxy filter may not send the connection further if it sees a cancel().", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r403844800", "createdAt": "2020-04-06T05:56:09Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1MDkwNw==", "bodyText": "Interesting observation. I was focused only on cancel handling before onSuccess. For example, before the handshake completes: https://github.com/apple/servicetalk/pull/1002/files#diff-09ab1790ede42935bdec34cd0d96560cR234-R251\nWill you suggest to use whenCancel operator and always close the connection on cancellation? Because close is idempotent it should not matter if this connection is already closed by someone else. Is there any use-case when the connection is still useful after cancel?", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404450907", "createdAt": "2020-04-06T23:36:02Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0NDgwMA=="}, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ3NDkzOQ==", "bodyText": "This is a more broader problem and it can not be handled specifically in this class. As cancel()s can come after a success, we really do not know if the cancel has come due to the operation was cancelled by the user or due to some operators sending a cancel for the previous source when they move on to the next source (eg: concat()).\nI commented here to highlight the problem but this PR does not have to be blocked for this change. What you have here is sufficient in isolation for this class.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404474939", "createdAt": "2020-04-07T00:55:51Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -100,28 +103,43 @@ public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt\n                         }\n                     });\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+                    final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n                     if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+                        return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                                DeferSslHandler.class + \" in channel pipeline.\"));\n                     }\n-\n                     deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+                    return fromSource(processor);\n+                    // Close recently created connection in case of any error or cancellation while it connects to proxy\n+                 }).whenFinally(new TerminalSignalConsumer<C>() {\n+                    @Override\n+                    public void onSuccess(@Nullable final C result) {\n+                        // noop\n+                    }\n+\n+                    @Override\n+                    public void onError(final Throwable ignore) {\n+                        closeConnection(c);\n+                    }\n+\n+                    @Override\n+                    public void cancel() {\n+                        closeConnection(c);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0NDgwMA=="}, "originalCommit": {"oid": "8a9cf373192be94190236800d625369cc6a23f5d"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDI3NDc0OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToxMDoxOVrOGBzEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo0OToxMFrOGDAa3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA==", "bodyText": "we really do not know if the cancel has come due to the operation was canceled by the user or due to some operators sending a cancel for the previous source when they move on to the next source (eg: concat()).\n\nCan any operator cancel after success? IIUC they cancel the previous source only for non-success/non-complete cases.\nLMK if I need to revert whenFinally here to prevent closure on cancel after success.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404538544", "createdAt": "2020-04-07T05:10:19Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMTU3OA==", "bodyText": "Can any operator cancel after success?\n\nYes they do, consider this connFactory.newConnection().concat(executor.timer(1, MILLISECONDS) (eg: to add a delay to respond to connect)\nconcat() uses SequentialCancellable which cancels the old Cancellable when the new Cancellable is received, which in this case will be after the successful completion of connFactory.newConnection().\nMore generally, we should not assume anywhere that cancel is only received before success() as Cancellable and Subscriber code paths are concurrent.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404931578", "createdAt": "2020-04-07T16:08:22Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAwNTAzNA==", "bodyText": "Looking at SequentialCancellable and TBH don't see where it cancels the old Cancellable. When the new Cancellable is received it may close the new one immediately if the oldVal was already canceled via SequentialCancellable#cancel().\n\nMore generally, we should not assume anywhere that cancel is only received before success() as Cancellable and Subscriber code paths are concurrent.\n\nAgreed. I just thought that it doesn't matter when proxy filter sees cancel: before or after onSuccess we should close the connection if we saw that someone is not interested in the result anymore.\nBtw, after #1005, should it be afterCancel or afterFinally?", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405005034", "createdAt": "2020-04-07T17:58:22Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NDQxNw==", "bodyText": "whenCancel will unconditionally execute the callback when cancel is called regardless if the connection has been delivered downstream. If we have already delivered the connection we shouldn't later close it (regardless if someone cancels or not). In addition to this being the expected control flow, the RS spec has some rules which discuss cancel being a no-op after a terminal signal is delivered [1][2].\nafterFinally(SingleTerminalSignalConsumer<T> doFinally) happens to enforce \"only a single callback will be executed\" but may still result in invoking the onCancel() call back and also calling the downstream Subscriber#onSuccess(...) for the following reasons:\n\nSubscription can be invoked on a different thread\nData/terminal signals may still be delivered after cancel [3]\n\nSo afterFinally is an improvement over afterCancel, but still isn't ideal because we may deliver a closed object (and/or invoke closeAsync() concurrently).\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.6\n\nIf a Publisher signals either onError or onComplete on a Subscriber, that Subscriber\u2019s Subscription MUST be considered cancelled.\n\n[2] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#3.7\n\nAfter the Subscription is cancelled, additional Subscription.cancel() MUST be NOPs.\n\n[3] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#2.8\n\nA Subscriber MUST be prepared to receive one or more onNext signals after having called Subscription.cancel() if there are still requested elements pending [see 3.12]. Subscription.cancel() does not guarantee to perform the underlying cleaning operations immediately.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405164417", "createdAt": "2020-04-07T23:05:01Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzU2Mg==", "bodyText": "TBH don't see where it cancels the old Cancellable.\n\n\nAah, you are correct. I misread under an older assumption that we cancel() the previous Cancellable.\nAnyways, for other reasons me and Scott mention, unconditional close() upon cancel() isn't correct.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405183562", "createdAt": "2020-04-08T00:04:43Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzkzMA==", "bodyText": "Updated to use whenFinally d2bf22f afterFinally cfd0117", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405183930", "createdAt": "2020-04-08T00:06:04Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY0MzUzMQ==", "bodyText": "So afterFinally is an improvement over afterCancel, but still isn't ideal because we may deliver a closed object (and/or invoke closeAsync() concurrently).\n\nOk ya this seems to be a problem. Can we remove the close-on-cancel part for now?\nConnection lifetime is anyways a problem in such situation out of the context of this filter as mentioned in #1002 (comment).\nLets fix the obvious issue of leaking connection for non-200 responses and then handle lifecycle on cancel/early termination later.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405643531", "createdAt": "2020-04-08T16:11:47Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNTc5MA==", "bodyText": "Removed in 57e470b and created #1010.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405805790", "createdAt": "2020-04-08T20:49:10Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzODU0NA=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDI3ODM0OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToxMjozM1rOGBzG5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToxMjozM1rOGBzG5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzOTExMA==", "bodyText": "Moved this logic to the different method because nested try blocks make code indentation awful.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r404539110", "createdAt": "2020-04-07T05:12:33Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());\n+                } catch (Throwable t) {\n+                    return c.closeAsync().concat(failed(t));\n+                }\n+            });\n+        }\n+    }\n \n-                    channel.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n-                        @Override\n-                        public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt) {\n-                            if (evt instanceof SslHandshakeCompletionEvent) {\n-                                SslHandshakeCompletionEvent event = (SslHandshakeCompletionEvent) evt;\n-                                if (event.isSuccess()) {\n-                                    processor.onSuccess(c);\n-                                } else {\n-                                    processor.onError(event.cause());\n-                                }\n-                            }\n-                            ctx.fireUserEventTriggered(evt);\n-                        }\n-                    });\n+    private Single<C> handleConnectResponse(final C connection, final StreamingHttpResponse response) {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDIyMTY0OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMzoxMjo1N1rOGCZb3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMDowMjo0OVrOGCaaHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NzA3MQ==", "bodyText": "this could lead to unnecessary resource (CPU, memory, network, etc...) consumption if we continuously read data that we don't care about (potential DOS vector). Can you clarify why this is necessary when we are hard-closing the connection?", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405167071", "createdAt": "2020-04-07T23:12:57Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());\n+                } catch (Throwable t) {\n+                    return c.closeAsync().concat(failed(t));\n+                }\n+            });\n+        }\n+    }\n \n-                    channel.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n-                        @Override\n-                        public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt) {\n-                            if (evt instanceof SslHandshakeCompletionEvent) {\n-                                SslHandshakeCompletionEvent event = (SslHandshakeCompletionEvent) evt;\n-                                if (event.isSuccess()) {\n-                                    processor.onSuccess(c);\n-                                } else {\n-                                    processor.onError(event.cause());\n-                                }\n-                            }\n-                            ctx.fireUserEventTriggered(evt);\n-                        }\n-                    });\n+    private Single<C> handleConnectResponse(final C connection, final StreamingHttpResponse response) {\n+        try {\n+            if (response.status().statusClass() != SUCCESSFUL_2XX) {\n+                return response.payloadBodyAndTrailers().ignoreElements().concat(failed(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE4MzAwNg==", "bodyText": "Good catch!\nI thought about this while was working on this PR. But because it was deferred until after #990 is merged I forgot to ask about it. Fixed.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405183006", "createdAt": "2020-04-08T00:02:49Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,63 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy\n+                            // or cancellation:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)))\n+                            .whenCancel(() -> c.closeAsync().subscribe());\n+                } catch (Throwable t) {\n+                    return c.closeAsync().concat(failed(t));\n+                }\n+            });\n+        }\n+    }\n \n-                    channel.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n-                        @Override\n-                        public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt) {\n-                            if (evt instanceof SslHandshakeCompletionEvent) {\n-                                SslHandshakeCompletionEvent event = (SslHandshakeCompletionEvent) evt;\n-                                if (event.isSuccess()) {\n-                                    processor.onSuccess(c);\n-                                } else {\n-                                    processor.onError(event.cause());\n-                                }\n-                            }\n-                            ctx.fireUserEventTriggered(evt);\n-                        }\n-                    });\n+    private Single<C> handleConnectResponse(final C connection, final StreamingHttpResponse response) {\n+        try {\n+            if (response.status().statusClass() != SUCCESSFUL_2XX) {\n+                return response.payloadBodyAndTrailers().ignoreElements().concat(failed(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE2NzA3MQ=="}, "originalCommit": {"oid": "a0cd7b8ff1c1f6c96fa18b9c2f2dd3098409b9cf"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODYxNzc2OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1NDozNlrOGDDxUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1NDozNlrOGDDxUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2MDY5MA==", "bodyText": "This try-catch isn't required as it is called from the flatMap which has a recoverWith, so if anything does throw from here, flatMap will correctly terminate the control flow with the same error which will then be intercepted by recoverWith() closing the connection.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405860690", "createdAt": "2020-04-08T22:54:36Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,59 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)));\n+                } catch (Throwable t) {\n+                    return c.closeAsync().concat(failed(t));\n+                }\n+            });\n+        }\n+    }\n \n-                    channel.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n-                        @Override\n-                        public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt) {\n-                            if (evt instanceof SslHandshakeCompletionEvent) {\n-                                SslHandshakeCompletionEvent event = (SslHandshakeCompletionEvent) evt;\n-                                if (event.isSuccess()) {\n-                                    processor.onSuccess(c);\n-                                } else {\n-                                    processor.onError(event.cause());\n-                                }\n-                            }\n-                            ctx.fireUserEventTriggered(evt);\n-                        }\n-                    });\n+    private Single<C> handleConnectResponse(final C connection, final StreamingHttpResponse response) {\n+        try {\n+            if (response.status().statusClass() != SUCCESSFUL_2XX) {\n+                return failed(new ProxyResponseException(\"Non-successful response from proxy CONNECT \" +\n+                        connectAddress, response.status()));\n+            }\n \n-                    DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n-                    if (deferSslHandler == null) {\n-                        return response.payloadBodyAndTrailers().ignoreElements().concat(failed(\n-                                new IllegalStateException(\"Failed to find a handler of type \" +\n-                                        DeferSslHandler.class + \" in channel pipeline.\")));\n+            final Channel channel = ((NettyConnectionContext) connection.connectionContext()).nettyChannel();\n+            final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            channel.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n+                @Override\n+                public void userEventTriggered(final ChannelHandlerContext ctx, final Object evt) {\n+                    if (evt instanceof SslHandshakeCompletionEvent) {\n+                        SslHandshakeCompletionEvent event = (SslHandshakeCompletionEvent) evt;\n+                        if (event.isSuccess()) {\n+                            processor.onSuccess(connection);\n+                        } else {\n+                            processor.onError(event.cause());\n+                        }\n                     }\n+                    ctx.fireUserEventTriggered(evt);\n+                }\n+            });\n \n-                    deferSslHandler.ready();\n+            final DeferSslHandler deferSslHandler = channel.pipeline().get(DeferSslHandler.class);\n+            if (deferSslHandler == null) {\n+                return failed(new IllegalStateException(\"Failed to find a handler of type \" +\n+                        DeferSslHandler.class + \" in channel pipeline.\"));\n+            }\n+            deferSslHandler.ready();\n \n-                    // There is no need to apply offloading explicitly (despite completing `processor` on the\n-                    // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n-                    // request.\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n-                } else {\n-                    return response.payloadBodyAndTrailers().ignoreElements().concat(\n-                            failed(new ProxyResponseException(\"Bad response from proxy CONNECT \" + connectAddress,\n-                                    response.status())));\n-                }\n-            }));\n+            // There is no need to apply offloading explicitly (despite completing `processor` on the\n+            // EventLoop) because `payloadBody()` will be offloaded according to the strategy for the\n+            // request.\n+            return response.payloadBodyAndTrailers().ignoreElements().concat(fromSource(processor));\n+        } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e470b5307862d543c41e8274b3fc5ee634cfa7"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODYyMzc3OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1NzoxNFrOGDD0-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1NzoxNFrOGDD0-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2MTYyNg==", "bodyText": "I think we are being overly paranoid here about the calls to c.request() or c.connect() throwing. Any method returning an asynchronous source is not expected to throw. Having said that it is not a big deal so its ok as it is, I will leave it to you to take a call on this.", "url": "https://github.com/apple/servicetalk/pull/1002#discussion_r405861626", "createdAt": "2020-04-08T22:57:14Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ProxyConnectConnectionFactoryFilter.java", "diffHunk": "@@ -74,51 +68,59 @@ private ProxyFilter(final ConnectionFactory<ResolvedAddress, C> delegate) {\n \n         @Override\n         public Single<C> newConnection(final ResolvedAddress resolvedAddress) {\n-            return delegate().newConnection(resolvedAddress).flatMap(c ->\n-                // We currently only have access to a StreamingHttpRequester, which means we are forced to provide an\n-                // HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the connection\n-                // filters we use the default strategy which should offload everything to be safe.\n-                c.request(defaultStrategy(),\n-                            reqRespFactory.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n-                 .flatMap(response -> {\n-                if (SUCCESSFUL_2XX.contains(response.status())) {\n-                    final Channel channel = ((NettyConnectionContext) c.connectionContext()).nettyChannel();\n-                    final SingleSource.Processor<C, C> processor = newSingleProcessor();\n+            return delegate().newConnection(resolvedAddress).flatMap(c -> {\n+                try {\n+                    // We currently only have access to a StreamingHttpRequester, which means we are forced to provide\n+                    // an HttpExecutionStrategy. Because we can't be sure if there is any blocking code in the\n+                    // connection filters we use the default strategy which should offload everything to be safe.\n+                    return c.request(defaultStrategy(), c.connect(connectAddress).addHeader(CONTENT_LENGTH, ZERO))\n+                            .flatMap(response -> handleConnectResponse(c, response))\n+                            // Close recently created connection in case of any error while it connects to the proxy:\n+                            .recoverWith(t -> c.closeAsync().concat(failed(t)));\n+                } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e470b5307862d543c41e8274b3fc5ee634cfa7"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2660, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}