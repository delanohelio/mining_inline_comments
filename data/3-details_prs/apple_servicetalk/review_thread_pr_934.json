{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTk2OTY3", "number": 934, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTo1ODo0N1rODd4_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTozOTowM1rODesL7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjY5MTM0OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTo1ODo0N1rOFmwMtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo1NzozOFrOFocO_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3OTg5Mg==", "bodyText": "This helps to catch the case when server does not send trailers at all.\nIn this case payloadBodyAndTrailers() returns only Buffers. transformRaw helps to create empty trailers and catch that there is no grpc-status.\nI did not add a comment here, because the test will fail if this changes, but I can add it if it will be useful.", "url": "https://github.com/apple/servicetalk/pull/934#discussion_r376179892", "createdAt": "2020-02-07T01:58:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -138,50 +150,56 @@ static void setStatus(final HttpHeaders trailers, final Throwable cause, final B\n \n     static <Resp> Publisher<Resp> validateResponseAndGetPayload(final StreamingHttpResponse response,\n                                                                 final HttpDeserializer<Resp> deserializer) {\n-        // In case of server error, gRPC may return only one HEADER frame with endStream=true. Our\n-        // HTTP1-based implementation translates them into response headers so we need to look for\n-        // the status in both headers and trailers. Since this is streaming response and we have the headers now, we\n-        // check for error here first. If we see trailers later in payloadBodyAndTrailers(), we will check for error\n-        // there.\n-        final HttpHeaders respHeaders = response.headers();\n-        GrpcStatusException grpcStatusException = extractGrpcExceptionFromHeaders(respHeaders);\n-        if (grpcStatusException != null) {\n-            return Publisher.failed(grpcStatusException);\n+        // In case of an empty response, gRPC-server may return only one HEADER frame with endStream=true. Our\n+        // HTTP1-based implementation translates them into response headers so we need to look for a grpc-status in both\n+        // headers and trailers. Since this is streaming response and we have the headers now, we check for the\n+        // grpc-status here first. If there is no grpc-status in headers, we look for it in trailers later.\n+        final HttpHeaders headers = response.headers();\n+        final GrpcStatusCode grpcStatusCode = extractGrpcStatusCodeFromHeaders(headers);\n+        if (grpcStatusCode != null) {\n+            final GrpcStatusException grpcStatusException = convertToGrpcStatusException(grpcStatusCode, headers);\n+            return response.payloadBodyAndTrailers().ignoreElements()\n+                    .concat(grpcStatusException != null ? failed(grpcStatusException) : empty());\n         }\n-        return deserializer.deserialize(respHeaders, response.payloadBodyAndTrailers().map(o -> {\n-            if (o instanceof HttpHeaders) {\n-                // We have already checked for error in headers above, now we just check in trailers.\n-                GrpcStatusException ex = extractGrpcExceptionFromHeaders((HttpHeaders) o);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            } else if (!(o instanceof Buffer)) {\n-                throw new IllegalArgumentException(\"Unexpected payload type: \" + o.getClass());\n-            }\n-            return o;\n-        }).filter(o -> !(o instanceof HttpHeaders)).map(o -> (Buffer) o));\n+\n+        response.transformRaw(ENSURE_GRPC_STATUS_RECEIVED);\n+        return deserializer.deserialize(headers, response.payloadBodyAndTrailers()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f25afb8e4b007c694cc1bbdc66b3f508134df67"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQwMjI4MQ==", "bodyText": "This makes sense. If you wish to avoid calling transformRaw() (and create trailers); you can use a liftSync() to intercept onComplete() (you would still have to use filter() like before).", "url": "https://github.com/apple/servicetalk/pull/934#discussion_r377402281", "createdAt": "2020-02-11T00:51:59Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -138,50 +150,56 @@ static void setStatus(final HttpHeaders trailers, final Throwable cause, final B\n \n     static <Resp> Publisher<Resp> validateResponseAndGetPayload(final StreamingHttpResponse response,\n                                                                 final HttpDeserializer<Resp> deserializer) {\n-        // In case of server error, gRPC may return only one HEADER frame with endStream=true. Our\n-        // HTTP1-based implementation translates them into response headers so we need to look for\n-        // the status in both headers and trailers. Since this is streaming response and we have the headers now, we\n-        // check for error here first. If we see trailers later in payloadBodyAndTrailers(), we will check for error\n-        // there.\n-        final HttpHeaders respHeaders = response.headers();\n-        GrpcStatusException grpcStatusException = extractGrpcExceptionFromHeaders(respHeaders);\n-        if (grpcStatusException != null) {\n-            return Publisher.failed(grpcStatusException);\n+        // In case of an empty response, gRPC-server may return only one HEADER frame with endStream=true. Our\n+        // HTTP1-based implementation translates them into response headers so we need to look for a grpc-status in both\n+        // headers and trailers. Since this is streaming response and we have the headers now, we check for the\n+        // grpc-status here first. If there is no grpc-status in headers, we look for it in trailers later.\n+        final HttpHeaders headers = response.headers();\n+        final GrpcStatusCode grpcStatusCode = extractGrpcStatusCodeFromHeaders(headers);\n+        if (grpcStatusCode != null) {\n+            final GrpcStatusException grpcStatusException = convertToGrpcStatusException(grpcStatusCode, headers);\n+            return response.payloadBodyAndTrailers().ignoreElements()\n+                    .concat(grpcStatusException != null ? failed(grpcStatusException) : empty());\n         }\n-        return deserializer.deserialize(respHeaders, response.payloadBodyAndTrailers().map(o -> {\n-            if (o instanceof HttpHeaders) {\n-                // We have already checked for error in headers above, now we just check in trailers.\n-                GrpcStatusException ex = extractGrpcExceptionFromHeaders((HttpHeaders) o);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            } else if (!(o instanceof Buffer)) {\n-                throw new IllegalArgumentException(\"Unexpected payload type: \" + o.getClass());\n-            }\n-            return o;\n-        }).filter(o -> !(o instanceof HttpHeaders)).map(o -> (Buffer) o));\n+\n+        response.transformRaw(ENSURE_GRPC_STATUS_RECEIVED);\n+        return deserializer.deserialize(headers, response.payloadBodyAndTrailers()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3OTg5Mg=="}, "originalCommit": {"oid": "1f25afb8e4b007c694cc1bbdc66b3f508134df67"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0OTk0OQ==", "bodyText": "Good idea, I will keep it with transformRaw for now and we can optimize if it show ups as a problem later.", "url": "https://github.com/apple/servicetalk/pull/934#discussion_r377949949", "createdAt": "2020-02-11T22:57:38Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -138,50 +150,56 @@ static void setStatus(final HttpHeaders trailers, final Throwable cause, final B\n \n     static <Resp> Publisher<Resp> validateResponseAndGetPayload(final StreamingHttpResponse response,\n                                                                 final HttpDeserializer<Resp> deserializer) {\n-        // In case of server error, gRPC may return only one HEADER frame with endStream=true. Our\n-        // HTTP1-based implementation translates them into response headers so we need to look for\n-        // the status in both headers and trailers. Since this is streaming response and we have the headers now, we\n-        // check for error here first. If we see trailers later in payloadBodyAndTrailers(), we will check for error\n-        // there.\n-        final HttpHeaders respHeaders = response.headers();\n-        GrpcStatusException grpcStatusException = extractGrpcExceptionFromHeaders(respHeaders);\n-        if (grpcStatusException != null) {\n-            return Publisher.failed(grpcStatusException);\n+        // In case of an empty response, gRPC-server may return only one HEADER frame with endStream=true. Our\n+        // HTTP1-based implementation translates them into response headers so we need to look for a grpc-status in both\n+        // headers and trailers. Since this is streaming response and we have the headers now, we check for the\n+        // grpc-status here first. If there is no grpc-status in headers, we look for it in trailers later.\n+        final HttpHeaders headers = response.headers();\n+        final GrpcStatusCode grpcStatusCode = extractGrpcStatusCodeFromHeaders(headers);\n+        if (grpcStatusCode != null) {\n+            final GrpcStatusException grpcStatusException = convertToGrpcStatusException(grpcStatusCode, headers);\n+            return response.payloadBodyAndTrailers().ignoreElements()\n+                    .concat(grpcStatusException != null ? failed(grpcStatusException) : empty());\n         }\n-        return deserializer.deserialize(respHeaders, response.payloadBodyAndTrailers().map(o -> {\n-            if (o instanceof HttpHeaders) {\n-                // We have already checked for error in headers above, now we just check in trailers.\n-                GrpcStatusException ex = extractGrpcExceptionFromHeaders((HttpHeaders) o);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            } else if (!(o instanceof Buffer)) {\n-                throw new IllegalArgumentException(\"Unexpected payload type: \" + o.getClass());\n-            }\n-            return o;\n-        }).filter(o -> !(o instanceof HttpHeaders)).map(o -> (Buffer) o));\n+\n+        response.transformRaw(ENSURE_GRPC_STATUS_RECEIVED);\n+        return deserializer.deserialize(headers, response.payloadBodyAndTrailers()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3OTg5Mg=="}, "originalCommit": {"oid": "1f25afb8e4b007c694cc1bbdc66b3f508134df67"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTA3ODIzOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTozOTowM1rOFn94vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNTozOTowM1rOFn94vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ1MjczNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new GrpcStatus(INTERNAL, null, \"Response does not contain grpc-status code\")\n          \n          \n            \n                        throw new GrpcStatus(INTERNAL, null, \"Response does not contain \" + GRPC_STATUS_CODE_TRAILER + \" header or trailer.\")", "url": "https://github.com/apple/servicetalk/pull/934#discussion_r377452734", "createdAt": "2020-02-11T05:39:03Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -138,50 +150,56 @@ static void setStatus(final HttpHeaders trailers, final Throwable cause, final B\n \n     static <Resp> Publisher<Resp> validateResponseAndGetPayload(final StreamingHttpResponse response,\n                                                                 final HttpDeserializer<Resp> deserializer) {\n-        // In case of server error, gRPC may return only one HEADER frame with endStream=true. Our\n-        // HTTP1-based implementation translates them into response headers so we need to look for\n-        // the status in both headers and trailers. Since this is streaming response and we have the headers now, we\n-        // check for error here first. If we see trailers later in payloadBodyAndTrailers(), we will check for error\n-        // there.\n-        final HttpHeaders respHeaders = response.headers();\n-        GrpcStatusException grpcStatusException = extractGrpcExceptionFromHeaders(respHeaders);\n-        if (grpcStatusException != null) {\n-            return Publisher.failed(grpcStatusException);\n+        // In case of an empty response, gRPC-server may return only one HEADER frame with endStream=true. Our\n+        // HTTP1-based implementation translates them into response headers so we need to look for a grpc-status in both\n+        // headers and trailers. Since this is streaming response and we have the headers now, we check for the\n+        // grpc-status here first. If there is no grpc-status in headers, we look for it in trailers later.\n+        final HttpHeaders headers = response.headers();\n+        final GrpcStatusCode grpcStatusCode = extractGrpcStatusCodeFromHeaders(headers);\n+        if (grpcStatusCode != null) {\n+            final GrpcStatusException grpcStatusException = convertToGrpcStatusException(grpcStatusCode, headers);\n+            return response.payloadBodyAndTrailers().ignoreElements()\n+                    .concat(grpcStatusException != null ? failed(grpcStatusException) : empty());\n         }\n-        return deserializer.deserialize(respHeaders, response.payloadBodyAndTrailers().map(o -> {\n-            if (o instanceof HttpHeaders) {\n-                // We have already checked for error in headers above, now we just check in trailers.\n-                GrpcStatusException ex = extractGrpcExceptionFromHeaders((HttpHeaders) o);\n-                if (ex != null) {\n-                    throw ex;\n-                }\n-            } else if (!(o instanceof Buffer)) {\n-                throw new IllegalArgumentException(\"Unexpected payload type: \" + o.getClass());\n-            }\n-            return o;\n-        }).filter(o -> !(o instanceof HttpHeaders)).map(o -> (Buffer) o));\n+\n+        response.transformRaw(ENSURE_GRPC_STATUS_RECEIVED);\n+        return deserializer.deserialize(headers, response.payloadBodyAndTrailers()\n+                .filter(o -> !(o instanceof HttpHeaders)).map(o -> (Buffer) o));\n     }\n \n     static <Resp> Resp validateResponseAndGetPayload(final HttpResponse response,\n                                                      final HttpDeserializer<Resp> deserializer) {\n-        final HttpHeaders trailers = response.trailers();\n-        final HttpHeaders headers = response.headers();\n-        // In case of server error, gRPC may return only one HEADER frame with endStream=true. Our\n-        // HTTP1-based implementation translates them into response headers so we need to look for\n-        // the status in both headers and trailers.\n+        // In case of an empty response, gRPC-server may return only one HEADER frame with endStream=true. Our\n+        // HTTP1-based implementation translates them into response headers so we need to look for a grpc-status in both\n+        // headers and trailers.\n \n-        // We will try the trailers first as this is the most likely place to find the GRPC related headers.\n-        GrpcStatusException grpcStatusException = extractGrpcExceptionFromHeaders(trailers);\n-        if (grpcStatusException != null) {\n-            throw grpcStatusException;\n+        // We will try the trailers first as this is the most likely place to find the gRPC-related headers.\n+        final HttpHeaders trailers = response.trailers();\n+        GrpcStatusCode grpcStatusCode = extractGrpcStatusCodeFromHeaders(trailers);\n+        if (grpcStatusCode != null) {\n+            final GrpcStatusException grpcStatusException = convertToGrpcStatusException(grpcStatusCode, trailers);\n+            if (grpcStatusException != null) {\n+                throw grpcStatusException;\n+            }\n+            return response.payloadBody(deserializer);\n         }\n \n-        // There was no grpc-status in the trailers, so error may be in the headers.\n-        grpcStatusException = extractGrpcExceptionFromHeaders(headers);\n+        // There was no grpc-status in the trailers, so it must be in headers.\n+        ensureGrpcStatusReceived(response.headers());\n+        return response.payloadBody(deserializer);\n+    }\n+\n+    private static void ensureGrpcStatusReceived(final HttpHeaders headers) {\n+        final GrpcStatusCode statusCode = extractGrpcStatusCodeFromHeaders(headers);\n+        if (statusCode == null) {\n+            // This is a protocol violation as we expect to receive grpc-status.\n+            throw new GrpcStatus(INTERNAL, null, \"Response does not contain grpc-status code\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f25afb8e4b007c694cc1bbdc66b3f508134df67"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2842, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}