{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzMxNDg3", "number": 1114, "title": "Configure `TransportObserver` via `ConnectionFactory` on the client-side", "bodyText": "Motivation:\nHaving TransportObserver on ConnectionFactory#newConnection method gives\nusers more flexibility when they need to correlate prior events and a state\nwith observability events of new connections. It also allows them to choose\nfor which ResolvedAddresses they need an observer.\nModification:\n\nAdd TransportObserver as a second argument for\nConnectionFactory#newConnection;\nRemove #transportObserver(...) configuration method from all client builders;\nIntroduce TransportObserverConnectionFactoryFilter to simplify TransportObserver\nconfiguration for the client;\nUpdate code to use new ConnectionFactory API;\n\nResults:\nMore flexible approach for users to configure TransportObserver on the\nclient-side.", "createdAt": "2020-08-01T03:11:51Z", "url": "https://github.com/apple/servicetalk/pull/1114", "merged": true, "mergeCommit": {"oid": "c1e357107dee23141d766d1dd9c03eb49a5a9428"}, "closed": true, "closedAt": "2020-08-04T22:45:13Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6dWKwgH2gAyNDYwNzMxNDg3OjFjOWYxMzYyNmVkNmNiNmY3NDc5ODlkY2YxZjg3MTY2YTQ3MDUyOWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7uNN4gH2gAyNDYwNzMxNDg3OmQxMmY0ZGE3ZmM0ZWZiZjU2N2ExYzMzMDhkMDRhOGM3ODI0MjMxZDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/1c9f13626ed6cb6f747989dcf1f87166a470529c", "committedDate": "2020-08-01T00:05:09Z", "message": "Configure `TransportObserver` via `ConnectionFactory` on the client-side\n\nMotivation:\n\nHaving `TransportObserver` on `ConnectionFactory#newConnection` method gives\nusers more flexibility when they need to correlate prior events and a state\nwith observability events of new connections. It also allows them to choose\nfor which `ResolvedAddress`es they need an observer.\n\nModification:\n\n- Add `TransportObserver` as a second argument for\n`ConnectionFactory#newConnection`;\n- Remove `#transportObserver(...)` configuration method from all client builders;\n- Update code to use new `ConnectionFactory` API;\n\nResults:\n\nMore flexible approach for users to configure `TransportObserver` on the\nclient-side."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjg5NDUy", "url": "https://github.com/apple/servicetalk/pull/1114#pullrequestreview-460289452", "createdAt": "2020-08-03T19:36:03Z", "commit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozNjowM1rOG7GNwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTo0MToyMFrOG7GW-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMDk5NA==", "bodyText": "IIUC, expected usage is to add a ConnectionFactory for a client that introduces a TransportObserver for the call.\nWhat is the guidance for such factories if there is already an observer passed to them?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464620994", "createdAt": "2020-08-03T19:36:03Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "diffHunk": "@@ -31,7 +34,9 @@\n      * Creates and asynchronously returns a connection.\n      *\n      * @param address to connect.\n+     * @param observer {@link TransportObserver} that provides visibility into transport events associated with a new\n+     * connection.\n      * @return {@link Single} that emits the created connection.\n      */\n-    Single<C> newConnection(ResolvedAddress address);\n+    Single<C> newConnection(ResolvedAddress address, @Nullable TransportObserver observer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMTk0Nw==", "bodyText": "Instead of repeating the TransportObserver definition, just say {@link TransportObserver} for the newly created connections?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464621947", "createdAt": "2020-08-03T19:38:20Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "diffHunk": "@@ -31,7 +34,9 @@\n      * Creates and asynchronously returns a connection.\n      *\n      * @param address to connect.\n+     * @param observer {@link TransportObserver} that provides visibility into transport events associated with a new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMzM1NA==", "bodyText": "Add a comment why we are passing null here?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464623354", "createdAt": "2020-08-03T19:41:20Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -273,7 +273,7 @@ public void onComplete() {\n         }\n \n         // No connection was selected: create a new one\n-        return connectionFactory.newConnection(host.address)\n+        return connectionFactory.newConnection(host.address, null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2b9d244ac716dd72b0cf1b84161bea97cc33f36", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f2b9d244ac716dd72b0cf1b84161bea97cc33f36", "committedDate": "2020-08-03T20:41:18Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3864ad4a1031ca8a3dc4b1aa01c21553c87993", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/8a3864ad4a1031ca8a3dc4b1aa01c21553c87993", "committedDate": "2020-08-03T20:41:28Z", "message": "Fix javadoc warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8d32daefb0760c21895bb67879f9c14b9197e54", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a8d32daefb0760c21895bb67879f9c14b9197e54", "committedDate": "2020-08-03T20:44:39Z", "message": "Update copyright years"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/0e98ded1b654c0db6ea471ff72f3dd042f87701f", "committedDate": "2020-08-04T01:19:38Z", "message": "Add TransportObserverConnectionFactoryFilter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDA5MTUz", "url": "https://github.com/apple/servicetalk/pull/1114#pullrequestreview-461009153", "createdAt": "2020-08-04T17:10:38Z", "commit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxMDozOFrOG7ptMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxNzoxMVrOG7p8Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMjQ4MQ==", "bodyText": "requireNotNull?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465202481", "createdAt": "2020-08-04T17:10:38Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMzY1MA==", "bodyText": "If first and second both throw then because second is called from a finally block, the first exception is lost. An alternative is to add separate try-catch blocks for each observer which also extends generically to n observers.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465203650", "createdAt": "2020-08-04T17:12:41Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+    @Override\n+    public ConnectionObserver onNewConnection() {\n+        return new BiConnectionObserver(first.onNewConnection(), second.onNewConnection());\n+    }\n+\n+    private static final class BiConnectionObserver implements ConnectionObserver {\n+\n+        private final ConnectionObserver first;\n+        private final ConnectionObserver second;\n+\n+        private BiConnectionObserver(final ConnectionObserver first, final ConnectionObserver second) {\n+            this.first = first;\n+            this.second = second;\n+        }\n+\n+        @Override\n+        public void onDataRead(final int size) {\n+            try {\n+                first.onDataRead(size);\n+            } finally {\n+                second.onDataRead(size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNjI3NA==", "bodyText": "Is creating a TransportObserver per subscribe what we want semantically? It seems to be conflicting with the fact that the argument to newConnection() is a TransportObserver and not a factory.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465206274", "createdAt": "2020-08-04T17:17:11Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/TransportObserverConnectionFactoryFilter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.concurrent.api.ListenableAsyncCloseable;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import java.util.function.Function;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.api.Single.defer;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link ConnectionFactoryFilter} that configures a {@link TransportObserver} for new connections.\n+ *\n+ * @param <ResolvedAddress> The type of a resolved address that can be used for connecting.\n+ * @param <C> The type of connections created by the {@link ConnectionFactory} decorated by this filter.\n+ */\n+public final class TransportObserverConnectionFactoryFilter<ResolvedAddress, C extends ListenableAsyncCloseable>\n+        implements ConnectionFactoryFilter<ResolvedAddress, C> {\n+\n+    private final Function<ResolvedAddress, TransportObserver> observerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observer {@link TransportObserver} to use for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(final TransportObserver observer) {\n+        requireNonNull(observer);\n+        observerFactory = __ -> observer;\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observerFactory a factory to create a {@link TransportObserver} for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(\n+            final Function<ResolvedAddress, TransportObserver> observerFactory) {\n+        this.observerFactory = requireNonNull(observerFactory);\n+    }\n+\n+    @Override\n+    public ConnectionFactory<ResolvedAddress, C> create(final ConnectionFactory<ResolvedAddress, C> original) {\n+        return new DelegatingConnectionFactory<ResolvedAddress, C>(original) {\n+            @Override\n+            public Single<C> newConnection(final ResolvedAddress resolvedAddress,\n+                                           @Nullable final TransportObserver originalObserver) {\n+                return defer(() -> {\n+                    final TransportObserver newObserver = requireNonNull(observerFactory.apply(resolvedAddress));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b98e36bc4ab34ad58510b10b72c418047d3b4b8", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/6b98e36bc4ab34ad58510b10b72c418047d3b4b8", "committedDate": "2020-08-04T22:00:55Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d12f4da7fc4efbf567a1c3308d04a8c7824231d7", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/d12f4da7fc4efbf567a1c3308d04a8c7824231d7", "committedDate": "2020-08-04T22:17:41Z", "message": "BiTransportObserver requireNonNull"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3433, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}