{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NDU0NDQy", "number": 1123, "title": "Set the correct log level for wire logging and h2 frame logging", "bodyText": "Motivation:\nWhen enableWireLogging and h2 frameLogger are set on the builder we\nalways log at TRACE level regardless of what level the logging\nconfiguration specifies. The h2 frameLogger has conditional logic which\nlimits the amount of data logged for levels less than TRACE, and it is\ngenerally unexpected to log at a different level than configured by the\nuser.\nModifications:\n\nWhen Http2FrameLogger and LoggingHandler are created we should get the\nlog level from SL4J and pass the translated Netty LogLevel upon\nconstruction\n\nResult:\nDebug logging uses the same log level as configured by the user.", "createdAt": "2020-08-12T01:58:28Z", "url": "https://github.com/apple/servicetalk/pull/1123", "merged": true, "mergeCommit": {"oid": "26b4f60efcba3cb29d584a1837e3f9fdc8614b2b"}, "closed": true, "closedAt": "2020-09-11T02:14:17Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-Bl_JgFqTQ2NTU0MTUzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHjqPLgFqTQ4NjEyNDkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTQxNTMx", "url": "https://github.com/apple/servicetalk/pull/1123#pullrequestreview-465541531", "createdAt": "2020-08-12T02:00:46Z", "commit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjowMDo0NlrOG_PKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMjowMDo0NlrOG_PKdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MTkxMQ==", "bodyText": "this API was designed to avoid exposing SL4J types in our public API, at the cost of multiple logger lookups (one in this method, one done by Netty via InternalLoggerFactory).", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r468961911", "createdAt": "2020-08-12T02:00:46Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTkyMjgw", "url": "https://github.com/apple/servicetalk/pull/1123#pullrequestreview-465592280", "createdAt": "2020-08-12T05:02:16Z", "commit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTowMjoxNlrOG_R4Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwNTowMjoxNlrOG_R4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTAwNjM1NQ==", "bodyText": "sounds good to me, should not harm at the build time", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r469006355", "createdAt": "2020-08-12T05:02:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk2MTkxMQ=="}, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Mjk4MDMx", "url": "https://github.com/apple/servicetalk/pull/1123#pullrequestreview-466298031", "createdAt": "2020-08-12T21:42:49Z", "commit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo0Mjo0OVrOG_z5ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo0Mjo0OVrOG_z5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2Mzc0OQ==", "bodyText": "A behavior that is useful is to enable wire logging in code but disable it using logger levels. I think this will always enable wire logging if it is enabled in code, is that correct?", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r469563749", "createdAt": "2020-08-12T21:42:49Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTM5OTUy", "url": "https://github.com/apple/servicetalk/pull/1123#pullrequestreview-476939952", "createdAt": "2020-08-27T17:35:06Z", "commit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozNTowNlrOHIag6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNzozNTowNlrOHIag6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODU4NTA2Nw==", "bodyText": "As discussed in #1123 (comment) the logger config can disable logging. We should support it instead of throwing an exception.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478585067", "createdAt": "2020-08-27T17:35:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyLoggerUtils.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static io.netty.handler.logging.LogLevel.DEBUG;\n+import static io.netty.handler.logging.LogLevel.ERROR;\n+import static io.netty.handler.logging.LogLevel.INFO;\n+import static io.netty.handler.logging.LogLevel.TRACE;\n+import static io.netty.handler.logging.LogLevel.WARN;\n+\n+/**\n+ * Utility methods for {@link InternalLogger} related types.\n+ */\n+public final class NettyLoggerUtils {\n+    private NettyLoggerUtils() {\n+    }\n+\n+    /**\n+     * Translate the log level as determined by SL4J for the {@code loggerName} to Netty's {@link LogLevel} type.\n+     * @param loggerName The logger name to lookup.\n+     * @return Netty's {@link LogLevel} corresponding to the SL4J log level for {@code loggerName}.\n+     */\n+    public static LogLevel getNettyLogLevel(String loggerName) {\n+        final Logger logger = LoggerFactory.getLogger(loggerName);\n+        if (logger.isTraceEnabled()) {\n+            return TRACE;\n+        } else if (logger.isDebugEnabled()) {\n+            return DEBUG;\n+        } else if (logger.isInfoEnabled()) {\n+            return INFO;\n+        } else if (logger.isWarnEnabled()) {\n+            return WARN;\n+        } else if (logger.isErrorEnabled()) {\n+            return ERROR;\n+        }\n+        throw new IllegalArgumentException(\"unknown log level: \" + logger);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c7ae70963172ab183889c3ce6d31e14b788779", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/75c7ae70963172ab183889c3ce6d31e14b788779", "committedDate": "2020-08-27T17:45:22Z", "message": "Set the correct log level for wire logging and h2 frame logging\n\nMotivation:\nWhen enableWireLogging and h2 frameLogger are set on the builder we\nalways log at TRACE level regardless of what level the logging\nconfiguration specifies. The h2 frameLogger has conditional logic which\nlimits the amount of data logged for levels less than TRACE, and it is\ngenerally unexpected to log at a different level than configured by the\nuser.\n\nModifications:\n- When Http2FrameLogger and LoggingHandler are created we should get the\nlog level from SL4J and pass the translated Netty LogLevel upon\nconstruction\n\nResult:\nDebug logging uses the same log level as configured by the user."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8894e33beccddf27a5cf9ff384d4f8f41088efe0", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/8894e33beccddf27a5cf9ff384d4f8f41088efe0", "committedDate": "2020-08-27T18:21:47Z", "message": "modify logging config"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52a6888b755e441940913610228c3642b8e6aa44", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/52a6888b755e441940913610228c3642b8e6aa44", "committedDate": "2020-08-12T01:58:00Z", "message": "Set the correct log level for wire logging and h2 frame logging\n\nMotivation:\nWhen enableWireLogging and h2 frameLogger are set on the builder we\nalways log at TRACE level regardless of what level the logging\nconfiguration specifies. The h2 frameLogger has conditional logic which\nlimits the amount of data logged for levels less than TRACE, and it is\ngenerally unexpected to log at a different level than configured by the\nuser.\n\nModifications:\n- When Http2FrameLogger and LoggingHandler are created we should get the\nlog level from SL4J and pass the translated Netty LogLevel upon\nconstruction\n\nResult:\nDebug logging uses the same log level as configured by the user."}, "afterCommit": {"oid": "8894e33beccddf27a5cf9ff384d4f8f41088efe0", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/8894e33beccddf27a5cf9ff384d4f8f41088efe0", "committedDate": "2020-08-27T18:21:47Z", "message": "modify logging config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6647588ad19b40194b4c0a88dfd0bbdfc26248a", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/f6647588ad19b40194b4c0a88dfd0bbdfc26248a", "committedDate": "2020-08-27T18:30:55Z", "message": "add support for unmapped LogLevels"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2OTgxNDQ5", "url": "https://github.com/apple/servicetalk/pull/1123#pullrequestreview-476981449", "createdAt": "2020-08-27T18:34:03Z", "commit": {"oid": "f6647588ad19b40194b4c0a88dfd0bbdfc26248a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozNDowNFrOHIcfMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozNDowNFrOHIcfMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxNzM5NA==", "bodyText": "since there is no more strict requirement on the log level, we have an opportunity to simplify the examples. Log4j can be configured in many ways (filters, multiple appenders, using different loggers, etc.) and I don't think this is central to understanding servicetalk.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r478617394", "createdAt": "2020-08-27T18:34:04Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-examples/grpc/helloworld/src/main/resources/log4j2.xml", "diffHunk": "@@ -21,14 +21,6 @@\n     </Console>\n   </Appenders>\n   <Loggers>\n-    <!--\n-        This is an example of how to configure logging of wire events:\n-          1. Add a Logger with `TRACE` level;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6647588ad19b40194b4c0a88dfd0bbdfc26248a"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42dcd115214a266f69873d6f2a3cad5087048973", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/42dcd115214a266f69873d6f2a3cad5087048973", "committedDate": "2020-09-10T01:18:54Z", "message": "switch from ThresholdFilter to log level OFF"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDkwNzMz", "url": "https://github.com/apple/servicetalk/pull/1123#pullrequestreview-486090733", "createdAt": "2020-09-10T16:04:12Z", "commit": {"oid": "42dcd115214a266f69873d6f2a3cad5087048973"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTI0OTM2", "url": "https://github.com/apple/servicetalk/pull/1123#pullrequestreview-486124936", "createdAt": "2020-09-10T16:46:27Z", "commit": {"oid": "42dcd115214a266f69873d6f2a3cad5087048973"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0NjoyN1rOHP85Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjo0NjoyN1rOHP85Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4ODM2Ng==", "bodyText": "Just a suggestion; feel free to ignore.\nThis approach precludes dynamic log level manipulation for existing channels. I think we should always add the handler if user opts-in to it using the builder setting.", "url": "https://github.com/apple/servicetalk/pull/1123#discussion_r486488366", "createdAt": "2020-09-10T16:46:27Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/WireLoggingInitializer.java", "diffHunk": "@@ -34,11 +37,14 @@\n      * @param loggerName The name of the logger to log wire events.\n      */\n     public WireLoggingInitializer(final String loggerName) {\n-        loggingHandler = new LoggingHandler(loggerName, TRACE);\n+        LogLevel logLevel = getNettyLogLevel(loggerName);\n+        loggingHandler = logLevel != null ? new LoggingHandler(loggerName, logLevel) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dcd115214a266f69873d6f2a3cad5087048973"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3447, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}