{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjY2MTI1", "number": 1000, "title": "Completable#concatWith(Completable) remove atomic operation", "bodyText": "Motivation:\nCompletable#concatWith(Completable) currently uses an atomic operation to transition subscribe() from the first Completable to the second. However this is done in the contex of a Subscriber and the events should be sequenced in a serial fashion.\nModifications:\n\nCompletable#concatWith(Completable) to use a regular variable instead of volatile/atomic operation to switch subscribers\n\nResult:\nLess atomic operations in Completable#concatWith(Completable).", "createdAt": "2020-04-03T16:20:33Z", "url": "https://github.com/apple/servicetalk/pull/1000", "merged": true, "mergeCommit": {"oid": "10ded569b7aa2b1d44cb789609b14212007b87b9"}, "closed": true, "closedAt": "2020-04-03T23:07:54Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUDXk1AH2gAyMzk4MjY2MTI1OjAxNWVkNzMyOGE5MGZkOWY3ODE3OGQ3MjNlNzY2MTc4ZWEyMTdlOGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcUIaiwAFqTM4NzYwOTgzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "015ed7328a90fd9f78178d723e766178ea217e8f", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/015ed7328a90fd9f78178d723e766178ea217e8f", "committedDate": "2020-04-03T16:20:02Z", "message": "Completable#concatWith(Completable) remove atomic operation\n\nMotivation:\nCompletable#concatWith(Completable) currently uses an atomic operation to transition subscribe() from the first Completable to the second. However this is done in the contex of a Subscriber and the events should be sequenced in a [serial](https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.3) fashion.\n\nModifications:\n- Completable#concatWith(Completable) to use a regular variable instead of volatile/atomic operation to switch subscribers\n\nResult:\nLess atomic operations in Completable#concatWith(Completable)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDE4NzIz", "url": "https://github.com/apple/servicetalk/pull/1000#pullrequestreview-387418723", "createdAt": "2020-04-03T16:45:56Z", "commit": {"oid": "015ed7328a90fd9f78178d723e766178ea217e8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NTo1NlrOGAdohg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjo0NTo1NlrOGAdohg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEzODY5NA==", "bodyText": "This is an interesting one.\nWe are using the same Subscriber instance across different sources. RS spec mentions that all methods of a Subscriber must be invoked serially(Rule 1.3) and a Subscriber should ensure delivery of signals happens-before processing of signals(Rule 2.11) however, there is no mention of a rule where subscribe() should happen-before delivery of signals to the Subscriber.\nSo, here there is nothing guaranteeing from the spec that their is a memory barrier between call to next.subscribeInternal(this) and onComplete() from the next source. So, it may be that we will see nextSubscribed as false and subscribe again.\nInterestingly I had this conversation before but it wasn't clear whether a rule is required to be added to the spec or existing rules cover this case. So \ud83c\udf7f \ud83d\ude04", "url": "https://github.com/apple/servicetalk/pull/1000#discussion_r403138694", "createdAt": "2020-04-03T16:45:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/CompletableConcatWithCompletable.java", "diffHunk": "@@ -63,14 +62,11 @@ protected void handleSubscribe(Subscriber subscriber, SignalOffloader offloader,\n     }\n \n     private static final class ConcatWithSubscriber implements Subscriber {\n-        private static final AtomicIntegerFieldUpdater<ConcatWithSubscriber> subscribedToNextUpdater =\n-                AtomicIntegerFieldUpdater.newUpdater(ConcatWithSubscriber.class, \"subscribedToNext\");\n         private final Subscriber target;\n         private final Completable next;\n         @Nullable\n         private SequentialCancellable sequentialCancellable;\n-        @SuppressWarnings(\"unused\")\n-        private volatile int subscribedToNext;\n+        private boolean nextSubscribed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "015ed7328a90fd9f78178d723e766178ea217e8f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjA5ODMx", "url": "https://github.com/apple/servicetalk/pull/1000#pullrequestreview-387609831", "createdAt": "2020-04-03T22:12:48Z", "commit": {"oid": "015ed7328a90fd9f78178d723e766178ea217e8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3577, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}