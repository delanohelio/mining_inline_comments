{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTA0NDU1", "number": 1124, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1ODowMFrOEX1wLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1ODowMFrOEX1wLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDMzMzg4OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ObservabilityProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzo1ODowMFrOG_20YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMTo1Mjo0MFrOHBG5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTYxNg==", "bodyText": "I do not quite understand the reasoning behind this class. connectionObserver and handshakeObserver references are temporary, i.e. they can only be retrieved once which makes the contract very error prone and not very different than the connection attribute approach. My hope was that we can be explicit in contract while passing these objects between classes, can we try doing that?", "url": "https://github.com/apple/servicetalk/pull/1124#discussion_r469611616", "createdAt": "2020-08-12T23:58:00Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ObservabilityProvider.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A helper class which allows sharing observers between different layers and handlers.\n+ */\n+public final class ObservabilityProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1598de173abdadbe4c8955edb6635def81e82c63"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyMzYyMQ==", "bodyText": "Updated according to the approach we discussed offline. Looks a lot better now!\nI will kill SECURITY_HANDSHAKE_OBSERVER in a follow-up PR.\nWill keep ChannelCloseUtils here, because it's related to the ConnectionObserver and there was a bug in tests that is fixed now.", "url": "https://github.com/apple/servicetalk/pull/1124#discussion_r470923621", "createdAt": "2020-08-15T01:52:40Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/ObservabilityProvider.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.netty.internal;\n+\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A helper class which allows sharing observers between different layers and handlers.\n+ */\n+public final class ObservabilityProvider {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYxMTYxNg=="}, "originalCommit": {"oid": "1598de173abdadbe4c8955edb6635def81e82c63"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2538, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}