{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDc4MDA1", "number": 932, "title": "gRPC filters override configured execution strategy for the route", "bodyText": "Motivation:\nWhen users append a service filter using ServiceFactory, it\nreconstructs the GrpcService interface from registered routes,\nwraps it with the filter, and re-registers the service again as\nindependent routes. This logic does not preserve the execution\nstrategy that was used to register the original route and it\nuses the default strategy for a route.\nModifications:\n\nSave the route execution strategy if it was configured for the\noriginal route;\nUse the saved execution strategy when we re-register filtered\nroutes;\nAdd tests to verify the execution strategy configuration when\nusers apply a filter;\nAdd tests to verify grpc router does not extract execution strategy\nannotations from filters;\nClose GrpcPayloadWriter in the conversion layer from\nBlockingStreamingRoute to StreamingRoute, because users of\nBlockingRequestStreamingRoute does not have access to it;\n\nResult:\ngRPC filters do not override configured execution strategy for\nthe route.", "createdAt": "2020-02-04T22:16:49Z", "url": "https://github.com/apple/servicetalk/pull/932", "merged": true, "mergeCommit": {"oid": "b4413a126f5718b30ec4877cbc057c2599f543dc"}, "closed": true, "closedAt": "2020-02-07T23:59:01Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcA4Od1AH2gAyMzcxMDc4MDA1OjMzOWEyYjdiOGQzMzVjMGUwZDM5NTU2YTRlYmUyMmNlZTdlMGZlZTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCFGY1AFqTM1NTQwODgwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "339a2b7b8d335c0e0d39556a4ebe22cee7e0fee9", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/339a2b7b8d335c0e0d39556a4ebe22cee7e0fee9", "committedDate": "2020-02-04T02:36:34Z", "message": "gRPC filters override configured execution strategy for the route\n\nMotivation:\n\nWhen users append a service filter using `ServiceFactory`, it\nreconstructs the `GrpcService` interface from registered routes,\nwraps it with the filter, and re-registers the service again as\nan independent routes. This logic does not preserve the execution\nstrategy that was used to register the original route and it\nuses the default strategy for a route.\n\nModifications:\n\n- Save the route execution strategy if it was configured for the\noriginal route;\n- Use saved execution strategy when we re-register filtered routes;\n- Add tests to verify the execution strategy configuration when\nusers apply a filter;\n- Close `GrpcPayloadWriter` in the conversion layer from\n`BlockingStreamingRoute` to `StreamingRoute`, because users of\n`BlockingRequestStreamingRoute` does not have access to it;\n\nResult:\n\ngRPC filters does not override configured execution strategy for\nthe route."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/429aebc7d787241a20b08683ba29e7fab2578fcd", "committedDate": "2020-02-04T02:36:40Z", "message": "Verify `RouteExecutionStrategy` annotation is ignored on the service filter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzQ1OTEx", "url": "https://github.com/apple/servicetalk/pull/932#pullrequestreview-353345911", "createdAt": "2020-02-04T22:24:38Z", "commit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoyNDozOVrOFllmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoyNDozOVrOFllmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1Nzc0NA==", "bodyText": "@NiteshKant should we account for users that may try-catch routes registration? If they register the same path 2+ times with different route implementations, we will override the strategy here, but later we throw an exception saying that this path was already registered. If users try-catch this exception, internal state will be modified. I can move this executionStrategies.put after we register a route if necessary.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r374957744", "createdAt": "2020-02-04T22:24:39Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);\n+        if (saved != NULL) {\n+            return saved;\n+        }\n+        final GrpcExecutionStrategy computed = getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz,\n+                strategyFactory, errors, noOffloadsStrategy());\n+        // Save computed value even if it's null to prevent analysing annotations on a service filter class\n+        executionStrategies.put(path, computed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTE2OTYx", "url": "https://github.com/apple/servicetalk/pull/932#pullrequestreview-353916961", "createdAt": "2020-02-05T17:49:32Z", "commit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo0OTozM1rOFmBOiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNjo1OFrOFmCF_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxMDMxNQ==", "bodyText": "If onError() throws from the above catch block and then grpcPayloadWriter.close() also throws, concurrentTerminalSubscriber will ignore this call. You can instead use concurrentTerminalSubscriber.processOnError() which returns false if it did not deliver the error, in which case we should log.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375410315", "createdAt": "2020-02-05T17:49:33Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouteConversions.java", "diffHunk": "@@ -107,30 +107,38 @@ public Completable closeAsyncGracefully() {\n                 return new Publisher<Resp>() {\n                     @Override\n                     protected void handleSubscribe(final Subscriber<? super Resp> subscriber) {\n-                        ConnectablePayloadWriter<Resp> connectablePayloadWriter = new ConnectablePayloadWriter<>();\n-                        Publisher<Resp> pub = connectablePayloadWriter.connect();\n-                        Subscriber<? super Resp> concurrentTerminalSubscriber =\n+                        final ConnectablePayloadWriter<Resp> connectablePayloadWriter =\n+                                new ConnectablePayloadWriter<>();\n+                        final Publisher<Resp> pub = connectablePayloadWriter.connect();\n+                        final Subscriber<? super Resp> concurrentTerminalSubscriber =\n                                 new ConcurrentTerminalSubscriber<>(subscriber, false);\n                         toSource(pub).subscribe(concurrentTerminalSubscriber);\n+                        final GrpcPayloadWriter<Resp> grpcPayloadWriter = new GrpcPayloadWriter<Resp>() {\n+                            @Override\n+                            public void write(final Resp resp) throws IOException {\n+                                connectablePayloadWriter.write(resp);\n+                            }\n+\n+                            @Override\n+                            public void close() throws IOException {\n+                                connectablePayloadWriter.close();\n+                            }\n+\n+                            @Override\n+                            public void flush() throws IOException {\n+                                connectablePayloadWriter.flush();\n+                            }\n+                        };\n                         try {\n-                            original.handle(ctx, request.toIterable(), new GrpcPayloadWriter<Resp>() {\n-                                @Override\n-                                public void write(final Resp resp) throws IOException {\n-                                    connectablePayloadWriter.write(resp);\n-                                }\n-\n-                                @Override\n-                                public void close() throws IOException {\n-                                    connectablePayloadWriter.close();\n-                                }\n-\n-                                @Override\n-                                public void flush() throws IOException {\n-                                    connectablePayloadWriter.flush();\n-                                }\n-                            });\n+                            original.handle(ctx, request.toIterable(), grpcPayloadWriter);\n                         } catch (Throwable t) {\n                             concurrentTerminalSubscriber.onError(t);\n+                        } finally {\n+                            try {\n+                                grpcPayloadWriter.close();\n+                            } catch (IOException e) {\n+                                concurrentTerminalSubscriber.onError(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNDY1MA==", "bodyText": "It seems like it is trivial to create a merged map for strategies from all routes instead of ignoring them. It is better to not make exceptions here and make sure we have strategies when defined.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375414650", "createdAt": "2020-02-05T17:57:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -159,7 +171,9 @@ public Completable closeAsyncGracefully() {\n             builders[i] = allRoutes[i].routeBuilder;\n             errors.addAll(allRoutes[i].errors);\n         }\n-        return new GrpcRoutes<GrpcService>(GrpcRouter.Builder.merge(builders), errors) {\n+        // At the time of merging all GrpcRoutes together we don't need an executionStrategies map and can pass an empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNzcwMA==", "bodyText": "Just use get() and eliminate defining NULL as default?\nfinal GrpcExecutionStrategy saved = executionStrategies.get(path);\nif (saved != null) {\n    return saved;\n}", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375417700", "createdAt": "2020-02-05T18:03:38Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNDUwOA==", "bodyText": "but later we throw an exception saying that this path was already registered.\n\n\nDid you mean that we will ignore the strategy for a subsequent registration? We are not using executionStrategies to check for duplicate registration, are we?\nI think we should account for cases when a registration exception is caught and retried unless we have a strong reason to believe that is invalid. AFAIR, this is required only for disallowing filters to specify the strategy annotation, rite? I have not thought of that case as to whether it is good or bad, so if we need special code to disallow it, lets refrain from doing that for now and have \"behavior when strategy annotation is defined on filters is undefined\" as our answer.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375424508", "createdAt": "2020-02-05T18:16:58Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);\n+        if (saved != NULL) {\n+            return saved;\n+        }\n+        final GrpcExecutionStrategy computed = getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz,\n+                strategyFactory, errors, noOffloadsStrategy());\n+        // Save computed value even if it's null to prevent analysing annotations on a service filter class\n+        executionStrategies.put(path, computed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1Nzc0NA=="}, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae048c8fc858df0de1ffde7168877ff1330a7b82", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/ae048c8fc858df0de1ffde7168877ff1330a7b82", "committedDate": "2020-02-06T01:35:49Z", "message": "Merge remote-tracking branch 'upstream/master' into grpc-filters-es"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2e87e92ad5eee48d099f023e44ce91c3a33f6e8", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a2e87e92ad5eee48d099f023e44ce91c3a33f6e8", "committedDate": "2020-02-06T01:51:14Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fbb4fbbff1808d58bb6d9b5cee6d150140c40e3", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/0fbb4fbbff1808d58bb6d9b5cee6d150140c40e3", "committedDate": "2020-02-06T02:09:48Z", "message": "Save execution strategy after we verified route was not registered twice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5820d3310904811ba595fefc4ac5c84a0639f349", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/5820d3310904811ba595fefc4ac5c84a0639f349", "committedDate": "2020-02-06T02:23:25Z", "message": "Move executionStrategies map from GrpcRoutes to GrpcRouter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f32710c634351a6e08f374fce548947454756ed0", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f32710c634351a6e08f374fce548947454756ed0", "committedDate": "2020-02-06T02:41:26Z", "message": "Revert unnecessary modifications"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTY4OTY5", "url": "https://github.com/apple/servicetalk/pull/932#pullrequestreview-354168969", "createdAt": "2020-02-06T02:33:02Z", "commit": {"oid": "5820d3310904811ba595fefc4ac5c84a0639f349"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjozMzowMlrOFmNn3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoyOToxMFrOFmpK3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMzQwNA==", "bodyText": "nit\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                LOGGER.error(\"Cannot close GrpcPayloadWriter\", e);\n          \n          \n            \n                                                LOGGER.error(\"Failed to close GrpcPayloadWriter\", e);", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375613404", "createdAt": "2020-02-06T02:33:02Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouteConversions.java", "diffHunk": "@@ -137,7 +143,9 @@ public void flush() throws IOException {\n                             try {\n                                 grpcPayloadWriter.close();\n                             } catch (IOException e) {\n-                                concurrentTerminalSubscriber.onError(e);\n+                                if (!concurrentTerminalSubscriber.processOnError(e)) {\n+                                    LOGGER.error(\"Cannot close GrpcPayloadWriter\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5820d3310904811ba595fefc4ac5c84a0639f349"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1OTE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            executionStrategies.putAll(executionStrategies);\n          \n          \n            \n                            executionStrategies.putAll(builder.executionStrategies);\n          \n      \n    \n    \n  \n\nIf it is simple, add a test to verify, else it is OK.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376059174", "createdAt": "2020-02-06T20:16:40Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -196,18 +200,25 @@ RouteProviders drainRoutes() {\n             return new RouteProviders(allRoutes);\n         }\n \n+        GrpcExecutionStrategy alreadyRegisteredExecutionStrategy(final String path,\n+                                                                 final GrpcExecutionStrategy defaultValue) {\n+            return executionStrategies.getOrDefault(path, defaultValue);\n+        }\n+\n         static GrpcRouter.Builder merge(final GrpcRouter.Builder... builders) {\n             final Map<String, RouteProvider> routes = new HashMap<>();\n             final Map<String, RouteProvider> streamingRoutes = new HashMap<>();\n             final Map<String, RouteProvider> blockingRoutes = new HashMap<>();\n             final Map<String, RouteProvider> blockingStreamingRoutes = new HashMap<>();\n+            final Map<String, GrpcExecutionStrategy> executionStrategies = new HashMap<>();\n             for (Builder builder : builders) {\n                 mergeRoutes(routes, builder.routes);\n                 mergeRoutes(streamingRoutes, builder.streamingRoutes);\n                 mergeRoutes(blockingRoutes, builder.blockingRoutes);\n                 mergeRoutes(blockingStreamingRoutes, builder.blockingStreamingRoutes);\n+                executionStrategies.putAll(executionStrategies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2MTI4MA==", "bodyText": "Rename alreadyRegisteredExecutionStrategy => executionStrategyFor()\nIt does not seem like \"already registered\" is providing any additional value here.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376061280", "createdAt": "2020-02-06T20:21:24Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -196,18 +200,25 @@ RouteProviders drainRoutes() {\n             return new RouteProviders(allRoutes);\n         }\n \n+        GrpcExecutionStrategy alreadyRegisteredExecutionStrategy(final String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA==", "bodyText": "null executionStrategy has no semantic meaning from a user point of view. We use it as a short-cut internally to avoid method overloads. If we only add non-null strategy for a path in GrpcRouter methods, can we simplify this as null value meaning no strategy is defined?", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376064734", "createdAt": "2020-02-06T20:29:10Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0cc9f70c83e8452835a5845f662daa3431782aa", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/b0cc9f70c83e8452835a5845f662daa3431782aa", "committedDate": "2020-02-06T22:14:54Z", "message": "Address comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd575fdf701a6da07743d95068edec6df9525b6f", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/fd575fdf701a6da07743d95068edec6df9525b6f", "committedDate": "2020-02-07T16:58:48Z", "message": "Use `boolean` flag instead of dummy `NULL` object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "385b321e9c7e204508e91849def96dba06e3ad04", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/385b321e9c7e204508e91849def96dba06e3ad04", "committedDate": "2020-02-07T18:39:34Z", "message": "Revert \"Use `boolean` flag instead of dummy `NULL` object\"\n\nThis reverts commit fd575fdf701a6da07743d95068edec6df9525b6f."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDA4ODA3", "url": "https://github.com/apple/servicetalk/pull/932#pullrequestreview-355408807", "createdAt": "2020-02-07T20:10:26Z", "commit": {"oid": "385b321e9c7e204508e91849def96dba06e3ad04"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3264, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}