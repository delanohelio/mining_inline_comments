{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NDgxODYw", "number": 1150, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowNjozMlrOEitIBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowODozMlrOEitJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODI2MzczOnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/StreamingHttpServiceAsyncContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowNjozMlrOHQvIqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowNjozMlrOHQvIqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMTUyOQ==", "bodyText": "This can be simplified to:\nreturn succeeded(factory.internalServerError().payloadBody(from(current.toString()), textSerializer()));", "url": "https://github.com/apple/servicetalk/pull/1150#discussion_r487311529", "createdAt": "2020-09-11T22:06:32Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/StreamingHttpServiceAsyncContextTest.java", "diffHunk": "@@ -84,15 +87,24 @@ protected ServerContext serverWithEmptyAsyncContextService(HttpServerBuilder ser\n     }\n \n     private static StreamingHttpService newEmptyAsyncContextService() {\n+        // The service should get an empty AsyncContext regardless of what is done outside the service.\n+        // There are utilities that may be accessed in a static context or before service initialization that\n+        // shouldn't pollute the service's AsyncContext.\n+        AsyncContext.current().put(K1, \"value\");\n+\n         return (ctx, request, factory) -> {\n             request.payloadBodyAndTrailers().ignoreElements().subscribe();\n \n-            if (!AsyncContext.isEmpty()) {\n-                return succeeded(factory.internalServerError());\n+            AsyncContextMap current = AsyncContext.current();\n+            if (!current.isEmpty()) {\n+                StreamingHttpResponse response = factory.internalServerError();\n+                return succeeded(response.payloadBody(textSerializer()\n+                        .serialize(response.headers(), from(current.toString()),\n+                                ctx.executionContext().bufferAllocator())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "159008b0bb55b04a361a8a5e7b11c279257e5ab7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODI2Nzg3OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/StreamingHttpServiceAsyncContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowODozMlrOHQvLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMjowODozMlrOHQvLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMxMjE0OA==", "bodyText": "Consider testing that <K1, \"value\"> is still present for the main thread after server started and the request complete.", "url": "https://github.com/apple/servicetalk/pull/1150#discussion_r487312148", "createdAt": "2020-09-11T22:08:32Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/StreamingHttpServiceAsyncContextTest.java", "diffHunk": "@@ -84,15 +87,24 @@ protected ServerContext serverWithEmptyAsyncContextService(HttpServerBuilder ser\n     }\n \n     private static StreamingHttpService newEmptyAsyncContextService() {\n+        // The service should get an empty AsyncContext regardless of what is done outside the service.\n+        // There are utilities that may be accessed in a static context or before service initialization that\n+        // shouldn't pollute the service's AsyncContext.\n+        AsyncContext.current().put(K1, \"value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "159008b0bb55b04a361a8a5e7b11c279257e5ab7"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2569, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}