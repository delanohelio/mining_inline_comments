{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTc5OTc1", "number": 955, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDozODo0OFrODk3hlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMjoyOFrODlgmQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTg1MDQ2OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcServiceContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDozODo0OFrOFxbtxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozMjoxNVrOFx4wJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3ODYyOA==", "bodyText": "Should we make GrpcProtocol public? There is no additional info (like version or something else) except the name.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387378628", "createdAt": "2020-03-04T00:38:48Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcServiceContext.java", "diffHunk": "@@ -64,6 +65,11 @@ public GrpcExecutionContext executionContext() {\n         return connectionContext.socketOption(option);\n     }\n \n+    @Override\n+    public Protocol protocol() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2767eebba053272f9b196be4d29cdfbeea22cd15"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NDM3Mg==", "bodyText": "As gRPC is a layered application protocol, I think it is valuable to provide the underlying protocol (HTTP/1/2/3) information. We can either nest Protocol:\nGrpcProtocol#httpProtocol()\nor just create top level constants: GrpcProtocol#GRPC_OVER_HTTP_1, GrpcProtocol#GRPC_OVER_HTTP_2, etc\nI have a slight preference for top-level constants.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387854372", "createdAt": "2020-03-04T18:32:15Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/DefaultGrpcServiceContext.java", "diffHunk": "@@ -64,6 +65,11 @@ public GrpcExecutionContext executionContext() {\n         return connectionContext.socketOption(option);\n     }\n \n+    @Override\n+    public Protocol protocol() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM3ODYyOA=="}, "originalCommit": {"oid": "2767eebba053272f9b196be4d29cdfbeea22cd15"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjc5Njc2OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/AlpnClientAndServerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowOTowMlrOFx3_Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0MTo0OVrOFx7D3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MTg5MQ==", "bodyText": "nit: static imports", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387841891", "createdAt": "2020-03-04T18:09:02Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/AlpnClientAndServerTest.java", "diffHunk": "@@ -88,19 +88,19 @@ public AlpnClientAndServerTest(List<String> serverSideProtocols,\n             \"serverAlpnProtocols={0}, clientAlpnProtocols={1}, expectedProtocol={2}, expectedExceptionType={3}\")\n     public static Collection<Object[]> clientExecutors() {\n         return asList(new Object[][] {\n-                {asList(HTTP_2, HTTP_1_1), asList(HTTP_2, HTTP_1_1), H2ToStH1Utils.HTTP_2_0, null},\n-                {asList(HTTP_2, HTTP_1_1), asList(HTTP_1_1, HTTP_2), H2ToStH1Utils.HTTP_2_0, null},\n-                {asList(HTTP_2, HTTP_1_1), singletonList(HTTP_2), H2ToStH1Utils.HTTP_2_0, null},\n+                {asList(HTTP_2, HTTP_1_1), asList(HTTP_2, HTTP_1_1), HttpProtocolVersion.HTTP_2_0, null},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MjE5MQ==", "bodyText": "I use static imports for AlpnIds for lists. Because of the name conflicts I can not also use static imports for HttpProtocolVersion.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387892191", "createdAt": "2020-03-04T19:41:49Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/AlpnClientAndServerTest.java", "diffHunk": "@@ -88,19 +88,19 @@ public AlpnClientAndServerTest(List<String> serverSideProtocols,\n             \"serverAlpnProtocols={0}, clientAlpnProtocols={1}, expectedProtocol={2}, expectedExceptionType={3}\")\n     public static Collection<Object[]> clientExecutors() {\n         return asList(new Object[][] {\n-                {asList(HTTP_2, HTTP_1_1), asList(HTTP_2, HTTP_1_1), H2ToStH1Utils.HTTP_2_0, null},\n-                {asList(HTTP_2, HTTP_1_1), asList(HTTP_1_1, HTTP_2), H2ToStH1Utils.HTTP_2_0, null},\n-                {asList(HTTP_2, HTTP_1_1), singletonList(HTTP_2), H2ToStH1Utils.HTTP_2_0, null},\n+                {asList(HTTP_2, HTTP_1_1), asList(HTTP_2, HTTP_1_1), HttpProtocolVersion.HTTP_2_0, null},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MTg5MQ=="}, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgwMDU0OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/ConnectionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxMDoxNFrOFx4B3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxMDoxNFrOFx4B3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0MjUyNA==", "bodyText": "that represents a network connection. => for a connection\nAs the context may not represent the entire connection.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387842524", "createdAt": "2020-03-04T18:10:14Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/ConnectionContext.java", "diffHunk": "@@ -24,7 +24,7 @@\n import javax.net.ssl.SSLSession;\n \n /**\n- * A service execution context.\n+ * A context that represents a network connection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgyMTEwOnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/Protocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxNjozOVrOFx4PPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoxNjozOVrOFx4PPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0NTk0OA==", "bodyText": "I would suggest moving this as an inner interface of ConnectionContext as this is for informational purpose returned from ConnectionContext.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387845948", "createdAt": "2020-03-04T18:16:39Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/Protocol.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.transport.api;\n+\n+/**\n+ * Provides information about the network protocol.\n+ */\n+public interface Protocol {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjgzNTEzOnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/ConnectionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyMDo1MlrOFx4YCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyMDo1MlrOFx4YCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0ODIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Get the protocol information for this {@link ConnectionContext}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return the protocol information for this {@link ConnectionContext}.\n          \n          \n            \n                 * Returns the {@link Protocol} for this {@link ConnectionContext}.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @return The {@link Protocol} for this {@link ConnectionContext}.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387848202", "createdAt": "2020-03-04T18:20:52Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/ConnectionContext.java", "diffHunk": "@@ -72,4 +72,11 @@\n      */\n     @Nullable\n     <T> T socketOption(SocketOption<T> option);\n+\n+    /**\n+     * Get the protocol information for this {@link ConnectionContext}.\n+     *\n+     * @return the protocol information for this {@link ConnectionContext}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjg0NjQyOnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ConnectionContextProtocolTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODoyNDowOVrOFx4fBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0NTo0M1rOFx7MEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTk5MQ==", "bodyText": "nit: static import here and below for HttpClients.forSingleAddress", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387849991", "createdAt": "2020-03-04T18:24:09Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ConnectionContextProtocolTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.http.api.BlockingHttpClient;\n+import io.servicetalk.http.api.BlockingHttpConnection;\n+import io.servicetalk.http.api.HttpProtocolConfig;\n+import io.servicetalk.http.api.HttpProtocolVersion;\n+import io.servicetalk.http.api.HttpServerBuilder;\n+import io.servicetalk.http.api.SingleAddressHttpClientBuilder;\n+import io.servicetalk.test.resources.DefaultTestCerts;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.net.InetSocketAddress;\n+\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@RunWith(Parameterized.class)\n+public class ConnectionContextProtocolTest {\n+\n+    private enum Config {\n+\n+        HTTP_1_1(new HttpProtocolConfig[]{h1Default()}, false, HttpProtocolVersion.HTTP_1_1),\n+        HTTP_2_0(new HttpProtocolConfig[]{h2Default()}, false, HttpProtocolVersion.HTTP_2_0),\n+        SECURE_HTTP_1_1(new HttpProtocolConfig[]{h1Default()}, true, HttpProtocolVersion.HTTP_1_1),\n+        SECURE_HTTP_2_0(new HttpProtocolConfig[]{h2Default()}, true, HttpProtocolVersion.HTTP_2_0),\n+        ALPN_PREFER_HTTP_1_1(new HttpProtocolConfig[]{h1Default(), h2Default()}, true,\n+                HttpProtocolVersion.HTTP_1_1),\n+        ALPN_PREFER_HTTP_2_0(new HttpProtocolConfig[]{h2Default(), h1Default()}, true,\n+                HttpProtocolVersion.HTTP_2_0);\n+\n+        final HttpProtocolConfig[] protocols;\n+        final boolean secure;\n+        final HttpProtocolVersion expectedProtocol;\n+\n+        Config(HttpProtocolConfig[] protocols, boolean secure, HttpProtocolVersion expectedProtocol) {\n+            this.protocols = protocols;\n+            this.secure = secure;\n+            this.expectedProtocol = expectedProtocol;\n+        }\n+    }\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final Config config;\n+\n+    public ConnectionContextProtocolTest(Config config) {\n+        this.config = config;\n+    }\n+\n+    @Parameters(name = \"config={0}\")\n+    public static Object[] data() {\n+        return Config.values();\n+    }\n+\n+    @Test\n+    public void testProtocol() throws Exception {\n+        try (ServerContext serverContext = startServer(config);\n+             BlockingHttpClient client = newClient(serverContext, config);\n+             BlockingHttpConnection connection = client.reserveConnection(client.get(\"/\"))) {\n+\n+            assertThat(\"Client-side connection protocol does not match expected value\",\n+                    connection.connectionContext().protocol(), equalTo(config.expectedProtocol));\n+            assertThat(\"Server-side connection protocol does not match expected value\",\n+                    connection.request(connection.get(\"/\")).payloadBody(textDeserializer()),\n+                    equalTo(config.expectedProtocol.name()));\n+        }\n+    }\n+\n+    private static <T> ServerContext startServer(Config config) throws Exception {\n+        final HttpServerBuilder builder = HttpServers.forAddress(localAddress(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5NDI4OQ==", "bodyText": "We do not use static imports for HttpServers/HttpClients in tests. I will keep it consistent with other test classes.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387894289", "createdAt": "2020-03-04T19:45:43Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ConnectionContextProtocolTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.http.api.BlockingHttpClient;\n+import io.servicetalk.http.api.BlockingHttpConnection;\n+import io.servicetalk.http.api.HttpProtocolConfig;\n+import io.servicetalk.http.api.HttpProtocolVersion;\n+import io.servicetalk.http.api.HttpServerBuilder;\n+import io.servicetalk.http.api.SingleAddressHttpClientBuilder;\n+import io.servicetalk.test.resources.DefaultTestCerts;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.net.InetSocketAddress;\n+\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+\n+@RunWith(Parameterized.class)\n+public class ConnectionContextProtocolTest {\n+\n+    private enum Config {\n+\n+        HTTP_1_1(new HttpProtocolConfig[]{h1Default()}, false, HttpProtocolVersion.HTTP_1_1),\n+        HTTP_2_0(new HttpProtocolConfig[]{h2Default()}, false, HttpProtocolVersion.HTTP_2_0),\n+        SECURE_HTTP_1_1(new HttpProtocolConfig[]{h1Default()}, true, HttpProtocolVersion.HTTP_1_1),\n+        SECURE_HTTP_2_0(new HttpProtocolConfig[]{h2Default()}, true, HttpProtocolVersion.HTTP_2_0),\n+        ALPN_PREFER_HTTP_1_1(new HttpProtocolConfig[]{h1Default(), h2Default()}, true,\n+                HttpProtocolVersion.HTTP_1_1),\n+        ALPN_PREFER_HTTP_2_0(new HttpProtocolConfig[]{h2Default(), h1Default()}, true,\n+                HttpProtocolVersion.HTTP_2_0);\n+\n+        final HttpProtocolConfig[] protocols;\n+        final boolean secure;\n+        final HttpProtocolVersion expectedProtocol;\n+\n+        Config(HttpProtocolConfig[] protocols, boolean secure, HttpProtocolVersion expectedProtocol) {\n+            this.protocols = protocols;\n+            this.secure = secure;\n+            this.expectedProtocol = expectedProtocol;\n+        }\n+    }\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final Config config;\n+\n+    public ConnectionContextProtocolTest(Config config) {\n+        this.config = config;\n+    }\n+\n+    @Parameters(name = \"config={0}\")\n+    public static Object[] data() {\n+        return Config.values();\n+    }\n+\n+    @Test\n+    public void testProtocol() throws Exception {\n+        try (ServerContext serverContext = startServer(config);\n+             BlockingHttpClient client = newClient(serverContext, config);\n+             BlockingHttpConnection connection = client.reserveConnection(client.get(\"/\"))) {\n+\n+            assertThat(\"Client-side connection protocol does not match expected value\",\n+                    connection.connectionContext().protocol(), equalTo(config.expectedProtocol));\n+            assertThat(\"Server-side connection protocol does not match expected value\",\n+                    connection.request(connection.get(\"/\")).payloadBody(textDeserializer()),\n+                    equalTo(config.expectedProtocol.name()));\n+        }\n+    }\n+\n+    private static <T> ServerContext startServer(Config config) throws Exception {\n+        final HttpServerBuilder builder = HttpServers.forAddress(localAddress(0))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg0OTk5MQ=="}, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjg4NTEwOnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozNTo0NFrOFx43hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODozNTo0NFrOFx43hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1NjI2MQ==", "bodyText": "As this connection does not implement any protocol per se, I would suggest:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param protocol The {@link Protocol} this {@link DefaultNettyConnection} implements.\n          \n          \n            \n                 * @param protocol {@link Protocol} for the returned {@link DefaultNettyConnection}.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387856261", "createdAt": "2020-03-04T18:35:44Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/DefaultNettyConnection.java", "diffHunk": "@@ -237,6 +231,7 @@ private DefaultNettyConnection(Channel channel, BufferAllocator allocator, Execu\n      * @param idleTimeoutMs Value for {@link ServiceTalkSocketOptions#IDLE_TIMEOUT IDLE_TIMEOUT} socket option.\n      * @param initializer Synchronously initializes the pipeline upon subscribe.\n      * @param executionStrategy {@link ExecutionStrategy} to use for this connection.\n+     * @param protocol The {@link Protocol} this {@link DefaultNettyConnection} implements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjkwNjI3OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ClientParentConnectionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0MjoxMVrOFx5ExA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0MjoxMVrOFx5ExA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1OTY1Mg==", "bodyText": "Just modify showPipeline() to take Protocol now?", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387859652", "createdAt": "2020-03-04T18:42:11Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ClientParentConnectionContext.java", "diffHunk": "@@ -127,7 +129,7 @@ protected void handleSubscribe(final Subscriber<? super H2ClientParentConnection\n                 // callbacks that interact with the subscriber.\n                 pipeline.addLast(parentChannelInitializer);\n             }\n-        }, \"HTTP/2.0\", channel);\n+        }, HTTP_2_0.toString(), channel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjkxMDc3OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpConnectionContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0MzozMFrOFx5HnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0MzozMFrOFx5HnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg2MDM4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * {@link ConnectionContext} specific to HTTP.\n          \n          \n            \n             * {@link ConnectionContext} for HTTP.", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r387860380", "createdAt": "2020-03-04T18:43:30Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpConnectionContext.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.transport.api.ConnectionContext;\n+\n+/**\n+ * {@link ConnectionContext} specific to HTTP.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c43201211896a2af557ab04f983cc51cb2b362ad"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjU3OTg2OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/GrpcServiceContextTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMjoyOFrOFycZKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoxMjoyOFrOFycZKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQzODMxNA==", "bodyText": "Also validate httpProtocol() here?", "url": "https://github.com/apple/servicetalk/pull/955#discussion_r388438314", "createdAt": "2020-03-05T17:12:28Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/GrpcServiceContextTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.netty;\n+\n+import io.servicetalk.concurrent.BlockingIterable;\n+import io.servicetalk.concurrent.BlockingIterator;\n+import io.servicetalk.concurrent.api.Publisher;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.grpc.api.GrpcPayloadWriter;\n+import io.servicetalk.grpc.api.GrpcServiceContext;\n+import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n+import io.servicetalk.grpc.netty.TesterProto.TestResponse;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterClient;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.BlockingTesterService;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ClientFactory;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.ServiceFactory;\n+import io.servicetalk.grpc.netty.TesterProto.Tester.TesterService;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Collections.singleton;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@RunWith(Parameterized.class)\n+public class GrpcServiceContextTest {\n+\n+    private static final String EXPECTED_PROTOCOL_NAME = \"gRPC\";\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final ServerContext serverContext;\n+    private final BlockingTesterClient client;\n+\n+    public GrpcServiceContextTest(boolean streamingService) throws Exception {\n+        serverContext = GrpcServers.forAddress(localAddress(0)).listenAndAwait(streamingService ?\n+                new ServiceFactory(new TesterServiceImpl()) :\n+                new ServiceFactory(new BlockingTesterServiceImpl()));\n+\n+        client = GrpcClients.forAddress(serverHostAndPort(serverContext)).buildBlocking(new ClientFactory());\n+    }\n+\n+    @Parameters(name = \"streamingService={0}\")\n+    public static Object[] params() {\n+        return new Object[]{true, false};\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        try {\n+            client.close();\n+        } finally {\n+            serverContext.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testAggregated() throws Exception {\n+        assertResponse(client.test(newRequest()));\n+    }\n+\n+    @Test\n+    public void testRequestStream() throws Exception {\n+        assertResponse(client.testRequestStream(singleton(newRequest())));\n+    }\n+\n+    @Test\n+    public void testBiDiStream() throws Exception {\n+        try (BlockingIterator<TestResponse> iterator = client.testBiDiStream(singleton(newRequest())).iterator()) {\n+            assertResponse(iterator.next());\n+            assertThat(iterator.hasNext(), is(false));\n+        }\n+    }\n+\n+    @Test\n+    public void testResponseStream() throws Exception {\n+        try (BlockingIterator<TestResponse> iterator = client.testResponseStream(newRequest()).iterator()) {\n+            assertResponse(iterator.next());\n+            assertThat(iterator.hasNext(), is(false));\n+        }\n+    }\n+\n+    private static void assertResponse(@Nullable TestResponse response) {\n+        assertThat(response, is(notNullValue()));\n+        assertThat(response.getMessage(), equalTo(EXPECTED_PROTOCOL_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3e0e9e99388c2cb3e2b6ff975a5290b21cb8e35"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2872, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}