{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzczNDE1", "number": 1057, "title": "CancellableThenSubscription avoiding infinite loop", "bodyText": "Motivation:\nCancellableThenSubscription may get into an infinite loop if\nsetSubscription method is called twice. This is invalid usage as\ndescribed by the API but there are issues that suggest this may be\noccurring [1][2][3] and if it does we should avoid infinite looping.\n[1] #744\n[2] #1040\n[3] #1053\nModifications:\n\nRename CancellableThenSubscription to\nDelayedCancellableThenSubscription\nLeverage DelayedCancellable and DelayedSubscription existing code to\nconstruct DelayedCancellableThenSubscription to share code and lower\ncomplexity\n\nResult:\nDelayedCancellableThenSubscription prevents infinite loops. This may\nimpact the following operators:\n\nSingle#flatMapPublisher(..)\nCompletable#concat(Publisher)\nSingle#concat(Publisher)", "createdAt": "2020-05-15T19:43:38Z", "url": "https://github.com/apple/servicetalk/pull/1057", "merged": true, "mergeCommit": {"oid": "37ca956382bf2e5ed135fb0e882fc6203772a164"}, "closed": true, "closedAt": "2020-05-20T15:05:21Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchncJ7AH2gAyNDE4NzczNDE1OmE4Yzg1OGMxODA2ZjBiNTRlNGM3YzQ3MjQzZjBmZmFkZjMzODEzZDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjMpHUAFqTQxNTU2NjcyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a8c858c1806f0b54e4c7c47243f0ffadf33813d6", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/a8c858c1806f0b54e4c7c47243f0ffadf33813d6", "committedDate": "2020-05-15T19:42:38Z", "message": "CancellableThenSubscription avoiding infinite loop\n\nMotivation:\nCancellableThenSubscription may get into an infinite loop if\nsetSubscription method is called twice. This is invalid usage as\ndescribed by the API but there are issues that suggest this may be\noccurring [1][2][3] and if it does we should avoid infinite looping.\n\n[1] https://github.com/apple/servicetalk/issues/744\n[2] https://github.com/apple/servicetalk/issues/1040\n[3] https://github.com/apple/servicetalk/issues/1053\n\nModifications:\n- Rename CancellableThenSubscription to\nDelayedCancellableThenSubscription\n- Leverage DelayedCancellable and DelayedSubscription existing code to\nconstruct DelayedCancellableThenSubscription to share code and lower\ncomplexity\n\nResult:\nDelayedCancellableThenSubscription prevents infinite loops. This may\nimpact the following operators:\n- Single#flatMapPublisher(..)\n- Completable#concat(Publisher)\n- Single#concat(Publisher)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468", "committedDate": "2020-05-15T19:51:59Z", "message": "make tests more forgiving with invalid requestn matching"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDA0Mjkz", "url": "https://github.com/apple/servicetalk/pull/1057#pullrequestreview-413004293", "createdAt": "2020-05-15T22:38:48Z", "commit": {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNTIyNjYy", "url": "https://github.com/apple/servicetalk/pull/1057#pullrequestreview-413522662", "createdAt": "2020-05-18T11:55:59Z", "commit": {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzODA3NTkw", "url": "https://github.com/apple/servicetalk/pull/1057#pullrequestreview-413807590", "createdAt": "2020-05-18T17:42:56Z", "commit": {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0Mjo1NlrOGXBXKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNzo0Mjo1NlrOGXBXKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc5Mjc0NA==", "bodyText": "Is this useful anywhere else but for the concat case?\nCan the switch between cancellable and subscription be local to DelayedCancellableThenSubscription?", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r426792744", "createdAt": "2020-05-18T17:42:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/DelayedCancellable.java", "diffHunk": "@@ -52,4 +52,12 @@ public void cancel() {\n             oldCancellable.cancel();\n         }\n     }\n+\n+    /**\n+     * Dereference the internal {@link Cancellable} and prevent future calls to\n+     * {@link #delayedCancellable(Cancellable)}.\n+     */\n+    protected final void disableCancellable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3bfb4a7cc2ecd93bbb7c6bf266aa0e414d8468"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/08d5bb85457a9c2028289b2f22952bee0cb0b80e", "committedDate": "2020-05-20T01:04:22Z", "message": "internalize DelayedCancellable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTI1Mjcw", "url": "https://github.com/apple/servicetalk/pull/1057#pullrequestreview-414925270", "createdAt": "2020-05-20T01:06:26Z", "commit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTowNjoyNlrOGX30zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMTowNjoyNlrOGX30zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY4NTA3MQ==", "bodyText": "I considered making DelayedSubscription non-final and extending it, but lets defer this for a followup PR if necessary.", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r427685071", "createdAt": "2020-05-20T01:06:26Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+/**\n+ * An implementation of {@link Subscription} that starts as a {@link Cancellable} but then is replaced with an actual\n+ * {@link Subscription}. The expected sequence of events is:\n+ * <ul>\n+ *     <li>{@link #delayedCancellable(Cancellable)}</li>\n+ *     <li>{@link #delayedSubscription(Subscription)}</li>\n+ * </ul>\n+ * The {@link Subscription} methods can be invoked at any time.\n+ */\n+class DelayedCancellableThenSubscription implements Subscription {\n+    private final DelayedSubscription delayedSubscription = new DelayedSubscription();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTY2NzIx", "url": "https://github.com/apple/servicetalk/pull/1057#pullrequestreview-415566721", "createdAt": "2020-05-20T17:37:12Z", "commit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozNzoxMlrOGYWrUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzozNzoxMlrOGYWrUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5MDU0Ng==", "bodyText": "small followup #1061 to just use current instead of current and delayedSubscription", "url": "https://github.com/apple/servicetalk/pull/1057#discussion_r428190546", "createdAt": "2020-05-20T17:37:12Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DelayedCancellableThenSubscription.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+/**\n+ * An implementation of {@link Subscription} that starts as a {@link Cancellable} but then is replaced with an actual\n+ * {@link Subscription}. The expected sequence of events is:\n+ * <ul>\n+ *     <li>{@link #delayedCancellable(Cancellable)}</li>\n+ *     <li>{@link #delayedSubscription(Subscription)}</li>\n+ * </ul>\n+ * The {@link Subscription} methods can be invoked at any time.\n+ */\n+class DelayedCancellableThenSubscription implements Subscription {\n+    private final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+    private static final AtomicReferenceFieldUpdater<DelayedCancellableThenSubscription, Cancellable> currentUpdater =\n+            newUpdater(DelayedCancellableThenSubscription.class, Cancellable.class, \"current\");\n+    @Nullable\n+    private volatile Cancellable current;\n+\n+    @Override\n+    public void request(final long n) {\n+        delayedSubscription.request(n);\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08d5bb85457a9c2028289b2f22952bee0cb0b80e"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3697, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}