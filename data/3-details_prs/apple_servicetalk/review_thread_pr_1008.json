{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzkxNTc5", "number": 1008, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowMzoyNlrODvqBOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzozOToxNlrODvq5XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk4MTA1OnYy", "diffSide": "LEFT", "path": "servicetalk-http-utils/src/main/java/io/servicetalk/http/utils/BeforeFinallyOnHttpResponseOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowMzoyNlrOGCNaMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo1NzowNlrOGCRudQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDAzMg==", "bodyText": "I realize I requested to make the conversion classes internal when these types were recently introduced, but if we are going to have to duplicate the code lets just expose it so we can share.", "url": "https://github.com/apple/servicetalk/pull/1008#discussion_r404970032", "createdAt": "2020-04-07T17:03:26Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-utils/src/main/java/io/servicetalk/http/utils/BeforeFinallyOnHttpResponseOperator.java", "diffHunk": "@@ -254,28 +255,4 @@ public void onComplete() {\n             // Ignore.\n         }\n     }\n-\n-    private static final class RunnableTerminalSignalConsumer implements TerminalSignalConsumer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b796514c85bf1d0d3b36f33f0d25981212c49ed1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MDY1MA==", "bodyText": "Sad that we can not place it in some -internal module due to the dependencies between modules to share it with http-utils.", "url": "https://github.com/apple/servicetalk/pull/1008#discussion_r404990650", "createdAt": "2020-04-07T17:35:24Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-utils/src/main/java/io/servicetalk/http/utils/BeforeFinallyOnHttpResponseOperator.java", "diffHunk": "@@ -254,28 +255,4 @@ public void onComplete() {\n             // Ignore.\n         }\n     }\n-\n-    private static final class RunnableTerminalSignalConsumer implements TerminalSignalConsumer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDAzMg=="}, "originalCommit": {"oid": "b796514c85bf1d0d3b36f33f0d25981212c49ed1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MDc1Nw==", "bodyText": "agreed the API needs to be public in concurrent-api so we would need to push the APIs down to the concurrent module in order to put the utility classes in an -internal module.", "url": "https://github.com/apple/servicetalk/pull/1008#discussion_r405040757", "createdAt": "2020-04-07T18:57:06Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-utils/src/main/java/io/servicetalk/http/utils/BeforeFinallyOnHttpResponseOperator.java", "diffHunk": "@@ -254,28 +255,4 @@ public void onComplete() {\n             // Ignore.\n         }\n     }\n-\n-    private static final class RunnableTerminalSignalConsumer implements TerminalSignalConsumer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDAzMg=="}, "originalCommit": {"oid": "b796514c85bf1d0d3b36f33f0d25981212c49ed1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjk4NjU1OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleTerminalSignalConsumer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNDo0NFrOGCNdwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzowNDo0NFrOGCNdwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk3MDk0Ng==", "bodyText": "not strong on internal type vs top level type, but leaning toward external type so it is more consistent with TerminalSignalConsumer and we can expose RunnableSingleTerminalSignalConsumer in the future if necessary without cluttering Single's public exposure.", "url": "https://github.com/apple/servicetalk/pull/1008#discussion_r404970946", "createdAt": "2020-04-07T17:04:44Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SingleTerminalSignalConsumer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.SingleSource;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A contract that provides discrete callbacks for various ways in which a {@link SingleSource.Subscriber} can\n+ * terminate.\n+ *\n+ * @param <T> Type of the result of the {@link Single}.\n+ */\n+public interface SingleTerminalSignalConsumer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b796514c85bf1d0d3b36f33f0d25981212c49ed1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzEyNDc2OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RunnableTerminalSignalConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzozOToxNlrOGCO0RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTowNjoxOFrOGCSD3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MzA5Mg==", "bodyText": "If we are ok to expose it as public API, alternative could be to add a static method TerminalSignalConsumer.from(Runnable). That will simplify discoverability and be consistent with other interfaces, like HostAndPort, factories, initializers, etc.", "url": "https://github.com/apple/servicetalk/pull/1008#discussion_r404993092", "createdAt": "2020-04-07T17:39:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RunnableTerminalSignalConsumer.java", "diffHunk": "@@ -17,11 +17,17 @@\n \n import static java.util.Objects.requireNonNull;\n \n-final class RunnableTerminalSignalConsumer implements TerminalSignalConsumer {\n-\n+/**\n+ * A {@link TerminalSignalConsumer} where each method executes a {@link Runnable#run()}.\n+ */\n+public final class RunnableTerminalSignalConsumer implements TerminalSignalConsumer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b796514c85bf1d0d3b36f33f0d25981212c49ed1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NjIzNw==", "bodyText": "done", "url": "https://github.com/apple/servicetalk/pull/1008#discussion_r405046237", "createdAt": "2020-04-07T19:06:18Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/RunnableTerminalSignalConsumer.java", "diffHunk": "@@ -17,11 +17,17 @@\n \n import static java.util.Objects.requireNonNull;\n \n-final class RunnableTerminalSignalConsumer implements TerminalSignalConsumer {\n-\n+/**\n+ * A {@link TerminalSignalConsumer} where each method executes a {@link Runnable#run()}.\n+ */\n+public final class RunnableTerminalSignalConsumer implements TerminalSignalConsumer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk5MzA5Mg=="}, "originalCommit": {"oid": "b796514c85bf1d0d3b36f33f0d25981212c49ed1"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2675, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}