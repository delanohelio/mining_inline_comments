{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTE0MTIw", "number": 910, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo0MzoxN1rODWWXTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo0MzoxN1rODWWXTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzYxNjc3OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-protoc/src/main/java/io/servicetalk/grpc/protoc/Generator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxOTo0MzoxN1rOFbDyyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMTo0NzowOVrOFbGxww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxODAyNw==", "bodyText": "What was the reason to decouple async and blocking interfaces generation? The code for them is almost similar. With your changes you will need to do different pathSpecBuilder.initializer depending on the blocking flag. For everything else all conditions were preexisting. Consider reverting the previous logic.", "url": "https://github.com/apple/servicetalk/pull/910#discussion_r363918027", "createdAt": "2020-01-07T19:43:17Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-protoc/src/main/java/io/servicetalk/grpc/protoc/Generator.java", "diffHunk": "@@ -250,26 +222,50 @@ private void addSerializationProviderInit(final State state, final TypeSpec.Buil\n \n     private void addServiceRpcInterfaces(final State state, final TypeSpec.Builder serviceClassBuilder) {\n         state.serviceRpcInterfaces = new ArrayList<>(2 * state.serviceProto.getMethodCount());\n-\n-        state.serviceProto.getMethodList().forEach(methodProto -> Stream.of(false, true).forEach(blocking -> {\n-            final String name = context.deconflictJavaTypeName((blocking ? Blocking : \"\") +\n+        state.serviceProto.getMethodList().forEach(methodProto -> {\n+            final String name = context.deconflictJavaTypeName(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "311a04b75e08f4a2c732995696ed1508954bd4c4"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2NTk1Mw==", "bodyText": "The primary motivation is to have the ability to refer to the corresponding async RPC interface PATH constant. Since we deconflict the name, there is no way to get the same name as was used by the async RPC interface apart from what I am doing here.\nI can extract common code between these two lambdas into a separate method if you prefer but we will have to do the following:\n\nIterate over the methods in proto file to generate async interfaces.\nIterate over the async interfaces to generate the corresponding blocking interfaces.\n\nThis also has a nice side-effect that async and blocking interfaces for the same RPC method has similar names. eg: if the RPC method name is foo but the service name is also foo then with existing code, async RPC name will be Foo0 but blocking interface will be BlockingFoo. After this change the names will be Foo0 and BlockingFoo0 which is nicer.", "url": "https://github.com/apple/servicetalk/pull/910#discussion_r363965953", "createdAt": "2020-01-07T21:44:46Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-protoc/src/main/java/io/servicetalk/grpc/protoc/Generator.java", "diffHunk": "@@ -250,26 +222,50 @@ private void addSerializationProviderInit(final State state, final TypeSpec.Buil\n \n     private void addServiceRpcInterfaces(final State state, final TypeSpec.Builder serviceClassBuilder) {\n         state.serviceRpcInterfaces = new ArrayList<>(2 * state.serviceProto.getMethodCount());\n-\n-        state.serviceProto.getMethodList().forEach(methodProto -> Stream.of(false, true).forEach(blocking -> {\n-            final String name = context.deconflictJavaTypeName((blocking ? Blocking : \"\") +\n+        state.serviceProto.getMethodList().forEach(methodProto -> {\n+            final String name = context.deconflictJavaTypeName(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxODAyNw=="}, "originalCommit": {"oid": "311a04b75e08f4a2c732995696ed1508954bd4c4"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk2NjkxNQ==", "bodyText": "Agreed, thanks for clarification.", "url": "https://github.com/apple/servicetalk/pull/910#discussion_r363966915", "createdAt": "2020-01-07T21:47:09Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-protoc/src/main/java/io/servicetalk/grpc/protoc/Generator.java", "diffHunk": "@@ -250,26 +222,50 @@ private void addSerializationProviderInit(final State state, final TypeSpec.Buil\n \n     private void addServiceRpcInterfaces(final State state, final TypeSpec.Builder serviceClassBuilder) {\n         state.serviceRpcInterfaces = new ArrayList<>(2 * state.serviceProto.getMethodCount());\n-\n-        state.serviceProto.getMethodList().forEach(methodProto -> Stream.of(false, true).forEach(blocking -> {\n-            final String name = context.deconflictJavaTypeName((blocking ? Blocking : \"\") +\n+        state.serviceProto.getMethodList().forEach(methodProto -> {\n+            final String name = context.deconflictJavaTypeName(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkxODAyNw=="}, "originalCommit": {"oid": "311a04b75e08f4a2c732995696ed1508954bd4c4"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2814, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}