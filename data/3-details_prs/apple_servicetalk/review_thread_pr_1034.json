{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODUzNDg1", "number": 1034, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDozMToxNFrOD4MiUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1ODoyNVrOD4NE9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjUyMjQxOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/SubscriberUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDozMToxNFrOGO5POw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0MDo0MFrOGO8yyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MTAzNQ==", "bodyText": "The name seems misleading, perhaps you wanted to name this deliverTerminalFromSource?", "url": "https://github.com/apple/servicetalk/pull/1034#discussion_r418271035", "createdAt": "2020-04-30T20:31:14Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/SubscriberUtils.java", "diffHunk": "@@ -335,4 +349,39 @@ public static void handleExceptionFromOnSubscribe(CompletableSource.Subscriber s\n             LOGGER.info(\"Ignoring exception from onComplete of Subscriber {}.\", subscriber, t);\n         }\n     }\n+\n+    /**\n+     * Invokes {@link SingleSource.Subscriber#onSuccess(Object)} ignoring an occurred exception if any.\n+     * @param subscriber The {@link SingleSource.Subscriber} that may throw an exception from\n+     * {@link SingleSource.Subscriber#onSuccess(Object)}.\n+     * @param value The value to pass to {@link SingleSource.Subscriber#onSuccess(Object)}.\n+     * @param <T> The type of {@link SingleSource.Subscriber}.\n+     */\n+    public static <T> void safeOnComplete(SingleSource.Subscriber<T> subscriber, @Nullable T value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTI5MA==", "bodyText": "good catch ... this method should be broken up into deliverTerminalFromSource and safeOnComplete", "url": "https://github.com/apple/servicetalk/pull/1034#discussion_r418329290", "createdAt": "2020-04-30T22:40:40Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/SubscriberUtils.java", "diffHunk": "@@ -335,4 +349,39 @@ public static void handleExceptionFromOnSubscribe(CompletableSource.Subscriber s\n             LOGGER.info(\"Ignoring exception from onComplete of Subscriber {}.\", subscriber, t);\n         }\n     }\n+\n+    /**\n+     * Invokes {@link SingleSource.Subscriber#onSuccess(Object)} ignoring an occurred exception if any.\n+     * @param subscriber The {@link SingleSource.Subscriber} that may throw an exception from\n+     * {@link SingleSource.Subscriber#onSuccess(Object)}.\n+     * @param value The value to pass to {@link SingleSource.Subscriber#onSuccess(Object)}.\n+     * @param <T> The type of {@link SingleSource.Subscriber}.\n+     */\n+    public static <T> void safeOnComplete(SingleSource.Subscriber<T> subscriber, @Nullable T value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI3MTAzNQ=="}, "originalCommit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjYxMTEwOnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/Flush.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDo1ODoyNVrOGO6Fxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMjo0MjowMFrOGO80lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NDk5OA==", "bodyText": "This seems to be different than what was happening before as we are not cancelling the subscription any more. I think the assumption here is that this exception will bubble up to the source which effectively cancels the subscription?", "url": "https://github.com/apple/servicetalk/pull/1034#discussion_r418284998", "createdAt": "2020-04-30T20:58:25Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/Flush.java", "diffHunk": "@@ -74,24 +73,22 @@ private Flush() {\n         public void onSubscribe(Subscription subscription) {\n             try {\n                 writeEventsListener.writeStarted();\n-            } catch (Throwable t) {\n-                subscription.cancel();\n-                subscriber.onSubscribe(EMPTY_SUBSCRIPTION);\n-                subscriber.onError(t);\n-                return;\n-            }\n-            subscriber.onSubscribe(new Subscription() {\n-                @Override\n-                public void request(long n) {\n-                    subscription.request(n);\n-                }\n+            } finally {\n+                // As long as we call onSubscribe we can let exceptions propagate and the source should terminate\n+                // this Subscriber for cleanup.\n+                subscriber.onSubscribe(new Subscription() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMyOTc1MQ==", "bodyText": "Correct. I attempted to articulate that in the comment above but let me expand on this to clarify more.", "url": "https://github.com/apple/servicetalk/pull/1034#discussion_r418329751", "createdAt": "2020-04-30T22:42:00Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/Flush.java", "diffHunk": "@@ -74,24 +73,22 @@ private Flush() {\n         public void onSubscribe(Subscription subscription) {\n             try {\n                 writeEventsListener.writeStarted();\n-            } catch (Throwable t) {\n-                subscription.cancel();\n-                subscriber.onSubscribe(EMPTY_SUBSCRIPTION);\n-                subscriber.onError(t);\n-                return;\n-            }\n-            subscriber.onSubscribe(new Subscription() {\n-                @Override\n-                public void request(long n) {\n-                    subscription.request(n);\n-                }\n+            } finally {\n+                // As long as we call onSubscribe we can let exceptions propagate and the source should terminate\n+                // this Subscriber for cleanup.\n+                subscriber.onSubscribe(new Subscription() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI4NDk5OA=="}, "originalCommit": {"oid": "d20bfac941a764c0c01374615cab5ada90361bb8"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2724, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}