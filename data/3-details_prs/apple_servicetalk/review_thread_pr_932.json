{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDc4MDA1", "number": 932, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoyNDozOVrODdJjGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoyOToxMFrODd0gJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxODkxNzM3OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjoyNDozOVrOFllmsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MjoyNFrOFmNwHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1Nzc0NA==", "bodyText": "@NiteshKant should we account for users that may try-catch routes registration? If they register the same path 2+ times with different route implementations, we will override the strategy here, but later we throw an exception saying that this path was already registered. If users try-catch this exception, internal state will be modified. I can move this executionStrategies.put after we register a route if necessary.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r374957744", "createdAt": "2020-02-04T22:24:39Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);\n+        if (saved != NULL) {\n+            return saved;\n+        }\n+        final GrpcExecutionStrategy computed = getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz,\n+                strategyFactory, errors, noOffloadsStrategy());\n+        // Save computed value even if it's null to prevent analysing annotations on a service filter class\n+        executionStrategies.put(path, computed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNDUwOA==", "bodyText": "but later we throw an exception saying that this path was already registered.\n\n\nDid you mean that we will ignore the strategy for a subsequent registration? We are not using executionStrategies to check for duplicate registration, are we?\nI think we should account for cases when a registration exception is caught and retried unless we have a strong reason to believe that is invalid. AFAIR, this is required only for disallowing filters to specify the strategy annotation, rite? I have not thought of that case as to whether it is good or bad, so if we need special code to disallow it, lets refrain from doing that for now and have \"behavior when strategy annotation is defined on filters is undefined\" as our answer.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375424508", "createdAt": "2020-02-05T18:16:58Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);\n+        if (saved != NULL) {\n+            return saved;\n+        }\n+        final GrpcExecutionStrategy computed = getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz,\n+                strategyFactory, errors, noOffloadsStrategy());\n+        // Save computed value even if it's null to prevent analysing annotations on a service filter class\n+        executionStrategies.put(path, computed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1Nzc0NA=="}, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTUxOQ==", "bodyText": "I was thinking about a use-case like this:\nServiceFactory.Builder builder = new ServiceFactory.Builder();\nbuilder.testBlocking(noOffloadsStrategy(), serviceImpl);\ntry {\n    builder.testBlocking(anotherStrategy, anotherServiceImpl);\n} catch (IllegalStateException e) {\n    // ignore that this route was already registered\n}\nDon't think we need to verify duplication for the executionStrategies map, because we already do that for routes. An additional check will be useless.\nIn my first impl I stored execution strategy before I verified routes duplication. That's why in the example above users will be in the state when they have serviceImpl with anotherStrategy.\nNow I moved executionStrategies.put(...) after we verify routes duplication. So, nothing will corrupt the internal state.\n\nAFAIR, this is required only for disallowing filters to specify the strategy annotation, rite? I have not thought of that case as to whether it is good or bad.\n\nRight. As we discussed before, ST policy is that if you configure an execution strategy for the route, ST will use it regardless of filters/influencers/etc.\nThe case here is that grpc filter implements the same service interface. Therefore, users can accidentally add @RouteExecutionStrategy annotation on the filter. I think we should ignore it.\n\nso if we need special code to disallow it, lets refrain from doing that for now and have \"behavior when strategy annotation is defined on filters is undefined\" as our answer.\n\nThe code to disallow annotation inspection for filters is trivial. It's just getOrDefault vs get on the map to distinguish key-null entry vs entry for this key does not exist.\nDefined behavior is always better than undefined. I've added this test to demonstrate the problem: https://github.com/apple/servicetalk/pull/932/files#diff-4fbfd0eed0161987f94f03bc6d9e3203R262-R279", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375615519", "createdAt": "2020-02-06T02:42:24Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);\n+        if (saved != NULL) {\n+            return saved;\n+        }\n+        final GrpcExecutionStrategy computed = getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz,\n+                strategyFactory, errors, noOffloadsStrategy());\n+        // Save computed value even if it's null to prevent analysing annotations on a service filter class\n+        executionStrategies.put(path, computed);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk1Nzc0NA=="}, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTc5ODUwOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouteConversions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo0OTozM1rOFmBOiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo0OTozM1rOFmBOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxMDMxNQ==", "bodyText": "If onError() throws from the above catch block and then grpcPayloadWriter.close() also throws, concurrentTerminalSubscriber will ignore this call. You can instead use concurrentTerminalSubscriber.processOnError() which returns false if it did not deliver the error, in which case we should log.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375410315", "createdAt": "2020-02-05T17:49:33Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouteConversions.java", "diffHunk": "@@ -107,30 +107,38 @@ public Completable closeAsyncGracefully() {\n                 return new Publisher<Resp>() {\n                     @Override\n                     protected void handleSubscribe(final Subscriber<? super Resp> subscriber) {\n-                        ConnectablePayloadWriter<Resp> connectablePayloadWriter = new ConnectablePayloadWriter<>();\n-                        Publisher<Resp> pub = connectablePayloadWriter.connect();\n-                        Subscriber<? super Resp> concurrentTerminalSubscriber =\n+                        final ConnectablePayloadWriter<Resp> connectablePayloadWriter =\n+                                new ConnectablePayloadWriter<>();\n+                        final Publisher<Resp> pub = connectablePayloadWriter.connect();\n+                        final Subscriber<? super Resp> concurrentTerminalSubscriber =\n                                 new ConcurrentTerminalSubscriber<>(subscriber, false);\n                         toSource(pub).subscribe(concurrentTerminalSubscriber);\n+                        final GrpcPayloadWriter<Resp> grpcPayloadWriter = new GrpcPayloadWriter<Resp>() {\n+                            @Override\n+                            public void write(final Resp resp) throws IOException {\n+                                connectablePayloadWriter.write(resp);\n+                            }\n+\n+                            @Override\n+                            public void close() throws IOException {\n+                                connectablePayloadWriter.close();\n+                            }\n+\n+                            @Override\n+                            public void flush() throws IOException {\n+                                connectablePayloadWriter.flush();\n+                            }\n+                        };\n                         try {\n-                            original.handle(ctx, request.toIterable(), new GrpcPayloadWriter<Resp>() {\n-                                @Override\n-                                public void write(final Resp resp) throws IOException {\n-                                    connectablePayloadWriter.write(resp);\n-                                }\n-\n-                                @Override\n-                                public void close() throws IOException {\n-                                    connectablePayloadWriter.close();\n-                                }\n-\n-                                @Override\n-                                public void flush() throws IOException {\n-                                    connectablePayloadWriter.flush();\n-                                }\n-                            });\n+                            original.handle(ctx, request.toIterable(), grpcPayloadWriter);\n                         } catch (Throwable t) {\n                             concurrentTerminalSubscriber.onError(t);\n+                        } finally {\n+                            try {\n+                                grpcPayloadWriter.close();\n+                            } catch (IOException e) {\n+                                concurrentTerminalSubscriber.onError(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTgyNDgyOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo1Nzo1NlrOFmBfeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzo1Nzo1NlrOFmBfeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNDY1MA==", "bodyText": "It seems like it is trivial to create a merged map for strategies from all routes instead of ignoring them. It is better to not make exceptions here and make sure we have strategies when defined.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375414650", "createdAt": "2020-02-05T17:57:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -159,7 +171,9 @@ public Completable closeAsyncGracefully() {\n             builders[i] = allRoutes[i].routeBuilder;\n             errors.addAll(allRoutes[i].errors);\n         }\n-        return new GrpcRoutes<GrpcService>(GrpcRouter.Builder.merge(builders), errors) {\n+        // At the time of merging all GrpcRoutes together we don't need an executionStrategies map and can pass an empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg0NDM1OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowMzozOFrOFmBrZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjo0MjozMVrOFmNwPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNzcwMA==", "bodyText": "Just use get() and eliminate defining NULL as default?\nfinal GrpcExecutionStrategy saved = executionStrategies.get(path);\nif (saved != null) {\n    return saved;\n}", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375417700", "createdAt": "2020-02-05T18:03:38Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxNTU0OQ==", "bodyText": "Let's continue this discussion here: #932 (comment)", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375615549", "createdAt": "2020-02-06T02:42:31Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,9 +187,18 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n-        return getAndValidateRouteExecutionStrategyAnnotationIfPresent(method, clazz, strategyFactory, errors,\n-                noOffloadsStrategy());\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This may happen when we re-register\n+        // filtered routes:\n+        final GrpcExecutionStrategy saved = executionStrategies.getOrDefault(path, NULL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxNzcwMA=="}, "originalCommit": {"oid": "429aebc7d787241a20b08683ba29e7fab2578fcd"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzA4MjcyOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouteConversions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjozMzowMlrOFmNn3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMjozMzowMlrOFmNn3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYxMzQwNA==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                LOGGER.error(\"Cannot close GrpcPayloadWriter\", e);\n          \n          \n            \n                                                LOGGER.error(\"Failed to close GrpcPayloadWriter\", e);", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r375613404", "createdAt": "2020-02-06T02:33:02Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouteConversions.java", "diffHunk": "@@ -137,7 +143,9 @@ public void flush() throws IOException {\n                             try {\n                                 grpcPayloadWriter.close();\n                             } catch (IOException e) {\n-                                concurrentTerminalSubscriber.onError(e);\n+                                if (!concurrentTerminalSubscriber.processOnError(e)) {\n+                                    LOGGER.error(\"Cannot close GrpcPayloadWriter\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5820d3310904811ba595fefc4ac5c84a0639f349"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTkxOTIwOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoxNjo0MFrOFmo1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoxNjo0MFrOFmo1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA1OTE3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            executionStrategies.putAll(executionStrategies);\n          \n          \n            \n                            executionStrategies.putAll(builder.executionStrategies);\n          \n      \n    \n    \n  \n\nIf it is simple, add a test to verify, else it is OK.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376059174", "createdAt": "2020-02-06T20:16:40Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -196,18 +200,25 @@ RouteProviders drainRoutes() {\n             return new RouteProviders(allRoutes);\n         }\n \n+        GrpcExecutionStrategy alreadyRegisteredExecutionStrategy(final String path,\n+                                                                 final GrpcExecutionStrategy defaultValue) {\n+            return executionStrategies.getOrDefault(path, defaultValue);\n+        }\n+\n         static GrpcRouter.Builder merge(final GrpcRouter.Builder... builders) {\n             final Map<String, RouteProvider> routes = new HashMap<>();\n             final Map<String, RouteProvider> streamingRoutes = new HashMap<>();\n             final Map<String, RouteProvider> blockingRoutes = new HashMap<>();\n             final Map<String, RouteProvider> blockingStreamingRoutes = new HashMap<>();\n+            final Map<String, GrpcExecutionStrategy> executionStrategies = new HashMap<>();\n             for (Builder builder : builders) {\n                 mergeRoutes(routes, builder.routes);\n                 mergeRoutes(streamingRoutes, builder.streamingRoutes);\n                 mergeRoutes(blockingRoutes, builder.blockingRoutes);\n                 mergeRoutes(blockingStreamingRoutes, builder.blockingStreamingRoutes);\n+                executionStrategies.putAll(executionStrategies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTkzMjY3OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoyMToyNFrOFmo9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoyMToyNFrOFmo9YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2MTI4MA==", "bodyText": "Rename alreadyRegisteredExecutionStrategy => executionStrategyFor()\nIt does not seem like \"already registered\" is providing any additional value here.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376061280", "createdAt": "2020-02-06T20:21:24Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java", "diffHunk": "@@ -196,18 +200,25 @@ RouteProviders drainRoutes() {\n             return new RouteProviders(allRoutes);\n         }\n \n+        GrpcExecutionStrategy alreadyRegisteredExecutionStrategy(final String path,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTk1NDk1OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMDoyOToxMFrOFmpK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODozMzoyMVrOFnGSQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA==", "bodyText": "null executionStrategy has no semantic meaning from a user point of view. We use it as a short-cut internally to avoid method overloads. If we only add non-null strategy for a path in GrpcRouter methods, can we simplify this as null value meaning no strategy is defined?", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376064734", "createdAt": "2020-02-06T20:29:10Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjExNDA2Mg==", "bodyText": "This null is not visible for users. null will be here only when users use ServiceFactory.Builder methods that do not take execution strategy and they do not add annotations on the service. For a null use-case we define execution strategy based on the method API: \n  \n    \n      servicetalk/servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRouter.java\n    \n    \n         Line 259\n      in\n      412222c\n    \n    \n    \n    \n\n        \n          \n           }, strategy -> executionStrategy == null ? strategy : executionStrategy),", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376114062", "createdAt": "2020-02-06T22:18:42Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA=="}, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNTM0OQ==", "bodyText": "I understand that. I am questioning the need for this awkward NULL marker used here which is trying to distinguish between whether the value stored in the executionStrategies Map for a path is null or there is no mapping for that path.\nIf we do not put a null value in the executionStrategies Map then we do not need this NULL marker here, rite?", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376125349", "createdAt": "2020-02-06T22:48:04Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA=="}, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3NzgxNg==", "bodyText": "The stored path<->null pair helps to understand that we already processed annotations for this route and an execution strategy for this route was null (therefore, we have to infer an execution strategy based on the route API).\nIf we won't store path<->null pair, we don't have a way to distinguish between \"we already know that the execution strategy for this route is null\" (this is when we re-register route with a filter) and \"we don't know the execution strategy for this route and have to process annotations\" (first-time registration of the route).", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376177816", "createdAt": "2020-02-07T01:49:36Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA=="}, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3ODAyOA==", "bodyText": "We need to know this difference because the same code path is used for initial route registration and re-registration of the filtered route.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376178028", "createdAt": "2020-02-07T01:50:36Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA=="}, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMTk1Nw==", "bodyText": "@NiteshKant if the main concern is the awkward NULL marker, I've pushed an alternative impl using a boolean flag: fd575fd\nLMK if this approach looks better.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376501957", "createdAt": "2020-02-07T17:02:34Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA=="}, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU0MTc2MQ==", "bodyText": "IMHO the boolean approach is slightly worse than what you had earlier as it stores state(registerFilters) assuming interactions from GrpcServiceFactory#applyFilterToRoutes().\nIt seems we are working around code to support \"filters should not have strategy annotation\" scenario. Since you seem to be convinced that scenario needs to be validated, lets go with what you had before (NULL marker approach) which looks like a lesser evil.", "url": "https://github.com/apple/servicetalk/pull/932#discussion_r376541761", "createdAt": "2020-02-07T18:33:21Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcRoutes.java", "diffHunk": "@@ -173,7 +177,15 @@ protected GrpcService newServiceFromRoutes(final AllGrpcRoutes routes) {\n     }\n \n     @Nullable\n-    private GrpcExecutionStrategy executionStrategy(final Method method, final Class<?> clazz) {\n+    private GrpcExecutionStrategy executionStrategy(final String path, final Method method, final Class<?> clazz) {\n+        // Check if we already have a computed GrpcExecutionStrategy for this path. This happens when we re-register\n+        // filtered routes and have to use the original execution strategy for the route instead of analysing\n+        // annotations on a service-filter class. Because previously registered strategy could be null, we use NULL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA2NDczNA=="}, "originalCommit": {"oid": "f32710c634351a6e08f374fce548947454756ed0"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2839, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}