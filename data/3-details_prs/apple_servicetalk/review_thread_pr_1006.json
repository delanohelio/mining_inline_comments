{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDQwMDk1", "number": 1006, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTowNjoxNVrODvZdLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyODowNFrODvZtKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDI2NzM0OnYy", "diffSide": "RIGHT", "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNTowNjoxNVrOGBzAdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyNzoyN1rOGBzX5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNzQ2Mg==", "bodyText": "I use needClose to keep the existing behavior. But because connection closure is idempotent we may simplify and always close it.", "url": "https://github.com/apple/servicetalk/pull/1006#discussion_r404537462", "createdAt": "2020-04-07T05:06:15Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -299,18 +298,20 @@ public void onComplete() {\n                                     break;\n                                 }\n                                 if (Host.connectionsUpdater.compareAndSet(host, existing, connectionRemoved)) {\n-                                    newCnx.closeAsync().subscribe();\n+                                    needClose = true;\n                                     break;\n                                 }\n                                 existing = connections;\n                             }\n \n-                            return failed(new IllegalStateException(\"LoadBalancer has closed\"));\n+                            final Single<C> lbClosed = failed(new IllegalStateException(\"LoadBalancer has closed\"));\n+                            return needClose ? newCnx.closeAsync().concat(lbClosed) : lbClosed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88720e492f6909274955757526ac621c093800b3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MzQ2Mg==", "bodyText": "I think it is better to keep needClose since we are anyways doing the heavy-lifting to figure out who should close the connection anyways.", "url": "https://github.com/apple/servicetalk/pull/1006#discussion_r404543462", "createdAt": "2020-04-07T05:27:27Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -299,18 +298,20 @@ public void onComplete() {\n                                     break;\n                                 }\n                                 if (Host.connectionsUpdater.compareAndSet(host, existing, connectionRemoved)) {\n-                                    newCnx.closeAsync().subscribe();\n+                                    needClose = true;\n                                     break;\n                                 }\n                                 existing = connections;\n                             }\n \n-                            return failed(new IllegalStateException(\"LoadBalancer has closed\"));\n+                            final Single<C> lbClosed = failed(new IllegalStateException(\"LoadBalancer has closed\"));\n+                            return needClose ? newCnx.closeAsync().concat(lbClosed) : lbClosed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDUzNzQ2Mg=="}, "originalCommit": {"oid": "88720e492f6909274955757526ac621c093800b3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDMwODI0OnYy", "diffSide": "RIGHT", "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyODowNFrOGBzYiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNToyODowNFrOGBzYiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU0MzYyNA==", "bodyText": "Can you verify if we have a test that checks the connection is closed when we get the error?", "url": "https://github.com/apple/servicetalk/pull/1006#discussion_r404543624", "createdAt": "2020-04-07T05:28:04Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -277,18 +277,17 @@ public void onComplete() {\n                     // Invoke the selector before adding the connection to the pool, otherwise, connection can be used\n                     // concurrently and hence a new connection can be rejected by the selector.\n                     if (!selector.test(newCnx)) {\n-                        newCnx.closeAsync().subscribe();\n                         // Failure in selection could be temporary, hence add it to the queue and be consistent with the\n                         // fact that select failure does not close a connection.\n-                        return failed(new ConnectionRejectedException(\"Newly created connection \" + newCnx +\n-                                \" rejected by the selection filter.\"));\n+                        return newCnx.closeAsync().concat(failed(new ConnectionRejectedException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88720e492f6909274955757526ac621c093800b3"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2673, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}