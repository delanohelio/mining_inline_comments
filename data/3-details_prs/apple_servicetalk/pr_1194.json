{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzg4MjM1", "number": 1194, "title": "Http URI related fixes and enhancements", "bodyText": "Motivation:\nJersey's ContainerRequest requires that an API be encoded properly\nbefore processing. The user agent is expected to do the encoding [1] but\nnot all user agents do, so we attempt to encode on the server for.\nconvenience. However the method we used to encode the URI is an internal\nmethod to Jersey and doesn't cover the full scope of encoding defined in\nrfc3986 [1]. The JDK's URI class also targets an obsolete rfc2396 [2]\nand the JDK's URLEncoder class provides\napplication/x-www-form-urlencoded which is also not what we need.\nModifications:\n\nModify HttpUri to validate RFC 3986 semantics, extract out the host\nextraction from headers code outside the scope of this class. This\nsimplifies the logic within the Uri implementation and makes it easier\nto validate against the RFC.\nIntroduce an implementation of Uri that targets authority-form URIs\ntargeted specifically for CONNECT requests [3].\nIntroduce 3 new filters. 1 to encode the request target on the client.\n1 to decode the request target on the server. 1 to encode the request\ntarget on the server (which can be used to replicate existing behavior\nwhere Jersey is feed an encoded URI).\nUpdate DefaultHttpRequestMetaData so that effective host/port doesn't\nbecome stale if the port value in the host header changes.\n\nResult:\nUri handling follows the RFC [1] and encoding/decoding can be optionally\napplied via a filter if desired.\n[1] https://tools.ietf.org/html/rfc3986\n[2] https://tools.ietf.org/html/rfc2396\n[3] https://tools.ietf.org/html/rfc7230#section-5.3.3", "createdAt": "2020-10-27T00:36:27Z", "url": "https://github.com/apple/servicetalk/pull/1194", "merged": true, "mergeCommit": {"oid": "26f4560a7523693d5d322b1f2cba47f2cfea4f37"}, "closed": true, "closedAt": "2020-11-03T02:43:47Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWySr9AH2gAyNTEwMzg4MjM1OjMwNzZjYzU4NjFlMjg0ZjhmYzE4MGVkYjYwNTgzOTE0YmI1NzNlMDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYvvEXAH2gAyNTEwMzg4MjM1Ojk3Mjg2MWEyMTQ3ZWI1N2QyMWZlOGU0NDQ4MjViZjZiMDRjMTRjZmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3076cc5861e284f8fc180edb60583914bb573e07", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/3076cc5861e284f8fc180edb60583914bb573e07", "committedDate": "2020-10-28T00:19:14Z", "message": "Http URI related fixes and enhancements\n\nMotivation:\nJersey's ContainerRequest requires that an API be encoded properly\nbefore processing. The user agent is expected to do the encoding [1] but\nnot all user agents do, so we attempt to encode on the server for.\nconvenience. However the method we used to encode the URI is an internal\nmethod to Jersey and doesn't cover the full scope of encoding defined in\nrfc3986 [1]. The JDK's URI class also targets an obsolete rfc2396 [2]\nand the JDK's URLEncoder class provides\napplication/x-www-form-urlencoded which is also not what we need.\n\nModifications:\n- Modify HttpUri to validate RFC 3986 semantics, extract out the host\nextraction from headers code outside the scope of this class. This\nsimplifies the logic within the Uri implementation and makes it easier\nto validate against the RFC.\n- Introduce an implementation of Uri that targets authority-form URIs\ntargeted specifically for CONNECT requests [3].\n- Introduce 3 new filters. 1 to encode the request target on the client.\n1 to decode the request target on the server. 1 to encode the request\ntarget on the server (which can be used to replicate existing behavior\nwhere Jersey is feed an encoded URI).\n- Update DefaultHttpRequestMetaData so that effective host/port doesn't\nbecome stale if the port value in the host header changes.\n\nResult:\nUri handling follows the RFC [1] and encoding/decoding can be optionally\napplied via a filter if desired.\n\n[1] https://tools.ietf.org/html/rfc3986\n[2] https://tools.ietf.org/html/rfc2396\n[3] https://tools.ietf.org/html/rfc7230#section-5.3.3"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bc9581216fbb207b5c0d525868cc63798aef33a", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/8bc9581216fbb207b5c0d525868cc63798aef33a", "committedDate": "2020-10-27T00:35:49Z", "message": "Http URI related fixes and enhancements\n\nMotivation:\nJersey's ContainerRequest requires that an API be encoded properly\nbefore processing. The user agent is expected to do the encoding [1] but\nnot all user agents do, so we attempt to encode on the server for.\nconvenience. However the method we used to encode the URI is an internal\nmethod to Jersey and doesn't cover the full scope of encoding defined in\nrfc3986 [1]. The JDK's URI class also targets an obsolete rfc2396 [2]\nand the JDK's URLEncoder class provides\napplication/x-www-form-urlencoded which is also not what we need.\n\nModifications:\n- Modify HttpUri to validate RFC 3986 semantics, extract out the host\nextraction from headers code outside the scope of this class. This\nsimplifies the logic within the Uri implementation and makes it easier\nto validate against the RFC.\n- Introduce an implementation of Uri that targets authority-form URIs\ntargeted specifically for CONNECT requests [3].\n- Introduce 3 new filters. 1 to encode the request target on the client.\n1 to decode the request target on the server. 1 to encode the request\ntarget on the server (which can be used to replicate existing behavior\nwhere Jersey is feed an encoded URI).\n- Update DefaultHttpRequestMetaData so that effective host/port doesn't\nbecome stale if the port value in the host header changes.\n\nResult:\nUri handling follows the RFC [1] and encoding/decoding can be optionally\napplied via a filter if desired.\n\n[1] https://tools.ietf.org/html/rfc3986\n[2] https://tools.ietf.org/html/rfc2396\n[3] https://tools.ietf.org/html/rfc7230#section-5.3.3"}, "afterCommit": {"oid": "3076cc5861e284f8fc180edb60583914bb573e07", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/3076cc5861e284f8fc180edb60583914bb573e07", "committedDate": "2020-10-28T00:19:14Z", "message": "Http URI related fixes and enhancements\n\nMotivation:\nJersey's ContainerRequest requires that an API be encoded properly\nbefore processing. The user agent is expected to do the encoding [1] but\nnot all user agents do, so we attempt to encode on the server for.\nconvenience. However the method we used to encode the URI is an internal\nmethod to Jersey and doesn't cover the full scope of encoding defined in\nrfc3986 [1]. The JDK's URI class also targets an obsolete rfc2396 [2]\nand the JDK's URLEncoder class provides\napplication/x-www-form-urlencoded which is also not what we need.\n\nModifications:\n- Modify HttpUri to validate RFC 3986 semantics, extract out the host\nextraction from headers code outside the scope of this class. This\nsimplifies the logic within the Uri implementation and makes it easier\nto validate against the RFC.\n- Introduce an implementation of Uri that targets authority-form URIs\ntargeted specifically for CONNECT requests [3].\n- Introduce 3 new filters. 1 to encode the request target on the client.\n1 to decode the request target on the server. 1 to encode the request\ntarget on the server (which can be used to replicate existing behavior\nwhere Jersey is feed an encoded URI).\n- Update DefaultHttpRequestMetaData so that effective host/port doesn't\nbecome stale if the port value in the host header changes.\n\nResult:\nUri handling follows the RFC [1] and encoding/decoding can be optionally\napplied via a filter if desired.\n\n[1] https://tools.ietf.org/html/rfc3986\n[2] https://tools.ietf.org/html/rfc2396\n[3] https://tools.ietf.org/html/rfc7230#section-5.3.3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/c131b9cdb04caaed361fe6ba9d83bb174a2d76fb", "committedDate": "2020-10-29T01:47:35Z", "message": "cache decoded path/query. avoid string decode if no % char"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5OTAxNzk4", "url": "https://github.com/apple/servicetalk/pull/1194#pullrequestreview-519901798", "createdAt": "2020-10-29T17:19:54Z", "commit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNzoxOTo1NFrOHqmhpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwMDozOToxNlrOHqzY8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzMzQ0Nw==", "bodyText": "The rawQuery variant takes a @Nullable string, should this param also be @Nullable for consistency?", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514433447", "createdAt": "2020-10-29T17:19:54Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpRequestMetaData.java", "diffHunk": "@@ -186,7 +225,16 @@\n      * @param query the encoded query to set.\n      * @return {@code this}.\n      */\n-    HttpRequestMetaData rawQuery(String query);\n+    HttpRequestMetaData rawQuery(@Nullable String query);\n+\n+    /**\n+     * Sets the path, performing encoding according\n+     * to <a href=\"https://tools.ietf.org/html/rfc3986#section-3.4\">rfc3986, Query</a>.\n+     *\n+     * @param query the un-encoded query to set.\n+     * @return {@code this}.\n+     */\n+    HttpRequestMetaData query(String query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNDExMw==", "bodyText": "Consider clarifying in javadoc what null param means", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514434113", "createdAt": "2020-10-29T17:20:58Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpRequestMetaData.java", "diffHunk": "@@ -186,7 +225,16 @@\n      * @param query the encoded query to set.\n      * @return {@code this}.\n      */\n-    HttpRequestMetaData rawQuery(String query);\n+    HttpRequestMetaData rawQuery(@Nullable String query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzNzcwOQ==", "bodyText": "Consider clarifying in which case users may get null here", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514437709", "createdAt": "2020-10-29T17:26:17Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpRequestMetaData.java", "diffHunk": "@@ -358,22 +406,45 @@ default boolean hasQueryParameter(final String key) {\n      * The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">host component</a> derived\n      * from {@link #requestTarget()} and the {@code Host} header field value. This is the scheme component to use\n      * when computing an <a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">effective request URI</a>.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #effectiveHostAndPort()}.\n      * @return The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">host component</a> derived\n      * from {@link #requestTarget()} and the {@code Host} header field value, or {@code null} if none can be derived.\n      */\n+    @Deprecated\n     @Nullable\n-    String effectiveHost();\n+    default String effectiveHost() {\n+        HostAndPort hostAndPort = effectiveHostAndPort();\n+        return hostAndPort == null ? null : hostAndPort.hostName();\n+    }\n \n     /**\n      * The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">port component</a> derived\n      * from {@link #requestTarget()} and the {@code Host} header field value. This is the scheme component to use\n      * when computing an <a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">effective request URI</a>.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #effectiveHostAndPort()}.\n      * @return The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">port component</a> derived\n      * from {@link #requestTarget()}, and the {@code Host} header field value, or {@code <0} if none can be derived.\n      */\n-    int effectivePort();\n+    @Deprecated\n+    default int effectivePort() {\n+        HostAndPort hostAndPort = effectiveHostAndPort();\n+        return hostAndPort == null ? -1 : hostAndPort.port();\n+    }\n+\n+    /**\n+     * Get the <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">host</a> and\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">port</a> components\n+     * of the <a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">effective request URI</a>.\n+     * The port component will be {@code <0} if none can be derived.\n+     *\n+     * @return The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">host</a> and\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">port</a> components\n+     * of the <a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">effective request URI</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQzOTAwMQ==", "bodyText": "I think it was helpful to know that the \"effective\" variant considers both requestTarget() and the Host header field value.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514439001", "createdAt": "2020-10-29T17:28:21Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpRequestMetaData.java", "diffHunk": "@@ -358,22 +406,45 @@ default boolean hasQueryParameter(final String key) {\n      * The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">host component</a> derived\n      * from {@link #requestTarget()} and the {@code Host} header field value. This is the scheme component to use\n      * when computing an <a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">effective request URI</a>.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #effectiveHostAndPort()}.\n      * @return The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">host component</a> derived\n      * from {@link #requestTarget()} and the {@code Host} header field value, or {@code null} if none can be derived.\n      */\n+    @Deprecated\n     @Nullable\n-    String effectiveHost();\n+    default String effectiveHost() {\n+        HostAndPort hostAndPort = effectiveHostAndPort();\n+        return hostAndPort == null ? null : hostAndPort.hostName();\n+    }\n \n     /**\n      * The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">port component</a> derived\n      * from {@link #requestTarget()} and the {@code Host} header field value. This is the scheme component to use\n      * when computing an <a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">effective request URI</a>.\n-     *\n+     * <p>\n+     * @deprecated Use {@link #effectiveHostAndPort()}.\n      * @return The <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">port component</a> derived\n      * from {@link #requestTarget()}, and the {@code Host} header field value, or {@code <0} if none can be derived.\n      */\n-    int effectivePort();\n+    @Deprecated\n+    default int effectivePort() {\n+        HostAndPort hostAndPort = effectiveHostAndPort();\n+        return hostAndPort == null ? -1 : hostAndPort.port();\n+    }\n+\n+    /**\n+     * Get the <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.2\">host</a> and\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3.2.3\">port</a> components\n+     * of the <a href=\"https://tools.ietf.org/html/rfc7230#section-5.5\">effective request URI</a>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0NjU0Ng==", "bodyText": "Should we allow configuring max query params value?", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514446546", "createdAt": "2020-10-29T17:39:41Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/FormUrlEncodedHttpDeserializer.java", "diffHunk": "@@ -102,6 +105,12 @@ public boolean hasNext() {\n         if (buffer == null || buffer.readableBytes() == 0) {\n             return emptyMap();\n         }\n-        return decodeParams(buffer.toString(charset), charset);\n+        return decodeQueryParams(buffer.toString(charset), charset, DEFAULT_MAX_QUERY_PARAMS, (value, charset) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ0OTkwNw==", "bodyText": "It may be hard to debug the reason why some of the query params (consider POST request with form-url body) are missed. Consider throwing an exception or logging at warn level (logging may be hard to correlate with request object).", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514449907", "createdAt": "2020-10-29T17:44:59Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/UriUtils.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import javax.annotation.Nullable;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+final class UriUtils {\n+    // https://tools.ietf.org/html/rfc3986 declares that all delimiter/terminal values are US-ASCII\n+    // https://tools.ietf.org/html/rfc3986#section-2. This means values fall within the [0, 127] range. This range\n+    // can be represented as a bitset/bitmask with two longs (high, low), which reduces the amount of conditional\n+    // statements required to validate characters belonging to each character class. The following final variables\n+    // provide the bitmask for the different character classes defined in rfc3986, and isBitSet can be used to verify if\n+    // a bit is set for a particular (high, low) mask pair.\n+    //\n+    // pct-encoded is omitted below. This criteria is asserted outside this scope because it requires checking multiple\n+    // bytes and advancing the loop index accordingly.\n+\n+    private static final long DIGIT_LMASK = lowMask('0', '9');\n+    private static final long DIGIT_HMASK = highMask('0', '9');\n+\n+    private static final long ALPHA_LMASK = lowMask('a', 'z') | lowMask('A', 'Z');\n+    private static final long ALPHA_HMASK = highMask('a', 'z') | highMask('A', 'Z');\n+\n+    private static final long HEXDIG_LMASK = DIGIT_LMASK | lowMask('a', 'f') | lowMask('A', 'F');\n+    private static final long HEXDIG_HMASK = DIGIT_HMASK | highMask('a', 'f') | highMask('A', 'F');\n+\n+    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n+    private static final long UNRESERVED_LMASK = ALPHA_LMASK | DIGIT_LMASK | lowMask(\"-._~\");\n+    private static final long UNRESERVED_HMASK = ALPHA_HMASK | DIGIT_HMASK | highMask(\"-._~\");\n+\n+    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n+    //                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n+    private static final long SUBDELIM_LMASK = lowMask(\"!$&'()*+,;=\");\n+    private static final long SUBDELIM_HMASK = highMask(\"!$&'()*+,;=\");\n+\n+    // pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n+    private static final long PCHAR_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\";@\");\n+\n+    private static final long PCHAR_NOSUBDELIM_LMASK = UNRESERVED_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_NOSUBDELIM_HMASK = UNRESERVED_HMASK | highMask(\";@\");\n+\n+    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n+    static final long USERINFO_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\":\");\n+    static final long USERINFO_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\":\");\n+\n+    // path        = *(pchar / \"/\")\n+    static final long PATH_LMASK = PCHAR_LMASK | lowMask(\"/\");\n+    static final long PATH_HMASK = PCHAR_HMASK | highMask(\"/\");\n+\n+    static final long PATH_SEGMENT_LMASK = PCHAR_LMASK;\n+    static final long PATH_SEGMENT_HMASK = PCHAR_HMASK;\n+\n+    // query       = *( pchar / \"/\" / \"?\" )\n+    static final long QUERY_LMASK = PCHAR_LMASK | lowMask(\"/?\");\n+    static final long QUERY_HMASK = PCHAR_HMASK | highMask(\"/?\");\n+\n+    static final long QUERY_VALUE_LMASK = PCHAR_NOSUBDELIM_LMASK | lowMask(\"/?\");\n+    static final long QUERY_VALUE_HMASK = PCHAR_NOSUBDELIM_HMASK | highMask(\"/?\");\n+\n+    // fragment    = *( pchar / \"/\" / \"?\" )\n+    static final long FRAGMENT_LMASK = QUERY_LMASK;\n+    static final long FRAGMENT_HMASK = QUERY_HMASK;\n+\n+    // host        = IP-literal / IPv4address / reg-name\n+    // reg-name    = *( unreserved / pct-encoded / sub-delims )\n+    static final long HOST_NON_IP_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK;\n+    static final long HOST_NON_IP_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK;\n+\n+    private UriUtils() {\n+    }\n+\n+    /**\n+     * Decode the specified raw query with the specified {@code charset} for the specified maximum number of parameters.\n+     */\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams) {\n+        return decodeQueryParams(rawQuery, charset, maxParams, UriUtils::decodeComponent);\n+    }\n+\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams,\n+                                                       BiFunction<String, Charset, String> decoder) {\n+        if (maxParams <= 0) {\n+            throw new IllegalArgumentException(\"maxParams: \" + maxParams + \" (expected: > 0)\");\n+        }\n+\n+        if (rawQuery == null || rawQuery.isEmpty()) {\n+            return new LinkedHashMap<>(2);\n+        }\n+\n+        final Map<String, List<String>> params = new LinkedHashMap<>();\n+        int paramCountDown = maxParams;\n+        final int from = rawQuery.charAt(0) == '?' ? 1 : 0;\n+        final int len = rawQuery.length();\n+        int nameStart = from;\n+        int valueStart = -1;\n+        int i;\n+        loop:\n+        for (i = from; i < len; i++) {\n+            switch (rawQuery.charAt(i)) {\n+                case '=':\n+                    if (nameStart == i) {\n+                        nameStart = i + 1;\n+                    } else if (valueStart < nameStart) {\n+                        valueStart = i + 1;\n+                    }\n+                    break;\n+                case '&':\n+                case ';':\n+                    if (addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder)) {\n+                        paramCountDown--;\n+                        if (paramCountDown == 0) {\n+                            return params;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDQ1NTEzNg==", "bodyText": "The preservePctEncoding param is always true, is it necessary?\nIf it makes sense to keep it for future, consider adding a private overload with the 3rd parameter, but exposing an overload without it for pkg-private scope.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514455136", "createdAt": "2020-10-29T17:52:36Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpAuthorityFormUri.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.nio.charset.Charset;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.UriComponentType.HOST_NON_IP;\n+import static io.servicetalk.http.api.UriUtils.decodeComponent;\n+import static io.servicetalk.http.api.UriUtils.encodeComponent;\n+import static io.servicetalk.http.api.UriUtils.parsePort;\n+\n+/**\n+ * <a href=\"https://tools.ietf.org/html/rfc7230#section-5.3.3\">authority-form</a> URI.\n+ */\n+final class HttpAuthorityFormUri implements Uri {\n+    private final String uri;\n+    private final String host;\n+    private final int port;\n+\n+    HttpAuthorityFormUri(final String uri) {\n+        int i = 0;\n+        int begin = 0;\n+        String parsedHost = null;\n+        int parsedPort = -1;\n+        byte parsingIPv6 = 0; // 0 = not parsed, 1 = parsing, 2 = already parsed\n+        boolean foundColonForPort = false;\n+        while (i < uri.length()) {\n+            final char c = uri.charAt(i);\n+            if (c == '[') {\n+                if (parsingIPv6 != 0 || parsedHost != null) {\n+                    throw new IllegalArgumentException(\"unexpected [\");\n+                }\n+                parsingIPv6 = 1;\n+                begin = i++; // post increment, preserve the '[' for original uri for pathEndIndex.\n+            } else if (c == ']') {\n+                if (parsingIPv6 == 0) {\n+                    throw new IllegalArgumentException(\"unexpected ]\");\n+                } else if (i - 1 <= begin) {\n+                    throw new IllegalArgumentException(\"empty ip literal\");\n+                }\n+                // Copy the '[' and ']' characters. pathEndIndex depends upon retaining the uri contents.\n+                parsedHost = uri.substring(begin, i + 1);\n+                foundColonForPort = false;\n+                parsingIPv6 = 2;\n+                begin = ++i;\n+            } else if (c == ':') {\n+                if (parsingIPv6 == 0) {\n+                    if (parsedHost != null) {\n+                        throw new IllegalArgumentException(\"duplicate/invalid host\");\n+                    }\n+                    parsedHost = uri.substring(begin, i);\n+                }\n+                ++i;\n+                if (parsingIPv6 != 1) {\n+                    begin = i;\n+                    foundColonForPort = true;\n+                }\n+            } else if (c == '@' || c == '?' || c == '#' || c == '/') {\n+                throw new IllegalArgumentException(\"authority-form URI doesn't allow userinfo, path, query, fragment\");\n+            } else {\n+                ++i;\n+            }\n+        }\n+\n+        if (parsedHost == null) {\n+            if (parsingIPv6 == 1) {\n+                throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+            }\n+            parsedHost = uri;\n+        } else if (foundColonForPort) {\n+            parsedPort = parsePort(uri, begin, uri.length());\n+        } else if (parsedHost.length() != uri.length()) {\n+            throw new IllegalArgumentException(\"authority-form URI only supports the host component\");\n+        }\n+\n+        host = parsedHost;\n+        port = parsedPort;\n+        this.uri = uri;\n+    }\n+\n+    @Override\n+    public String uri() {\n+        return uri;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String scheme() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String authority() {\n+        StringBuilder sb = new StringBuilder(host.length() + 6); // 6 max port chars + `:`\n+        sb.append(host);\n+        if (port >= 0) {\n+            sb.append(':').append(port);\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String userInfo() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String host() {\n+        return host;\n+    }\n+\n+    @Override\n+    public int port() {\n+        return port;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    public String path(final Charset charset) {\n+        return \"\";\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String query() {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String query(final Charset charset) {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String fragment() {\n+        return null;\n+    }\n+\n+    static String encode(String requestTarget, Charset charset, boolean preservePctEncoding) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDUxNTE0MA==", "bodyText": "Consider also including the parsedHostHeader value in the msg.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514515140", "createdAt": "2020-10-29T19:34:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -269,78 +383,131 @@ public boolean removeQueryParameters(final String key, final String value) {\n         return lazyParseQueryString().remove(key, value);\n     }\n \n-    @Nullable\n-    @Override\n-    public final String effectiveHost() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestHost;\n-    }\n-\n     @Override\n-    public final int effectivePort() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestPort;\n+    public HostAndPort effectiveHostAndPort() {\n+        final CharSequence hostHeader;\n+        final Uri effectiveRequestUri = lazyParseRequestTarget();\n+        final String effectiveRequestUriHost = effectiveRequestUri.host();\n+        if (effectiveRequestUriHost != null) {\n+            return HostAndPort.of(effectiveRequestUriHost, effectiveRequestUri.port());\n+        } else if ((hostHeader = headers().get(HOST)) != null) {\n+            return parseHostHeader(hostHeader.toString());\n+        }\n+        return null;\n     }\n \n     private HttpQuery lazyParseQueryString() {\n         if (httpQuery == null) {\n-            httpQuery = new HttpQuery(decodeParams(lazyParseRequestTarget().rawQuery()), this::setQueryParams);\n+            httpQuery = new HttpQuery(decodeQueryParams(lazyParseRequestTarget().query(),\n+                    REQUEST_TARGET_CHARSET, DEFAULT_MAX_QUERY_PARAMS), this::setQueryParams);\n         }\n         return httpQuery;\n     }\n \n-    private HttpUri lazyParseRequestTarget() {\n+    private Uri lazyParseRequestTarget() {\n         if (requestTargetUri == null) {\n-            requestTargetUri = new HttpUri(requestTarget());\n+            requestTargetUri = CONNECT.equals(method) ? new HttpAuthorityFormUri(requestTarget()) :\n+                    new Uri3986(requestTarget());\n         }\n         return requestTargetUri;\n     }\n \n-    private void lazyParseEffectiveRequest() {\n-        final CharSequence hostHeader = headers().get(HOST);\n-\n-        if (effectiveRequestPort == PORT_NOT_ASSIGNED || !Objects.equals(hostHeader, effectiveRequestHostHeader)) {\n-            final HttpUri effectiveRequestUri = new HttpUri(requestTarget(),\n-                    () -> hostHeader != null ? hostHeader.toString() : null);\n-            effectiveRequestHost = effectiveRequestUri.host();\n-            effectiveRequestPort = effectiveRequestUri.explicitPort();\n-            effectiveRequestHostHeader = hostHeader;\n+    private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        String parsedHost;\n+        int parsedPort = -1;\n+        final int x = parsedHostHeader.lastIndexOf(':');\n+        if (x > 0) {\n+            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n+            if (y >= 0) {\n+                // IPv6 address is present in the header\n+                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+                // A host identified by an Internet Protocol literal address, version 6\n+                // [RFC3513] or later, is distinguished by enclosing the IP literal\n+                // within square brackets (\"[\" and \"]\").  This is the only place where\n+                // square bracket characters are allowed in the URI syntax.\n+                final int cb;\n+                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {\n+                    throw new IllegalArgumentException(\"IPv6 address should be in square brackets\");\n+                }\n+                if (cb < x) {\n+                    parsedHost = parsedHostHeader.substring(0, x);\n+                    parsedPort = parsePort(parsedHostHeader, x + 1, parsedHostHeader.length());\n+                } else if (cb != parsedHostHeader.length() - 1) {\n+                    throw new IllegalArgumentException(\n+                            \"']' should be at the end of IPv6 address or before port number\");\n+                } else {\n+                    parsedHost = parsedHostHeader;\n+                }\n+            } else {\n+                // IPv4 or literal host with port number\n+                parsedHost = parsedHostHeader.substring(0, x);\n+                parsedPort = parsePort(parsedHostHeader, x + 1, parsedHostHeader.length());\n+            }\n+        } else if (x < 0) {\n+            parsedHost = parsedHostHeader;\n+        } else {\n+            throw new IllegalArgumentException(\"Illegal position of colon in the host header\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NzM5NA==", "bodyText": "Consider providing a port number in the message and the expected values", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514587394", "createdAt": "2020-10-29T21:47:53Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/UriUtils.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import javax.annotation.Nullable;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+final class UriUtils {\n+    // https://tools.ietf.org/html/rfc3986 declares that all delimiter/terminal values are US-ASCII\n+    // https://tools.ietf.org/html/rfc3986#section-2. This means values fall within the [0, 127] range. This range\n+    // can be represented as a bitset/bitmask with two longs (high, low), which reduces the amount of conditional\n+    // statements required to validate characters belonging to each character class. The following final variables\n+    // provide the bitmask for the different character classes defined in rfc3986, and isBitSet can be used to verify if\n+    // a bit is set for a particular (high, low) mask pair.\n+    //\n+    // pct-encoded is omitted below. This criteria is asserted outside this scope because it requires checking multiple\n+    // bytes and advancing the loop index accordingly.\n+\n+    private static final long DIGIT_LMASK = lowMask('0', '9');\n+    private static final long DIGIT_HMASK = highMask('0', '9');\n+\n+    private static final long ALPHA_LMASK = lowMask('a', 'z') | lowMask('A', 'Z');\n+    private static final long ALPHA_HMASK = highMask('a', 'z') | highMask('A', 'Z');\n+\n+    private static final long HEXDIG_LMASK = DIGIT_LMASK | lowMask('a', 'f') | lowMask('A', 'F');\n+    private static final long HEXDIG_HMASK = DIGIT_HMASK | highMask('a', 'f') | highMask('A', 'F');\n+\n+    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n+    private static final long UNRESERVED_LMASK = ALPHA_LMASK | DIGIT_LMASK | lowMask(\"-._~\");\n+    private static final long UNRESERVED_HMASK = ALPHA_HMASK | DIGIT_HMASK | highMask(\"-._~\");\n+\n+    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n+    //                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n+    private static final long SUBDELIM_LMASK = lowMask(\"!$&'()*+,;=\");\n+    private static final long SUBDELIM_HMASK = highMask(\"!$&'()*+,;=\");\n+\n+    // pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n+    private static final long PCHAR_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\";@\");\n+\n+    private static final long PCHAR_NOSUBDELIM_LMASK = UNRESERVED_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_NOSUBDELIM_HMASK = UNRESERVED_HMASK | highMask(\";@\");\n+\n+    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n+    static final long USERINFO_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\":\");\n+    static final long USERINFO_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\":\");\n+\n+    // path        = *(pchar / \"/\")\n+    static final long PATH_LMASK = PCHAR_LMASK | lowMask(\"/\");\n+    static final long PATH_HMASK = PCHAR_HMASK | highMask(\"/\");\n+\n+    static final long PATH_SEGMENT_LMASK = PCHAR_LMASK;\n+    static final long PATH_SEGMENT_HMASK = PCHAR_HMASK;\n+\n+    // query       = *( pchar / \"/\" / \"?\" )\n+    static final long QUERY_LMASK = PCHAR_LMASK | lowMask(\"/?\");\n+    static final long QUERY_HMASK = PCHAR_HMASK | highMask(\"/?\");\n+\n+    static final long QUERY_VALUE_LMASK = PCHAR_NOSUBDELIM_LMASK | lowMask(\"/?\");\n+    static final long QUERY_VALUE_HMASK = PCHAR_NOSUBDELIM_HMASK | highMask(\"/?\");\n+\n+    // fragment    = *( pchar / \"/\" / \"?\" )\n+    static final long FRAGMENT_LMASK = QUERY_LMASK;\n+    static final long FRAGMENT_HMASK = QUERY_HMASK;\n+\n+    // host        = IP-literal / IPv4address / reg-name\n+    // reg-name    = *( unreserved / pct-encoded / sub-delims )\n+    static final long HOST_NON_IP_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK;\n+    static final long HOST_NON_IP_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK;\n+\n+    private UriUtils() {\n+    }\n+\n+    /**\n+     * Decode the specified raw query with the specified {@code charset} for the specified maximum number of parameters.\n+     */\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams) {\n+        return decodeQueryParams(rawQuery, charset, maxParams, UriUtils::decodeComponent);\n+    }\n+\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams,\n+                                                       BiFunction<String, Charset, String> decoder) {\n+        if (maxParams <= 0) {\n+            throw new IllegalArgumentException(\"maxParams: \" + maxParams + \" (expected: > 0)\");\n+        }\n+\n+        if (rawQuery == null || rawQuery.isEmpty()) {\n+            return new LinkedHashMap<>(2);\n+        }\n+\n+        final Map<String, List<String>> params = new LinkedHashMap<>();\n+        int paramCountDown = maxParams;\n+        final int from = rawQuery.charAt(0) == '?' ? 1 : 0;\n+        final int len = rawQuery.length();\n+        int nameStart = from;\n+        int valueStart = -1;\n+        int i;\n+        loop:\n+        for (i = from; i < len; i++) {\n+            switch (rawQuery.charAt(i)) {\n+                case '=':\n+                    if (nameStart == i) {\n+                        nameStart = i + 1;\n+                    } else if (valueStart < nameStart) {\n+                        valueStart = i + 1;\n+                    }\n+                    break;\n+                case '&':\n+                case ';':\n+                    if (addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder)) {\n+                        paramCountDown--;\n+                        if (paramCountDown == 0) {\n+                            return params;\n+                        }\n+                    }\n+                    nameStart = i + 1;\n+                    break;\n+                case '#':\n+                    break loop;\n+                default:\n+                    // continue\n+            }\n+        }\n+        addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder);\n+        return params;\n+    }\n+\n+    static String encodeComponent(UriComponentType type, String component, Charset charset,\n+                                  boolean preservePctEncoded) {\n+        byte[] bytes = component.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (type.isValid(b)) {\n+                // noop\n+            } else if (preservePctEncoded && bytes.length - 3 >= i && isPctEncoded(bytes, b, i)) {\n+                i += 2; // only increment by 2 here, the for loop will increment 1 more\n+            } else {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length + 16);\n+                baos.write(bytes, 0, i);\n+                encodeHexDigits(baos, b);\n+                for (int j = i + 1; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (type.isValid(b)) {\n+                        baos.write(b);\n+                    } else if (preservePctEncoded && bytes.length - 3 >= j && isPctEncoded(bytes, b, j)) {\n+                        baos.write(bytes, j, 3);\n+                        j += 2; // only increment by 2 here, the for loop will increment 1 more\n+                    } else {\n+                        encodeHexDigits(baos, b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+        return component;\n+    }\n+\n+    static String decodeComponent(final String s, final Charset charset) {\n+        if (s.indexOf('%') < 0) {\n+            return s;\n+        }\n+        byte[] bytes = s.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (b == '%') {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);\n+                baos.write(bytes, 0, i);\n+                baos.write(decodeHexDigits(bytes, i));\n+                for (int j = i + 3; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (b == '%') {\n+                        baos.write(decodeHexDigits(bytes, j));\n+                        j += 2;\n+                    } else {\n+                        baos.write(b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+\n+        return s;\n+    }\n+\n+    static int parsePort(final String uri, final int begin, final int end) {\n+        final int len = end - begin;\n+        if (len == 4) {\n+            return (1000 * toDecimal(uri.charAt(begin))) +\n+                    (100 * toDecimal(uri.charAt(begin + 1))) +\n+                    (10 * toDecimal(uri.charAt(begin + 2))) +\n+                    toDecimal(uri.charAt(begin + 3));\n+        } else if (len == 3) {\n+            return (100 * toDecimal(uri.charAt(begin))) +\n+                    (10 * toDecimal(uri.charAt(begin + 1))) +\n+                    toDecimal(uri.charAt(begin + 2));\n+        } else if (len == 2) {\n+            return (10 * toDecimal(uri.charAt(begin))) +\n+                    toDecimal(uri.charAt(begin + 1));\n+        } else if (len == 5) {\n+            final int port = (10000 * toDecimal(uri.charAt(begin))) +\n+                    (1000 * toDecimal(uri.charAt(begin + 1))) +\n+                    (100 * toDecimal(uri.charAt(begin + 2))) +\n+                    (10 * toDecimal(uri.charAt(begin + 3))) +\n+                    toDecimal(uri.charAt(begin + 4));\n+            if (port > 65535) {\n+                throw new IllegalArgumentException(\"port out of bounds\");\n+            }\n+            return port;\n+        } else if (len == 1) {\n+            return toDecimal(uri.charAt(begin));\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NzQ5NA==", "bodyText": "Consider providing a port number in the message and the expected values", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514587494", "createdAt": "2020-10-29T21:48:07Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/UriUtils.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import javax.annotation.Nullable;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+final class UriUtils {\n+    // https://tools.ietf.org/html/rfc3986 declares that all delimiter/terminal values are US-ASCII\n+    // https://tools.ietf.org/html/rfc3986#section-2. This means values fall within the [0, 127] range. This range\n+    // can be represented as a bitset/bitmask with two longs (high, low), which reduces the amount of conditional\n+    // statements required to validate characters belonging to each character class. The following final variables\n+    // provide the bitmask for the different character classes defined in rfc3986, and isBitSet can be used to verify if\n+    // a bit is set for a particular (high, low) mask pair.\n+    //\n+    // pct-encoded is omitted below. This criteria is asserted outside this scope because it requires checking multiple\n+    // bytes and advancing the loop index accordingly.\n+\n+    private static final long DIGIT_LMASK = lowMask('0', '9');\n+    private static final long DIGIT_HMASK = highMask('0', '9');\n+\n+    private static final long ALPHA_LMASK = lowMask('a', 'z') | lowMask('A', 'Z');\n+    private static final long ALPHA_HMASK = highMask('a', 'z') | highMask('A', 'Z');\n+\n+    private static final long HEXDIG_LMASK = DIGIT_LMASK | lowMask('a', 'f') | lowMask('A', 'F');\n+    private static final long HEXDIG_HMASK = DIGIT_HMASK | highMask('a', 'f') | highMask('A', 'F');\n+\n+    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n+    private static final long UNRESERVED_LMASK = ALPHA_LMASK | DIGIT_LMASK | lowMask(\"-._~\");\n+    private static final long UNRESERVED_HMASK = ALPHA_HMASK | DIGIT_HMASK | highMask(\"-._~\");\n+\n+    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n+    //                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n+    private static final long SUBDELIM_LMASK = lowMask(\"!$&'()*+,;=\");\n+    private static final long SUBDELIM_HMASK = highMask(\"!$&'()*+,;=\");\n+\n+    // pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n+    private static final long PCHAR_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\";@\");\n+\n+    private static final long PCHAR_NOSUBDELIM_LMASK = UNRESERVED_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_NOSUBDELIM_HMASK = UNRESERVED_HMASK | highMask(\";@\");\n+\n+    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n+    static final long USERINFO_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\":\");\n+    static final long USERINFO_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\":\");\n+\n+    // path        = *(pchar / \"/\")\n+    static final long PATH_LMASK = PCHAR_LMASK | lowMask(\"/\");\n+    static final long PATH_HMASK = PCHAR_HMASK | highMask(\"/\");\n+\n+    static final long PATH_SEGMENT_LMASK = PCHAR_LMASK;\n+    static final long PATH_SEGMENT_HMASK = PCHAR_HMASK;\n+\n+    // query       = *( pchar / \"/\" / \"?\" )\n+    static final long QUERY_LMASK = PCHAR_LMASK | lowMask(\"/?\");\n+    static final long QUERY_HMASK = PCHAR_HMASK | highMask(\"/?\");\n+\n+    static final long QUERY_VALUE_LMASK = PCHAR_NOSUBDELIM_LMASK | lowMask(\"/?\");\n+    static final long QUERY_VALUE_HMASK = PCHAR_NOSUBDELIM_HMASK | highMask(\"/?\");\n+\n+    // fragment    = *( pchar / \"/\" / \"?\" )\n+    static final long FRAGMENT_LMASK = QUERY_LMASK;\n+    static final long FRAGMENT_HMASK = QUERY_HMASK;\n+\n+    // host        = IP-literal / IPv4address / reg-name\n+    // reg-name    = *( unreserved / pct-encoded / sub-delims )\n+    static final long HOST_NON_IP_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK;\n+    static final long HOST_NON_IP_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK;\n+\n+    private UriUtils() {\n+    }\n+\n+    /**\n+     * Decode the specified raw query with the specified {@code charset} for the specified maximum number of parameters.\n+     */\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams) {\n+        return decodeQueryParams(rawQuery, charset, maxParams, UriUtils::decodeComponent);\n+    }\n+\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams,\n+                                                       BiFunction<String, Charset, String> decoder) {\n+        if (maxParams <= 0) {\n+            throw new IllegalArgumentException(\"maxParams: \" + maxParams + \" (expected: > 0)\");\n+        }\n+\n+        if (rawQuery == null || rawQuery.isEmpty()) {\n+            return new LinkedHashMap<>(2);\n+        }\n+\n+        final Map<String, List<String>> params = new LinkedHashMap<>();\n+        int paramCountDown = maxParams;\n+        final int from = rawQuery.charAt(0) == '?' ? 1 : 0;\n+        final int len = rawQuery.length();\n+        int nameStart = from;\n+        int valueStart = -1;\n+        int i;\n+        loop:\n+        for (i = from; i < len; i++) {\n+            switch (rawQuery.charAt(i)) {\n+                case '=':\n+                    if (nameStart == i) {\n+                        nameStart = i + 1;\n+                    } else if (valueStart < nameStart) {\n+                        valueStart = i + 1;\n+                    }\n+                    break;\n+                case '&':\n+                case ';':\n+                    if (addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder)) {\n+                        paramCountDown--;\n+                        if (paramCountDown == 0) {\n+                            return params;\n+                        }\n+                    }\n+                    nameStart = i + 1;\n+                    break;\n+                case '#':\n+                    break loop;\n+                default:\n+                    // continue\n+            }\n+        }\n+        addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder);\n+        return params;\n+    }\n+\n+    static String encodeComponent(UriComponentType type, String component, Charset charset,\n+                                  boolean preservePctEncoded) {\n+        byte[] bytes = component.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (type.isValid(b)) {\n+                // noop\n+            } else if (preservePctEncoded && bytes.length - 3 >= i && isPctEncoded(bytes, b, i)) {\n+                i += 2; // only increment by 2 here, the for loop will increment 1 more\n+            } else {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length + 16);\n+                baos.write(bytes, 0, i);\n+                encodeHexDigits(baos, b);\n+                for (int j = i + 1; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (type.isValid(b)) {\n+                        baos.write(b);\n+                    } else if (preservePctEncoded && bytes.length - 3 >= j && isPctEncoded(bytes, b, j)) {\n+                        baos.write(bytes, j, 3);\n+                        j += 2; // only increment by 2 here, the for loop will increment 1 more\n+                    } else {\n+                        encodeHexDigits(baos, b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+        return component;\n+    }\n+\n+    static String decodeComponent(final String s, final Charset charset) {\n+        if (s.indexOf('%') < 0) {\n+            return s;\n+        }\n+        byte[] bytes = s.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (b == '%') {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);\n+                baos.write(bytes, 0, i);\n+                baos.write(decodeHexDigits(bytes, i));\n+                for (int j = i + 3; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (b == '%') {\n+                        baos.write(decodeHexDigits(bytes, j));\n+                        j += 2;\n+                    } else {\n+                        baos.write(b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+\n+        return s;\n+    }\n+\n+    static int parsePort(final String uri, final int begin, final int end) {\n+        final int len = end - begin;\n+        if (len == 4) {\n+            return (1000 * toDecimal(uri.charAt(begin))) +\n+                    (100 * toDecimal(uri.charAt(begin + 1))) +\n+                    (10 * toDecimal(uri.charAt(begin + 2))) +\n+                    toDecimal(uri.charAt(begin + 3));\n+        } else if (len == 3) {\n+            return (100 * toDecimal(uri.charAt(begin))) +\n+                    (10 * toDecimal(uri.charAt(begin + 1))) +\n+                    toDecimal(uri.charAt(begin + 2));\n+        } else if (len == 2) {\n+            return (10 * toDecimal(uri.charAt(begin))) +\n+                    toDecimal(uri.charAt(begin + 1));\n+        } else if (len == 5) {\n+            final int port = (10000 * toDecimal(uri.charAt(begin))) +\n+                    (1000 * toDecimal(uri.charAt(begin + 1))) +\n+                    (100 * toDecimal(uri.charAt(begin + 2))) +\n+                    (10 * toDecimal(uri.charAt(begin + 3))) +\n+                    toDecimal(uri.charAt(begin + 4));\n+            if (port > 65535) {\n+                throw new IllegalArgumentException(\"port out of bounds\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU4NzYwMQ==", "bodyText": "Consider using switch", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514587601", "createdAt": "2020-10-29T21:48:23Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/UriUtils.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import javax.annotation.Nullable;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+final class UriUtils {\n+    // https://tools.ietf.org/html/rfc3986 declares that all delimiter/terminal values are US-ASCII\n+    // https://tools.ietf.org/html/rfc3986#section-2. This means values fall within the [0, 127] range. This range\n+    // can be represented as a bitset/bitmask with two longs (high, low), which reduces the amount of conditional\n+    // statements required to validate characters belonging to each character class. The following final variables\n+    // provide the bitmask for the different character classes defined in rfc3986, and isBitSet can be used to verify if\n+    // a bit is set for a particular (high, low) mask pair.\n+    //\n+    // pct-encoded is omitted below. This criteria is asserted outside this scope because it requires checking multiple\n+    // bytes and advancing the loop index accordingly.\n+\n+    private static final long DIGIT_LMASK = lowMask('0', '9');\n+    private static final long DIGIT_HMASK = highMask('0', '9');\n+\n+    private static final long ALPHA_LMASK = lowMask('a', 'z') | lowMask('A', 'Z');\n+    private static final long ALPHA_HMASK = highMask('a', 'z') | highMask('A', 'Z');\n+\n+    private static final long HEXDIG_LMASK = DIGIT_LMASK | lowMask('a', 'f') | lowMask('A', 'F');\n+    private static final long HEXDIG_HMASK = DIGIT_HMASK | highMask('a', 'f') | highMask('A', 'F');\n+\n+    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n+    private static final long UNRESERVED_LMASK = ALPHA_LMASK | DIGIT_LMASK | lowMask(\"-._~\");\n+    private static final long UNRESERVED_HMASK = ALPHA_HMASK | DIGIT_HMASK | highMask(\"-._~\");\n+\n+    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n+    //                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n+    private static final long SUBDELIM_LMASK = lowMask(\"!$&'()*+,;=\");\n+    private static final long SUBDELIM_HMASK = highMask(\"!$&'()*+,;=\");\n+\n+    // pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n+    private static final long PCHAR_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\";@\");\n+\n+    private static final long PCHAR_NOSUBDELIM_LMASK = UNRESERVED_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_NOSUBDELIM_HMASK = UNRESERVED_HMASK | highMask(\";@\");\n+\n+    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n+    static final long USERINFO_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\":\");\n+    static final long USERINFO_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\":\");\n+\n+    // path        = *(pchar / \"/\")\n+    static final long PATH_LMASK = PCHAR_LMASK | lowMask(\"/\");\n+    static final long PATH_HMASK = PCHAR_HMASK | highMask(\"/\");\n+\n+    static final long PATH_SEGMENT_LMASK = PCHAR_LMASK;\n+    static final long PATH_SEGMENT_HMASK = PCHAR_HMASK;\n+\n+    // query       = *( pchar / \"/\" / \"?\" )\n+    static final long QUERY_LMASK = PCHAR_LMASK | lowMask(\"/?\");\n+    static final long QUERY_HMASK = PCHAR_HMASK | highMask(\"/?\");\n+\n+    static final long QUERY_VALUE_LMASK = PCHAR_NOSUBDELIM_LMASK | lowMask(\"/?\");\n+    static final long QUERY_VALUE_HMASK = PCHAR_NOSUBDELIM_HMASK | highMask(\"/?\");\n+\n+    // fragment    = *( pchar / \"/\" / \"?\" )\n+    static final long FRAGMENT_LMASK = QUERY_LMASK;\n+    static final long FRAGMENT_HMASK = QUERY_HMASK;\n+\n+    // host        = IP-literal / IPv4address / reg-name\n+    // reg-name    = *( unreserved / pct-encoded / sub-delims )\n+    static final long HOST_NON_IP_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK;\n+    static final long HOST_NON_IP_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK;\n+\n+    private UriUtils() {\n+    }\n+\n+    /**\n+     * Decode the specified raw query with the specified {@code charset} for the specified maximum number of parameters.\n+     */\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams) {\n+        return decodeQueryParams(rawQuery, charset, maxParams, UriUtils::decodeComponent);\n+    }\n+\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams,\n+                                                       BiFunction<String, Charset, String> decoder) {\n+        if (maxParams <= 0) {\n+            throw new IllegalArgumentException(\"maxParams: \" + maxParams + \" (expected: > 0)\");\n+        }\n+\n+        if (rawQuery == null || rawQuery.isEmpty()) {\n+            return new LinkedHashMap<>(2);\n+        }\n+\n+        final Map<String, List<String>> params = new LinkedHashMap<>();\n+        int paramCountDown = maxParams;\n+        final int from = rawQuery.charAt(0) == '?' ? 1 : 0;\n+        final int len = rawQuery.length();\n+        int nameStart = from;\n+        int valueStart = -1;\n+        int i;\n+        loop:\n+        for (i = from; i < len; i++) {\n+            switch (rawQuery.charAt(i)) {\n+                case '=':\n+                    if (nameStart == i) {\n+                        nameStart = i + 1;\n+                    } else if (valueStart < nameStart) {\n+                        valueStart = i + 1;\n+                    }\n+                    break;\n+                case '&':\n+                case ';':\n+                    if (addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder)) {\n+                        paramCountDown--;\n+                        if (paramCountDown == 0) {\n+                            return params;\n+                        }\n+                    }\n+                    nameStart = i + 1;\n+                    break;\n+                case '#':\n+                    break loop;\n+                default:\n+                    // continue\n+            }\n+        }\n+        addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder);\n+        return params;\n+    }\n+\n+    static String encodeComponent(UriComponentType type, String component, Charset charset,\n+                                  boolean preservePctEncoded) {\n+        byte[] bytes = component.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (type.isValid(b)) {\n+                // noop\n+            } else if (preservePctEncoded && bytes.length - 3 >= i && isPctEncoded(bytes, b, i)) {\n+                i += 2; // only increment by 2 here, the for loop will increment 1 more\n+            } else {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length + 16);\n+                baos.write(bytes, 0, i);\n+                encodeHexDigits(baos, b);\n+                for (int j = i + 1; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (type.isValid(b)) {\n+                        baos.write(b);\n+                    } else if (preservePctEncoded && bytes.length - 3 >= j && isPctEncoded(bytes, b, j)) {\n+                        baos.write(bytes, j, 3);\n+                        j += 2; // only increment by 2 here, the for loop will increment 1 more\n+                    } else {\n+                        encodeHexDigits(baos, b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+        return component;\n+    }\n+\n+    static String decodeComponent(final String s, final Charset charset) {\n+        if (s.indexOf('%') < 0) {\n+            return s;\n+        }\n+        byte[] bytes = s.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (b == '%') {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);\n+                baos.write(bytes, 0, i);\n+                baos.write(decodeHexDigits(bytes, i));\n+                for (int j = i + 3; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (b == '%') {\n+                        baos.write(decodeHexDigits(bytes, j));\n+                        j += 2;\n+                    } else {\n+                        baos.write(b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+\n+        return s;\n+    }\n+\n+    static int parsePort(final String uri, final int begin, final int end) {\n+        final int len = end - begin;\n+        if (len == 4) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MTcwNA==", "bodyText": "This type of exceptions are very hard to debug. Will be great to include the full port-number here or try-catch the IllegalArgumentException at higher levels to enhance it with the full port (or full host header) value.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514591704", "createdAt": "2020-10-29T21:57:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/UriUtils.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import javax.annotation.Nullable;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+final class UriUtils {\n+    // https://tools.ietf.org/html/rfc3986 declares that all delimiter/terminal values are US-ASCII\n+    // https://tools.ietf.org/html/rfc3986#section-2. This means values fall within the [0, 127] range. This range\n+    // can be represented as a bitset/bitmask with two longs (high, low), which reduces the amount of conditional\n+    // statements required to validate characters belonging to each character class. The following final variables\n+    // provide the bitmask for the different character classes defined in rfc3986, and isBitSet can be used to verify if\n+    // a bit is set for a particular (high, low) mask pair.\n+    //\n+    // pct-encoded is omitted below. This criteria is asserted outside this scope because it requires checking multiple\n+    // bytes and advancing the loop index accordingly.\n+\n+    private static final long DIGIT_LMASK = lowMask('0', '9');\n+    private static final long DIGIT_HMASK = highMask('0', '9');\n+\n+    private static final long ALPHA_LMASK = lowMask('a', 'z') | lowMask('A', 'Z');\n+    private static final long ALPHA_HMASK = highMask('a', 'z') | highMask('A', 'Z');\n+\n+    private static final long HEXDIG_LMASK = DIGIT_LMASK | lowMask('a', 'f') | lowMask('A', 'F');\n+    private static final long HEXDIG_HMASK = DIGIT_HMASK | highMask('a', 'f') | highMask('A', 'F');\n+\n+    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n+    private static final long UNRESERVED_LMASK = ALPHA_LMASK | DIGIT_LMASK | lowMask(\"-._~\");\n+    private static final long UNRESERVED_HMASK = ALPHA_HMASK | DIGIT_HMASK | highMask(\"-._~\");\n+\n+    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n+    //                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n+    private static final long SUBDELIM_LMASK = lowMask(\"!$&'()*+,;=\");\n+    private static final long SUBDELIM_HMASK = highMask(\"!$&'()*+,;=\");\n+\n+    // pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n+    private static final long PCHAR_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\";@\");\n+\n+    private static final long PCHAR_NOSUBDELIM_LMASK = UNRESERVED_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_NOSUBDELIM_HMASK = UNRESERVED_HMASK | highMask(\";@\");\n+\n+    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n+    static final long USERINFO_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\":\");\n+    static final long USERINFO_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\":\");\n+\n+    // path        = *(pchar / \"/\")\n+    static final long PATH_LMASK = PCHAR_LMASK | lowMask(\"/\");\n+    static final long PATH_HMASK = PCHAR_HMASK | highMask(\"/\");\n+\n+    static final long PATH_SEGMENT_LMASK = PCHAR_LMASK;\n+    static final long PATH_SEGMENT_HMASK = PCHAR_HMASK;\n+\n+    // query       = *( pchar / \"/\" / \"?\" )\n+    static final long QUERY_LMASK = PCHAR_LMASK | lowMask(\"/?\");\n+    static final long QUERY_HMASK = PCHAR_HMASK | highMask(\"/?\");\n+\n+    static final long QUERY_VALUE_LMASK = PCHAR_NOSUBDELIM_LMASK | lowMask(\"/?\");\n+    static final long QUERY_VALUE_HMASK = PCHAR_NOSUBDELIM_HMASK | highMask(\"/?\");\n+\n+    // fragment    = *( pchar / \"/\" / \"?\" )\n+    static final long FRAGMENT_LMASK = QUERY_LMASK;\n+    static final long FRAGMENT_HMASK = QUERY_HMASK;\n+\n+    // host        = IP-literal / IPv4address / reg-name\n+    // reg-name    = *( unreserved / pct-encoded / sub-delims )\n+    static final long HOST_NON_IP_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK;\n+    static final long HOST_NON_IP_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK;\n+\n+    private UriUtils() {\n+    }\n+\n+    /**\n+     * Decode the specified raw query with the specified {@code charset} for the specified maximum number of parameters.\n+     */\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams) {\n+        return decodeQueryParams(rawQuery, charset, maxParams, UriUtils::decodeComponent);\n+    }\n+\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams,\n+                                                       BiFunction<String, Charset, String> decoder) {\n+        if (maxParams <= 0) {\n+            throw new IllegalArgumentException(\"maxParams: \" + maxParams + \" (expected: > 0)\");\n+        }\n+\n+        if (rawQuery == null || rawQuery.isEmpty()) {\n+            return new LinkedHashMap<>(2);\n+        }\n+\n+        final Map<String, List<String>> params = new LinkedHashMap<>();\n+        int paramCountDown = maxParams;\n+        final int from = rawQuery.charAt(0) == '?' ? 1 : 0;\n+        final int len = rawQuery.length();\n+        int nameStart = from;\n+        int valueStart = -1;\n+        int i;\n+        loop:\n+        for (i = from; i < len; i++) {\n+            switch (rawQuery.charAt(i)) {\n+                case '=':\n+                    if (nameStart == i) {\n+                        nameStart = i + 1;\n+                    } else if (valueStart < nameStart) {\n+                        valueStart = i + 1;\n+                    }\n+                    break;\n+                case '&':\n+                case ';':\n+                    if (addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder)) {\n+                        paramCountDown--;\n+                        if (paramCountDown == 0) {\n+                            return params;\n+                        }\n+                    }\n+                    nameStart = i + 1;\n+                    break;\n+                case '#':\n+                    break loop;\n+                default:\n+                    // continue\n+            }\n+        }\n+        addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder);\n+        return params;\n+    }\n+\n+    static String encodeComponent(UriComponentType type, String component, Charset charset,\n+                                  boolean preservePctEncoded) {\n+        byte[] bytes = component.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (type.isValid(b)) {\n+                // noop\n+            } else if (preservePctEncoded && bytes.length - 3 >= i && isPctEncoded(bytes, b, i)) {\n+                i += 2; // only increment by 2 here, the for loop will increment 1 more\n+            } else {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length + 16);\n+                baos.write(bytes, 0, i);\n+                encodeHexDigits(baos, b);\n+                for (int j = i + 1; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (type.isValid(b)) {\n+                        baos.write(b);\n+                    } else if (preservePctEncoded && bytes.length - 3 >= j && isPctEncoded(bytes, b, j)) {\n+                        baos.write(bytes, j, 3);\n+                        j += 2; // only increment by 2 here, the for loop will increment 1 more\n+                    } else {\n+                        encodeHexDigits(baos, b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+        return component;\n+    }\n+\n+    static String decodeComponent(final String s, final Charset charset) {\n+        if (s.indexOf('%') < 0) {\n+            return s;\n+        }\n+        byte[] bytes = s.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (b == '%') {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);\n+                baos.write(bytes, 0, i);\n+                baos.write(decodeHexDigits(bytes, i));\n+                for (int j = i + 3; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (b == '%') {\n+                        baos.write(decodeHexDigits(bytes, j));\n+                        j += 2;\n+                    } else {\n+                        baos.write(b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+\n+        return s;\n+    }\n+\n+    static int parsePort(final String uri, final int begin, final int end) {\n+        final int len = end - begin;\n+        if (len == 4) {\n+            return (1000 * toDecimal(uri.charAt(begin))) +\n+                    (100 * toDecimal(uri.charAt(begin + 1))) +\n+                    (10 * toDecimal(uri.charAt(begin + 2))) +\n+                    toDecimal(uri.charAt(begin + 3));\n+        } else if (len == 3) {\n+            return (100 * toDecimal(uri.charAt(begin))) +\n+                    (10 * toDecimal(uri.charAt(begin + 1))) +\n+                    toDecimal(uri.charAt(begin + 2));\n+        } else if (len == 2) {\n+            return (10 * toDecimal(uri.charAt(begin))) +\n+                    toDecimal(uri.charAt(begin + 1));\n+        } else if (len == 5) {\n+            final int port = (10000 * toDecimal(uri.charAt(begin))) +\n+                    (1000 * toDecimal(uri.charAt(begin + 1))) +\n+                    (100 * toDecimal(uri.charAt(begin + 2))) +\n+                    (10 * toDecimal(uri.charAt(begin + 3))) +\n+                    toDecimal(uri.charAt(begin + 4));\n+            if (port > 65535) {\n+                throw new IllegalArgumentException(\"port out of bounds\");\n+            }\n+            return port;\n+        } else if (len == 1) {\n+            return toDecimal(uri.charAt(begin));\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port\");\n+        }\n+    }\n+\n+    private static boolean addQueryParam(final String s, final int nameStart, int valueStart, final int valueEnd,\n+                                         final Charset charset, final Map<String, List<String>> params,\n+                                         final BiFunction<String, Charset, String> decoder) {\n+        if (nameStart >= valueEnd) {\n+            return false;\n+        }\n+        if (valueStart <= nameStart) {\n+            valueStart = valueEnd + 1;\n+        }\n+        final String name = decoder.apply(s.substring(nameStart, valueStart - 1), charset);\n+        final String value = decoder.apply(s.substring(valueStart, valueEnd), charset);\n+        final List<String> values = params.computeIfAbsent(name, k -> new ArrayList<>(1)); // Often there's only 1 value\n+        values.add(value);\n+        return true;\n+    }\n+\n+    private static void encodeHexDigits(ByteArrayOutputStream baos, byte b) {\n+        baos.write('%');\n+        baos.write(encodeHexNibble((b >>> 4) & 0xF));\n+        baos.write(encodeHexNibble(b & 0xF));\n+    }\n+\n+    private static byte decodeHexDigits(byte[] bytes, int i) {\n+        if (bytes.length - 2 <= i) {\n+            throw new IllegalArgumentException(\"Invalid pct-encoded at index \" + i);\n+        }\n+        final int hi = decodeHexNibble(bytes[i + 1]);\n+        final int lo = decodeHexNibble(bytes[i + 2]);\n+        if (hi == -1 || lo == -1) {\n+            throw new IllegalArgumentException(\"Invalid HEXDIG at index \" + i);\n+        }\n+        return (byte) ((hi << 4) + lo);\n+    }\n+\n+    private static byte encodeHexNibble(final int b) {\n+        // Character.forDigit() is not used here, as it addresses a larger\n+        // set of characters (both ASCII and full-width latin letters).\n+        if (b < 0 || b >= 16) {\n+            return 0;\n+        }\n+        if (b < 10) {\n+            return (byte) ('0' + b);\n+        }\n+        return (byte) ('A' - 10 + b); // uppercase\n+    }\n+\n+    /**\n+     * Helper to decode half of a hexadecimal number from a string.\n+     *\n+     * @param b The ASCII character of the hexadecimal number to decode.\n+     * Must be in the range {@code [0-9a-fA-F]}.\n+     * @return The hexadecimal value represented in the ASCII character\n+     * given, or {@code -1} if the character is invalid.\n+     */\n+    private static int decodeHexNibble(final byte b) {\n+        // Character.digit() is not used here, as it addresses a larger\n+        // set of characters (both ASCII and full-width latin letters).\n+        if (b >= '0' && b <= '9') {\n+            return b - '0';\n+        }\n+        if (b >= 'A' && b <= 'F') {\n+            return b - ('A' - 0xA);\n+        }\n+        if (b >= 'a' && b <= 'f') {\n+            return b - ('a' - 0xA);\n+        }\n+        return -1;\n+    }\n+\n+    private static int toDecimal(final char c) {\n+        if (c < '0' || c > '9') {\n+            throw new IllegalArgumentException(\"invalid port\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5MjU4MA==", "bodyText": "Consider taking parsedHostHeader.charAt(x - 1) instead of looking for the last index of ].", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514592580", "createdAt": "2020-10-29T21:59:54Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -269,78 +383,131 @@ public boolean removeQueryParameters(final String key, final String value) {\n         return lazyParseQueryString().remove(key, value);\n     }\n \n-    @Nullable\n-    @Override\n-    public final String effectiveHost() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestHost;\n-    }\n-\n     @Override\n-    public final int effectivePort() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestPort;\n+    public HostAndPort effectiveHostAndPort() {\n+        final CharSequence hostHeader;\n+        final Uri effectiveRequestUri = lazyParseRequestTarget();\n+        final String effectiveRequestUriHost = effectiveRequestUri.host();\n+        if (effectiveRequestUriHost != null) {\n+            return HostAndPort.of(effectiveRequestUriHost, effectiveRequestUri.port());\n+        } else if ((hostHeader = headers().get(HOST)) != null) {\n+            return parseHostHeader(hostHeader.toString());\n+        }\n+        return null;\n     }\n \n     private HttpQuery lazyParseQueryString() {\n         if (httpQuery == null) {\n-            httpQuery = new HttpQuery(decodeParams(lazyParseRequestTarget().rawQuery()), this::setQueryParams);\n+            httpQuery = new HttpQuery(decodeQueryParams(lazyParseRequestTarget().query(),\n+                    REQUEST_TARGET_CHARSET, DEFAULT_MAX_QUERY_PARAMS), this::setQueryParams);\n         }\n         return httpQuery;\n     }\n \n-    private HttpUri lazyParseRequestTarget() {\n+    private Uri lazyParseRequestTarget() {\n         if (requestTargetUri == null) {\n-            requestTargetUri = new HttpUri(requestTarget());\n+            requestTargetUri = CONNECT.equals(method) ? new HttpAuthorityFormUri(requestTarget()) :\n+                    new Uri3986(requestTarget());\n         }\n         return requestTargetUri;\n     }\n \n-    private void lazyParseEffectiveRequest() {\n-        final CharSequence hostHeader = headers().get(HOST);\n-\n-        if (effectiveRequestPort == PORT_NOT_ASSIGNED || !Objects.equals(hostHeader, effectiveRequestHostHeader)) {\n-            final HttpUri effectiveRequestUri = new HttpUri(requestTarget(),\n-                    () -> hostHeader != null ? hostHeader.toString() : null);\n-            effectiveRequestHost = effectiveRequestUri.host();\n-            effectiveRequestPort = effectiveRequestUri.explicitPort();\n-            effectiveRequestHostHeader = hostHeader;\n+    private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        String parsedHost;\n+        int parsedPort = -1;\n+        final int x = parsedHostHeader.lastIndexOf(':');\n+        if (x > 0) {\n+            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n+            if (y >= 0) {\n+                // IPv6 address is present in the header\n+                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+                // A host identified by an Internet Protocol literal address, version 6\n+                // [RFC3513] or later, is distinguished by enclosing the IP literal\n+                // within square brackets (\"[\" and \"]\").  This is the only place where\n+                // square bracket characters are allowed in the URI syntax.\n+                final int cb;\n+                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 391}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5Mjk4Mw==", "bodyText": "Please, include the parsedHostHeader value in the exception msg", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514592983", "createdAt": "2020-10-29T22:00:52Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -269,78 +383,131 @@ public boolean removeQueryParameters(final String key, final String value) {\n         return lazyParseQueryString().remove(key, value);\n     }\n \n-    @Nullable\n-    @Override\n-    public final String effectiveHost() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestHost;\n-    }\n-\n     @Override\n-    public final int effectivePort() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestPort;\n+    public HostAndPort effectiveHostAndPort() {\n+        final CharSequence hostHeader;\n+        final Uri effectiveRequestUri = lazyParseRequestTarget();\n+        final String effectiveRequestUriHost = effectiveRequestUri.host();\n+        if (effectiveRequestUriHost != null) {\n+            return HostAndPort.of(effectiveRequestUriHost, effectiveRequestUri.port());\n+        } else if ((hostHeader = headers().get(HOST)) != null) {\n+            return parseHostHeader(hostHeader.toString());\n+        }\n+        return null;\n     }\n \n     private HttpQuery lazyParseQueryString() {\n         if (httpQuery == null) {\n-            httpQuery = new HttpQuery(decodeParams(lazyParseRequestTarget().rawQuery()), this::setQueryParams);\n+            httpQuery = new HttpQuery(decodeQueryParams(lazyParseRequestTarget().query(),\n+                    REQUEST_TARGET_CHARSET, DEFAULT_MAX_QUERY_PARAMS), this::setQueryParams);\n         }\n         return httpQuery;\n     }\n \n-    private HttpUri lazyParseRequestTarget() {\n+    private Uri lazyParseRequestTarget() {\n         if (requestTargetUri == null) {\n-            requestTargetUri = new HttpUri(requestTarget());\n+            requestTargetUri = CONNECT.equals(method) ? new HttpAuthorityFormUri(requestTarget()) :\n+                    new Uri3986(requestTarget());\n         }\n         return requestTargetUri;\n     }\n \n-    private void lazyParseEffectiveRequest() {\n-        final CharSequence hostHeader = headers().get(HOST);\n-\n-        if (effectiveRequestPort == PORT_NOT_ASSIGNED || !Objects.equals(hostHeader, effectiveRequestHostHeader)) {\n-            final HttpUri effectiveRequestUri = new HttpUri(requestTarget(),\n-                    () -> hostHeader != null ? hostHeader.toString() : null);\n-            effectiveRequestHost = effectiveRequestUri.host();\n-            effectiveRequestPort = effectiveRequestUri.explicitPort();\n-            effectiveRequestHostHeader = hostHeader;\n+    private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        String parsedHost;\n+        int parsedPort = -1;\n+        final int x = parsedHostHeader.lastIndexOf(':');\n+        if (x > 0) {\n+            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n+            if (y >= 0) {\n+                // IPv6 address is present in the header\n+                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+                // A host identified by an Internet Protocol literal address, version 6\n+                // [RFC3513] or later, is distinguished by enclosing the IP literal\n+                // within square brackets (\"[\" and \"]\").  This is the only place where\n+                // square bracket characters are allowed in the URI syntax.\n+                final int cb;\n+                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {\n+                    throw new IllegalArgumentException(\"IPv6 address should be in square brackets\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDU5Mzg4NA==", "bodyText": "It does not verify that ] is next to :", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514593884", "createdAt": "2020-10-29T22:03:21Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -269,78 +383,131 @@ public boolean removeQueryParameters(final String key, final String value) {\n         return lazyParseQueryString().remove(key, value);\n     }\n \n-    @Nullable\n-    @Override\n-    public final String effectiveHost() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestHost;\n-    }\n-\n     @Override\n-    public final int effectivePort() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestPort;\n+    public HostAndPort effectiveHostAndPort() {\n+        final CharSequence hostHeader;\n+        final Uri effectiveRequestUri = lazyParseRequestTarget();\n+        final String effectiveRequestUriHost = effectiveRequestUri.host();\n+        if (effectiveRequestUriHost != null) {\n+            return HostAndPort.of(effectiveRequestUriHost, effectiveRequestUri.port());\n+        } else if ((hostHeader = headers().get(HOST)) != null) {\n+            return parseHostHeader(hostHeader.toString());\n+        }\n+        return null;\n     }\n \n     private HttpQuery lazyParseQueryString() {\n         if (httpQuery == null) {\n-            httpQuery = new HttpQuery(decodeParams(lazyParseRequestTarget().rawQuery()), this::setQueryParams);\n+            httpQuery = new HttpQuery(decodeQueryParams(lazyParseRequestTarget().query(),\n+                    REQUEST_TARGET_CHARSET, DEFAULT_MAX_QUERY_PARAMS), this::setQueryParams);\n         }\n         return httpQuery;\n     }\n \n-    private HttpUri lazyParseRequestTarget() {\n+    private Uri lazyParseRequestTarget() {\n         if (requestTargetUri == null) {\n-            requestTargetUri = new HttpUri(requestTarget());\n+            requestTargetUri = CONNECT.equals(method) ? new HttpAuthorityFormUri(requestTarget()) :\n+                    new Uri3986(requestTarget());\n         }\n         return requestTargetUri;\n     }\n \n-    private void lazyParseEffectiveRequest() {\n-        final CharSequence hostHeader = headers().get(HOST);\n-\n-        if (effectiveRequestPort == PORT_NOT_ASSIGNED || !Objects.equals(hostHeader, effectiveRequestHostHeader)) {\n-            final HttpUri effectiveRequestUri = new HttpUri(requestTarget(),\n-                    () -> hostHeader != null ? hostHeader.toString() : null);\n-            effectiveRequestHost = effectiveRequestUri.host();\n-            effectiveRequestPort = effectiveRequestUri.explicitPort();\n-            effectiveRequestHostHeader = hostHeader;\n+    private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        String parsedHost;\n+        int parsedPort = -1;\n+        final int x = parsedHostHeader.lastIndexOf(':');\n+        if (x > 0) {\n+            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n+            if (y >= 0) {\n+                // IPv6 address is present in the header\n+                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+                // A host identified by an Internet Protocol literal address, version 6\n+                // [RFC3513] or later, is distinguished by enclosing the IP literal\n+                // within square brackets (\"[\" and \"]\").  This is the only place where\n+                // square bracket characters are allowed in the URI syntax.\n+                final int cb;\n+                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {\n+                    throw new IllegalArgumentException(\"IPv6 address should be in square brackets\");\n+                }\n+                if (cb < x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 394}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwMzE1NA==", "bodyText": "In this case x > 0. Therefore, it should never happen. The above suggested changes should cover everything we need.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514603154", "createdAt": "2020-10-29T22:26:53Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -269,78 +383,131 @@ public boolean removeQueryParameters(final String key, final String value) {\n         return lazyParseQueryString().remove(key, value);\n     }\n \n-    @Nullable\n-    @Override\n-    public final String effectiveHost() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestHost;\n-    }\n-\n     @Override\n-    public final int effectivePort() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestPort;\n+    public HostAndPort effectiveHostAndPort() {\n+        final CharSequence hostHeader;\n+        final Uri effectiveRequestUri = lazyParseRequestTarget();\n+        final String effectiveRequestUriHost = effectiveRequestUri.host();\n+        if (effectiveRequestUriHost != null) {\n+            return HostAndPort.of(effectiveRequestUriHost, effectiveRequestUri.port());\n+        } else if ((hostHeader = headers().get(HOST)) != null) {\n+            return parseHostHeader(hostHeader.toString());\n+        }\n+        return null;\n     }\n \n     private HttpQuery lazyParseQueryString() {\n         if (httpQuery == null) {\n-            httpQuery = new HttpQuery(decodeParams(lazyParseRequestTarget().rawQuery()), this::setQueryParams);\n+            httpQuery = new HttpQuery(decodeQueryParams(lazyParseRequestTarget().query(),\n+                    REQUEST_TARGET_CHARSET, DEFAULT_MAX_QUERY_PARAMS), this::setQueryParams);\n         }\n         return httpQuery;\n     }\n \n-    private HttpUri lazyParseRequestTarget() {\n+    private Uri lazyParseRequestTarget() {\n         if (requestTargetUri == null) {\n-            requestTargetUri = new HttpUri(requestTarget());\n+            requestTargetUri = CONNECT.equals(method) ? new HttpAuthorityFormUri(requestTarget()) :\n+                    new Uri3986(requestTarget());\n         }\n         return requestTargetUri;\n     }\n \n-    private void lazyParseEffectiveRequest() {\n-        final CharSequence hostHeader = headers().get(HOST);\n-\n-        if (effectiveRequestPort == PORT_NOT_ASSIGNED || !Objects.equals(hostHeader, effectiveRequestHostHeader)) {\n-            final HttpUri effectiveRequestUri = new HttpUri(requestTarget(),\n-                    () -> hostHeader != null ? hostHeader.toString() : null);\n-            effectiveRequestHost = effectiveRequestUri.host();\n-            effectiveRequestPort = effectiveRequestUri.explicitPort();\n-            effectiveRequestHostHeader = hostHeader;\n+    private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        String parsedHost;\n+        int parsedPort = -1;\n+        final int x = parsedHostHeader.lastIndexOf(':');\n+        if (x > 0) {\n+            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n+            if (y >= 0) {\n+                // IPv6 address is present in the header\n+                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+                // A host identified by an Internet Protocol literal address, version 6\n+                // [RFC3513] or later, is distinguished by enclosing the IP literal\n+                // within square brackets (\"[\" and \"]\").  This is the only place where\n+                // square bracket characters are allowed in the URI syntax.\n+                final int cb;\n+                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {\n+                    throw new IllegalArgumentException(\"IPv6 address should be in square brackets\");\n+                }\n+                if (cb < x) {\n+                    parsedHost = parsedHostHeader.substring(0, x);\n+                    parsedPort = parsePort(parsedHostHeader, x + 1, parsedHostHeader.length());\n+                } else if (cb != parsedHostHeader.length() - 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 397}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYwNjE3MA==", "bodyText": "There is a duplication with rawQuery, rawPath, and setQueryParams methods for the logic between scheme and path, as well as for fragment (and maybe even query). Consider moving those parts to a private utility methods.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514606170", "createdAt": "2020-10-29T22:35:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -121,70 +124,181 @@ public final String host() {\n \n     @Override\n     public final int port() {\n-        return lazyParseRequestTarget().explicitPort();\n+        return lazyParseRequestTarget().port();\n     }\n \n     @Override\n     public final String rawPath() {\n-        return lazyParseRequestTarget().rawPath();\n+        return lazyParseRequestTarget().path();\n     }\n \n     @Override\n     public HttpRequestMetaData rawPath(final String path) {\n+        Uri httpUri = lazyParseRequestTarget();\n+        // Potentially over estimate the size of the URL to avoid resize/copy\n+        StringBuilder sb = new StringBuilder(httpUri.uri().length() + path.length());\n+\n+        // Append everything up to and including the path\n+        if (httpUri.scheme() != null) {\n+            sb.append(httpUri.scheme()).append(':');\n+        }\n+        if (httpUri.host() != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (httpUri.userInfo() != null) {\n+                sb.append(httpUri.userInfo()).append('@');\n+            }\n+\n+            sb.append(httpUri.host());\n+            if (httpUri.port() >= 0) {\n+                sb.append(':').append(httpUri.port());\n+            }\n+        }\n+\n+        // Append the path\n         if (!path.isEmpty() && path.charAt(0) != '/') {\n-            throw new IllegalArgumentException(\"Path must be empty or start with '/'\");\n+            sb.append('/');\n         }\n-        requestTarget(encodeRequestTarget(path, rawQuery(), null));\n-        return this;\n+        sb.append(path);\n+\n+        // Append the query string\n+        String query = httpUri.query();\n+        if (query != null) {\n+            sb.append('?').append(query);\n+        }\n+\n+        // Append the fragment\n+        String fragment = httpUri.fragment();\n+        if (fragment != null) {\n+            sb.append('#').append(fragment);\n+        }\n+\n+        return requestTarget(sb.toString());\n     }\n \n     @Override\n     public final String path() {\n-        return lazyParseRequestTarget().path();\n+        if (pathDecoded != null) {\n+            return pathDecoded;\n+        }\n+        pathDecoded = lazyParseRequestTarget().path(REQUEST_TARGET_CHARSET);\n+        return pathDecoded;\n     }\n \n     @Override\n     public HttpRequestMetaData path(String path) {\n-        if (!path.isEmpty() && path.charAt(0) != '/') {\n-            path = \"/\" + path;\n-        }\n-        // TODO This is an ugly hack!\n-        final String encodedPath = urlEncode(path).replaceAll(\"%2F\", \"/\");\n-        requestTarget(encodeRequestTarget(encodedPath, rawQuery(), null));\n-        return this;\n+        return rawPath(encodeComponent(PATH, path, REQUEST_TARGET_CHARSET, true));\n     }\n \n     @Override\n     public HttpRequestMetaData appendPathSegments(String... segments) {\n         if (segments.length == 0) {\n             throw new IllegalArgumentException(\"At least one path segment must be provided\");\n         }\n+        Uri httpUri = lazyParseRequestTarget();\n+        StringBuilder sb = new StringBuilder(httpUri.uri().length() + segments.length * 8);\n \n-        final String path = path();\n-        final StringBuilder builder = new StringBuilder(path.length() + 8 * segments.length).append(path);\n-        if (!path.isEmpty() && !path.endsWith(\"/\")) {\n-            builder.append('/');\n+        // Append everything up to and including the path\n+        if (httpUri.scheme() != null) {\n+            sb.append(httpUri.scheme()).append(':');\n         }\n-        for (int i = 0; i < segments.length; i++) {\n-            builder.append(urlEncode(segments[i]));\n+        if (httpUri.host() != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (httpUri.userInfo() != null) {\n+                sb.append(httpUri.userInfo()).append('@');\n+            }\n \n-            if (i < (segments.length - 1)) {\n-                builder.append('/');\n+            sb.append(httpUri.host());\n+            if (httpUri.port() >= 0) {\n+                sb.append(':').append(httpUri.port());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMjM0OA==", "bodyText": "Should we require users to begin with / instead of adding it for them?", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514612348", "createdAt": "2020-10-29T22:52:09Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -121,70 +124,181 @@ public final String host() {\n \n     @Override\n     public final int port() {\n-        return lazyParseRequestTarget().explicitPort();\n+        return lazyParseRequestTarget().port();\n     }\n \n     @Override\n     public final String rawPath() {\n-        return lazyParseRequestTarget().rawPath();\n+        return lazyParseRequestTarget().path();\n     }\n \n     @Override\n     public HttpRequestMetaData rawPath(final String path) {\n+        Uri httpUri = lazyParseRequestTarget();\n+        // Potentially over estimate the size of the URL to avoid resize/copy\n+        StringBuilder sb = new StringBuilder(httpUri.uri().length() + path.length());\n+\n+        // Append everything up to and including the path\n+        if (httpUri.scheme() != null) {\n+            sb.append(httpUri.scheme()).append(':');\n+        }\n+        if (httpUri.host() != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (httpUri.userInfo() != null) {\n+                sb.append(httpUri.userInfo()).append('@');\n+            }\n+\n+            sb.append(httpUri.host());\n+            if (httpUri.port() >= 0) {\n+                sb.append(':').append(httpUri.port());\n+            }\n+        }\n+\n+        // Append the path\n         if (!path.isEmpty() && path.charAt(0) != '/') {\n-            throw new IllegalArgumentException(\"Path must be empty or start with '/'\");\n+            sb.append('/');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYxMzE2MA==", "bodyText": "If an authority component is absent, then the path cannot begin with an empty segment, that is with two slashes (//), as the following characters would be interpreted as an authority component.\n\nhttps://en.wikipedia.org/wiki/Uniform_Resource_Identifier#Generic_syntax", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514613160", "createdAt": "2020-10-29T22:54:30Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -121,70 +124,181 @@ public final String host() {\n \n     @Override\n     public final int port() {\n-        return lazyParseRequestTarget().explicitPort();\n+        return lazyParseRequestTarget().port();\n     }\n \n     @Override\n     public final String rawPath() {\n-        return lazyParseRequestTarget().rawPath();\n+        return lazyParseRequestTarget().path();\n     }\n \n     @Override\n     public HttpRequestMetaData rawPath(final String path) {\n+        Uri httpUri = lazyParseRequestTarget();\n+        // Potentially over estimate the size of the URL to avoid resize/copy\n+        StringBuilder sb = new StringBuilder(httpUri.uri().length() + path.length());\n+\n+        // Append everything up to and including the path\n+        if (httpUri.scheme() != null) {\n+            sb.append(httpUri.scheme()).append(':');\n+        }\n+        if (httpUri.host() != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (httpUri.userInfo() != null) {\n+                sb.append(httpUri.userInfo()).append('@');\n+            }\n+\n+            sb.append(httpUri.host());\n+            if (httpUri.port() >= 0) {\n+                sb.append(':').append(httpUri.port());\n+            }\n+        }\n+\n+        // Append the path\n         if (!path.isEmpty() && path.charAt(0) != '/') {\n-            throw new IllegalArgumentException(\"Path must be empty or start with '/'\");\n+            sb.append('/');\n         }\n-        requestTarget(encodeRequestTarget(path, rawQuery(), null));\n-        return this;\n+        sb.append(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyMTQzNA==", "bodyText": "Consider adding more tests for cases when an empty path was provided with a combination of other methods, like rawQuery.\n\n\nShould we allow setting path, query, fragment for CONNECT request?", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514621434", "createdAt": "2020-10-29T23:18:44Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -121,70 +124,181 @@ public final String host() {\n \n     @Override\n     public final int port() {\n-        return lazyParseRequestTarget().explicitPort();\n+        return lazyParseRequestTarget().port();\n     }\n \n     @Override\n     public final String rawPath() {\n-        return lazyParseRequestTarget().rawPath();\n+        return lazyParseRequestTarget().path();\n     }\n \n     @Override\n     public HttpRequestMetaData rawPath(final String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYyODM4Mg==", "bodyText": "It's ok to have a query param that contains only a key, but no value. In this case users can pass a null instead of an empty list. It should be ok to allow null here`.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514628382", "createdAt": "2020-10-29T23:40:58Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -269,78 +383,131 @@ public boolean removeQueryParameters(final String key, final String value) {\n         return lazyParseQueryString().remove(key, value);\n     }\n \n-    @Nullable\n-    @Override\n-    public final String effectiveHost() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestHost;\n-    }\n-\n     @Override\n-    public final int effectivePort() {\n-        lazyParseEffectiveRequest();\n-        return effectiveRequestPort;\n+    public HostAndPort effectiveHostAndPort() {\n+        final CharSequence hostHeader;\n+        final Uri effectiveRequestUri = lazyParseRequestTarget();\n+        final String effectiveRequestUriHost = effectiveRequestUri.host();\n+        if (effectiveRequestUriHost != null) {\n+            return HostAndPort.of(effectiveRequestUriHost, effectiveRequestUri.port());\n+        } else if ((hostHeader = headers().get(HOST)) != null) {\n+            return parseHostHeader(hostHeader.toString());\n+        }\n+        return null;\n     }\n \n     private HttpQuery lazyParseQueryString() {\n         if (httpQuery == null) {\n-            httpQuery = new HttpQuery(decodeParams(lazyParseRequestTarget().rawQuery()), this::setQueryParams);\n+            httpQuery = new HttpQuery(decodeQueryParams(lazyParseRequestTarget().query(),\n+                    REQUEST_TARGET_CHARSET, DEFAULT_MAX_QUERY_PARAMS), this::setQueryParams);\n         }\n         return httpQuery;\n     }\n \n-    private HttpUri lazyParseRequestTarget() {\n+    private Uri lazyParseRequestTarget() {\n         if (requestTargetUri == null) {\n-            requestTargetUri = new HttpUri(requestTarget());\n+            requestTargetUri = CONNECT.equals(method) ? new HttpAuthorityFormUri(requestTarget()) :\n+                    new Uri3986(requestTarget());\n         }\n         return requestTargetUri;\n     }\n \n-    private void lazyParseEffectiveRequest() {\n-        final CharSequence hostHeader = headers().get(HOST);\n-\n-        if (effectiveRequestPort == PORT_NOT_ASSIGNED || !Objects.equals(hostHeader, effectiveRequestHostHeader)) {\n-            final HttpUri effectiveRequestUri = new HttpUri(requestTarget(),\n-                    () -> hostHeader != null ? hostHeader.toString() : null);\n-            effectiveRequestHost = effectiveRequestUri.host();\n-            effectiveRequestPort = effectiveRequestUri.explicitPort();\n-            effectiveRequestHostHeader = hostHeader;\n+    private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        String parsedHost;\n+        int parsedPort = -1;\n+        final int x = parsedHostHeader.lastIndexOf(':');\n+        if (x > 0) {\n+            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n+            if (y >= 0) {\n+                // IPv6 address is present in the header\n+                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+                // A host identified by an Internet Protocol literal address, version 6\n+                // [RFC3513] or later, is distinguished by enclosing the IP literal\n+                // within square brackets (\"[\" and \"]\").  This is the only place where\n+                // square bracket characters are allowed in the URI syntax.\n+                final int cb;\n+                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {\n+                    throw new IllegalArgumentException(\"IPv6 address should be in square brackets\");\n+                }\n+                if (cb < x) {\n+                    parsedHost = parsedHostHeader.substring(0, x);\n+                    parsedPort = parsePort(parsedHostHeader, x + 1, parsedHostHeader.length());\n+                } else if (cb != parsedHostHeader.length() - 1) {\n+                    throw new IllegalArgumentException(\n+                            \"']' should be at the end of IPv6 address or before port number\");\n+                } else {\n+                    parsedHost = parsedHostHeader;\n+                }\n+            } else {\n+                // IPv4 or literal host with port number\n+                parsedHost = parsedHostHeader.substring(0, x);\n+                parsedPort = parsePort(parsedHostHeader, x + 1, parsedHostHeader.length());\n+            }\n+        } else if (x < 0) {\n+            parsedHost = parsedHostHeader;\n+        } else {\n+            throw new IllegalArgumentException(\"Illegal position of colon in the host header\");\n         }\n+        return HostAndPort.of(parsedHost, parsedPort);\n     }\n \n     // package-private for testing.\n     void setQueryParams(final Map<String, List<String>> params) {\n-        final QueryStringEncoder encoder = new QueryStringEncoder(rawPath());\n+        Uri httpUri = lazyParseRequestTarget();\n+        StringBuilder sb = new StringBuilder(httpUri.uri().length() + params.size() * 8);\n+        if (httpUri.scheme() != null) {\n+            sb.append(httpUri.scheme()).append(':');\n+        }\n+        if (httpUri.host() != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (httpUri.userInfo() != null) {\n+                sb.append(httpUri.userInfo()).append('@');\n+            }\n \n-        for (final Map.Entry<String, List<String>> entry : params.entrySet()) {\n-            for (final String value : entry.getValue()) {\n-                encoder.addParam(entry.getKey(), value);\n+            sb.append(httpUri.host());\n+            if (httpUri.port() >= 0) {\n+                sb.append(':').append(httpUri.port());\n             }\n         }\n \n-        requestTarget(encodeRequestTarget(null, null, encoder.toString()));\n-    }\n+        sb.append(httpUri.path());\n+\n+        // Append query params\n+        Iterator<Entry<String, List<String>>> itr = params.entrySet().iterator();\n+        char prefixChar = '?';\n+        while (itr.hasNext()) {\n+            Entry<String, List<String>> next = itr.next();\n+            String encodedKey = encodeComponent(QUERY, next.getKey(), REQUEST_TARGET_CHARSET, true);\n+            sb.append(prefixChar).append(encodedKey);\n+            Iterator<String> valuesItr = next.getValue().iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 452}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTEwNQ==", "bodyText": "Can we return an empty map here? Consider adding a comment in the code if not", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514631105", "createdAt": "2020-10-29T23:49:56Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/UriUtils.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import javax.annotation.Nullable;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+final class UriUtils {\n+    // https://tools.ietf.org/html/rfc3986 declares that all delimiter/terminal values are US-ASCII\n+    // https://tools.ietf.org/html/rfc3986#section-2. This means values fall within the [0, 127] range. This range\n+    // can be represented as a bitset/bitmask with two longs (high, low), which reduces the amount of conditional\n+    // statements required to validate characters belonging to each character class. The following final variables\n+    // provide the bitmask for the different character classes defined in rfc3986, and isBitSet can be used to verify if\n+    // a bit is set for a particular (high, low) mask pair.\n+    //\n+    // pct-encoded is omitted below. This criteria is asserted outside this scope because it requires checking multiple\n+    // bytes and advancing the loop index accordingly.\n+\n+    private static final long DIGIT_LMASK = lowMask('0', '9');\n+    private static final long DIGIT_HMASK = highMask('0', '9');\n+\n+    private static final long ALPHA_LMASK = lowMask('a', 'z') | lowMask('A', 'Z');\n+    private static final long ALPHA_HMASK = highMask('a', 'z') | highMask('A', 'Z');\n+\n+    private static final long HEXDIG_LMASK = DIGIT_LMASK | lowMask('a', 'f') | lowMask('A', 'F');\n+    private static final long HEXDIG_HMASK = DIGIT_HMASK | highMask('a', 'f') | highMask('A', 'F');\n+\n+    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n+    private static final long UNRESERVED_LMASK = ALPHA_LMASK | DIGIT_LMASK | lowMask(\"-._~\");\n+    private static final long UNRESERVED_HMASK = ALPHA_HMASK | DIGIT_HMASK | highMask(\"-._~\");\n+\n+    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n+    //                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n+    private static final long SUBDELIM_LMASK = lowMask(\"!$&'()*+,;=\");\n+    private static final long SUBDELIM_HMASK = highMask(\"!$&'()*+,;=\");\n+\n+    // pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n+    private static final long PCHAR_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\";@\");\n+\n+    private static final long PCHAR_NOSUBDELIM_LMASK = UNRESERVED_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_NOSUBDELIM_HMASK = UNRESERVED_HMASK | highMask(\";@\");\n+\n+    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n+    static final long USERINFO_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\":\");\n+    static final long USERINFO_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\":\");\n+\n+    // path        = *(pchar / \"/\")\n+    static final long PATH_LMASK = PCHAR_LMASK | lowMask(\"/\");\n+    static final long PATH_HMASK = PCHAR_HMASK | highMask(\"/\");\n+\n+    static final long PATH_SEGMENT_LMASK = PCHAR_LMASK;\n+    static final long PATH_SEGMENT_HMASK = PCHAR_HMASK;\n+\n+    // query       = *( pchar / \"/\" / \"?\" )\n+    static final long QUERY_LMASK = PCHAR_LMASK | lowMask(\"/?\");\n+    static final long QUERY_HMASK = PCHAR_HMASK | highMask(\"/?\");\n+\n+    static final long QUERY_VALUE_LMASK = PCHAR_NOSUBDELIM_LMASK | lowMask(\"/?\");\n+    static final long QUERY_VALUE_HMASK = PCHAR_NOSUBDELIM_HMASK | highMask(\"/?\");\n+\n+    // fragment    = *( pchar / \"/\" / \"?\" )\n+    static final long FRAGMENT_LMASK = QUERY_LMASK;\n+    static final long FRAGMENT_HMASK = QUERY_HMASK;\n+\n+    // host        = IP-literal / IPv4address / reg-name\n+    // reg-name    = *( unreserved / pct-encoded / sub-delims )\n+    static final long HOST_NON_IP_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK;\n+    static final long HOST_NON_IP_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK;\n+\n+    private UriUtils() {\n+    }\n+\n+    /**\n+     * Decode the specified raw query with the specified {@code charset} for the specified maximum number of parameters.\n+     */\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams) {\n+        return decodeQueryParams(rawQuery, charset, maxParams, UriUtils::decodeComponent);\n+    }\n+\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams,\n+                                                       BiFunction<String, Charset, String> decoder) {\n+        if (maxParams <= 0) {\n+            throw new IllegalArgumentException(\"maxParams: \" + maxParams + \" (expected: > 0)\");\n+        }\n+\n+        if (rawQuery == null || rawQuery.isEmpty()) {\n+            return new LinkedHashMap<>(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMTk5NA==", "bodyText": "Consider adding the passed uri for all exception messages", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514631994", "createdAt": "2020-10-29T23:53:07Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpAuthorityFormUri.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.nio.charset.Charset;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.UriComponentType.HOST_NON_IP;\n+import static io.servicetalk.http.api.UriUtils.decodeComponent;\n+import static io.servicetalk.http.api.UriUtils.encodeComponent;\n+import static io.servicetalk.http.api.UriUtils.parsePort;\n+\n+/**\n+ * <a href=\"https://tools.ietf.org/html/rfc7230#section-5.3.3\">authority-form</a> URI.\n+ */\n+final class HttpAuthorityFormUri implements Uri {\n+    private final String uri;\n+    private final String host;\n+    private final int port;\n+\n+    HttpAuthorityFormUri(final String uri) {\n+        int i = 0;\n+        int begin = 0;\n+        String parsedHost = null;\n+        int parsedPort = -1;\n+        byte parsingIPv6 = 0; // 0 = not parsed, 1 = parsing, 2 = already parsed\n+        boolean foundColonForPort = false;\n+        while (i < uri.length()) {\n+            final char c = uri.charAt(i);\n+            if (c == '[') {\n+                if (parsingIPv6 != 0 || parsedHost != null) {\n+                    throw new IllegalArgumentException(\"unexpected [\");\n+                }\n+                parsingIPv6 = 1;\n+                begin = i++; // post increment, preserve the '[' for original uri for pathEndIndex.\n+            } else if (c == ']') {\n+                if (parsingIPv6 == 0) {\n+                    throw new IllegalArgumentException(\"unexpected ]\");\n+                } else if (i - 1 <= begin) {\n+                    throw new IllegalArgumentException(\"empty ip literal\");\n+                }\n+                // Copy the '[' and ']' characters. pathEndIndex depends upon retaining the uri contents.\n+                parsedHost = uri.substring(begin, i + 1);\n+                foundColonForPort = false;\n+                parsingIPv6 = 2;\n+                begin = ++i;\n+            } else if (c == ':') {\n+                if (parsingIPv6 == 0) {\n+                    if (parsedHost != null) {\n+                        throw new IllegalArgumentException(\"duplicate/invalid host\");\n+                    }\n+                    parsedHost = uri.substring(begin, i);\n+                }\n+                ++i;\n+                if (parsingIPv6 != 1) {\n+                    begin = i;\n+                    foundColonForPort = true;\n+                }\n+            } else if (c == '@' || c == '?' || c == '#' || c == '/') {\n+                throw new IllegalArgumentException(\"authority-form URI doesn't allow userinfo, path, query, fragment\");\n+            } else {\n+                ++i;\n+            }\n+        }\n+\n+        if (parsedHost == null) {\n+            if (parsingIPv6 == 1) {\n+                throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+            }\n+            parsedHost = uri;\n+        } else if (foundColonForPort) {\n+            parsedPort = parsePort(uri, begin, uri.length());\n+        } else if (parsedHost.length() != uri.length()) {\n+            throw new IllegalArgumentException(\"authority-form URI only supports the host component\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjA3NQ==", "bodyText": "Consider adding the passed uri for all exception messages", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514632075", "createdAt": "2020-10-29T23:53:25Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/Uri3986.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+ * Copyright \u00a9 2018-2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.servicetalk.http.api;\n+\n+import java.nio.charset.Charset;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.UriComponentType.FRAGMENT;\n+import static io.servicetalk.http.api.UriComponentType.HOST_NON_IP;\n+import static io.servicetalk.http.api.UriComponentType.PATH;\n+import static io.servicetalk.http.api.UriComponentType.QUERY;\n+import static io.servicetalk.http.api.UriComponentType.USER_INFO;\n+import static io.servicetalk.http.api.UriUtils.decodeComponent;\n+import static io.servicetalk.http.api.UriUtils.encodeComponent;\n+import static io.servicetalk.http.api.UriUtils.parsePort;\n+\n+/**\n+ * Represents the components of a <a href=\"https://tools.ietf.org/html/rfc3986\">URI</a>.\n+ * <p>\n+ * {@link java.net.URI} targets the obsolete <a href=\"https://tools.ietf.org/html/rfc2396\">rfc2732</a>. This class\n+ * also lazy parses some components which may not be as commonly used (e.g. query, fragment).\n+ */\n+final class Uri3986 implements Uri {\n+    @SuppressWarnings(\"StringOperationCanBeSimplified\")\n+    private static final String NULL_COMPONENT = new String(\"\"); // instance equality required!\n+    private final String uri;\n+    @Nullable\n+    private final String scheme;\n+    @Nullable\n+    private final String userInfo;\n+    @Nullable\n+    private final String host;\n+    private final int port;\n+    private final String path;\n+    @Nullable\n+    private String query;\n+    @Nullable\n+    private String fragment;\n+\n+    /**\n+     * Create a new instance give a {@link String} following\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3\">URI Syntax</a>.\n+     * <pre>\n+     * foo://example.com:8042/over/there?name=ferret#nose\n+     * \\_/   \\______________/\\_________/ \\_________/ \\__/\n+     * |           |            |            |        |\n+     * scheme     authority       path        query   fragment\n+     * </pre>\n+     * @param uri A URI string.\n+     */\n+    Uri3986(final String uri) {\n+        int i = 0;\n+        int begin = 0;\n+        String parsedScheme = null;\n+        String parsedUserInfo = null;\n+        String parsedHost = null;\n+        int parsedPort = -1;\n+        String parsedPath = null;\n+        boolean eligibleToParseScheme = true;\n+\n+        outerloop:\n+        while (i < uri.length()) {\n+            final char c = uri.charAt(i);\n+            if (c == '/') {\n+                if (begin == i && parsedHost == null && uri.length() - 1 > i && uri.charAt(i + 1) == '/') {\n+                    // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+                    i += 2;\n+                    begin = i;\n+                    final int authorityBegin = begin;\n+                    byte parsingIPv6 = 0; // 0 = not parsed, 1 = parsing, 2 = already parsed\n+                    boolean foundColonForPort = false;\n+                    while (i < uri.length()) {\n+                        final char c2 = uri.charAt(i);\n+                        if (c2 == '@') {\n+                            if (parsedUserInfo != null) {\n+                                throw new IllegalArgumentException(\"duplicate userinfo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMjY0Ng==", "bodyText": "We need these additional 6 bytes only if port is present", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514632646", "createdAt": "2020-10-29T23:55:17Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/Uri3986.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+ * Copyright \u00a9 2018-2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.servicetalk.http.api;\n+\n+import java.nio.charset.Charset;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.UriComponentType.FRAGMENT;\n+import static io.servicetalk.http.api.UriComponentType.HOST_NON_IP;\n+import static io.servicetalk.http.api.UriComponentType.PATH;\n+import static io.servicetalk.http.api.UriComponentType.QUERY;\n+import static io.servicetalk.http.api.UriComponentType.USER_INFO;\n+import static io.servicetalk.http.api.UriUtils.decodeComponent;\n+import static io.servicetalk.http.api.UriUtils.encodeComponent;\n+import static io.servicetalk.http.api.UriUtils.parsePort;\n+\n+/**\n+ * Represents the components of a <a href=\"https://tools.ietf.org/html/rfc3986\">URI</a>.\n+ * <p>\n+ * {@link java.net.URI} targets the obsolete <a href=\"https://tools.ietf.org/html/rfc2396\">rfc2732</a>. This class\n+ * also lazy parses some components which may not be as commonly used (e.g. query, fragment).\n+ */\n+final class Uri3986 implements Uri {\n+    @SuppressWarnings(\"StringOperationCanBeSimplified\")\n+    private static final String NULL_COMPONENT = new String(\"\"); // instance equality required!\n+    private final String uri;\n+    @Nullable\n+    private final String scheme;\n+    @Nullable\n+    private final String userInfo;\n+    @Nullable\n+    private final String host;\n+    private final int port;\n+    private final String path;\n+    @Nullable\n+    private String query;\n+    @Nullable\n+    private String fragment;\n+\n+    /**\n+     * Create a new instance give a {@link String} following\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3\">URI Syntax</a>.\n+     * <pre>\n+     * foo://example.com:8042/over/there?name=ferret#nose\n+     * \\_/   \\______________/\\_________/ \\_________/ \\__/\n+     * |           |            |            |        |\n+     * scheme     authority       path        query   fragment\n+     * </pre>\n+     * @param uri A URI string.\n+     */\n+    Uri3986(final String uri) {\n+        int i = 0;\n+        int begin = 0;\n+        String parsedScheme = null;\n+        String parsedUserInfo = null;\n+        String parsedHost = null;\n+        int parsedPort = -1;\n+        String parsedPath = null;\n+        boolean eligibleToParseScheme = true;\n+\n+        outerloop:\n+        while (i < uri.length()) {\n+            final char c = uri.charAt(i);\n+            if (c == '/') {\n+                if (begin == i && parsedHost == null && uri.length() - 1 > i && uri.charAt(i + 1) == '/') {\n+                    // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+                    i += 2;\n+                    begin = i;\n+                    final int authorityBegin = begin;\n+                    byte parsingIPv6 = 0; // 0 = not parsed, 1 = parsing, 2 = already parsed\n+                    boolean foundColonForPort = false;\n+                    while (i < uri.length()) {\n+                        final char c2 = uri.charAt(i);\n+                        if (c2 == '@') {\n+                            if (parsedUserInfo != null) {\n+                                throw new IllegalArgumentException(\"duplicate userinfo\");\n+                            }\n+                            // Userinfo has `:` as valid. If we previously parsed the host throw it away.\n+                            parsedUserInfo = uri.substring(authorityBegin, i);\n+                            parsedHost = null;\n+                            begin = ++i;\n+                        } else if (c2 == '[') {\n+                            if (parsingIPv6 != 0 || parsedHost != null) {\n+                                throw new IllegalArgumentException(\"unexpected [\");\n+                            }\n+                            parsingIPv6 = 1;\n+                            begin = i++; // post increment, preserve the '[' for original uri for pathEndIndex.\n+                        } else if (c2 == ']') {\n+                            if (parsingIPv6 == 0) {\n+                                throw new IllegalArgumentException(\"unexpected ]\");\n+                            } else if (i - 1 <= begin) {\n+                                throw new IllegalArgumentException(\"empty ip literal\");\n+                            }\n+                            // Copy the '[' and ']' characters. pathEndIndex depends upon retaining the uri contents.\n+                            parsedHost = uri.substring(begin, i + 1);\n+                            foundColonForPort = false;\n+                            parsingIPv6 = 2;\n+                            begin = ++i;\n+                        } else if (c2 == ':') {\n+                            if (parsingIPv6 == 0) {\n+                                if (parsedHost != null) {\n+                                    throw new IllegalArgumentException(\"duplicate/invalid host\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            }\n+                            ++i;\n+                            if (parsingIPv6 != 1) {\n+                                begin = i;\n+                                foundColonForPort = true;\n+                            }\n+                        } else if (c2 == '?' || c2 == '#' || c2 == '/') {\n+                            if (parsedHost == null) {\n+                                if (parsingIPv6 == 1) {\n+                                    throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            } else if (foundColonForPort) {\n+                                parsedPort = parsePort(uri, begin, i);\n+                            }\n+                            if (c2 == '/') {\n+                                begin = i++; // post increment, preserve the '/' for original uri for pathEndIndex.\n+                                continue outerloop;\n+                            } else {\n+                                parsedPath = \"\";\n+                                begin = ++i;\n+                                break outerloop;\n+                            }\n+                        } else {\n+                            ++i;\n+                        }\n+                    }\n+                    if (i == uri.length()) {\n+                        if (parsedHost == null) {\n+                            if (parsingIPv6 == 1) {\n+                                throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                            }\n+                            parsedHost = uri.substring(begin);\n+                        } else if (foundColonForPort) {\n+                            parsedPort = parsePort(uri, begin, i);\n+                        }\n+                        begin = i;\n+                    }\n+                } else {\n+                    eligibleToParseScheme = false;\n+                    ++i;\n+                }\n+            } else if (c == ':' && begin == 0 && parsedScheme == null && eligibleToParseScheme) {\n+                if (i == 0) {\n+                    throw new IllegalArgumentException(\"empty scheme\");\n+                }\n+                parsedScheme = uri.substring(0, i);\n+                begin = ++i;\n+                // We don't enforce the following, browsers still generate these types of requests.\n+                // https://tools.ietf.org/html/rfc3986#section-3.3\n+                // > In addition, a URI reference (Section 4.1) may be a relative-path reference,\n+                //   in which case the first path segment cannot contain a colon (\":\") character.\n+            } else if (c == '?' || c == '#') {\n+                parsedPath = uri.substring(begin, i);\n+                break;\n+            } else {\n+                ++i;\n+            }\n+        }\n+\n+        if (i == uri.length()) {\n+            parsedPath = uri.substring(begin);\n+        }\n+        assert parsedPath != null;\n+\n+        scheme = parsedScheme;\n+        userInfo = parsedUserInfo;\n+        host = parsedHost;\n+        port = parsedPort;\n+        path = parsedPath;\n+        this.uri = uri;\n+    }\n+\n+    @Override\n+    public String uri() {\n+        return uri;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String scheme() {\n+        return scheme;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String authority() {\n+        if (host == null) {\n+            return null;\n+        }\n+        final StringBuilder sb;\n+        if (userInfo == null) {\n+            sb = new StringBuilder(host.length() + 6); // 6 max port chars + `:`\n+        } else {\n+            sb = new StringBuilder(host.length() + userInfo.length() + 7); // '@' + 6 max port chars + `:`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMzQ2MQ==", "bodyText": "Port that is equal to 0 does not make much sense, should we allow it?", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514633461", "createdAt": "2020-10-29T23:58:01Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/Uri3986.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+ * Copyright \u00a9 2018-2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.servicetalk.http.api;\n+\n+import java.nio.charset.Charset;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.UriComponentType.FRAGMENT;\n+import static io.servicetalk.http.api.UriComponentType.HOST_NON_IP;\n+import static io.servicetalk.http.api.UriComponentType.PATH;\n+import static io.servicetalk.http.api.UriComponentType.QUERY;\n+import static io.servicetalk.http.api.UriComponentType.USER_INFO;\n+import static io.servicetalk.http.api.UriUtils.decodeComponent;\n+import static io.servicetalk.http.api.UriUtils.encodeComponent;\n+import static io.servicetalk.http.api.UriUtils.parsePort;\n+\n+/**\n+ * Represents the components of a <a href=\"https://tools.ietf.org/html/rfc3986\">URI</a>.\n+ * <p>\n+ * {@link java.net.URI} targets the obsolete <a href=\"https://tools.ietf.org/html/rfc2396\">rfc2732</a>. This class\n+ * also lazy parses some components which may not be as commonly used (e.g. query, fragment).\n+ */\n+final class Uri3986 implements Uri {\n+    @SuppressWarnings(\"StringOperationCanBeSimplified\")\n+    private static final String NULL_COMPONENT = new String(\"\"); // instance equality required!\n+    private final String uri;\n+    @Nullable\n+    private final String scheme;\n+    @Nullable\n+    private final String userInfo;\n+    @Nullable\n+    private final String host;\n+    private final int port;\n+    private final String path;\n+    @Nullable\n+    private String query;\n+    @Nullable\n+    private String fragment;\n+\n+    /**\n+     * Create a new instance give a {@link String} following\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3\">URI Syntax</a>.\n+     * <pre>\n+     * foo://example.com:8042/over/there?name=ferret#nose\n+     * \\_/   \\______________/\\_________/ \\_________/ \\__/\n+     * |           |            |            |        |\n+     * scheme     authority       path        query   fragment\n+     * </pre>\n+     * @param uri A URI string.\n+     */\n+    Uri3986(final String uri) {\n+        int i = 0;\n+        int begin = 0;\n+        String parsedScheme = null;\n+        String parsedUserInfo = null;\n+        String parsedHost = null;\n+        int parsedPort = -1;\n+        String parsedPath = null;\n+        boolean eligibleToParseScheme = true;\n+\n+        outerloop:\n+        while (i < uri.length()) {\n+            final char c = uri.charAt(i);\n+            if (c == '/') {\n+                if (begin == i && parsedHost == null && uri.length() - 1 > i && uri.charAt(i + 1) == '/') {\n+                    // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+                    i += 2;\n+                    begin = i;\n+                    final int authorityBegin = begin;\n+                    byte parsingIPv6 = 0; // 0 = not parsed, 1 = parsing, 2 = already parsed\n+                    boolean foundColonForPort = false;\n+                    while (i < uri.length()) {\n+                        final char c2 = uri.charAt(i);\n+                        if (c2 == '@') {\n+                            if (parsedUserInfo != null) {\n+                                throw new IllegalArgumentException(\"duplicate userinfo\");\n+                            }\n+                            // Userinfo has `:` as valid. If we previously parsed the host throw it away.\n+                            parsedUserInfo = uri.substring(authorityBegin, i);\n+                            parsedHost = null;\n+                            begin = ++i;\n+                        } else if (c2 == '[') {\n+                            if (parsingIPv6 != 0 || parsedHost != null) {\n+                                throw new IllegalArgumentException(\"unexpected [\");\n+                            }\n+                            parsingIPv6 = 1;\n+                            begin = i++; // post increment, preserve the '[' for original uri for pathEndIndex.\n+                        } else if (c2 == ']') {\n+                            if (parsingIPv6 == 0) {\n+                                throw new IllegalArgumentException(\"unexpected ]\");\n+                            } else if (i - 1 <= begin) {\n+                                throw new IllegalArgumentException(\"empty ip literal\");\n+                            }\n+                            // Copy the '[' and ']' characters. pathEndIndex depends upon retaining the uri contents.\n+                            parsedHost = uri.substring(begin, i + 1);\n+                            foundColonForPort = false;\n+                            parsingIPv6 = 2;\n+                            begin = ++i;\n+                        } else if (c2 == ':') {\n+                            if (parsingIPv6 == 0) {\n+                                if (parsedHost != null) {\n+                                    throw new IllegalArgumentException(\"duplicate/invalid host\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            }\n+                            ++i;\n+                            if (parsingIPv6 != 1) {\n+                                begin = i;\n+                                foundColonForPort = true;\n+                            }\n+                        } else if (c2 == '?' || c2 == '#' || c2 == '/') {\n+                            if (parsedHost == null) {\n+                                if (parsingIPv6 == 1) {\n+                                    throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            } else if (foundColonForPort) {\n+                                parsedPort = parsePort(uri, begin, i);\n+                            }\n+                            if (c2 == '/') {\n+                                begin = i++; // post increment, preserve the '/' for original uri for pathEndIndex.\n+                                continue outerloop;\n+                            } else {\n+                                parsedPath = \"\";\n+                                begin = ++i;\n+                                break outerloop;\n+                            }\n+                        } else {\n+                            ++i;\n+                        }\n+                    }\n+                    if (i == uri.length()) {\n+                        if (parsedHost == null) {\n+                            if (parsingIPv6 == 1) {\n+                                throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                            }\n+                            parsedHost = uri.substring(begin);\n+                        } else if (foundColonForPort) {\n+                            parsedPort = parsePort(uri, begin, i);\n+                        }\n+                        begin = i;\n+                    }\n+                } else {\n+                    eligibleToParseScheme = false;\n+                    ++i;\n+                }\n+            } else if (c == ':' && begin == 0 && parsedScheme == null && eligibleToParseScheme) {\n+                if (i == 0) {\n+                    throw new IllegalArgumentException(\"empty scheme\");\n+                }\n+                parsedScheme = uri.substring(0, i);\n+                begin = ++i;\n+                // We don't enforce the following, browsers still generate these types of requests.\n+                // https://tools.ietf.org/html/rfc3986#section-3.3\n+                // > In addition, a URI reference (Section 4.1) may be a relative-path reference,\n+                //   in which case the first path segment cannot contain a colon (\":\") character.\n+            } else if (c == '?' || c == '#') {\n+                parsedPath = uri.substring(begin, i);\n+                break;\n+            } else {\n+                ++i;\n+            }\n+        }\n+\n+        if (i == uri.length()) {\n+            parsedPath = uri.substring(begin);\n+        }\n+        assert parsedPath != null;\n+\n+        scheme = parsedScheme;\n+        userInfo = parsedUserInfo;\n+        host = parsedHost;\n+        port = parsedPort;\n+        path = parsedPath;\n+        this.uri = uri;\n+    }\n+\n+    @Override\n+    public String uri() {\n+        return uri;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String scheme() {\n+        return scheme;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String authority() {\n+        if (host == null) {\n+            return null;\n+        }\n+        final StringBuilder sb;\n+        if (userInfo == null) {\n+            sb = new StringBuilder(host.length() + 6); // 6 max port chars + `:`\n+        } else {\n+            sb = new StringBuilder(host.length() + userInfo.length() + 7); // '@' + 6 max port chars + `:`\n+            sb.append(userInfo).append('@');\n+        }\n+\n+        sb.append(host);\n+        if (port >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzMzk5NA==", "bodyText": "This method is not used anywhere else, consider doing these checks inside equals", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514633994", "createdAt": "2020-10-29T23:59:53Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/Uri3986.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+ * Copyright \u00a9 2018-2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.servicetalk.http.api;\n+\n+import java.nio.charset.Charset;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.UriComponentType.FRAGMENT;\n+import static io.servicetalk.http.api.UriComponentType.HOST_NON_IP;\n+import static io.servicetalk.http.api.UriComponentType.PATH;\n+import static io.servicetalk.http.api.UriComponentType.QUERY;\n+import static io.servicetalk.http.api.UriComponentType.USER_INFO;\n+import static io.servicetalk.http.api.UriUtils.decodeComponent;\n+import static io.servicetalk.http.api.UriUtils.encodeComponent;\n+import static io.servicetalk.http.api.UriUtils.parsePort;\n+\n+/**\n+ * Represents the components of a <a href=\"https://tools.ietf.org/html/rfc3986\">URI</a>.\n+ * <p>\n+ * {@link java.net.URI} targets the obsolete <a href=\"https://tools.ietf.org/html/rfc2396\">rfc2732</a>. This class\n+ * also lazy parses some components which may not be as commonly used (e.g. query, fragment).\n+ */\n+final class Uri3986 implements Uri {\n+    @SuppressWarnings(\"StringOperationCanBeSimplified\")\n+    private static final String NULL_COMPONENT = new String(\"\"); // instance equality required!\n+    private final String uri;\n+    @Nullable\n+    private final String scheme;\n+    @Nullable\n+    private final String userInfo;\n+    @Nullable\n+    private final String host;\n+    private final int port;\n+    private final String path;\n+    @Nullable\n+    private String query;\n+    @Nullable\n+    private String fragment;\n+\n+    /**\n+     * Create a new instance give a {@link String} following\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3\">URI Syntax</a>.\n+     * <pre>\n+     * foo://example.com:8042/over/there?name=ferret#nose\n+     * \\_/   \\______________/\\_________/ \\_________/ \\__/\n+     * |           |            |            |        |\n+     * scheme     authority       path        query   fragment\n+     * </pre>\n+     * @param uri A URI string.\n+     */\n+    Uri3986(final String uri) {\n+        int i = 0;\n+        int begin = 0;\n+        String parsedScheme = null;\n+        String parsedUserInfo = null;\n+        String parsedHost = null;\n+        int parsedPort = -1;\n+        String parsedPath = null;\n+        boolean eligibleToParseScheme = true;\n+\n+        outerloop:\n+        while (i < uri.length()) {\n+            final char c = uri.charAt(i);\n+            if (c == '/') {\n+                if (begin == i && parsedHost == null && uri.length() - 1 > i && uri.charAt(i + 1) == '/') {\n+                    // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+                    i += 2;\n+                    begin = i;\n+                    final int authorityBegin = begin;\n+                    byte parsingIPv6 = 0; // 0 = not parsed, 1 = parsing, 2 = already parsed\n+                    boolean foundColonForPort = false;\n+                    while (i < uri.length()) {\n+                        final char c2 = uri.charAt(i);\n+                        if (c2 == '@') {\n+                            if (parsedUserInfo != null) {\n+                                throw new IllegalArgumentException(\"duplicate userinfo\");\n+                            }\n+                            // Userinfo has `:` as valid. If we previously parsed the host throw it away.\n+                            parsedUserInfo = uri.substring(authorityBegin, i);\n+                            parsedHost = null;\n+                            begin = ++i;\n+                        } else if (c2 == '[') {\n+                            if (parsingIPv6 != 0 || parsedHost != null) {\n+                                throw new IllegalArgumentException(\"unexpected [\");\n+                            }\n+                            parsingIPv6 = 1;\n+                            begin = i++; // post increment, preserve the '[' for original uri for pathEndIndex.\n+                        } else if (c2 == ']') {\n+                            if (parsingIPv6 == 0) {\n+                                throw new IllegalArgumentException(\"unexpected ]\");\n+                            } else if (i - 1 <= begin) {\n+                                throw new IllegalArgumentException(\"empty ip literal\");\n+                            }\n+                            // Copy the '[' and ']' characters. pathEndIndex depends upon retaining the uri contents.\n+                            parsedHost = uri.substring(begin, i + 1);\n+                            foundColonForPort = false;\n+                            parsingIPv6 = 2;\n+                            begin = ++i;\n+                        } else if (c2 == ':') {\n+                            if (parsingIPv6 == 0) {\n+                                if (parsedHost != null) {\n+                                    throw new IllegalArgumentException(\"duplicate/invalid host\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            }\n+                            ++i;\n+                            if (parsingIPv6 != 1) {\n+                                begin = i;\n+                                foundColonForPort = true;\n+                            }\n+                        } else if (c2 == '?' || c2 == '#' || c2 == '/') {\n+                            if (parsedHost == null) {\n+                                if (parsingIPv6 == 1) {\n+                                    throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            } else if (foundColonForPort) {\n+                                parsedPort = parsePort(uri, begin, i);\n+                            }\n+                            if (c2 == '/') {\n+                                begin = i++; // post increment, preserve the '/' for original uri for pathEndIndex.\n+                                continue outerloop;\n+                            } else {\n+                                parsedPath = \"\";\n+                                begin = ++i;\n+                                break outerloop;\n+                            }\n+                        } else {\n+                            ++i;\n+                        }\n+                    }\n+                    if (i == uri.length()) {\n+                        if (parsedHost == null) {\n+                            if (parsingIPv6 == 1) {\n+                                throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                            }\n+                            parsedHost = uri.substring(begin);\n+                        } else if (foundColonForPort) {\n+                            parsedPort = parsePort(uri, begin, i);\n+                        }\n+                        begin = i;\n+                    }\n+                } else {\n+                    eligibleToParseScheme = false;\n+                    ++i;\n+                }\n+            } else if (c == ':' && begin == 0 && parsedScheme == null && eligibleToParseScheme) {\n+                if (i == 0) {\n+                    throw new IllegalArgumentException(\"empty scheme\");\n+                }\n+                parsedScheme = uri.substring(0, i);\n+                begin = ++i;\n+                // We don't enforce the following, browsers still generate these types of requests.\n+                // https://tools.ietf.org/html/rfc3986#section-3.3\n+                // > In addition, a URI reference (Section 4.1) may be a relative-path reference,\n+                //   in which case the first path segment cannot contain a colon (\":\") character.\n+            } else if (c == '?' || c == '#') {\n+                parsedPath = uri.substring(begin, i);\n+                break;\n+            } else {\n+                ++i;\n+            }\n+        }\n+\n+        if (i == uri.length()) {\n+            parsedPath = uri.substring(begin);\n+        }\n+        assert parsedPath != null;\n+\n+        scheme = parsedScheme;\n+        userInfo = parsedUserInfo;\n+        host = parsedHost;\n+        port = parsedPort;\n+        path = parsedPath;\n+        this.uri = uri;\n+    }\n+\n+    @Override\n+    public String uri() {\n+        return uri;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String scheme() {\n+        return scheme;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String authority() {\n+        if (host == null) {\n+            return null;\n+        }\n+        final StringBuilder sb;\n+        if (userInfo == null) {\n+            sb = new StringBuilder(host.length() + 6); // 6 max port chars + `:`\n+        } else {\n+            sb = new StringBuilder(host.length() + userInfo.length() + 7); // '@' + 6 max port chars + `:`\n+            sb.append(userInfo).append('@');\n+        }\n+\n+        sb.append(host);\n+        if (port >= 0) {\n+            sb.append(':').append(port);\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String userInfo() {\n+        return userInfo;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String host() {\n+        return host;\n+    }\n+\n+    @Override\n+    public int port() {\n+        return port;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String path(final Charset charset) {\n+        return decodeComponent(path, charset);\n+    }\n+\n+    @Override\n+    public String query() {\n+        if (query != null) {\n+            return unwrapNullableComponent(query);\n+        }\n+\n+        final int pathEndIndex = pathEndIndex();\n+        if (pathEndIndex >= uri.length() || uri.charAt(pathEndIndex) != '?') {\n+            query = NULL_COMPONENT;\n+            return null;\n+        }\n+        final int fragmentStart = uri.indexOf('#', pathEndIndex + 1);\n+        query = fragmentStart < 0 ? uri.substring(pathEndIndex + 1) :\n+                        uri.substring(pathEndIndex + 1, fragmentStart);\n+        return query;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String query(final Charset charset) {\n+        return isNullableComponent(query) ? null : decodeComponent(query, charset);\n+    }\n+\n+    @Override\n+    public String fragment() {\n+        if (fragment != null) {\n+            return unwrapNullableComponent(fragment);\n+        }\n+\n+        final int pathEndIndex = pathEndIndex();\n+        if (pathEndIndex >= uri.length()) {\n+            fragment = NULL_COMPONENT;\n+            return null;\n+        }\n+\n+        final int fragmentStart = uri.indexOf('#', pathEndIndex);\n+        if (fragmentStart < 0) {\n+            fragment = NULL_COMPONENT;\n+            return null;\n+        }\n+        fragment = uri.substring(fragmentStart + 1);\n+        return fragment;\n+    }\n+\n+    @SuppressWarnings(\"StringEquality\")\n+    @Nullable\n+    private static String unwrapNullableComponent(String component) {\n+        return component == NULL_COMPONENT ? null : component;\n+    }\n+\n+    @SuppressWarnings(\"StringEquality\")\n+    private static boolean isNullableComponent(@Nullable String component) {\n+        return component == null || component == NULL_COMPONENT;\n+    }\n+\n+    private int pathEndIndex() {\n+        int i = 0;\n+        if (scheme != null) {\n+            i = scheme.length() + 1; // ':'\n+        }\n+        if (host != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            i += host.length() + 2; // '/' '/'\n+            if (userInfo != null) {\n+                i += userInfo.length() + 1; // '@'\n+            }\n+            if (port >= 0) {\n+                i += numberOfDigits(port) + 1; // ':'\n+            }\n+        }\n+        i += path.length();\n+        return i;\n+    }\n+\n+    private boolean hostAndPortEqual(final Uri3986 rhs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 327}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDYzNDM2NQ==", "bodyText": "Include port in the exception message", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514634365", "createdAt": "2020-10-30T00:01:14Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/Uri3986.java", "diffHunk": "@@ -0,0 +1,440 @@\n+/*\n+ * Copyright \u00a9 2018-2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.servicetalk.http.api;\n+\n+import java.nio.charset.Charset;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.UriComponentType.FRAGMENT;\n+import static io.servicetalk.http.api.UriComponentType.HOST_NON_IP;\n+import static io.servicetalk.http.api.UriComponentType.PATH;\n+import static io.servicetalk.http.api.UriComponentType.QUERY;\n+import static io.servicetalk.http.api.UriComponentType.USER_INFO;\n+import static io.servicetalk.http.api.UriUtils.decodeComponent;\n+import static io.servicetalk.http.api.UriUtils.encodeComponent;\n+import static io.servicetalk.http.api.UriUtils.parsePort;\n+\n+/**\n+ * Represents the components of a <a href=\"https://tools.ietf.org/html/rfc3986\">URI</a>.\n+ * <p>\n+ * {@link java.net.URI} targets the obsolete <a href=\"https://tools.ietf.org/html/rfc2396\">rfc2732</a>. This class\n+ * also lazy parses some components which may not be as commonly used (e.g. query, fragment).\n+ */\n+final class Uri3986 implements Uri {\n+    @SuppressWarnings(\"StringOperationCanBeSimplified\")\n+    private static final String NULL_COMPONENT = new String(\"\"); // instance equality required!\n+    private final String uri;\n+    @Nullable\n+    private final String scheme;\n+    @Nullable\n+    private final String userInfo;\n+    @Nullable\n+    private final String host;\n+    private final int port;\n+    private final String path;\n+    @Nullable\n+    private String query;\n+    @Nullable\n+    private String fragment;\n+\n+    /**\n+     * Create a new instance give a {@link String} following\n+     * <a href=\"https://tools.ietf.org/html/rfc3986#section-3\">URI Syntax</a>.\n+     * <pre>\n+     * foo://example.com:8042/over/there?name=ferret#nose\n+     * \\_/   \\______________/\\_________/ \\_________/ \\__/\n+     * |           |            |            |        |\n+     * scheme     authority       path        query   fragment\n+     * </pre>\n+     * @param uri A URI string.\n+     */\n+    Uri3986(final String uri) {\n+        int i = 0;\n+        int begin = 0;\n+        String parsedScheme = null;\n+        String parsedUserInfo = null;\n+        String parsedHost = null;\n+        int parsedPort = -1;\n+        String parsedPath = null;\n+        boolean eligibleToParseScheme = true;\n+\n+        outerloop:\n+        while (i < uri.length()) {\n+            final char c = uri.charAt(i);\n+            if (c == '/') {\n+                if (begin == i && parsedHost == null && uri.length() - 1 > i && uri.charAt(i + 1) == '/') {\n+                    // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+                    i += 2;\n+                    begin = i;\n+                    final int authorityBegin = begin;\n+                    byte parsingIPv6 = 0; // 0 = not parsed, 1 = parsing, 2 = already parsed\n+                    boolean foundColonForPort = false;\n+                    while (i < uri.length()) {\n+                        final char c2 = uri.charAt(i);\n+                        if (c2 == '@') {\n+                            if (parsedUserInfo != null) {\n+                                throw new IllegalArgumentException(\"duplicate userinfo\");\n+                            }\n+                            // Userinfo has `:` as valid. If we previously parsed the host throw it away.\n+                            parsedUserInfo = uri.substring(authorityBegin, i);\n+                            parsedHost = null;\n+                            begin = ++i;\n+                        } else if (c2 == '[') {\n+                            if (parsingIPv6 != 0 || parsedHost != null) {\n+                                throw new IllegalArgumentException(\"unexpected [\");\n+                            }\n+                            parsingIPv6 = 1;\n+                            begin = i++; // post increment, preserve the '[' for original uri for pathEndIndex.\n+                        } else if (c2 == ']') {\n+                            if (parsingIPv6 == 0) {\n+                                throw new IllegalArgumentException(\"unexpected ]\");\n+                            } else if (i - 1 <= begin) {\n+                                throw new IllegalArgumentException(\"empty ip literal\");\n+                            }\n+                            // Copy the '[' and ']' characters. pathEndIndex depends upon retaining the uri contents.\n+                            parsedHost = uri.substring(begin, i + 1);\n+                            foundColonForPort = false;\n+                            parsingIPv6 = 2;\n+                            begin = ++i;\n+                        } else if (c2 == ':') {\n+                            if (parsingIPv6 == 0) {\n+                                if (parsedHost != null) {\n+                                    throw new IllegalArgumentException(\"duplicate/invalid host\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            }\n+                            ++i;\n+                            if (parsingIPv6 != 1) {\n+                                begin = i;\n+                                foundColonForPort = true;\n+                            }\n+                        } else if (c2 == '?' || c2 == '#' || c2 == '/') {\n+                            if (parsedHost == null) {\n+                                if (parsingIPv6 == 1) {\n+                                    throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                                }\n+                                parsedHost = uri.substring(begin, i);\n+                            } else if (foundColonForPort) {\n+                                parsedPort = parsePort(uri, begin, i);\n+                            }\n+                            if (c2 == '/') {\n+                                begin = i++; // post increment, preserve the '/' for original uri for pathEndIndex.\n+                                continue outerloop;\n+                            } else {\n+                                parsedPath = \"\";\n+                                begin = ++i;\n+                                break outerloop;\n+                            }\n+                        } else {\n+                            ++i;\n+                        }\n+                    }\n+                    if (i == uri.length()) {\n+                        if (parsedHost == null) {\n+                            if (parsingIPv6 == 1) {\n+                                throw new IllegalArgumentException(\"missing closing ] for IP-literal\");\n+                            }\n+                            parsedHost = uri.substring(begin);\n+                        } else if (foundColonForPort) {\n+                            parsedPort = parsePort(uri, begin, i);\n+                        }\n+                        begin = i;\n+                    }\n+                } else {\n+                    eligibleToParseScheme = false;\n+                    ++i;\n+                }\n+            } else if (c == ':' && begin == 0 && parsedScheme == null && eligibleToParseScheme) {\n+                if (i == 0) {\n+                    throw new IllegalArgumentException(\"empty scheme\");\n+                }\n+                parsedScheme = uri.substring(0, i);\n+                begin = ++i;\n+                // We don't enforce the following, browsers still generate these types of requests.\n+                // https://tools.ietf.org/html/rfc3986#section-3.3\n+                // > In addition, a URI reference (Section 4.1) may be a relative-path reference,\n+                //   in which case the first path segment cannot contain a colon (\":\") character.\n+            } else if (c == '?' || c == '#') {\n+                parsedPath = uri.substring(begin, i);\n+                break;\n+            } else {\n+                ++i;\n+            }\n+        }\n+\n+        if (i == uri.length()) {\n+            parsedPath = uri.substring(begin);\n+        }\n+        assert parsedPath != null;\n+\n+        scheme = parsedScheme;\n+        userInfo = parsedUserInfo;\n+        host = parsedHost;\n+        port = parsedPort;\n+        path = parsedPath;\n+        this.uri = uri;\n+    }\n+\n+    @Override\n+    public String uri() {\n+        return uri;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String scheme() {\n+        return scheme;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String authority() {\n+        if (host == null) {\n+            return null;\n+        }\n+        final StringBuilder sb;\n+        if (userInfo == null) {\n+            sb = new StringBuilder(host.length() + 6); // 6 max port chars + `:`\n+        } else {\n+            sb = new StringBuilder(host.length() + userInfo.length() + 7); // '@' + 6 max port chars + `:`\n+            sb.append(userInfo).append('@');\n+        }\n+\n+        sb.append(host);\n+        if (port >= 0) {\n+            sb.append(':').append(port);\n+        }\n+        return sb.toString();\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String userInfo() {\n+        return userInfo;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String host() {\n+        return host;\n+    }\n+\n+    @Override\n+    public int port() {\n+        return port;\n+    }\n+\n+    @Override\n+    public String path() {\n+        return path;\n+    }\n+\n+    @Override\n+    public String path(final Charset charset) {\n+        return decodeComponent(path, charset);\n+    }\n+\n+    @Override\n+    public String query() {\n+        if (query != null) {\n+            return unwrapNullableComponent(query);\n+        }\n+\n+        final int pathEndIndex = pathEndIndex();\n+        if (pathEndIndex >= uri.length() || uri.charAt(pathEndIndex) != '?') {\n+            query = NULL_COMPONENT;\n+            return null;\n+        }\n+        final int fragmentStart = uri.indexOf('#', pathEndIndex + 1);\n+        query = fragmentStart < 0 ? uri.substring(pathEndIndex + 1) :\n+                        uri.substring(pathEndIndex + 1, fragmentStart);\n+        return query;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String query(final Charset charset) {\n+        return isNullableComponent(query) ? null : decodeComponent(query, charset);\n+    }\n+\n+    @Override\n+    public String fragment() {\n+        if (fragment != null) {\n+            return unwrapNullableComponent(fragment);\n+        }\n+\n+        final int pathEndIndex = pathEndIndex();\n+        if (pathEndIndex >= uri.length()) {\n+            fragment = NULL_COMPONENT;\n+            return null;\n+        }\n+\n+        final int fragmentStart = uri.indexOf('#', pathEndIndex);\n+        if (fragmentStart < 0) {\n+            fragment = NULL_COMPONENT;\n+            return null;\n+        }\n+        fragment = uri.substring(fragmentStart + 1);\n+        return fragment;\n+    }\n+\n+    @SuppressWarnings(\"StringEquality\")\n+    @Nullable\n+    private static String unwrapNullableComponent(String component) {\n+        return component == NULL_COMPONENT ? null : component;\n+    }\n+\n+    @SuppressWarnings(\"StringEquality\")\n+    private static boolean isNullableComponent(@Nullable String component) {\n+        return component == null || component == NULL_COMPONENT;\n+    }\n+\n+    private int pathEndIndex() {\n+        int i = 0;\n+        if (scheme != null) {\n+            i = scheme.length() + 1; // ':'\n+        }\n+        if (host != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            i += host.length() + 2; // '/' '/'\n+            if (userInfo != null) {\n+                i += userInfo.length() + 1; // '@'\n+            }\n+            if (port >= 0) {\n+                i += numberOfDigits(port) + 1; // ':'\n+            }\n+        }\n+        i += path.length();\n+        return i;\n+    }\n+\n+    private boolean hostAndPortEqual(final Uri3986 rhs) {\n+        return port == rhs.port && Objects.equals(host, rhs.host);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+        return o instanceof Uri3986 && hostAndPortEqual((Uri3986) o);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return 31 * (31 + port + Objects.hashCode(host));\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return uri;\n+    }\n+\n+    static String encode(String requestTarget, Charset charset, boolean preservePctEncoding) {\n+        Uri3986 uri = new Uri3986(requestTarget);\n+        StringBuilder sb = new StringBuilder(uri.uri.length() + 16);\n+        if (uri.scheme != null) {\n+            sb.append(uri.scheme).append(':');\n+        }\n+        if (uri.host != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (uri.userInfo != null) {\n+                sb.append(encodeComponent(USER_INFO, uri.userInfo, charset, preservePctEncoding)).append('@');\n+            }\n+\n+            if (!uri.host.isEmpty()) {\n+                sb.append(uri.host.charAt(0) != '[' ?\n+                        encodeComponent(HOST_NON_IP, uri.host, charset, preservePctEncoding) : uri.host);\n+            }\n+            if (uri.port >= 0) {\n+                sb.append(':').append(uri.port);\n+            }\n+        }\n+\n+        String path = uri.path();\n+        if (!path.isEmpty() && path.charAt(0) != '/') {\n+            sb.append('/');\n+        }\n+        sb.append(encodeComponent(PATH, path, charset, preservePctEncoding));\n+\n+        String query = uri.query();\n+        if (query != null) {\n+            sb.append('?').append(encodeComponent(QUERY, query, charset, preservePctEncoding));\n+        }\n+\n+        String fragment = uri.fragment();\n+        if (fragment != null) {\n+            sb.append('#').append(encodeComponent(FRAGMENT, fragment, charset, preservePctEncoding));\n+        }\n+        return sb.toString();\n+    }\n+\n+    static String decode(String requestTarget, Charset charset) {\n+        Uri3986 uri = new Uri3986(requestTarget);\n+        StringBuilder sb = new StringBuilder(uri.uri.length());\n+        if (uri.scheme != null) {\n+            sb.append(uri.scheme).append(':');\n+        }\n+        if (uri.host != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (uri.userInfo != null) {\n+                sb.append(decodeComponent(uri.userInfo, charset)).append('@');\n+            }\n+            if (!uri.host.isEmpty()) {\n+                sb.append(uri.host.charAt(0) != '[' ? decodeComponent(uri.host, charset) : uri.host);\n+            }\n+            if (uri.port >= 0) {\n+                sb.append(':').append(uri.port);\n+            }\n+        }\n+\n+        String path = uri.path();\n+        if (!path.isEmpty() && path.charAt(0) != '/') {\n+            sb.append('/');\n+        }\n+        sb.append(decodeComponent(path, charset));\n+\n+        String query = uri.query();\n+        if (query != null) {\n+            sb.append('?').append(decodeComponent(query, charset));\n+        }\n+\n+        String fragment = uri.fragment();\n+        if (fragment != null) {\n+            sb.append('#').append(decodeComponent(fragment, charset));\n+        }\n+        return sb.toString();\n+    }\n+\n+    private static int numberOfDigits(int port) {\n+        if (port < 10000) {\n+            if (port < 1000) {\n+                if (port < 100) {\n+                    return port < 10 ? 1 : 2;\n+                }\n+                return 3;\n+            }\n+            return 4;\n+        } else if (port <= 65535) {\n+            return 5;\n+        }\n+        throw new IllegalArgumentException(\"port out of bounds\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MDI0MQ==", "bodyText": "10 -> 0xA for consistency?", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514640241", "createdAt": "2020-10-30T00:23:39Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/UriUtils.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import javax.annotation.Nullable;\n+\n+import static java.lang.Math.max;\n+import static java.lang.Math.min;\n+\n+final class UriUtils {\n+    // https://tools.ietf.org/html/rfc3986 declares that all delimiter/terminal values are US-ASCII\n+    // https://tools.ietf.org/html/rfc3986#section-2. This means values fall within the [0, 127] range. This range\n+    // can be represented as a bitset/bitmask with two longs (high, low), which reduces the amount of conditional\n+    // statements required to validate characters belonging to each character class. The following final variables\n+    // provide the bitmask for the different character classes defined in rfc3986, and isBitSet can be used to verify if\n+    // a bit is set for a particular (high, low) mask pair.\n+    //\n+    // pct-encoded is omitted below. This criteria is asserted outside this scope because it requires checking multiple\n+    // bytes and advancing the loop index accordingly.\n+\n+    private static final long DIGIT_LMASK = lowMask('0', '9');\n+    private static final long DIGIT_HMASK = highMask('0', '9');\n+\n+    private static final long ALPHA_LMASK = lowMask('a', 'z') | lowMask('A', 'Z');\n+    private static final long ALPHA_HMASK = highMask('a', 'z') | highMask('A', 'Z');\n+\n+    private static final long HEXDIG_LMASK = DIGIT_LMASK | lowMask('a', 'f') | lowMask('A', 'F');\n+    private static final long HEXDIG_HMASK = DIGIT_HMASK | highMask('a', 'f') | highMask('A', 'F');\n+\n+    // unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n+    private static final long UNRESERVED_LMASK = ALPHA_LMASK | DIGIT_LMASK | lowMask(\"-._~\");\n+    private static final long UNRESERVED_HMASK = ALPHA_HMASK | DIGIT_HMASK | highMask(\"-._~\");\n+\n+    // sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n+    //                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n+    private static final long SUBDELIM_LMASK = lowMask(\"!$&'()*+,;=\");\n+    private static final long SUBDELIM_HMASK = highMask(\"!$&'()*+,;=\");\n+\n+    // pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n+    private static final long PCHAR_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\";@\");\n+\n+    private static final long PCHAR_NOSUBDELIM_LMASK = UNRESERVED_LMASK | lowMask(\";@\");\n+    private static final long PCHAR_NOSUBDELIM_HMASK = UNRESERVED_HMASK | highMask(\";@\");\n+\n+    // userinfo    = *( unreserved / pct-encoded / sub-delims / \":\" )\n+    static final long USERINFO_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK | lowMask(\":\");\n+    static final long USERINFO_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK | highMask(\":\");\n+\n+    // path        = *(pchar / \"/\")\n+    static final long PATH_LMASK = PCHAR_LMASK | lowMask(\"/\");\n+    static final long PATH_HMASK = PCHAR_HMASK | highMask(\"/\");\n+\n+    static final long PATH_SEGMENT_LMASK = PCHAR_LMASK;\n+    static final long PATH_SEGMENT_HMASK = PCHAR_HMASK;\n+\n+    // query       = *( pchar / \"/\" / \"?\" )\n+    static final long QUERY_LMASK = PCHAR_LMASK | lowMask(\"/?\");\n+    static final long QUERY_HMASK = PCHAR_HMASK | highMask(\"/?\");\n+\n+    static final long QUERY_VALUE_LMASK = PCHAR_NOSUBDELIM_LMASK | lowMask(\"/?\");\n+    static final long QUERY_VALUE_HMASK = PCHAR_NOSUBDELIM_HMASK | highMask(\"/?\");\n+\n+    // fragment    = *( pchar / \"/\" / \"?\" )\n+    static final long FRAGMENT_LMASK = QUERY_LMASK;\n+    static final long FRAGMENT_HMASK = QUERY_HMASK;\n+\n+    // host        = IP-literal / IPv4address / reg-name\n+    // reg-name    = *( unreserved / pct-encoded / sub-delims )\n+    static final long HOST_NON_IP_LMASK = UNRESERVED_LMASK | SUBDELIM_LMASK;\n+    static final long HOST_NON_IP_HMASK = UNRESERVED_HMASK | SUBDELIM_HMASK;\n+\n+    private UriUtils() {\n+    }\n+\n+    /**\n+     * Decode the specified raw query with the specified {@code charset} for the specified maximum number of parameters.\n+     */\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams) {\n+        return decodeQueryParams(rawQuery, charset, maxParams, UriUtils::decodeComponent);\n+    }\n+\n+    static Map<String, List<String>> decodeQueryParams(@Nullable final String rawQuery, final Charset charset,\n+                                                       final int maxParams,\n+                                                       BiFunction<String, Charset, String> decoder) {\n+        if (maxParams <= 0) {\n+            throw new IllegalArgumentException(\"maxParams: \" + maxParams + \" (expected: > 0)\");\n+        }\n+\n+        if (rawQuery == null || rawQuery.isEmpty()) {\n+            return new LinkedHashMap<>(2);\n+        }\n+\n+        final Map<String, List<String>> params = new LinkedHashMap<>();\n+        int paramCountDown = maxParams;\n+        final int from = rawQuery.charAt(0) == '?' ? 1 : 0;\n+        final int len = rawQuery.length();\n+        int nameStart = from;\n+        int valueStart = -1;\n+        int i;\n+        loop:\n+        for (i = from; i < len; i++) {\n+            switch (rawQuery.charAt(i)) {\n+                case '=':\n+                    if (nameStart == i) {\n+                        nameStart = i + 1;\n+                    } else if (valueStart < nameStart) {\n+                        valueStart = i + 1;\n+                    }\n+                    break;\n+                case '&':\n+                case ';':\n+                    if (addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder)) {\n+                        paramCountDown--;\n+                        if (paramCountDown == 0) {\n+                            return params;\n+                        }\n+                    }\n+                    nameStart = i + 1;\n+                    break;\n+                case '#':\n+                    break loop;\n+                default:\n+                    // continue\n+            }\n+        }\n+        addQueryParam(rawQuery, nameStart, valueStart, i, charset, params, decoder);\n+        return params;\n+    }\n+\n+    static String encodeComponent(UriComponentType type, String component, Charset charset,\n+                                  boolean preservePctEncoded) {\n+        byte[] bytes = component.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (type.isValid(b)) {\n+                // noop\n+            } else if (preservePctEncoded && bytes.length - 3 >= i && isPctEncoded(bytes, b, i)) {\n+                i += 2; // only increment by 2 here, the for loop will increment 1 more\n+            } else {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length + 16);\n+                baos.write(bytes, 0, i);\n+                encodeHexDigits(baos, b);\n+                for (int j = i + 1; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (type.isValid(b)) {\n+                        baos.write(b);\n+                    } else if (preservePctEncoded && bytes.length - 3 >= j && isPctEncoded(bytes, b, j)) {\n+                        baos.write(bytes, j, 3);\n+                        j += 2; // only increment by 2 here, the for loop will increment 1 more\n+                    } else {\n+                        encodeHexDigits(baos, b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+        return component;\n+    }\n+\n+    static String decodeComponent(final String s, final Charset charset) {\n+        if (s.indexOf('%') < 0) {\n+            return s;\n+        }\n+        byte[] bytes = s.getBytes(charset);\n+        for (int i = 0; i < bytes.length; ++i) {\n+            byte b = bytes[i];\n+            if (b == '%') {\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length);\n+                baos.write(bytes, 0, i);\n+                baos.write(decodeHexDigits(bytes, i));\n+                for (int j = i + 3; j < bytes.length; ++j) {\n+                    b = bytes[j];\n+                    if (b == '%') {\n+                        baos.write(decodeHexDigits(bytes, j));\n+                        j += 2;\n+                    } else {\n+                        baos.write(b);\n+                    }\n+                }\n+                return new String(baos.toByteArray(), charset);\n+            }\n+        }\n+\n+        return s;\n+    }\n+\n+    static int parsePort(final String uri, final int begin, final int end) {\n+        final int len = end - begin;\n+        if (len == 4) {\n+            return (1000 * toDecimal(uri.charAt(begin))) +\n+                    (100 * toDecimal(uri.charAt(begin + 1))) +\n+                    (10 * toDecimal(uri.charAt(begin + 2))) +\n+                    toDecimal(uri.charAt(begin + 3));\n+        } else if (len == 3) {\n+            return (100 * toDecimal(uri.charAt(begin))) +\n+                    (10 * toDecimal(uri.charAt(begin + 1))) +\n+                    toDecimal(uri.charAt(begin + 2));\n+        } else if (len == 2) {\n+            return (10 * toDecimal(uri.charAt(begin))) +\n+                    toDecimal(uri.charAt(begin + 1));\n+        } else if (len == 5) {\n+            final int port = (10000 * toDecimal(uri.charAt(begin))) +\n+                    (1000 * toDecimal(uri.charAt(begin + 1))) +\n+                    (100 * toDecimal(uri.charAt(begin + 2))) +\n+                    (10 * toDecimal(uri.charAt(begin + 3))) +\n+                    toDecimal(uri.charAt(begin + 4));\n+            if (port > 65535) {\n+                throw new IllegalArgumentException(\"port out of bounds\");\n+            }\n+            return port;\n+        } else if (len == 1) {\n+            return toDecimal(uri.charAt(begin));\n+        } else {\n+            throw new IllegalArgumentException(\"invalid port\");\n+        }\n+    }\n+\n+    private static boolean addQueryParam(final String s, final int nameStart, int valueStart, final int valueEnd,\n+                                         final Charset charset, final Map<String, List<String>> params,\n+                                         final BiFunction<String, Charset, String> decoder) {\n+        if (nameStart >= valueEnd) {\n+            return false;\n+        }\n+        if (valueStart <= nameStart) {\n+            valueStart = valueEnd + 1;\n+        }\n+        final String name = decoder.apply(s.substring(nameStart, valueStart - 1), charset);\n+        final String value = decoder.apply(s.substring(valueStart, valueEnd), charset);\n+        final List<String> values = params.computeIfAbsent(name, k -> new ArrayList<>(1)); // Often there's only 1 value\n+        values.add(value);\n+        return true;\n+    }\n+\n+    private static void encodeHexDigits(ByteArrayOutputStream baos, byte b) {\n+        baos.write('%');\n+        baos.write(encodeHexNibble((b >>> 4) & 0xF));\n+        baos.write(encodeHexNibble(b & 0xF));\n+    }\n+\n+    private static byte decodeHexDigits(byte[] bytes, int i) {\n+        if (bytes.length - 2 <= i) {\n+            throw new IllegalArgumentException(\"Invalid pct-encoded at index \" + i);\n+        }\n+        final int hi = decodeHexNibble(bytes[i + 1]);\n+        final int lo = decodeHexNibble(bytes[i + 2]);\n+        if (hi == -1 || lo == -1) {\n+            throw new IllegalArgumentException(\"Invalid HEXDIG at index \" + i);\n+        }\n+        return (byte) ((hi << 4) + lo);\n+    }\n+\n+    private static byte encodeHexNibble(final int b) {\n+        // Character.forDigit() is not used here, as it addresses a larger\n+        // set of characters (both ASCII and full-width latin letters).\n+        if (b < 0 || b >= 16) {\n+            return 0;\n+        }\n+        if (b < 10) {\n+            return (byte) ('0' + b);\n+        }\n+        return (byte) ('A' - 10 + b); // uppercase", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTEwOA==", "bodyText": "Test cases when there is something else between ] and : (or end of string)", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514641108", "createdAt": "2020-10-30T00:27:05Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/test/java/io/servicetalk/http/api/HttpAuthorityFormUriTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import org.junit.Test;\n+\n+import static io.servicetalk.http.api.Uri3986Test.verifyUri;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.junit.Assert.assertEquals;\n+\n+@SuppressWarnings(\"PMD.AvoidUsingHardCodedIP\")\n+public class HttpAuthorityFormUriTest {\n+    @Test\n+    public void regNameAndPort() {\n+        verifyAuthForm(\"www.example.com:80\", \"www.example.com\", 80);\n+    }\n+\n+    @Test\n+    public void regName() {\n+        verifyAuthForm(\"www.example.com\", \"www.example.com\", -1);\n+    }\n+\n+    @Test\n+    public void ipv6AndPort() {\n+        verifyAuthForm(\"[::1]:8080\", \"[::1]\", 8080);\n+    }\n+\n+    @Test\n+    public void ipv6() {\n+        verifyAuthForm(\"[af::98]\", \"[af::98]\", -1);\n+    }\n+\n+    @Test\n+    public void ipv4AndPort() {\n+        verifyAuthForm(\"1.2.3.4:8080\", \"1.2.3.4\", 8080);\n+    }\n+\n+    @Test\n+    public void ipv4() {\n+        verifyAuthForm(\"244.244.244.244\", \"244.244.244.244\", -1);\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void ipv6InvalidNegativePort() {\n+        new HttpAuthorityFormUri(\"[::1]:-1\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void ipv6InvalidLargePort() {\n+        new HttpAuthorityFormUri(\"[::1]:65536\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void ipv6InvalidNoCloseBracketNoPort() {\n+        new HttpAuthorityFormUri(\"[::1\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void ipv6NonBracketWithScope() {\n+        // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+        // IPv6 + future must be enclosed in []\n+        new HttpAuthorityFormUri(\"0:0:0:0:0:0:0:0%0:49178\");\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void ipv6InvalidNoCloseBracketWithPort() {\n+        new HttpAuthorityFormUri(\"[::1:65536\");\n+    }\n+\n+    @Test\n+    public void encodeTouchesAllComponents() {\n+        verifyEncodeDecode(\"www.foo bar.com:8080\", \"www.foo%20bar.com:8080\");\n+    }\n+\n+    @Test\n+    public void encodeIPv6() {\n+        verifyEncodeDecode(\"[::1]:8080\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MTU1MQ==", "bodyText": "This method is used in a single place, can you please move it there and kill this class?", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514641551", "createdAt": "2020-10-30T00:28:59Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-router-jersey/src/main/java/io/servicetalk/http/router/jersey/CharSequenceUtils.java", "diffHunk": "@@ -26,23 +26,4 @@ private CharSequenceUtils() {\n     static CharSequence asCharSequence(final Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0MzgwNQ==", "bodyText": "Do we need defer here? The handle method is expected to execute only once.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514643805", "createdAt": "2020-10-30T00:37:44Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-utils/src/main/java/io/servicetalk/http/utils/RequestTargetDecoderHttpServiceFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.utils;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.http.api.HttpExecutionStrategy;\n+import io.servicetalk.http.api.HttpExecutionStrategyInfluencer;\n+import io.servicetalk.http.api.HttpServiceContext;\n+import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpResponse;\n+import io.servicetalk.http.api.StreamingHttpResponseFactory;\n+import io.servicetalk.http.api.StreamingHttpService;\n+import io.servicetalk.http.api.StreamingHttpServiceFilter;\n+import io.servicetalk.http.api.StreamingHttpServiceFilterFactory;\n+\n+import java.nio.charset.Charset;\n+\n+import static io.servicetalk.concurrent.api.Single.defer;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.Objects.requireNonNull;\n+/**\n+ * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Decodes</a> the\n+ * {@link StreamingHttpRequest#requestTarget()} for each incoming request.\n+ */\n+public final class RequestTargetDecoderHttpServiceFilter implements StreamingHttpServiceFilterFactory,\n+                                                              HttpExecutionStrategyInfluencer {\n+    private final Charset charset;\n+\n+    /**\n+     * Create a new instance.\n+     */\n+    public RequestTargetDecoderHttpServiceFilter() {\n+        this(US_ASCII);\n+    }\n+\n+    /**\n+     * Create a new instance.\n+     * @param charset The charset to use for the decoding.\n+     */\n+    public RequestTargetDecoderHttpServiceFilter(Charset charset) {\n+        this.charset = requireNonNull(charset);\n+    }\n+\n+    @Override\n+    public StreamingHttpServiceFilter create(final StreamingHttpService service) {\n+        return new StreamingHttpServiceFilter(service) {\n+            @Override\n+            public Single<StreamingHttpResponse> handle(final HttpServiceContext ctx,\n+                                                        final StreamingHttpRequest request,\n+                                                        final StreamingHttpResponseFactory responseFactory) {\n+                return defer(() -> {\n+                    request.requestTarget(request.requestTarget(charset));\n+                    return delegate().handle(ctx, request, responseFactory);\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0Mzg0Ng==", "bodyText": "Do we need defer here? The handle method is expected to execute only once.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514643846", "createdAt": "2020-10-30T00:37:54Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-utils/src/main/java/io/servicetalk/http/utils/RequestTargetEncoderHttpServiceFilter.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.utils;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.http.api.HttpExecutionStrategy;\n+import io.servicetalk.http.api.HttpExecutionStrategyInfluencer;\n+import io.servicetalk.http.api.HttpServiceContext;\n+import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpResponse;\n+import io.servicetalk.http.api.StreamingHttpResponseFactory;\n+import io.servicetalk.http.api.StreamingHttpService;\n+import io.servicetalk.http.api.StreamingHttpServiceFilter;\n+import io.servicetalk.http.api.StreamingHttpServiceFilterFactory;\n+\n+import java.nio.charset.Charset;\n+\n+import static io.servicetalk.concurrent.api.Single.defer;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Encodes</a> the\n+ * {@link StreamingHttpRequest#requestTarget()} for each incoming request.\n+ * <p>\n+ * URI producers <a href=\"https://tools.ietf.org/html/rfc3986\">should encode query strings</a>, but\n+ * just in case they don't this filter will do the encoding.\n+ */\n+public final class RequestTargetEncoderHttpServiceFilter implements StreamingHttpServiceFilterFactory,\n+                                                                    HttpExecutionStrategyInfluencer {\n+    private final Charset charset;\n+\n+    /**\n+     * Create a new instance.\n+     */\n+    public RequestTargetEncoderHttpServiceFilter() {\n+        this(US_ASCII);\n+    }\n+\n+    /**\n+     * Create a new instance.\n+     * @param charset The charset to use for the encoding.\n+     */\n+    public RequestTargetEncoderHttpServiceFilter(Charset charset) {\n+        this.charset = requireNonNull(charset);\n+    }\n+\n+    @Override\n+    public StreamingHttpServiceFilter create(final StreamingHttpService service) {\n+        return new StreamingHttpServiceFilter(service) {\n+            @Override\n+            public Single<StreamingHttpResponse> handle(final HttpServiceContext ctx,\n+                                                        final StreamingHttpRequest request,\n+                                                        final StreamingHttpResponseFactory responseFactory) {\n+                return defer(() -> {\n+                    request.requestTarget(request.requestTarget(), charset);\n+                    return delegate().handle(ctx, request, responseFactory);\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDY0NDIxMQ==", "bodyText": "nit: shifter indentation", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r514644211", "createdAt": "2020-10-30T00:39:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-utils/src/main/java/io/servicetalk/http/utils/RequestTargetDecoderHttpServiceFilter.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.utils;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.http.api.HttpExecutionStrategy;\n+import io.servicetalk.http.api.HttpExecutionStrategyInfluencer;\n+import io.servicetalk.http.api.HttpServiceContext;\n+import io.servicetalk.http.api.StreamingHttpRequest;\n+import io.servicetalk.http.api.StreamingHttpResponse;\n+import io.servicetalk.http.api.StreamingHttpResponseFactory;\n+import io.servicetalk.http.api.StreamingHttpService;\n+import io.servicetalk.http.api.StreamingHttpServiceFilter;\n+import io.servicetalk.http.api.StreamingHttpServiceFilterFactory;\n+\n+import java.nio.charset.Charset;\n+\n+import static io.servicetalk.concurrent.api.Single.defer;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static java.util.Objects.requireNonNull;\n+/**\n+ * <a href=\"https://tools.ietf.org/html/rfc3986#section-2.1\">Decodes</a> the\n+ * {@link StreamingHttpRequest#requestTarget()} for each incoming request.\n+ */\n+public final class RequestTargetDecoderHttpServiceFilter implements StreamingHttpServiceFilterFactory,\n+                                                              HttpExecutionStrategyInfluencer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c131b9cdb04caaed361fe6ba9d83bb174a2d76fb"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a72d706c0226ffa4be30bdfba46df6e45fc3a4a", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/1a72d706c0226ffa4be30bdfba46df6e45fc3a4a", "committedDate": "2020-10-31T01:57:36Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0aeb6520f93c067b50d945629c22125e4ad607", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/cc0aeb6520f93c067b50d945629c22125e4ad607", "committedDate": "2020-11-02T16:34:57Z", "message": "add more verification for path"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDE0Nzk1", "url": "https://github.com/apple/servicetalk/pull/1194#pullrequestreview-522014795", "createdAt": "2020-11-02T21:44:15Z", "commit": {"oid": "cc0aeb6520f93c067b50d945629c22125e4ad607"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo0NDoxNVrOHsWvXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMTo1NzozM1rOHsXIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MTk2Nw==", "bodyText": "It should be x + 2 now. Please, add more test to verify scenarios with IPv6. The whole parsedHostHeader.charAt(0) == '[' branch is not tested.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r516271967", "createdAt": "2020-11-02T21:44:15Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -412,41 +356,68 @@ private Uri lazyParseRequestTarget() {\n         return requestTargetUri;\n     }\n \n+    private static void validateFirstPathSegment(final Uri httpUri, final String path) {\n+        int i = 0;\n+        final String scheme = httpUri.scheme();\n+        if (scheme == null || scheme.isEmpty()) {\n+            // https://tools.ietf.org/html/rfc3986#section-3.3\n+            // In addition, a URI reference (Section 4.1) may be a relative-path reference, in which case the first path\n+            // segment cannot contain a colon (\":\") character.\n+            for (; i < path.length(); ++i) {\n+                final char c = path.charAt(i);\n+                if (c == '/') {\n+                    break;\n+                } else if (c == ':') {\n+                    throw new IllegalArgumentException(\"relative-path cannot contain `:` in first segment\");\n+                }\n+            }\n+        }\n+        // https://tools.ietf.org/html/rfc3986#section-3.3\n+        // If a URI does not contain an authority component, then the path cannot begin with two slash characters\n+        // (\"//\").\n+        if (httpUri.host() == null && path.length() >= 2 && path.charAt(0) == '/' && path.charAt(1) == '/') {\n+            throw new IllegalArgumentException(\"No authority component, path cannot start with '//'\");\n+        }\n+        // It is assumed '?'/'#' characters that delimit query/fragment components have been escaped and are therefore\n+        // not validated.\n+    }\n+\n+    @Nullable\n     private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        if (parsedHostHeader.isEmpty()) {\n+            return null;\n+        }\n+\n         String parsedHost;\n         int parsedPort = -1;\n-        final int x = parsedHostHeader.lastIndexOf(':');\n-        if (x > 0) {\n-            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n-            if (y >= 0) {\n-                // IPv6 address is present in the header\n-                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n-                // A host identified by an Internet Protocol literal address, version 6\n-                // [RFC3513] or later, is distinguished by enclosing the IP literal\n-                // within square brackets (\"[\" and \"]\").  This is the only place where\n-                // square bracket characters are allowed in the URI syntax.\n-                final int cb;\n-                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {\n-                    throw new IllegalArgumentException(\"IPv6 address should be in square brackets\");\n-                }\n-                if (cb < x) {\n-                    parsedHost = parsedHostHeader.substring(0, x);\n+        if (parsedHostHeader.charAt(0) == '[') {\n+            // IPv6 address is present in the header\n+            // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+            // A host identified by an Internet Protocol literal address, version 6\n+            // [RFC3513] or later, is distinguished by enclosing the IP literal\n+            // within square brackets (\"[\" and \"]\").  This is the only place where\n+            // square bracket characters are allowed in the URI syntax.\n+            final int x = parsedHostHeader.lastIndexOf(']');\n+            if (x <= 0) {\n+                throw new IllegalArgumentException(\"IPv6 address should be in square brackets, and not empty\");\n+            }\n+            parsedHost = parsedHostHeader.substring(0, x);\n+            if (parsedHostHeader.length() - 1 > x) {\n+                if (parsedHostHeader.charAt(x + 1) == ':') {\n                     parsedPort = parsePort(parsedHostHeader, x + 1, parsedHostHeader.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0aeb6520f93c067b50d945629c22125e4ad607"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3MzU5NA==", "bodyText": "I feel like it's a frequent mistake to forget enclosing IPv6 within square brackets. Worth keeping a check for the second occurrence of a colon.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r516273594", "createdAt": "2020-11-02T21:47:32Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -412,41 +356,68 @@ private Uri lazyParseRequestTarget() {\n         return requestTargetUri;\n     }\n \n+    private static void validateFirstPathSegment(final Uri httpUri, final String path) {\n+        int i = 0;\n+        final String scheme = httpUri.scheme();\n+        if (scheme == null || scheme.isEmpty()) {\n+            // https://tools.ietf.org/html/rfc3986#section-3.3\n+            // In addition, a URI reference (Section 4.1) may be a relative-path reference, in which case the first path\n+            // segment cannot contain a colon (\":\") character.\n+            for (; i < path.length(); ++i) {\n+                final char c = path.charAt(i);\n+                if (c == '/') {\n+                    break;\n+                } else if (c == ':') {\n+                    throw new IllegalArgumentException(\"relative-path cannot contain `:` in first segment\");\n+                }\n+            }\n+        }\n+        // https://tools.ietf.org/html/rfc3986#section-3.3\n+        // If a URI does not contain an authority component, then the path cannot begin with two slash characters\n+        // (\"//\").\n+        if (httpUri.host() == null && path.length() >= 2 && path.charAt(0) == '/' && path.charAt(1) == '/') {\n+            throw new IllegalArgumentException(\"No authority component, path cannot start with '//'\");\n+        }\n+        // It is assumed '?'/'#' characters that delimit query/fragment components have been escaped and are therefore\n+        // not validated.\n+    }\n+\n+    @Nullable\n     private static HostAndPort parseHostHeader(String parsedHostHeader) {\n+        if (parsedHostHeader.isEmpty()) {\n+            return null;\n+        }\n+\n         String parsedHost;\n         int parsedPort = -1;\n-        final int x = parsedHostHeader.lastIndexOf(':');\n-        if (x > 0) {\n-            final int y = parsedHostHeader.lastIndexOf(':', x - 1);\n-            if (y >= 0) {\n-                // IPv6 address is present in the header\n-                // https://tools.ietf.org/html/rfc3986#section-3.2.2\n-                // A host identified by an Internet Protocol literal address, version 6\n-                // [RFC3513] or later, is distinguished by enclosing the IP literal\n-                // within square brackets (\"[\" and \"]\").  This is the only place where\n-                // square bracket characters are allowed in the URI syntax.\n-                final int cb;\n-                if (parsedHostHeader.charAt(0) != '[' || (cb = parsedHostHeader.lastIndexOf(']')) < 0) {\n-                    throw new IllegalArgumentException(\"IPv6 address should be in square brackets\");\n-                }\n-                if (cb < x) {\n-                    parsedHost = parsedHostHeader.substring(0, x);\n+        if (parsedHostHeader.charAt(0) == '[') {\n+            // IPv6 address is present in the header\n+            // https://tools.ietf.org/html/rfc3986#section-3.2.2\n+            // A host identified by an Internet Protocol literal address, version 6\n+            // [RFC3513] or later, is distinguished by enclosing the IP literal\n+            // within square brackets (\"[\" and \"]\").  This is the only place where\n+            // square bracket characters are allowed in the URI syntax.\n+            final int x = parsedHostHeader.lastIndexOf(']');\n+            if (x <= 0) {\n+                throw new IllegalArgumentException(\"IPv6 address should be in square brackets, and not empty\");\n+            }\n+            parsedHost = parsedHostHeader.substring(0, x);\n+            if (parsedHostHeader.length() - 1 > x) {\n+                if (parsedHostHeader.charAt(x + 1) == ':') {\n                     parsedPort = parsePort(parsedHostHeader, x + 1, parsedHostHeader.length());\n-                } else if (cb != parsedHostHeader.length() - 1) {\n-                    throw new IllegalArgumentException(\n-                            \"']' should be at the end of IPv6 address or before port number\");\n                 } else {\n-                    parsedHost = parsedHostHeader;\n+                    throw new IllegalArgumentException(\"Unexpected content after IPv6 address\");\n                 }\n+            }\n+        } else {\n+            // IPv4 or literal host with port number\n+            final int x = parsedHostHeader.lastIndexOf(':');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0aeb6520f93c067b50d945629c22125e4ad607"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjI3ODM3OA==", "bodyText": "Please, add a test with userInfo != null and port >= 0, these code paths are not tested.", "url": "https://github.com/apple/servicetalk/pull/1194#discussion_r516278378", "createdAt": "2020-11-02T21:57:33Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -539,4 +496,40 @@ public int hashCode() {\n         result = 31 * result + requestTarget.hashCode();\n         return result;\n     }\n+\n+    private static void appendScheme(StringBuilder sb, Uri httpUri) {\n+        if (httpUri.scheme() != null) {\n+            sb.append(httpUri.scheme()).append(':');\n+        }\n+    }\n+\n+    private static void appendAuthority(StringBuilder sb, Uri httpUri) {\n+        if (httpUri.host() != null) {\n+            // The authority component is preceded by a double slash (\"//\")\n+            // authority   = [ userinfo \"@\" ] host [ \":\" port ]\n+            sb.append(\"//\");\n+            if (httpUri.userInfo() != null) {\n+                sb.append(httpUri.userInfo()).append('@');\n+            }\n+\n+            sb.append(httpUri.host());\n+            if (httpUri.port() >= 0) {\n+                sb.append(':').append(httpUri.port());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0aeb6520f93c067b50d945629c22125e4ad607"}, "originalPosition": 344}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972861a2147eb57d21fe8e444825bf6b04c14cff", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/972861a2147eb57d21fe8e444825bf6b04c14cff", "committedDate": "2020-11-03T02:28:22Z", "message": "review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3527, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}