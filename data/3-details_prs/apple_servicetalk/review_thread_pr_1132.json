{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTMzNDUz", "number": 1132, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTo1Mzo1OFrOEa57mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxMjozOVrOEbKTJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjQ3NTc4OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTo1Mzo1OFrOHEnGWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTo1Mzo1OFrOHEnGWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5Njk1Mw==", "bodyText": "nit: final", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r474596953", "createdAt": "2020-08-21T09:53:58Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -347,4 +356,37 @@ protected HttpHeaders payloadComplete(final HttpHeaders trailers) {\n             return trailers;\n         }\n     }\n+\n+    static class EnsureValidGrpcResponseTransformer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjQ4Mjg1OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTo1NToxOVrOHEnKlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTo1NToxOVrOHEnKlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5ODAzOA==", "bodyText": "seems like this field is never used which means you could most likely just make this implementation a singleton and so reduce GC ?", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r474598038", "createdAt": "2020-08-21T09:55:19Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -347,4 +356,37 @@ protected HttpHeaders payloadComplete(final HttpHeaders trailers) {\n             return trailers;\n         }\n     }\n+\n+    static class EnsureValidGrpcResponseTransformer\n+            implements TrailersTransformer<Object, Object> {\n+\n+        private final HttpResponseStatus status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk1NDczOnYy", "diffSide": "LEFT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMDozNlrOHE1L6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMDozNlrOHE1L6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyNzc1NQ==", "bodyText": "I think this change isn't needed anymore, the new transformer also does the same thing.", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r474827755", "createdAt": "2020-08-21T17:20:36Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -63,14 +65,6 @@\n     private static final CharSequence IDENTITY = newAsciiString(None.encoding());\n     private static final CharSequence GRPC_MESSAGE_ENCODING_KEY = newAsciiString(\"grpc-encoding\");\n     private static final GrpcStatus STATUS_OK = GrpcStatus.fromCodeValue(GrpcStatusCode.OK.value());\n-    private static final TrailersTransformer<Object, Object> ENSURE_GRPC_STATUS_RECEIVED =\n-            new StatelessTrailersTransformer<Object>() {\n-        @Override\n-        protected HttpHeaders payloadComplete(final HttpHeaders trailers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk1ODAyOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMTozNlrOHE1N3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyMTozNlrOHE1N3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyODI1NQ==", "bodyText": "rename to ensureGrpcContentType?", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r474828255", "createdAt": "2020-08-21T17:21:36Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -185,16 +183,27 @@ static void setStatus(final HttpHeaders trailers, final Throwable cause, final B\n         }\n \n         // There was no grpc-status in the trailers, so it must be in headers.\n-        ensureGrpcStatusReceived(response.headers());\n+        ensureGrpcStatusReceived(headers);\n         return response.payloadBody(deserializer);\n     }\n \n+    private static void ensureNotPlainHtmlResponse(final HttpResponseStatus status,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzk2ODYxOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/HtmlResponseUponGrpcRequestTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyNDo1N1rOHE1Udg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyNDo1N1rOHE1Udg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyOTk0Mg==", "bodyText": "We should also add some positive tests when the content type is correct with and without the charset.", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r474829942", "createdAt": "2020-08-21T17:24:57Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/HtmlResponseUponGrpcRequestTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.netty;\n+\n+import io.servicetalk.grpc.api.GrpcStatusCode;\n+import io.servicetalk.grpc.api.GrpcStatusException;\n+import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n+import io.servicetalk.http.netty.HttpServers;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.grpc.api.GrpcExecutionStrategies.noOffloadsStrategy;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class HtmlResponseUponGrpcRequestTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTEzODQ0OnYy", "diffSide": "RIGHT", "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HeaderUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDowMDo0M1rOHFAp6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDowMDo0M1rOHFAp6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxNTY1OA==", "bodyText": "nit: shifted indentation", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r475015658", "createdAt": "2020-08-22T00:00:43Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HeaderUtils.java", "diffHunk": "@@ -647,7 +647,7 @@ private HttpCookiePair findNext(CharSequence cookieHeaderValue) {\n      * the provided charset has been found, {@code false} otherwise.\n      * @see <a href=\"https://tools.ietf.org/html/rfc2045#section-5.1\">Syntax of the Content-Type Header Field</a>\n      */\n-    static boolean hasContentType(final HttpHeaders headers,\n+    public static boolean hasContentType(final HttpHeaders headers,\n                                   final CharSequence expectedContentType,\n                                   @Nullable final Charset expectedCharset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTE0MDQzOnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/HtmlResponseUponGrpcRequestTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDowMjoyNVrOHFArDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDowMjoyNVrOHFArDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxNTk0OQ==", "bodyText": "If we don't have a need for noOffloadsStrategy() we should use the default strategy.", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r475015949", "createdAt": "2020-08-22T00:02:25Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-netty/src/test/java/io/servicetalk/grpc/netty/HtmlResponseUponGrpcRequestTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.grpc.netty;\n+\n+import io.servicetalk.grpc.api.GrpcStatusCode;\n+import io.servicetalk.grpc.api.GrpcStatusException;\n+import io.servicetalk.grpc.netty.TesterProto.TestRequest;\n+import io.servicetalk.http.netty.HttpServers;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.concurrent.ExecutionException;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.grpc.api.GrpcExecutionStrategies.noOffloadsStrategy;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Collections.singletonList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+public final class HtmlResponseUponGrpcRequestTest {\n+\n+    private ServerContext serverContext;\n+    private TesterProto.Tester.BlockingTesterClient client;\n+\n+    public HtmlResponseUponGrpcRequestTest() throws Exception {\n+        final String responsePayload = \"non-grpc error!\";\n+        serverContext = HttpServers.forAddress(localAddress(0))\n+                .protocols(h2Default())\n+                .listenAndAwait((ctx, request, responseFactory) ->\n+                        succeeded(responseFactory.badRequest().payloadBody(responsePayload, textSerializer())));\n+\n+        client = GrpcClients.forAddress(serverHostAndPort(serverContext))\n+                .executionStrategy(noOffloadsStrategy())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTE1NzQ4OnYy", "diffSide": "RIGHT", "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxMjozOVrOHFA0lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxMjozOVrOHFA0lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxODM5MQ==", "bodyText": "nit: extra space between \"HTTP\" and \"status\"", "url": "https://github.com/apple/servicetalk/pull/1132#discussion_r475018391", "createdAt": "2020-08-22T00:12:39Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-grpc-api/src/main/java/io/servicetalk/grpc/api/GrpcUtils.java", "diffHunk": "@@ -185,16 +183,27 @@ static void setStatus(final HttpHeaders trailers, final Throwable cause, final B\n         }\n \n         // There was no grpc-status in the trailers, so it must be in headers.\n-        ensureGrpcStatusReceived(response.headers());\n+        ensureGrpcStatusReceived(headers);\n         return response.payloadBody(deserializer);\n     }\n \n+    private static void ensureNotPlainHtmlResponse(final HttpResponseStatus status,\n+                                                      final HttpHeaders headers) {\n+        final CharSequence contentTypeHeader = headers.get(CONTENT_TYPE);\n+        if (!hasContentType(headers, GRPC_CONTENT_TYPE, null)) {\n+            throw new GrpcStatus(INTERNAL, null,\n+                    \"HTTP  status code: \" + status + \"\\n\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c70ef30c07d665f7283cf9d4b75b22777ae5d47b"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2550, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}