{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNTUwNzUy", "number": 1222, "title": "Publisher#flatMapConcatIterable drain demand on onNext exception", "bodyText": "Motivation:\nPublisher#flatMapConcatIterable rethrows any exceptions from donwstream\nonNext delivery, but it does not attempt to drain pending demand.\nBecause this operator holds on to demand internally (e.g. requests 1\nafter each element is processed) that may result in deadlock due to\ndemand being swallowed in the event of exception and upstream\nrecoverWith continues control flow.\nModifications:\n\nPublisherConcatMapIterable should attempt to request more from the\nsubscription if demand is still pending.\nOffloaders should dispatch exception before cancellation. This will\nallow control flow to get a more meaningful exception based upon\napplication control flow (e.g. instead of CancellationException).\n\nResult:\nPublisher#flatMapConcatIterable does not swallow demand in the event of\nexceptions and can be used with upstream recoverWith operators.", "createdAt": "2020-11-18T22:49:43Z", "url": "https://github.com/apple/servicetalk/pull/1222", "merged": true, "mergeCommit": {"oid": "7a58081b45eb156f6b9c89de84df17eb77308ee2"}, "closed": true, "closedAt": "2020-11-19T02:54:43Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd2HwVgH2gAyNTIzNTUwNzUyOjI0MTdkMjQ1NTU2MDc2N2QxZDgxMjFjNzFmZTVkYjdlMjdmODdmZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd46Z7gH2gAyNTIzNTUwNzUyOjM2YTIyMmY3Y2ZhZWY2ZDk5Nzk2YjFkNGFhOTg1ZDMyMGM4ZTg4ZTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2417d2455560767d1d8121c71fe5db7e27f87fd3", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/2417d2455560767d1d8121c71fe5db7e27f87fd3", "committedDate": "2020-11-18T22:44:23Z", "message": "Publisher#flatMapConcatIterable drain demand on onNext exception\n\nMotivation:\nPublisher#flatMapConcatIterable rethrows any exceptions from donwstream\nonNext delivery, but it does not attempt to drain pending demand.\nBecause this operator holds on to demand internally (e.g. requests 1\nafter each element is processed) that may result in deadlock due to\ndemand being swallowed in the event of exception and upstream\nrecoverWith continues control flow.\n\nModifications:\n- PublisherConcatMapIterable should attempt to request more from the\nsubscription if demand is still pending.\n- Offloaders should dispatch exception before cancellation. This will\nallow control flow to get a more meaningful exception based upon\napplication control flow (e.g. instead of CancellationException).\n\nResult:\nPublisher#flatMapConcatIterable does not swallow demand in the event of\nexceptions and can be used with upstream recoverWith operators."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2a7a0c9e0928c57874ce9f18083767cad83dc41", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/d2a7a0c9e0928c57874ce9f18083767cad83dc41", "committedDate": "2020-11-18T22:50:58Z", "message": "fix log statment to use the exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTk4Mzc0", "url": "https://github.com/apple/servicetalk/pull/1222#pullrequestreview-533998374", "createdAt": "2020-11-19T00:52:12Z", "commit": {"oid": "d2a7a0c9e0928c57874ce9f18083767cad83dc41"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1MjoxMlrOH2IPpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDo1OTo1MFrOH2IaNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDIyOQ==", "bodyText": "Inside sendOnErrorToOriginal, it looks like we should do the opposite:\n        private void sendOnErrorToOriginal(final Throwable throwable) {\n            try {\n                original.onError(throwable);\n            } catch (Throwable t) {\n                t.addSuppressed(throwable);\n                LOGGER.error(\"Ignored unexpected exception terminating subscriber: {}.\", original, t);\n            }\n        }\nWDYT?", "url": "https://github.com/apple/servicetalk/pull/1222#discussion_r526520229", "createdAt": "2020-11-19T00:52:12Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/ThreadBasedSignalOffloader.java", "diffHunk": "@@ -499,6 +499,7 @@ public void sendSignals0() {\n                         original.onNext(signal == NULL_ON_NEXT ? null : uncheckedCast(signal));\n                     } catch (Throwable throwable) {\n                         setTerminated();\n+                        sendOnErrorToOriginal(throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a7a0c9e0928c57874ce9f18083767cad83dc41"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMTAyOQ==", "bodyText": "Should we also flip sendCancel/sendOnErrorToOriginal order in lines 485-486?", "url": "https://github.com/apple/servicetalk/pull/1222#discussion_r526521029", "createdAt": "2020-11-19T00:54:35Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/ThreadBasedSignalOffloader.java", "diffHunk": "@@ -499,6 +499,7 @@ public void sendSignals0() {\n                         original.onNext(signal == NULL_ON_NEXT ? null : uncheckedCast(signal));\n                     } catch (Throwable throwable) {\n                         setTerminated();\n+                        sendOnErrorToOriginal(throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMDIyOQ=="}, "originalCommit": {"oid": "d2a7a0c9e0928c57874ce9f18083767cad83dc41"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyMjkzMg==", "bodyText": "Because we try-catch target.onError(th) invocation, finally is not necessary anymore. Consider using SubscriberUtils.safeOnError for simplicity.", "url": "https://github.com/apple/servicetalk/pull/1222#discussion_r526522932", "createdAt": "2020-11-19T00:59:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/TaskBasedSignalOffloader.java", "diffHunk": "@@ -358,15 +358,13 @@ public void run() {\n                         } catch (Throwable th) {\n                             clearSignalsFromExecutorThread();\n                             try {\n+                                target.onError(th);\n+                            } catch (Throwable throwable) {\n+                                LOGGER.error(\"Ignored unexpected exception from onError(). Subscriber: {}\", target,\n+                                        throwable);\n+                            } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2a7a0c9e0928c57874ce9f18083767cad83dc41"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36a222f7cfaef6d99796b1d4aa985d320c8e88e9", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/36a222f7cfaef6d99796b1d4aa985d320c8e88e9", "committedDate": "2020-11-19T01:59:31Z", "message": "use safe methods from SubscriberUtils"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3341, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}