{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyODYwODQ4", "number": 1135, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMDoyOFrOEb0KQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToyODo1MFrOEcQJBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3NjAxNjAyOnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMTowMDoyOFrOHF9--w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwMjoyMzo0OVrOHGBVzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMDQ3NQ==", "bodyText": "For a public API, I would prefer a combine() method with a var-arg and if we want, we can optimize for 2 vs many cases.", "url": "https://github.com/apple/servicetalk/pull/1135#discussion_r476020475", "createdAt": "2020-08-25T01:00:28Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "diffHunk": "@@ -38,4 +38,16 @@ public static TransportObserver asSafeObserver(final TransportObserver observer)\n         }\n         return new CatchAllTransportObserver(observer);\n     }\n+\n+    /**\n+     * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     * @return a {@link TransportObserver} that delegates all invocations to the {@code first} and {@code second}\n+     * {@link TransportObserver}s\n+     */\n+    public static TransportObserver biTransportObserver(final TransportObserver first, final TransportObserver second) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc49f19f77dd701e7ead20706863a962756d3ff2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjA3NTQ3MA==", "bodyText": "Good idea! Added support for multiple", "url": "https://github.com/apple/servicetalk/pull/1135#discussion_r476075470", "createdAt": "2020-08-25T02:23:49Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "diffHunk": "@@ -38,4 +38,16 @@ public static TransportObserver asSafeObserver(final TransportObserver observer)\n         }\n         return new CatchAllTransportObserver(observer);\n     }\n+\n+    /**\n+     * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     * @return a {@link TransportObserver} that delegates all invocations to the {@code first} and {@code second}\n+     * {@link TransportObserver}s\n+     */\n+    public static TransportObserver biTransportObserver(final TransportObserver first, final TransportObserver second) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjAyMDQ3NQ=="}, "originalCommit": {"oid": "bc49f19f77dd701e7ead20706863a962756d3ff2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTUxMTE0OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjoyODo1NFrOHGgIDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjo0MTo0OVrOHGgoCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTg1NQ==", "bodyText": "Why not just have combine(final TransportObserver... observers) ?\nAlso, may be modify the BiTransportObserver to accept an array instead of two observers.", "url": "https://github.com/apple/servicetalk/pull/1135#discussion_r476579855", "createdAt": "2020-08-25T16:28:54Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "diffHunk": "@@ -36,18 +36,27 @@ public static TransportObserver asSafeObserver(final TransportObserver observer)\n         if (observer instanceof CatchAllTransportObserver) {\n             return observer;\n         }\n+        if (observer instanceof BiTransportObserver) {\n+            // BiTransportObserver is always safe\n+            return observer;\n+        }\n         return new CatchAllTransportObserver(observer);\n     }\n \n     /**\n-     * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+     * Combines multiple {@link TransportObserver}s into a single {@link TransportObserver}.\n      *\n      * @param first the {@link TransportObserver} that will receive events first\n      * @param second the {@link TransportObserver} that will receive events second\n-     * @return a {@link TransportObserver} that delegates all invocations to the {@code first} and {@code second}\n-     * {@link TransportObserver}s\n+     * @param others additional {@link TransportObserver}s that will receive events\n+     * @return a {@link TransportObserver} that delegates all invocations to the provided {@link TransportObserver}s\n      */\n-    public static TransportObserver biTransportObserver(final TransportObserver first, final TransportObserver second) {\n-        return new BiTransportObserver(first, second);\n+    public static TransportObserver combine(final TransportObserver first, final TransportObserver second,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e70112b6c8e7e2c7ecf569b34a438282bc212941"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4ODA0Mw==", "bodyText": "At least two observer are required to combine. Good to highlight that in the API instead of verifying at runtime.\nHaving an array inside BiTransportObserver will require an array inside every observer level, producing boilerplate at every level to traverse the array. Let's start with simplified approach and we can reconsider if necessary.", "url": "https://github.com/apple/servicetalk/pull/1135#discussion_r476588043", "createdAt": "2020-08-25T16:41:49Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "diffHunk": "@@ -36,18 +36,27 @@ public static TransportObserver asSafeObserver(final TransportObserver observer)\n         if (observer instanceof CatchAllTransportObserver) {\n             return observer;\n         }\n+        if (observer instanceof BiTransportObserver) {\n+            // BiTransportObserver is always safe\n+            return observer;\n+        }\n         return new CatchAllTransportObserver(observer);\n     }\n \n     /**\n-     * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+     * Combines multiple {@link TransportObserver}s into a single {@link TransportObserver}.\n      *\n      * @param first the {@link TransportObserver} that will receive events first\n      * @param second the {@link TransportObserver} that will receive events second\n-     * @return a {@link TransportObserver} that delegates all invocations to the {@code first} and {@code second}\n-     * {@link TransportObserver}s\n+     * @param others additional {@link TransportObserver}s that will receive events\n+     * @return a {@link TransportObserver} that delegates all invocations to the provided {@link TransportObserver}s\n      */\n-    public static TransportObserver biTransportObserver(final TransportObserver first, final TransportObserver second) {\n-        return new BiTransportObserver(first, second);\n+    public static TransportObserver combine(final TransportObserver first, final TransportObserver second,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU3OTg1NQ=="}, "originalCommit": {"oid": "e70112b6c8e7e2c7ecf569b34a438282bc212941"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDYwMDM5OnYy", "diffSide": "RIGHT", "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToyODo1MFrOHGqqpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTo0NTowNlrOHGrhRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1MjU0OQ==", "bodyText": "This is what I was trying to avoid by having first, second, others arguments: http://jtechies.blogspot.com/2012/07/item-42-use-varargs-judiciously.html", "url": "https://github.com/apple/servicetalk/pull/1135#discussion_r476752549", "createdAt": "2020-08-25T21:28:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "diffHunk": "@@ -36,6 +38,31 @@ public static TransportObserver asSafeObserver(final TransportObserver observer)\n         if (observer instanceof CatchAllTransportObserver) {\n             return observer;\n         }\n+        if (observer instanceof BiTransportObserver) {\n+            // BiTransportObserver is always safe\n+            return observer;\n+        }\n         return new CatchAllTransportObserver(observer);\n     }\n+\n+    /**\n+     * Combines multiple {@link TransportObserver}s into a single {@link TransportObserver}.\n+     *\n+     * @param other {@link TransportObserver}s to combine\n+     * @return a {@link TransportObserver} that delegates all invocations to the provided {@link TransportObserver}s\n+     */\n+    public static TransportObserver combine(final TransportObserver... other) {\n+        switch (other.length) {\n+            case 0:\n+                throw new IllegalArgumentException(\"At least one TransportObserver is required to combine\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d29d5a0bcdd581e946e19be7360b19b318a292"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc2NjUzNA==", "bodyText": "I think this is OK and inline with what we do elsewhere:\nhttps://github.com/apple/servicetalk/blob/main/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/MergeCompletable.java#L41", "url": "https://github.com/apple/servicetalk/pull/1135#discussion_r476766534", "createdAt": "2020-08-25T21:45:06Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-transport-api/src/main/java/io/servicetalk/transport/api/TransportObservers.java", "diffHunk": "@@ -36,6 +38,31 @@ public static TransportObserver asSafeObserver(final TransportObserver observer)\n         if (observer instanceof CatchAllTransportObserver) {\n             return observer;\n         }\n+        if (observer instanceof BiTransportObserver) {\n+            // BiTransportObserver is always safe\n+            return observer;\n+        }\n         return new CatchAllTransportObserver(observer);\n     }\n+\n+    /**\n+     * Combines multiple {@link TransportObserver}s into a single {@link TransportObserver}.\n+     *\n+     * @param other {@link TransportObserver}s to combine\n+     * @return a {@link TransportObserver} that delegates all invocations to the provided {@link TransportObserver}s\n+     */\n+    public static TransportObserver combine(final TransportObserver... other) {\n+        switch (other.length) {\n+            case 0:\n+                throw new IllegalArgumentException(\"At least one TransportObserver is required to combine\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1MjU0OQ=="}, "originalCommit": {"oid": "98d29d5a0bcdd581e946e19be7360b19b318a292"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}