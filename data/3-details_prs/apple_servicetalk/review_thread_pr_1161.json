{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MjI5MDYy", "number": 1161, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyNDo0OVrOEpIbfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxOTozNFrOEp6DEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTY1MTgyOnYy", "diffSide": "LEFT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapMerge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyNDo0OVrOHan_FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNzoyNDo0OVrOHan_FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY4MDE0OA==", "bodyText": "the issue was here if the item doesn't require demand we should force a drain as we can't rely upon more demand to trigger a domain. however I refactored this method a bit to reduce the critical area and make the drain less conditional (e.g. now we can just use enqueueAndDrain).", "url": "https://github.com/apple/servicetalk/pull/1161#discussion_r497680148", "createdAt": "2020-09-30T17:24:49Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherFlatMapMerge.java", "diffHunk": "@@ -304,33 +304,32 @@ private boolean tryDecrementPendingDemand() {\n         }\n \n         private void tryEmitItem(Object item, FlatMapPublisherSubscriber<T, R> subscriber) {\n-            if (tryAcquireLock(emittingLockUpdater, this)) { // fast path. no concurrency, try to skip the queue.\n-                boolean mappedSourcesCompleted = false;\n+            // We can skip the queue if the following conditions are meet:\n+            // 1. There is downstream requestN demand.\n+            // 2. The mapped subscriber doesn't have any signals already in the queue. We only need to preserve the\n+            //    ordering for each mapped source, and there is no \"overall\" ordering.\n+            // 3. We don't concurrently invoke the downstream subscriber. Concurrency control is provided by the\n+            //    emitting lock.\n+            final boolean needsDemand;\n+            if (subscriber.hasSignalsQueued() || ((needsDemand = needsDemand(item)) && !tryDecrementPendingDemand())) {\n+                subscriber.markSignalsQueued();\n+                enqueueAndDrain(item);\n+            } else if (item == MAPPED_SOURCE_COMPLETE) {\n+                requestMoreFromUpstream(1);\n+            } else if (tryAcquireLock(emittingLockUpdater, this)) { // fast path. no concurrency, try to skip the queue.\n                 try {\n-                    // We can skip the queue if the following conditions are meet:\n-                    // 1. There is downstream requestN demand.\n-                    // 2. The mapped subscriber doesn't have any signals already in the queue. We only need to preserve\n-                    //    the ordering for each mapped source, and there is no \"overall\" ordering.\n-                    // 3. We don't concurrently invoke the downstream subscriber. Concurrency control is provided by the\n-                    //    emitting lock.\n-                    if (subscriber.hasSignalsQueued() || (needsDemand(item) && !tryDecrementPendingDemand())) {\n-                        subscriber.markSignalsQueued();\n-                        enqueueItem(item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ff7cbdc1e6d07194e6798d151d7e2358596eed"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzc4MTI4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/test/java/io/servicetalk/concurrent/api/PublisherFlatMapMergeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoxOTozNFrOHb3U3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyMTo0OFrOHb3Yow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MDA2MA==", "bodyText": "debugging leftover? :)", "url": "https://github.com/apple/servicetalk/pull/1161#discussion_r498980060", "createdAt": "2020-10-02T18:19:34Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/test/java/io/servicetalk/concurrent/api/PublisherFlatMapMergeTest.java", "diffHunk": "@@ -69,7 +69,7 @@\n \n public class PublisherFlatMapMergeTest {\n     private static final long TERMINAL_POLL_MS = 10;\n-    @Rule\n+    // @Rule", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "801727b98cf3cecbe3b01f44be13b6acccec7ba4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTAyNw==", "bodyText": "YEES. \ud83d\udd25 \ud83c\udf96\ufe0f", "url": "https://github.com/apple/servicetalk/pull/1161#discussion_r498981027", "createdAt": "2020-10-02T18:21:48Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/test/java/io/servicetalk/concurrent/api/PublisherFlatMapMergeTest.java", "diffHunk": "@@ -69,7 +69,7 @@\n \n public class PublisherFlatMapMergeTest {\n     private static final long TERMINAL_POLL_MS = 10;\n-    @Rule\n+    // @Rule", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MDA2MA=="}, "originalCommit": {"oid": "801727b98cf3cecbe3b01f44be13b6acccec7ba4"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2581, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}