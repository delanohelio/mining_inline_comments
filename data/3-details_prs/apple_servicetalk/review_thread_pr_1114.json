{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNzMxNDg3", "number": 1114, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozNjowM1rOEUu4tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxNzoxMVrOEVF-3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTc1MTU5OnYy", "diffSide": "RIGHT", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozNjowM1rOG7GNwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMToyMDo1MFrOG7NwQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMDk5NA==", "bodyText": "IIUC, expected usage is to add a ConnectionFactory for a client that introduces a TransportObserver for the call.\nWhat is the guidance for such factories if there is already an observer passed to them?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464620994", "createdAt": "2020-08-03T19:36:03Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "diffHunk": "@@ -31,7 +34,9 @@\n      * Creates and asynchronously returns a connection.\n      *\n      * @param address to connect.\n+     * @param observer {@link TransportObserver} that provides visibility into transport events associated with a new\n+     * connection.\n      * @return {@link Single} that emits the created connection.\n      */\n-    Single<C> newConnection(ResolvedAddress address);\n+    Single<C> newConnection(ResolvedAddress address, @Nullable TransportObserver observer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY1MjQ3Ng==", "bodyText": "Good question!\nI plan to add a BiTransportObserver implementation later that will merge two observers into one, when necessary. Something similar to BiDnsQueryLifecycleObserverFactory in netty.\nThat will be useful for the server-side as well, when users need to report metrics data to 2+ systems simultaneously.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464652476", "createdAt": "2020-08-03T20:45:00Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "diffHunk": "@@ -31,7 +34,9 @@\n      * Creates and asynchronously returns a connection.\n      *\n      * @param address to connect.\n+     * @param observer {@link TransportObserver} that provides visibility into transport events associated with a new\n+     * connection.\n      * @return {@link Single} that emits the created connection.\n      */\n-    Single<C> newConnection(ResolvedAddress address);\n+    Single<C> newConnection(ResolvedAddress address, @Nullable TransportObserver observer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMDk5NA=="}, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc0NDUxNA==", "bodyText": "Added TransportObserverConnectionFactoryFilter that uses BiTransportObserver internally, ptal: 0e98ded", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464744514", "createdAt": "2020-08-04T01:20:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "diffHunk": "@@ -31,7 +34,9 @@\n      * Creates and asynchronously returns a connection.\n      *\n      * @param address to connect.\n+     * @param observer {@link TransportObserver} that provides visibility into transport events associated with a new\n+     * connection.\n      * @return {@link Single} that emits the created connection.\n      */\n-    Single<C> newConnection(ResolvedAddress address);\n+    Single<C> newConnection(ResolvedAddress address, @Nullable TransportObserver observer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMDk5NA=="}, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTc1NzIxOnYy", "diffSide": "RIGHT", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozODoyMFrOG7GRew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTozODoyMFrOG7GRew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMTk0Nw==", "bodyText": "Instead of repeating the TransportObserver definition, just say {@link TransportObserver} for the newly created connections?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464621947", "createdAt": "2020-08-03T19:38:20Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/ConnectionFactory.java", "diffHunk": "@@ -31,7 +34,9 @@\n      * Creates and asynchronously returns a connection.\n      *\n      * @param address to connect.\n+     * @param observer {@link TransportObserver} that provides visibility into transport events associated with a new", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTc2NjA4OnYy", "diffSide": "RIGHT", "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTo0MToyMFrOG7GW-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxOTo0MToyMFrOG7GW-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDYyMzM1NA==", "bodyText": "Add a comment why we are passing null here?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r464623354", "createdAt": "2020-08-03T19:41:20Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-loadbalancer/src/main/java/io/servicetalk/loadbalancer/RoundRobinLoadBalancer.java", "diffHunk": "@@ -273,7 +273,7 @@ public void onComplete() {\n         }\n \n         // No connection was selected: create a new one\n-        return connectionFactory.newConnection(host.address)\n+        return connectionFactory.newConnection(host.address, null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c9f13626ed6cb6f747989dcf1f87166a470529c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTUxMjAyOnYy", "diffSide": "RIGHT", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxMDozOFrOG7ptMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjowNjo1OVrOG7zJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMjQ4MQ==", "bodyText": "requireNotNull?", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465202481", "createdAt": "2020-08-04T17:10:38Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1NTU2Mw==", "bodyText": "This is an internal class and we do null-check upfront. At this time caller code does not expect any exception.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465355563", "createdAt": "2020-08-04T22:03:03Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMjQ4MQ=="}, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1NzE1Ng==", "bodyText": "I think you wanted to make it public at some point? It is your call but standalone pig-private classes are good to be coded as if one day they will be public. If they are inner-class then the assumptions are valid.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465357156", "createdAt": "2020-08-04T22:06:59Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMjQ4MQ=="}, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTUxOTAxOnYy", "diffSide": "RIGHT", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxMjo0MVrOG7pxwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjowNzoxOFrOG7zJ3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMzY1MA==", "bodyText": "If first and second both throw then because second is called from a finally block, the first exception is lost. An alternative is to add separate try-catch blocks for each observer which also extends generically to n observers.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465203650", "createdAt": "2020-08-04T17:12:41Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+    @Override\n+    public ConnectionObserver onNewConnection() {\n+        return new BiConnectionObserver(first.onNewConnection(), second.onNewConnection());\n+    }\n+\n+    private static final class BiConnectionObserver implements ConnectionObserver {\n+\n+        private final ConnectionObserver first;\n+        private final ConnectionObserver second;\n+\n+        private BiConnectionObserver(final ConnectionObserver first, final ConnectionObserver second) {\n+            this.first = first;\n+            this.second = second;\n+        }\n+\n+        @Override\n+        public void onDataRead(final int size) {\n+            try {\n+                first.onDataRead(size);\n+            } finally {\n+                second.onDataRead(size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTY0OQ==", "bodyText": "I wanted to avoid safety guarantees for this implementation. Do you mind if I remove all try-catch blocks and will assume that first/second observers are never throw?\nThey can be wrapped by CatchAllTransportObserver impl as we discussed before.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465345649", "createdAt": "2020-08-04T21:39:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+    @Override\n+    public ConnectionObserver onNewConnection() {\n+        return new BiConnectionObserver(first.onNewConnection(), second.onNewConnection());\n+    }\n+\n+    private static final class BiConnectionObserver implements ConnectionObserver {\n+\n+        private final ConnectionObserver first;\n+        private final ConnectionObserver second;\n+\n+        private BiConnectionObserver(final ConnectionObserver first, final ConnectionObserver second) {\n+            this.first = first;\n+            this.second = second;\n+        }\n+\n+        @Override\n+        public void onDataRead(final int size) {\n+            try {\n+                first.onDataRead(size);\n+            } finally {\n+                second.onDataRead(size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMzY1MA=="}, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1NzI3OQ==", "bodyText": "ok that sounds fair", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465357279", "createdAt": "2020-08-04T22:07:18Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/BiTransportObserver.java", "diffHunk": "@@ -0,0 +1,351 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.transport.api.ConnectionInfo;\n+import io.servicetalk.transport.api.ConnectionObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.DataObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.MultiplexedObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.ReadObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.SecurityHandshakeObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.StreamObserver;\n+import io.servicetalk.transport.api.ConnectionObserver.WriteObserver;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import javax.net.ssl.SSLSession;\n+\n+/**\n+ * Combines two {@link TransportObserver}s into a single {@link TransportObserver}.\n+ */\n+final class BiTransportObserver implements TransportObserver {\n+\n+    private final TransportObserver first;\n+    private final TransportObserver second;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param first the {@link TransportObserver} that will receive events first\n+     * @param second the {@link TransportObserver} that will receive events second\n+     */\n+    BiTransportObserver(final TransportObserver first, final TransportObserver second) {\n+        this.first = first;\n+        this.second = second;\n+    }\n+\n+    @Override\n+    public ConnectionObserver onNewConnection() {\n+        return new BiConnectionObserver(first.onNewConnection(), second.onNewConnection());\n+    }\n+\n+    private static final class BiConnectionObserver implements ConnectionObserver {\n+\n+        private final ConnectionObserver first;\n+        private final ConnectionObserver second;\n+\n+        private BiConnectionObserver(final ConnectionObserver first, final ConnectionObserver second) {\n+            this.first = first;\n+            this.second = second;\n+        }\n+\n+        @Override\n+        public void onDataRead(final int size) {\n+            try {\n+                first.onDataRead(size);\n+            } finally {\n+                second.onDataRead(size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwMzY1MA=="}, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTUzNTY0OnYy", "diffSide": "RIGHT", "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/TransportObserverConnectionFactoryFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxNzoxMVrOG7p8Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMTo0Njo1MlrOG7yovQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNjI3NA==", "bodyText": "Is creating a TransportObserver per subscribe what we want semantically? It seems to be conflicting with the fact that the argument to newConnection() is a TransportObserver and not a factory.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465206274", "createdAt": "2020-08-04T17:17:11Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/TransportObserverConnectionFactoryFilter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.concurrent.api.ListenableAsyncCloseable;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import java.util.function.Function;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.api.Single.defer;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link ConnectionFactoryFilter} that configures a {@link TransportObserver} for new connections.\n+ *\n+ * @param <ResolvedAddress> The type of a resolved address that can be used for connecting.\n+ * @param <C> The type of connections created by the {@link ConnectionFactory} decorated by this filter.\n+ */\n+public final class TransportObserverConnectionFactoryFilter<ResolvedAddress, C extends ListenableAsyncCloseable>\n+        implements ConnectionFactoryFilter<ResolvedAddress, C> {\n+\n+    private final Function<ResolvedAddress, TransportObserver> observerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observer {@link TransportObserver} to use for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(final TransportObserver observer) {\n+        requireNonNull(observer);\n+        observerFactory = __ -> observer;\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observerFactory a factory to create a {@link TransportObserver} for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(\n+            final Function<ResolvedAddress, TransportObserver> observerFactory) {\n+        this.observerFactory = requireNonNull(observerFactory);\n+    }\n+\n+    @Override\n+    public ConnectionFactory<ResolvedAddress, C> create(final ConnectionFactory<ResolvedAddress, C> original) {\n+        return new DelegatingConnectionFactory<ResolvedAddress, C>(original) {\n+            @Override\n+            public Single<C> newConnection(final ResolvedAddress resolvedAddress,\n+                                           @Nullable final TransportObserver originalObserver) {\n+                return defer(() -> {\n+                    final TransportObserver newObserver = requireNonNull(observerFactory.apply(resolvedAddress));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0NTY3Ng==", "bodyText": "TransportObserver technically is a factory for ConnectionObservers. Therefore, I don't see a strong need to provide another level of abstraction for that internally in the transport.\nHere we also have access to ResolvedAddress and it's an opportunity for us to let users decide if they need a TransportObserver for this address or not and what instance of TransportObserver they need.\nBtw, let me remote the requireNonNull from here and allow null values.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465345676", "createdAt": "2020-08-04T21:39:50Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/TransportObserverConnectionFactoryFilter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.concurrent.api.ListenableAsyncCloseable;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import java.util.function.Function;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.api.Single.defer;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link ConnectionFactoryFilter} that configures a {@link TransportObserver} for new connections.\n+ *\n+ * @param <ResolvedAddress> The type of a resolved address that can be used for connecting.\n+ * @param <C> The type of connections created by the {@link ConnectionFactory} decorated by this filter.\n+ */\n+public final class TransportObserverConnectionFactoryFilter<ResolvedAddress, C extends ListenableAsyncCloseable>\n+        implements ConnectionFactoryFilter<ResolvedAddress, C> {\n+\n+    private final Function<ResolvedAddress, TransportObserver> observerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observer {@link TransportObserver} to use for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(final TransportObserver observer) {\n+        requireNonNull(observer);\n+        observerFactory = __ -> observer;\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observerFactory a factory to create a {@link TransportObserver} for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(\n+            final Function<ResolvedAddress, TransportObserver> observerFactory) {\n+        this.observerFactory = requireNonNull(observerFactory);\n+    }\n+\n+    @Override\n+    public ConnectionFactory<ResolvedAddress, C> create(final ConnectionFactory<ResolvedAddress, C> original) {\n+        return new DelegatingConnectionFactory<ResolvedAddress, C>(original) {\n+            @Override\n+            public Single<C> newConnection(final ResolvedAddress resolvedAddress,\n+                                           @Nullable final TransportObserver originalObserver) {\n+                return defer(() -> {\n+                    final TransportObserver newObserver = requireNonNull(observerFactory.apply(resolvedAddress));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNjI3NA=="}, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0ODc5Nw==", "bodyText": "Actually, we don't need to create a new TransportObserver per subscribe. We can remove defer operator.", "url": "https://github.com/apple/servicetalk/pull/1114#discussion_r465348797", "createdAt": "2020-08-04T21:46:52Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-client-api/src/main/java/io/servicetalk/client/api/TransportObserverConnectionFactoryFilter.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.client.api;\n+\n+import io.servicetalk.concurrent.api.ListenableAsyncCloseable;\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.transport.api.TransportObserver;\n+\n+import java.util.function.Function;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.api.Single.defer;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link ConnectionFactoryFilter} that configures a {@link TransportObserver} for new connections.\n+ *\n+ * @param <ResolvedAddress> The type of a resolved address that can be used for connecting.\n+ * @param <C> The type of connections created by the {@link ConnectionFactory} decorated by this filter.\n+ */\n+public final class TransportObserverConnectionFactoryFilter<ResolvedAddress, C extends ListenableAsyncCloseable>\n+        implements ConnectionFactoryFilter<ResolvedAddress, C> {\n+\n+    private final Function<ResolvedAddress, TransportObserver> observerFactory;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observer {@link TransportObserver} to use for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(final TransportObserver observer) {\n+        requireNonNull(observer);\n+        observerFactory = __ -> observer;\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param observerFactory a factory to create a {@link TransportObserver} for new connections\n+     */\n+    public TransportObserverConnectionFactoryFilter(\n+            final Function<ResolvedAddress, TransportObserver> observerFactory) {\n+        this.observerFactory = requireNonNull(observerFactory);\n+    }\n+\n+    @Override\n+    public ConnectionFactory<ResolvedAddress, C> create(final ConnectionFactory<ResolvedAddress, C> original) {\n+        return new DelegatingConnectionFactory<ResolvedAddress, C>(original) {\n+            @Override\n+            public Single<C> newConnection(final ResolvedAddress resolvedAddress,\n+                                           @Nullable final TransportObserver originalObserver) {\n+                return defer(() -> {\n+                    final TransportObserver newObserver = requireNonNull(observerFactory.apply(resolvedAddress));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNjI3NA=="}, "originalCommit": {"oid": "0e98ded1b654c0db6ea471ff72f3dd042f87701f"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2523, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}