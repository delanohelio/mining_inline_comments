{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjk1MjIy", "number": 1239, "title": "Http compression integration tests; combatibility with Netty", "bodyText": "Motivation:\nAdd integration tests between Netty & ServiceTalk with compression\nModifications:\nModified current compression tests to allow extending them for other server/client flavors.\nResult:\nHappy path scenarios with enabled compression is now tested both for ST/ST & ST/Netty", "createdAt": "2020-12-04T18:02:01Z", "url": "https://github.com/apple/servicetalk/pull/1239", "merged": true, "mergeCommit": {"oid": "b98aa8d33195ad1d0b149c7f76495256331064ae"}, "closed": true, "closedAt": "2020-12-10T10:13:53Z", "author": {"login": "tkountis"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi4MmBAH2gAyNTMyNjk1MjIyOjg4ZTdjNzRiMmZjN2IwODk0MTlmMjc3ZDkwZTIxYThlZmY2Y2FhYmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdklmrzgBqjQwOTIwNTYwMDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe", "author": {"user": {"login": "tkountis", "name": "Thomas Kountis"}}, "url": "https://github.com/apple/servicetalk/commit/88e7c74b2fc7b089419f277d90e21a8eff6caabe", "committedDate": "2020-12-04T13:59:06Z", "message": "Http compression integration tests; combatibility with Netty"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MjMwMjk4", "url": "https://github.com/apple/servicetalk/pull/1239#pullrequestreview-545230298", "createdAt": "2020-12-04T19:14:38Z", "commit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOToxNDozOFrOH_efmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo0Nzo1OFrOH_fo3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyMTk0NQ==", "bodyText": "Client and Server enums are identical. Can we rename it to the generic name and reuse?", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536321945", "createdAt": "2020-12-04T19:14:38Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/BaseContentCodingTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.encoding.api.ContentCodec;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runners.Parameterized;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static io.servicetalk.encoding.api.ContentCodings.deflateDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.gzipDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_FAIL;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_PASS;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H1;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H2;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Scenario.when;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+public abstract class BaseContentCodingTest {\n+\n+    private static final int PAYLOAD_SIZE = 1024;\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    protected final Scenario scenario;\n+    private final boolean expectedSuccess;\n+\n+    public BaseContentCodingTest(final Scenario scenario) {\n+        this.scenario = scenario;\n+        this.expectedSuccess = scenario.valid;\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return new Object[] {\n+                when(H1, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+        };\n+    }\n+\n+    @Test\n+    public void testCompatibility() throws Exception {\n+        if (expectedSuccess) {\n+            assertSuccessful(scenario.requestEncoding);\n+        } else {\n+            assertNotSupported(scenario.requestEncoding);\n+        }\n+    }\n+\n+    protected abstract void assertSuccessful(ContentCodec requestEncoding) throws Exception;\n+\n+    protected abstract void assertNotSupported(ContentCodec requestEncoding) throws Exception;\n+\n+    protected static byte[] payload(byte b) {\n+        byte[] payload = new byte[PAYLOAD_SIZE];\n+        Arrays.fill(payload, b);\n+        return payload;\n+    }\n+\n+    protected static String payloadAsString(byte b) {\n+        return new String(payload(b), StandardCharsets.US_ASCII);\n+    }\n+\n+    protected enum Server {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Server(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Client {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNDEwNg==", "bodyText": "Consider reusing HttpProtocol enum we have for tests", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536324106", "createdAt": "2020-12-04T19:17:10Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/BaseContentCodingTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.encoding.api.ContentCodec;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runners.Parameterized;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static io.servicetalk.encoding.api.ContentCodings.deflateDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.gzipDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_FAIL;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_PASS;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H1;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H2;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Scenario.when;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+public abstract class BaseContentCodingTest {\n+\n+    private static final int PAYLOAD_SIZE = 1024;\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    protected final Scenario scenario;\n+    private final boolean expectedSuccess;\n+\n+    public BaseContentCodingTest(final Scenario scenario) {\n+        this.scenario = scenario;\n+        this.expectedSuccess = scenario.valid;\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return new Object[] {\n+                when(H1, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+        };\n+    }\n+\n+    @Test\n+    public void testCompatibility() throws Exception {\n+        if (expectedSuccess) {\n+            assertSuccessful(scenario.requestEncoding);\n+        } else {\n+            assertNotSupported(scenario.requestEncoding);\n+        }\n+    }\n+\n+    protected abstract void assertSuccessful(ContentCodec requestEncoding) throws Exception;\n+\n+    protected abstract void assertNotSupported(ContentCodec requestEncoding) throws Exception;\n+\n+    protected static byte[] payload(byte b) {\n+        byte[] payload = new byte[PAYLOAD_SIZE];\n+        Arrays.fill(payload, b);\n+        return payload;\n+    }\n+\n+    protected static String payloadAsString(byte b) {\n+        return new String(payload(b), StandardCharsets.US_ASCII);\n+    }\n+\n+    protected enum Server {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Server(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Client {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_ONLY(singletonList(identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Client(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Request {\n+        ID(identity()),\n+        GZIP(gzipDefault()),\n+        DEFLATE(deflateDefault());\n+\n+        ContentCodec codec;\n+\n+        Request(ContentCodec codec) {\n+            this.codec = codec;\n+        }\n+    }\n+\n+    protected enum Expectation {\n+        SHOULD_PASS(true),\n+        SHOULD_FAIL(false);\n+\n+        boolean valid;\n+        Expectation(boolean valid) {\n+            this.valid = valid;\n+        }\n+    }\n+\n+    protected enum Protocol {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNDg1MA==", "bodyText": "If we do not expect more cases consider using boolean. Otherwise, let's kill the SHOULD_ prefix.", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536324850", "createdAt": "2020-12-04T19:18:34Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/BaseContentCodingTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.encoding.api.ContentCodec;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runners.Parameterized;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static io.servicetalk.encoding.api.ContentCodings.deflateDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.gzipDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_FAIL;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_PASS;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H1;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H2;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Scenario.when;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+public abstract class BaseContentCodingTest {\n+\n+    private static final int PAYLOAD_SIZE = 1024;\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    protected final Scenario scenario;\n+    private final boolean expectedSuccess;\n+\n+    public BaseContentCodingTest(final Scenario scenario) {\n+        this.scenario = scenario;\n+        this.expectedSuccess = scenario.valid;\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return new Object[] {\n+                when(H1, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+        };\n+    }\n+\n+    @Test\n+    public void testCompatibility() throws Exception {\n+        if (expectedSuccess) {\n+            assertSuccessful(scenario.requestEncoding);\n+        } else {\n+            assertNotSupported(scenario.requestEncoding);\n+        }\n+    }\n+\n+    protected abstract void assertSuccessful(ContentCodec requestEncoding) throws Exception;\n+\n+    protected abstract void assertNotSupported(ContentCodec requestEncoding) throws Exception;\n+\n+    protected static byte[] payload(byte b) {\n+        byte[] payload = new byte[PAYLOAD_SIZE];\n+        Arrays.fill(payload, b);\n+        return payload;\n+    }\n+\n+    protected static String payloadAsString(byte b) {\n+        return new String(payload(b), StandardCharsets.US_ASCII);\n+    }\n+\n+    protected enum Server {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Server(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Client {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_ONLY(singletonList(identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Client(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Request {\n+        ID(identity()),\n+        GZIP(gzipDefault()),\n+        DEFLATE(deflateDefault());\n+\n+        ContentCodec codec;\n+\n+        Request(ContentCodec codec) {\n+            this.codec = codec;\n+        }\n+    }\n+\n+    protected enum Expectation {\n+        SHOULD_PASS(true),\n+        SHOULD_FAIL(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNTEzNg==", "bodyText": "Consider naming it Compression or Coding", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536325136", "createdAt": "2020-12-04T19:19:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/BaseContentCodingTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.encoding.api.ContentCodec;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runners.Parameterized;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static io.servicetalk.encoding.api.ContentCodings.deflateDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.gzipDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_FAIL;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_PASS;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H1;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H2;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Scenario.when;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+public abstract class BaseContentCodingTest {\n+\n+    private static final int PAYLOAD_SIZE = 1024;\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    protected final Scenario scenario;\n+    private final boolean expectedSuccess;\n+\n+    public BaseContentCodingTest(final Scenario scenario) {\n+        this.scenario = scenario;\n+        this.expectedSuccess = scenario.valid;\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return new Object[] {\n+                when(H1, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+        };\n+    }\n+\n+    @Test\n+    public void testCompatibility() throws Exception {\n+        if (expectedSuccess) {\n+            assertSuccessful(scenario.requestEncoding);\n+        } else {\n+            assertNotSupported(scenario.requestEncoding);\n+        }\n+    }\n+\n+    protected abstract void assertSuccessful(ContentCodec requestEncoding) throws Exception;\n+\n+    protected abstract void assertNotSupported(ContentCodec requestEncoding) throws Exception;\n+\n+    protected static byte[] payload(byte b) {\n+        byte[] payload = new byte[PAYLOAD_SIZE];\n+        Arrays.fill(payload, b);\n+        return payload;\n+    }\n+\n+    protected static String payloadAsString(byte b) {\n+        return new String(payload(b), StandardCharsets.US_ASCII);\n+    }\n+\n+    protected enum Server {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Server(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Client {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_ONLY(singletonList(identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Client(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Request {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyNTgyNw==", "bodyText": "Consider using scenario.valid instead of duplicating in a new variable", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536325827", "createdAt": "2020-12-04T19:20:27Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/BaseContentCodingTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.encoding.api.ContentCodec;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runners.Parameterized;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static io.servicetalk.encoding.api.ContentCodings.deflateDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.gzipDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_FAIL;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_PASS;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H1;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H2;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Scenario.when;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+public abstract class BaseContentCodingTest {\n+\n+    private static final int PAYLOAD_SIZE = 1024;\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    protected final Scenario scenario;\n+    private final boolean expectedSuccess;\n+\n+    public BaseContentCodingTest(final Scenario scenario) {\n+        this.scenario = scenario;\n+        this.expectedSuccess = scenario.valid;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODUxNQ==", "bodyText": "Consider just storing a enum, it has all the info for isH2, the protocol, and its name for logging", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536328515", "createdAt": "2020-12-04T19:25:29Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/BaseContentCodingTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.encoding.api.ContentCodec;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runners.Parameterized;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static io.servicetalk.encoding.api.ContentCodings.deflateDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.gzipDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_FAIL;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_PASS;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H1;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H2;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Scenario.when;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+public abstract class BaseContentCodingTest {\n+\n+    private static final int PAYLOAD_SIZE = 1024;\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    protected final Scenario scenario;\n+    private final boolean expectedSuccess;\n+\n+    public BaseContentCodingTest(final Scenario scenario) {\n+        this.scenario = scenario;\n+        this.expectedSuccess = scenario.valid;\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return new Object[] {\n+                when(H1, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+        };\n+    }\n+\n+    @Test\n+    public void testCompatibility() throws Exception {\n+        if (expectedSuccess) {\n+            assertSuccessful(scenario.requestEncoding);\n+        } else {\n+            assertNotSupported(scenario.requestEncoding);\n+        }\n+    }\n+\n+    protected abstract void assertSuccessful(ContentCodec requestEncoding) throws Exception;\n+\n+    protected abstract void assertNotSupported(ContentCodec requestEncoding) throws Exception;\n+\n+    protected static byte[] payload(byte b) {\n+        byte[] payload = new byte[PAYLOAD_SIZE];\n+        Arrays.fill(payload, b);\n+        return payload;\n+    }\n+\n+    protected static String payloadAsString(byte b) {\n+        return new String(payload(b), StandardCharsets.US_ASCII);\n+    }\n+\n+    protected enum Server {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Server(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Client {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_ONLY(singletonList(identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Client(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Request {\n+        ID(identity()),\n+        GZIP(gzipDefault()),\n+        DEFLATE(deflateDefault());\n+\n+        ContentCodec codec;\n+\n+        Request(ContentCodec codec) {\n+            this.codec = codec;\n+        }\n+    }\n+\n+    protected enum Expectation {\n+        SHOULD_PASS(true),\n+        SHOULD_FAIL(false);\n+\n+        boolean valid;\n+        Expectation(boolean valid) {\n+            this.valid = valid;\n+        }\n+    }\n+\n+    protected enum Protocol {\n+        H1(h1Default()),\n+        H2(h2Default());\n+\n+        HttpProtocolConfig config;\n+\n+        Protocol(HttpProtocolConfig config) {\n+            this.config = config;\n+        }\n+    }\n+\n+    protected static class Scenario {\n+        final ContentCodec requestEncoding;\n+        final List<ContentCodec> clientSupported;\n+        final List<ContentCodec> serverSupported;\n+        final HttpProtocolConfig protocol;\n+        final boolean valid;\n+        final boolean isH2;\n+\n+        Scenario(final ContentCodec requestEncoding,\n+                 final List<ContentCodec> clientSupported, final List<ContentCodec> serverSupported,\n+                 final Protocol protocol, final boolean valid) {\n+            this.requestEncoding = requestEncoding;\n+            this.clientSupported = clientSupported;\n+            this.serverSupported = serverSupported;\n+            this.valid = valid;\n+            this.isH2 = protocol == H2;\n+            this.protocol = isH2 ? h2Default() : h1Default();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMDIxMg==", "bodyText": "Consider using identity().name()", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536330212", "createdAt": "2020-12-04T19:28:40Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/ServiceTalkContentCodingTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.encoding.api.ContentCodec;\n+import io.servicetalk.http.netty.HttpClients;\n+import io.servicetalk.http.netty.HttpServers;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.CharSequences.contentEquals;\n+import static io.servicetalk.http.api.HeaderUtils.encodingFor;\n+import static io.servicetalk.http.api.HttpHeaderNames.ACCEPT_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_ENCODING;\n+import static io.servicetalk.http.api.HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.stream;\n+import static java.util.Collections.disjoint;\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+public class ServiceTalkContentCodingTest extends BaseContentCodingTest {\n+\n+    private static final Function<Scenario, StreamingHttpServiceFilterFactory> REQ_VERIFIER = (scenario)\n+            -> new StreamingHttpServiceFilterFactory() {\n+        @Override\n+        public StreamingHttpServiceFilter create(final StreamingHttpService service) {\n+            return new StreamingHttpServiceFilter(service) {\n+                @Override\n+\n+                public Single<StreamingHttpResponse> handle(final HttpServiceContext ctx,\n+                                                            final StreamingHttpRequest request,\n+                                                            final StreamingHttpResponseFactory responseFactory) {\n+                    final ContentCodec reqEncoding = scenario.requestEncoding;\n+                    final List<ContentCodec> clientSupportedEncodings = scenario.clientSupported;\n+\n+                    try {\n+\n+                        String requestPayload = request.payloadBody(textDeserializer())\n+                                .collect(StringBuilder::new, StringBuilder::append)\n+                                .toFuture().get().toString();\n+\n+                        assertEquals(payloadAsString((byte) 'a'), requestPayload);\n+\n+                        final List<String> actualReqAcceptedEncodings = stream(request.headers()\n+                                .get(ACCEPT_ENCODING, \"NOT_PRESENT\").toString().split(\",\"))\n+                                .map((String::trim)).collect(toList());\n+\n+                        final List<String> expectedReqAcceptedEncodings = clientSupportedEncodings.stream()\n+                                .filter((enc) -> enc != identity())\n+                                .map((ContentCodec::name))\n+                                .map(CharSequence::toString)\n+                                .collect(toList());\n+\n+                        if (reqEncoding != identity()) {\n+                            assertTrue(\"Request encoding should be present in the request headers\",\n+                                    contentEquals(reqEncoding.name(),\n+                                            request.headers().get(ACCEPT_ENCODING, \"NOT_PRESENT\")));\n+                        }\n+\n+                        if (!expectedReqAcceptedEncodings.isEmpty() && !actualReqAcceptedEncodings.isEmpty()) {\n+                            assertThat(actualReqAcceptedEncodings, equalTo(expectedReqAcceptedEncodings));\n+                        }\n+\n+                        return super.handle(ctx, request, responseFactory);\n+                    } catch (Throwable t) {\n+                        t.printStackTrace();\n+                        return succeeded(responseFactory.badRequest());\n+                    }\n+                }\n+            };\n+        }\n+    };\n+\n+    static final Function<Scenario, StreamingHttpClientFilterFactory> RESP_VERIFIER = (scenario)\n+            -> new StreamingHttpClientFilterFactory() {\n+        @Override\n+        public StreamingHttpClientFilter create(final FilterableStreamingHttpClient client) {\n+            return new StreamingHttpClientFilter(client) {\n+                @Override\n+                protected Single<StreamingHttpResponse> request(final StreamingHttpRequester delegate,\n+                                                                final HttpExecutionStrategy strategy,\n+                                                                final StreamingHttpRequest request) {\n+                    return super.request(delegate, strategy, request).map(response -> {\n+                        List<ContentCodec> server = scenario.serverSupported;\n+                        List<ContentCodec> client = scenario.clientSupported;\n+\n+                        ContentCodec expected = identity();\n+                        for (ContentCodec codec : client) {\n+                            if (server.contains(codec)) {\n+                                expected = codec;\n+                                break;\n+                            }\n+                        }\n+\n+                        assertEquals(expected, encodingFor(client, response.headers()\n+                                .get(CONTENT_ENCODING, \"identity\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMDI4MA==", "bodyText": "Consider using identity().name()", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536330280", "createdAt": "2020-12-04T19:28:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/ServiceTalkContentCodingTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.encoding.api.ContentCodec;\n+import io.servicetalk.http.netty.HttpClients;\n+import io.servicetalk.http.netty.HttpServers;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.CharSequences.contentEquals;\n+import static io.servicetalk.http.api.HeaderUtils.encodingFor;\n+import static io.servicetalk.http.api.HttpHeaderNames.ACCEPT_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_ENCODING;\n+import static io.servicetalk.http.api.HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.stream;\n+import static java.util.Collections.disjoint;\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+public class ServiceTalkContentCodingTest extends BaseContentCodingTest {\n+\n+    private static final Function<Scenario, StreamingHttpServiceFilterFactory> REQ_VERIFIER = (scenario)\n+            -> new StreamingHttpServiceFilterFactory() {\n+        @Override\n+        public StreamingHttpServiceFilter create(final StreamingHttpService service) {\n+            return new StreamingHttpServiceFilter(service) {\n+                @Override\n+\n+                public Single<StreamingHttpResponse> handle(final HttpServiceContext ctx,\n+                                                            final StreamingHttpRequest request,\n+                                                            final StreamingHttpResponseFactory responseFactory) {\n+                    final ContentCodec reqEncoding = scenario.requestEncoding;\n+                    final List<ContentCodec> clientSupportedEncodings = scenario.clientSupported;\n+\n+                    try {\n+\n+                        String requestPayload = request.payloadBody(textDeserializer())\n+                                .collect(StringBuilder::new, StringBuilder::append)\n+                                .toFuture().get().toString();\n+\n+                        assertEquals(payloadAsString((byte) 'a'), requestPayload);\n+\n+                        final List<String> actualReqAcceptedEncodings = stream(request.headers()\n+                                .get(ACCEPT_ENCODING, \"NOT_PRESENT\").toString().split(\",\"))\n+                                .map((String::trim)).collect(toList());\n+\n+                        final List<String> expectedReqAcceptedEncodings = clientSupportedEncodings.stream()\n+                                .filter((enc) -> enc != identity())\n+                                .map((ContentCodec::name))\n+                                .map(CharSequence::toString)\n+                                .collect(toList());\n+\n+                        if (reqEncoding != identity()) {\n+                            assertTrue(\"Request encoding should be present in the request headers\",\n+                                    contentEquals(reqEncoding.name(),\n+                                            request.headers().get(ACCEPT_ENCODING, \"NOT_PRESENT\")));\n+                        }\n+\n+                        if (!expectedReqAcceptedEncodings.isEmpty() && !actualReqAcceptedEncodings.isEmpty()) {\n+                            assertThat(actualReqAcceptedEncodings, equalTo(expectedReqAcceptedEncodings));\n+                        }\n+\n+                        return super.handle(ctx, request, responseFactory);\n+                    } catch (Throwable t) {\n+                        t.printStackTrace();\n+                        return succeeded(responseFactory.badRequest());\n+                    }\n+                }\n+            };\n+        }\n+    };\n+\n+    static final Function<Scenario, StreamingHttpClientFilterFactory> RESP_VERIFIER = (scenario)\n+            -> new StreamingHttpClientFilterFactory() {\n+        @Override\n+        public StreamingHttpClientFilter create(final FilterableStreamingHttpClient client) {\n+            return new StreamingHttpClientFilter(client) {\n+                @Override\n+                protected Single<StreamingHttpResponse> request(final StreamingHttpRequester delegate,\n+                                                                final HttpExecutionStrategy strategy,\n+                                                                final StreamingHttpRequest request) {\n+                    return super.request(delegate, strategy, request).map(response -> {\n+                        List<ContentCodec> server = scenario.serverSupported;\n+                        List<ContentCodec> client = scenario.clientSupported;\n+\n+                        ContentCodec expected = identity();\n+                        for (ContentCodec codec : client) {\n+                            if (server.contains(codec)) {\n+                                expected = codec;\n+                                break;\n+                            }\n+                        }\n+\n+                        assertEquals(expected, encodingFor(client, response.headers()\n+                                .get(CONTENT_ENCODING, \"identity\")));\n+                        return response;\n+                    });\n+                }\n+            };\n+        }\n+    };\n+\n+    private ServerContext serverContext;\n+    private HttpClient client;\n+\n+    public ServiceTalkContentCodingTest(Scenario scenario) {\n+        super(scenario);\n+    }\n+\n+    @Before\n+    public void start() throws Exception {\n+        serverContext = newServiceTalkServer(scenario);\n+        client = newServiceTalkClient(serverHostAndPort(serverContext), scenario);\n+    }\n+\n+    @After\n+    public void finish() throws Exception {\n+        client.close();\n+        serverContext.close();\n+    }\n+\n+    protected HttpClient client() {\n+        return client;\n+    }\n+\n+    protected void assertSuccessful(final ContentCodec encoding) throws Exception {\n+        assertResponse(client().request(client()\n+                .get(\"/\")\n+                .encoding(encoding)\n+                .payloadBody(payloadAsString((byte) 'a'), textSerializer())).toFuture().get().toStreamingResponse());\n+\n+        final BlockingStreamingHttpClient blockingStreamingHttpClient = client().asBlockingStreamingClient();\n+        assertResponse(blockingStreamingHttpClient.request(blockingStreamingHttpClient\n+                .get(\"/\")\n+                .encoding(encoding)\n+                .payloadBody(singletonList(payloadAsString((byte) 'a')), textSerializer())).toStreamingResponse());\n+\n+        final StreamingHttpClient streamingHttpClient = client().asStreamingClient();\n+        assertResponse(streamingHttpClient.request(streamingHttpClient\n+                .get(\"/\")\n+                .encoding(encoding)\n+                .payloadBody(from(payloadAsString((byte) 'a')), textSerializer())).toFuture().get());\n+    }\n+\n+    private void assertResponse(final StreamingHttpResponse response) throws Exception {\n+        assertResponseHeaders(response.headers().get(CONTENT_ENCODING, \"identity\").toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzMjY5NA==", "bodyText": "Consider simplified parametrized format:\nclient=[...], server=[...], request={}, protocol={}, shouldPass={}\n\nCurrent format is hard to read in intellij idea and hard to run via command line a specific gradle test.", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536332694", "createdAt": "2020-12-04T19:33:16Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/BaseContentCodingTest.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.encoding.api.ContentCodec;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+import org.junit.runners.Parameterized;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static io.servicetalk.encoding.api.ContentCodings.deflateDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.gzipDefault;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_FAIL;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Expectation.SHOULD_PASS;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H1;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Protocol.H2;\n+import static io.servicetalk.http.api.BaseContentCodingTest.Scenario.when;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1Default;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h2Default;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+public abstract class BaseContentCodingTest {\n+\n+    private static final int PAYLOAD_SIZE = 1024;\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    protected final Scenario scenario;\n+    private final boolean expectedSuccess;\n+\n+    public BaseContentCodingTest(final Scenario scenario) {\n+        this.scenario = scenario;\n+        this.expectedSuccess = scenario.valid;\n+    }\n+\n+    @Parameterized.Parameters(name = \"{0}\")\n+    public static Object[] params() {\n+        return new Object[] {\n+                when(H1, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_DEFLATE_ID, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_GZIP_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.ID_GZIP, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.ID_DEFLATE, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFLATE_ID, Request.DEFLATE, SHOULD_PASS),\n+                when(H1, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H2, Server.ID_DEFLATE, Client.DEFAULT, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.ID_ONLY, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H1, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H2, Server.GZIP_ONLY, Client.GZIP_ID, Request.GZIP, SHOULD_PASS),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.GZIP, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H2, Server.DEFAULT, Client.GZIP_DEFLATE_ID, Request.DEFLATE, SHOULD_FAIL),\n+                when(H1, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+                when(H2, Server.DEFAULT, Client.GZIP_ID, Request.ID, SHOULD_PASS),\n+        };\n+    }\n+\n+    @Test\n+    public void testCompatibility() throws Exception {\n+        if (expectedSuccess) {\n+            assertSuccessful(scenario.requestEncoding);\n+        } else {\n+            assertNotSupported(scenario.requestEncoding);\n+        }\n+    }\n+\n+    protected abstract void assertSuccessful(ContentCodec requestEncoding) throws Exception;\n+\n+    protected abstract void assertNotSupported(ContentCodec requestEncoding) throws Exception;\n+\n+    protected static byte[] payload(byte b) {\n+        byte[] payload = new byte[PAYLOAD_SIZE];\n+        Arrays.fill(payload, b);\n+        return payload;\n+    }\n+\n+    protected static String payloadAsString(byte b) {\n+        return new String(payload(b), StandardCharsets.US_ASCII);\n+    }\n+\n+    protected enum Server {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Server(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Client {\n+        DEFAULT(emptyList()),\n+        GZIP_ONLY(singletonList(gzipDefault())),\n+        GZIP_ID(asList(gzipDefault(), identity())),\n+        GZIP_DEFLATE_ID(asList(gzipDefault(), deflateDefault(), identity())),\n+        ID_ONLY(singletonList(identity())),\n+        ID_GZIP(asList(identity(), gzipDefault())),\n+        ID_DEFLATE(asList(identity(), deflateDefault())),\n+        ID_GZIP_DEFLATE(asList(identity(), gzipDefault(), deflateDefault())),\n+        DEFLATE_ONLY(singletonList(deflateDefault())),\n+        DEFLATE_ID(asList(deflateDefault(), identity()));\n+\n+        List<ContentCodec> list;\n+\n+        Client(List<ContentCodec> list) {\n+            this.list = list;\n+        }\n+    }\n+\n+    protected enum Request {\n+        ID(identity()),\n+        GZIP(gzipDefault()),\n+        DEFLATE(deflateDefault());\n+\n+        ContentCodec codec;\n+\n+        Request(ContentCodec codec) {\n+            this.codec = codec;\n+        }\n+    }\n+\n+    protected enum Expectation {\n+        SHOULD_PASS(true),\n+        SHOULD_FAIL(false);\n+\n+        boolean valid;\n+        Expectation(boolean valid) {\n+            this.valid = valid;\n+        }\n+    }\n+\n+    protected enum Protocol {\n+        H1(h1Default()),\n+        H2(h2Default());\n+\n+        HttpProtocolConfig config;\n+\n+        Protocol(HttpProtocolConfig config) {\n+            this.config = config;\n+        }\n+    }\n+\n+    protected static class Scenario {\n+        final ContentCodec requestEncoding;\n+        final List<ContentCodec> clientSupported;\n+        final List<ContentCodec> serverSupported;\n+        final HttpProtocolConfig protocol;\n+        final boolean valid;\n+        final boolean isH2;\n+\n+        Scenario(final ContentCodec requestEncoding,\n+                 final List<ContentCodec> clientSupported, final List<ContentCodec> serverSupported,\n+                 final Protocol protocol, final boolean valid) {\n+            this.requestEncoding = requestEncoding;\n+            this.clientSupported = clientSupported;\n+            this.serverSupported = serverSupported;\n+            this.valid = valid;\n+            this.isH2 = protocol == H2;\n+            this.protocol = isH2 ? h2Default() : h1Default();\n+        }\n+\n+        static Scenario when(final Protocol protocol, final Server server,\n+                             final Client client, final Request request, final Expectation expectation) {\n+            return new Scenario(request.codec, client.list, server.list, protocol, expectation.valid);\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return \"When a client that supports \" + encString(clientSupported) + \", sends a request encoded with \"\n+                    + requestEncoding.name() + \", to an \" + (isH2 ? \"H2\" : \"H1\") + \" server that supports \"\n+                    + encString(serverSupported) + \", the request should be \" + (valid ? \"ACCEPTED\" : \"REJECTED\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNDc3Mw==", "bodyText": "Assertions work only in main test thread. If you use assertion in offloaded thread or on a server side, they won't fail the test.\nWe usually use a BlockingQueue to save the result we observed on the server side and validate the values in the queue in the main test thread.", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536334773", "createdAt": "2020-12-04T19:37:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/ServiceTalkContentCodingTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.encoding.api.ContentCodec;\n+import io.servicetalk.http.netty.HttpClients;\n+import io.servicetalk.http.netty.HttpServers;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.CharSequences.contentEquals;\n+import static io.servicetalk.http.api.HeaderUtils.encodingFor;\n+import static io.servicetalk.http.api.HttpHeaderNames.ACCEPT_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_ENCODING;\n+import static io.servicetalk.http.api.HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.stream;\n+import static java.util.Collections.disjoint;\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+public class ServiceTalkContentCodingTest extends BaseContentCodingTest {\n+\n+    private static final Function<Scenario, StreamingHttpServiceFilterFactory> REQ_VERIFIER = (scenario)\n+            -> new StreamingHttpServiceFilterFactory() {\n+        @Override\n+        public StreamingHttpServiceFilter create(final StreamingHttpService service) {\n+            return new StreamingHttpServiceFilter(service) {\n+                @Override\n+\n+                public Single<StreamingHttpResponse> handle(final HttpServiceContext ctx,\n+                                                            final StreamingHttpRequest request,\n+                                                            final StreamingHttpResponseFactory responseFactory) {\n+                    final ContentCodec reqEncoding = scenario.requestEncoding;\n+                    final List<ContentCodec> clientSupportedEncodings = scenario.clientSupported;\n+\n+                    try {\n+\n+                        String requestPayload = request.payloadBody(textDeserializer())\n+                                .collect(StringBuilder::new, StringBuilder::append)\n+                                .toFuture().get().toString();\n+\n+                        assertEquals(payloadAsString((byte) 'a'), requestPayload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNjA5Mg==", "bodyText": "Similar logic here. If you verify in the filter, it can be executed in offloaded thread. You need to verify results on the caller side. Read the response via client API.", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536336092", "createdAt": "2020-12-04T19:39:31Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/ServiceTalkContentCodingTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.encoding.api.ContentCodec;\n+import io.servicetalk.http.netty.HttpClients;\n+import io.servicetalk.http.netty.HttpServers;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.CharSequences.contentEquals;\n+import static io.servicetalk.http.api.HeaderUtils.encodingFor;\n+import static io.servicetalk.http.api.HttpHeaderNames.ACCEPT_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_ENCODING;\n+import static io.servicetalk.http.api.HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.stream;\n+import static java.util.Collections.disjoint;\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+public class ServiceTalkContentCodingTest extends BaseContentCodingTest {\n+\n+    private static final Function<Scenario, StreamingHttpServiceFilterFactory> REQ_VERIFIER = (scenario)\n+            -> new StreamingHttpServiceFilterFactory() {\n+        @Override\n+        public StreamingHttpServiceFilter create(final StreamingHttpService service) {\n+            return new StreamingHttpServiceFilter(service) {\n+                @Override\n+\n+                public Single<StreamingHttpResponse> handle(final HttpServiceContext ctx,\n+                                                            final StreamingHttpRequest request,\n+                                                            final StreamingHttpResponseFactory responseFactory) {\n+                    final ContentCodec reqEncoding = scenario.requestEncoding;\n+                    final List<ContentCodec> clientSupportedEncodings = scenario.clientSupported;\n+\n+                    try {\n+\n+                        String requestPayload = request.payloadBody(textDeserializer())\n+                                .collect(StringBuilder::new, StringBuilder::append)\n+                                .toFuture().get().toString();\n+\n+                        assertEquals(payloadAsString((byte) 'a'), requestPayload);\n+\n+                        final List<String> actualReqAcceptedEncodings = stream(request.headers()\n+                                .get(ACCEPT_ENCODING, \"NOT_PRESENT\").toString().split(\",\"))\n+                                .map((String::trim)).collect(toList());\n+\n+                        final List<String> expectedReqAcceptedEncodings = clientSupportedEncodings.stream()\n+                                .filter((enc) -> enc != identity())\n+                                .map((ContentCodec::name))\n+                                .map(CharSequence::toString)\n+                                .collect(toList());\n+\n+                        if (reqEncoding != identity()) {\n+                            assertTrue(\"Request encoding should be present in the request headers\",\n+                                    contentEquals(reqEncoding.name(),\n+                                            request.headers().get(ACCEPT_ENCODING, \"NOT_PRESENT\")));\n+                        }\n+\n+                        if (!expectedReqAcceptedEncodings.isEmpty() && !actualReqAcceptedEncodings.isEmpty()) {\n+                            assertThat(actualReqAcceptedEncodings, equalTo(expectedReqAcceptedEncodings));\n+                        }\n+\n+                        return super.handle(ctx, request, responseFactory);\n+                    } catch (Throwable t) {\n+                        t.printStackTrace();\n+                        return succeeded(responseFactory.badRequest());\n+                    }\n+                }\n+            };\n+        }\n+    };\n+\n+    static final Function<Scenario, StreamingHttpClientFilterFactory> RESP_VERIFIER = (scenario)\n+            -> new StreamingHttpClientFilterFactory() {\n+        @Override\n+        public StreamingHttpClientFilter create(final FilterableStreamingHttpClient client) {\n+            return new StreamingHttpClientFilter(client) {\n+                @Override\n+                protected Single<StreamingHttpResponse> request(final StreamingHttpRequester delegate,\n+                                                                final HttpExecutionStrategy strategy,\n+                                                                final StreamingHttpRequest request) {\n+                    return super.request(delegate, strategy, request).map(response -> {\n+                        List<ContentCodec> server = scenario.serverSupported;\n+                        List<ContentCodec> client = scenario.clientSupported;\n+\n+                        ContentCodec expected = identity();\n+                        for (ContentCodec codec : client) {\n+                            if (server.contains(codec)) {\n+                                expected = codec;\n+                                break;\n+                            }\n+                        }\n+\n+                        assertEquals(expected, encodingFor(client, response.headers()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzk1Mw==", "bodyText": "Consider using BlockingHttpClient by default", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536337953", "createdAt": "2020-12-04T19:42:49Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/ServiceTalkContentCodingTest.java", "diffHunk": "@@ -0,0 +1,250 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.api.Single;\n+import io.servicetalk.encoding.api.ContentCodec;\n+import io.servicetalk.http.netty.HttpClients;\n+import io.servicetalk.http.netty.HttpServers;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.api.ServerContext;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+\n+import static io.servicetalk.concurrent.api.Publisher.from;\n+import static io.servicetalk.concurrent.api.Single.succeeded;\n+import static io.servicetalk.encoding.api.ContentCodings.identity;\n+import static io.servicetalk.http.api.CharSequences.contentEquals;\n+import static io.servicetalk.http.api.HeaderUtils.encodingFor;\n+import static io.servicetalk.http.api.HttpHeaderNames.ACCEPT_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_ENCODING;\n+import static io.servicetalk.http.api.HttpResponseStatus.UNSUPPORTED_MEDIA_TYPE;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textDeserializer;\n+import static io.servicetalk.http.api.HttpSerializationProviders.textSerializer;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.serverHostAndPort;\n+import static java.util.Arrays.stream;\n+import static java.util.Collections.disjoint;\n+import static java.util.Collections.singletonList;\n+import static java.util.stream.Collectors.toList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(Parameterized.class)\n+public class ServiceTalkContentCodingTest extends BaseContentCodingTest {\n+\n+    private static final Function<Scenario, StreamingHttpServiceFilterFactory> REQ_VERIFIER = (scenario)\n+            -> new StreamingHttpServiceFilterFactory() {\n+        @Override\n+        public StreamingHttpServiceFilter create(final StreamingHttpService service) {\n+            return new StreamingHttpServiceFilter(service) {\n+                @Override\n+\n+                public Single<StreamingHttpResponse> handle(final HttpServiceContext ctx,\n+                                                            final StreamingHttpRequest request,\n+                                                            final StreamingHttpResponseFactory responseFactory) {\n+                    final ContentCodec reqEncoding = scenario.requestEncoding;\n+                    final List<ContentCodec> clientSupportedEncodings = scenario.clientSupported;\n+\n+                    try {\n+\n+                        String requestPayload = request.payloadBody(textDeserializer())\n+                                .collect(StringBuilder::new, StringBuilder::append)\n+                                .toFuture().get().toString();\n+\n+                        assertEquals(payloadAsString((byte) 'a'), requestPayload);\n+\n+                        final List<String> actualReqAcceptedEncodings = stream(request.headers()\n+                                .get(ACCEPT_ENCODING, \"NOT_PRESENT\").toString().split(\",\"))\n+                                .map((String::trim)).collect(toList());\n+\n+                        final List<String> expectedReqAcceptedEncodings = clientSupportedEncodings.stream()\n+                                .filter((enc) -> enc != identity())\n+                                .map((ContentCodec::name))\n+                                .map(CharSequence::toString)\n+                                .collect(toList());\n+\n+                        if (reqEncoding != identity()) {\n+                            assertTrue(\"Request encoding should be present in the request headers\",\n+                                    contentEquals(reqEncoding.name(),\n+                                            request.headers().get(ACCEPT_ENCODING, \"NOT_PRESENT\")));\n+                        }\n+\n+                        if (!expectedReqAcceptedEncodings.isEmpty() && !actualReqAcceptedEncodings.isEmpty()) {\n+                            assertThat(actualReqAcceptedEncodings, equalTo(expectedReqAcceptedEncodings));\n+                        }\n+\n+                        return super.handle(ctx, request, responseFactory);\n+                    } catch (Throwable t) {\n+                        t.printStackTrace();\n+                        return succeeded(responseFactory.badRequest());\n+                    }\n+                }\n+            };\n+        }\n+    };\n+\n+    static final Function<Scenario, StreamingHttpClientFilterFactory> RESP_VERIFIER = (scenario)\n+            -> new StreamingHttpClientFilterFactory() {\n+        @Override\n+        public StreamingHttpClientFilter create(final FilterableStreamingHttpClient client) {\n+            return new StreamingHttpClientFilter(client) {\n+                @Override\n+                protected Single<StreamingHttpResponse> request(final StreamingHttpRequester delegate,\n+                                                                final HttpExecutionStrategy strategy,\n+                                                                final StreamingHttpRequest request) {\n+                    return super.request(delegate, strategy, request).map(response -> {\n+                        List<ContentCodec> server = scenario.serverSupported;\n+                        List<ContentCodec> client = scenario.clientSupported;\n+\n+                        ContentCodec expected = identity();\n+                        for (ContentCodec codec : client) {\n+                            if (server.contains(codec)) {\n+                                expected = codec;\n+                                break;\n+                            }\n+                        }\n+\n+                        assertEquals(expected, encodingFor(client, response.headers()\n+                                .get(CONTENT_ENCODING, \"identity\")));\n+                        return response;\n+                    });\n+                }\n+            };\n+        }\n+    };\n+\n+    private ServerContext serverContext;\n+    private HttpClient client;\n+\n+    public ServiceTalkContentCodingTest(Scenario scenario) {\n+        super(scenario);\n+    }\n+\n+    @Before\n+    public void start() throws Exception {\n+        serverContext = newServiceTalkServer(scenario);\n+        client = newServiceTalkClient(serverHostAndPort(serverContext), scenario);\n+    }\n+\n+    @After\n+    public void finish() throws Exception {\n+        client.close();\n+        serverContext.close();\n+    }\n+\n+    protected HttpClient client() {\n+        return client;\n+    }\n+\n+    protected void assertSuccessful(final ContentCodec encoding) throws Exception {\n+        assertResponse(client().request(client()\n+                .get(\"/\")\n+                .encoding(encoding)\n+                .payloadBody(payloadAsString((byte) 'a'), textSerializer())).toFuture().get().toStreamingResponse());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM0MDcwMA==", "bodyText": "For the purpose of the test, you don't need keep-alive logic. Just leave the connection open (@After will shutdown everything) or always close it, doesn't matter.", "url": "https://github.com/apple/servicetalk/pull/1239#discussion_r536340700", "createdAt": "2020-12-04T19:47:58Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/api/ServiceTalkToNettyContentCodingCompatibilityTest.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import io.servicetalk.concurrent.api.DefaultThreadFactory;\n+import io.servicetalk.transport.api.HostAndPort;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http.DefaultFullHttpResponse;\n+import io.netty.handler.codec.http.FullHttpResponse;\n+import io.netty.handler.codec.http.HttpContentCompressor;\n+import io.netty.handler.codec.http.HttpContentDecompressor;\n+import io.netty.handler.codec.http.HttpObject;\n+import io.netty.handler.codec.http.HttpServerCodec;\n+import io.netty.handler.codec.http.HttpUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.net.InetSocketAddress;\n+\n+import static io.netty.buffer.Unpooled.wrappedBuffer;\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONNECTION;\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_LENGTH;\n+import static io.netty.handler.codec.http.HttpHeaderNames.CONTENT_TYPE;\n+import static io.netty.handler.codec.http.HttpHeaderValues.CLOSE;\n+import static io.netty.handler.codec.http.HttpHeaderValues.KEEP_ALIVE;\n+import static io.netty.handler.codec.http.HttpHeaderValues.TEXT_PLAIN;\n+import static io.netty.handler.codec.http.HttpResponseStatus.OK;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.BuilderUtils.serverChannel;\n+import static io.servicetalk.transport.netty.internal.NettyIoExecutors.createEventLoopGroup;\n+import static java.lang.Thread.NORM_PRIORITY;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static org.junit.Assume.assumeFalse;\n+import static org.junit.Assume.assumeTrue;\n+\n+@RunWith(Parameterized.class)\n+public class ServiceTalkToNettyContentCodingCompatibilityTest extends ServiceTalkContentCodingTest {\n+\n+    private EventLoopGroup serverEventLoopGroup;\n+    private Channel serverAcceptorChannel;\n+    private HttpClient client;\n+\n+    public ServiceTalkToNettyContentCodingCompatibilityTest(Scenario scenario) {\n+        super(scenario);\n+    }\n+\n+    @Before\n+    public void start() {\n+        serverEventLoopGroup = createEventLoopGroup(2, new DefaultThreadFactory(\"server-io\", true, NORM_PRIORITY));\n+        serverAcceptorChannel = newNettyServer();\n+        InetSocketAddress serverAddress = (InetSocketAddress) serverAcceptorChannel.localAddress();\n+        client = newServiceTalkClient(HostAndPort.of(serverAddress), scenario);\n+    }\n+\n+    @After\n+    public void finish() throws Exception {\n+        serverAcceptorChannel.close().syncUninterruptibly();\n+        serverEventLoopGroup.shutdownGracefully(0, 0, MILLISECONDS).syncUninterruptibly();\n+        client.close();\n+    }\n+\n+    private Channel newNettyServer() {\n+        ServerBootstrap sb = new ServerBootstrap();\n+        sb.group(serverEventLoopGroup);\n+        sb.channel(serverChannel(serverEventLoopGroup, InetSocketAddress.class));\n+\n+        sb.childHandler(new ChannelInitializer<Channel>() {\n+            @Override\n+            protected void initChannel(final Channel ch) {\n+                ChannelPipeline p = ch.pipeline();\n+                p.addLast(new HttpServerCodec());\n+                if (!scenario.serverSupported.isEmpty()) {\n+                    p.addLast(new HttpContentDecompressor());\n+                    p.addLast(new HttpContentCompressor());\n+                }\n+                p.addLast(EchoServerHandler.INSTANCE);\n+            }\n+        });\n+        return sb.bind(localAddress(0)).syncUninterruptibly().channel();\n+    }\n+\n+    @Override\n+    public void testCompatibility() throws Exception {\n+        assumeFalse(\"Only testing H1 scenarios yet.\", scenario.isH2);\n+        assumeTrue(\"Only testing successful configurations; Netty doesn't have knowledge \" +\n+                \"about unsupported compression types.\", scenario.valid);\n+\n+        super.testCompatibility();\n+    }\n+\n+    @Override\n+    protected HttpClient client() {\n+        return client;\n+    }\n+\n+    @ChannelHandler.Sharable\n+    static class EchoServerHandler extends SimpleChannelInboundHandler<HttpObject> {\n+        static final EchoServerHandler INSTANCE = new EchoServerHandler();\n+\n+        private static final byte[] CONTENT = payload((byte) 'b');\n+\n+        @Override\n+        public void channelReadComplete(ChannelHandlerContext ctx) {\n+            ctx.flush();\n+        }\n+\n+        @Override\n+        public void channelRead0(ChannelHandlerContext ctx, HttpObject msg) {\n+            if (msg instanceof io.netty.handler.codec.http.HttpRequest) {\n+                io.netty.handler.codec.http.HttpRequest req = (io.netty.handler.codec.http.HttpRequest) msg;\n+\n+                boolean keepAlive = HttpUtil.isKeepAlive(req);\n+                FullHttpResponse response = new DefaultFullHttpResponse(req.protocolVersion(),\n+                        OK, wrappedBuffer(CONTENT));\n+\n+                response.headers()\n+                        .set(CONTENT_TYPE, TEXT_PLAIN)\n+                        .setInt(CONTENT_LENGTH, response.content().readableBytes());\n+\n+                if (keepAlive) {\n+                    if (!req.protocolVersion().isKeepAliveDefault()) {\n+                        response.headers().set(CONNECTION, KEEP_ALIVE);\n+                    }\n+                } else {\n+                    response.headers().set(CONNECTION, CLOSE);\n+                }\n+\n+                ChannelFuture f = ctx.write(response);\n+\n+                if (!keepAlive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e7c74b2fc7b089419f277d90e21a8eff6caabe"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a926cede5f7015e084917ef8c369b8db83be54d", "author": {"user": {"login": "tkountis", "name": "Thomas Kountis"}}, "url": "https://github.com/apple/servicetalk/commit/0a926cede5f7015e084917ef8c369b8db83be54d", "committedDate": "2020-12-09T21:26:58Z", "message": "Comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4d7fb6ee2249b1ec59c7b671b104ac1a591ba51", "author": {"user": {"login": "tkountis", "name": "Thomas Kountis"}}, "url": "https://github.com/apple/servicetalk/commit/e4d7fb6ee2249b1ec59c7b671b104ac1a591ba51", "committedDate": "2020-12-09T21:16:35Z", "message": "Comments"}, "afterCommit": {"oid": "0a926cede5f7015e084917ef8c369b8db83be54d", "author": {"user": {"login": "tkountis", "name": "Thomas Kountis"}}, "url": "https://github.com/apple/servicetalk/commit/0a926cede5f7015e084917ef8c369b8db83be54d", "committedDate": "2020-12-09T21:26:58Z", "message": "Comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3362, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}