{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMDY0OTI0", "number": 1039, "reviewThreads": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozMzoxOVrOD5XLRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxOToxMFrOD6bLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc1MTQwOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozMzoxOVrOGQlRsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozMzoxOVrOGQlRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MTEzNg==", "bodyText": "nit: please add javadocs for all protected methods.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420041136", "createdAt": "2020-05-05T11:33:19Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {\n+            throw new IllegalStateException(\"Buffer \" + this + \" is already terminated: \" + terminal);\n+        }\n+        addItem(item == null ? NULL_ITEM : item);\n+    }\n+\n+    @Override\n+    public final void terminate() {\n+        if (terminalUpdater.compareAndSet(this, null, complete())) {\n+            addTerminal(complete());\n+        }\n+    }\n+\n+    @Override\n+    public final void terminate(final Throwable cause) {\n+        TerminalNotification notification = error(cause);\n+        if (terminalUpdater.compareAndSet(this, null, notification)) {\n+            addTerminal(notification);\n+        }\n+    }\n+\n+    protected abstract void addItem(Object item);\n+\n+    protected abstract void addTerminal(TerminalNotification terminalNotification);\n+\n+    protected boolean consumeIfTerminal(final BufferConsumer<T> consumer, @Nullable final Object signal) {\n+        if (signal instanceof TerminalNotification) {\n+            TerminalNotification terminalNotification = (TerminalNotification) signal;\n+            if (terminalNotification.cause() != null) {\n+                consumer.consumeTerminal(terminalNotification.cause());\n+            } else {\n+                consumer.consumeTerminal();\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected boolean consumeNextItem(final BufferConsumer<T> consumer, @Nullable final Object nextItem) {\n+        if (nextItem == null) {\n+            return false;\n+        }\n+        if (nextItem == NULL_ITEM) {\n+            consumer.consumeItem(null);\n+        } else {\n+            @SuppressWarnings(\"unchecked\")\n+            T t = (T) nextItem;\n+            consumer.consumeItem(t);\n+        }\n+        return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc1NjY0OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozNDo1NlrOGQlU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozNDo1NlrOGQlU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MTk0MQ==", "bodyText": "nit: consider this:\nThrowable cause = ((TerminalNotification) signal).cause();\nif (cause != null) {\n    consumer.consumeTerminal(cause));\n} else {\n    consumer.consumeTerminal();\n}", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420041941", "createdAt": "2020-05-05T11:34:56Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {\n+            throw new IllegalStateException(\"Buffer \" + this + \" is already terminated: \" + terminal);\n+        }\n+        addItem(item == null ? NULL_ITEM : item);\n+    }\n+\n+    @Override\n+    public final void terminate() {\n+        if (terminalUpdater.compareAndSet(this, null, complete())) {\n+            addTerminal(complete());\n+        }\n+    }\n+\n+    @Override\n+    public final void terminate(final Throwable cause) {\n+        TerminalNotification notification = error(cause);\n+        if (terminalUpdater.compareAndSet(this, null, notification)) {\n+            addTerminal(notification);\n+        }\n+    }\n+\n+    protected abstract void addItem(Object item);\n+\n+    protected abstract void addTerminal(TerminalNotification terminalNotification);\n+\n+    protected boolean consumeIfTerminal(final BufferConsumer<T> consumer, @Nullable final Object signal) {\n+        if (signal instanceof TerminalNotification) {\n+            TerminalNotification terminalNotification = (TerminalNotification) signal;\n+            if (terminalNotification.cause() != null) {\n+                consumer.consumeTerminal(terminalNotification.cause());\n+            } else {\n+                consumer.consumeTerminal();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc1OTYyOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozNTo1NlrOGQlWsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozNTo1NlrOGQlWsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MjQxOA==", "bodyText": "Consider storing the return value of complete() and use the same value for addTerminal(...). Just to be sure its the same instance at the end...", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420042418", "createdAt": "2020-05-05T11:35:56Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {\n+            throw new IllegalStateException(\"Buffer \" + this + \" is already terminated: \" + terminal);\n+        }\n+        addItem(item == null ? NULL_ITEM : item);\n+    }\n+\n+    @Override\n+    public final void terminate() {\n+        if (terminalUpdater.compareAndSet(this, null, complete())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc2MzMzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTozNzoxMVrOGQlZJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNzoyNDowMFrOGRxqKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MzA0Nw==", "bodyText": "imho this is quite hard to read...", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420043047", "createdAt": "2020-05-05T11:37:11Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+abstract class AbstractPublisherProcessorBuffer<T, Q extends Queue<Object>> extends AbstractProcessorBuffer<T>\n+        implements PublisherProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<AbstractPublisherProcessorBuffer> bufferedUpdater =\n+            newUpdater(AbstractPublisherProcessorBuffer.class, \"buffered\");\n+\n+    private final int maxBuffer;\n+    private final Q signals;\n+\n+    private volatile int buffered;\n+\n+    AbstractPublisherProcessorBuffer(final int maxBuffer, final Q signals) {\n+        if (maxBuffer <= 0) {\n+            throw new IllegalArgumentException(\"maxBuffer: \" + maxBuffer + \" (expected > 0)\");\n+        }\n+        this.maxBuffer = maxBuffer;\n+        this.signals = requireNonNull(signals);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        if (bufferedUpdater.getAndAccumulate(this, 1,\n+                (prev, next) -> prev == maxBuffer ? maxBuffer :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA1NjAwMQ==", "bodyText": "Based on Scott's comment below, this is a bit simpler now:\n       if (bufferedUpdater.getAndAccumulate(this, 1,\n                (prev, next) -> prev == maxBuffer ? maxBuffer : (prev + next)) == maxBuffer) {\n\ndo you still feel this is hard to read? If so, what will you suggest as an alternative?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421056001", "createdAt": "2020-05-06T19:59:36Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+abstract class AbstractPublisherProcessorBuffer<T, Q extends Queue<Object>> extends AbstractProcessorBuffer<T>\n+        implements PublisherProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<AbstractPublisherProcessorBuffer> bufferedUpdater =\n+            newUpdater(AbstractPublisherProcessorBuffer.class, \"buffered\");\n+\n+    private final int maxBuffer;\n+    private final Q signals;\n+\n+    private volatile int buffered;\n+\n+    AbstractPublisherProcessorBuffer(final int maxBuffer, final Q signals) {\n+        if (maxBuffer <= 0) {\n+            throw new IllegalArgumentException(\"maxBuffer: \" + maxBuffer + \" (expected > 0)\");\n+        }\n+        this.maxBuffer = maxBuffer;\n+        this.signals = requireNonNull(signals);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        if (bufferedUpdater.getAndAccumulate(this, 1,\n+                (prev, next) -> prev == maxBuffer ? maxBuffer :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MzA0Nw=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI5MjU4NQ==", "bodyText": "thats fine", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421292585", "createdAt": "2020-05-07T07:24:00Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+abstract class AbstractPublisherProcessorBuffer<T, Q extends Queue<Object>> extends AbstractProcessorBuffer<T>\n+        implements PublisherProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<AbstractPublisherProcessorBuffer> bufferedUpdater =\n+            newUpdater(AbstractPublisherProcessorBuffer.class, \"buffered\");\n+\n+    private final int maxBuffer;\n+    private final Q signals;\n+\n+    private volatile int buffered;\n+\n+    AbstractPublisherProcessorBuffer(final int maxBuffer, final Q signals) {\n+        if (maxBuffer <= 0) {\n+            throw new IllegalArgumentException(\"maxBuffer: \" + maxBuffer + \" (expected > 0)\");\n+        }\n+        this.maxBuffer = maxBuffer;\n+        this.signals = requireNonNull(signals);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        if (bufferedUpdater.getAndAccumulate(this, 1,\n+                (prev, next) -> prev == maxBuffer ? maxBuffer :", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0MzA0Nw=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNDc5MTk0OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffers.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMTo0NTo1MlrOGQlqZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1NTowNlrOGSxuUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzQ2MQ==", "bodyText": "I think this is racy as you may have queue.offer return false if this method is invoked by multiple threads.\nYou should do something like:\nvoid offerPastBufferSize(final Object signal, final ConcurrentLinkedQueue<Object> queue) {\n    while (!queue.offer(signal)) {\n        queue.poll();\n    }\n}", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420047461", "createdAt": "2020-05-05T11:45:52Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffers.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.newMpscQueue;\n+\n+/**\n+ * A static factory for {@link PublisherProcessorBuffer}s.\n+ */\n+public final class PublisherProcessorBuffers {\n+    private PublisherProcessorBuffers() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will fail.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSize(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                throw new QueueFullException(\"processor-buffer\", maxBuffer);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropLatest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                // noop => drop latest\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then the oldest item previously added to the buffer will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropOldest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, ConcurrentLinkedQueue<Object>>(maxBuffer,\n+                new ConcurrentLinkedQueue<>()) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final ConcurrentLinkedQueue<Object> queue) {\n+                queue.poll(); // drop oldest\n+                queue.offer(signal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4NzA2NA==", "bodyText": "Since this is a ConcurrentLinkedQueue it is unbounded, offer() never returns false.\nAs we are not touching the buffered items count (in AbstractPublisherProcessorBuffer) every buffer size breach will drop one item and add one item, eventually leading to the size == maxBuffer unless other items are drained.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421187064", "createdAt": "2020-05-07T01:31:10Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffers.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.newMpscQueue;\n+\n+/**\n+ * A static factory for {@link PublisherProcessorBuffer}s.\n+ */\n+public final class PublisherProcessorBuffers {\n+    private PublisherProcessorBuffers() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will fail.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSize(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                throw new QueueFullException(\"processor-buffer\", maxBuffer);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropLatest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                // noop => drop latest\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then the oldest item previously added to the buffer will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropOldest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, ConcurrentLinkedQueue<Object>>(maxBuffer,\n+                new ConcurrentLinkedQueue<>()) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final ConcurrentLinkedQueue<Object> queue) {\n+                queue.poll(); // drop oldest\n+                queue.offer(signal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzQ2MQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI4OTk3NA==", "bodyText": "still I think it should be done to guard against problems later when the code is changed. At least I would add a comment with a warning that the queue must be unbound.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421289974", "createdAt": "2020-05-07T07:19:00Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffers.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.newMpscQueue;\n+\n+/**\n+ * A static factory for {@link PublisherProcessorBuffer}s.\n+ */\n+public final class PublisherProcessorBuffers {\n+    private PublisherProcessorBuffers() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will fail.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSize(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                throw new QueueFullException(\"processor-buffer\", maxBuffer);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropLatest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                // noop => drop latest\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then the oldest item previously added to the buffer will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropOldest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, ConcurrentLinkedQueue<Object>>(maxBuffer,\n+                new ConcurrentLinkedQueue<>()) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final ConcurrentLinkedQueue<Object> queue) {\n+                queue.poll(); // drop oldest\n+                queue.offer(signal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzQ2MQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MjIyNA==", "bodyText": "Ok lemme add a comment.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r422342224", "createdAt": "2020-05-08T19:55:06Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffers.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.newMpscQueue;\n+\n+/**\n+ * A static factory for {@link PublisherProcessorBuffer}s.\n+ */\n+public final class PublisherProcessorBuffers {\n+    private PublisherProcessorBuffers() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will fail.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSize(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                throw new QueueFullException(\"processor-buffer\", maxBuffer);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropLatest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final Queue<Object> queue) {\n+                // noop => drop latest\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then the oldest item previously added to the buffer will be dropped.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSizeDropOldest(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, ConcurrentLinkedQueue<Object>>(maxBuffer,\n+                new ConcurrentLinkedQueue<>()) {\n+            @Override\n+            void offerPastBufferSize(final Object signal, final ConcurrentLinkedQueue<Object> queue) {\n+                queue.poll(); // drop oldest\n+                queue.offer(signal);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA0NzQ2MQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzE3MDIxOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ProcessorBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1MzowMlrOGQ888A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoyNTozMVrOGRkFSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyOTA0MA==", "bodyText": "PublisherProcessorBuffer extends this interface and is public, but this interface is package private. Should this be public, or can they all be package private (related to another comment)?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420429040", "createdAt": "2020-05-05T21:53:02Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A buffer for different {@code Processor}s.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+interface ProcessorBuffer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3MDE1NQ==", "bodyText": "I have moved BufferConsumer to top level and removed this interface. Lets discuss public API surface area in your other comment.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421070155", "createdAt": "2020-05-06T20:25:31Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/ProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A buffer for different {@code Processor}s.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+interface ProcessorBuffer<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyOTA0MA=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzE3NDE0OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1NDoyMlrOGQ8_Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1NDoyMlrOGQ8_Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQyOTYyMg==", "bodyText": "+ terminal -> + terminalNotification", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420429622", "createdAt": "2020-05-05T21:54:22Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {\n+            throw new IllegalStateException(\"Buffer \" + this + \" is already terminated: \" + terminal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzE5MDAzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1OToxMFrOGQ9IOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1OToxMFrOGQ9IOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMTkzMQ==", "bodyText": "make this method final?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420431931", "createdAt": "2020-05-05T21:59:10Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {\n+            throw new IllegalStateException(\"Buffer \" + this + \" is already terminated: \" + terminal);\n+        }\n+        addItem(item == null ? NULL_ITEM : item);\n+    }\n+\n+    @Override\n+    public final void terminate() {\n+        if (terminalUpdater.compareAndSet(this, null, complete())) {\n+            addTerminal(complete());\n+        }\n+    }\n+\n+    @Override\n+    public final void terminate(final Throwable cause) {\n+        TerminalNotification notification = error(cause);\n+        if (terminalUpdater.compareAndSet(this, null, notification)) {\n+            addTerminal(notification);\n+        }\n+    }\n+\n+    protected abstract void addItem(Object item);\n+\n+    protected abstract void addTerminal(TerminalNotification terminalNotification);\n+\n+    protected boolean consumeIfTerminal(final BufferConsumer<T> consumer, @Nullable final Object signal) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzE5MTc5OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1OTo1MVrOGQ9JTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTo1OTo1MVrOGQ9JTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzMjIwNA==", "bodyText": "make this method final?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420432204", "createdAt": "2020-05-05T21:59:51Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {\n+            throw new IllegalStateException(\"Buffer \" + this + \" is already terminated: \" + terminal);\n+        }\n+        addItem(item == null ? NULL_ITEM : item);\n+    }\n+\n+    @Override\n+    public final void terminate() {\n+        if (terminalUpdater.compareAndSet(this, null, complete())) {\n+            addTerminal(complete());\n+        }\n+    }\n+\n+    @Override\n+    public final void terminate(final Throwable cause) {\n+        TerminalNotification notification = error(cause);\n+        if (terminalUpdater.compareAndSet(this, null, notification)) {\n+            addTerminal(notification);\n+        }\n+    }\n+\n+    protected abstract void addItem(Object item);\n+\n+    protected abstract void addTerminal(TerminalNotification terminalNotification);\n+\n+    protected boolean consumeIfTerminal(final BufferConsumer<T> consumer, @Nullable final Object signal) {\n+        if (signal instanceof TerminalNotification) {\n+            TerminalNotification terminalNotification = (TerminalNotification) signal;\n+            if (terminalNotification.cause() != null) {\n+                consumer.consumeTerminal(terminalNotification.cause());\n+            } else {\n+                consumer.consumeTerminal();\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected boolean consumeNextItem(final BufferConsumer<T> consumer, @Nullable final Object nextItem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzIxNzU1OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjowODo0OVrOGQ9YMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoyMTo0OVrOGRj9eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzNjAxOA==", "bodyText": "why do we need to catch InterruptedException, re-trigger an interrupt, and clear the interrupt flag? can we just let this exception propagate if it is used in blocking APIs? consider adding a comment if not.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420436018", "createdAt": "2020-05-05T22:08:49Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+\n+final class DefaultBlockingProcessorBuffer<T> extends AbstractProcessorBuffer<T> implements BlockingProcessorBuffer<T> {\n+    private final BlockingQueue<Object> signals;\n+\n+    DefaultBlockingProcessorBuffer(final int maxBuffer) {\n+        this.signals = new LinkedBlockingQueue<>(maxBuffer);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        putSignal(item);\n+    }\n+\n+    @Override\n+    protected void addTerminal(final TerminalNotification terminalNotification) {\n+        putSignal(terminalNotification);\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer) {\n+        if (consumeIfTerminal(consumer, signals.peek())) {\n+            return true;\n+        }\n+\n+        return consumeNextItem(consumer, signals.poll());\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer, final long waitFor, final TimeUnit waitForUnit)\n+            throws TimeoutException, InterruptedException {\n+        if (consumeIfTerminal(consumer, signals.peek())) {\n+            return true;\n+        }\n+\n+        Object nextItem = signals.poll(waitFor, waitForUnit);\n+        if (nextItem == null) {\n+            throw new TimeoutException(\"Timed out after \" + waitFor + \"(\" + waitForUnit + \") waiting for an item.\");\n+        }\n+        return consumeNextItem(consumer, nextItem);\n+    }\n+\n+    private void putSignal(final Object signal) {\n+        try {\n+            signals.put(signal);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA2ODE1NA==", "bodyText": "I have restructured the APIs to only throw InterruptedException for blocking variants. This was needed before because add/terminate did not throw.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421068154", "createdAt": "2020-05-06T20:21:49Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+\n+final class DefaultBlockingProcessorBuffer<T> extends AbstractProcessorBuffer<T> implements BlockingProcessorBuffer<T> {\n+    private final BlockingQueue<Object> signals;\n+\n+    DefaultBlockingProcessorBuffer(final int maxBuffer) {\n+        this.signals = new LinkedBlockingQueue<>(maxBuffer);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        putSignal(item);\n+    }\n+\n+    @Override\n+    protected void addTerminal(final TerminalNotification terminalNotification) {\n+        putSignal(terminalNotification);\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer) {\n+        if (consumeIfTerminal(consumer, signals.peek())) {\n+            return true;\n+        }\n+\n+        return consumeNextItem(consumer, signals.poll());\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer, final long waitFor, final TimeUnit waitForUnit)\n+            throws TimeoutException, InterruptedException {\n+        if (consumeIfTerminal(consumer, signals.peek())) {\n+            return true;\n+        }\n+\n+        Object nextItem = signals.poll(waitFor, waitForUnit);\n+        if (nextItem == null) {\n+            throw new TimeoutException(\"Timed out after \" + waitFor + \"(\" + waitForUnit + \") waiting for an item.\");\n+        }\n+        return consumeNextItem(consumer, nextItem);\n+    }\n+\n+    private void putSignal(final Object signal) {\n+        try {\n+            signals.put(signal);\n+        } catch (InterruptedException e) {\n+            Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzNjAxOA=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzIyMTg3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoxMDoxMFrOGQ9atg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoxMDoxMFrOGQ9atg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQzNjY2Mg==", "bodyText": "nit: this can be simplified to the following:\n@SuppressWarnings(\"unchecked\")\nT t = nextItem == NULL_ITEM ? null : (T) nextItem;\nconsumer.consumeItem(t);", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420436662", "createdAt": "2020-05-05T22:10:10Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {\n+            throw new IllegalStateException(\"Buffer \" + this + \" is already terminated: \" + terminal);\n+        }\n+        addItem(item == null ? NULL_ITEM : item);\n+    }\n+\n+    @Override\n+    public final void terminate() {\n+        if (terminalUpdater.compareAndSet(this, null, complete())) {\n+            addTerminal(complete());\n+        }\n+    }\n+\n+    @Override\n+    public final void terminate(final Throwable cause) {\n+        TerminalNotification notification = error(cause);\n+        if (terminalUpdater.compareAndSet(this, null, notification)) {\n+            addTerminal(notification);\n+        }\n+    }\n+\n+    protected abstract void addItem(Object item);\n+\n+    protected abstract void addTerminal(TerminalNotification terminalNotification);\n+\n+    protected boolean consumeIfTerminal(final BufferConsumer<T> consumer, @Nullable final Object signal) {\n+        if (signal instanceof TerminalNotification) {\n+            TerminalNotification terminalNotification = (TerminalNotification) signal;\n+            if (terminalNotification.cause() != null) {\n+                consumer.consumeTerminal(terminalNotification.cause());\n+            } else {\n+                consumer.consumeTerminal();\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    protected boolean consumeNextItem(final BufferConsumer<T> consumer, @Nullable final Object nextItem) {\n+        if (nextItem == null) {\n+            return false;\n+        }\n+        if (nextItem == NULL_ITEM) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzI1NTExOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjoyMjowN1rOGQ9uWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxOTo1MToxMFrOGRi7BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MTY5MA==", "bodyText": "IIUC add and terminate maybe called concurrently?\n\nIf so this is a best effort check and we may still add items unless there is external synchronization. Should we remove the check as it isn't reliable (it may provide a false sense of security from code inspection and depending upon usage pattern)?\nif not can you clarify the threading/ordering semantics on the base interface?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420441690", "createdAt": "2020-05-05T22:22:07Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA1MTE0MA==", "bodyText": "Removed", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421051140", "createdAt": "2020-05-06T19:51:10Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer<T> implements ProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    @Override\n+    public final void add(@Nullable final T item) {\n+        final TerminalNotification terminalNotification = terminal;\n+        if (terminalNotification != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0MTY5MA=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzM0OTE0OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo1NzowMVrOGQ-lBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1NDoxNlrOGSxs9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NTY4NQ==", "bodyText": "ProcessorBuffer, BufferConsumer, and PublisherProcessorBuffer introduce surface area for data production/consumption to the public API and have a high amount of conceptual overlap with Processor. What additional use cases beyond what is in PublisherProcessorBuffers do you have in mind? Is it reasonable to move the methods from PublisherProcessorBuffers into this class and keep the PublisherProcessorBuffer related interfaces package private for now?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420455685", "createdAt": "2020-05-05T22:57:01Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "diffHunk": "@@ -52,14 +53,42 @@ private Processors() {\n         return new SingleProcessor<>();\n     }\n \n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor() {\n+        return newPublisherProcessor(PublisherProcessorBuffers.fixedSize(32));\n+    }\n+\n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param buffer A {@link PublisherProcessorBuffer} to store items that are requested to be sent via\n+     * {@link PublisherSource.Processor#onNext(Object)} but not yet emitted to the {@link PublisherSource.Subscriber}.\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor(final PublisherProcessorBuffer<T> buffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE5MjEzOQ==", "bodyText": "The Buffer API is introduced with the following motivations:\n\nSupport different queue types\nSupport different rejection strategies\n\nThere are a few practical usecases for each of these motivation:\n\nOptimized queue types based on Processor usage: if the usage of Subscriber side is non-concurrent, one can use an spsc queue.\nDifferent queue implementations based on buffer type: Load balancer ready events today only require the last event to be buffered. So it can simply use an atomic ref instead of a queue.\nDynamic buffer sizes: For event bus kind of usecases (eg: listening to tracing spans), it is hard to determine a size for the queue. In such cases, having a dynamic queue size based on queue size EWMA (as an example) may be a good strategy to avoid pessimistic drops.\nBuffer size based on serialized size: For cases when the items are serialized and sent on the wire, one may want to buffer based on memory used(heterogeneous serialized sizes) vs items count . Tracing is one such usecase.\nReverse queue rejection strategy: For non-critical, unordered events; upon rejection, one could reverse the queue to avoid processing older events. eg if the processor is used to funnel requests to a single connection.\nNon-linear discards: For highly spikey events; one could use a non-linear rejection strategy (drop 5 items for each size breach)\n\nDecoupling buffering from the Processors enable us to support such cases which we partially know today and partially, providing these APIs can help discover such cases. For APIs like this which are by nature open ended, I have been more liberal in exposing more generic APIs instead of being pessimistically restrictive.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421192139", "createdAt": "2020-05-07T01:49:42Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "diffHunk": "@@ -52,14 +53,42 @@ private Processors() {\n         return new SingleProcessor<>();\n     }\n \n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor() {\n+        return newPublisherProcessor(PublisherProcessorBuffers.fixedSize(32));\n+    }\n+\n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param buffer A {@link PublisherProcessorBuffer} to store items that are requested to be sent via\n+     * {@link PublisherSource.Processor#onNext(Object)} but not yet emitted to the {@link PublisherSource.Subscriber}.\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor(final PublisherProcessorBuffer<T> buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NTY4NQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwNjE3NA==", "bodyText": "thanks for the additional context. can you add a summary of this to the javadoc of PublisherProcessorBuffer for additional motivation?\nConsider moving the PublisherProcessorBuffers to this class to aid discoverability and keep the processors consolidated (and be consistent with the Blocking variants).\nnewPublisherProcessor(int maxBuffer)\nnewPublisherProcessorDropTail(int maxBuffer) // aka latest\nnewPublisherProcessorDropHead(int maxBuffer) // aka oldest", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421806174", "createdAt": "2020-05-07T21:30:13Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "diffHunk": "@@ -52,14 +53,42 @@ private Processors() {\n         return new SingleProcessor<>();\n     }\n \n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor() {\n+        return newPublisherProcessor(PublisherProcessorBuffers.fixedSize(32));\n+    }\n+\n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param buffer A {@link PublisherProcessorBuffer} to store items that are requested to be sent via\n+     * {@link PublisherSource.Processor#onNext(Object)} but not yet emitted to the {@link PublisherSource.Subscriber}.\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor(final PublisherProcessorBuffer<T> buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NTY4NQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MTg3Nw==", "bodyText": "I have made the PublisherProcessorBuffers class pkg-private and folded methods into Processors as you suggest.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r422341877", "createdAt": "2020-05-08T19:54:16Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "diffHunk": "@@ -52,14 +53,42 @@ private Processors() {\n         return new SingleProcessor<>();\n     }\n \n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor() {\n+        return newPublisherProcessor(PublisherProcessorBuffers.fixedSize(32));\n+    }\n+\n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param buffer A {@link PublisherProcessorBuffer} to store items that are requested to be sent via\n+     * {@link PublisherSource.Processor#onNext(Object)} but not yet emitted to the {@link PublisherSource.Subscriber}.\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     */\n+    public static <T> PublisherSource.Processor<T, T> newPublisherProcessor(final PublisherProcessorBuffer<T> buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NTY4NQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzM2Mzc3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzowMzoxOVrOGQ-tsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNDo1NVrOGSyAMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NzkwNQ==", "bodyText": "IIUC there can be no concurrency between methods on this immediate level on the interface? Consider referencing RS no-concurrency semantics [1] here and in BlockingProcessorBuffer to clarify.\n[1] https://github.com/reactive-streams/reactive-streams-jvm/blob/v1.0.3/README.md#1.3", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420457905", "createdAt": "2020-05-05T23:03:19Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface PublisherProcessorBuffer<T> extends ProcessorBuffer<T> {\n+\n+    /**\n+     * Try to consume the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or\n+     * {@link BufferConsumer#consumeTerminal(Throwable) failed} termination.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4NDUyOA==", "bodyText": "The mix of concurrent and non-concurrent methods on the same interface is kind of painful to document. I have added some documentation on the Processors class to clarify relationship b/w usage of a Processor and the buffer w.r.t concurrency. I would refrain from providing more stricter expectation at this level as it driven from the Processor that uses it.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421184528", "createdAt": "2020-05-07T01:22:40Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface PublisherProcessorBuffer<T> extends ProcessorBuffer<T> {\n+\n+    /**\n+     * Try to consume the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or\n+     * {@link BufferConsumer#consumeTerminal(Throwable) failed} termination.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NzkwNQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg4MTA1OQ==", "bodyText": "BufferConsumer implementations that exist today do not support concurrent access, and it would be surprising to have concurrency consumption, is this something we expect when the consumer is typically a Subscriber? The connection to the Processor comments is nuanced and I think it is worth clarifying here to avoid confusion (see #1039 (comment), #1039 (comment)).", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421881059", "createdAt": "2020-05-08T01:12:07Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface PublisherProcessorBuffer<T> extends ProcessorBuffer<T> {\n+\n+    /**\n+     * Try to consume the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or\n+     * {@link BufferConsumer#consumeTerminal(Throwable) failed} termination.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NzkwNQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NjgwMg==", "bodyText": "I have added a multi-threaded section in the class javadoc as the semantics are general to production and consumption.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r422346802", "createdAt": "2020-05-08T20:04:55Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface PublisherProcessorBuffer<T> extends ProcessorBuffer<T> {\n+\n+    /**\n+     * Try to consume the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or\n+     * {@link BufferConsumer#consumeTerminal(Throwable) failed} termination.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NzkwNQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzM3MjgzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzowNjoyOVrOGQ-ypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzowNjoyOVrOGQ-ypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1OTE3Mw==", "bodyText": "you don't need addWithOverflowProtection because you are already preventing overflow with the prev == maxBuffer check.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420459173", "createdAt": "2020-05-05T23:06:29Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+abstract class AbstractPublisherProcessorBuffer<T, Q extends Queue<Object>> extends AbstractProcessorBuffer<T>\n+        implements PublisherProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<AbstractPublisherProcessorBuffer> bufferedUpdater =\n+            newUpdater(AbstractPublisherProcessorBuffer.class, \"buffered\");\n+\n+    private final int maxBuffer;\n+    private final Q signals;\n+\n+    private volatile int buffered;\n+\n+    AbstractPublisherProcessorBuffer(final int maxBuffer, final Q signals) {\n+        if (maxBuffer <= 0) {\n+            throw new IllegalArgumentException(\"maxBuffer: \" + maxBuffer + \" (expected > 0)\");\n+        }\n+        this.maxBuffer = maxBuffer;\n+        this.signals = requireNonNull(signals);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        if (bufferedUpdater.getAndAccumulate(this, 1,\n+                (prev, next) -> prev == maxBuffer ? maxBuffer :\n+                        addWithOverflowProtection(prev, next)) == maxBuffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzM4NTA3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxMTowNFrOGQ-5Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxMTowNFrOGQ-5Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MDg2Mg==", "bodyText": "can we just poll to avoid multiple interactions with the queue?\nObject next = signals.poll();\nif (consumeIfTerminal(consumer, next) || consumeNextItem(consumer, next)) {\n   // assuming it doesn't matter if we decrement on terminal, otherwise this can be kept separate\n  bufferedUpdater.decrementAndGet(this);\n  return true;\n}\nreturn false;", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420460862", "createdAt": "2020-05-05T23:11:04Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+\n+import static io.servicetalk.concurrent.internal.FlowControlUtils.addWithOverflowProtection;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+abstract class AbstractPublisherProcessorBuffer<T, Q extends Queue<Object>> extends AbstractProcessorBuffer<T>\n+        implements PublisherProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<AbstractPublisherProcessorBuffer> bufferedUpdater =\n+            newUpdater(AbstractPublisherProcessorBuffer.class, \"buffered\");\n+\n+    private final int maxBuffer;\n+    private final Q signals;\n+\n+    private volatile int buffered;\n+\n+    AbstractPublisherProcessorBuffer(final int maxBuffer, final Q signals) {\n+        if (maxBuffer <= 0) {\n+            throw new IllegalArgumentException(\"maxBuffer: \" + maxBuffer + \" (expected > 0)\");\n+        }\n+        this.maxBuffer = maxBuffer;\n+        this.signals = requireNonNull(signals);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        if (bufferedUpdater.getAndAccumulate(this, 1,\n+                (prev, next) -> prev == maxBuffer ? maxBuffer :\n+                        addWithOverflowProtection(prev, next)) == maxBuffer) {\n+            offerPastBufferSize(item, signals);\n+        } else {\n+            offerSignal(item);\n+        }\n+    }\n+\n+    @Override\n+    protected void addTerminal(final TerminalNotification terminalNotification) {\n+        offerSignal(terminalNotification);\n+    }\n+\n+    @Override\n+    public boolean tryConsume(final BufferConsumer<T> consumer) {\n+        if (consumeIfTerminal(consumer, signals.peek())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzM5NzU3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffers.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxNjoyNVrOGQ_AVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxNjoyNVrOGQ_AVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MjY3OQ==", "bodyText": "newMpscQueue(2, maxBuffer) -> newMpscQueue(2, maxBuffer + 1) (with overflow protection). AbstractPublisherProcessorBuffer only enforces the size overflow for items, and not for terminal events. however queue rejection for terminal events seem unnecessary after item size checks.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420462679", "createdAt": "2020-05-05T23:16:25Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffers.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.newMpscQueue;\n+\n+/**\n+ * A static factory for {@link PublisherProcessorBuffer}s.\n+ */\n+public final class PublisherProcessorBuffers {\n+    private PublisherProcessorBuffers() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Creates a new {@link PublisherProcessorBuffer} which buffers a maximum of {@code maxBuffer} items without being\n+     * consumed. If more items are {@link PublisherProcessorBuffer#add(Object) added} to the returned\n+     * {@link PublisherProcessorBuffer} then that {@link PublisherProcessorBuffer#add(Object) addition} will fail.\n+     *\n+     * @param maxBuffer Maximum number of items that can be present in the returned\n+     * @param <T> Type of items added to the returned {@link PublisherProcessorBuffer}.\n+     * @return A new {@link PublisherProcessorBuffer}.\n+     */\n+    public static <T> PublisherProcessorBuffer<T> fixedSize(final int maxBuffer) {\n+        return new AbstractPublisherProcessorBuffer<T, Queue<Object>>(maxBuffer, newMpscQueue(2, maxBuffer)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQ0MzUwOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNjozMFrOGQ_bNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNjozMFrOGQ_bNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2OTU1OQ==", "bodyText": "put this in a finally block incase cancel() throws?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420469559", "createdAt": "2020-05-05T23:36:30Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean lockReleased = false;\n+        while (!lockReleased && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                lockReleased = releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pendingUpdater.getAndSet(this, Long.MIN_VALUE);\n+                } else if (!consumed) {\n+                    // we optimistically decremented pending, so increment back again.\n+                    pendingUpdater.accumulateAndGet(this, 1,\n+                            FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+                    return;\n+                }\n+            } else if (cPending < 0) {\n+                // cancelled or already terminated\n+                return;\n+            } else if (cPending == 0) {\n+                if (buffer.tryConsumeTerminal(target)) {\n+                    pendingUpdater.getAndSet(this, Long.MIN_VALUE);\n+                    return;\n+                }\n+                break;\n+            }\n+        }\n+    }\n+\n+    private void earlyTerminateConsumerHoldingLock(final SubscriberBufferConsumer<T> consumer, final Throwable cause) {\n+        pendingUpdater.getAndSet(this, Long.MIN_VALUE);\n+        delayedSubscription.cancel();\n+        consumer.consumeTerminal(cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQ0NTk3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNzo1M1rOGQ_cww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozNzo1M1rOGQ_cww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2OTk1NQ==", "bodyText": "can this just be a volatile write? if not please add a comment clarifying why GAS is necessary.\n(general question where GAS is used in termination and return value is not used)", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420469955", "createdAt": "2020-05-05T23:37:53Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean lockReleased = false;\n+        while (!lockReleased && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                lockReleased = releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pendingUpdater.getAndSet(this, Long.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQ0OTM0OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozOTozM1rOGQ_e5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzozOTozM1rOGQ_e5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MDUwMw==", "bodyText": "nit: make final to re-enforce it must be set once.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420470503", "createdAt": "2020-05-05T23:39:33Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean lockReleased = false;\n+        while (!lockReleased && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                lockReleased = releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                boolean consumed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzQ2MjQwOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzo0NTo1M1rOGQ_miw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTowMDo1M1rOGSQGIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MjQ1OQ==", "bodyText": "what is the motivation for clearing out the consumer here? if subsequent signals come do we want/need to suppress them?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420472459", "createdAt": "2020-05-05T23:45:53Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MTMxMw==", "bodyText": "This is to follow spec rule 3.13", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421171313", "createdAt": "2020-05-07T00:35:55Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MjQ1OQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MTI2Ng==", "bodyText": "\ud83d\udc4d consider adding a comment to clarify.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421791266", "createdAt": "2020-05-07T21:00:53Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3MjQ1OQ=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzUwNTI3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDowNzozNVrOGQ__8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDo1NTo1M1rOGSP7FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODk2MA==", "bodyText": "consider using a \"safe\" variant to prevent duplicate termination of the subscriber in the event of exception (since it is terminated internally)", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420478960", "createdAt": "2020-05-06T00:07:35Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE3MDMxOA==", "bodyText": "SubscriberBufferConsumer to which this method eventually delegates uses the safe variants, did I misunderstand your comment?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421170318", "createdAt": "2020-05-07T00:32:49Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODk2MA=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc4ODQzNw==", "bodyText": "here is a problematic call stack:\nsafeOnError(subscriber, cause) // in finally block\ndelayedSubscription.cancel() // may throw\nearlyTerminateConsumerHoldingLock(cause)\n[emitSignalsHoldingLock] // optional in stack\ntryEmitSignals\n\nin general the tryEmitSignals seems to own the responsibility to catch exceptions and recover. in this case (as opposed to other places where this method is called) if we let exceptions propagate we may introduce duplicate termination since the Publisher#handleSubscribe will catch the exception.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421788437", "createdAt": "2020-05-07T20:55:53Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ3ODk2MA=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzUyNTgzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoxODozOVrOGRAMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDoxODozOVrOGRAMDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4MjA2Mg==", "bodyText": "nit: reverse boolean logic is used elsewhere, consider making them consistent.\nhttps://github.com/apple/servicetalk/blob/master/servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/SetDynamicCompositeCancellable.java#L94\n        boolean tryAcquire = true;\n        while (tryAcquire && tryAcquireLock(cancelAllLockUpdater, this)) {\n            try {\n            } finally {\n                tryAcquire = !releaseLock(cancelAllLockUpdater, this);\n            }\n        }", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420482062", "createdAt": "2020-05-06T00:18:39Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean lockReleased = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU1Njg3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDozNTozM1rOGRAeBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMToxNzoxOFrOGRq-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjY2MA==", "bodyText": "this maybe called from the thread invoking the Subscription (e.g. caller of request(n)). should we clarify that if this method shouldn't throw, but if it does it is assumed to have already terminated the target? and add a comment here that we can't do anything besides set our state to terminated.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420486660", "createdAt": "2020-05-06T00:35:33Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean lockReleased = false;\n+        while (!lockReleased && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                lockReleased = releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pendingUpdater.getAndSet(this, Long.MIN_VALUE);\n+                } else if (!consumed) {\n+                    // we optimistically decremented pending, so increment back again.\n+                    pendingUpdater.accumulateAndGet(this, 1,\n+                            FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+                    return;\n+                }\n+            } else if (cPending < 0) {\n+                // cancelled or already terminated\n+                return;\n+            } else if (cPending == 0) {\n+                if (buffer.tryConsumeTerminal(target)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE4Mjk3OQ==", "bodyText": "Good point, I will add a try-catch and assume terminal isn't consumed.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421182979", "createdAt": "2020-05-07T01:17:18Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,249 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.api.ProcessorBuffer.BufferConsumer;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean lockReleased = false;\n+        while (!lockReleased && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                lockReleased = releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pendingUpdater.getAndSet(this, Long.MIN_VALUE);\n+                } else if (!consumed) {\n+                    // we optimistically decremented pending, so increment back again.\n+                    pendingUpdater.accumulateAndGet(this, 1,\n+                            FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+                    return;\n+                }\n+            } else if (cPending < 0) {\n+                // cancelled or already terminated\n+                return;\n+            } else if (cPending == 0) {\n+                if (buffer.tryConsumeTerminal(target)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4NjY2MA=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU3ODI0OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0Nzo0MlrOGRAp6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo0Nzo0MlrOGRAp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ4OTcwNQ==", "bodyText": "The javadoc says:\n\nThis method will block till an item or a terminal event is available in the buffer.\n\nshould this method use take() instead of poll()?\n        final Object next = signals.take(); // todo: handle InterruptedException\n        return consumeIfTerminal(consumer, next) || consumeNextItem(consumer, next);", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420489705", "createdAt": "2020-05-06T00:47:42Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+\n+final class DefaultBlockingProcessorBuffer<T> extends AbstractProcessorBuffer<T> implements BlockingProcessorBuffer<T> {\n+    private final BlockingQueue<Object> signals;\n+\n+    DefaultBlockingProcessorBuffer(final int maxBuffer) {\n+        this.signals = new LinkedBlockingQueue<>(maxBuffer);\n+    }\n+\n+    @Override\n+    protected void addItem(final Object item) {\n+        putSignal(item);\n+    }\n+\n+    @Override\n+    protected void addTerminal(final TerminalNotification terminalNotification) {\n+        putSignal(terminalNotification);\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer) {\n+        if (consumeIfTerminal(consumer, signals.peek())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzU4MzY1OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMDo1MDozNlrOGRAs3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMDoyOToxM1rOGRkNNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MDQ2Mg==", "bodyText": "IIUC there was a desire to support multi-threaded producing, but the PublisherSource.Processor API is SPSC by definition in the ReactiveStreams specification. If the intention is for the return value to always be MP safe, should we clarify this in the API (javadoc, method name, ..)?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420490462", "createdAt": "2020-05-06T00:50:36Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "diffHunk": "@@ -52,14 +53,42 @@ private Processors() {\n         return new SingleProcessor<>();\n     }\n \n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTA3MjE4Mg==", "bodyText": "None of the producing side of these processors in this interface are expected to follow reactive streams specifications, eg: Single and Completable processors above do not expect to onSubscribe() call today and termination can be called multiple times. Let me add this clarification to all methods.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421072182", "createdAt": "2020-05-06T20:29:13Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/Processors.java", "diffHunk": "@@ -52,14 +53,42 @@ private Processors() {\n         return new SingleProcessor<>();\n     }\n \n+    /**\n+     * Create a new {@link PublisherSource.Processor} that allows for a single\n+     * {@link PublisherSource.Subscriber#subscribe(PublisherSource.Subscriber) subscribe}.\n+     *\n+     * @param <T> The {@link PublisherSource} type and {@link PublisherSource.Subscriber} type of the\n+     * {@link PublisherSource.Processor}.\n+     * @return a new {@link PublisherSource.Processor} that allows for a single", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MDQ2Mg=="}, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzYwNjY5OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTowMzoyNVrOGRA5iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwMTowMzoyNVrOGRA5iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ5MzcwNQ==", "bodyText": "throwException casting to a boolean doesn't look right, despite the return not being expected. Consider refactoring for clarity:\nThrowable cause = terminal.cause();\nif (cause != null) {\n  throwException(cause);\n}\nreturn false;", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r420493705", "createdAt": "2020-05-06T01:03:25Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "diffHunk": "@@ -144,43 +120,33 @@ public boolean hasNext() {\n                 return true;\n             }\n \n-            final Object next;\n+            final boolean consumed;\n             try {\n-                next = buffer.take();\n+                consumed = buffer.consume(this);\n             } catch (InterruptedException e) {\n                 return throwException(e);\n             }\n-            return processHasNext(next);\n+            return terminal == null ? consumed : hasNextWhenTerminated();\n         }\n \n-        @Nullable\n-        private T processNext() {\n-            Object next = this.next;\n-            this.next = null;\n-            if (next == NULL_MASK) {\n-                return null;\n-            } else {\n-                @SuppressWarnings(\"unchecked\")\n-                T t = (T) next;\n-                return t;\n-            }\n+        private boolean hasNextWhenTerminated() {\n+            assert terminal != null;\n+            return terminal.cause() != null && (boolean) throwException(terminal.cause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "582040f1697dff5e00d9ed20fc91dd5bfb835dfd"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA2NDQxOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NDozNFrOGR077Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NDozNFrOGR077Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NjI4NQ==", "bodyText": "nit: you could merge the both lines above. That said feel free to ignore", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421346285", "createdAt": "2020-05-07T08:54:34Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer {\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    final boolean tryTerminate(final TerminalNotification notification) {\n+        return terminalUpdater.compareAndSet(this, null, notification);\n+    }\n+\n+    static <T> Object maskNull(@Nullable final T item) {\n+        return item == null ? NULL_ITEM : item;\n+    }\n+\n+    /**\n+     * Invokes {@link BufferConsumer#consumeTerminal(Throwable)} if the the passed {@code signal} is a\n+     * {@link TerminalNotification} representing an error termination. Invokes\n+     * {@link BufferConsumer#consumeTerminal()} if the the passed {@code signal} is a {@link TerminalNotification}\n+     * representing a successful termination. If the passed {@code signal} is not a {@link TerminalNotification} then\n+     * does nothing.\n+     *\n+     * @param consumer {@link BufferConsumer} to consume the terminal.\n+     * @param signal which may be a {@link TerminalNotification}.\n+     * @return {@code true} if any method was invoked on the passed {@link BufferConsumer}.\n+     */\n+    static boolean consumeIfTerminal(final BufferConsumer<?> consumer, @Nullable final Object signal) {\n+        if (signal instanceof TerminalNotification) {\n+            TerminalNotification terminalNotification = (TerminalNotification) signal;\n+            Throwable cause = terminalNotification.cause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA2Njc1OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NDo1OVrOGR09Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NDo1OVrOGR09Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NjYzMQ==", "bodyText": "s/the the/the/", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421346631", "createdAt": "2020-05-07T08:54:59Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer {\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    final boolean tryTerminate(final TerminalNotification notification) {\n+        return terminalUpdater.compareAndSet(this, null, notification);\n+    }\n+\n+    static <T> Object maskNull(@Nullable final T item) {\n+        return item == null ? NULL_ITEM : item;\n+    }\n+\n+    /**\n+     * Invokes {@link BufferConsumer#consumeTerminal(Throwable)} if the the passed {@code signal} is a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA2NzU5OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NToxNVrOGR095g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NToxNVrOGR095g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0Njc5MA==", "bodyText": "s/the the/the/", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421346790", "createdAt": "2020-05-07T08:55:15Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer {\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    final boolean tryTerminate(final TerminalNotification notification) {\n+        return terminalUpdater.compareAndSet(this, null, notification);\n+    }\n+\n+    static <T> Object maskNull(@Nullable final T item) {\n+        return item == null ? NULL_ITEM : item;\n+    }\n+\n+    /**\n+     * Invokes {@link BufferConsumer#consumeTerminal(Throwable)} if the the passed {@code signal} is a\n+     * {@link TerminalNotification} representing an error termination. Invokes\n+     * {@link BufferConsumer#consumeTerminal()} if the the passed {@code signal} is a {@link TerminalNotification}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA3MDM3OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NjowMFrOGR0_sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1NjowMFrOGR0_sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NzI0OQ==", "bodyText": "consider adding an unmaskNull method (put it close to maskNull) and use this method here. This will ensure we keep the logic in one place and make it easier to maintain", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421347249", "createdAt": "2020-05-07T08:56:00Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static java.util.concurrent.atomic.AtomicReferenceFieldUpdater.newUpdater;\n+\n+abstract class AbstractProcessorBuffer {\n+    private static final AtomicReferenceFieldUpdater<AbstractProcessorBuffer,\n+            TerminalNotification> terminalUpdater = newUpdater(AbstractProcessorBuffer.class,\n+            TerminalNotification.class, \"terminal\");\n+    private static final Object NULL_ITEM = new Object();\n+\n+    @Nullable\n+    private volatile TerminalNotification terminal;\n+\n+    final boolean tryTerminate(final TerminalNotification notification) {\n+        return terminalUpdater.compareAndSet(this, null, notification);\n+    }\n+\n+    static <T> Object maskNull(@Nullable final T item) {\n+        return item == null ? NULL_ITEM : item;\n+    }\n+\n+    /**\n+     * Invokes {@link BufferConsumer#consumeTerminal(Throwable)} if the the passed {@code signal} is a\n+     * {@link TerminalNotification} representing an error termination. Invokes\n+     * {@link BufferConsumer#consumeTerminal()} if the the passed {@code signal} is a {@link TerminalNotification}\n+     * representing a successful termination. If the passed {@code signal} is not a {@link TerminalNotification} then\n+     * does nothing.\n+     *\n+     * @param consumer {@link BufferConsumer} to consume the terminal.\n+     * @param signal which may be a {@link TerminalNotification}.\n+     * @return {@code true} if any method was invoked on the passed {@link BufferConsumer}.\n+     */\n+    static boolean consumeIfTerminal(final BufferConsumer<?> consumer, @Nullable final Object signal) {\n+        if (signal instanceof TerminalNotification) {\n+            TerminalNotification terminalNotification = (TerminalNotification) signal;\n+            Throwable cause = terminalNotification.cause();\n+            if (cause != null) {\n+                consumer.consumeTerminal(cause);\n+            } else {\n+                consumer.consumeTerminal();\n+            }\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Invokes {@link BufferConsumer#consumeItem(Object)} if the the passed {@code signal} is not {@code null}.\n+     *\n+     * @param consumer {@link BufferConsumer} to consume the item.\n+     * @param nextItem which either can be {@code null} or an item of type {@link T}.\n+     * @param <T> Type of items consumed by {@link BufferConsumer}.\n+     * @return {@code true} if any method was invoked on the passed {@link BufferConsumer}.\n+     */\n+    static <T> boolean consumeNextItem(final BufferConsumer<T> consumer, @Nullable final Object nextItem) {\n+        if (nextItem == null) {\n+            return false;\n+        }\n+        @SuppressWarnings(\"unchecked\")\n+        T t = nextItem == NULL_ITEM ? null : (T) nextItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA4NTQwOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1OTo1M1rOGR1JcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjoyOTo1NlrOGSSi4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0OTc0NA==", "bodyText": "nit: move the call to maskNull(item) out of the if / else block to simplify. It is done in both cases anyway.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421349744", "createdAt": "2020-05-07T08:59:53Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+abstract class AbstractPublisherProcessorBuffer<T, Q extends Queue<Object>> extends AbstractProcessorBuffer\n+        implements PublisherProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<AbstractPublisherProcessorBuffer> bufferedUpdater =\n+            newUpdater(AbstractPublisherProcessorBuffer.class, \"buffered\");\n+\n+    private final int maxBuffer;\n+    private final Q signals;\n+\n+    private volatile int buffered;\n+\n+    AbstractPublisherProcessorBuffer(final int maxBuffer, final Q signals) {\n+        if (maxBuffer <= 0) {\n+            throw new IllegalArgumentException(\"maxBuffer: \" + maxBuffer + \" (expected > 0)\");\n+        }\n+        this.maxBuffer = maxBuffer;\n+        this.signals = requireNonNull(signals);\n+    }\n+\n+    @Override\n+    public void add(@Nullable final T item) {\n+        if (bufferedUpdater.getAndAccumulate(this, 1,\n+                (prev, next) -> prev == maxBuffer ? maxBuffer : (prev + next)) == maxBuffer) {\n+            offerPastBufferSize(maskNull(item), signals);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTM5Mw==", "bodyText": "We have been preferring inlining such calls as opposed to storing it in a local field.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421831393", "createdAt": "2020-05-07T22:29:56Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/AbstractPublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.QueueFullException;\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.Queue;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+abstract class AbstractPublisherProcessorBuffer<T, Q extends Queue<Object>> extends AbstractProcessorBuffer\n+        implements PublisherProcessorBuffer<T> {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<AbstractPublisherProcessorBuffer> bufferedUpdater =\n+            newUpdater(AbstractPublisherProcessorBuffer.class, \"buffered\");\n+\n+    private final int maxBuffer;\n+    private final Q signals;\n+\n+    private volatile int buffered;\n+\n+    AbstractPublisherProcessorBuffer(final int maxBuffer, final Q signals) {\n+        if (maxBuffer <= 0) {\n+            throw new IllegalArgumentException(\"maxBuffer: \" + maxBuffer + \" (expected > 0)\");\n+        }\n+        this.maxBuffer = maxBuffer;\n+        this.signals = requireNonNull(signals);\n+    }\n+\n+    @Override\n+    public void add(@Nullable final T item) {\n+        if (bufferedUpdater.getAndAccumulate(this, 1,\n+                (prev, next) -> prev == maxBuffer ? maxBuffer : (prev + next)) == maxBuffer) {\n+            offerPastBufferSize(maskNull(item), signals);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0OTc0NA=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA5MTA5OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BlockingProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTowMToyMlrOGR1NCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjozMDo1OVrOGSSkXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MDY2Ng==", "bodyText": "maybe clarify what will happen if you try to call add(...) after it (maybe throwing).", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421350666", "createdAt": "2020-05-07T09:01:22Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.BlockingIterable.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface BlockingProcessorBuffer<T> {\n+\n+    /**\n+     * Adds an item to this buffer.\n+     *\n+     * @param item to add.\n+     * @throws InterruptedException If the add was interrupted.\n+     */\n+    void add(@Nullable T item) throws InterruptedException;\n+\n+    /**\n+     * Terminates this buffer, such that no further modifications of this buffer are allowed. Subsequent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMTc3NQ==", "bodyText": "actually we are not enforcing this now, so lemme change allowed => expected", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421831775", "createdAt": "2020-05-07T22:30:59Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.BlockingIterable.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface BlockingProcessorBuffer<T> {\n+\n+    /**\n+     * Adds an item to this buffer.\n+     *\n+     * @param item to add.\n+     * @throws InterruptedException If the add was interrupted.\n+     */\n+    void add(@Nullable T item) throws InterruptedException;\n+\n+    /**\n+     * Terminates this buffer, such that no further modifications of this buffer are allowed. Subsequent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MDY2Ng=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA5NDkzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BlockingProcessorBuffer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTowMjozMFrOGR1Pgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjozNjowMFrOGSSqtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTI5OA==", "bodyText": "is this really true ? Like will it also return true if consume was called ?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421351298", "createdAt": "2020-05-07T09:02:30Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.BlockingIterable.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface BlockingProcessorBuffer<T> {\n+\n+    /**\n+     * Adds an item to this buffer.\n+     *\n+     * @param item to add.\n+     * @throws InterruptedException If the add was interrupted.\n+     */\n+    void add(@Nullable T item) throws InterruptedException;\n+\n+    /**\n+     * Terminates this buffer, such that no further modifications of this buffer are allowed. Subsequent\n+     * {@link BufferConsumer consumptions} must first consume all previously {@link #add(Object) added} items and then\n+     * {@link BufferConsumer#consumeTerminal()}  consume termination}.\n+     * @throws InterruptedException If termination was interrupted.\n+     */\n+    void terminate() throws InterruptedException;\n+\n+    /**\n+     * Terminates this buffer, such that no further modifications of this buffer are allowed. Subsequent\n+     * {@link BufferConsumer consumptions} must first consume all previously {@link #add(Object) added} items and then\n+     * {@link BufferConsumer#consumeTerminal()}  consume termination}.\n+     *\n+     * @param cause {@link Throwable} as a cause for termination.\n+     * @throws InterruptedException If termination was interrupted.\n+     */\n+    void terminate(Throwable cause) throws InterruptedException;\n+\n+    /**\n+     * Consumes the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or {@link BufferConsumer#consumeTerminal(Throwable) failed}\n+     * termination.\n+     * <p>\n+     * This method will block till an item or a terminal event is available in the buffer.\n+     *\n+     * @param consumer {@link BufferConsumer} to consume the next item or termination in this buffer\n+     * @return {@code true} if any method was called on the passed {@link BufferConsumer}.\n+     * @throws InterruptedException If the thread was interrupted while waiting for an item or terminal event.\n+     */\n+    boolean consume(BufferConsumer<T> consumer) throws InterruptedException;\n+\n+    /**\n+     * Consumes the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or {@link BufferConsumer#consumeTerminal(Throwable) failed}\n+     * termination.\n+     * <p>\n+     * This method will block till an item or a terminal event is available in the buffer or the passed {@code waitFor}\n+     * duration has elapsed.\n+     *\n+     * @param consumer {@link BufferConsumer} to consume the next item or termination in this buffer\n+     * @param waitFor Duration to wait for an item or termination to be available.\n+     * @param waitForUnit {@link TimeUnit} for {@code waitFor}.\n+     * @return {@code true} if any method was called on the passed {@link BufferConsumer}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzMzM5OA==", "bodyText": "Yes that is correct. Return value is indicating whether an item or terminal was consumed.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421833398", "createdAt": "2020-05-07T22:36:00Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.BlockingIterable.Processor;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface BlockingProcessorBuffer<T> {\n+\n+    /**\n+     * Adds an item to this buffer.\n+     *\n+     * @param item to add.\n+     * @throws InterruptedException If the add was interrupted.\n+     */\n+    void add(@Nullable T item) throws InterruptedException;\n+\n+    /**\n+     * Terminates this buffer, such that no further modifications of this buffer are allowed. Subsequent\n+     * {@link BufferConsumer consumptions} must first consume all previously {@link #add(Object) added} items and then\n+     * {@link BufferConsumer#consumeTerminal()}  consume termination}.\n+     * @throws InterruptedException If termination was interrupted.\n+     */\n+    void terminate() throws InterruptedException;\n+\n+    /**\n+     * Terminates this buffer, such that no further modifications of this buffer are allowed. Subsequent\n+     * {@link BufferConsumer consumptions} must first consume all previously {@link #add(Object) added} items and then\n+     * {@link BufferConsumer#consumeTerminal()}  consume termination}.\n+     *\n+     * @param cause {@link Throwable} as a cause for termination.\n+     * @throws InterruptedException If termination was interrupted.\n+     */\n+    void terminate(Throwable cause) throws InterruptedException;\n+\n+    /**\n+     * Consumes the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or {@link BufferConsumer#consumeTerminal(Throwable) failed}\n+     * termination.\n+     * <p>\n+     * This method will block till an item or a terminal event is available in the buffer.\n+     *\n+     * @param consumer {@link BufferConsumer} to consume the next item or termination in this buffer\n+     * @return {@code true} if any method was called on the passed {@link BufferConsumer}.\n+     * @throws InterruptedException If the thread was interrupted while waiting for an item or terminal event.\n+     */\n+    boolean consume(BufferConsumer<T> consumer) throws InterruptedException;\n+\n+    /**\n+     * Consumes the next item stored in this buffer. If there are no items stored in the buffer and the buffer has\n+     * terminated {@link #terminate() successfully} or with an {@link #terminate(Throwable) error} then consume that\n+     * {@link BufferConsumer#consumeTerminal() successful} or {@link BufferConsumer#consumeTerminal(Throwable) failed}\n+     * termination.\n+     * <p>\n+     * This method will block till an item or a terminal event is available in the buffer or the passed {@code waitFor}\n+     * duration has elapsed.\n+     *\n+     * @param consumer {@link BufferConsumer} to consume the next item or termination in this buffer\n+     * @param waitFor Duration to wait for an item or termination to be available.\n+     * @param waitForUnit {@link TimeUnit} for {@code waitFor}.\n+     * @return {@code true} if any method was called on the passed {@link BufferConsumer}.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MTI5OA=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzEwMzIwOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTowNDo1MFrOGR1U6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOTowNDo1MFrOGR1U6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1MjY4MA==", "bodyText": "these 3 lines of code are the same as the change of line 92... Consider sharing the code via a private method:\nprivate T consumeNext() {\n    T next = this.next;\n    this.next = null;\n    return null;\n}", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421352680", "createdAt": "2020-05-07T09:04:50Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "diffHunk": "@@ -127,7 +100,9 @@ public T next() {\n             if (!hasNext()) {\n                 throw new NoSuchElementException();\n             }\n-            return processNext();\n+            T next = this.next;\n+            this.next = null;\n+            return next;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzEzNTY4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToxMzoyNFrOGR1piA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjozOToyNFrOGSSvdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1Nzk2MA==", "bodyText": "nit: this is the same as line 83. Maybe share ?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421357960", "createdAt": "2020-05-07T09:13:24Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "diffHunk": "@@ -144,43 +119,37 @@ public boolean hasNext() {\n                 return true;\n             }\n \n-            final Object next;\n+            final boolean consumed;\n             try {\n-                next = buffer.take();\n+                consumed = buffer.consume(this);\n             } catch (InterruptedException e) {\n                 return throwException(e);\n             }\n-            return processHasNext(next);\n+            return terminal == null ? consumed : hasNextWhenTerminated();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNDYxNQ==", "bodyText": "mmm .. its a one-liner which uses a method anyways. I will avoid creating a method for it", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421834615", "createdAt": "2020-05-07T22:39:24Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "diffHunk": "@@ -144,43 +119,37 @@ public boolean hasNext() {\n                 return true;\n             }\n \n-            final Object next;\n+            final boolean consumed;\n             try {\n-                next = buffer.take();\n+                consumed = buffer.consume(this);\n             } catch (InterruptedException e) {\n                 return throwException(e);\n             }\n-            return processHasNext(next);\n+            return terminal == null ? consumed : hasNextWhenTerminated();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1Nzk2MA=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzEzODI4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToxNDowMlrOGR1rJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo0MToyM1rOGSSyTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1ODM3NQ==", "bodyText": "how is the boolean useful here ? This always returns false....", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421358375", "createdAt": "2020-05-07T09:14:02Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "diffHunk": "@@ -144,43 +119,37 @@ public boolean hasNext() {\n                 return true;\n             }\n \n-            final Object next;\n+            final boolean consumed;\n             try {\n-                next = buffer.take();\n+                consumed = buffer.consume(this);\n             } catch (InterruptedException e) {\n                 return throwException(e);\n             }\n-            return processHasNext(next);\n+            return terminal == null ? consumed : hasNextWhenTerminated();\n         }\n \n-        @Nullable\n-        private T processNext() {\n-            Object next = this.next;\n-            this.next = null;\n-            if (next == NULL_MASK) {\n-                return null;\n-            } else {\n-                @SuppressWarnings(\"unchecked\")\n-                T t = (T) next;\n-                return t;\n+        private boolean hasNextWhenTerminated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNTM0MQ==", "bodyText": "It just make it easy to use in hasNext():\nreturn hasNextWhenTerminated()\ninstead of\nhasNextWhenTerminated();\nreturn false;", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421835341", "createdAt": "2020-05-07T22:41:23Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingIterableProcessor.java", "diffHunk": "@@ -144,43 +119,37 @@ public boolean hasNext() {\n                 return true;\n             }\n \n-            final Object next;\n+            final boolean consumed;\n             try {\n-                next = buffer.take();\n+                consumed = buffer.consume(this);\n             } catch (InterruptedException e) {\n                 return throwException(e);\n             }\n-            return processHasNext(next);\n+            return terminal == null ? consumed : hasNextWhenTerminated();\n         }\n \n-        @Nullable\n-        private T processNext() {\n-            Object next = this.next;\n-            this.next = null;\n-            if (next == NULL_MASK) {\n-                return null;\n-            } else {\n-                @SuppressWarnings(\"unchecked\")\n-                T t = (T) next;\n-                return t;\n+        private boolean hasNextWhenTerminated() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1ODM3NQ=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzE0NzQyOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToxNjoyM1rOGR1xBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo0NTo0MlrOGSS4CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1OTg3Ng==", "bodyText": "isn't this racy? Two threads could pass the peek() above as the first item at the time of the call is not a terminal but after the first calls poll() the next would be one", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421359876", "createdAt": "2020-05-07T09:16:23Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+\n+final class DefaultBlockingProcessorBuffer<T> extends AbstractProcessorBuffer implements BlockingProcessorBuffer<T> {\n+    private final BlockingQueue<Object> signals;\n+\n+    DefaultBlockingProcessorBuffer(final int maxBuffer) {\n+        this.signals = new LinkedBlockingQueue<>(maxBuffer);\n+    }\n+\n+    @Override\n+    public void add(@Nullable final T item) throws InterruptedException {\n+        signals.put(maskNull(item));\n+    }\n+\n+    @Override\n+    public void terminate() throws InterruptedException {\n+        TerminalNotification terminal = complete();\n+        if (tryTerminate(terminal)) {\n+            signals.put(terminal);\n+        }\n+    }\n+\n+    @Override\n+    public void terminate(final Throwable cause) throws InterruptedException {\n+        TerminalNotification terminal = error(cause);\n+        if (tryTerminate(terminal)) {\n+            signals.put(terminal);\n+        }\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer) throws InterruptedException {\n+        Object signal = signals.take();\n+        return consumeIfTerminal(consumer, signal) || consumeNextItem(consumer, signal);\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer, final long waitFor, final TimeUnit waitForUnit)\n+            throws TimeoutException, InterruptedException {\n+        if (consumeIfTerminal(consumer, signals.peek())) {\n+            return true;\n+        }\n+\n+        Object nextItem = signals.poll(waitFor, waitForUnit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNjgwOQ==", "bodyText": "yikes, good catch. Lemme make this consistent with the above consume method.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421836809", "createdAt": "2020-05-07T22:45:42Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DefaultBlockingProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.internal.TerminalNotification;\n+\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.TerminalNotification.complete;\n+import static io.servicetalk.concurrent.internal.TerminalNotification.error;\n+\n+final class DefaultBlockingProcessorBuffer<T> extends AbstractProcessorBuffer implements BlockingProcessorBuffer<T> {\n+    private final BlockingQueue<Object> signals;\n+\n+    DefaultBlockingProcessorBuffer(final int maxBuffer) {\n+        this.signals = new LinkedBlockingQueue<>(maxBuffer);\n+    }\n+\n+    @Override\n+    public void add(@Nullable final T item) throws InterruptedException {\n+        signals.put(maskNull(item));\n+    }\n+\n+    @Override\n+    public void terminate() throws InterruptedException {\n+        TerminalNotification terminal = complete();\n+        if (tryTerminate(terminal)) {\n+            signals.put(terminal);\n+        }\n+    }\n+\n+    @Override\n+    public void terminate(final Throwable cause) throws InterruptedException {\n+        TerminalNotification terminal = error(cause);\n+        if (tryTerminate(terminal)) {\n+            signals.put(terminal);\n+        }\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer) throws InterruptedException {\n+        Object signal = signals.take();\n+        return consumeIfTerminal(consumer, signal) || consumeNextItem(consumer, signal);\n+    }\n+\n+    @Override\n+    public boolean consume(final BufferConsumer<T> consumer, final long waitFor, final TimeUnit waitForUnit)\n+            throws TimeoutException, InterruptedException {\n+        if (consumeIfTerminal(consumer, signals.peek())) {\n+            return true;\n+        }\n+\n+        Object nextItem = signals.poll(waitFor, waitForUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1OTg3Ng=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzE2OTA5OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToyMjoxN1rOGR1_Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToyMjoxN1rOGR1_Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2MzU1OQ==", "bodyText": "nit: use return to be consistent.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421363559", "createdAt": "2020-05-07T09:22:17Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean tryAcquire = true;\n+        while (tryAcquire && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                tryAcquire = !releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                final boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pending = Long.MIN_VALUE;\n+                } else if (!consumed) {\n+                    // we optimistically decremented pending, so increment back again.\n+                    pendingUpdater.accumulateAndGet(this, 1,\n+                            FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+                    return;\n+                }\n+            } else if (cPending < 0) {\n+                // cancelled or already terminated\n+                return;\n+            } else if (cPending == 0) {\n+                final boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsumeTerminal(target);\n+                } catch (Throwable t) {\n+                    // Assume that we did not deliver terminal to the consumer.\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+                if (consumed) {\n+                    pending = Long.MIN_VALUE;\n+                    return;\n+                }\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzE4MjA2OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToyNTozMVrOGR2HhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo0ODo0N1rOGSS8kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2NTYzNw==", "bodyText": "does this need to be volatile ?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421365637", "createdAt": "2020-05-07T09:25:31Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean tryAcquire = true;\n+        while (tryAcquire && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                tryAcquire = !releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                final boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pending = Long.MIN_VALUE;\n+                } else if (!consumed) {\n+                    // we optimistically decremented pending, so increment back again.\n+                    pendingUpdater.accumulateAndGet(this, 1,\n+                            FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+                    return;\n+                }\n+            } else if (cPending < 0) {\n+                // cancelled or already terminated\n+                return;\n+            } else if (cPending == 0) {\n+                final boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsumeTerminal(target);\n+                } catch (Throwable t) {\n+                    // Assume that we did not deliver terminal to the consumer.\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+                if (consumed) {\n+                    pending = Long.MIN_VALUE;\n+                    return;\n+                }\n+                break;\n+            }\n+        }\n+    }\n+\n+    private void earlyTerminateConsumerHoldingLock(final SubscriberBufferConsumer<T> consumer, final Throwable cause) {\n+        pending = Long.MIN_VALUE;\n+        try {\n+            delayedSubscription.cancel();\n+        } finally {\n+            consumer.consumeTerminal(cause);\n+        }\n+    }\n+\n+    private static final class SubscriberBufferConsumer<T> implements BufferConsumer<T> {\n+        private final Subscriber<? super T> subscriber;\n+        private boolean terminated;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzNzk2OA==", "bodyText": "nope, this class ins't used concurrently by different threads.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421837968", "createdAt": "2020-05-07T22:48:47Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean tryAcquire = true;\n+        while (tryAcquire && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                tryAcquire = !releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                final boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pending = Long.MIN_VALUE;\n+                } else if (!consumed) {\n+                    // we optimistically decremented pending, so increment back again.\n+                    pendingUpdater.accumulateAndGet(this, 1,\n+                            FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+                    return;\n+                }\n+            } else if (cPending < 0) {\n+                // cancelled or already terminated\n+                return;\n+            } else if (cPending == 0) {\n+                final boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsumeTerminal(target);\n+                } catch (Throwable t) {\n+                    // Assume that we did not deliver terminal to the consumer.\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+                if (consumed) {\n+                    pending = Long.MIN_VALUE;\n+                    return;\n+                }\n+                break;\n+            }\n+        }\n+    }\n+\n+    private void earlyTerminateConsumerHoldingLock(final SubscriberBufferConsumer<T> consumer, final Throwable cause) {\n+        pending = Long.MIN_VALUE;\n+        try {\n+            delayedSubscription.cancel();\n+        } finally {\n+            consumer.consumeTerminal(cause);\n+        }\n+    }\n+\n+    private static final class SubscriberBufferConsumer<T> implements BufferConsumer<T> {\n+        private final Subscriber<? super T> subscriber;\n+        private boolean terminated;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2NTYzNw=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTgzNjk4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTowMjozOFrOGSQKDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMTowMjozOFrOGSQKDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5MjI2OQ==", "bodyText": "if the consumer is gone, and we will no longer emit signals, can we drain the queue here to avoid queue growth and retention of objects? also consider triggering the drain from cancel() too.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421792269", "createdAt": "2020-05-07T21:02:38Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessor.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+import io.servicetalk.concurrent.PublisherSource.Subscription;\n+import io.servicetalk.concurrent.internal.ConcurrentSubscription;\n+import io.servicetalk.concurrent.internal.DelayedSubscription;\n+import io.servicetalk.concurrent.internal.DuplicateSubscribeException;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n+\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.releaseLock;\n+import static io.servicetalk.concurrent.internal.ConcurrentUtils.tryAcquireLock;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.handleExceptionFromOnSubscribe;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.isRequestNValid;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.newExceptionForInvalidRequestN;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnComplete;\n+import static io.servicetalk.concurrent.internal.SubscriberUtils.safeOnError;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.concurrent.atomic.AtomicIntegerFieldUpdater.newUpdater;\n+\n+final class PublisherProcessor<T> extends Publisher<T> implements Processor<T, T>, Subscription {\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final BufferConsumer CANCELLED = new NoopBufferConsumer();\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicReferenceFieldUpdater<PublisherProcessor, BufferConsumer> consumerUpdater =\n+            AtomicReferenceFieldUpdater.newUpdater(PublisherProcessor.class, BufferConsumer.class, \"consumer\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicIntegerFieldUpdater<PublisherProcessor> emittingUpdater =\n+            newUpdater(PublisherProcessor.class, \"emitting\");\n+    @SuppressWarnings(\"rawtypes\")\n+    private static final AtomicLongFieldUpdater<PublisherProcessor> pendingUpdater =\n+            AtomicLongFieldUpdater.newUpdater(PublisherProcessor.class, \"pending\");\n+\n+    private final DelayedSubscription delayedSubscription;\n+    private final PublisherProcessorBuffer<T> buffer;\n+\n+    @Nullable\n+    private Throwable fatalError; // visible via emitting\n+    @Nullable\n+    private volatile BufferConsumer<T> consumer;\n+    @SuppressWarnings(\"unused\")\n+    private volatile int emitting;\n+    private volatile long pending;\n+\n+    PublisherProcessor(final PublisherProcessorBuffer<T> buffer) {\n+        this.buffer = requireNonNull(buffer);\n+        delayedSubscription = new DelayedSubscription();\n+    }\n+\n+    @Override\n+    public void onSubscribe(final Subscription subscription) {\n+        delayedSubscription.delayedSubscription(ConcurrentSubscription.wrap(subscription));\n+    }\n+\n+    @Override\n+    public void onNext(@Nullable final T t) {\n+        buffer.add(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        buffer.terminate(t);\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        buffer.terminate();\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    protected void handleSubscribe(final Subscriber<? super T> subscriber) {\n+        final DelayedSubscription delayedSubscription = new DelayedSubscription();\n+        try {\n+            subscriber.onSubscribe(delayedSubscription);\n+        } catch (Throwable t) {\n+            handleExceptionFromOnSubscribe(subscriber, t);\n+            return;\n+        }\n+\n+        if (consumerUpdater.compareAndSet(this, null, new SubscriberBufferConsumer<>(subscriber))) {\n+            delayedSubscription.delayedSubscription(this);\n+            tryEmitSignals();\n+        } else {\n+            BufferConsumer<? super T> existingConsumer = this.consumer;\n+            assert existingConsumer != null;\n+            @SuppressWarnings(\"unchecked\")\n+            final Subscriber<? super T> existingSubscriber = existingConsumer instanceof SubscriberBufferConsumer ?\n+                    ((SubscriberBufferConsumer<T>) existingConsumer).subscriber : null;\n+            safeOnError(subscriber, new DuplicateSubscribeException(existingSubscriber, subscriber));\n+        }\n+    }\n+\n+    @Override\n+    public void subscribe(final Subscriber<? super T> subscriber) {\n+        subscribeInternal(subscriber);\n+    }\n+\n+    @Override\n+    public void request(final long n) {\n+        if (!isRequestNValid(n)) {\n+            fatalError = newExceptionForInvalidRequestN(n);\n+        } else {\n+            pendingUpdater.accumulateAndGet(this, n, FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+            delayedSubscription.request(n);\n+        }\n+        tryEmitSignals();\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (pendingUpdater.getAndSet(this, Long.MIN_VALUE) >= 0) {\n+            @SuppressWarnings(\"unchecked\")\n+            BufferConsumer<T> cancelled = CANCELLED;\n+            this.consumer = cancelled;\n+            delayedSubscription.cancel();\n+        }\n+    }\n+\n+    private void tryEmitSignals() {\n+        boolean tryAcquire = true;\n+        while (tryAcquire && tryAcquireLock(emittingUpdater, this)) {\n+            final BufferConsumer<T> consumer = this.consumer;\n+            try {\n+                if (consumer instanceof SubscriberBufferConsumer) {\n+                    SubscriberBufferConsumer<T> target = (SubscriberBufferConsumer<T>) consumer;\n+                    if (fatalError != null) {\n+                        earlyTerminateConsumerHoldingLock(target, fatalError);\n+                        return;\n+                    } else {\n+                        emitSignalsHoldingLock(target);\n+                    }\n+                }\n+            } finally {\n+                tryAcquire = !releaseLock(emittingUpdater, this);\n+            }\n+        }\n+    }\n+\n+    private void emitSignalsHoldingLock(final SubscriberBufferConsumer<T> target) {\n+        for (;;) {\n+            final long cPending = pending;\n+            if (cPending > 0 && pendingUpdater.compareAndSet(this, cPending, cPending - 1)) {\n+                final boolean consumed;\n+                try {\n+                    consumed = buffer.tryConsume(target);\n+                } catch (Throwable t) {\n+                    earlyTerminateConsumerHoldingLock(target, t);\n+                    return;\n+                }\n+\n+                if (target.isTerminated()) {\n+                    pending = Long.MIN_VALUE;\n+                } else if (!consumed) {\n+                    // we optimistically decremented pending, so increment back again.\n+                    pendingUpdater.accumulateAndGet(this, 1,\n+                            FlowControlUtils::addWithOverflowProtectionIfNotNegative);\n+                    return;\n+                }\n+            } else if (cPending < 0) {\n+                // cancelled or already terminated\n+                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTg3OTc5OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BufferConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxNToxOVrOGSQjfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1Njo1M1rOGSxxnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5ODc4MA==", "bodyText": "BufferConsumer is a general name that doesn't provide much context as to its intended usage. Consider:\n\nrenaming to PublisherProcessorConsumer; OR\nrename to Consumer and move as an inner interface to PublisherProcessorBuffer", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421798780", "createdAt": "2020-05-07T21:15:19Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BufferConsumer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Consumer of items from a buffer.\n+ *\n+ * @param <T>  Type of items {@link #consumeItem(Object) consumed} by this buffer.\n+ */\n+public interface BufferConsumer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MzA2OA==", "bodyText": "Note that this interface is also used for the blocking variant. Let me prefix the class with Processor to make sure the connection to processors is evident.", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r422343068", "createdAt": "2020-05-08T19:56:53Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/BufferConsumer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * Consumer of items from a buffer.\n+ *\n+ * @param <T>  Type of items {@link #consumeItem(Object) consumed} by this buffer.\n+ */\n+public interface BufferConsumer<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc5ODc4MA=="}, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTg5Mjk4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxOToxMFrOGSQrRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMToxOToxMFrOGSQrRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgwMDc3NQ==", "bodyText": "the \"buffer\" terminology overlaps with our buffer.api package. What about PublisherProcessorSignal[Collection | Collector | Holder] (or something similar)?", "url": "https://github.com/apple/servicetalk/pull/1039#discussion_r421800775", "createdAt": "2020-05-07T21:19:10Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/PublisherProcessorBuffer.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.api;\n+\n+import io.servicetalk.concurrent.PublisherSource.Processor;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A buffer to store items for a {@link Processor}.\n+ *\n+ * @param <T>  Type of items stored in this buffer.\n+ */\n+public interface PublisherProcessorBuffer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a58cf3e762140a0614304c030db189cfbc95d6a4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2731, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}