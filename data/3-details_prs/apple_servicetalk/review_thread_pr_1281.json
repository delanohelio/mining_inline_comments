{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNDI2OTQ1", "number": 1281, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzoxNDowNlrOFGcP8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1MDoxNFrOFGc4lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjk4NjA4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/QueueDynamicCompositeCancellable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzoxNDowNlrOIHdVAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1NjowOFrOIHeXuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5MTQ1OQ==", "bodyText": "Queue size is int users won't be able to add more elements, why do we need long here?", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544691459", "createdAt": "2020-12-16T23:14:06Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/QueueDynamicCompositeCancellable.java", "diffHunk": "@@ -16,63 +16,67 @@\n package io.servicetalk.concurrent.api;\n \n import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n \n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n \n+import static io.servicetalk.concurrent.internal.FlowControlUtils.tryIncrementIfNotNegative;\n import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n \n final class QueueDynamicCompositeCancellable implements DynamicCompositeCancellable {\n-    private static final AtomicIntegerFieldUpdater<QueueDynamicCompositeCancellable> cancelledUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(QueueDynamicCompositeCancellable.class, \"cancelled\");\n+    private static final AtomicLongFieldUpdater<QueueDynamicCompositeCancellable> sizeUpdater =\n+            newUpdater(QueueDynamicCompositeCancellable.class, \"size\");\n     @SuppressWarnings(\"unused\")\n-    private volatile int cancelled;\n-\n+    private volatile long size;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca67bc36b13fb4e5cc5e8e5abe910ab89a83940a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNjAwNA==", "bodyText": "size() is int, however the implementations which are not array backed could conceivably hold more than Integer.MAX_VALUE elements. These implementations just cap the value of size() to Integer.MAX_VALUE. I refactored so instead of tracking size I am now just using an atomic operation on the collection.", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544706004", "createdAt": "2020-12-16T23:49:39Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/QueueDynamicCompositeCancellable.java", "diffHunk": "@@ -16,63 +16,67 @@\n package io.servicetalk.concurrent.api;\n \n import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n \n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n \n+import static io.servicetalk.concurrent.internal.FlowControlUtils.tryIncrementIfNotNegative;\n import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n \n final class QueueDynamicCompositeCancellable implements DynamicCompositeCancellable {\n-    private static final AtomicIntegerFieldUpdater<QueueDynamicCompositeCancellable> cancelledUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(QueueDynamicCompositeCancellable.class, \"cancelled\");\n+    private static final AtomicLongFieldUpdater<QueueDynamicCompositeCancellable> sizeUpdater =\n+            newUpdater(QueueDynamicCompositeCancellable.class, \"size\");\n     @SuppressWarnings(\"unused\")\n-    private volatile int cancelled;\n-\n+    private volatile long size;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5MTQ1OQ=="}, "originalCommit": {"oid": "ca67bc36b13fb4e5cc5e8e5abe910ab89a83940a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwODUzNw==", "bodyText": "\ud83e\udd2f looked at ConcurrentLinkedQueue impl, TIL", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544708537", "createdAt": "2020-12-16T23:56:08Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/QueueDynamicCompositeCancellable.java", "diffHunk": "@@ -16,63 +16,67 @@\n package io.servicetalk.concurrent.api;\n \n import io.servicetalk.concurrent.Cancellable;\n+import io.servicetalk.concurrent.internal.FlowControlUtils;\n \n import java.util.Queue;\n import java.util.concurrent.ConcurrentLinkedQueue;\n-import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n \n+import static io.servicetalk.concurrent.internal.FlowControlUtils.tryIncrementIfNotNegative;\n import static io.servicetalk.concurrent.internal.ThrowableUtils.catchUnexpected;\n import static io.servicetalk.utils.internal.PlatformDependent.throwException;\n+import static java.util.concurrent.atomic.AtomicLongFieldUpdater.newUpdater;\n \n final class QueueDynamicCompositeCancellable implements DynamicCompositeCancellable {\n-    private static final AtomicIntegerFieldUpdater<QueueDynamicCompositeCancellable> cancelledUpdater =\n-            AtomicIntegerFieldUpdater.newUpdater(QueueDynamicCompositeCancellable.class, \"cancelled\");\n+    private static final AtomicLongFieldUpdater<QueueDynamicCompositeCancellable> sizeUpdater =\n+            newUpdater(QueueDynamicCompositeCancellable.class, \"size\");\n     @SuppressWarnings(\"unused\")\n-    private volatile int cancelled;\n-\n+    private volatile long size;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDY5MTQ1OQ=="}, "originalCommit": {"oid": "ca67bc36b13fb4e5cc5e8e5abe910ab89a83940a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMzA5MDEzOnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DynamicCompositeCancellable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1MDoxNFrOIHeOpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1MDoxNFrOIHeOpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNjIxNA==", "bodyText": "note this interface is internal, but the semantics around it didn't really make sense for set so I clarified here and added a unit test to verify.", "url": "https://github.com/apple/servicetalk/pull/1281#discussion_r544706214", "createdAt": "2020-12-16T23:50:14Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-concurrent-api/src/main/java/io/servicetalk/concurrent/api/DynamicCompositeCancellable.java", "diffHunk": "@@ -34,8 +34,9 @@\n      * Add a {@link Cancellable} that will be cancelled when this object's {@link #cancel()} method is called,\n      * or be cancelled immediately if this object's {@link #cancel()} method has already been called.\n      * @param toAdd The {@link Cancellable} to add.\n-     * @return {@code true} if the {@code toAdd} was added, and {@code false} if {@code toAdd} was not added and\n-     * {@link Cancellable#cancel()} was called on {@code toAdd}.\n+     * @return {@code true} if the {@code toAdd} was added, and {@code false} if {@code toAdd} was not added because\n+     * it already exists. If {@code false} then {@link Cancellable#cancel()} will be called unless the reason is this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23faf210949acbbd15181b8de5eebd311890050b"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2489, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}