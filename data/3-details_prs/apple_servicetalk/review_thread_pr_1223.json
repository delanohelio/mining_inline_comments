{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNjEzNjAy", "number": 1223, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMDoyNDo1NlrOE7Tafg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyOTowNVrOFBBYbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjE5NTE4OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/CancelImmediatelySubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMDoyNDo1NlrOH23utQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwMDoyNDo1NlrOH23utQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI5ODIyOQ==", "bodyText": "Missed javadoc", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r527298229", "createdAt": "2020-11-20T00:24:56Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/CancelImmediatelySubscriber.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.internal;\n+\n+import io.servicetalk.concurrent.PublisherSource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CancelImmediatelySubscriber implements PublisherSource.Subscriber<Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ebf5a25e56f93f18735dac9a3f9ef24a8bb198"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTU1Mjk2OnYy", "diffSide": "RIGHT", "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/CancelImmediatelySubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzo0Mzo0MlrOH6j5Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzo0Mzo0MlrOH6j5Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2NzUxNQ==", "bodyText": "nit: \"response payload\" irrelevant here.", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r531167515", "createdAt": "2020-11-26T17:43:42Z", "author": {"login": "tkountis"}, "path": "servicetalk-concurrent-internal/src/main/java/io/servicetalk/concurrent/internal/CancelImmediatelySubscriber.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.concurrent.internal;\n+\n+import io.servicetalk.concurrent.PublisherSource;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class CancelImmediatelySubscriber implements PublisherSource.Subscriber<Object> {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(CancelImmediatelySubscriber.class);\n+    public static final CancelImmediatelySubscriber INSTANCE = new CancelImmediatelySubscriber();\n+\n+    private CancelImmediatelySubscriber() {\n+        // Singleton\n+    }\n+\n+    @Override\n+    public void onSubscribe(final PublisherSource.Subscription s) {\n+        // Cancel immediately so that the connection can handle this as required.\n+        s.cancel();\n+    }\n+\n+    @Override\n+    public void onNext(final Object obj) {\n+        // Can not be here since we never request.\n+    }\n+\n+    @Override\n+    public void onError(final Throwable t) {\n+        LOGGER.debug(\"Ignoring error from response payload, since subscriber has already cancelled.\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUwNjcyOnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDowNjoyMlrOH_gOaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1NjoyNlrOIAwglw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MDMxMg==", "bodyText": "SrvAddressRemovedException, ClosedServiceDiscovererException, and SrvAggregateList should have serialVersionUID", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536350312", "createdAt": "2020-12-04T20:06:22Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -806,4 +912,12 @@ public int size() {\n             super(message);\n         }\n     }\n+\n+    private static final class SrvAddressRemovedException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 604}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2NTY4Nw==", "bodyText": "done", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r537665687", "createdAt": "2020-12-07T16:56:26Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -806,4 +912,12 @@ public int size() {\n             super(message);\n         }\n     }\n+\n+    private static final class SrvAddressRemovedException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MDMxMg=="}, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 604}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUxODMzOnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDowOTo0NFrOH_gVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjo1OTo1OVrOIAwsGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MjAzMA==", "bodyText": "Consider adding a message", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536352030", "createdAt": "2020-12-04T20:09:44Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -776,6 +805,83 @@ private static ResolvedAddressTypes toNettyType(final DnsResolverAddressTypes dn\n         return hostname -> new ServiceTalkToNettyDnsServerAddressStream(provider.nameServerAddressStream(hostname));\n     }\n \n+    private static final class SrvInactiveCombinerOperator implements\n+                            PublisherOperator<Collection<ServiceDiscovererEvent<InetSocketAddress>>,\n+                                              Collection<ServiceDiscovererEvent<InetSocketAddress>>> {\n+        static final SrvInactiveCombinerOperator EMIT = new SrvInactiveCombinerOperator(true);\n+        static final SrvInactiveCombinerOperator NO_EMIT = new SrvInactiveCombinerOperator(false);\n+        private final boolean emitAggregatedEvents;\n+\n+        private SrvInactiveCombinerOperator(boolean emitAggregatedEvents) {\n+            this.emitAggregatedEvents = emitAggregatedEvents;\n+        }\n+\n+        @Override\n+        public Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> apply(\n+                final Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> subscriber) {\n+            return new Subscriber<Collection<ServiceDiscovererEvent<InetSocketAddress>>>() {\n+                @Nullable\n+                private List<ServiceDiscovererEvent<InetSocketAddress>> aggregatedEvents;\n+                @Nullable\n+                private Subscription subscription;\n+                @Override\n+                public void onSubscribe(final Subscription s) {\n+                    this.subscription = s;\n+                    subscriber.onSubscribe(s);\n+                }\n+\n+                @Override\n+                public void onNext(@Nullable final Collection<ServiceDiscovererEvent<InetSocketAddress>> evts) {\n+                    assert subscription != null;\n+                    if (aggregatedEvents != null) {\n+                        if (evts != null && emitAggregatedEvents) {\n+                            aggregatedEvents.addAll(evts);\n+                        }\n+                        subscription.request(1);\n+                    } else if (evts instanceof SrvAggregateList) {\n+                        aggregatedEvents = (List<ServiceDiscovererEvent<InetSocketAddress>>) evts;\n+                        subscription.request(1);\n+                    } else {\n+                        subscriber.onNext(evts);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(final Throwable t) {\n+                    try {\n+                        if (aggregatedEvents != null && emitAggregatedEvents) {\n+                            // requestN is OK. We previously didn't deliver the item which gave us inactiveEvents.\n+                            subscriber.onNext(aggregatedEvents);\n+                        }\n+                    } finally {\n+                        subscriber.onError(t);\n+                    }\n+                }\n+\n+                @Override\n+                public void onComplete() {\n+                    subscriber.onComplete();\n+                }\n+            };\n+        }\n+    }\n+\n+    private static final class SrvInactiveEvent<T, A> implements ServiceDiscovererEvent<T> {\n+        private final List<ServiceDiscovererEvent<A>> aggregatedEvents = new SrvAggregateList<>();\n+        @Override\n+        public T address() {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 584}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY2ODYzMg==", "bodyText": "done", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r537668632", "createdAt": "2020-12-07T16:59:59Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -776,6 +805,83 @@ private static ResolvedAddressTypes toNettyType(final DnsResolverAddressTypes dn\n         return hostname -> new ServiceTalkToNettyDnsServerAddressStream(provider.nameServerAddressStream(hostname));\n     }\n \n+    private static final class SrvInactiveCombinerOperator implements\n+                            PublisherOperator<Collection<ServiceDiscovererEvent<InetSocketAddress>>,\n+                                              Collection<ServiceDiscovererEvent<InetSocketAddress>>> {\n+        static final SrvInactiveCombinerOperator EMIT = new SrvInactiveCombinerOperator(true);\n+        static final SrvInactiveCombinerOperator NO_EMIT = new SrvInactiveCombinerOperator(false);\n+        private final boolean emitAggregatedEvents;\n+\n+        private SrvInactiveCombinerOperator(boolean emitAggregatedEvents) {\n+            this.emitAggregatedEvents = emitAggregatedEvents;\n+        }\n+\n+        @Override\n+        public Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> apply(\n+                final Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> subscriber) {\n+            return new Subscriber<Collection<ServiceDiscovererEvent<InetSocketAddress>>>() {\n+                @Nullable\n+                private List<ServiceDiscovererEvent<InetSocketAddress>> aggregatedEvents;\n+                @Nullable\n+                private Subscription subscription;\n+                @Override\n+                public void onSubscribe(final Subscription s) {\n+                    this.subscription = s;\n+                    subscriber.onSubscribe(s);\n+                }\n+\n+                @Override\n+                public void onNext(@Nullable final Collection<ServiceDiscovererEvent<InetSocketAddress>> evts) {\n+                    assert subscription != null;\n+                    if (aggregatedEvents != null) {\n+                        if (evts != null && emitAggregatedEvents) {\n+                            aggregatedEvents.addAll(evts);\n+                        }\n+                        subscription.request(1);\n+                    } else if (evts instanceof SrvAggregateList) {\n+                        aggregatedEvents = (List<ServiceDiscovererEvent<InetSocketAddress>>) evts;\n+                        subscription.request(1);\n+                    } else {\n+                        subscriber.onNext(evts);\n+                    }\n+                }\n+\n+                @Override\n+                public void onError(final Throwable t) {\n+                    try {\n+                        if (aggregatedEvents != null && emitAggregatedEvents) {\n+                            // requestN is OK. We previously didn't deliver the item which gave us inactiveEvents.\n+                            subscriber.onNext(aggregatedEvents);\n+                        }\n+                    } finally {\n+                        subscriber.onError(t);\n+                    }\n+                }\n+\n+                @Override\n+                public void onComplete() {\n+                    subscriber.onComplete();\n+                }\n+            };\n+        }\n+    }\n+\n+    private static final class SrvInactiveEvent<T, A> implements ServiceDiscovererEvent<T> {\n+        private final List<ServiceDiscovererEvent<A>> aggregatedEvents = new SrvAggregateList<>();\n+        @Override\n+        public T address() {\n+            throw new UnsupportedOperationException();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1MjAzMA=="}, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 584}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTUzMjQ5OnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxMzo0OFrOH_gdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOToxMDozM1rOIA2MVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NDA4NA==", "bodyText": "Should we try-catch all invocations of Subscriber methods?", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536354084", "createdAt": "2020-12-04T20:13:48Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -776,6 +805,83 @@ private static ResolvedAddressTypes toNettyType(final DnsResolverAddressTypes dn\n         return hostname -> new ServiceTalkToNettyDnsServerAddressStream(provider.nameServerAddressStream(hostname));\n     }\n \n+    private static final class SrvInactiveCombinerOperator implements\n+                            PublisherOperator<Collection<ServiceDiscovererEvent<InetSocketAddress>>,\n+                                              Collection<ServiceDiscovererEvent<InetSocketAddress>>> {\n+        static final SrvInactiveCombinerOperator EMIT = new SrvInactiveCombinerOperator(true);\n+        static final SrvInactiveCombinerOperator NO_EMIT = new SrvInactiveCombinerOperator(false);\n+        private final boolean emitAggregatedEvents;\n+\n+        private SrvInactiveCombinerOperator(boolean emitAggregatedEvents) {\n+            this.emitAggregatedEvents = emitAggregatedEvents;\n+        }\n+\n+        @Override\n+        public Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> apply(\n+                final Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> subscriber) {\n+            return new Subscriber<Collection<ServiceDiscovererEvent<InetSocketAddress>>>() {\n+                @Nullable\n+                private List<ServiceDiscovererEvent<InetSocketAddress>> aggregatedEvents;\n+                @Nullable\n+                private Subscription subscription;\n+                @Override\n+                public void onSubscribe(final Subscription s) {\n+                    this.subscription = s;\n+                    subscriber.onSubscribe(s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 541}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc1ODgwNQ==", "bodyText": "no this isn't necessary/desirable, it is the responsibility of the upstream source to catch exceptions and propagate an onError. propagating the exception is necessary so upstream operator and the source can cleanup appropriately.", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r537758805", "createdAt": "2020-12-07T19:10:33Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -776,6 +805,83 @@ private static ResolvedAddressTypes toNettyType(final DnsResolverAddressTypes dn\n         return hostname -> new ServiceTalkToNettyDnsServerAddressStream(provider.nameServerAddressStream(hostname));\n     }\n \n+    private static final class SrvInactiveCombinerOperator implements\n+                            PublisherOperator<Collection<ServiceDiscovererEvent<InetSocketAddress>>,\n+                                              Collection<ServiceDiscovererEvent<InetSocketAddress>>> {\n+        static final SrvInactiveCombinerOperator EMIT = new SrvInactiveCombinerOperator(true);\n+        static final SrvInactiveCombinerOperator NO_EMIT = new SrvInactiveCombinerOperator(false);\n+        private final boolean emitAggregatedEvents;\n+\n+        private SrvInactiveCombinerOperator(boolean emitAggregatedEvents) {\n+            this.emitAggregatedEvents = emitAggregatedEvents;\n+        }\n+\n+        @Override\n+        public Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> apply(\n+                final Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> subscriber) {\n+            return new Subscriber<Collection<ServiceDiscovererEvent<InetSocketAddress>>>() {\n+                @Nullable\n+                private List<ServiceDiscovererEvent<InetSocketAddress>> aggregatedEvents;\n+                @Nullable\n+                private Subscription subscription;\n+                @Override\n+                public void onSubscribe(final Subscription s) {\n+                    this.subscription = s;\n+                    subscriber.onSubscribe(s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NDA4NA=="}, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 541}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTU0MDgzOnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDoxNjoyMFrOH_gh8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOToxMzowOFrOIA2Ssg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NTMxMw==", "bodyText": "Is this expected path?", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536355313", "createdAt": "2020-12-04T20:16:20Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -776,6 +805,83 @@ private static ResolvedAddressTypes toNettyType(final DnsResolverAddressTypes dn\n         return hostname -> new ServiceTalkToNettyDnsServerAddressStream(provider.nameServerAddressStream(hostname));\n     }\n \n+    private static final class SrvInactiveCombinerOperator implements\n+                            PublisherOperator<Collection<ServiceDiscovererEvent<InetSocketAddress>>,\n+                                              Collection<ServiceDiscovererEvent<InetSocketAddress>>> {\n+        static final SrvInactiveCombinerOperator EMIT = new SrvInactiveCombinerOperator(true);\n+        static final SrvInactiveCombinerOperator NO_EMIT = new SrvInactiveCombinerOperator(false);\n+        private final boolean emitAggregatedEvents;\n+\n+        private SrvInactiveCombinerOperator(boolean emitAggregatedEvents) {\n+            this.emitAggregatedEvents = emitAggregatedEvents;\n+        }\n+\n+        @Override\n+        public Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> apply(\n+                final Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> subscriber) {\n+            return new Subscriber<Collection<ServiceDiscovererEvent<InetSocketAddress>>>() {\n+                @Nullable\n+                private List<ServiceDiscovererEvent<InetSocketAddress>> aggregatedEvents;\n+                @Nullable\n+                private Subscription subscription;\n+                @Override\n+                public void onSubscribe(final Subscription s) {\n+                    this.subscription = s;\n+                    subscriber.onSubscribe(s);\n+                }\n+\n+                @Override\n+                public void onNext(@Nullable final Collection<ServiceDiscovererEvent<InetSocketAddress>> evts) {\n+                    assert subscription != null;\n+                    if (aggregatedEvents != null) {\n+                        if (evts != null && emitAggregatedEvents) {\n+                            aggregatedEvents.addAll(evts);\n+                        }\n+                        subscription.request(1);\n+                    } else if (evts instanceof SrvAggregateList) {\n+                        aggregatedEvents = (List<ServiceDiscovererEvent<InetSocketAddress>>) evts;\n+                        subscription.request(1);\n+                    } else {\n+                        subscriber.onNext(evts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 556}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2MDQzNA==", "bodyText": "yes, I'll add a comment. if there hasn't been an SrvAggregateList event, we should just pass through.", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r537760434", "createdAt": "2020-12-07T19:13:08Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -776,6 +805,83 @@ private static ResolvedAddressTypes toNettyType(final DnsResolverAddressTypes dn\n         return hostname -> new ServiceTalkToNettyDnsServerAddressStream(provider.nameServerAddressStream(hostname));\n     }\n \n+    private static final class SrvInactiveCombinerOperator implements\n+                            PublisherOperator<Collection<ServiceDiscovererEvent<InetSocketAddress>>,\n+                                              Collection<ServiceDiscovererEvent<InetSocketAddress>>> {\n+        static final SrvInactiveCombinerOperator EMIT = new SrvInactiveCombinerOperator(true);\n+        static final SrvInactiveCombinerOperator NO_EMIT = new SrvInactiveCombinerOperator(false);\n+        private final boolean emitAggregatedEvents;\n+\n+        private SrvInactiveCombinerOperator(boolean emitAggregatedEvents) {\n+            this.emitAggregatedEvents = emitAggregatedEvents;\n+        }\n+\n+        @Override\n+        public Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> apply(\n+                final Subscriber<? super Collection<ServiceDiscovererEvent<InetSocketAddress>>> subscriber) {\n+            return new Subscriber<Collection<ServiceDiscovererEvent<InetSocketAddress>>>() {\n+                @Nullable\n+                private List<ServiceDiscovererEvent<InetSocketAddress>> aggregatedEvents;\n+                @Nullable\n+                private Subscription subscription;\n+                @Override\n+                public void onSubscribe(final Subscription s) {\n+                    this.subscription = s;\n+                    subscriber.onSubscribe(s);\n+                }\n+\n+                @Override\n+                public void onNext(@Nullable final Collection<ServiceDiscovererEvent<InetSocketAddress>> evts) {\n+                    assert subscription != null;\n+                    if (aggregatedEvents != null) {\n+                        if (evts != null && emitAggregatedEvents) {\n+                            aggregatedEvents.addAll(evts);\n+                        }\n+                        subscription.request(1);\n+                    } else if (evts instanceof SrvAggregateList) {\n+                        aggregatedEvents = (List<ServiceDiscovererEvent<InetSocketAddress>>) evts;\n+                        subscription.request(1);\n+                    } else {\n+                        subscriber.onNext(evts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM1NTMxMw=="}, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 556}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTU4ODY3OnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozMDowM1rOH_g8tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDozMDowM1rOH_g8tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2MjE2NQ==", "bodyText": "srvEvent.address().toString() will include port number, but prevAPublisher.name won't. Consider making the msg consistent", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536362165", "createdAt": "2020-12-04T20:30:03Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -174,57 +206,63 @@ private DnsDiscoveryObserver newDiscoveryObserver(final String address) {\n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetAddress>>> dnsQuery(final String address) {\n         requireNonNull(address);\n-        return defer(() -> new ARecordPublisher(true, address, newDiscoveryObserver(address)));\n+        return defer(() -> {\n+            ARecordPublisher pub = new ARecordPublisher(address, newDiscoveryObserver(address));\n+            return inactiveEventsOnError ? recoverWithInactiveEvents(pub, false) : pub;\n+        });\n     }\n \n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetSocketAddress>>> dnsSrvQuery(final String serviceName) {\n         requireNonNull(serviceName);\n         return defer(() -> {\n-            // State per subscribe requires defer so each subscribe gets independent state.\n-            final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);\n-            final DnsDiscoveryObserver discoveryObserver = newDiscoveryObserver(serviceName);\n-            return new SrvRecordPublisher(serviceName, discoveryObserver).flatMapConcatIterable(identity())\n-                    .flatMapMergeSingle(srvEvent -> {\n+        // State per subscribe requires defer so each subscribe gets independent state.\n+        final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);\n+        final Map<InetSocketAddress, Integer> availableAddresses = srvFilterDuplicateEvents ?\n+                new HashMap<>(8) : emptyMap();\n+        final DnsDiscoveryObserver discoveryObserver = newDiscoveryObserver(serviceName);\n+        // We \"recover\" unconditionally to force inactive events to propagate to all mapped A* publishers to cancel\n+        // any pending scheduled tasks. SrvInactiveCombinerOperator is used to filter the aggregated collection of\n+        // inactive events if necessary.\n+        return recoverWithInactiveEvents(new SrvRecordPublisher(serviceName, discoveryObserver), true)\n+                .flatMapConcatIterable(identity())\n+                .flatMapMerge(srvEvent -> {\n                 assertInEventloop();\n                 if (srvEvent.isAvailable()) {\n-                    final ARecordPublisher aPublisher =\n-                            new ARecordPublisher(false, srvEvent.address().hostName(), discoveryObserver);\n-                    final ARecordPublisher prevAPublisher = aRecordMap.putIfAbsent(srvEvent.address(), aPublisher);\n-                    if (prevAPublisher != null) {\n-                        return failed(new IllegalStateException(\"Only 1 A* record per SRV record is supported. \" +\n-                                srvEvent.address() + \" corresponding to SRV name \" + serviceName +\n-                                \" had a pre-existing A* record:\" + prevAPublisher.name +\n-                                \" when new A* record arrived: \" + aPublisher.name));\n-                    }\n+                    return defer(() -> {\n+                        final ARecordPublisher aPublisher =\n+                                new ARecordPublisher(srvEvent.address().hostName(), discoveryObserver);\n+                        final ARecordPublisher prevAPublisher = aRecordMap.putIfAbsent(srvEvent.address(), aPublisher);\n+                        if (prevAPublisher != null) {\n+                            return newDuplicateSrv(serviceName, srvEvent.address().toString(), prevAPublisher.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTYyMjk4OnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0MDo1OFrOH_hQjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMDo0MDo1OFrOH_hQjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM2NzI0NA==", "bodyText": "For the purpose of A/AAAA record resolution the port number doesn't matter. Can we use only a hostname as a key?", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536367244", "createdAt": "2020-12-04T20:40:58Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -174,57 +206,63 @@ private DnsDiscoveryObserver newDiscoveryObserver(final String address) {\n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetAddress>>> dnsQuery(final String address) {\n         requireNonNull(address);\n-        return defer(() -> new ARecordPublisher(true, address, newDiscoveryObserver(address)));\n+        return defer(() -> {\n+            ARecordPublisher pub = new ARecordPublisher(address, newDiscoveryObserver(address));\n+            return inactiveEventsOnError ? recoverWithInactiveEvents(pub, false) : pub;\n+        });\n     }\n \n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetSocketAddress>>> dnsSrvQuery(final String serviceName) {\n         requireNonNull(serviceName);\n         return defer(() -> {\n-            // State per subscribe requires defer so each subscribe gets independent state.\n-            final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);\n-            final DnsDiscoveryObserver discoveryObserver = newDiscoveryObserver(serviceName);\n-            return new SrvRecordPublisher(serviceName, discoveryObserver).flatMapConcatIterable(identity())\n-                    .flatMapMergeSingle(srvEvent -> {\n+        // State per subscribe requires defer so each subscribe gets independent state.\n+        final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTg5NDM5OnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTo1Nzo1MVrOH_juSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1MzoxOFrOIA3-YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzYyNA==", "bodyText": "For A/AAAA records we do not retry inside DNS SD, we apply DNS retries at the client level, as part of AutoRetryStrategy. Can we be consistent here?", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536407624", "createdAt": "2020-12-04T21:57:51Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -174,57 +206,63 @@ private DnsDiscoveryObserver newDiscoveryObserver(final String address) {\n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetAddress>>> dnsQuery(final String address) {\n         requireNonNull(address);\n-        return defer(() -> new ARecordPublisher(true, address, newDiscoveryObserver(address)));\n+        return defer(() -> {\n+            ARecordPublisher pub = new ARecordPublisher(address, newDiscoveryObserver(address));\n+            return inactiveEventsOnError ? recoverWithInactiveEvents(pub, false) : pub;\n+        });\n     }\n \n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetSocketAddress>>> dnsSrvQuery(final String serviceName) {\n         requireNonNull(serviceName);\n         return defer(() -> {\n-            // State per subscribe requires defer so each subscribe gets independent state.\n-            final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);\n-            final DnsDiscoveryObserver discoveryObserver = newDiscoveryObserver(serviceName);\n-            return new SrvRecordPublisher(serviceName, discoveryObserver).flatMapConcatIterable(identity())\n-                    .flatMapMergeSingle(srvEvent -> {\n+        // State per subscribe requires defer so each subscribe gets independent state.\n+        final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);\n+        final Map<InetSocketAddress, Integer> availableAddresses = srvFilterDuplicateEvents ?\n+                new HashMap<>(8) : emptyMap();\n+        final DnsDiscoveryObserver discoveryObserver = newDiscoveryObserver(serviceName);\n+        // We \"recover\" unconditionally to force inactive events to propagate to all mapped A* publishers to cancel\n+        // any pending scheduled tasks. SrvInactiveCombinerOperator is used to filter the aggregated collection of\n+        // inactive events if necessary.\n+        return recoverWithInactiveEvents(new SrvRecordPublisher(serviceName, discoveryObserver), true)\n+                .flatMapConcatIterable(identity())\n+                .flatMapMerge(srvEvent -> {\n                 assertInEventloop();\n                 if (srvEvent.isAvailable()) {\n-                    final ARecordPublisher aPublisher =\n-                            new ARecordPublisher(false, srvEvent.address().hostName(), discoveryObserver);\n-                    final ARecordPublisher prevAPublisher = aRecordMap.putIfAbsent(srvEvent.address(), aPublisher);\n-                    if (prevAPublisher != null) {\n-                        return failed(new IllegalStateException(\"Only 1 A* record per SRV record is supported. \" +\n-                                srvEvent.address() + \" corresponding to SRV name \" + serviceName +\n-                                \" had a pre-existing A* record:\" + prevAPublisher.name +\n-                                \" when new A* record arrived: \" + aPublisher.name));\n-                    }\n+                    return defer(() -> {\n+                        final ARecordPublisher aPublisher =\n+                                new ARecordPublisher(srvEvent.address().hostName(), discoveryObserver);\n+                        final ARecordPublisher prevAPublisher = aRecordMap.putIfAbsent(srvEvent.address(), aPublisher);\n+                        if (prevAPublisher != null) {\n+                            return newDuplicateSrv(serviceName, srvEvent.address().toString(), prevAPublisher.name);\n+                        }\n \n-                    return srvARecordPubToSingle(aPublisher, srvEvent, serviceName);\n+                        Publisher<? extends Collection<ServiceDiscovererEvent<InetAddress>>> returnPub =\n+                                recoverWithInactiveEvents(aPublisher, false);\n+                        return srvFilterDuplicateEvents ?\n+                                srvFilterDups(returnPub, availableAddresses, srvEvent.address().port()) :\n+                                returnPub.map(events -> mapEventList(events, inetAddress ->\n+                                        new InetSocketAddress(inetAddress, srvEvent.address().port())));\n+                    }).retryWhen((i, cause) -> {\n+                        assertInEventloop();\n+                        // If this error is because the SRV entry was detected as inactive, then propagate the error and\n+                        // don't retry. Otherwise this is a resolution exception (e.g. UnknownHostException), and retry.\n+                        return cause == SrvAddressRemovedException.DNS_SRV_ADDR_REMOVED ||\n+                                aRecordMap.remove(srvEvent.address()) == null ?\n+                                Completable.failed(cause) : srvHostNameRepeater.apply(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4ODAwMQ==", "bodyText": "There are two levels of lookups. This code propagates failures at the first level (e.g. the DNS server returns nxdomain for the SRV query, netty times it out, etc.). However this code retries on the A record Publishers. if a failure on a single A record publisher is propagated this may lead to not processing complete results, and kill the entire SRV lookup (impacting other A records that are resolving fine) for scenario that maybe temporary (e.g. spurious errors due to DNS reconfiguration and distributed caches, A record TTL is lower than SRV record TTL and gets invalidated first, etc.). Consider the below example, if the error is processed first we wouldn't process subsequent results that maybe successful.\n// SRV records\nSRV (hostname1.com, 9999)\nSRV (hostname2.com, 9999)\nSRV (hostname3.com, 9999)\n\n// DNS records\n<nxdomain/timeout for hostname2>\nA (hostname3.com, 1.2.3.4)\nA (hostname1.com, 1.2.3.5)", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r537788001", "createdAt": "2020-12-07T19:53:18Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/DefaultDnsClient.java", "diffHunk": "@@ -174,57 +206,63 @@ private DnsDiscoveryObserver newDiscoveryObserver(final String address) {\n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetAddress>>> dnsQuery(final String address) {\n         requireNonNull(address);\n-        return defer(() -> new ARecordPublisher(true, address, newDiscoveryObserver(address)));\n+        return defer(() -> {\n+            ARecordPublisher pub = new ARecordPublisher(address, newDiscoveryObserver(address));\n+            return inactiveEventsOnError ? recoverWithInactiveEvents(pub, false) : pub;\n+        });\n     }\n \n     @Override\n     public Publisher<Collection<ServiceDiscovererEvent<InetSocketAddress>>> dnsSrvQuery(final String serviceName) {\n         requireNonNull(serviceName);\n         return defer(() -> {\n-            // State per subscribe requires defer so each subscribe gets independent state.\n-            final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);\n-            final DnsDiscoveryObserver discoveryObserver = newDiscoveryObserver(serviceName);\n-            return new SrvRecordPublisher(serviceName, discoveryObserver).flatMapConcatIterable(identity())\n-                    .flatMapMergeSingle(srvEvent -> {\n+        // State per subscribe requires defer so each subscribe gets independent state.\n+        final Map<HostAndPort, ARecordPublisher> aRecordMap = new HashMap<>(8);\n+        final Map<InetSocketAddress, Integer> availableAddresses = srvFilterDuplicateEvents ?\n+                new HashMap<>(8) : emptyMap();\n+        final DnsDiscoveryObserver discoveryObserver = newDiscoveryObserver(serviceName);\n+        // We \"recover\" unconditionally to force inactive events to propagate to all mapped A* publishers to cancel\n+        // any pending scheduled tasks. SrvInactiveCombinerOperator is used to filter the aggregated collection of\n+        // inactive events if necessary.\n+        return recoverWithInactiveEvents(new SrvRecordPublisher(serviceName, discoveryObserver), true)\n+                .flatMapConcatIterable(identity())\n+                .flatMapMerge(srvEvent -> {\n                 assertInEventloop();\n                 if (srvEvent.isAvailable()) {\n-                    final ARecordPublisher aPublisher =\n-                            new ARecordPublisher(false, srvEvent.address().hostName(), discoveryObserver);\n-                    final ARecordPublisher prevAPublisher = aRecordMap.putIfAbsent(srvEvent.address(), aPublisher);\n-                    if (prevAPublisher != null) {\n-                        return failed(new IllegalStateException(\"Only 1 A* record per SRV record is supported. \" +\n-                                srvEvent.address() + \" corresponding to SRV name \" + serviceName +\n-                                \" had a pre-existing A* record:\" + prevAPublisher.name +\n-                                \" when new A* record arrived: \" + aPublisher.name));\n-                    }\n+                    return defer(() -> {\n+                        final ARecordPublisher aPublisher =\n+                                new ARecordPublisher(srvEvent.address().hostName(), discoveryObserver);\n+                        final ARecordPublisher prevAPublisher = aRecordMap.putIfAbsent(srvEvent.address(), aPublisher);\n+                        if (prevAPublisher != null) {\n+                            return newDuplicateSrv(serviceName, srvEvent.address().toString(), prevAPublisher.name);\n+                        }\n \n-                    return srvARecordPubToSingle(aPublisher, srvEvent, serviceName);\n+                        Publisher<? extends Collection<ServiceDiscovererEvent<InetAddress>>> returnPub =\n+                                recoverWithInactiveEvents(aPublisher, false);\n+                        return srvFilterDuplicateEvents ?\n+                                srvFilterDups(returnPub, availableAddresses, srvEvent.address().port()) :\n+                                returnPub.map(events -> mapEventList(events, inetAddress ->\n+                                        new InetSocketAddress(inetAddress, srvEvent.address().port())));\n+                    }).retryWhen((i, cause) -> {\n+                        assertInEventloop();\n+                        // If this error is because the SRV entry was detected as inactive, then propagate the error and\n+                        // don't retry. Otherwise this is a resolution exception (e.g. UnknownHostException), and retry.\n+                        return cause == SrvAddressRemovedException.DNS_SRV_ADDR_REMOVED ||\n+                                aRecordMap.remove(srvEvent.address()) == null ?\n+                                Completable.failed(cause) : srvHostNameRepeater.apply(i);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQwNzYyNA=="}, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjE0NjMwOnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/SingletonDnsServerAddressStreamProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyNTowMVrOH_l1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyNTowMVrOH_l1Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjE1OQ==", "bodyText": "Consider making it private", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536442159", "createdAt": "2020-12-04T23:25:01Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/main/java/io/servicetalk/dns/discovery/netty/SingletonDnsServerAddressStreamProvider.java", "diffHunk": "@@ -25,14 +27,52 @@\n \n     /**\n      * Create a new instance.\n-     * @param stream The singelton to return from {@link #nameServerAddressStream(String)}.\n+     * @param address The address to return from {@link #nameServerAddressStream(String)}.\n      */\n-    public SingletonDnsServerAddressStreamProvider(DnsServerAddressStream stream) {\n-        this.stream = requireNonNull(stream);\n+    public SingletonDnsServerAddressStreamProvider(InetSocketAddress address) {\n+        this.stream = new SingletonDnsServerAddresses(address);\n     }\n \n     @Override\n     public DnsServerAddressStream nameServerAddressStream(String hostname) {\n         return stream;\n     }\n+\n+    /**\n+     * A {@link DnsServerAddressStream} which always returns the same {@link InetSocketAddress}.\n+     */\n+    public static final class SingletonDnsServerAddresses implements DnsServerAddressStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjE1MTA5OnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/test/java/io/servicetalk/dns/discovery/netty/DefaultDnsClientTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyNzowM1rOH_l3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTo1NDozNVrOIA4BWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjgyNQ==", "bodyText": "We should not override the copyright year", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536442825", "createdAt": "2020-12-04T23:27:03Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/test/java/io/servicetalk/dns/discovery/netty/DefaultDnsClientTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright \u00a9 2018 Apple Inc. and the ServiceTalk project authors\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc4ODc2Mw==", "bodyText": "good catch, file was modified under a different name and moved later.", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r537788763", "createdAt": "2020-12-07T19:54:35Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-dns-discovery-netty/src/test/java/io/servicetalk/dns/discovery/netty/DefaultDnsClientTest.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright \u00a9 2018 Apple Inc. and the ServiceTalk project authors\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MjgyNQ=="}, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NjE1NTM1OnYy", "diffSide": "RIGHT", "path": "servicetalk-dns-discovery-netty/src/test/java/io/servicetalk/dns/discovery/netty/TestRecordStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyOTowNVrOH_l6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMzoyOTowNVrOH_l6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ0MzQxMA==", "bodyText": "We should not override the copyright year", "url": "https://github.com/apple/servicetalk/pull/1223#discussion_r536443410", "createdAt": "2020-12-04T23:29:05Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-dns-discovery-netty/src/test/java/io/servicetalk/dns/discovery/netty/TestRecordStore.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright \u00a9 2019 Apple Inc. and the ServiceTalk project authors\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e31f2e4eb838aa9fa8fed393fff9ff056eae4ee"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2443, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}