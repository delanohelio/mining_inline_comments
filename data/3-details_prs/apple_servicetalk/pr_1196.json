{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MDQ5NzM0", "number": 1196, "title": "Improve DefaultHttpRequestMetaData query manipulator methods", "bodyText": "Motivation:\nDefaultHttpRequestMetaData has methods that focus on mainpulating the\nquery string such as addQueryParameters and setQueryParameter. These\nmethods all re-encode the entire query string and request target on each\nmodification. However these methods are often used multiple times\nsequentially, and the duplicate encoding is wasteful.\nModifications:\n\nDefer encoding the query string and request target until other methods\non the DefaultHttpRequestMetaData require it (e.g. requestTarget() and\nother query accessor methods).\n\nResult:\nLess overhead for DefaultHttpRequestMetaData#addQueryParameters and\nrelated query manipulator methods.", "createdAt": "2020-11-03T23:39:55Z", "url": "https://github.com/apple/servicetalk/pull/1196", "merged": true, "mergeCommit": {"oid": "78c9137e7f9b7ed4a1f5e428cdf328da28f8607e"}, "closed": true, "closedAt": "2020-11-04T21:02:26Z", "author": {"login": "Scottmitch"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZB72QgFqTUyMjk1MTc3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZTXwOgH2gAyNTE1MDQ5NzM0OmM4Mjc0Y2Q5NmViZTgxMDI2NmNjN2YwYjk0YWZlNjc1NDhkMTIxOTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTUxNzc4", "url": "https://github.com/apple/servicetalk/pull/1196#pullrequestreview-522951778", "createdAt": "2020-11-03T23:40:37Z", "commit": {"oid": "a27d8b30107e3f455b80816d825b9c3de36dc6cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0MDozN1rOHtEUqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo0MDozN1rOHtEUqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAxODc5NQ==", "bodyText": "the null check and method name setQueryParams -> query are the only changes in this method.", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517018795", "createdAt": "2020-11-03T23:40:37Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/DefaultHttpRequestMetaData.java", "diffHunk": "@@ -356,6 +366,79 @@ private Uri lazyParseRequestTarget() {\n         return requestTargetUri;\n     }\n \n+    private void query(final Map<String, List<String>> params) {\n+        Uri httpUri = lazyParseRequestTarget();\n+        StringBuilder sb = new StringBuilder(httpUri.uri().length() + params.size() * 8);\n+\n+        appendScheme(sb, httpUri);\n+        appendAuthority(sb, httpUri);\n+        sb.append(httpUri.path());\n+\n+        // Append query params\n+        Iterator<Entry<String, List<String>>> itr = params.entrySet().iterator();\n+        char prefixChar = '?';\n+        while (itr.hasNext()) {\n+            Entry<String, List<String>> next = itr.next();\n+            String encodedKey = encodeComponent(QUERY, next.getKey(), REQUEST_TARGET_CHARSET, true);\n+            sb.append(prefixChar).append(encodedKey);\n+            List<String> values = next.getValue();\n+            if (values != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a27d8b30107e3f455b80816d825b9c3de36dc6cc"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "committedDate": "2020-11-03T23:43:56Z", "message": "Improve DefaultHttpRequestMetaData query manipulator methods\n\nMotivation:\nDefaultHttpRequestMetaData has methods that focus on mainpulating the\nquery string such as addQueryParameters and setQueryParameter. These\nmethods all re-encode the entire query string and request target on each\nmodification. However these methods are often used multiple times\nsequentially, and the duplicate encoding is wasteful.\n\nModifications:\n- Defer encoding the query string and request target until other methods\non the DefaultHttpRequestMetaData require it (e.g. requestTarget() and\nother query accessor methods).\n\nResult:\nLess overhead for DefaultHttpRequestMetaData#addQueryParameters and\nrelated query manipulator methods."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a27d8b30107e3f455b80816d825b9c3de36dc6cc", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/a27d8b30107e3f455b80816d825b9c3de36dc6cc", "committedDate": "2020-11-03T23:35:13Z", "message": "Improve DefaultHttpRequestMetaData query manipulator methods\n\nMotivation:\nDefaultHttpRequestMetaData has methods that focus on mainpulating the\nquery string such as addQueryParameters and setQueryParameter. These\nmethods all re-encode the entire query string and request target on each\nmodification. However these methods are often used multiple times\nsequentially, and the duplicate encoding is wasteful.\n\nModifications:\n- Defer encoding the query string and request target until other methods\non the DefaultHttpRequestMetaData require it (e.g. requestTarget() and\nother query accessor methods).\n\nResult:\nLess overhead for DefaultHttpRequestMetaData#addQueryParameters and\nrelated query manipulator methods."}, "afterCommit": {"oid": "9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/9f635e749076a9cb747b9ed52f77bcfb5a9eb07b", "committedDate": "2020-11-03T23:43:56Z", "message": "Improve DefaultHttpRequestMetaData query manipulator methods\n\nMotivation:\nDefaultHttpRequestMetaData has methods that focus on mainpulating the\nquery string such as addQueryParameters and setQueryParameter. These\nmethods all re-encode the entire query string and request target on each\nmodification. However these methods are often used multiple times\nsequentially, and the duplicate encoding is wasteful.\n\nModifications:\n- Defer encoding the query string and request target until other methods\non the DefaultHttpRequestMetaData require it (e.g. requestTarget() and\nother query accessor methods).\n\nResult:\nLess overhead for DefaultHttpRequestMetaData#addQueryParameters and\nrelated query manipulator methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c19a84f7ac15c708213158a6c1c6091aca78ac5f", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/c19a84f7ac15c708213158a6c1c6091aca78ac5f", "committedDate": "2020-11-03T23:50:51Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/256e4462feaebc491c21f7d9859fbf791808f8a0", "committedDate": "2020-11-03T23:53:27Z", "message": "more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyOTU3Mjk4", "url": "https://github.com/apple/servicetalk/pull/1196#pullrequestreview-522957298", "createdAt": "2020-11-03T23:56:36Z", "commit": {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMzo1NjozN1rOHtEnIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwMDoyMTo0N1rOHtFC-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMzUyMQ==", "bodyText": "uri is always an empty string, can we remove it?\nthe query is always a non-null", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517023521", "createdAt": "2020-11-03T23:56:37Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n+import static io.servicetalk.http.api.HttpRequestMethod.GET;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+@Fork(value = 1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+public class QueryStringEncodingBenchmark {\n+    private String value;\n+    @Param({\"100\", \"1000\", \"10000\"})\n+    private int length;\n+    @Param({\"false\", \"true\"})\n+    private boolean needsEncoding;\n+    private DefaultHttpRequestMetaData stMetaData;\n+    private final HttpHeaders headers = new DefaultHttpHeadersFactory(false, false).newHeaders();\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        StringBuilder sb = new StringBuilder(length);\n+        if (needsEncoding) {\n+            final int halfLength = length >>> 1;\n+            int i = 0;\n+            for (; i < halfLength; ++i) {\n+                sb.append('a');\n+            }\n+            sb.append(' ');\n+            for (; i < length; ++i) {\n+                sb.append('b');\n+            }\n+        } else {\n+            for (int i = 0; i < length; ++i) {\n+                sb.append('a');\n+            }\n+        }\n+        value = sb.toString();\n+        stMetaData = new DefaultHttpRequestMetaData(GET, \"\", HTTP_1_1, headers);\n+    }\n+\n+    @Benchmark\n+    public HttpRequestMetaData stEncoding() {\n+        return stMetaData.query(value);\n+    }\n+\n+    @Benchmark\n+    public String jdkURLEncoder() throws UnsupportedEncodingException {\n+        return jdkBuildURL(\"\", URLEncoder.encode(value, UTF_8.name()));\n+    }\n+\n+    private static String jdkBuildURL(final String uri, @Nullable String query) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyMzgzOA==", "bodyText": "The ? will always trigger resize of the internal array, which is impacting numbers", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517023838", "createdAt": "2020-11-03T23:57:42Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n+import static io.servicetalk.http.api.HttpRequestMethod.GET;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+@Fork(value = 1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+public class QueryStringEncodingBenchmark {\n+    private String value;\n+    @Param({\"100\", \"1000\", \"10000\"})\n+    private int length;\n+    @Param({\"false\", \"true\"})\n+    private boolean needsEncoding;\n+    private DefaultHttpRequestMetaData stMetaData;\n+    private final HttpHeaders headers = new DefaultHttpHeadersFactory(false, false).newHeaders();\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        StringBuilder sb = new StringBuilder(length);\n+        if (needsEncoding) {\n+            final int halfLength = length >>> 1;\n+            int i = 0;\n+            for (; i < halfLength; ++i) {\n+                sb.append('a');\n+            }\n+            sb.append(' ');\n+            for (; i < length; ++i) {\n+                sb.append('b');\n+            }\n+        } else {\n+            for (int i = 0; i < length; ++i) {\n+                sb.append('a');\n+            }\n+        }\n+        value = sb.toString();\n+        stMetaData = new DefaultHttpRequestMetaData(GET, \"\", HTTP_1_1, headers);\n+    }\n+\n+    @Benchmark\n+    public HttpRequestMetaData stEncoding() {\n+        return stMetaData.query(value);\n+    }\n+\n+    @Benchmark\n+    public String jdkURLEncoder() throws UnsupportedEncodingException {\n+        return jdkBuildURL(\"\", URLEncoder.encode(value, UTF_8.name()));\n+    }\n+\n+    private static String jdkBuildURL(final String uri, @Nullable String query) {\n+        // replicating what is done in DefaultHttpHeadersFactory to build the URI\n+        StringBuilder sb = query != null ? new StringBuilder(uri.length() + query.length()) :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAyNDEzMg==", "bodyText": "Headers are not plain a role in these 2 benchmarks, DefaultHttpHeadersFactory.INSTANCE can be used", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517024132", "createdAt": "2020-11-03T23:58:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-benchmarks/src/jmh/java/io/servicetalk/http/api/QueryStringEncodingBenchmark.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.api;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import javax.annotation.Nullable;\n+\n+import static io.servicetalk.http.api.HttpProtocolVersion.HTTP_1_1;\n+import static io.servicetalk.http.api.HttpRequestMethod.GET;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+@Fork(value = 1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@BenchmarkMode(Mode.Throughput)\n+public class QueryStringEncodingBenchmark {\n+    private String value;\n+    @Param({\"100\", \"1000\", \"10000\"})\n+    private int length;\n+    @Param({\"false\", \"true\"})\n+    private boolean needsEncoding;\n+    private DefaultHttpRequestMetaData stMetaData;\n+    private final HttpHeaders headers = new DefaultHttpHeadersFactory(false, false).newHeaders();\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        StringBuilder sb = new StringBuilder(length);\n+        if (needsEncoding) {\n+            final int halfLength = length >>> 1;\n+            int i = 0;\n+            for (; i < halfLength; ++i) {\n+                sb.append('a');\n+            }\n+            sb.append(' ');\n+            for (; i < length; ++i) {\n+                sb.append('b');\n+            }\n+        } else {\n+            for (int i = 0; i < length; ++i) {\n+                sb.append('a');\n+            }\n+        }\n+        value = sb.toString();\n+        stMetaData = new DefaultHttpRequestMetaData(GET, \"\", HTTP_1_1, headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzAzMDY1MQ==", "bodyText": "Consider using markDirty() everywhere", "url": "https://github.com/apple/servicetalk/pull/1196#discussion_r517030651", "createdAt": "2020-11-04T00:21:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-api/src/main/java/io/servicetalk/http/api/HttpQuery.java", "diffHunk": "@@ -179,7 +162,7 @@ public boolean remove(final String key, final String value) {\n         while (values.hasNext()) {\n             if (value.equals(values.next())) {\n                 values.remove();\n-                updateQueryParams();\n+                dirty = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzMzcwMTg0", "url": "https://github.com/apple/servicetalk/pull/1196#pullrequestreview-523370184", "createdAt": "2020-11-04T13:42:44Z", "commit": {"oid": "256e4462feaebc491c21f7d9859fbf791808f8a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/90240eb5ddcc5e7db87e4a2d11b48eaae68e3302", "committedDate": "2020-11-04T19:50:28Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8274cd96ebe810266cc7f0b94afe67548d12196", "author": {"user": {"login": "Scottmitch", "name": "Scott Mitchell"}}, "url": "https://github.com/apple/servicetalk/commit/c8274cd96ebe810266cc7f0b94afe67548d12196", "committedDate": "2020-11-04T19:59:29Z", "message": "modify benchmark to get before/after removal uri"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3533, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}