{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDQ5OTUx", "number": 1029, "title": "Introduce HTTP/2 keep alive", "bodyText": "Motivation\nHTTP/2 PING frames are useful to keep a connection alive relatively cheaply in presence of long running streams. ServiceTalk should support adding this functionality for both clients and servers.\nModification\n\nAdd KeepAlivePolicy to H2ProtocolConfig that can be configured to enable keep-alive behavior on either clients or servers. Following features are provided:\n-- Specify an idleness threshold, after which a PING frame will be sent on the connection to detect liveness.\n-- Specify an ack timeout, within which we expect an ack for the sent PING. If no ack is received, the connection is closed.\n-- Specify whether PING frames should be sent even when there are no active streams. This defaults to false.\n\nResult\nKeep alive behavior can be enabled for either client or server.", "createdAt": "2020-04-22T05:10:00Z", "url": "https://github.com/apple/servicetalk/pull/1029", "merged": true, "mergeCommit": {"oid": "29c4f7d094649e3d454fbbbe69bc1236e54d189a"}, "closed": true, "closedAt": "2020-04-24T16:39:03Z", "author": {"login": "NiteshKant"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaBFRzgH2gAyNDA3MDQ5OTUxOmU3ZWE4YjdmZjQ4YmQ0NmUzN2NmYzE1ODQxN2RhNTFhM2NiN2FlMGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca0Di9gH2gAyNDA3MDQ5OTUxOjBiNDIxOTFjNGYzM2FiNWE5ODk1ZDNlZWEwYWRiYWRkMmE1NDM3MmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d", "committedDate": "2020-04-22T05:03:47Z", "message": "Introduce HTTP/2 keep alive\n\n__Motivation__\n\nHTTP/2 PING frames are useful to keep a connection alive relatively cheaply in presence of long running streams. ServiceTalk should support adding this functionality for both clients and servers.\n\n__Modification__\n\n- Add `KeepAlivePolicy` to `H2ProtocolConfig` that can be configured to enable keep-alive behavior on either clients or servers. Following features are provided:\n    -- Specify an idleness threshold, after which a PING frame will be sent on the connection to detect liveness.\n    -- Specify an ack timeout, within which we expect an ack for the sent PING. If no ack is received, the connection is closed.\n    -- Specify whether PING frames should be sent even when there are no active streams. This defaults to `false`.\n\n__Result__\n\nKeep alive behavior can be enabled for either client or server."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjU1ODEy", "url": "https://github.com/apple/servicetalk/pull/1029#pullrequestreview-398255812", "createdAt": "2020-04-22T14:34:32Z", "commit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDozNDozM1rOGJ5zCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDo0NjoxMVrOGJ6aSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNzMyMQ==", "bodyText": "nit: final", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413037321", "createdAt": "2020-04-22T14:34:33Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultKeepAlivePolicy.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static java.time.Duration.ofSeconds;\n+\n+class DefaultKeepAlivePolicy implements KeepAlivePolicy {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzNzcxNA==", "bodyText": "nit: requireNonNull(...) for both Durations.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413037714", "createdAt": "2020-04-22T14:35:04Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultKeepAlivePolicy.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static java.time.Duration.ofSeconds;\n+\n+class DefaultKeepAlivePolicy implements KeepAlivePolicy {\n+    static final Duration DEFAULT_IDLE_DURATION = ofSeconds(30);\n+    static final Duration DEFAULT_ACK_TIMEOUT = ofSeconds(30);\n+    static final boolean DEFAULT_WITHOUT_ACTIVE_STREAMS = false;\n+    private final Duration idleDuration;\n+    private final Duration ackTimeout;\n+    private final boolean withoutActiveStreams;\n+\n+    DefaultKeepAlivePolicy() {\n+        this(DEFAULT_IDLE_DURATION, DEFAULT_ACK_TIMEOUT, false);\n+    }\n+\n+    DefaultKeepAlivePolicy(final Duration idleDuration, final Duration ackTimeout, final boolean withoutActiveStreams) {\n+        this.idleDuration = idleDuration;\n+        this.ackTimeout = ackTimeout;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzOTQwNw==", "bodyText": "nit: s/which//", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413039407", "createdAt": "2020-04-22T14:36:58Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java", "diffHunk": "@@ -53,4 +54,46 @@ default String alpnId() {\n      */\n     @Nullable\n     String frameLoggerName();\n+\n+    /**\n+     * Configured {@link KeepAlivePolicy}.\n+     *\n+     * @return configured {@link KeepAlivePolicy} or {@code null} if none is configured.\n+     */\n+    @Nullable\n+    KeepAlivePolicy keepAlivePolicy();\n+\n+    /**\n+     * A policy for sending <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">PING frames</a> to the peer.\n+     */\n+    interface KeepAlivePolicy {\n+        /**\n+         * {@link Duration} of time the connection has to be idle before which a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0MjM3NA==", "bodyText": "if java would just have better enums like Swift... This makes me sad :/", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413042374", "createdAt": "2020-04-22T14:40:33Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NTQ4NA==", "bodyText": "I would just catch RejectExecutionException and let the rest bubble up.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413045484", "createdAt": "2020-04-22T14:44:01Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdMillis, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdMillis, idlenessThresholdMillis, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NTg2OQ==", "bodyText": "nit: you could merge the if blocks", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413045869", "createdAt": "2020-04-22T14:44:27Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdMillis, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdMillis, idlenessThresholdMillis, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (Throwable cause) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",\n+                        channel, cause);\n+            }\n+        }\n+    }\n+\n+    void channelIdle() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (keepAliveState == CLOSED) {\n+            return;\n+        }\n+        if (activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NjYxMQ==", "bodyText": "consider caching the ChannelFutureListener to reduce GC pressure if you need to write the next ping again", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413046611", "createdAt": "2020-04-22T14:45:20Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdMillis, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdMillis, idlenessThresholdMillis, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (Throwable cause) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",\n+                        channel, cause);\n+            }\n+        }\n+    }\n+\n+    void channelIdle() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (keepAliveState == CLOSED) {\n+            return;\n+        }\n+        if (activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {\n+            return;\n+        }\n+        // idleness detected for the first time, send a ping to detect closure, if any.\n+        keepAliveState = KEEP_ALIVE_ACK_PENDING;\n+        channel.writeAndFlush(new DefaultHttp2PingFrame(KEEP_ALIVE_PING_CONTENT, false))\n+                .addListener(future -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzA0NzM2OQ==", "bodyText": "consider rethrow if Error.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413047369", "createdAt": "2020-04-22T14:46:11Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdMillis, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdMillis, idlenessThresholdMillis, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (Throwable cause) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",\n+                        channel, cause);\n+            }\n+        }\n+    }\n+\n+    void channelIdle() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (keepAliveState == CLOSED) {\n+            return;\n+        }\n+        if (activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {\n+            return;\n+        }\n+        // idleness detected for the first time, send a ping to detect closure, if any.\n+        keepAliveState = KEEP_ALIVE_ACK_PENDING;\n+        channel.writeAndFlush(new DefaultHttp2PingFrame(KEEP_ALIVE_PING_CONTENT, false))\n+                .addListener(future -> {\n+                    if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                        // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                        keepAliveState = scheduler.afterMillis(() -> {\n+                            if (keepAliveState != null) {\n+                                keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                                LOGGER.debug(\n+                                        \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                        channel, pingAckTimeoutMillis);\n+                                channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                        .addListener(f -> {\n+                                            if (f.isSuccess()) {\n+                                                LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", channel);\n+                                                close0();\n+                                            }\n+                                        });\n+                            }\n+                        }, pingAckTimeoutMillis);\n+                    }\n+                });\n+    }\n+\n+    /**\n+     * Scheduler of {@link Runnable}s.\n+     */\n+    @FunctionalInterface\n+    interface Scheduler {\n+\n+        /**\n+         * Run the passed {@link Runnable} after {@code delayInMillis} milliseconds.\n+         *\n+         * @param task {@link Runnable} to run.\n+         * @param delayInMillis Milliseconds after which the task is to be run.\n+         * @return {@link Future} for the scheduled task.\n+         */\n+        Future<?> afterMillis(Runnable task, long delayInMillis);\n+    }\n+\n+    /**\n+     * Scheduler of {@link Runnable}s.\n+     */\n+    @FunctionalInterface\n+    interface IdlenessDetector {\n+        /**\n+         * Configure idleness detection for the passed {@code channel}.\n+         *\n+         * @param channel {@link Channel} for which idleness detection is to be configured.\n+         * @param idlenessThresholdMillis Millis of idleness after which {@link Runnable#run()} should be called on the\n+         * passed {@code onIdle}.\n+         * @param onIdle {@link Runnable} to call when the channel is idle more than {@code idlenessThresholdMillis}.\n+         */\n+        void configure(Channel channel, int idlenessThresholdMillis, Runnable onIdle);\n+    }\n+\n+    private void doCloseAsyncGracefully0(final Runnable whenInitiated) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (gracefulCloseState != null) {\n+            // either we are already closed or have already initiated graceful closure.\n+            return;\n+        }\n+        // Set the pingState before doing the write, because we will reference the state\n+        // when we receive the PING(ACK) to determine if action is necessary, and it is conceivable that the\n+        // write future may not be executed which sets the timer.\n+        gracefulCloseState = GRACEFUL_CLOSE_START;\n+\n+        try {\n+            whenInitiated.run();\n+        } catch (Throwable t) {\n+            LOGGER.error(\"Failed to invoke callback for graceful closure initiation, ignoring.\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7ea8b7ff48bd46e37cfc158417da51a3cb7ae0d"}, "originalPosition": 251}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/894a68342eb7351020d4fa5cc7e47c8d97493e85", "committedDate": "2020-04-22T21:31:57Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NjI4MjYw", "url": "https://github.com/apple/servicetalk/pull/1029#pullrequestreview-398628260", "createdAt": "2020-04-22T22:15:28Z", "commit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMjoxNToyOFrOGKOEiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzozODoxN1rOGKQOhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM2OTQ4MA==", "bodyText": "Here and on other places, consider linking to the specific section instead of the page to be consistent with all other links: <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">PING</a> frames", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413369480", "createdAt": "2020-04-22T22:15:28Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java", "diffHunk": "@@ -53,4 +54,46 @@ default String alpnId() {\n      */\n     @Nullable\n     String frameLoggerName();\n+\n+    /**\n+     * Configured {@link KeepAlivePolicy}.\n+     *\n+     * @return configured {@link KeepAlivePolicy} or {@code null} if none is configured.\n+     */\n+    @Nullable\n+    KeepAlivePolicy keepAlivePolicy();\n+\n+    /**\n+     * A policy for sending <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">PING frames</a> to the peer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3MzI2Ng==", "bodyText": "Looks like a leftover from intermediate work, boolean should not be annotated.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413373266", "createdAt": "2020-04-22T22:22:57Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3NDY3Mg==", "bodyText": "Consider swapping it in this way to protect from unnecessary volatile read: disallowKeepAliveWithoutActiveStreams && activeChildChannels == 0", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413374672", "createdAt": "2020-04-22T22:26:07Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdMillis, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdMillis, idlenessThresholdMillis, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (RejectedExecutionException ree) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",\n+                        channel, ree);\n+            }\n+        }\n+    }\n+\n+    void channelIdle() {\n+        assert channel.eventLoop().inEventLoop();\n+        assert pingWriteCompletionListener != null;\n+\n+        if (keepAliveState == CLOSED || activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3ODIyOQ==", "bodyText": "Actually, I thought it should work in the opposite way: provide a config to disable ping frames when there are activeChildChannels > 0. Because if there is a working stream there is less need to check if the connection is still alive. When there are no active streams, and users want to check the connection and keep it alive, ping frames are useful.\nWhat is the use-case for holding PING frames when activeChildChannels == 0?", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413378229", "createdAt": "2020-04-22T22:34:03Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdMillis, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdMillis, idlenessThresholdMillis, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (RejectedExecutionException ree) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",\n+                        channel, ree);\n+            }\n+        }\n+    }\n+\n+    void channelIdle() {\n+        assert channel.eventLoop().inEventLoop();\n+        assert pingWriteCompletionListener != null;\n+\n+        if (keepAliveState == CLOSED || activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM3NDY3Mg=="}, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM4NjQ0Nw==", "bodyText": "While this approach gives users nice fluent DSL for configuration, they really do not read docs and forget to invoke commit() at the end. Frequent pattern:\nH2ProtocolConfigBuilder h2ConfigBuilder = h2();\n// ...\nif (needKeepAlive) {\n    h2ConfigBuilder.keepAlive();\n}\nH2ProtocolConfig config = h2ConfigBuilder.build();\nSince there is only a single commit() method on KeepAliveConfigurator, can we just have a method on the builder that takes KeepAlivePolicy?\npublic H2ProtocolConfigBuilder keepAlivePolicy(final KeepAlivePolicy keepAlivePolicy) {\n    this.keepAlivePolicy = requireNonNull(keepAlivePolicy);\n    return this;\n}\nThis will make it consistent with HttpHeadersFactory.\nWe can make DefaultKeepAlivePolicy public (similar to DefaultHttpHeadersFactory) or provide a separate builder for KeepAlivePolicy if you expect the number of configuration options may grow later.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413386447", "createdAt": "2020-04-22T22:52:52Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfigBuilder.java", "diffHunk": "@@ -81,13 +88,124 @@ public H2ProtocolConfigBuilder enableFrameLogging(final String loggerName) {\n         return this;\n     }\n \n+    /**\n+     * Configure keep alive behavior using <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">PING frames</a>.\n+     *\n+     * @return A {@link KeepAliveConfigurator} which adds keep-alive configuration to this {@link H2ProtocolConfig} when\n+     * {@link KeepAliveConfigurator#commit() committed}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MTA5OA==", "bodyText": "Consider removing an option to disable if users can just skip #keepAlive() configurator.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413391098", "createdAt": "2020-04-22T23:03:45Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfigBuilder.java", "diffHunk": "@@ -81,13 +88,124 @@ public H2ProtocolConfigBuilder enableFrameLogging(final String loggerName) {\n         return this;\n     }\n \n+    /**\n+     * Configure keep alive behavior using <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">PING frames</a>.\n+     *\n+     * @return A {@link KeepAliveConfigurator} which adds keep-alive configuration to this {@link H2ProtocolConfig} when\n+     * {@link KeepAliveConfigurator#commit() committed}.\n+     */\n+    public KeepAliveConfigurator keepAlive() {\n+        return new KeepAliveConfigurator() {\n+            private Duration idleDuration = DEFAULT_IDLE_DURATION;\n+            private Duration ackTimeout = DEFAULT_ACK_TIMEOUT;\n+            private boolean withoutActiveStreams = DEFAULT_WITHOUT_ACTIVE_STREAMS;\n+            private boolean disable;\n+\n+            @Override\n+            public KeepAliveConfigurator idleDuration(final Duration idleDuration) {\n+                if (idleDuration.getSeconds() < 10) {\n+                    throw new IllegalArgumentException(\"idleDuration: \" + idleDuration + \" (expected >= 10 seconds\");\n+                }\n+                this.idleDuration = requireNonNull(idleDuration);\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator ackTimeout(final Duration ackTimeout) {\n+                this.ackTimeout = requireNonNull(ackTimeout);\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator withoutActiveStreams(final boolean withoutActiveStreams) {\n+                this.withoutActiveStreams = withoutActiveStreams;\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator disable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjQ3MQ==", "bodyText": "Consider adding <p> tag to move the note at second javadoc line.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413392471", "createdAt": "2020-04-22T23:07:17Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfigBuilder.java", "diffHunk": "@@ -81,13 +88,124 @@ public H2ProtocolConfigBuilder enableFrameLogging(final String loggerName) {\n         return this;\n     }\n \n+    /**\n+     * Configure keep alive behavior using <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">PING frames</a>.\n+     *\n+     * @return A {@link KeepAliveConfigurator} which adds keep-alive configuration to this {@link H2ProtocolConfig} when\n+     * {@link KeepAliveConfigurator#commit() committed}.\n+     */\n+    public KeepAliveConfigurator keepAlive() {\n+        return new KeepAliveConfigurator() {\n+            private Duration idleDuration = DEFAULT_IDLE_DURATION;\n+            private Duration ackTimeout = DEFAULT_ACK_TIMEOUT;\n+            private boolean withoutActiveStreams = DEFAULT_WITHOUT_ACTIVE_STREAMS;\n+            private boolean disable;\n+\n+            @Override\n+            public KeepAliveConfigurator idleDuration(final Duration idleDuration) {\n+                if (idleDuration.getSeconds() < 10) {\n+                    throw new IllegalArgumentException(\"idleDuration: \" + idleDuration + \" (expected >= 10 seconds\");\n+                }\n+                this.idleDuration = requireNonNull(idleDuration);\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator ackTimeout(final Duration ackTimeout) {\n+                this.ackTimeout = requireNonNull(ackTimeout);\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator withoutActiveStreams(final boolean withoutActiveStreams) {\n+                this.withoutActiveStreams = withoutActiveStreams;\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator disable() {\n+                this.disable = true;\n+                return this;\n+            }\n+\n+            @Override\n+            public H2ProtocolConfigBuilder commit() {\n+                H2ProtocolConfigBuilder parent = H2ProtocolConfigBuilder.this;\n+                if (disable) {\n+                    parent.keepAlivePolicy = null;\n+                } else {\n+                    parent.keepAlivePolicy = new DefaultKeepAlivePolicy(idleDuration, ackTimeout, withoutActiveStreams);\n+                }\n+                return parent;\n+            }\n+        };\n+    }\n+\n     /**\n      * Builds {@link H2ProtocolConfig}.\n      *\n      * @return {@link H2ProtocolConfig}\n      */\n     public H2ProtocolConfig build() {\n-        return new DefaultH2ProtocolConfig(headersFactory, headersSensitivityDetector, frameLoggerName);\n+        return new DefaultH2ProtocolConfig(headersFactory, headersSensitivityDetector, frameLoggerName,\n+                keepAlivePolicy);\n+    }\n+\n+    /**\n+     * A configurator for {@link KeepAlivePolicy}.\n+     */\n+    public interface KeepAliveConfigurator {\n+\n+        /**\n+         * Set the {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">ping</a> is sent.\n+         * <strong>Too short ping durations may cause high network traffic, so implementations may enforce a minimum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MzMwNQ==", "bodyText": "so -> some? or just without anything: ... traffic, implementations may ...", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413393305", "createdAt": "2020-04-22T23:09:26Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfigBuilder.java", "diffHunk": "@@ -81,13 +88,124 @@ public H2ProtocolConfigBuilder enableFrameLogging(final String loggerName) {\n         return this;\n     }\n \n+    /**\n+     * Configure keep alive behavior using <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">PING frames</a>.\n+     *\n+     * @return A {@link KeepAliveConfigurator} which adds keep-alive configuration to this {@link H2ProtocolConfig} when\n+     * {@link KeepAliveConfigurator#commit() committed}.\n+     */\n+    public KeepAliveConfigurator keepAlive() {\n+        return new KeepAliveConfigurator() {\n+            private Duration idleDuration = DEFAULT_IDLE_DURATION;\n+            private Duration ackTimeout = DEFAULT_ACK_TIMEOUT;\n+            private boolean withoutActiveStreams = DEFAULT_WITHOUT_ACTIVE_STREAMS;\n+            private boolean disable;\n+\n+            @Override\n+            public KeepAliveConfigurator idleDuration(final Duration idleDuration) {\n+                if (idleDuration.getSeconds() < 10) {\n+                    throw new IllegalArgumentException(\"idleDuration: \" + idleDuration + \" (expected >= 10 seconds\");\n+                }\n+                this.idleDuration = requireNonNull(idleDuration);\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator ackTimeout(final Duration ackTimeout) {\n+                this.ackTimeout = requireNonNull(ackTimeout);\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator withoutActiveStreams(final boolean withoutActiveStreams) {\n+                this.withoutActiveStreams = withoutActiveStreams;\n+                return this;\n+            }\n+\n+            @Override\n+            public KeepAliveConfigurator disable() {\n+                this.disable = true;\n+                return this;\n+            }\n+\n+            @Override\n+            public H2ProtocolConfigBuilder commit() {\n+                H2ProtocolConfigBuilder parent = H2ProtocolConfigBuilder.this;\n+                if (disable) {\n+                    parent.keepAlivePolicy = null;\n+                } else {\n+                    parent.keepAlivePolicy = new DefaultKeepAlivePolicy(idleDuration, ackTimeout, withoutActiveStreams);\n+                }\n+                return parent;\n+            }\n+        };\n+    }\n+\n     /**\n      * Builds {@link H2ProtocolConfig}.\n      *\n      * @return {@link H2ProtocolConfig}\n      */\n     public H2ProtocolConfig build() {\n-        return new DefaultH2ProtocolConfig(headersFactory, headersSensitivityDetector, frameLoggerName);\n+        return new DefaultH2ProtocolConfig(headersFactory, headersSensitivityDetector, frameLoggerName,\n+                keepAlivePolicy);\n+    }\n+\n+    /**\n+     * A configurator for {@link KeepAlivePolicy}.\n+     */\n+    public interface KeepAliveConfigurator {\n+\n+        /**\n+         * Set the {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#page-42\">ping</a> is sent.\n+         * <strong>Too short ping durations may cause high network traffic, so implementations may enforce a minimum", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjQ3MQ=="}, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NTM3NQ==", "bodyText": "When these two default values are equal there is a possible race between \"idle duration\" and \"ack timeout\". Should we make \"ack timeout\" lower to avoid sending a second ping frame when connection awaits for an ack for the first ping?", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413395375", "createdAt": "2020-04-22T23:14:24Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultKeepAlivePolicy.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static java.time.Duration.ofSeconds;\n+import static java.util.Objects.requireNonNull;\n+\n+final class DefaultKeepAlivePolicy implements KeepAlivePolicy {\n+    static final Duration DEFAULT_IDLE_DURATION = ofSeconds(30);\n+    static final Duration DEFAULT_ACK_TIMEOUT = ofSeconds(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNDgwNw==", "bodyText": "netty's IdleStateHandler default ctor expects time in seconds (and I see you pass the correct value in seconds in line 134: https://github.com/apple/servicetalk/pull/1029/files#diff-8444eb430112783058af7e8cd6f2c006R134). The name of the parameter here should be idlenessThresholdSeconds. Alternatively, you can use IdleStateHandler ctor that also takes TimeUnit and pass the value in millis here.\nIf we use only seconds, we should clarify that in javadoc of  KeepAliveConfigurator#idleDuration or force it in the API. Otherwise, users may provide Duration.ofMillis(999) that will result in disabled IdleStateEvents as it returns 0 seconds.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413404807", "createdAt": "2020-04-22T23:38:17Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    @Nullable\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdMillis, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdMillis, idlenessThresholdMillis, 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "894a68342eb7351020d4fa5cc7e47c8d97493e85"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/7de08e1e8f8615b4b427af6e92a10506945321a9", "committedDate": "2020-04-23T01:41:13Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzU5NjAx", "url": "https://github.com/apple/servicetalk/pull/1029#pullrequestreview-398759601", "createdAt": "2020-04-23T04:59:02Z", "commit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo1OTowMlrOGKWnFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNTo0NDo1MlrOGKXlDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwOTM5OQ==", "bodyText": "Consider swapping it in this way to protect from unnecessary volatile read: disallowKeepAliveWithoutActiveStreams && activeChildChannels == 0", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413509399", "createdAt": "2020-04-23T04:59:02Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -197,7 +196,7 @@ void channelIdle() {\n         assert channel.eventLoop().inEventLoop();\n         assert pingWriteCompletionListener != null;\n \n-        if (keepAliveState == CLOSED || activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {\n+        if (keepAliveState != null || activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMTgyOA==", "bodyText": "Incorrect comment for @return tag.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413511828", "createdAt": "2020-04-23T05:06:27Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {\n+    static final KeepAlivePolicy DISABLE_KEEP_ALIVE =\n+            new DefaultKeepAlivePolicy(ofDays(365), ofDays(365), false);\n+\n+    private KeepAlivePolicies() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     *\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy disabled() {\n+        return DISABLE_KEEP_ALIVE;\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration}. Default values are used for other parameters\n+     * of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMTg4Nw==", "bodyText": "Incorrect comment for @return tag.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413511887", "createdAt": "2020-04-23T05:06:34Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {\n+    static final KeepAlivePolicy DISABLE_KEEP_ALIVE =\n+            new DefaultKeepAlivePolicy(ofDays(365), ofDays(365), false);\n+\n+    private KeepAlivePolicies() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     *\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy disabled() {\n+        return DISABLE_KEEP_ALIVE;\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration}. Default values are used for other parameters\n+     * of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).build();\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration} and waits for {@code ackTimeout} for an ack\n+     * for that <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. Default values are used for other\n+     * parameters of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxMzk5Nw==", "bodyText": "Since this is a final class now instead of an interface, \"implementation_s_ may enforce\" is not correct anymore. Consider something like:\n\nToo short ping durations may cause high network traffic. Too small duration is not allowed.\n\nOr be specific about 10 seconds.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413513997", "createdAt": "2020-04-23T05:13:04Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {\n+    static final KeepAlivePolicy DISABLE_KEEP_ALIVE =\n+            new DefaultKeepAlivePolicy(ofDays(365), ofDays(365), false);\n+\n+    private KeepAlivePolicies() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     *\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy disabled() {\n+        return DISABLE_KEEP_ALIVE;\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration}. Default values are used for other parameters\n+     * of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).build();\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration} and waits for {@code ackTimeout} for an ack\n+     * for that <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. Default values are used for other\n+     * parameters of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration, final Duration ackTimeout) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).ackTimeout(ackTimeout).build();\n+    }\n+\n+    /**\n+     * A builder of {@link KeepAlivePolicy}.\n+     */\n+    public static final class KeepAlivePolicyBuilder {\n+        private Duration idleDuration = DEFAULT_IDLE_DURATION;\n+        private Duration ackTimeout = DEFAULT_ACK_TIMEOUT;\n+        private boolean withoutActiveStreams;\n+\n+        /**\n+         * Set the {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+         * <p>\n+         * <strong>Too short ping durations may cause high network traffic, implementations may enforce a minimum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNTkxOQ==", "bodyText": "\"disallow receiving\" currently is not true. KeepAliveManager#pingReceived always acks received ping frames.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413515919", "createdAt": "2020-04-23T05:18:36Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {\n+    static final KeepAlivePolicy DISABLE_KEEP_ALIVE =\n+            new DefaultKeepAlivePolicy(ofDays(365), ofDays(365), false);\n+\n+    private KeepAlivePolicies() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     *\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy disabled() {\n+        return DISABLE_KEEP_ALIVE;\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration}. Default values are used for other parameters\n+     * of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).build();\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration} and waits for {@code ackTimeout} for an ack\n+     * for that <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. Default values are used for other\n+     * parameters of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration, final Duration ackTimeout) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).ackTimeout(ackTimeout).build();\n+    }\n+\n+    /**\n+     * A builder of {@link KeepAlivePolicy}.\n+     */\n+    public static final class KeepAlivePolicyBuilder {\n+        private Duration idleDuration = DEFAULT_IDLE_DURATION;\n+        private Duration ackTimeout = DEFAULT_ACK_TIMEOUT;\n+        private boolean withoutActiveStreams;\n+\n+        /**\n+         * Set the {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+         * <p>\n+         * <strong>Too short ping durations may cause high network traffic, implementations may enforce a minimum\n+         * duration.</strong>\n+         *\n+         * @param idleDuration {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+         * @return {@code this}.\n+         * @see KeepAlivePolicy#idleDuration()\n+         */\n+        public KeepAlivePolicyBuilder idleDuration(final Duration idleDuration) {\n+            if (idleDuration.getSeconds() < 10) {\n+                throw new IllegalArgumentException(\"idleDuration: \" + idleDuration + \" (expected >= 10 seconds\");\n+            }\n+            this.idleDuration = idleDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the maximum {@link Duration} to wait for an acknowledgment of a previously sent\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. If no acknowledgment is received, the\n+         * connection will be closed.\n+         *\n+         * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+         * @return {@code this}.\n+         * @see KeepAlivePolicy#ackTimeout()\n+         */\n+        public KeepAlivePolicyBuilder ackTimeout(final Duration ackTimeout) {\n+            this.ackTimeout = requireNonNull(ackTimeout);\n+            return this;\n+        }\n+\n+        /**\n+         * Allow/disallow sending or receiving <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">pings</a> even", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxNjM5MQ==", "bodyText": "WDYT about whenNoActiveStreams name here and for KeepAlivePolicy? \"without\" does not match with the javadoc language.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413516391", "createdAt": "2020-04-23T05:20:01Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {\n+    static final KeepAlivePolicy DISABLE_KEEP_ALIVE =\n+            new DefaultKeepAlivePolicy(ofDays(365), ofDays(365), false);\n+\n+    private KeepAlivePolicies() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     *\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy disabled() {\n+        return DISABLE_KEEP_ALIVE;\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration}. Default values are used for other parameters\n+     * of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).build();\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration} and waits for {@code ackTimeout} for an ack\n+     * for that <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. Default values are used for other\n+     * parameters of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration, final Duration ackTimeout) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).ackTimeout(ackTimeout).build();\n+    }\n+\n+    /**\n+     * A builder of {@link KeepAlivePolicy}.\n+     */\n+    public static final class KeepAlivePolicyBuilder {\n+        private Duration idleDuration = DEFAULT_IDLE_DURATION;\n+        private Duration ackTimeout = DEFAULT_ACK_TIMEOUT;\n+        private boolean withoutActiveStreams;\n+\n+        /**\n+         * Set the {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+         * <p>\n+         * <strong>Too short ping durations may cause high network traffic, implementations may enforce a minimum\n+         * duration.</strong>\n+         *\n+         * @param idleDuration {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+         * @return {@code this}.\n+         * @see KeepAlivePolicy#idleDuration()\n+         */\n+        public KeepAlivePolicyBuilder idleDuration(final Duration idleDuration) {\n+            if (idleDuration.getSeconds() < 10) {\n+                throw new IllegalArgumentException(\"idleDuration: \" + idleDuration + \" (expected >= 10 seconds\");\n+            }\n+            this.idleDuration = idleDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the maximum {@link Duration} to wait for an acknowledgment of a previously sent\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. If no acknowledgment is received, the\n+         * connection will be closed.\n+         *\n+         * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+         * @return {@code this}.\n+         * @see KeepAlivePolicy#ackTimeout()\n+         */\n+        public KeepAlivePolicyBuilder ackTimeout(final Duration ackTimeout) {\n+            this.ackTimeout = requireNonNull(ackTimeout);\n+            return this;\n+        }\n+\n+        /**\n+         * Allow/disallow sending or receiving <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">pings</a> even\n+         * when no streams are <a href=\"https://tools.ietf.org/html/rfc7540#section-5.1\">active</a>.\n+         *\n+         * @param withoutActiveStreams {@code true} if\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">pings</a> are expected when no streams are\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-5.1\">active</a>.\n+         * @return {@code this}.\n+         * @see KeepAlivePolicy#withoutActiveStreams()\n+         */\n+        public KeepAlivePolicyBuilder withoutActiveStreams(final boolean withoutActiveStreams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxODI4MQ==", "bodyText": "This is an unused variable now.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413518281", "createdAt": "2020-04-23T05:25:20Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultKeepAlivePolicy.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static java.time.Duration.ofSeconds;\n+import static java.util.Objects.requireNonNull;\n+\n+final class DefaultKeepAlivePolicy implements KeepAlivePolicy {\n+    static final Duration DEFAULT_IDLE_DURATION = ofSeconds(30);\n+    static final Duration DEFAULT_ACK_TIMEOUT = ofSeconds(30);\n+    static final boolean DEFAULT_WITHOUT_ACTIVE_STREAMS = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxODQ3Ng==", "bodyText": "This ctor is unused now.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413518476", "createdAt": "2020-04-23T05:25:51Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultKeepAlivePolicy.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static java.time.Duration.ofSeconds;\n+import static java.util.Objects.requireNonNull;\n+\n+final class DefaultKeepAlivePolicy implements KeepAlivePolicy {\n+    static final Duration DEFAULT_IDLE_DURATION = ofSeconds(30);\n+    static final Duration DEFAULT_ACK_TIMEOUT = ofSeconds(30);\n+    static final boolean DEFAULT_WITHOUT_ACTIVE_STREAMS = false;\n+    private final Duration idleDuration;\n+    private final Duration ackTimeout;\n+    private final boolean withoutActiveStreams;\n+\n+    DefaultKeepAlivePolicy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUxODg2NQ==", "bodyText": "If you will remove the default ctor, you can move these constants to KeepAlivePolicies.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413518865", "createdAt": "2020-04-23T05:26:47Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/DefaultKeepAlivePolicy.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static java.time.Duration.ofSeconds;\n+import static java.util.Objects.requireNonNull;\n+\n+final class DefaultKeepAlivePolicy implements KeepAlivePolicy {\n+    static final Duration DEFAULT_IDLE_DURATION = ofSeconds(30);\n+    static final Duration DEFAULT_ACK_TIMEOUT = ofSeconds(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyMTIyMw==", "bodyText": "Since now we have a special DISABLE_KEEP_ALIVE constant, consider making this field not-nullable. We may start with disabled() as a default value and change it later if necessary.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413521223", "createdAt": "2020-04-23T05:33:40Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ProtocolConfig.java", "diffHunk": "@@ -53,4 +54,46 @@ default String alpnId() {\n      */\n     @Nullable\n     String frameLoggerName();\n+\n+    /**\n+     * Configured {@link KeepAlivePolicy}.\n+     *\n+     * @return configured {@link KeepAlivePolicy} or {@code null} if none is configured.\n+     */\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyMzY2Ng==", "bodyText": "Should we check that this is at least 1 ms?", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413523666", "createdAt": "2020-04-23T05:40:18Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {\n+    static final KeepAlivePolicy DISABLE_KEEP_ALIVE =\n+            new DefaultKeepAlivePolicy(ofDays(365), ofDays(365), false);\n+\n+    private KeepAlivePolicies() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     *\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy disabled() {\n+        return DISABLE_KEEP_ALIVE;\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration}. Default values are used for other parameters\n+     * of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).build();\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration} and waits for {@code ackTimeout} for an ack\n+     * for that <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. Default values are used for other\n+     * parameters of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration, final Duration ackTimeout) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).ackTimeout(ackTimeout).build();\n+    }\n+\n+    /**\n+     * A builder of {@link KeepAlivePolicy}.\n+     */\n+    public static final class KeepAlivePolicyBuilder {\n+        private Duration idleDuration = DEFAULT_IDLE_DURATION;\n+        private Duration ackTimeout = DEFAULT_ACK_TIMEOUT;\n+        private boolean withoutActiveStreams;\n+\n+        /**\n+         * Set the {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+         * <p>\n+         * <strong>Too short ping durations may cause high network traffic, implementations may enforce a minimum\n+         * duration.</strong>\n+         *\n+         * @param idleDuration {@link Duration} of idleness on a connection after which a\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+         * @return {@code this}.\n+         * @see KeepAlivePolicy#idleDuration()\n+         */\n+        public KeepAlivePolicyBuilder idleDuration(final Duration idleDuration) {\n+            if (idleDuration.getSeconds() < 10) {\n+                throw new IllegalArgumentException(\"idleDuration: \" + idleDuration + \" (expected >= 10 seconds\");\n+            }\n+            this.idleDuration = idleDuration;\n+            return this;\n+        }\n+\n+        /**\n+         * Set the maximum {@link Duration} to wait for an acknowledgment of a previously sent\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. If no acknowledgment is received, the\n+         * connection will be closed.\n+         *\n+         * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+         * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+         * @return {@code this}.\n+         * @see KeepAlivePolicy#ackTimeout()\n+         */\n+        public KeepAlivePolicyBuilder ackTimeout(final Duration ackTimeout) {\n+            this.ackTimeout = requireNonNull(ackTimeout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNDE4Mw==", "bodyText": "RFC says:\n\nReceivers of a PING frame that does not include an ACK flag MUST send a PING frame with the ACK flag set in response, with an identical payload.\n\nShould we error ack frames with payload we do not expect?", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413524183", "createdAt": "2020-04-23T05:41:48Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNTI2Mg==", "bodyText": "If we change this code to always use addListener (doesn't look it's practical in real network application that promise will complete so fast):\n\n  \n    \n      servicetalk/servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H2ClientParentConnectionContext.java\n    \n    \n        Lines 229 to 234\n      in\n      b22e5ea\n    \n    \n    \n    \n\n        \n          \n           if (promise.isDone()) { \n        \n\n        \n          \n               childChannelActive(promise, subscriber, sequentialCancellable, strategy, request); \n        \n\n        \n          \n           } else { \n        \n\n        \n          \n               promise.addListener((FutureListener<Http2StreamChannel>) future -> \n        \n\n        \n          \n                       childChannelActive(future, subscriber, sequentialCancellable, strategy, request)); \n        \n\n        \n          \n           } \n        \n    \n  \n\n\nThen this method will always be on the event loop. closeFuture also invokes listeners on the event loop. We will be able to make this variable non-volatile then. WDYT? Can be a follow-up as it's not related to this PR.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413525262", "createdAt": "2020-04-23T05:44:52Z", "author": {"login": "idelpivnitskiy"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTAyNTAx", "url": "https://github.com/apple/servicetalk/pull/1029#pullrequestreview-398902501", "createdAt": "2020-04-23T09:04:25Z", "commit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowNDoyNlrOGKey0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwOTowOTowOVrOGKe_-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0MzQ3Mw==", "bodyText": "+1... I think this should be a connection error", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413643473", "createdAt": "2020-04-23T09:04:26Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUyNDE4Mw=="}, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NDM1OQ==", "bodyText": "first log then call close0() just in case that close0 will throw", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413644359", "createdAt": "2020-04-23T09:05:41Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (RejectedExecutionException ree) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0NjQ0Mw==", "bodyText": "should the close be done once all previous written data is really written out on the network ? At the moment we may loose some data if the channel was not writable when flush() is called.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413646443", "createdAt": "2020-04-23T09:08:34Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (RejectedExecutionException ree) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",\n+                        channel, ree);\n+            }\n+        }\n+    }\n+\n+    void channelIdle() {\n+        assert channel.eventLoop().inEventLoop();\n+        assert pingWriteCompletionListener != null;\n+\n+        if (keepAliveState != null || activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {\n+            return;\n+        }\n+        // idleness detected for the first time, send a ping to detect closure, if any.\n+        keepAliveState = KEEP_ALIVE_ACK_PENDING;\n+        channel.writeAndFlush(new DefaultHttp2PingFrame(KEEP_ALIVE_PING_CONTENT, false))\n+                .addListener(pingWriteCompletionListener);\n+    }\n+\n+    /**\n+     * Scheduler of {@link Runnable}s.\n+     */\n+    @FunctionalInterface\n+    interface Scheduler {\n+\n+        /**\n+         * Run the passed {@link Runnable} after {@code delayInMillis} milliseconds.\n+         *\n+         * @param task {@link Runnable} to run.\n+         * @param delayInMillis Milliseconds after which the task is to be run.\n+         * @return {@link Future} for the scheduled task.\n+         */\n+        Future<?> afterMillis(Runnable task, long delayInMillis);\n+    }\n+\n+    /**\n+     * Scheduler of {@link Runnable}s.\n+     */\n+    @FunctionalInterface\n+    interface IdlenessDetector {\n+        /**\n+         * Configure idleness detection for the passed {@code channel}.\n+         *\n+         * @param channel {@link Channel} for which idleness detection is to be configured.\n+         * @param idlenessThresholdSeconds Seconds of idleness after which {@link Runnable#run()} should be called on\n+         * the passed {@code onIdle}.\n+         * @param onIdle {@link Runnable} to call when the channel is idle more than {@code idlenessThresholdSeconds}.\n+         */\n+        void configure(Channel channel, int idlenessThresholdSeconds, Runnable onIdle);\n+    }\n+\n+    private void doCloseAsyncGracefully0(final Runnable whenInitiated) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (gracefulCloseState != null) {\n+            // either we are already closed or have already initiated graceful closure.\n+            return;\n+        }\n+\n+        whenInitiated.run();\n+\n+        // Set the pingState before doing the write, because we will reference the state\n+        // when we receive the PING(ACK) to determine if action is necessary, and it is conceivable that the\n+        // write future may not be executed which sets the timer.\n+        gracefulCloseState = GRACEFUL_CLOSE_START;\n+\n+        // The graceful close process is described in [1]. It involves sending 2 GOAWAY frames. The first\n+        // GOAWAY has last-stream-id=<maximum stream ID> to indicate no new streams can be created, wait for 2 RTT\n+        // time duration for inflight frames to land, and the second GOAWAY includes the maximum known stream ID.\n+        // To account for 2 RTTs we can send a PING and when the PING(ACK) comes back we can send the second GOAWAY.\n+        // [1] https://tools.ietf.org/html/rfc7540#section-6.8\n+        DefaultHttp2GoAwayFrame goAwayFrame = new DefaultHttp2GoAwayFrame(NO_ERROR);\n+        goAwayFrame.setExtraStreamIds(Integer.MAX_VALUE);\n+        channel.write(goAwayFrame);\n+        channel.writeAndFlush(new DefaultHttp2PingFrame(GRACEFUL_CLOSE_PING_CONTENT)).addListener(future -> {\n+            // If gracefulCloseState is not GRACEFUL_CLOSE_START that means we have already received the PING(ACK) and\n+            // there is no need to apply the timeout.\n+            if (future.isSuccess() && gracefulCloseState == GRACEFUL_CLOSE_START) {\n+                gracefulCloseState = scheduler.afterMillis(() -> {\n+                    // If the PING(ACK) times out we may have under estimated the 2RTT time so we\n+                    // optimistically keep the connection open and rely upon higher level timeouts to tear\n+                    // down the connection.\n+                    LOGGER.debug(\"channel={} timeout {}ms waiting for PING(ACK) during graceful close.\",\n+                            channel, pingAckTimeoutMillis);\n+                    gracefulCloseWriteSecondGoAway();\n+                }, pingAckTimeoutMillis);\n+            }\n+        });\n+    }\n+\n+    private void gracefulCloseWriteSecondGoAway() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+            return;\n+        }\n+\n+        gracefulCloseState = GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT;\n+\n+        channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR)).addListener(future -> {\n+            if (activeChildChannels == 0) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    private void close0() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (gracefulCloseState == CLOSED && keepAliveState == CLOSED) {\n+            return;\n+        }\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+\n+        // The way netty H2 stream state machine works, we may trigger stream closures during writes with flushes\n+        // pending behind the writes. In such cases, we may close too early ignoring the writes. Hence we flush before\n+        // closure, if there is no write pending then flush is a noop.\n+        channel.flush();\n+        channel.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 308}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY0Njg0MQ==", "bodyText": "cancel(...) should never throw. So I would also not catch it.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413646841", "createdAt": "2020-04-23T09:09:09Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (RejectedExecutionException ree) {\n+                close0();\n+                LOGGER.warn(\"channel={} EventLoop rejected a task for graceful shutdown, force closing connection\",\n+                        channel, ree);\n+            }\n+        }\n+    }\n+\n+    void channelIdle() {\n+        assert channel.eventLoop().inEventLoop();\n+        assert pingWriteCompletionListener != null;\n+\n+        if (keepAliveState != null || activeChildChannels == 0 && disallowKeepAliveWithoutActiveStreams) {\n+            return;\n+        }\n+        // idleness detected for the first time, send a ping to detect closure, if any.\n+        keepAliveState = KEEP_ALIVE_ACK_PENDING;\n+        channel.writeAndFlush(new DefaultHttp2PingFrame(KEEP_ALIVE_PING_CONTENT, false))\n+                .addListener(pingWriteCompletionListener);\n+    }\n+\n+    /**\n+     * Scheduler of {@link Runnable}s.\n+     */\n+    @FunctionalInterface\n+    interface Scheduler {\n+\n+        /**\n+         * Run the passed {@link Runnable} after {@code delayInMillis} milliseconds.\n+         *\n+         * @param task {@link Runnable} to run.\n+         * @param delayInMillis Milliseconds after which the task is to be run.\n+         * @return {@link Future} for the scheduled task.\n+         */\n+        Future<?> afterMillis(Runnable task, long delayInMillis);\n+    }\n+\n+    /**\n+     * Scheduler of {@link Runnable}s.\n+     */\n+    @FunctionalInterface\n+    interface IdlenessDetector {\n+        /**\n+         * Configure idleness detection for the passed {@code channel}.\n+         *\n+         * @param channel {@link Channel} for which idleness detection is to be configured.\n+         * @param idlenessThresholdSeconds Seconds of idleness after which {@link Runnable#run()} should be called on\n+         * the passed {@code onIdle}.\n+         * @param onIdle {@link Runnable} to call when the channel is idle more than {@code idlenessThresholdSeconds}.\n+         */\n+        void configure(Channel channel, int idlenessThresholdSeconds, Runnable onIdle);\n+    }\n+\n+    private void doCloseAsyncGracefully0(final Runnable whenInitiated) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (gracefulCloseState != null) {\n+            // either we are already closed or have already initiated graceful closure.\n+            return;\n+        }\n+\n+        whenInitiated.run();\n+\n+        // Set the pingState before doing the write, because we will reference the state\n+        // when we receive the PING(ACK) to determine if action is necessary, and it is conceivable that the\n+        // write future may not be executed which sets the timer.\n+        gracefulCloseState = GRACEFUL_CLOSE_START;\n+\n+        // The graceful close process is described in [1]. It involves sending 2 GOAWAY frames. The first\n+        // GOAWAY has last-stream-id=<maximum stream ID> to indicate no new streams can be created, wait for 2 RTT\n+        // time duration for inflight frames to land, and the second GOAWAY includes the maximum known stream ID.\n+        // To account for 2 RTTs we can send a PING and when the PING(ACK) comes back we can send the second GOAWAY.\n+        // [1] https://tools.ietf.org/html/rfc7540#section-6.8\n+        DefaultHttp2GoAwayFrame goAwayFrame = new DefaultHttp2GoAwayFrame(NO_ERROR);\n+        goAwayFrame.setExtraStreamIds(Integer.MAX_VALUE);\n+        channel.write(goAwayFrame);\n+        channel.writeAndFlush(new DefaultHttp2PingFrame(GRACEFUL_CLOSE_PING_CONTENT)).addListener(future -> {\n+            // If gracefulCloseState is not GRACEFUL_CLOSE_START that means we have already received the PING(ACK) and\n+            // there is no need to apply the timeout.\n+            if (future.isSuccess() && gracefulCloseState == GRACEFUL_CLOSE_START) {\n+                gracefulCloseState = scheduler.afterMillis(() -> {\n+                    // If the PING(ACK) times out we may have under estimated the 2RTT time so we\n+                    // optimistically keep the connection open and rely upon higher level timeouts to tear\n+                    // down the connection.\n+                    LOGGER.debug(\"channel={} timeout {}ms waiting for PING(ACK) during graceful close.\",\n+                            channel, pingAckTimeoutMillis);\n+                    gracefulCloseWriteSecondGoAway();\n+                }, pingAckTimeoutMillis);\n+            }\n+        });\n+    }\n+\n+    private void gracefulCloseWriteSecondGoAway() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+            return;\n+        }\n+\n+        gracefulCloseState = GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT;\n+\n+        channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR)).addListener(future -> {\n+            if (activeChildChannels == 0) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    private void close0() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (gracefulCloseState == CLOSED && keepAliveState == CLOSED) {\n+            return;\n+        }\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+\n+        // The way netty H2 stream state machine works, we may trigger stream closures during writes with flushes\n+        // pending behind the writes. In such cases, we may close too early ignoring the writes. Hence we flush before\n+        // closure, if there is no write pending then flush is a noop.\n+        channel.flush();\n+        channel.close();\n+    }\n+\n+    private void cancelIfStateIsAFuture(@Nullable final Object state) {\n+        if (state instanceof Future) {\n+            try {\n+                ((Future<?>) state).cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 314}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjU4MDM3", "url": "https://github.com/apple/servicetalk/pull/1029#pullrequestreview-399258037", "createdAt": "2020-04-23T16:12:28Z", "commit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjoxMjoyOFrOGKwY6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowNjozNFrOGKy0eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzMTc1NA==", "bodyText": "nit: this is only used in a single place, consider just inlining it.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413931754", "createdAt": "2020-04-23T16:12:28Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0ODM2Ng==", "bodyText": "lets use the result of the atomic operation activeChildChannelsUpdater.decrementAndGet(this) == 0 instead of decrement and then re-read/check independently.\npending @idelpivnitskiy question/suggestion above maybe we can kill the atomics too and force everything on the event loop.", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413948366", "createdAt": "2020-04-23T16:33:58Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MjQ5Ng==", "bodyText": "RejectedExecutionException -> Throwable? Do we want some exceptions to potentially escape and rely upon other layers for cleanup of async control flow and force a close, or should we just force a closure here?", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413952496", "createdAt": "2020-04-23T16:39:38Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (RejectedExecutionException ree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MzE2NQ==", "bodyText": "this method reads/modifies state that is only expected to be touched in the event loop, consider just hard-closing (e.g. flush/close).", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413953165", "createdAt": "2020-04-23T16:40:36Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();\n+            idlenessDetector.configure(channel, idleInSeconds, this::channelIdle);\n+        } else {\n+            disallowKeepAliveWithoutActiveStreams = false;\n+            pingAckTimeoutMillis = DEFAULT_ACK_TIMEOUT.toMillis();\n+            pingWriteCompletionListener = null;\n+        }\n+    }\n+\n+    void pingReceived(final Http2PingFrame pingFrame) {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        if (pingFrame.ack()) {\n+            long pingAckContent = pingFrame.content();\n+            if (pingAckContent == GRACEFUL_CLOSE_PING_CONTENT) {\n+                LOGGER.debug(\"channel={}, graceful close ping ack received.\", channel);\n+                cancelIfStateIsAFuture(gracefulCloseState);\n+                gracefulCloseWriteSecondGoAway();\n+            } else if (pingAckContent == KEEP_ALIVE_PING_CONTENT) {\n+                cancelIfStateIsAFuture(keepAliveState);\n+                keepAliveState = null;\n+            }\n+        } else {\n+            // Send an ack for the received ping\n+            channel.writeAndFlush(new DefaultHttp2PingFrame(pingFrame.content(), true));\n+        }\n+    }\n+\n+    void trackActiveStream(final Channel streamChannel) {\n+        activeChildChannelsUpdater.incrementAndGet(this);\n+        streamChannel.closeFuture().addListener(f -> {\n+            activeChildChannelsUpdater.decrementAndGet(this);\n+            if (activeChildChannels == 0 && gracefulCloseState == GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT) {\n+                close0();\n+            }\n+        });\n+    }\n+\n+    void channelClosed() {\n+        assert channel.eventLoop().inEventLoop();\n+\n+        cancelIfStateIsAFuture(gracefulCloseState);\n+        cancelIfStateIsAFuture(keepAliveState);\n+        gracefulCloseState = CLOSED;\n+        keepAliveState = CLOSED;\n+    }\n+\n+    void initiateGracefulClose(final Runnable whenInitiated) {\n+        EventLoop eventLoop = channel.eventLoop();\n+        if (eventLoop.inEventLoop()) {\n+            doCloseAsyncGracefully0(whenInitiated);\n+        } else {\n+            try {\n+                eventLoop.execute(() -> doCloseAsyncGracefully0(whenInitiated));\n+            } catch (RejectedExecutionException ree) {\n+                close0();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2MDg3NQ==", "bodyText": "this will overflow to a negative number if getSeconds() > Integer.MAX_VALUE", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413960875", "createdAt": "2020-04-23T16:51:32Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,321 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.RejectedExecutionException;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutMillis;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delayInMillis) ->\n+                channel.eventLoop().schedule(task, delayInMillis, MILLISECONDS),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutMillis = keepAlivePolicy.ackTimeout().toMillis();\n+            final GenericFutureListener<Future<? super Void>> goAwayListener = f -> {\n+                if (f.isSuccess()) {\n+                    LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                    KeepAliveManager.this.close0();\n+                }\n+            };\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterMillis(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ms waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutMillis);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(goAwayListener);\n+                        }\n+                    }, pingAckTimeoutMillis);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk2OTE0OA==", "bodyText": "This utility class is in the http namespace but is specific to h2 functionality.\nWe should consider the following options:\n\nmove KeepAlivePolicy outside the scope of h2 specific scope (e.g. H2ProtocolConfig) and make it less h2 specific. I don't think the API would have to change in a material way (e.g. methods all can stay, comments may need to be adjusted). If/when we were to use it in h1 we would need some additional input from the user on sending the \"ping\" request, but I think that can be done independently of the KeepAlivePolicy API.\nOR\nclarify that this is h2 specific (e.g. add H2 in the name).", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413969148", "createdAt": "2020-04-23T17:03:10Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MTU3Ng==", "bodyText": "do we need both static factories and a builder?", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r413971576", "createdAt": "2020-04-23T17:06:34Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAlivePolicies.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import java.time.Duration;\n+\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_ACK_TIMEOUT;\n+import static io.servicetalk.http.netty.DefaultKeepAlivePolicy.DEFAULT_IDLE_DURATION;\n+import static java.time.Duration.ofDays;\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A factory to create {@link KeepAlivePolicy} instances.\n+ */\n+public final class KeepAlivePolicies {\n+    static final KeepAlivePolicy DISABLE_KEEP_ALIVE =\n+            new DefaultKeepAlivePolicy(ofDays(365), ofDays(365), false);\n+\n+    private KeepAlivePolicies() {\n+        // no instances.\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     *\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy disabled() {\n+        return DISABLE_KEEP_ALIVE;\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration}. Default values are used for other parameters\n+     * of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).build();\n+    }\n+\n+    /**\n+     * Returns a {@link KeepAlivePolicy} that sends a <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">\n+     * ping</a> if the channel is idle for the passed {@code idleDuration} and waits for {@code ackTimeout} for an ack\n+     * for that <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>. Default values are used for other\n+     * parameters of the returned {@link KeepAlivePolicy}.\n+     *\n+     * @param idleDuration {@link Duration} of idleness on a connection after which a\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a> is sent.\n+     * @param ackTimeout {@link Duration} to wait for an acknowledgment of a previously sent\n+     * <a href=\"https://tools.ietf.org/html/rfc7540#section-6.7\">ping</a>.\n+     * @return A {@link KeepAlivePolicy} that disables all keep alive behaviors.\n+     */\n+    public static KeepAlivePolicy whenIdleFor(final Duration idleDuration, final Duration ackTimeout) {\n+        return new KeepAlivePolicyBuilder().idleDuration(idleDuration).ackTimeout(ackTimeout).build();\n+    }\n+\n+    /**\n+     * A builder of {@link KeepAlivePolicy}.\n+     */\n+    public static final class KeepAlivePolicyBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de08e1e8f8615b4b427af6e92a10506945321a9"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e398ed81bf8ece9724378a4899bf76b4f60ba4e9", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/e398ed81bf8ece9724378a4899bf76b4f60ba4e9", "committedDate": "2020-04-23T22:31:23Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0348c705c7ec7d5af79c283e27dd5e4345c8743f", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/0348c705c7ec7d5af79c283e27dd5e4345c8743f", "committedDate": "2020-04-23T22:54:33Z", "message": "Some moar fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NTQ2NzQx", "url": "https://github.com/apple/servicetalk/pull/1029#pullrequestreview-399546741", "createdAt": "2020-04-23T23:32:32Z", "commit": {"oid": "0348c705c7ec7d5af79c283e27dd5e4345c8743f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozMjozMlrOGLAQkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozNTozMVrOGLAVDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MTc2Mw==", "bodyText": "KeepAlivePolicyBuilder applies a limit when setting the Idle duration, although I think it is safer to avoid overflow here and then we don't have to worry about applying a limit upfront or missing applying the limit if someone implement their own KeepAlivePolicy etc..", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r414191763", "createdAt": "2020-04-23T23:32:32Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/KeepAliveManager.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.http.netty.H2ProtocolConfig.KeepAlivePolicy;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.EventLoop;\n+import io.netty.handler.codec.http2.DefaultHttp2GoAwayFrame;\n+import io.netty.handler.codec.http2.DefaultHttp2PingFrame;\n+import io.netty.handler.codec.http2.Http2PingFrame;\n+import io.netty.handler.timeout.IdleStateEvent;\n+import io.netty.handler.timeout.IdleStateHandler;\n+import io.netty.util.concurrent.Future;\n+import io.netty.util.concurrent.GenericFutureListener;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n+import javax.annotation.Nullable;\n+\n+import static io.netty.handler.codec.http2.Http2Error.NO_ERROR;\n+import static io.servicetalk.http.netty.H2KeepAlivePolicies.DEFAULT_ACK_TIMEOUT;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+/**\n+ * An implementation of {@link KeepAlivePolicy} per {@link Channel}.\n+ */\n+final class KeepAliveManager {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(KeepAliveManager.class);\n+    private static final AtomicIntegerFieldUpdater<KeepAliveManager> activeChildChannelsUpdater =\n+            AtomicIntegerFieldUpdater.newUpdater(KeepAliveManager.class, \"activeChildChannels\");\n+    private static final long GRACEFUL_CLOSE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final long KEEP_ALIVE_PING_CONTENT = ThreadLocalRandom.current().nextLong();\n+    private static final Object CLOSED = new Object();\n+    private static final Object GRACEFUL_CLOSE_START = new Object();\n+    private static final Object GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT = new Object();\n+    private static final Object KEEP_ALIVE_ACK_PENDING = new Object();\n+    private static final Object KEEP_ALIVE_ACK_TIMEDOUT = new Object();\n+\n+    private volatile int activeChildChannels;\n+\n+    private final Channel channel;\n+    private final long pingAckTimeoutNanos;\n+    private final boolean disallowKeepAliveWithoutActiveStreams;\n+    private final Scheduler scheduler;\n+\n+    // below state should only be accessed from eventloop\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if graceful close has not started.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_START} if graceful close process has been initiated.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent to measure RTT.</li>\n+     *     <li>{@link #GRACEFUL_CLOSE_SECOND_GO_AWAY_SENT} if we have sent the second go away frame.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object gracefulCloseState;\n+\n+    /**\n+     * This stores the following possible values:\n+     * <ul>\n+     *     <li>{@code null} if keep-alive PING process is not started.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_PENDING} if a keep-alive PING has been sent but ack is not received.</li>\n+     *     <li>{@link Future} instance to timeout ack of PING sent.</li>\n+     *     <li>{@link #KEEP_ALIVE_ACK_TIMEDOUT} if we fail to receive a PING ack for the configured timeout.</li>\n+     *     <li>{@link #CLOSED} if the channel is closed.</li>\n+     * </ul>\n+     */\n+    @Nullable\n+    private Object keepAliveState;\n+    @Nullable\n+    private final GenericFutureListener<Future<? super Void>> pingWriteCompletionListener;\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy) {\n+        this(channel, keepAlivePolicy, (task, delay, unit) ->\n+                channel.eventLoop().schedule(task, delay, unit),\n+                (ch, idlenessThresholdSeconds, onIdle) -> ch.pipeline().addLast(\n+                        new IdleStateHandler(idlenessThresholdSeconds, idlenessThresholdSeconds, 0) {\n+                            @Override\n+                            protected void channelIdle(final ChannelHandlerContext ctx, final IdleStateEvent evt) {\n+                                onIdle.run();\n+                            }\n+                        }));\n+    }\n+\n+    KeepAliveManager(final Channel channel, @Nullable final KeepAlivePolicy keepAlivePolicy,\n+                     final Scheduler scheduler, final IdlenessDetector idlenessDetector) {\n+        this.channel = channel;\n+        this.scheduler = scheduler;\n+        if (keepAlivePolicy != null) {\n+            disallowKeepAliveWithoutActiveStreams = !keepAlivePolicy.withoutActiveStreams();\n+            pingAckTimeoutNanos = keepAlivePolicy.ackTimeout().toNanos();\n+            pingWriteCompletionListener = future -> {\n+                if (future.isSuccess() && keepAliveState == KEEP_ALIVE_ACK_PENDING) {\n+                    // Schedule a task to verify ping ack within the pingAckTimeoutMillis\n+                    keepAliveState = scheduler.afterDuration(() -> {\n+                        if (keepAliveState != null) {\n+                            keepAliveState = KEEP_ALIVE_ACK_TIMEDOUT;\n+                            LOGGER.debug(\n+                                    \"channel={}, timeout {}ns waiting for keep-alive PING(ACK), writing go_away.\",\n+                                    this.channel, pingAckTimeoutNanos);\n+                            channel.writeAndFlush(new DefaultHttp2GoAwayFrame(NO_ERROR))\n+                                    .addListener(f -> {\n+                                        if (f.isSuccess()) {\n+                                            LOGGER.debug(\"Closing channel={}, after keep-alive timeout.\", this.channel);\n+                                            KeepAliveManager.this.close0();\n+                                        }\n+                                    });\n+                        }\n+                    }, pingAckTimeoutNanos, NANOSECONDS);\n+                }\n+            };\n+            int idleInSeconds = (int) keepAlivePolicy.idleDuration().getSeconds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0348c705c7ec7d5af79c283e27dd5e4345c8743f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MjkxMA==", "bodyText": "use SubscriberUtils#deliverTerminalFromSource instead?", "url": "https://github.com/apple/servicetalk/pull/1029#discussion_r414192910", "createdAt": "2020-04-23T23:35:31Z", "author": {"login": "Scottmitch"}, "path": "servicetalk-transport-netty-internal/src/main/java/io/servicetalk/transport/netty/internal/NettyChannelListenableAsyncCloseable.java", "diffHunk": "@@ -82,7 +82,13 @@ public final Completable closeAsyncGracefully() {\n             @Override\n             protected void handleSubscribe(final Subscriber subscriber) {\n                 if (stateUpdater.compareAndSet(NettyChannelListenableAsyncCloseable.this, OPEN, GRACEFULLY_CLOSING)) {\n-                    doCloseAsyncGracefully();\n+                    try {\n+                        doCloseAsyncGracefully();\n+                    } catch (Throwable t) {\n+                        subscriber.onSubscribe(IGNORE_CANCEL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0348c705c7ec7d5af79c283e27dd5e4345c8743f"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDY1MjYy", "url": "https://github.com/apple/servicetalk/pull/1029#pullrequestreview-400065262", "createdAt": "2020-04-24T15:47:39Z", "commit": {"oid": "0348c705c7ec7d5af79c283e27dd5e4345c8743f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b42191c4f33ab5a9895d3eea0adbadd2a54372d", "author": {"user": {"login": "NiteshKant", "name": "Nitesh Kant"}}, "url": "https://github.com/apple/servicetalk/commit/0b42191c4f33ab5a9895d3eea0adbadd2a54372d", "committedDate": "2020-04-24T16:27:03Z", "message": "Review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3648, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}