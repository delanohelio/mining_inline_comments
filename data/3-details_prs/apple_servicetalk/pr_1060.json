{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzY5NDMx", "number": 1060, "title": "Allow chunked responses without payload body", "bodyText": "Motivation:\nSome older implementations may use connection closures as a marker of the\nend of HTTP/1.1 messages if the receiver did not receive any part of the payload\nbody before the connection closure.\nModifications:\n\nIntroduce H1SpecExceptions that allow configuring special exceptions\nfor HTTP/1.1 specification on H1ProtocolConfig;\nAdd a H1SpecExceptions#allowPrematureClosureBeforePayloadBody() option;\nAdd tests to verify that the new exception works as expected on the client side;\n\nResult:\nHttpObjectDecoder marks the chunked response as complete if server closes\nthe connection right after the headers.", "createdAt": "2020-05-19T21:15:02Z", "url": "https://github.com/apple/servicetalk/pull/1060", "merged": true, "mergeCommit": {"oid": "97f0d6039214bedaffbe7ba8e4e1ecc4206361bb"}, "closed": true, "closedAt": "2020-05-21T03:50:47Z", "author": {"login": "idelpivnitskiy"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABci2uvXAH2gAyNDIwMzY5NDMxOmQxNDY2NWRkNjZlMzFkM2IzMTlmZjZiZGNlZWYwMDlhZGQyOTQyYTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjS1gdAH2gAyNDIwMzY5NDMxOjE5OWNhYjFlNTZhODJmZmI2ZTBjYWM0NjQxNGVhODBjNGQ0OWU1ZjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d14665dd66e31d3b319ff6bdceef009add2942a2", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/d14665dd66e31d3b319ff6bdceef009add2942a2", "committedDate": "2020-05-19T16:05:26Z", "message": "Allow chunked responses without payload body\n\nMotivation:\n\nSome older server implementations may use connection closure as an indicator\nof message completion even if `Transfer-Encoding: chunked` header is present.\n\nModifications:\n\n- Introduce `H1ProtocolConfig.allowChunkedResponseWithoutBody()` that controls\nthe ability to relax `HttpResponseDecoder`;\n- Add a `H1ProtocolConfigBuilder` option for `allowChunkedResponseWithoutBody()`;\n- Add tests to verify new behavior;\n\nResult:\n\n`HttpResponseDecoder` marks the chunked response as complete if server closes\nthe connection right after the headers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a1d7d676c02f3ef4185e20b46b449c7c9c527a52", "committedDate": "2020-05-19T18:04:23Z", "message": "Add tests that verify ST still fails the response if the decoder starts reading some chunked-encoded data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0ODk4MDA1", "url": "https://github.com/apple/servicetalk/pull/1060#pullrequestreview-414898005", "createdAt": "2020-05-19T23:44:41Z", "commit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMzo0NDo0MlrOGX2ZgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwMDozNzo0OVrOGX3X8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY2MTY5Ng==", "bodyText": "Since we have decoded this buffer, this should always be true?", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427661696", "createdAt": "2020-05-19T23:44:42Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpObjectDecoder.java", "diffHunk": "@@ -448,12 +452,16 @@ protected final void decodeLast(final ChannelHandlerContext ctx, final ByteBuf i\n         // Handle the last unfinished message.\n         if (message != null) {\n             boolean chunked = isTransferEncodingChunked(message.headers());\n-            if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {\n-                // End of connection.\n-                ctx.fireChannelRead(EmptyHttpHeaders.INSTANCE);\n-                closeHandler.protocolPayloadEndInbound(ctx);\n-                resetNow();\n-                return;\n+            if (!in.isReadable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3MDg1Mg==", "bodyText": "Why is isDecodingRequest() a special case here?", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427670852", "createdAt": "2020-05-20T00:13:27Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/HttpObjectDecoder.java", "diffHunk": "@@ -448,12 +452,16 @@ protected final void decodeLast(final ChannelHandlerContext ctx, final ByteBuf i\n         // Handle the last unfinished message.\n         if (message != null) {\n             boolean chunked = isTransferEncodingChunked(message.headers());\n-            if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {\n-                // End of connection.\n-                ctx.fireChannelRead(EmptyHttpHeaders.INSTANCE);\n-                closeHandler.protocolPayloadEndInbound(ctx);\n-                resetNow();\n-                return;\n+            if (!in.isReadable()) {\n+                if ((currentState == State.READ_VARIABLE_LENGTH_CONTENT && !chunked) ||\n+                        (currentState == State.READ_CHUNK_SIZE && chunked && !isDecodingRequest() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3MjE2OA==", "bodyText": "Is it necessary to special case this only when Connection: close header is present?", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427672168", "createdAt": "2020-05-20T00:18:01Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1ProtocolConfigBuilder.java", "diffHunk": "@@ -130,14 +131,39 @@ public H1ProtocolConfigBuilder trailersEncodedSizeEstimate(final int trailersEnc\n         return this;\n     }\n \n+    /**\n+     * Defines if an HTTP/1.1 response with <a href=\"https://tools.ietf.org/html/rfc7230#section-6.1\">\n+     * Connection: close</a> and <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.1\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3MzkxMg==", "bodyText": "I am thinking if we need to make a special mention of Transfer-Encoding: chunked here?\nCan we have this option generally as allowPrematureClosureWithNoPayload()?\nWe can then generally say that if we see connection closure and no payload was received we assume there was no payload sent, unless contentLength > 0.", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427673912", "createdAt": "2020-05-20T00:24:24Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1ProtocolConfigBuilder.java", "diffHunk": "@@ -130,14 +131,39 @@ public H1ProtocolConfigBuilder trailersEncodedSizeEstimate(final int trailersEnc\n         return this;\n     }\n \n+    /**\n+     * Defines if an HTTP/1.1 response with <a href=\"https://tools.ietf.org/html/rfc7230#section-6.1\">\n+     * Connection: close</a> and <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.1\">\n+     * Transfer-Encoding: chunked</a> headers that does not start reading the\n+     * <a href=\"https://tools.ietf.org/html/rfc7230#section-4.1\">chunked-body</a> before server closes the connection\n+     * should be considered as a legit response.\n+     * <p>\n+     * While this use-case is not supported by <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.3\">RFC 7230</a>,\n+     * some older server implementations may use connection closure as an indicator of message completion even if\n+     * {@code Transfer-Encoding: chunked} header is present:\n+     * <pre>{@code\n+     *     HTTP/1.1 200 OK\n+     *     Content-Type: text/plain\n+     *     Transfer-Encoding: chunked", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NjU3NQ==", "bodyText": "It will be good if we can create a bag of spec relaxation options (expecting for more options in the future), which has the following benefits:\n\nSingle place to enable/disable all spec relaxations (better documentation around potential dangers)\nMore emphasis that these options are potentially dangerous.\nBetter visibility for users when looking for unexpected behavior, eg: check if I use one method as opposed to n.\n\nThere are a few ways to approach this:\n\nUse a hierarchical DSL like clientBuilder.secure()\nUse an independent class like H1SpecExceptions which sets the flags and then provide a method here as specExceptions(H1SpecExceptions)\nUse a single method like h1SpecExceptions(boolean allowPrematureClosureWithNoPayload) and add overloads later.\n\nOption (2) seems better to me.", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427676575", "createdAt": "2020-05-20T00:34:09Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1ProtocolConfigBuilder.java", "diffHunk": "@@ -130,14 +131,39 @@ public H1ProtocolConfigBuilder trailersEncodedSizeEstimate(final int trailersEnc\n         return this;\n     }\n \n+    /**\n+     * Defines if an HTTP/1.1 response with <a href=\"https://tools.ietf.org/html/rfc7230#section-6.1\">\n+     * Connection: close</a> and <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.1\">\n+     * Transfer-Encoding: chunked</a> headers that does not start reading the\n+     * <a href=\"https://tools.ietf.org/html/rfc7230#section-4.1\">chunked-body</a> before server closes the connection\n+     * should be considered as a legit response.\n+     * <p>\n+     * While this use-case is not supported by <a href=\"https://tools.ietf.org/html/rfc7230#section-3.3.3\">RFC 7230</a>,\n+     * some older server implementations may use connection closure as an indicator of message completion even if\n+     * {@code Transfer-Encoding: chunked} header is present:\n+     * <pre>{@code\n+     *     HTTP/1.1 200 OK\n+     *     Content-Type: text/plain\n+     *     Transfer-Encoding: chunked\n+     *     Connection: close\n+     * }</pre>\n+     *\n+     * @return {@code this}\n+     */\n+    public H1ProtocolConfigBuilder allowChunkedResponseWithoutBody() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzY3NzY4MA==", "bodyText": "Add a few negative cases?\n\nif headers are not complete then we do not infer empty payload.\nif content-length is present and we did not receive the entire content.\nif chunk-header is not complete then we do not infer empty payload.", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427677680", "createdAt": "2020-05-20T00:37:49Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ConnectionClosedAfterResponseTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.http.api.BlockingHttpClient;\n+import io.servicetalk.http.api.HttpRequest;\n+import io.servicetalk.http.api.HttpResponse;\n+import io.servicetalk.http.api.ReservedBlockingHttpConnection;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.netty.internal.EventLoopAwareNettyIoExecutor;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.EventLoop;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http.HttpRequestDecoder;\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.channels.ClosedChannelException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.netty.channel.ChannelOption.ALLOW_HALF_CLOSURE;\n+import static io.netty.channel.ChannelOption.AUTO_CLOSE;\n+import static io.netty.channel.ChannelOption.AUTO_READ;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONNECTION;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_LENGTH;\n+import static io.servicetalk.http.api.HttpHeaderNames.TRANSFER_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderValues.CHUNKED;\n+import static io.servicetalk.http.api.HttpHeaderValues.CLOSE;\n+import static io.servicetalk.http.api.HttpResponseStatus.OK;\n+import static io.servicetalk.http.api.Matchers.contentEqualTo;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.BuilderUtils.serverChannel;\n+import static io.servicetalk.transport.netty.internal.EventLoopAwareNettyIoExecutors.toEventLoopAwareNettyIoExecutor;\n+import static io.servicetalk.transport.netty.internal.GlobalExecutionContext.globalExecutionContext;\n+import static java.lang.Integer.MAX_VALUE;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThrows;\n+\n+public class ConnectionClosedAfterResponseTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0729c112ab52744a52ce39a12a6ca88a5767d629", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/0729c112ab52744a52ce39a12a6ca88a5767d629", "committedDate": "2020-05-20T04:09:13Z", "message": "Add more tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0OTg0NTc1", "url": "https://github.com/apple/servicetalk/pull/1060#pullrequestreview-414984575", "createdAt": "2020-05-20T04:31:19Z", "commit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDozMToxOVrOGX64dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDozMzozM1rOGX66NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczNTE1OA==", "bodyText": "IMHO it would be more correct to not call fireChannelRead(...) but ReferenceCountUtil.release(msg) and so consume it.", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427735158", "createdAt": "2020-05-20T04:31:19Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ConnectionClosedAfterResponseTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.http.api.BlockingHttpClient;\n+import io.servicetalk.http.api.HttpRequest;\n+import io.servicetalk.http.api.HttpResponse;\n+import io.servicetalk.http.api.ReservedBlockingHttpConnection;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.netty.internal.EventLoopAwareNettyIoExecutor;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.EventLoop;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http.HttpRequestDecoder;\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.channels.ClosedChannelException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.netty.channel.ChannelOption.ALLOW_HALF_CLOSURE;\n+import static io.netty.channel.ChannelOption.AUTO_CLOSE;\n+import static io.netty.channel.ChannelOption.AUTO_READ;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONNECTION;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_LENGTH;\n+import static io.servicetalk.http.api.HttpHeaderNames.TRANSFER_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderValues.CHUNKED;\n+import static io.servicetalk.http.api.HttpHeaderValues.CLOSE;\n+import static io.servicetalk.http.api.HttpResponseStatus.OK;\n+import static io.servicetalk.http.api.Matchers.contentEqualTo;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.BuilderUtils.serverChannel;\n+import static io.servicetalk.transport.netty.internal.EventLoopAwareNettyIoExecutors.toEventLoopAwareNettyIoExecutor;\n+import static io.servicetalk.transport.netty.internal.GlobalExecutionContext.globalExecutionContext;\n+import static java.lang.Integer.MAX_VALUE;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThrows;\n+\n+public class ConnectionClosedAfterResponseTest {\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final ServerSocketChannel server;\n+    private final BlockingHttpClient client;\n+    private final AtomicReference<CharSequence> encodedResponse = new AtomicReference<>();\n+    private final CountDownLatch connectionClosedLatch = new CountDownLatch(1);\n+\n+    public ConnectionClosedAfterResponseTest() {\n+        EventLoopAwareNettyIoExecutor eventLoopAwareNettyIoExecutor =\n+                toEventLoopAwareNettyIoExecutor(globalExecutionContext().ioExecutor());\n+        EventLoop loop = eventLoopAwareNettyIoExecutor.eventLoopGroup().next();\n+\n+        ServerBootstrap bs = new ServerBootstrap();\n+        bs.group(loop);\n+        bs.channel(serverChannel(loop, InetSocketAddress.class));\n+        bs.childHandler(new ChannelInitializer() {\n+            @Override\n+            protected void initChannel(final Channel ch) {\n+                ch.pipeline().addLast(new HttpRequestDecoder());\n+                ch.pipeline().addLast(new HttpObjectAggregator(MAX_VALUE));\n+                ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n+                    @Override\n+                    public void channelRead(final ChannelHandlerContext ctx, final Object msg) {\n+                        if (msg instanceof FullHttpRequest) {\n+                            ctx.writeAndFlush(ByteBufUtil.writeAscii(ctx.alloc(), encodedResponse.get()))\n+                                    .addListener(ChannelFutureListener.CLOSE);\n+                        }\n+                        ctx.fireChannelRead(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzczNTYwNQ==", "bodyText": "Is this also tearing down the eventLoopAwareNettyIoExecutor ? If not we need to do this as well. That said if that's the case we should close the server first as otherwise the EventLoop will be shutdown already", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r427735605", "createdAt": "2020-05-20T04:33:33Z", "author": {"login": "normanmaurer"}, "path": "servicetalk-http-netty/src/test/java/io/servicetalk/http/netty/ConnectionClosedAfterResponseTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+import io.servicetalk.concurrent.internal.ServiceTalkTestTimeout;\n+import io.servicetalk.http.api.BlockingHttpClient;\n+import io.servicetalk.http.api.HttpRequest;\n+import io.servicetalk.http.api.HttpResponse;\n+import io.servicetalk.http.api.ReservedBlockingHttpConnection;\n+import io.servicetalk.transport.api.HostAndPort;\n+import io.servicetalk.transport.netty.internal.EventLoopAwareNettyIoExecutor;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.EventLoop;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.handler.codec.http.FullHttpRequest;\n+import io.netty.handler.codec.http.HttpObjectAggregator;\n+import io.netty.handler.codec.http.HttpRequestDecoder;\n+import org.junit.After;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+import java.net.InetSocketAddress;\n+import java.nio.channels.ClosedChannelException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static io.netty.channel.ChannelOption.ALLOW_HALF_CLOSURE;\n+import static io.netty.channel.ChannelOption.AUTO_CLOSE;\n+import static io.netty.channel.ChannelOption.AUTO_READ;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONNECTION;\n+import static io.servicetalk.http.api.HttpHeaderNames.CONTENT_LENGTH;\n+import static io.servicetalk.http.api.HttpHeaderNames.TRANSFER_ENCODING;\n+import static io.servicetalk.http.api.HttpHeaderValues.CHUNKED;\n+import static io.servicetalk.http.api.HttpHeaderValues.CLOSE;\n+import static io.servicetalk.http.api.HttpResponseStatus.OK;\n+import static io.servicetalk.http.api.Matchers.contentEqualTo;\n+import static io.servicetalk.http.netty.HttpProtocolConfigs.h1;\n+import static io.servicetalk.transport.netty.internal.AddressUtils.localAddress;\n+import static io.servicetalk.transport.netty.internal.BuilderUtils.serverChannel;\n+import static io.servicetalk.transport.netty.internal.EventLoopAwareNettyIoExecutors.toEventLoopAwareNettyIoExecutor;\n+import static io.servicetalk.transport.netty.internal.GlobalExecutionContext.globalExecutionContext;\n+import static java.lang.Integer.MAX_VALUE;\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThrows;\n+\n+public class ConnectionClosedAfterResponseTest {\n+\n+    @Rule\n+    public final Timeout timeout = new ServiceTalkTestTimeout();\n+\n+    private final ServerSocketChannel server;\n+    private final BlockingHttpClient client;\n+    private final AtomicReference<CharSequence> encodedResponse = new AtomicReference<>();\n+    private final CountDownLatch connectionClosedLatch = new CountDownLatch(1);\n+\n+    public ConnectionClosedAfterResponseTest() {\n+        EventLoopAwareNettyIoExecutor eventLoopAwareNettyIoExecutor =\n+                toEventLoopAwareNettyIoExecutor(globalExecutionContext().ioExecutor());\n+        EventLoop loop = eventLoopAwareNettyIoExecutor.eventLoopGroup().next();\n+\n+        ServerBootstrap bs = new ServerBootstrap();\n+        bs.group(loop);\n+        bs.channel(serverChannel(loop, InetSocketAddress.class));\n+        bs.childHandler(new ChannelInitializer() {\n+            @Override\n+            protected void initChannel(final Channel ch) {\n+                ch.pipeline().addLast(new HttpRequestDecoder());\n+                ch.pipeline().addLast(new HttpObjectAggregator(MAX_VALUE));\n+                ch.pipeline().addLast(new ChannelInboundHandlerAdapter() {\n+                    @Override\n+                    public void channelRead(final ChannelHandlerContext ctx, final Object msg) {\n+                        if (msg instanceof FullHttpRequest) {\n+                            ctx.writeAndFlush(ByteBufUtil.writeAscii(ctx.alloc(), encodedResponse.get()))\n+                                    .addListener(ChannelFutureListener.CLOSE);\n+                        }\n+                        ctx.fireChannelRead(msg);\n+                    }\n+                });\n+            }\n+        });\n+        bs.childOption(AUTO_READ, true);\n+        bs.childOption(ALLOW_HALF_CLOSURE, true);\n+        bs.childOption(AUTO_CLOSE, false);\n+        server = (ServerSocketChannel) bs.bind(localAddress(0))\n+                .syncUninterruptibly().channel();\n+\n+        client = HttpClients.forSingleAddress(HostAndPort.of(server.localAddress()))\n+                .protocols(h1().allowChunkedResponseWithoutBody().build())\n+                .buildBlocking();\n+    }\n+\n+    @After\n+    public void turnDown() throws Exception {\n+        try {\n+            client.closeGracefully();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d7d676c02f3ef4185e20b46b449c7c9c527a52"}, "originalPosition": 119}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75e2171bc168f102a6cd49c2882a1c1b991512ed", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/75e2171bc168f102a6cd49c2882a1c1b991512ed", "committedDate": "2020-05-20T05:32:13Z", "message": "Introduce H1SpecExceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a030ee42ff3fe02cd194ebc3d16865c0fba0492", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/3a030ee42ff3fe02cd194ebc3d16865c0fba0492", "committedDate": "2020-05-20T05:37:42Z", "message": "Fix PMD error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f80b1f1a5299b1cd3b99eeccd6159e003993445", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/4f80b1f1a5299b1cd3b99eeccd6159e003993445", "committedDate": "2020-05-20T05:46:42Z", "message": "Release ref counted msg in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f50849c74c40aef9c2d38c15e0e97724f39be353", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/f50849c74c40aef9c2d38c15e0e97724f39be353", "committedDate": "2020-05-20T05:53:46Z", "message": "Update copyright years"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e749cf1c6445bd944aa55951bbccf45bbbcfa0", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/a5e749cf1c6445bd944aa55951bbccf45bbbcfa0", "committedDate": "2020-05-20T15:30:55Z", "message": "Rename constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTcyMzUz", "url": "https://github.com/apple/servicetalk/pull/1060#pullrequestreview-415572353", "createdAt": "2020-05-20T17:44:36Z", "commit": {"oid": "a5e749cf1c6445bd944aa55951bbccf45bbbcfa0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzo0NDozNlrOGYW8bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzo0ODozOFrOGYXFxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NDkyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Additional extensions for <a href=\"https://tools.ietf.org/html/rfc7230\">HTTP/1.1</a> specification that help to\n          \n          \n            \n                 * Additional exceptions for <a href=\"https://tools.ietf.org/html/rfc7230\">HTTP/1.1</a> specification that help to", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r428194924", "createdAt": "2020-05-20T17:44:36Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1ProtocolConfig.java", "diffHunk": "@@ -87,4 +87,13 @@ default String alpnId() {\n      * <a href=\"https://tools.ietf.org/html/rfc7230#section-4.1.2trailers\">trailer fields</a>\n      */\n     int trailersEncodedSizeEstimate();\n+\n+    /**\n+     * Additional extensions for <a href=\"https://tools.ietf.org/html/rfc7230\">HTTP/1.1</a> specification that help to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e749cf1c6445bd944aa55951bbccf45bbbcfa0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NTUwOA==", "bodyText": "I would suggest to remove the words after specification above. \"exceptions for specifications\" is sufficient.", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r428195508", "createdAt": "2020-05-20T17:45:35Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1ProtocolConfig.java", "diffHunk": "@@ -87,4 +87,13 @@ default String alpnId() {\n      * <a href=\"https://tools.ietf.org/html/rfc7230#section-4.1.2trailers\">trailer fields</a>\n      */\n     int trailersEncodedSizeEstimate();\n+\n+    /**\n+     * Additional extensions for <a href=\"https://tools.ietf.org/html/rfc7230\">HTTP/1.1</a> specification that help to\n+     * relax constrains for backward compatibility with older systems.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e749cf1c6445bd944aa55951bbccf45bbbcfa0"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NTgxOQ==", "bodyText": "EXTENSIONS -> EXCEPTIONS", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r428195819", "createdAt": "2020-05-20T17:46:06Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1ProtocolConfigBuilder.java", "diffHunk": "@@ -29,12 +29,15 @@\n  */\n public final class H1ProtocolConfigBuilder {\n \n+    private static final H1SpecExceptions DEFAULT_H1_SPEC_EXTENSIONS = new H1SpecExceptionsBuilder().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e749cf1c6445bd944aa55951bbccf45bbbcfa0"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE5NzMxNw==", "bodyText": "Since this is just a collection of flags and no behavior, I would suggest to make this a concrete class with a private constructor and have the builder as an inner class. It helps to reduce the level of indirections to create an instance.", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r428197317", "createdAt": "2020-05-20T17:48:38Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1SpecExceptions.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+/**\n+ * Additional extensions for <a href=\"https://tools.ietf.org/html/rfc7230\">HTTP/1.1</a> specification that help to\n+ * relax constrains for backward compatibility with older systems.\n+ */\n+public interface H1SpecExceptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e749cf1c6445bd944aa55951bbccf45bbbcfa0"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34b01ee5b28fd3ad7bc037e36727b81ff3eab03", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/c34b01ee5b28fd3ad7bc037e36727b81ff3eab03", "committedDate": "2020-05-20T18:40:43Z", "message": "Fix typos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b40e6172e9a7510e458797ecd83cae0f6ccf5d16", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/b40e6172e9a7510e458797ecd83cae0f6ccf5d16", "committedDate": "2020-05-20T18:45:56Z", "message": "Make H1SpecExceptions a class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64fb4cc1ab4a8c3316a094560bd531dd236615f3", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/64fb4cc1ab4a8c3316a094560bd531dd236615f3", "committedDate": "2020-05-20T23:24:52Z", "message": "Rename allowChunkedResponseWithoutBody -> allowPrematureClosureBeforePayloadBody"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1ODAxNDg2", "url": "https://github.com/apple/servicetalk/pull/1060#pullrequestreview-415801486", "createdAt": "2020-05-21T00:24:04Z", "commit": {"oid": "64fb4cc1ab4a8c3316a094560bd531dd236615f3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoyNDowNFrOGYiQDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMDoyNDozNFrOGYiQhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4MDE3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Allows interpreting a premature connection closures as the end of HTTP/1.1 messages if a receiver has not started\n          \n          \n            \n                 * to read the payload body yet.\n          \n          \n            \n                 * Allows interpreting connection closures as the end of HTTP/1.1 messages if the receiver did not receive any part of the payload body before the connection closure.", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r428380172", "createdAt": "2020-05-21T00:24:04Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1SpecExceptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+/**\n+ * Additional exceptions for <a href=\"https://tools.ietf.org/html/rfc7230\">HTTP/1.1</a> specification.\n+ */\n+public final class H1SpecExceptions {\n+\n+    private final boolean allowPrematureClosureBeforePayloadBody;\n+\n+    H1SpecExceptions(final boolean allowPrematureClosureBeforePayloadBody) {\n+        this.allowPrematureClosureBeforePayloadBody = allowPrematureClosureBeforePayloadBody;\n+    }\n+\n+    /**\n+     * Allows interpreting a premature connection closures as the end of HTTP/1.1 messages if a receiver has not started\n+     * to read the payload body yet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb4cc1ab4a8c3316a094560bd531dd236615f3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM4MDI5NQ==", "bodyText": "Make this private?", "url": "https://github.com/apple/servicetalk/pull/1060#discussion_r428380295", "createdAt": "2020-05-21T00:24:34Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/H1SpecExceptions.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright \u00a9 2020 Apple Inc. and the ServiceTalk project authors\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.servicetalk.http.netty;\n+\n+/**\n+ * Additional exceptions for <a href=\"https://tools.ietf.org/html/rfc7230\">HTTP/1.1</a> specification.\n+ */\n+public final class H1SpecExceptions {\n+\n+    private final boolean allowPrematureClosureBeforePayloadBody;\n+\n+    H1SpecExceptions(final boolean allowPrematureClosureBeforePayloadBody) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64fb4cc1ab4a8c3316a094560bd531dd236615f3"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "199cab1e56a82ffb6e0cac46414ea80c4d49e5f3", "author": {"user": {"login": "idelpivnitskiy", "name": "Idel Pivnitskiy"}}, "url": "https://github.com/apple/servicetalk/commit/199cab1e56a82ffb6e0cac46414ea80c4d49e5f3", "committedDate": "2020-05-21T00:50:10Z", "message": "Address comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}