{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MzgzODc2", "number": 948, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNDoyN1rODik2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNDoyN1rODik2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTgxODgyOnYy", "diffSide": "LEFT", "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ConcurrentRequestsHttpConnectionFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNDoyN1rOFt5n2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwNjowNDoyN1rOFt5n2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzY3NDMyOA==", "bodyText": "This was dead code.", "url": "https://github.com/apple/servicetalk/pull/948#discussion_r383674328", "createdAt": "2020-02-25T06:04:27Z", "author": {"login": "NiteshKant"}, "path": "servicetalk-http-netty/src/main/java/io/servicetalk/http/netty/ConcurrentRequestsHttpConnectionFilter.java", "diffHunk": "@@ -1,149 +0,0 @@\n-/*\n- * Copyright \u00a9 2018-2019 Apple Inc. and the ServiceTalk project authors\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package io.servicetalk.http.netty;\n-\n-import io.servicetalk.client.api.ConnectionClosedException;\n-import io.servicetalk.client.api.internal.MaxRequestLimitExceededRejectedSubscribeException;\n-import io.servicetalk.client.api.internal.RequestConcurrencyController;\n-import io.servicetalk.concurrent.api.Completable;\n-import io.servicetalk.concurrent.api.Publisher;\n-import io.servicetalk.concurrent.api.Single;\n-import io.servicetalk.concurrent.api.internal.SubscribableSingle;\n-import io.servicetalk.concurrent.internal.LatestValueSubscriber;\n-import io.servicetalk.http.api.FilterableStreamingHttpConnection;\n-import io.servicetalk.http.api.HttpEventKey;\n-import io.servicetalk.http.api.HttpExecutionContext;\n-import io.servicetalk.http.api.HttpExecutionStrategy;\n-import io.servicetalk.http.api.HttpRequestMethod;\n-import io.servicetalk.http.api.StreamingHttpRequest;\n-import io.servicetalk.http.api.StreamingHttpResponse;\n-import io.servicetalk.http.api.StreamingHttpResponseFactory;\n-import io.servicetalk.http.utils.BeforeFinallyOnHttpResponseOperator;\n-import io.servicetalk.transport.api.ConnectionContext;\n-\n-import static io.servicetalk.client.api.internal.RequestConcurrencyControllers.newController;\n-import static io.servicetalk.client.api.internal.RequestConcurrencyControllers.newSingleController;\n-import static io.servicetalk.concurrent.Cancellable.IGNORE_CANCEL;\n-import static io.servicetalk.concurrent.api.Executors.immediate;\n-import static io.servicetalk.concurrent.api.SourceAdapters.toSource;\n-import static io.servicetalk.http.api.HttpEventKey.MAX_CONCURRENCY;\n-\n-final class ConcurrentRequestsHttpConnectionFilter implements FilterableStreamingHttpConnection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d989b1e5e547946b9161fcc457520bf3c6d68ee"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2868, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}