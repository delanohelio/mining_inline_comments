{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4Nzc0NDc3", "number": 230, "title": "FM2-221:Add create, update, and delete for Person", "bodyText": "Link:https://issues.openmrs.org/browse/FM2-221", "createdAt": "2020-06-23T19:29:05Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230", "merged": true, "mergeCommit": {"oid": "c95416a86be350fbe731e3c31ad62cd61dd8acd5"}, "closed": true, "closedAt": "2020-07-20T19:11:50Z", "author": {"login": "gitcliff"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuuIdIAFqTQzNzQ0OTQxNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc22YnOgFqTQ1MTg3NzAyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDQ5NDE0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-437449414", "createdAt": "2020-06-25T12:37:58Z", "commit": {"oid": "a720d690061df051efc6636409419b156895c164"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjozNzo1OVrOGo4rAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjo0OTo0OVrOGo5GMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyNDczOQ==", "bodyText": "return FhirProviderUtils.buildDelete(person);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r445524739", "createdAt": "2020-06-25T12:37:59Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Person getPersonById(@IdParam @NotNull IdType id) {\n \t\treturn Person30_40.convertPerson(person);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPerson(@ResourceParam Person person) {\n+\t\treturn FhirProviderUtils.buildCreate(personService.create(Person30_40.convertPerson(person)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePerson(@IdParam IdType id, @ResourceParam Person person) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tperson.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(personService.update(id.getIdPart(),\n+\t\t    Person30_40.convertPerson(person)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePerson(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Person person = personService.delete(id.getIdPart());\n+\t\tif (person == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find person to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a720d690061df051efc6636409419b156895c164"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyNjQ3Mw==", "bodyText": "Newline at the end of the file", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r445526473", "createdAt": "2020-06-25T12:41:00Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_UpdateWithWrongId.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"id\": \"0b42f99b-996e-4388-8f6f-34757ae2a3fb\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+\n+}   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a720d690061df051efc6636409419b156895c164"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMDk1MA==", "bodyText": "This the wrong import. It should be;\nimport org.hl7.fhir.r4.model.OperationOutcome;", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r445530950", "createdAt": "2020-06-25T12:48:31Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProvider.java", "diffHunk": "@@ -13,26 +13,36 @@\n \n import java.util.List;\n \n+import ca.uhn.fhir.rest.annotation.Create;\n+import ca.uhn.fhir.rest.annotation.Delete;\n import ca.uhn.fhir.rest.annotation.History;\n import ca.uhn.fhir.rest.annotation.IdParam;\n import ca.uhn.fhir.rest.annotation.OptionalParam;\n import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.ResourceParam;\n import ca.uhn.fhir.rest.annotation.Search;\n import ca.uhn.fhir.rest.annotation.Sort;\n+import ca.uhn.fhir.rest.annotation.Update;\n+import ca.uhn.fhir.rest.api.MethodOutcome;\n import ca.uhn.fhir.rest.api.SortSpec;\n import ca.uhn.fhir.rest.api.server.IBundleProvider;\n import ca.uhn.fhir.rest.param.DateRangeParam;\n import ca.uhn.fhir.rest.param.StringAndListParam;\n import ca.uhn.fhir.rest.param.TokenAndListParam;\n import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.InvalidRequestException;\n import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n import lombok.AccessLevel;\n import lombok.Setter;\n+\n+import org.hl7.fhir.convertors.conv30_40.Person30_40;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a720d690061df051efc6636409419b156895c164"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUzMTY5Nw==", "bodyText": "It should be import org.hl7.fhir.r4.model.OperationOutcome; for R4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r445531697", "createdAt": "2020-06-25T12:49:49Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -34,8 +37,11 @@\n import ca.uhn.fhir.rest.param.TokenAndListParam;\n import lombok.AccessLevel;\n import lombok.Getter;\n+\n+import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.time.DateUtils;\n import org.hamcrest.MatcherAssert;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a720d690061df051efc6636409419b156895c164"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a720d690061df051efc6636409419b156895c164", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a720d690061df051efc6636409419b156895c164", "committedDate": "2020-06-23T19:26:39Z", "message": "FM2-221:Add create, update, and delete for Person"}, "afterCommit": {"oid": "9cb1c3db37a5d0b924c0c88afa04f06f817c1c41", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9cb1c3db37a5d0b924c0c88afa04f06f817c1c41", "committedDate": "2020-06-25T19:11:19Z", "message": "FM2-221:Add create, update, and delete for Person"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cb1c3db37a5d0b924c0c88afa04f06f817c1c41", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9cb1c3db37a5d0b924c0c88afa04f06f817c1c41", "committedDate": "2020-06-25T19:11:19Z", "message": "FM2-221:Add create, update, and delete for Person"}, "afterCommit": {"oid": "4b600011433186a24887b42ddfb5c788e0a328be", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4b600011433186a24887b42ddfb5c788e0a328be", "committedDate": "2020-06-26T11:38:37Z", "message": "FM2-221:Add create, update, and delete for Person"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njg4NzM5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-438688739", "createdAt": "2020-06-27T10:33:46Z", "commit": {"oid": "4b600011433186a24887b42ddfb5c788e0a328be"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDozMzo0NlrOGp03FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMToyOTowNVrOGp1H8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDg2OA==", "bodyText": "@gitcliff  change the operation outcome to use\nreturn FhirProviderUtils.buildDelete(person);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r446510868", "createdAt": "2020-06-27T10:33:46Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Person getPersonById(@IdParam @NotNull IdType id) {\n \t\treturn Person30_40.convertPerson(person);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPerson(@ResourceParam Person person) {\n+\t\treturn FhirProviderUtils.buildCreate(personService.create(Person30_40.convertPerson(person)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePerson(@IdParam IdType id, @ResourceParam Person person) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tperson.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(personService.update(id.getIdPart(),\n+\t\t    Person30_40.convertPerson(person)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic org.hl7.fhir.r4.model.OperationOutcome deletePerson(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Person person = personService.delete(id.getIdPart());\n+\t\tif (person == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find person to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b600011433186a24887b42ddfb5c788e0a328be"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDkxOA==", "bodyText": "ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r446510918", "createdAt": "2020-06-27T10:34:14Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProvider.java", "diffHunk": "@@ -60,6 +70,36 @@ public Person getPersonById(@IdParam IdType id) {\n \t\treturn person;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPerson(@ResourceParam Person person) {\n+\t\treturn FhirProviderUtils.buildCreate(fhirPersonService.create(person));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePerson(@IdParam IdType id, @ResourceParam Person person) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tperson.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(fhirPersonService.update(id.getIdPart(),person));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePerson(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Person person = fhirPersonService.delete(id.getIdPart());\n+\t\tif (person == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find person to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b600011433186a24887b42ddfb5c788e0a328be"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMTEzMg==", "bodyText": "change according to the util method.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r446511132", "createdAt": "2020-06-27T10:37:04Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderTest.java", "diffHunk": "@@ -283,4 +287,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getPersonHistoryById(idType).size(), equalTo(0));\n \t}\n \t\n+\t@Test\n+\tpublic void updatePerson_shouldUpdatePerson() {\n+\t\tPerson newPerson = person;\n+\t\t\n+\t\twhen(fhirPersonService.update(PERSON_UUID, person)).thenReturn(newPerson);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updatePerson(new IdType().setValue(PERSON_UUID), person);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPerson));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePerson_shouldThrowInvalidRequestExceptionForWrongPersonUuid() {\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, person)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), person);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePersonShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPerson wrongPerson = new Person();\n+\t\t\n+\t\twrongPerson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, wrongPerson)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), wrongPerson);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deletePerson_shouldDeletePerson() {\n+\t\tPerson newPerson = new Person();\n+\t\t\n+\t\twhen(fhirPersonService.delete(PERSON_UUID)).thenReturn(newPerson);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePerson(new IdType().setValue(PERSON_UUID));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getId(), equalTo(PERSON_UUID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b600011433186a24887b42ddfb5c788e0a328be"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxNTE4Nw==", "bodyText": "you can use the same person object no need to create a new one", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r446515187", "createdAt": "2020-06-27T11:29:05Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderTest.java", "diffHunk": "@@ -283,4 +287,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getPersonHistoryById(idType).size(), equalTo(0));\n \t}\n \t\n+\t@Test\n+\tpublic void updatePerson_shouldUpdatePerson() {\n+\t\tPerson newPerson = person;\n+\t\t\n+\t\twhen(fhirPersonService.update(PERSON_UUID, person)).thenReturn(newPerson);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updatePerson(new IdType().setValue(PERSON_UUID), person);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newPerson));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePerson_shouldThrowInvalidRequestExceptionForWrongPersonUuid() {\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, person)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), person);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePersonShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tPerson wrongPerson = new Person();\n+\t\t\n+\t\twrongPerson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, wrongPerson)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), wrongPerson);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deletePerson_shouldDeletePerson() {\n+\t\tPerson newPerson = new Person();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b600011433186a24887b42ddfb5c788e0a328be"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b600011433186a24887b42ddfb5c788e0a328be", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4b600011433186a24887b42ddfb5c788e0a328be", "committedDate": "2020-06-26T11:38:37Z", "message": "FM2-221:Add create, update, and delete for Person"}, "afterCommit": {"oid": "0f375855395333448956a456d72c7b293284c9db", "author": {"user": {"login": "corneliouzbett", "name": "Kipchumba C. Bett"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0f375855395333448956a456d72c7b293284c9db", "committedDate": "2020-06-29T07:49:47Z", "message": "Few changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTgzOTM2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-438983936", "createdAt": "2020-06-29T08:21:31Z", "commit": {"oid": "0f375855395333448956a456d72c7b293284c9db"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f375855395333448956a456d72c7b293284c9db", "author": {"user": {"login": "corneliouzbett", "name": "Kipchumba C. Bett"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0f375855395333448956a456d72c7b293284c9db", "committedDate": "2020-06-29T07:49:47Z", "message": "Few changes"}, "afterCommit": {"oid": "f0b3bab5d3090b6df87d3b9a9650ce53a4ac000d", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f0b3bab5d3090b6df87d3b9a9650ce53a4ac000d", "committedDate": "2020-06-29T18:51:05Z", "message": "FM2-221:Add create, update, and delete for Person"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbef5fd8c73cb869113aa2a5b46b3510521355cb", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/fbef5fd8c73cb869113aa2a5b46b3510521355cb", "committedDate": "2020-06-29T19:39:02Z", "message": "Update PersonWebTest_update.json"}, "afterCommit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7b705e484ca827917f8ac8bf62720b87f4c94cae", "committedDate": "2020-07-01T07:26:00Z", "message": "FM2-221:Add create, update, and delete for Person"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODE5MzE0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-442819314", "createdAt": "2020-07-06T07:03:08Z", "commit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzowMzowOFrOGtLIQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNzowNjoxMFrOGtLNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTQ0Mg==", "bodyText": "return FhirProviderUtils.buildDelete(Person30_40.convertPerson(person)));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r450021442", "createdAt": "2020-07-06T07:03:08Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProvider.java", "diffHunk": "@@ -62,6 +72,34 @@ public Person getPersonById(@IdParam @NotNull IdType id) {\n \t\treturn Person30_40.convertPerson(person);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPerson(@ResourceParam Person person) {\n+\t\treturn FhirProviderUtils.buildCreate(personService.create(Person30_40.convertPerson(person)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePerson(@IdParam IdType id, @ResourceParam Person person) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tperson.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(personService.update(id.getIdPart(), Person30_40.convertPerson(person)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePerson(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Person person = personService.delete(id.getIdPart());\n+\t\tif (person == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find person to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(person));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjA0Nw==", "bodyText": "Add newline", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r450022047", "createdAt": "2020-07-06T07:04:35Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_create.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+\n+\n+\n+}   \n+ \n+ \n+ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjcxMw==", "bodyText": "Remove unnecessary extra spaces/blank lines. This applies to other JSON files", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r450022713", "createdAt": "2020-07-06T07:06:10Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_update.json", "diffHunk": "@@ -0,0 +1,16 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"id\": \"8a849d5e-6011-4279-a124-40ada5a687de\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDE4NzAy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-443018702", "createdAt": "2020-07-06T12:11:38Z", "commit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoxMTozOFrOGtUqYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoxMTozOFrOGtUqYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3NzYzMw==", "bodyText": "Thanks @gitcliff  for this , i know this method does not affect the code however  by following code convention, would suggest something different like Public void updatePerson_shouldReturnErrorForNoId()  you can frase it your way , take a look at that method", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r450177633", "createdAt": "2020-07-06T12:11:38Z", "author": {"login": "sherrif10"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -408,4 +424,89 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae"}, "originalPosition": 98}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7b705e484ca827917f8ac8bf62720b87f4c94cae", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7b705e484ca827917f8ac8bf62720b87f4c94cae", "committedDate": "2020-07-01T07:26:00Z", "message": "FM2-221:Add create, update, and delete for Person"}, "afterCommit": {"oid": "acdae666b91a64935791719f76321e195907ed61", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/acdae666b91a64935791719f76321e195907ed61", "committedDate": "2020-07-06T18:54:18Z", "message": "FM2-221:Add create, update, and delete for Person"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MzcxMzI5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-446371329", "createdAt": "2020-07-10T12:46:23Z", "commit": {"oid": "acdae666b91a64935791719f76321e195907ed61"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjQ0Mjc3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-447244277", "createdAt": "2020-07-13T13:22:14Z", "commit": {"oid": "acdae666b91a64935791719f76321e195907ed61"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyMjoxNFrOGwoR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyMjoxNFrOGwoR0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NDc1NQ==", "bodyText": "Please remove extra spaces throughout the PR.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r453644755", "createdAt": "2020-07-13T13:22:14Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_update.json", "diffHunk": "@@ -0,0 +1,14 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"id\": \"8a849d5e-6011-4279-a124-40ada5a687de\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+\n+}  \n+\n+ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acdae666b91a64935791719f76321e195907ed61"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "acdae666b91a64935791719f76321e195907ed61", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/acdae666b91a64935791719f76321e195907ed61", "committedDate": "2020-07-06T18:54:18Z", "message": "FM2-221:Add create, update, and delete for Person"}, "afterCommit": {"oid": "c44edc8f54a44da24155ff630c2835c4b1ca3724", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c44edc8f54a44da24155ff630c2835c4b1ca3724", "committedDate": "2020-07-14T19:24:29Z", "message": "FM2-221:removing extra spaces"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTI5NDgx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-448929481", "createdAt": "2020-07-15T13:02:46Z", "commit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzowMjo0N1rOGx9CBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzoyMjo0OVrOGx93Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzMzM0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Person person = fhirPersonService.delete(id.getIdPart());\n          \n          \n            \n            \t\tPerson person = fhirPersonService.delete(id.getIdPart());", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455033348", "createdAt": "2020-07-15T13:02:47Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProvider.java", "diffHunk": "@@ -60,6 +69,33 @@ public Person getPersonById(@IdParam IdType id) {\n \t\treturn person;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createPerson(@ResourceParam Person person) {\n+\t\treturn FhirProviderUtils.buildCreate(fhirPersonService.create(person));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updatePerson(@IdParam IdType id, @ResourceParam Person person) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tperson.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(fhirPersonService.update(id.getIdPart(), person));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deletePerson(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Person person = fhirPersonService.delete(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzNzM1MA==", "bodyText": "We can remove this particular test because the test below is exactly the same.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455037350", "createdAt": "2020-07-15T13:09:08Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderTest.java", "diffHunk": "@@ -328,4 +337,71 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getPersonHistoryById(idType).size(), equalTo(0));\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreateNewPerson() {\n+\t\twhen(fhirPersonService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMethodOutcome result = resourceProvider.createPerson(Person30_40.convertPerson(person));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(person));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePerson_shouldDeletePerson() {\n+\n+\t\twhen(fhirPersonService.delete(PERSON_UUID)).thenReturn(person);\n+\n+\t\tOperationOutcome result = resourceProvider.deletePerson(new IdType().setValue(PERSON_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssue(), notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePerson_shouldThrowResourceNotFoundException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzODA4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updatePersonShouldThrowMethodNotAllowedIfDoesNotExist() {\n          \n          \n            \n            \tpublic void updatePerson_shouldThrowMethodNotAllowedIfDoesNotExist() {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455038089", "createdAt": "2020-07-15T13:10:10Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderTest.java", "diffHunk": "@@ -328,4 +333,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getPersonHistoryById(idType).size(), equalTo(0));\n \t}\n \t\n+\t@Test\n+\tpublic void updatePerson_shouldUpdatePerson() {\n+\t\t\n+\t\twhen(fhirPersonService.update(PERSON_UUID, person)).thenReturn(person);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updatePerson(new IdType().setValue(PERSON_UUID), person);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(person));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePerson_shouldThrowInvalidRequestExceptionForWrongPersonUuid() {\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, person)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), person);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePersonShouldThrowMethodNotAllowedIfDoesNotExist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzODY5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePerson(new IdType().setValue(PERSON_UUID));\n          \n          \n            \n            \t\tOperationOutcome result = resourceProvider.deletePerson(new IdType().setValue(PERSON_UUID));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455038696", "createdAt": "2020-07-15T13:11:09Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderTest.java", "diffHunk": "@@ -328,4 +333,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getPersonHistoryById(idType).size(), equalTo(0));\n \t}\n \t\n+\t@Test\n+\tpublic void updatePerson_shouldUpdatePerson() {\n+\t\t\n+\t\twhen(fhirPersonService.update(PERSON_UUID, person)).thenReturn(person);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updatePerson(new IdType().setValue(PERSON_UUID), person);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(person));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePerson_shouldThrowInvalidRequestExceptionForWrongPersonUuid() {\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, person)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), person);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePersonShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\t\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, person)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), person);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deletePerson_shouldDeletePerson() {\n+\n+\t\twhen(fhirPersonService.delete(PERSON_UUID)).thenReturn(person);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePerson(new IdType().setValue(PERSON_UUID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MjQ1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tIdType id = new IdType();\n          \n          \n            \n            \t\tid.setValue(WRONG_PERSON_UUID);\n          \n          \n            \n            \t\torg.hl7.fhir.r4.model.OperationOutcome person = resourceProvider.deletePerson(id);\n          \n          \n            \n            \t\tassertThat(person, nullValue());\n          \n          \n            \n            \t\twhen(fhirPersonService.delete(WRONG_PERSON_UUID)).thenReturn(null);\n          \n          \n            \n            \t\tresourceProvider.deletePerson(new IdType().setValue(WRONG_PERSON_UUID));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455042452", "createdAt": "2020-07-15T13:16:37Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderTest.java", "diffHunk": "@@ -328,4 +333,62 @@ public void getPatientHistoryByWithWrongId_shouldThrowResourceNotFoundException(\n \t\tassertThat(resourceProvider.getPersonHistoryById(idType).size(), equalTo(0));\n \t}\n \t\n+\t@Test\n+\tpublic void updatePerson_shouldUpdatePerson() {\n+\t\t\n+\t\twhen(fhirPersonService.update(PERSON_UUID, person)).thenReturn(person);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updatePerson(new IdType().setValue(PERSON_UUID), person);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(person));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updatePerson_shouldThrowInvalidRequestExceptionForWrongPersonUuid() {\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, person)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), person);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updatePersonShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\t\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\twhen(fhirPersonService.update(WRONG_PERSON_UUID, person)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updatePerson(new IdType().setValue(WRONG_PERSON_UUID), person);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deletePerson_shouldDeletePerson() {\n+\n+\t\twhen(fhirPersonService.delete(PERSON_UUID)).thenReturn(person);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider.deletePerson(new IdType().setValue(PERSON_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\t\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deletePerson_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_PERSON_UUID);\n+\t\torg.hl7.fhir.r4.model.OperationOutcome person = resourceProvider.deletePerson(id);\n+\t\tassertThat(person, nullValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzE0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updatePerson_shouldErrorForNoId() throws Exception {\n          \n          \n            \n            \tpublic void updatePerson_shouldThrowErrorForNoId() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455043143", "createdAt": "2020-07-15T13:17:38Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,89 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0MzY2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updatePerson_shouldErrorForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updatePerson_shouldThrowErrorForIdMisMatch() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455043666", "createdAt": "2020-07-15T13:18:20Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,89 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NDM1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n          \n          \n            \n            \t\tPerson person = new Person();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455044350", "createdAt": "2020-07-15T13:19:17Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,88 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NDQ4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n          \n          \n            \n            \t\twhen(personService.create(any(Person.class))).thenReturn(person);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455044480", "createdAt": "2020-07-15T13:19:25Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,88 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NDY3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n          \n          \n            \n            \t\tPerson person = new Person();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455044672", "createdAt": "2020-07-15T13:19:39Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,88 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NDc4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n          \n          \n            \n            \t\twhen(personService.update(anyString(), any(Person.class))).thenReturn(person);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455044782", "createdAt": "2020-07-15T13:19:47Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,88 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NTA3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updatePerson_shouldErrorForNoId() throws Exception {\n          \n          \n            \n            \tpublic void updatePerson_shouldThrowErrorForNoId() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455045076", "createdAt": "2020-07-15T13:20:10Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,88 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NTM0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updatePerson_shouldErrorForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updatePerson_shouldThrowErrorForIdMisMatch() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455045347", "createdAt": "2020-07-15T13:20:29Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,88 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NTQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n          \n          \n            \n            \t\tPerson person = new Person();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455045482", "createdAt": "2020-07-15T13:20:40Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +457,88 @@ private MockHttpServletResponse getPersonHistoryByIdRequest() throws IOException\n \t\treturn get(\"/Person/\" + PERSON_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createPerson_shouldCreatePerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.create(any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = post(\"/Person\").jsonContent(jsonPerson).accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldUpdateExistingPerson() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();\n+\t\tperson.setId(PERSON_UUID);\n+\n+\t\twhen(personService.update(anyString(), any(org.hl7.fhir.r4.model.Person.class))).thenReturn(person);\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForNoId() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + PERSON_UUID).jsonContent(jsonPerson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updatePerson_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_PERSON_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(jsonPerson)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\n+\t@Test\n+\tpublic void deletePerson_shouldDeletePerson() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(PERSON_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\n+\t\torg.hl7.fhir.r4.model.Person person = new org.hl7.fhir.r4.model.Person();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjQwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            } \n          \n          \n            \n             \n          \n          \n            \n            }", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455046400", "createdAt": "2020-07-15T13:22:00Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_UpdateWithWrongId.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"id\": \"0b42f99b-996e-4388-8f6f-34757ae2a3fb\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+} \n+ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0NjcwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n               \n          \n          \n            \n            }", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455046709", "createdAt": "2020-07-15T13:22:26Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_UpdateWithoutId.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+}\n+   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA0Njk3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }   \n          \n          \n            \n             \n          \n          \n            \n            }", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455046979", "createdAt": "2020-07-15T13:22:49Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_create.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+}   \n+ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522029dd38e8a8c0b781da2cb3d5d9e1c94fec09", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/522029dd38e8a8c0b781da2cb3d5d9e1c94fec09", "committedDate": "2020-07-15T13:51:34Z", "message": "FM2-221:Add create, update, and delete for Person"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3735f14b14e933a0d29aab64a4418105cfef73d1", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3735f14b14e933a0d29aab64a4418105cfef73d1", "committedDate": "2020-07-15T13:51:35Z", "message": "FM2-221:removing extra spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b544ee9f488117ffa392b0bfef5904b20e69fcb4", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b544ee9f488117ffa392b0bfef5904b20e69fcb4", "committedDate": "2020-07-15T13:51:37Z", "message": "FM2-221:fixing formattings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b384d3732bef71c66c07e877a570e74237e789", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/22b384d3732bef71c66c07e877a570e74237e789", "committedDate": "2020-07-15T14:29:15Z", "message": "FM2-221:fixing formats"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e3ffaa6f7722dda94d061c582bcbac37297f1c1", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9e3ffaa6f7722dda94d061c582bcbac37297f1c1", "committedDate": "2020-07-14T19:36:37Z", "message": "FM2-221:fixing formattings"}, "afterCommit": {"oid": "22b384d3732bef71c66c07e877a570e74237e789", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/22b384d3732bef71c66c07e877a570e74237e789", "committedDate": "2020-07-15T14:29:15Z", "message": "FM2-221:fixing formats"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MTkyMjEz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-449192213", "createdAt": "2020-07-15T17:46:42Z", "commit": {"oid": "22b384d3732bef71c66c07e877a570e74237e789"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0Njo0MlrOGyJFIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzo0NzowOFrOGyJGCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMDc1Mg==", "bodyText": "It's always good to end a file with a new line. Please add a new line here.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455230752", "createdAt": "2020-07-15T17:46:42Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_UpdateWithWrongId.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"id\": \"0b42f99b-996e-4388-8f6f-34757ae2a3fb\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+}  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b384d3732bef71c66c07e877a570e74237e789"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMDgwOQ==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455230809", "createdAt": "2020-07-15T17:46:50Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_UpdateWithoutId.json", "diffHunk": "@@ -0,0 +1,9 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+}  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b384d3732bef71c66c07e877a570e74237e789"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMDg4Mw==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455230883", "createdAt": "2020-07-15T17:46:59Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_create.json", "diffHunk": "@@ -0,0 +1,9 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+}   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b384d3732bef71c66c07e877a570e74237e789"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIzMDk4NA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#discussion_r455230984", "createdAt": "2020-07-15T17:47:08Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_update.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Person\",\n+  \"id\": \"8a849d5e-6011-4279-a124-40ada5a687de\",\n+  \"name\": \"adam\",\n+  \"gender\": \"male\",\n+  \"birthdate\": \"2004-08-12 00:00:00.0\",\n+  \"state\": \"mukono\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\"\n+}  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22b384d3732bef71c66c07e877a570e74237e789"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c62017aadbb2ee57d497dd95343c17917cf9da33", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c62017aadbb2ee57d497dd95343c17917cf9da33", "committedDate": "2020-07-15T18:43:17Z", "message": "FM2-221:Fix formattings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjM4NTM0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-449238534", "createdAt": "2020-07-15T18:49:39Z", "commit": {"oid": "c62017aadbb2ee57d497dd95343c17917cf9da33"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "490d9d485020b691646e60f6628b99c9a97a9f4c", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/490d9d485020b691646e60f6628b99c9a97a9f4c", "committedDate": "2020-07-20T18:59:18Z", "message": "Update PersonWebTest_create.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc8042ca3474054b8bde66c0a21f34deca89018b", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/cc8042ca3474054b8bde66c0a21f34deca89018b", "committedDate": "2020-07-20T18:59:35Z", "message": "Update PersonWebTest_UpdateWithWrongId.json"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODc3MDI3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/230#pullrequestreview-451877027", "createdAt": "2020-07-20T18:59:45Z", "commit": {"oid": "cc8042ca3474054b8bde66c0a21f34deca89018b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4120, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}