{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTY5MTE1", "number": 87, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzozNjoyNFrODitBMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzozNjoyNFrODitBMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NzE1NzYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzozNjoyNFrOFuGQhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMDo1NjoxM1rOFuU5Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTM1MA==", "bodyText": "I'd prefer if this constant was referenced from a constant location, even if it ends up in FhirConstants.\n\n\nInstead of calling getGlobalProperty() twice, call it once. This could be rewritten as globalPropertyService.getGlobalProperty(FhirConstants.ALLERGY_MILD, \"\").equals(severityConcept.getUuid()). This is because each call to getGlobalProperty() results in a query to the database.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/87#discussion_r383881350", "createdAt": "2020-02-25T13:36:24Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -124,4 +167,75 @@ private boolean isAllergyInactive(CodeableConcept status) {\n \t\t        .anyMatch(c -> \"inactive\".equals(c.getCode()));\n \t}\n \t\n+\tprivate CodeableConcept getAllergySubstance(Allergen allergen) {\n+\t\tif (allergen.getCodedAllergen() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept allergySubstance = new CodeableConcept();\n+\t\tCoding code = new Coding(FhirConstants.ALLERGY_SUBSTANCE_VALUE_SET_URI, allergen.getCodedAllergen().getUuid(),\n+\t\t        allergen.getNonCodedAllergen());\n+\t\tallergySubstance.addCoding(code);\n+\t\tallergySubstance.setText(\"allergen.getNonCodedAllergen()\");\n+\t\t\n+\t\treturn allergySubstance;\n+\t}\n+\t\n+\tprivate CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n+\t\tCodeableConcept manifestations = new CodeableConcept();\n+\t\tfor (AllergyReaction reaction : reactions) {\n+\t\t\tCoding code = new Coding(FhirConstants.CLINICAL_FINDINGS_VALUE_SET_URI, reaction.getUuid(),\n+\t\t\t        reaction.getReactionNonCoded());\n+\t\t\tmanifestations.addCoding(code);\n+\t\t\tmanifestations.setText(reaction.getReactionNonCoded());\n+\t\t}\n+\t\t\n+\t\treturn manifestations;\n+\t}\n+\t\n+\tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null && globalPropertyService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6493c7d3db7f6ad22d2b598628a40bac02433ad1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1ODg4MQ==", "bodyText": "@ibacher i'm working on the tests, also i'll move those values to constant", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/87#discussion_r383958881", "createdAt": "2020-02-25T15:39:27Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -124,4 +167,75 @@ private boolean isAllergyInactive(CodeableConcept status) {\n \t\t        .anyMatch(c -> \"inactive\".equals(c.getCode()));\n \t}\n \t\n+\tprivate CodeableConcept getAllergySubstance(Allergen allergen) {\n+\t\tif (allergen.getCodedAllergen() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept allergySubstance = new CodeableConcept();\n+\t\tCoding code = new Coding(FhirConstants.ALLERGY_SUBSTANCE_VALUE_SET_URI, allergen.getCodedAllergen().getUuid(),\n+\t\t        allergen.getNonCodedAllergen());\n+\t\tallergySubstance.addCoding(code);\n+\t\tallergySubstance.setText(\"allergen.getNonCodedAllergen()\");\n+\t\t\n+\t\treturn allergySubstance;\n+\t}\n+\t\n+\tprivate CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n+\t\tCodeableConcept manifestations = new CodeableConcept();\n+\t\tfor (AllergyReaction reaction : reactions) {\n+\t\t\tCoding code = new Coding(FhirConstants.CLINICAL_FINDINGS_VALUE_SET_URI, reaction.getUuid(),\n+\t\t\t        reaction.getReactionNonCoded());\n+\t\t\tmanifestations.addCoding(code);\n+\t\t\tmanifestations.setText(reaction.getReactionNonCoded());\n+\t\t}\n+\t\t\n+\t\treturn manifestations;\n+\t}\n+\t\n+\tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null && globalPropertyService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTM1MA=="}, "originalCommit": {"oid": "6493c7d3db7f6ad22d2b598628a40bac02433ad1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDAyMzU1Ng==", "bodyText": "@ibacher without this check globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null\ni'm getting  java.lang.NullPointerException", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/87#discussion_r384023556", "createdAt": "2020-02-25T17:34:51Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -124,4 +167,75 @@ private boolean isAllergyInactive(CodeableConcept status) {\n \t\t        .anyMatch(c -> \"inactive\".equals(c.getCode()));\n \t}\n \t\n+\tprivate CodeableConcept getAllergySubstance(Allergen allergen) {\n+\t\tif (allergen.getCodedAllergen() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept allergySubstance = new CodeableConcept();\n+\t\tCoding code = new Coding(FhirConstants.ALLERGY_SUBSTANCE_VALUE_SET_URI, allergen.getCodedAllergen().getUuid(),\n+\t\t        allergen.getNonCodedAllergen());\n+\t\tallergySubstance.addCoding(code);\n+\t\tallergySubstance.setText(\"allergen.getNonCodedAllergen()\");\n+\t\t\n+\t\treturn allergySubstance;\n+\t}\n+\t\n+\tprivate CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n+\t\tCodeableConcept manifestations = new CodeableConcept();\n+\t\tfor (AllergyReaction reaction : reactions) {\n+\t\t\tCoding code = new Coding(FhirConstants.CLINICAL_FINDINGS_VALUE_SET_URI, reaction.getUuid(),\n+\t\t\t        reaction.getReactionNonCoded());\n+\t\t\tmanifestations.addCoding(code);\n+\t\t\tmanifestations.setText(reaction.getReactionNonCoded());\n+\t\t}\n+\t\t\n+\t\treturn manifestations;\n+\t}\n+\t\n+\tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null && globalPropertyService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTM1MA=="}, "originalCommit": {"oid": "6493c7d3db7f6ad22d2b598628a40bac02433ad1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1MDg4Mg==", "bodyText": "Right, sorry, I forgot this was our GlobalProperty service. Add a method to it like this:\n@Override\n@Transactional(readOnly = true)\npublic String getGlobalProperty(String property, String defaultValue) throws APIException {\n\tString result = dao.getGlobalProperty(property);\n\treturn result == null ? defaultValue : result;\n}\nand use that. Alternatively, use this pattern:\nString gp = globalPropertyService.getGlobalProperty(...);\n\nif (gp != null && gp.equals(...)) {\n\t// ...\n}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/87#discussion_r384050882", "createdAt": "2020-02-25T18:40:16Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -124,4 +167,75 @@ private boolean isAllergyInactive(CodeableConcept status) {\n \t\t        .anyMatch(c -> \"inactive\".equals(c.getCode()));\n \t}\n \t\n+\tprivate CodeableConcept getAllergySubstance(Allergen allergen) {\n+\t\tif (allergen.getCodedAllergen() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept allergySubstance = new CodeableConcept();\n+\t\tCoding code = new Coding(FhirConstants.ALLERGY_SUBSTANCE_VALUE_SET_URI, allergen.getCodedAllergen().getUuid(),\n+\t\t        allergen.getNonCodedAllergen());\n+\t\tallergySubstance.addCoding(code);\n+\t\tallergySubstance.setText(\"allergen.getNonCodedAllergen()\");\n+\t\t\n+\t\treturn allergySubstance;\n+\t}\n+\t\n+\tprivate CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n+\t\tCodeableConcept manifestations = new CodeableConcept();\n+\t\tfor (AllergyReaction reaction : reactions) {\n+\t\t\tCoding code = new Coding(FhirConstants.CLINICAL_FINDINGS_VALUE_SET_URI, reaction.getUuid(),\n+\t\t\t        reaction.getReactionNonCoded());\n+\t\t\tmanifestations.addCoding(code);\n+\t\t\tmanifestations.setText(reaction.getReactionNonCoded());\n+\t\t}\n+\t\t\n+\t\treturn manifestations;\n+\t}\n+\t\n+\tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null && globalPropertyService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTM1MA=="}, "originalCommit": {"oid": "6493c7d3db7f6ad22d2b598628a40bac02433ad1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA1NTkwNQ==", "bodyText": "Actually, change that first suggestion. Instead, on the FhirGlobalProperty interface add this:\ndefault String getGlobalProperty(String property, String defaultValue) throws APIException {\n    String result = this.getGlobalProperty(property);\n    return result == null ? defaultValue : result;\n}\nThat way it works for any other implementations of FhirGlobalProperty without too much hassle.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/87#discussion_r384055905", "createdAt": "2020-02-25T18:49:08Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -124,4 +167,75 @@ private boolean isAllergyInactive(CodeableConcept status) {\n \t\t        .anyMatch(c -> \"inactive\".equals(c.getCode()));\n \t}\n \t\n+\tprivate CodeableConcept getAllergySubstance(Allergen allergen) {\n+\t\tif (allergen.getCodedAllergen() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept allergySubstance = new CodeableConcept();\n+\t\tCoding code = new Coding(FhirConstants.ALLERGY_SUBSTANCE_VALUE_SET_URI, allergen.getCodedAllergen().getUuid(),\n+\t\t        allergen.getNonCodedAllergen());\n+\t\tallergySubstance.addCoding(code);\n+\t\tallergySubstance.setText(\"allergen.getNonCodedAllergen()\");\n+\t\t\n+\t\treturn allergySubstance;\n+\t}\n+\t\n+\tprivate CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n+\t\tCodeableConcept manifestations = new CodeableConcept();\n+\t\tfor (AllergyReaction reaction : reactions) {\n+\t\t\tCoding code = new Coding(FhirConstants.CLINICAL_FINDINGS_VALUE_SET_URI, reaction.getUuid(),\n+\t\t\t        reaction.getReactionNonCoded());\n+\t\t\tmanifestations.addCoding(code);\n+\t\t\tmanifestations.setText(reaction.getReactionNonCoded());\n+\t\t}\n+\t\t\n+\t\treturn manifestations;\n+\t}\n+\t\n+\tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null && globalPropertyService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTM1MA=="}, "originalCommit": {"oid": "6493c7d3db7f6ad22d2b598628a40bac02433ad1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4NjY4MQ==", "bodyText": "@jecihjoy I forgot about that. The equivalent is:\nservlet.setGlobalPropertyService(new FhirGlobalPropertyServiceImpl() {\n\t@Override\n    @Transactional(readOnly = true)\n    public String getGlobalProperty(String property) throws APIException {\n        switch (property) {\n\t\t\tcase FhirConstants.OPENMRS_FHIR_DEFAULT_PAGE_SIZE:\n\t\t\t\treturn \"10\";\n\t\t\tcase FhirConstants.OPENMRS_FHIR_MAXIMUM_PAGE_SIZE:\n\t\t\t\treturn \"100\";\n\t\t}\n    }\n});", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/87#discussion_r384086681", "createdAt": "2020-02-25T19:45:54Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -124,4 +167,75 @@ private boolean isAllergyInactive(CodeableConcept status) {\n \t\t        .anyMatch(c -> \"inactive\".equals(c.getCode()));\n \t}\n \t\n+\tprivate CodeableConcept getAllergySubstance(Allergen allergen) {\n+\t\tif (allergen.getCodedAllergen() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept allergySubstance = new CodeableConcept();\n+\t\tCoding code = new Coding(FhirConstants.ALLERGY_SUBSTANCE_VALUE_SET_URI, allergen.getCodedAllergen().getUuid(),\n+\t\t        allergen.getNonCodedAllergen());\n+\t\tallergySubstance.addCoding(code);\n+\t\tallergySubstance.setText(\"allergen.getNonCodedAllergen()\");\n+\t\t\n+\t\treturn allergySubstance;\n+\t}\n+\t\n+\tprivate CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n+\t\tCodeableConcept manifestations = new CodeableConcept();\n+\t\tfor (AllergyReaction reaction : reactions) {\n+\t\t\tCoding code = new Coding(FhirConstants.CLINICAL_FINDINGS_VALUE_SET_URI, reaction.getUuid(),\n+\t\t\t        reaction.getReactionNonCoded());\n+\t\t\tmanifestations.addCoding(code);\n+\t\t\tmanifestations.setText(reaction.getReactionNonCoded());\n+\t\t}\n+\t\t\n+\t\treturn manifestations;\n+\t}\n+\t\n+\tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null && globalPropertyService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTM1MA=="}, "originalCommit": {"oid": "6493c7d3db7f6ad22d2b598628a40bac02433ad1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyMTA5MQ==", "bodyText": "I'm actually doing the mocking\neg  this is where the tests starts failing if I remove the null check from the translator\nThe first element in the list, MILD works fine but the rest on the tests on severity won't pass", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/87#discussion_r384121091", "createdAt": "2020-02-25T20:56:13Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -124,4 +167,75 @@ private boolean isAllergyInactive(CodeableConcept status) {\n \t\t        .anyMatch(c -> \"inactive\".equals(c.getCode()));\n \t}\n \t\n+\tprivate CodeableConcept getAllergySubstance(Allergen allergen) {\n+\t\tif (allergen.getCodedAllergen() == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tCodeableConcept allergySubstance = new CodeableConcept();\n+\t\tCoding code = new Coding(FhirConstants.ALLERGY_SUBSTANCE_VALUE_SET_URI, allergen.getCodedAllergen().getUuid(),\n+\t\t        allergen.getNonCodedAllergen());\n+\t\tallergySubstance.addCoding(code);\n+\t\tallergySubstance.setText(\"allergen.getNonCodedAllergen()\");\n+\t\t\n+\t\treturn allergySubstance;\n+\t}\n+\t\n+\tprivate CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n+\t\tCodeableConcept manifestations = new CodeableConcept();\n+\t\tfor (AllergyReaction reaction : reactions) {\n+\t\t\tCoding code = new Coding(FhirConstants.CLINICAL_FINDINGS_VALUE_SET_URI, reaction.getUuid(),\n+\t\t\t        reaction.getReactionNonCoded());\n+\t\t\tmanifestations.addCoding(code);\n+\t\t\tmanifestations.setText(reaction.getReactionNonCoded());\n+\t\t}\n+\t\t\n+\t\treturn manifestations;\n+\t}\n+\t\n+\tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n+\t\tif (severityConcept == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (globalPropertyService.getGlobalProperty(\"allergy.concept.severity.mild\") != null && globalPropertyService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg4MTM1MA=="}, "originalCommit": {"oid": "6493c7d3db7f6ad22d2b598628a40bac02433ad1"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1084, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}