{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzA2NTEx", "number": 82, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMToxNFrODh5Ykw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNDoyNTozNFrODiFkBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODY5Nzc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMToxNFrOFs4v8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMToxNFrOFs4v8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMTQ0Mg==", "bodyText": "This class should have the annotations @Component and @Setter(AccessLevel.PACKAGE). The first of those annotations registers this with Spring so it can be @Injected where appropriate. A little more on that here. The second tells Lombok to generate a setter.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382611442", "createdAt": "2020-02-21T14:31:14Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwMDM3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMjowMlrOFs4xjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMjowMlrOFs4xjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMTg1NA==", "bodyText": "I think it's preferable for these constants to go in the FhirConstants class.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382611854", "createdAt": "2020-02-21T14:32:02Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwMzA5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMjo1MFrOFs4zMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMjo1MFrOFs4zMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjI3Mw==", "bodyText": "Move this line to above 41", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612273", "createdAt": "2020-02-21T14:32:50Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwNDE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzowN1rOFs4z0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzowN1rOFs4z0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjQzMw==", "bodyText": "Remove this blank line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612433", "createdAt": "2020-02-21T14:33:07Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();\n+\t\t\t\tcodeableConceptCritical.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptCritical);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwNTQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzoyOVrOFs40pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzoyOVrOFs40pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjY0NQ==", "bodyText": "Add a blank line before this one", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612645", "createdAt": "2020-02-21T14:33:29Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();\n+\t\t\t\tcodeableConceptCritical.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptCritical);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t\t\n+\t\t\t} else if (conceptNumeric.getHiAbsolute() != null || conceptNumeric.getLowAbsolute() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiAbsolute()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowAbsolute()));\n+\t\t\t\tCodeableConcept codeableConceptAbsolute = new CodeableConcept();\n+\t\t\t\tcodeableConceptAbsolute.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptAbsolute);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t}\n+\t\t\treturn observationReferenceRangeComponentList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwNjQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzo0MFrOFs41JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzo0MFrOFs41JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjc3Mg==", "bodyText": "Add a blank line before this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612772", "createdAt": "2020-02-21T14:33:40Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();\n+\t\t\t\tcodeableConceptCritical.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptCritical);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t\t\n+\t\t\t} else if (conceptNumeric.getHiAbsolute() != null || conceptNumeric.getLowAbsolute() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiAbsolute()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowAbsolute()));\n+\t\t\t\tCodeableConcept codeableConceptAbsolute = new CodeableConcept();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwNjgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzo0OVrOFs41Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzo0OVrOFs41Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjgzNA==", "bodyText": "Add a blank line before this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612834", "createdAt": "2020-02-21T14:33:49Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwNzI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzo1NVrOFs41pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMzo1NVrOFs41pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjkwMg==", "bodyText": "Add a blank line before this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612902", "createdAt": "2020-02-21T14:33:55Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcwOTM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozNDoyOFrOFs429g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozNDoyOFrOFs429g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzIzOA==", "bodyText": "Remove this blank line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382613238", "createdAt": "2020-02-21T14:34:28Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -89,6 +95,14 @@ public Observation toFhirResource(Obs observation) {\n \t\t\n \t\tobs.addInterpretation(interpretationTranslator.toFhirResource(observation));\n \t\t\n+\t\tif (observation.getValueNumeric() != null) {\n+\t\t\tConcept concept = observation.getConcept();\n+\t\t\tif (concept instanceof ConceptNumeric) {\n+\t\t\t\tobs.setReferenceRange(referenceRangeTranslator.toFhirResource((ConceptNumeric) concept));\n+\t\t\t}\n+\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODcxNDA1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImplTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozNTo1MlrOFs451g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjo1NDozMlrOFs9vOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzk3NA==", "bodyText": "We'll need to add a test to this class as well to ensure that it's invoking the referenceRangeTranslator. I think this can be modeled on the test for ObservationInterpretationTranslator", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382613974", "createdAt": "2020-02-21T14:35:52Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImplTest.java", "diffHunk": "@@ -41,6 +41,7 @@\n import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYzMTE3NQ==", "bodyText": "@ibacher I have written this test please suggest edits\n@Test\n\tpublic void toFhirResource_shouldInvokereferenceRangeTranslator() {\n\t\tConceptNumeric conceptNumeric = new ConceptNumeric();\n\t\tconceptNumeric.setUuid(CONCEPT_UUID);\n\t\t\n\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = referenceRangeTranslator\n\t\t        .toFhirResource(conceptNumeric);\n\t\t\n\t\tassertThat(observationReferenceRangeComponentList, notNullValue());\n\t}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382631175", "createdAt": "2020-02-21T15:05:49Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImplTest.java", "diffHunk": "@@ -41,6 +41,7 @@\n import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzk3NA=="}, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NTM1MA==", "bodyText": "So what else should we expect about this list, other than its not just a null value? Should it have any Observation.ObservationReferenceRangeComponents or should it be empty?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382685350", "createdAt": "2020-02-21T16:40:15Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImplTest.java", "diffHunk": "@@ -41,6 +41,7 @@\n import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzk3NA=="}, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY4NjE2Ng==", "bodyText": "Also, feel free to keep pushing changes to this branch. You only need to squash everything down to one commit before it's merged.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382686166", "createdAt": "2020-02-21T16:41:41Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImplTest.java", "diffHunk": "@@ -41,6 +41,7 @@\n import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzk3NA=="}, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5MzE3OA==", "bodyText": "@ibacher Yes it should have items in it, so maybe something similar to what we did in ObservationReferenceRangeTranslatorImplTest\nassertThat(result, notNullValue());\n\t\tassertThat(result, hasItem(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE))))));\n\t\tassertThat(result,\n\t\t    hasItem(hasProperty(\"high\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(HIGH_NORMAL_VALUE))))));\n\t\t\n\t\tassertThat(result,\n\t\t    hasItem(allOf(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE)))),\n\t\t        hasProperty(\"type\",\n\t\t            hasProperty(\"coding\",\n\t\t                hasItem(allOf(\n\t\t                    hasProperty(\"system\", equalTo(\"http://terminology.hl7.org/CodeSystem/referencerange-meaning\")),\n\t\t                    hasProperty(\"code\", equalTo(\"normal\")))))))));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382693178", "createdAt": "2020-02-21T16:54:32Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImplTest.java", "diffHunk": "@@ -41,6 +41,7 @@\n import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzk3NA=="}, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODc1MjI4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0NjoxNlrOFs5RMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0NjoxNlrOFs5RMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxOTk1NA==", "bodyText": "assertThat(result,\n\t        hasItem(allOf(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE)))),\n\t            hasProperty(\"type\", hasProperty(\"coding\", hasItem(allOf(hasProperty(\"system\", equalTo(\"http://terminology.hl7.org/CodeSystem/referencerange-meaning\")),\n\t                hasProperty(\"code\", equalTo(\"normal\")))))))));\nI forgot that type has a coding property, which is the list of codes themselves which have the system and code properties.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382619954", "createdAt": "2020-02-21T14:46:16Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.ConceptNumeric;\n+\n+public class ObservationReferenceRangeTranslatorImplTest {\n+\t\n+\tprivate static final Double LOW_NORMAL_VALUE = 1.0;\n+\t\n+\tprivate static final Double HIGH_NORMAL_VALUE = 2.0;\n+\t\n+\tprivate static final Double LOW_ABSOLUTE_VALUE = 3.0;\n+\t\n+\tprivate static final Double HIGH_ABSOLUTE_VALUE = 4.0;\n+\t\n+\tprivate static final Double LOW_CRITICAL_VALUE = 5.0;\n+\t\n+\tprivate static final Double HIGH_CRITICAL_VALUE = 6.0;\n+\t\n+\tprivate ObservationReferenceRangeTranslatorImpl observationReferenceRangeTranslator;\n+\t\n+\tprivate static final String CONCEPT_UUID = \"12345-abcdef-12345\";\n+\t\n+\t@Before\n+\tpublic void setup() {\n+\t\tobservationReferenceRangeTranslator = new ObservationReferenceRangeTranslatorImpl();\n+\t}\n+\t\n+\t@Test\n+\tpublic void toFhirType_shouldMapObservationReferenceRangeToExpected() {\n+\t\t\n+\t\tConceptNumeric conceptNumeric = new ConceptNumeric();\n+\t\tconceptNumeric.setUuid(CONCEPT_UUID);\n+\t\t\n+\t\tconceptNumeric.setLowNormal(LOW_NORMAL_VALUE);\n+\t\tconceptNumeric.setHiNormal(HIGH_NORMAL_VALUE);\n+\t\tconceptNumeric.setLowAbsolute(LOW_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setHiAbsolute(HIGH_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setLowCritical(LOW_CRITICAL_VALUE);\n+\t\tconceptNumeric.setHiCritical(HIGH_CRITICAL_VALUE);\n+\t\t\n+\t\tList<Observation.ObservationReferenceRangeComponent> result = observationReferenceRangeTranslator\n+\t\t        .toFhirResource(conceptNumeric);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result, hasItem(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE))))));\n+\t\tassertThat(result,\n+\t\t    hasItem(hasProperty(\"high\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(HIGH_NORMAL_VALUE))))));\n+\t\t\n+\t\t//    assertThat(result,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTI0NTE5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNToxN1rOFs-Fcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNToxN1rOFs-Fcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5ODg2Ng==", "bodyText": "You've got a lot of repeated code here. It might be better to break this out into a method like this:\nprivate Observation.ObservationReferenceRangeComponent createObservationReferenceRange(double hiValue, double lowValue, String code) {\n    Observation.ObservationReferenceRangeComponent component = new Observation.ObservationReferenceRangeComponent()\n        .setHigh(new Quantity().setValue(hiValue))\n        .setLow(new Quantity().setValue(lowValue));\n\n    CodeableConcept referenceRangeType = new CodeableConcept();\n    concept.addCoding().setCode(code).setSystem(FhirConstants.OBSERVATION_REFERENCE_RANGE_URI);\n    component.setType(codeableConcept);\n    \n    return component;\n}\nYou can then call it like this:\nobservationReferenceRangeComponentList.add(createObservationReferenceRange(conceptNumeric.getHiNormal(), conceptNumeric.getLowNormal(), FhirConstants.OBSERVATION_REFERENCE_NORMAL));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382698866", "createdAt": "2020-02-21T17:05:17Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd4f8b19e15d8a60e88b7417f7835f002d03e00"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDY5MjY1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNDoyNDo0OVrOFtLV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNDoyNDo0OVrOFtLV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxNjA2OA==", "bodyText": "Can we swap this out for the other testing style we talked about? I think that\u2019s more maintainable. Also, the checks here make the assertions above redundant (they verify the same thing), so I\u2019d remove the above assertions.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382916068", "createdAt": "2020-02-22T14:24:49Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImplTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.ConceptNumeric;\n+\n+public class ObservationReferenceRangeTranslatorImplTest {\n+\t\n+\tprivate static final Double LOW_NORMAL_VALUE = 1.0;\n+\t\n+\tprivate static final Double HIGH_NORMAL_VALUE = 2.0;\n+\t\n+\tprivate static final Double LOW_ABSOLUTE_VALUE = 3.0;\n+\t\n+\tprivate static final Double HIGH_ABSOLUTE_VALUE = 4.0;\n+\t\n+\tprivate static final Double LOW_CRITICAL_VALUE = 5.0;\n+\t\n+\tprivate static final Double HIGH_CRITICAL_VALUE = 6.0;\n+\t\n+\tprivate ObservationReferenceRangeTranslatorImpl observationReferenceRangeTranslator;\n+\t\n+\tprivate static final String CONCEPT_UUID = \"12345-abcdef-12345\";\n+\t\n+\t@Before\n+\tpublic void setup() {\n+\t\tobservationReferenceRangeTranslator = new ObservationReferenceRangeTranslatorImpl();\n+\t}\n+\t\n+\t@Test\n+\tpublic void toFhirType_shouldMapObservationReferenceRangeToExpected() {\n+\t\t\n+\t\tConceptNumeric conceptNumeric = new ConceptNumeric();\n+\t\tconceptNumeric.setUuid(CONCEPT_UUID);\n+\t\t\n+\t\tconceptNumeric.setLowNormal(LOW_NORMAL_VALUE);\n+\t\tconceptNumeric.setHiNormal(HIGH_NORMAL_VALUE);\n+\t\tconceptNumeric.setLowAbsolute(LOW_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setHiAbsolute(HIGH_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setLowCritical(LOW_CRITICAL_VALUE);\n+\t\tconceptNumeric.setHiCritical(HIGH_CRITICAL_VALUE);\n+\t\t\n+\t\tList<Observation.ObservationReferenceRangeComponent> result = observationReferenceRangeTranslator\n+\t\t        .toFhirResource(conceptNumeric);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result, hasItem(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE))))));\n+\t\tassertThat(result,\n+\t\t    hasItem(hasProperty(\"high\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(HIGH_NORMAL_VALUE))))));\n+\t\t\n+\t\tassertThat(result,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6511e5e7cb569c392d46e827d293c26792a366"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDY5MzE2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/ObservationReferenceRangeTranslator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNDoyNTozNFrOFtLWIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNDoyNTozNFrOFtLWIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxNjEzMQ==", "bodyText": "Please remove this blank line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382916131", "createdAt": "2020-02-22T14:25:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/ObservationReferenceRangeTranslator.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.openmrs.ConceptNumeric;\n+\n+public interface ObservationReferenceRangeTranslator extends ToFhirTranslator<ConceptNumeric, List<Observation.ObservationReferenceRangeComponent>> {\n+\t\n+\t@Override\n+\tList<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric concept);\n+\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6511e5e7cb569c392d46e827d293c26792a366"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1065, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}