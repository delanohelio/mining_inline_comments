{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDQ2OTky", "number": 97, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMjoxOFrODkVdiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0NDo0MFrODkp7SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI2OTU1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMjoxOFrOFwmWZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMjoxOFrOFwmWZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNDI5NQ==", "bodyText": "Imported but never used", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r386504295", "createdAt": "2020-03-02T16:32:18Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImpl.java", "diffHunk": "@@ -11,8 +11,16 @@\n \n import javax.inject.Inject;\n \n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8beea9cdc9c7355d78c31c2ac215a88df3445185"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDI3NDkzOnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMzozN1rOFwmZ0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMzozN1rOFwmZ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNTE3MQ==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r386505171", "createdAt": "2020-03-02T16:33:37Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -13,15 +13,25 @@\n import javax.validation.constraints.NotNull;\n \n import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import ca.uhn.fhir.rest.server.IResourceProvider;\n import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8beea9cdc9c7355d78c31c2ac215a88df3445185"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzM3NjgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjozMzoyOVrOFxD8ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjozMzoyOVrOFxD8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4OTIxOQ==", "bodyText": "Why do you pass statusParam as TokenOrListParam", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r386989219", "createdAt": "2020-03-03T12:33:29Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"cs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleSeverity(Criteria criteria, TokenOrListParam severityParam) {\n+\t\tif (severityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tcriteria.createAlias(\"severity\", \"c\");\n+\t\t\n+\t\treturn handleOrListParam(severityParam, token -> {\n+\t\t\ttry {\n+\t\t\t\tAllergyIntolerance.AllergyIntoleranceSeverity severity = AllergyIntolerance.AllergyIntoleranceSeverity\n+\t\t\t\t        .fromCode(token.getValue());\n+\t\t\t\tswitch (severity) {\n+\t\t\t\t\tcase MILD:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD))));\n+\t\t\t\t\tcase MODERATE:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE))));\n+\t\t\t\t\tcase SEVERE:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE))));\n+\t\t\t\t\tcase NULL:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_OTHER))));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (FHIRException ignored) {}\n+\t\t\treturn Optional.empty();\n+\t\t});\n+\t\t\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleAllergenCategory(String propertyName, StringOrListParam categoryParam) {\n+\t\tif (categoryParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleOrListParam(categoryParam, token -> {\n+\t\t\ttry {\n+\t\t\t\tAllergyIntolerance.AllergyIntoleranceCategory category = AllergyIntolerance.AllergyIntoleranceCategory\n+\t\t\t\t        .fromCode(token.getValue());\n+\t\t\t\tswitch (category) {\n+\t\t\t\t\tcase FOOD:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.FOOD));\n+\t\t\t\t\tcase MEDICATION:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.DRUG));\n+\t\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.ENVIRONMENT));\n+\t\t\t\t\tcase NULL:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.OTHER));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (FHIRException ignored) {}\n+\t\t\treturn Optional.empty();\n+\t\t});\n+\t\t\n+\t}\n+\t\n+\tpublic TokenOrListParam createClinicalStatusToken(StringOrListParam statusParam) {\n+\t\tif (statusParam != null && !statusParam.getValuesAsQueryTokens().isEmpty()) {\n+\t\t\tswitch (statusParam.getValuesAsQueryTokens().get(0).getValue()) {\n+\t\t\t\tcase \"active\":\n+\t\t\t\t\treturn new TokenOrListParam().add(\"false\");\n+\t\t\t\tcase \"inactive\":\n+\t\t\t\t\treturn new TokenOrListParam().add(\"true\");\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzU1NDQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirAllergyIntoleranceService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyNjoxNlrOFxFmmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyNjoxNlrOFxFmmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNjM0Nw==", "bodyText": "clinicalStatus should be a TokenOrListParam. The definitions for the values taken by these parameters can be found here. Note that the difference between a TokenParam and a StringParam is that the TokenParam can contain a system value indicating what value-set the value it encodes represents.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387016347", "createdAt": "2020-03-03T13:26:16Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirAllergyIntoleranceService.java", "diffHunk": "@@ -11,9 +11,18 @@\n \n import javax.validation.constraints.NotNull;\n \n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import org.hl7.fhir.r4.model.AllergyIntolerance;\n \n public interface FhirAllergyIntoleranceService {\n \t\n \tAllergyIntolerance getAllergyIntoleranceByUuid(@NotNull String uuid);\n+\t\n+\tCollection<AllergyIntolerance> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzU1NTY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyNjozNFrOFxFnSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyNjozNFrOFxFnSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNjUyMA==", "bodyText": "As above for clinicalStatus", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387016520", "createdAt": "2020-03-03T13:26:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "diffHunk": "@@ -11,9 +11,20 @@\n \n import javax.validation.constraints.NotNull;\n \n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import org.hl7.fhir.r4.model.Patient;\n import org.openmrs.Allergy;\n \n public interface FhirAllergyIntoleranceDao {\n \t\n \tAllergy getAllergyIntoleranceByUuid(@NotNull String uuid);\n+\t\n+\tCollection<Allergy> searchForAllergies(@OptionalParam(name = Patient.SP_IDENTIFIER) ReferenceParam patientReference,\n+\t        StringOrListParam category, TokenOrListParam allergen, TokenOrListParam severity,\n+\t        TokenOrListParam manifestationCode, StringOrListParam clinicalStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzU1NzIwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyNzowMlrOFxFoMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyNzowMlrOFxFoMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNjc1Mg==", "bodyText": "@OptionalParam does not belong here, but only on the ResourceProvider.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387016752", "createdAt": "2020-03-03T13:27:02Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "diffHunk": "@@ -11,9 +11,20 @@\n \n import javax.validation.constraints.NotNull;\n \n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import org.hl7.fhir.r4.model.Patient;\n import org.openmrs.Allergy;\n \n public interface FhirAllergyIntoleranceDao {\n \t\n \tAllergy getAllergyIntoleranceByUuid(@NotNull String uuid);\n+\t\n+\tCollection<Allergy> searchForAllergies(@OptionalParam(name = Patient.SP_IDENTIFIER) ReferenceParam patientReference,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzU2MjU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyODozNVrOFxFrPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyODozNVrOFxFrPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNzUzNA==", "bodyText": "This seems to be creating a join on the codedAllergen.uuid field, which is not going to work.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387017534", "createdAt": "2020-03-03T13:28:35Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzU2NTE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyOTowNVrOFxFsnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyOTowNVrOFxFsnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNzg4Nw==", "bodyText": "This seems to be creating a join on the r.reaction.uuid field, which is not going to work.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387017887", "createdAt": "2020-03-03T13:29:05Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzU2ODQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzozMDowMVrOFxFuqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzozMDowMVrOFxFuqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxODQwOA==", "bodyText": "Please add a new line here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387018408", "createdAt": "2020-03-03T13:30:01Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"cs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleSeverity(Criteria criteria, TokenOrListParam severityParam) {\n+\t\tif (severityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tcriteria.createAlias(\"severity\", \"c\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzYxNzY5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0MzoyNFrOFxGMnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0MzoyNFrOFxGMnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjA3Ng==", "bodyText": "This is a proper way to implement this; however, it is probably preferable to cache the values of the calls to getConceptId(globalPropertyService.getGlobalProperty(...)) outside of the lambda expression. something like this:\nfinal int mildConceptId = getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD));\n...\nreturn handleOrListParam(severityParam, token -> {\n    try {\n        AllergyIntolerance.AllergyIntoleranceSeverity severity = AllergyIntolerance.AllergyIntoleranceSeverity\n            .fromCode(token.getValue());\n        \n        switch(servity) {\n             case MILD:\n                 return Optional.of(eq(\"c.conceptId\", mildConceptId));\n             ...\n        }\n    }\n    ...\n});\nThinking about this some more, we should probably create a method on the globalPropertyService called getGlobalProperties(String... properties) that looks something like this:\npublic Collection<String> getGlobalProperties(String... properties) {\n    List<GlobalProperty> globalProperties = (GlobalProperty) sessionFactory.getCurrentSession()\n        .createCriteria(GlobalProperty.class).add(Restrictions.in(\"property\", properties)).list();\n    return globalProperties.stream().filter(p -> p != null).map(GlobalProperty::getPropertyValue).collect(Collectors.toList());\n}\nThen we can use this:\nfinal int[] severityConceptUuids = globalPropertyService.getGlobalProperties(FhirConstants.GLOBAL_PROPERTY_MILD, FhirConstants.GLOBAL_PROPERTY_MODERATE, FhirConstants.GLOBAL_PROPERTY_SEVERE, FhirConstants.GLOBAL_PROPERTY_OTHER);\n...\nreturn handleOrListParam(severityParam, token -> {\n    try {\n        AllergyIntolerance.AllergyIntoleranceSeverity severity = AllergyIntolerance.AllergyIntoleranceSeverity\n            .fromCode(token.getValue());\n        \n        switch(servity) {\n             case MILD:\n                 return Optional.of(eq(\"c.uuid\", severityConceptIds[0]));\n             ...\n        }\n    }\n    ...\n});", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387026076", "createdAt": "2020-03-03T13:43:24Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"cs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleSeverity(Criteria criteria, TokenOrListParam severityParam) {\n+\t\tif (severityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tcriteria.createAlias(\"severity\", \"c\");\n+\t\t\n+\t\treturn handleOrListParam(severityParam, token -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzYyMTcwOnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0NDoyOFrOFxGPFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0NDoyOFrOFxGPFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjcxMQ==", "bodyText": "TokenOrListParam", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387026711", "createdAt": "2020-03-03T13:44:28Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -47,4 +55,19 @@ public AllergyIntolerance getAllergyIntoleranceByUuid(@IdParam @NotNull IdType i\n \t\t}\n \t\treturn allergy;\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchForAllergies(\n+\t        @OptionalParam(name = AllergyIntolerance.SP_PATIENT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam patientReference,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CATEGORY) StringOrListParam category,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NzYyMjQ5OnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0NDo0MFrOFxGPkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0NDo0MFrOFxGPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjgzNQ==", "bodyText": "TokenOrListParam", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387026835", "createdAt": "2020-03-03T13:44:40Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -47,4 +55,19 @@ public AllergyIntolerance getAllergyIntoleranceByUuid(@IdParam @NotNull IdType i\n \t\t}\n \t\treturn allergy;\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchForAllergies(\n+\t        @OptionalParam(name = AllergyIntolerance.SP_PATIENT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam patientReference,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CATEGORY) StringOrListParam category,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CODE) TokenOrListParam allergen,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_SEVERITY) TokenOrListParam severity,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_MANIFESTATION) TokenOrListParam manifestationCode,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CLINICAL_STATUS) StringOrListParam clinicalStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1095, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}