{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjIyMzI4", "number": 111, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTowODo1NFrODmjDhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1MDoxOFrODowQBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ2ODIzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirTaskDaoImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTowODo1NFrOF0BrKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNzoyM1rOF1E72Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NzcwNg==", "bodyText": "Is this part of the optimization? If not, You should remove it", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390097706", "createdAt": "2020-03-10T05:08:54Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirTaskDaoImpl.java", "diffHunk": "@@ -78,7 +78,8 @@ public FhirTask getTaskByUuid(String uuid) {\n \t\t// TODO: Handle optional params\n \t\t// Task.basedOn\n \t\tif (validReferenceParam(basedOnReference)) {\n-\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\").add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n+\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\")\n+\t\t\t        .add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n \t\t\t        .add(Restrictions.eq(\"bo.type\", basedOnReference.getResourceType()));\n \t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyMDg2NQ==", "bodyText": "These are formatting changes applied by mvn clean install. I believe they should be part of the PR too.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390220865", "createdAt": "2020-03-10T10:30:16Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirTaskDaoImpl.java", "diffHunk": "@@ -78,7 +78,8 @@ public FhirTask getTaskByUuid(String uuid) {\n \t\t// TODO: Handle optional params\n \t\t// Task.basedOn\n \t\tif (validReferenceParam(basedOnReference)) {\n-\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\").add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n+\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\")\n+\t\t\t        .add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n \t\t\t        .add(Restrictions.eq(\"bo.type\", basedOnReference.getResourceType()));\n \t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NzcwNg=="}, "originalCommit": {"oid": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTcwNQ==", "bodyText": "I'd take these out of the PR. It's going to be changed in a different commit and will just cause a conflict later.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391199705", "createdAt": "2020-03-11T19:07:23Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirTaskDaoImpl.java", "diffHunk": "@@ -78,7 +78,8 @@ public FhirTask getTaskByUuid(String uuid) {\n \t\t// TODO: Handle optional params\n \t\t// Task.basedOn\n \t\tif (validReferenceParam(basedOnReference)) {\n-\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\").add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n+\t\t\tcriteria.createAlias(\"basedOnReferences\", \"bo\")\n+\t\t\t        .add(Restrictions.eq(\"bo.reference\", basedOnReference.getIdPart()))\n \t\t\t        .add(Restrictions.eq(\"bo.type\", basedOnReference.getResourceType()));\n \t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDA5NzcwNg=="}, "originalCommit": {"oid": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ4NTkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyMDo1NlrOF0B1PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyMDo1NlrOF0B1PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMDI4NA==", "bodyText": "What if  severityConceptUuids.size() == 3. This will return null which should not be the case. It should still return switch for the 3 UUIDs in the array and return there the concept", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390100284", "createdAt": "2020-03-10T05:20:56Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +215,46 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConcept == null || severityConceptUuids.size() < 4) {\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tif (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\tif (severityConcept.getUuid().equals(severityConceptUuids.get(0))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MILD;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(1))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MODERATE;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(2))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.SEVERE;\n \t\t} else {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.NULL;\n \t\t}\n \t}\n \t\n \tprivate Concept getOpenmrsSeverity(AllergyIntolerance.AllergyIntoleranceSeverity severity) {\n-\t\tConcept concept;\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConceptUuids.size() < 4) {\n+\t\t\treturn null;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzQ5MTk3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyNDoyOFrOF0B4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNToyNzozNlrOF0B7iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMTE2NQ==", "bodyText": "You should be checking if the severityConceptUuids array is not empty", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390101165", "createdAt": "2020-03-10T05:24:28Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +215,46 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConcept == null || severityConceptUuids.size() < 4) {\n \t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMTg5Nw==", "bodyText": "globalPropertyService.getGlobalProperties(FhirConstants.GLOBAL_PROPERTY_MILD,\n\t\t    FhirConstants.GLOBAL_PROPERTY_MODERATE, FhirConstants.GLOBAL_PROPERTY_SEVERE,\n\t\t    FhirConstants.GLOBAL_PROPERTY_OTHER);\nThis method filters out null global properties. So there is a probability that size of results will not be 4 always", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390101897", "createdAt": "2020-03-10T05:27:36Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +215,46 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConcept == null || severityConceptUuids.size() < 4) {\n \t\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwMTE2NQ=="}, "originalCommit": {"oid": "809d6aca01956975da40f6ead0aa5f94fdb0b9c7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODc0MjM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzowNTo0OVrOF0N3uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOToxNTo0NVrOF0dazQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NzUzMQ==", "bodyText": "Instead, utilize Stream API\nglobalProperties.stream().filter(p -> p != null).map(GlobalProperty::getPropertyValue)\n\t\t        .collect(Collectors.toMap(p::getProperty(), p::getPropertyValue()));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390297531", "createdAt": "2020-03-10T13:05:49Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java", "diffHunk": "@@ -47,10 +46,16 @@ public GlobalProperty getGlobalPropertyObject(String property) {\n \t}\n \t\n \t@Override\n-\tpublic List<String> getGlobalProperties(String... properties) {\n+\tpublic HashMap<String, String> getGlobalProperties(String... properties) {\n+\t\tHashMap<String, String> globalPropertiesMap = new HashMap<>();\n+\t\t\n \t\tCollection<GlobalProperty> globalProperties = (sessionFactory.getCurrentSession()\n \t\t        .createCriteria(GlobalProperty.class).add(Restrictions.in(\"property\", properties)).list());\n-\t\treturn globalProperties.stream().filter(p -> p != null).map(GlobalProperty::getPropertyValue)\n-\t\t        .collect(Collectors.toList());\n+\t\t\n+\t\tfor (GlobalProperty property : globalProperties) {\n+\t\t\tglobalPropertiesMap.put(property.getProperty(), property.getPropertyValue());\n+\t\t}\n+\t\t\n+\t\treturn globalPropertiesMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03a6eb063bb80e69d403601653f6a0d1da66f99"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU1MjI2OQ==", "bodyText": "I think in this case, the non-Stream API version is a bit easier to read.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r390552269", "createdAt": "2020-03-10T19:15:45Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java", "diffHunk": "@@ -47,10 +46,16 @@ public GlobalProperty getGlobalPropertyObject(String property) {\n \t}\n \t\n \t@Override\n-\tpublic List<String> getGlobalProperties(String... properties) {\n+\tpublic HashMap<String, String> getGlobalProperties(String... properties) {\n+\t\tHashMap<String, String> globalPropertiesMap = new HashMap<>();\n+\t\t\n \t\tCollection<GlobalProperty> globalProperties = (sessionFactory.getCurrentSession()\n \t\t        .createCriteria(GlobalProperty.class).add(Restrictions.in(\"property\", properties)).list());\n-\t\treturn globalProperties.stream().filter(p -> p != null).map(GlobalProperty::getPropertyValue)\n-\t\t        .collect(Collectors.toList());\n+\t\t\n+\t\tfor (GlobalProperty property : globalProperties) {\n+\t\t\tglobalPropertiesMap.put(property.getProperty(), property.getPropertyValue());\n+\t\t}\n+\t\t\n+\t\treturn globalPropertiesMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5NzUzMQ=="}, "originalCommit": {"oid": "d03a6eb063bb80e69d403601653f6a0d1da66f99"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDQwOTkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirGlobalPropertyService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNjoxMVrOF1E5aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNjoxMVrOF1E5aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTA4MQ==", "bodyText": "Prefer Map to HashMap here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391199081", "createdAt": "2020-03-11T19:06:11Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirGlobalPropertyService.java", "diffHunk": "@@ -9,7 +9,7 @@\n  */\n package org.openmrs.module.fhir2.api;\n \n-import java.util.List;\n+import java.util.HashMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03a6eb063bb80e69d403601653f6a0d1da66f99"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDQxMjA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNjo1M1rOF1E6yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowNjo1M1rOF1E6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5OTQzMw==", "bodyText": "I'd still have this return a Map<String, String> rather than HashMap<String, String>", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391199433", "createdAt": "2020-03-11T19:06:53Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirGlobalPropertyDaoImpl.java", "diffHunk": "@@ -47,10 +46,16 @@ public GlobalProperty getGlobalPropertyObject(String property) {\n \t}\n \t\n \t@Override\n-\tpublic List<String> getGlobalProperties(String... properties) {\n+\tpublic HashMap<String, String> getGlobalProperties(String... properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d03a6eb063bb80e69d403601653f6a0d1da66f99"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzQ0ODE2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDo1NDo1M1rOF1iHUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDo1NDo1M1rOF1iHUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3Nzc3Nw==", "bodyText": "We should first check if the severityConcept is null and abort if that's the case.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391677777", "createdAt": "2020-03-12T14:54:53Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +216,52 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\t\n+\t\tgetSeverityConceptUuids();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f400fac1f75da11b5c68a6b14443b2d64280cded"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzQ1NDMzOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDo1NjoxM1rOF1iLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDo1NjoxM1rOF1iLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY3ODc3OA==", "bodyText": "I'd also add an exit condition upfront for if severity is null.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391678778", "createdAt": "2020-03-12T14:56:13Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -213,49 +216,52 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t}\n \t\n \tprivate AllergyIntolerance.AllergyIntoleranceSeverity getFhirSeverity(Concept severityConcept) {\n-\t\tif (severityConcept == null) {\n+\t\t\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConcept == null || severityConceptUuids.isEmpty()) {\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tif (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\tif (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MILD;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MODERATE;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.SEVERE;\n \t\t} else {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.NULL;\n \t\t}\n \t}\n \t\n \tprivate Concept getOpenmrsSeverity(AllergyIntolerance.AllergyIntoleranceSeverity severity) {\n-\t\tConcept concept;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f400fac1f75da11b5c68a6b14443b2d64280cded"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzQ4MTgwOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTowMjoyNFrOF1icbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTowMjoyNFrOF1icbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY4MzE4Mw==", "bodyText": "Could we add some tests that cover the handleServerity method, especially for the different severity levels?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r391683183", "createdAt": "2020-03-12T15:02:24Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -129,13 +129,13 @@ private void handleAllergen(Criteria criteria, TokenOrListParam code) {\n \t\t\t\t        .fromCode(token.getValue());\n \t\t\t\tswitch (severity) {\n \t\t\t\t\tcase MILD:\n-\t\t\t\t\t\treturn Optional.of(eq(\"c.uuid\", severityConceptUuids.get(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f400fac1f75da11b5c68a6b14443b2d64280cded"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU4Mzc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjoyMlrOF3flAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NjoyMlrOF3flAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMzM3Nw==", "bodyText": "I don't think we want this as a class variable. It should just be a local variable in the one function that uses it.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r393733377", "createdAt": "2020-03-17T14:46:22Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -45,7 +46,7 @@\n \t@Inject\n \tprivate FhirGlobalPropertyService globalPropertyService;\n \t\n-\tprivate List<String> severityConceptUuids;\n+\tprivate Map<String, String> severityConceptUuids;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed7618ef008723ef52357fbd2a022ddb1ce28671"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU4OTc1OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NzozMlrOF3fowg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NzozMlrOF3fowg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNDMzOA==", "bodyText": "I'm not sure I understand why you've changed this method?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r393734338", "createdAt": "2020-03-17T14:47:32Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -101,44 +102,43 @@ private void handleAllergen(Criteria criteria, TokenOrListParam code) {\n \t\t\t\t        .fromCode(token.getValue());\n \t\t\t\tswitch (severity) {\n \t\t\t\t\tcase MILD:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(0)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD)));\n \t\t\t\t\tcase MODERATE:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(1)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE)));\n \t\t\t\t\tcase SEVERE:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(2)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE)));\n \t\t\t\t\tcase NULL:\n-\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(3)));\n+\t\t\t\t\t\treturn Optional.of(eq(\"sc.uuid\", severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_OTHER)));\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (FHIRException ignored) {}\n \t\t\treturn Optional.empty();\n \t\t});\n \t}\n \t\n-\tprivate Optional<Criterion> handleAllergenCategory(String propertyName, TokenOrListParam categoryParam) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed7618ef008723ef52357fbd2a022ddb1ce28671"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDYwMTY3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1MDoxOFrOF3fwig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1MDoxOFrOF3fwig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNjMzMA==", "bodyText": "Instead of setting a class variable, just return the map from this function and use it as a local variable where needed. Storing state in DAO objects is a bad idea (what happens if the DAO needs to be called simultaneously for two different queries?)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/111#discussion_r393736330", "createdAt": "2020-03-17T14:50:18Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -217,45 +220,54 @@ private CodeableConcept getManifestation(List<AllergyReaction> reactions) {\n \t\t\treturn null;\n \t\t}\n \t\t\n-\t\tif (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConceptUuids.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MILD;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.MODERATE;\n-\t\t} else if (globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE, \"\")\n-\t\t        .equals(severityConcept.getUuid())) {\n+\t\t} else if (severityConcept.getUuid().equals(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE))) {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.SEVERE;\n \t\t} else {\n \t\t\treturn AllergyIntolerance.AllergyIntoleranceSeverity.NULL;\n \t\t}\n \t}\n \t\n \tprivate Concept getOpenmrsSeverity(AllergyIntolerance.AllergyIntoleranceSeverity severity) {\n-\t\tConcept concept;\n+\t\tif (severity == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tgetSeverityConceptUuids();\n+\t\t\n+\t\tif (severityConceptUuids.isEmpty()) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n \t\tswitch (severity) {\n \t\t\tcase MILD:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MILD))\n \t\t\t\t        .orElse(null);\n-\t\t\t\tbreak;\n \t\t\tcase MODERATE:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_MODERATE))\n \t\t\t\t        .orElse(null);\n-\t\t\t\tbreak;\n \t\t\tcase SEVERE:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_SEVERE))\n \t\t\t\t        .orElse(null);\n-\t\t\t\tbreak;\n \t\t\tcase NULL:\n \t\t\tdefault:\n-\t\t\t\tconcept = conceptService\n-\t\t\t\t        .getConceptByUuid(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_OTHER))\n+\t\t\t\treturn conceptService.getConceptByUuid(severityConceptUuids.get(FhirConstants.GLOBAL_PROPERTY_OTHER))\n \t\t\t\t        .orElse(null);\n \t\t}\n-\t\treturn concept;\n \t}\n \t\n+\tprivate void getSeverityConceptUuids() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed7618ef008723ef52357fbd2a022ddb1ce28671"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1122, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}