{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDQ2Mzc5", "number": 55, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxMjoxNFrODeCGmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyNDowOFrODeCWVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODE4MzMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxMjoxNFrOFm-NNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxMjoxNFrOFm-NNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwOTM5OQ==", "bodyText": "This is not a good name for this constant. It should probably be something like DIAGNOSTIC_REPORT_CATEGORY_LAB.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376409399", "createdAt": "2020-02-07T14:12:14Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java", "diffHunk": "@@ -46,6 +50,8 @@\n \t\n \tpublic static final String IDENTIFIER = \"identifier\";\n \t\n+\tpublic static final String DIAGNOSTIC_REPORT_CATEGORY = \"LAB\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIwMzE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxODoyNVrOFm-Zjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxODoyNVrOFm-Zjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjU1OQ==", "bodyText": "This should be\nif (code != null) {\n\t...\n}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376412559", "createdAt": "2020-02-07T14:18:25Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DiagnosticReport;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Person;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ConceptTranslator;\n+import org.openmrs.module.fhir2.api.translators.DiagnosticReportTranslator;\n+import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class DiagnosticReportTranslatorImpl implements DiagnosticReportTranslator {\n+\t\n+\t@Inject\n+\tprivate EncounterReferenceTranslator encounterReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate ConceptTranslator conceptTranslator;\n+\t\n+\t@Inject\n+\tprivate ObservationReferenceTranslator observationReferenceTranslator;\n+\t\n+\t@Override\n+\tpublic DiagnosticReport toFhirResource(Obs obsGroup) {\n+\t\tif (obsGroup == null)\n+\t\t\treturn null;\n+\t\t\n+\t\tif (!obsGroup.isObsGrouping()) {\n+\t\t\tthrow new IllegalArgumentException(\"Obs object must be an Obs group.\");\n+\t\t}\n+\t\t\n+\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n+\t\t\n+\t\tsetFhirFields(obsGroup, diagnosticReport);\n+\t\t\n+\t\treturn diagnosticReport;\n+\t}\n+\t\n+\tprivate void setFhirFields(Obs obsGroup, DiagnosticReport diagnosticReport) {\n+\t\tList<CodeableConcept> categoryList = new ArrayList<>();\n+\t\tCodeableConcept category = new CodeableConcept();\n+\t\t\n+\t\t// DiagnosticReport.id\n+\t\tdiagnosticReport.setId(obsGroup.getUuid());\n+\t\t\n+\t\t// DiagnosticReport.status\n+\t\tdiagnosticReport.setStatus(DiagnosticReport.DiagnosticReportStatus.UNKNOWN);\n+\t\t\n+\t\t// DiagnosticReport.encounter\n+\t\tEncounter encounter = obsGroup.getEncounter();\n+\t\tif (encounter != null)\n+\t\t\tdiagnosticReport.setEncounter(encounterReferenceTranslator.toFhirResource(encounter));\n+\t\t\n+\t\t// DiagnosticReport.subject\n+\t\tPerson subject = obsGroup.getPerson();\n+\t\tif (subject != null) {\n+\t\t\ttry {\n+\t\t\t\tdiagnosticReport.setSubject(patientReferenceTranslator.toFhirResource((Patient) subject));\n+\t\t\t}\n+\t\t\tcatch (ClassCastException ignored) {}\n+\t\t}\n+\t\t\n+\t\t// DiagnosticReport.code\n+\t\tConcept code = obsGroup.getConcept();\n+\t\tif (code != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIwNDYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxODo1M1rOFm-adg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxODo1M1rOFm-adg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjc5MA==", "bodyText": "I don't think this is necessary. See below.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376412790", "createdAt": "2020-02-07T14:18:53Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DiagnosticReport;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Person;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ConceptTranslator;\n+import org.openmrs.module.fhir2.api.translators.DiagnosticReportTranslator;\n+import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class DiagnosticReportTranslatorImpl implements DiagnosticReportTranslator {\n+\t\n+\t@Inject\n+\tprivate EncounterReferenceTranslator encounterReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate ConceptTranslator conceptTranslator;\n+\t\n+\t@Inject\n+\tprivate ObservationReferenceTranslator observationReferenceTranslator;\n+\t\n+\t@Override\n+\tpublic DiagnosticReport toFhirResource(Obs obsGroup) {\n+\t\tif (obsGroup == null)\n+\t\t\treturn null;\n+\t\t\n+\t\tif (!obsGroup.isObsGrouping()) {\n+\t\t\tthrow new IllegalArgumentException(\"Obs object must be an Obs group.\");\n+\t\t}\n+\t\t\n+\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n+\t\t\n+\t\tsetFhirFields(obsGroup, diagnosticReport);\n+\t\t\n+\t\treturn diagnosticReport;\n+\t}\n+\t\n+\tprivate void setFhirFields(Obs obsGroup, DiagnosticReport diagnosticReport) {\n+\t\tList<CodeableConcept> categoryList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIwOTAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxOTo1M1rOFm-c7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxOTo1M1rOFm-c7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzQyMg==", "bodyText": "This is also unneccessary. See below.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376413422", "createdAt": "2020-02-07T14:19:53Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DiagnosticReport;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Person;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ConceptTranslator;\n+import org.openmrs.module.fhir2.api.translators.DiagnosticReportTranslator;\n+import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class DiagnosticReportTranslatorImpl implements DiagnosticReportTranslator {\n+\t\n+\t@Inject\n+\tprivate EncounterReferenceTranslator encounterReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate ConceptTranslator conceptTranslator;\n+\t\n+\t@Inject\n+\tprivate ObservationReferenceTranslator observationReferenceTranslator;\n+\t\n+\t@Override\n+\tpublic DiagnosticReport toFhirResource(Obs obsGroup) {\n+\t\tif (obsGroup == null)\n+\t\t\treturn null;\n+\t\t\n+\t\tif (!obsGroup.isObsGrouping()) {\n+\t\t\tthrow new IllegalArgumentException(\"Obs object must be an Obs group.\");\n+\t\t}\n+\t\t\n+\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n+\t\t\n+\t\tsetFhirFields(obsGroup, diagnosticReport);\n+\t\t\n+\t\treturn diagnosticReport;\n+\t}\n+\t\n+\tprivate void setFhirFields(Obs obsGroup, DiagnosticReport diagnosticReport) {\n+\t\tList<CodeableConcept> categoryList = new ArrayList<>();\n+\t\tCodeableConcept category = new CodeableConcept();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIxMzQ1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMTowOVrOFm-fjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMTowOVrOFm-fjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDA5Mg==", "bodyText": "I would code this as follows:\ndiagnosticReport.addCategory().setSystem(FhirConstants.DIAGNOSTIC_SERVICE_SECTIONS_VALUESET_URI).setCode(FhirConstants.DIAGNOSTIC_REPORT_CATEGORY_LAB);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376414092", "createdAt": "2020-02-07T14:21:09Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DiagnosticReport;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.Person;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ConceptTranslator;\n+import org.openmrs.module.fhir2.api.translators.DiagnosticReportTranslator;\n+import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class DiagnosticReportTranslatorImpl implements DiagnosticReportTranslator {\n+\t\n+\t@Inject\n+\tprivate EncounterReferenceTranslator encounterReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Inject\n+\tprivate ConceptTranslator conceptTranslator;\n+\t\n+\t@Inject\n+\tprivate ObservationReferenceTranslator observationReferenceTranslator;\n+\t\n+\t@Override\n+\tpublic DiagnosticReport toFhirResource(Obs obsGroup) {\n+\t\tif (obsGroup == null)\n+\t\t\treturn null;\n+\t\t\n+\t\tif (!obsGroup.isObsGrouping()) {\n+\t\t\tthrow new IllegalArgumentException(\"Obs object must be an Obs group.\");\n+\t\t}\n+\t\t\n+\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n+\t\t\n+\t\tsetFhirFields(obsGroup, diagnosticReport);\n+\t\t\n+\t\treturn diagnosticReport;\n+\t}\n+\t\n+\tprivate void setFhirFields(Obs obsGroup, DiagnosticReport diagnosticReport) {\n+\t\tList<CodeableConcept> categoryList = new ArrayList<>();\n+\t\tCodeableConcept category = new CodeableConcept();\n+\t\t\n+\t\t// DiagnosticReport.id\n+\t\tdiagnosticReport.setId(obsGroup.getUuid());\n+\t\t\n+\t\t// DiagnosticReport.status\n+\t\tdiagnosticReport.setStatus(DiagnosticReport.DiagnosticReportStatus.UNKNOWN);\n+\t\t\n+\t\t// DiagnosticReport.encounter\n+\t\tEncounter encounter = obsGroup.getEncounter();\n+\t\tif (encounter != null)\n+\t\t\tdiagnosticReport.setEncounter(encounterReferenceTranslator.toFhirResource(encounter));\n+\t\t\n+\t\t// DiagnosticReport.subject\n+\t\tPerson subject = obsGroup.getPerson();\n+\t\tif (subject != null) {\n+\t\t\ttry {\n+\t\t\t\tdiagnosticReport.setSubject(patientReferenceTranslator.toFhirResource((Patient) subject));\n+\t\t\t}\n+\t\t\tcatch (ClassCastException ignored) {}\n+\t\t}\n+\t\t\n+\t\t// DiagnosticReport.code\n+\t\tConcept code = obsGroup.getConcept();\n+\t\tif (code != null)\n+\t\t\tdiagnosticReport.setCode(conceptTranslator.toFhirResource(code));\n+\t\t\n+\t\t// DiagnosticReport.category\n+\t\tCoding defaultCoding = category.addCoding();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIxODQzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMjozNlrOFm-iaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMjozNlrOFm-iaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDgyNQ==", "bodyText": "Instead of this line, you could just annotate the class as @RunWith(MockitoJUnitRunner.class)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376414825", "createdAt": "2020-02-07T14:22:36Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/DiagnosticReportTranslatorImplTest.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.DiagnosticReport;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.openmrs.Concept;\n+import org.openmrs.Encounter;\n+import org.openmrs.Obs;\n+import org.openmrs.Patient;\n+import org.openmrs.module.fhir2.api.translators.ConceptTranslator;\n+import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceTranslator;\n+import org.openmrs.module.fhir2.api.translators.PatientReferenceTranslator;\n+\n+public class DiagnosticReportTranslatorImplTest {\n+\t\n+\tprivate static final String PARENT_UUID = \"249b9094-b812-4b0c-a204-0052a05c657f\";\n+\t\n+\tprivate static final String CHILD_UUID = \"faf75a02-5083-454c-a4ec-9a4babf26558\";\n+\t\n+\tprivate static final String PATIENT_UUID = \"249b9094-5083-454c-a4ec-9a4babf26558\";\n+\t\n+\t@Mock\n+\tprivate EncounterReferenceTranslator encounterReferenceTranslator;\n+\t\n+\t@Mock\n+\tprivate PatientReferenceTranslator patientReferenceTranslator;\n+\t\n+\t@Mock\n+\tprivate ConceptTranslator conceptTranslator;\n+\t\n+\t@Mock\n+\tprivate ObservationReferenceTranslator observationReferenceTranslator;\n+\t\n+\tDiagnosticReportTranslatorImpl translator;\n+\t\n+\tObs obsGroup;\n+\t\n+\t@Before\n+\tpublic void setup() {\n+\t\tMockitoAnnotations.initMocks(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIyMjYxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMzo0OVrOFm-k-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMzo0OVrOFm-k-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNTQ4Mg==", "bodyText": "Add a new line before this line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376415482", "createdAt": "2020-02-07T14:23:49Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.when;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.DiagnosticReport;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.api.FhirDiagnosticReportService;\n+import org.openmrs.module.fhir2.web.servlet.BaseFhirResourceProviderTest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+\n+public class DiagnosticReportFhirResourceProviderWebTest extends BaseFhirResourceProviderTest<DiagnosticReportFhirResourceProvider, DiagnosticReport> {\n+\t\n+\tprivate static final String DIAGNOSTIC_REPORT_UUID = \"8a849d5e-6011-4279-a124-40ada5a687de\";\n+\t\n+\tprivate static final String WRONG_UUID = \"9bf0d1ac-62a8-4440-a5a1-eb1015a7cc65\";\n+\t\n+\t@Mock\n+\tprivate FhirDiagnosticReportService service;\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate DiagnosticReportFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tresourceProvider = new DiagnosticReportFhirResourceProvider();\n+\t\tresourceProvider.setService(service);\n+\t\tsuper.setup();\n+\t}\n+\t\n+\t@Test\n+\tpublic void getDiagnosticReportByUuid_shouldReturnEncounter() throws Exception {\n+\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n+\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\twhen(service.getDiagnosticReportByUuid(DIAGNOSTIC_REPORT_UUID)).thenReturn(diagnosticReport);\n+\t\tMockHttpServletResponse response = get(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID).accept(FhirMediaTypes.JSON)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIyMzU3OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyNDowOFrOFm-lkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyNDowOFrOFm-lkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNTYzMw==", "bodyText": "Add a new line before this line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/55#discussion_r376415633", "createdAt": "2020-02-07T14:24:08Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.DiagnosticReport;\n+import org.hl7.fhir.r4.model.IdType;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.api.FhirDiagnosticReportService;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class DiagnosticReportFhirResourceProviderTest {\n+\t\n+\tprivate static final String UUID = \"bdd7e368-3d1a-42a9-9538-395391b64adf\";\n+\t\n+\tprivate static final String WRONG_UUID = \"df34a1c1-f57b-4c33-bee5-e601b56b9d5b\";\n+\t\n+\t@Mock\n+\tprivate FhirDiagnosticReportService service;\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate DiagnosticReportFhirResourceProvider resourceProvider;\n+\t\n+\tprivate DiagnosticReport diagnosticReport;\n+\t\n+\t@Before\n+\tpublic void setup() {\n+\t\tresourceProvider = new DiagnosticReportFhirResourceProvider();\n+\t\tresourceProvider.setService(service);\n+\t}\n+\t\n+\t@Before\n+\tpublic void initTask() {\n+\t\tdiagnosticReport = new DiagnosticReport();\n+\t\tdiagnosticReport.setId(UUID);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getResourceType_shouldReturnResourceType() {\n+\t\tassertThat(resourceProvider.getResourceType(), equalTo(DiagnosticReport.class));\n+\t\tassertThat(resourceProvider.getResourceType().getName(), equalTo(DiagnosticReport.class.getName()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void getDiagnosticReportById_shouldReturnMatchingDiagnosticReport() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(UUID);\n+\t\t\n+\t\twhen(service.getDiagnosticReportByUuid(UUID)).thenReturn(diagnosticReport);\n+\t\t\n+\t\tDiagnosticReport result = resourceProvider.getDiagnosticReportById(id);\n+\t\tassertThat(result, notNullValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "075e13d28cbf6c54563b69e6a39e86242dda0eab"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1232, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}