{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NjI4Mzc5", "number": 267, "title": "Integration tests", "bodyText": "Refactoring to support integration tests, actual integration tests and fix bugs uncovered by those tests.  The main changes so far:\n\n\nTest data files are now stored in a separate module called, appropriately enough test-data. This ensures we can use the same test data for both our series of unit tests and integration tests.\n\n\nRetired or voided objects are treated as though they have been deleted. That means they are not returned in search results and attempts to fetch them by UUID will return an appropriate error.\n\n\nSearches returning R3 resources are now supported\n\n\nI've changed around a large number of tests largely to ensure that they are properly checking prerequisites. For example, in a couple of cases, we were attempting to verify that a list of one item was sorted correctly.\n\n\nThe implementation of preferredPageSize() has been moved to the SearchQueryBundleProvider class rather than the BaseFhirDao class as it seemed to make more sense there.", "createdAt": "2020-07-29T19:07:21Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267", "merged": true, "mergeCommit": {"oid": "a09cc3101acb4401770d0fb0b4dcc7477cab4948"}, "closed": true, "closedAt": "2020-08-05T13:40:52Z", "author": {"login": "ibacher"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5yYcVgBqjM2MDEwNTcyMjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc77VJvgFqTQ2MTY2OTEzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d9a9afa470b60059be1af4d91d3b68ad6d70c3d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6d9a9afa470b60059be1af4d91d3b68ad6d70c3d", "committedDate": "2020-07-29T15:06:26Z", "message": "Enhancements and improvements:\n\n* Retired or voided items are now removed from results\n* Attempt to GET a deleted item results in a 410 error\n* Searching by _lastUpdated implemented in a generic manner\n* Tests now more robustly check preconditions"}, "afterCommit": {"oid": "9027f5c3125069b5b46a3ff70c3ec3cc34922fed", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9027f5c3125069b5b46a3ff70c3ec3cc34922fed", "committedDate": "2020-07-29T22:01:29Z", "message": "Remove search for Medication.status, as we assume all Medications are active"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8a2467aeabd8f9a76184c81edbb284de3e743c5", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b8a2467aeabd8f9a76184c81edbb284de3e743c5", "committedDate": "2020-07-30T14:23:45Z", "message": "Initial integration tests for patients"}, "afterCommit": {"oid": "80a94b2f63c0ede341f5b17fa3f12953a4b7492f", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/80a94b2f63c0ede341f5b17fa3f12953a4b7492f", "committedDate": "2020-07-31T13:11:18Z", "message": "Initial integration tests for patients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80a94b2f63c0ede341f5b17fa3f12953a4b7492f", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/80a94b2f63c0ede341f5b17fa3f12953a4b7492f", "committedDate": "2020-07-31T13:11:18Z", "message": "Initial integration tests for patients"}, "afterCommit": {"oid": "012472055a86d91c6303b4791790527baa347d34", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/012472055a86d91c6303b4791790527baa347d34", "committedDate": "2020-07-31T14:33:41Z", "message": "Initial integration tests for patients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "012472055a86d91c6303b4791790527baa347d34", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/012472055a86d91c6303b4791790527baa347d34", "committedDate": "2020-07-31T14:33:41Z", "message": "Initial integration tests for patients"}, "afterCommit": {"oid": "a226aaab3216435837a2e4c4458f5732f58dba9c", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a226aaab3216435837a2e4c4458f5732f58dba9c", "committedDate": "2020-07-31T20:38:03Z", "message": "Initial integration tests for patients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a226aaab3216435837a2e4c4458f5732f58dba9c", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a226aaab3216435837a2e4c4458f5732f58dba9c", "committedDate": "2020-07-31T20:38:03Z", "message": "Initial integration tests for patients"}, "afterCommit": {"oid": "853f415fe0cff694d6a79dc5035a5939b8d887d8", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/853f415fe0cff694d6a79dc5035a5939b8d887d8", "committedDate": "2020-08-03T17:12:09Z", "message": "Initial integration tests for patients"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08434bc26f60627cd0cdeb4a53d24cb89ae33412", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/08434bc26f60627cd0cdeb4a53d24cb89ae33412", "committedDate": "2020-08-03T17:19:41Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/952ec737e2cd373c5871a8d48e188da8bbbcd7ba", "committedDate": "2020-08-03T17:19:41Z", "message": "Initial integration tests for patients"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "853f415fe0cff694d6a79dc5035a5939b8d887d8", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/853f415fe0cff694d6a79dc5035a5939b8d887d8", "committedDate": "2020-08-03T17:12:09Z", "message": "Initial integration tests for patients"}, "afterCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/952ec737e2cd373c5871a8d48e188da8bbbcd7ba", "committedDate": "2020-08-03T17:19:41Z", "message": "Initial integration tests for patients"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTU1ODY4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#pullrequestreview-460555868", "createdAt": "2020-08-04T07:19:17Z", "commit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxOToxN1rOG7UJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNDo1NVrOG7dsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTI2MQ==", "bodyText": "why not @Authorized(PrivilegeConstants.DELETE_ALLERGIES)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464849261", "createdAt": "2020-08-04T07:19:17Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "diffHunk": "@@ -9,8 +9,29 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Allergy;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirAllergyIntoleranceDao extends FhirDao<Allergy> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_ALLERGIES)\n+\tAllergy get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_ALLERGIES, PrivilegeConstants.EDIT_ALLERGIES })\n+\tAllergy createOrUpdate(Allergy newEntry);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.EDIT_ALLERGIES })\n+\tAllergy delete(String uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5MjIwNg==", "bodyText": "Should be @Authorized(PrivilegeConstants.DELETE_OBS) instead of \ud83d\udc46", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464892206", "createdAt": "2020-08-04T08:37:42Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirObservationDao.java", "diffHunk": "@@ -9,8 +9,33 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Obs;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirObservationDao extends FhirDao<Obs> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_OBS)\n+\tObs get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_OBS, PrivilegeConstants.EDIT_OBS })\n+\tObs createOrUpdate(Obs newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_OBS)\n+\tObs delete(String uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5Mjk1MQ==", "bodyText": "@Authorized(PrivilegeConstants.DELETE_PERSONS)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464892951", "createdAt": "2020-08-04T08:39:02Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirPersonDao.java", "diffHunk": "@@ -15,10 +15,34 @@\n \n import org.openmrs.Person;\n import org.openmrs.PersonAttribute;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirPersonDao extends FhirDao<Person> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tPerson get(String uuid);\n+\t\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n \tList<PersonAttribute> getActiveAttributesByPersonAndAttributeTypeUuid(@NotNull Person person,\n \t        @NotNull String personAttributeTypeUuid);\n \t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_PERSONS, PrivilegeConstants.EDIT_PERSONS })\n+\tPerson createOrUpdate(Person newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_PERSONS)\n+\tPerson delete(String uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5NjAwMg==", "bodyText": "Is there a specific reason not to use 'Relationship PrivilegeConstants'? i.e\n@Authorized(PrivilegeConstants.GET_RELATIONSHIPS), @Authorized(PrivilegeConstants.DELETE_RELATIONSHIPS),\n@Authorized(PrivilegeConstants.EDIT_RELATIONSHIPS)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464896002", "createdAt": "2020-08-04T08:44:00Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirRelatedPersonDao.java", "diffHunk": "@@ -9,8 +9,33 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Relationship;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirRelatedPersonDao extends FhirDao<Relationship> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tRelationship get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_PERSONS, PrivilegeConstants.EDIT_PERSONS })\n+\tRelationship createOrUpdate(Relationship newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_PERSONS)\n+\tRelationship delete(String uuid);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<String> getSearchResultUuids(SearchParameterMap theParams);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<Relationship> getSearchResults(SearchParameterMap theParams, List<String> matchingResourceUuids, int firstResult,\n+\t        int lastResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3OTUxNg==", "bodyText": "It can reduce to this, just thinking aloud\nif(isVoidable || isRetirable) {\n  if(isVoided(result) || isRetired(result)) {\n     throw new ResourceGoneException(uuid);\n  }\n}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464979516", "createdAt": "2020-08-04T11:22:16Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n-\t@Autowired\n-\tprivate FhirGlobalPropertyService globalPropertyService;\n-\t\n \tprotected BaseFhirDao() {\n \t\ttypeToken = new TypeToken<T>(getClass()) {\n \t\t\t\n \t\t};\n+\t\t\n+\t\tthis.isRetireable = Retireable.class.isAssignableFrom(typeToken.getRawType());\n+\t\tthis.isVoidable = Voidable.class.isAssignableFrom(typeToken.getRawType());\n \t}\n \t\n \t@Override\n \t@Transactional(readOnly = true)\n \t@SuppressWarnings(\"unchecked\")\n \tpublic T get(String uuid) {\n-\t\treturn (T) sessionFactory.getCurrentSession().createCriteria(typeToken.getRawType()).add(eq(\"uuid\", uuid))\n+\t\tT result = (T) sessionFactory.getCurrentSession().createCriteria(typeToken.getRawType()).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n+\t\t\n+\t\tif (result == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (isVoidable) {\n+\t\t\tif (isVoided(result)) {\n+\t\t\t\tthrow new ResourceGoneException(uuid);\n+\t\t\t}\n+\t\t} else if (isRetireable) {\n+\t\t\tif (isRetired(result)) {\n+\t\t\t\tthrow new ResourceGoneException(uuid);\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4MjAxOA==", "bodyText": "We should consider making this public.\nDepending on spring context to inject sessionFactory is a little bit complex, it isn't obvious.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464982018", "createdAt": "2020-08-04T11:27:32Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NTQyNg==", "bodyText": "Just curious, You've used handleLastUpdatedImmutable() method for Observation, DiagnosticReport, and MedicationRequest Daos and not for rest. Can't seem to find the obvious reason? \ud83e\udd26\ud83c\udffe\u200d\u2642\ufe0f\nDoes this mean for Observation, DiagnosticReport & MedicationRequest once created, that cannot be changed?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464995426", "createdAt": "2020-08-04T11:54:35Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -94,15 +88,8 @@ protected void setupSearchParams(Criteria criteria, SearchParameterMap theParams\n \t}\n \t\n \t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\tprotected Optional<Criterion> handleLastUpdated(DateRangeParam param) {\n+\t\treturn super.handleLastUpdatedImmutable(param);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNTcxMA==", "bodyText": "Is it worth it adding a second param - String property to handleLastUpdated() method so that this functionality can be handled consistently by the superclass? Of course, you can override", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465005710", "createdAt": "2020-08-04T12:14:55Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "diffHunk": "@@ -75,7 +73,7 @@ protected void setupSearchParams(Criteria criteria, SearchParameterMap theParams\n \t}\n \t\n \t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\tprotected Optional<Criterion> handleLastUpdated(DateRangeParam param) {\n \t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n \t\t\n \t\tcriterionList.add(handleDateRange(\"personDateVoided\", param));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0864746a9ef4cd33877dc081dd69bb033929dd4", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b0864746a9ef4cd33877dc081dd69bb033929dd4", "committedDate": "2020-08-04T13:50:19Z", "message": "Responses to initial review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNjY5MTM1", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#pullrequestreview-461669135", "createdAt": "2020-08-05T13:35:07Z", "commit": {"oid": "b0864746a9ef4cd33877dc081dd69bb033929dd4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4182, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}