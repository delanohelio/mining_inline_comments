{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4Mzk3MjE4", "number": 115, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NjoyOFrODoIMRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToyOToyNFrODqBQHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzODQ1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NjoyOFrOF2gBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyMjoxMFrOF2z59g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjEwOA==", "bodyText": "Please leave a line before the return statement.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692108", "createdAt": "2020-03-15T16:56:28Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -455,70 +456,76 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n-\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceAndListParam locationReference) {\n \t\tif (locationReference != null) {\n \t\t\tcriteria.createAlias(\"location\", \"l\");\n \t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\thandleAndListParam(locationReference, token -> {\n+\t\t\t\tif (token.getChain() != null) {\n+\t\t\t\t\tswitch (token.getChain()) {\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.postalCode\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.country\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", token.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\treturn Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNzg0Ng==", "bodyText": "Also, this is intended one time too many \ud83d\ude42", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r393017846", "createdAt": "2020-03-16T13:22:10Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -455,70 +456,76 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n-\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceAndListParam locationReference) {\n \t\tif (locationReference != null) {\n \t\t\tcriteria.createAlias(\"location\", \"l\");\n \t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\thandleAndListParam(locationReference, token -> {\n+\t\t\t\tif (token.getChain() != null) {\n+\t\t\t\t\tswitch (token.getChain()) {\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.postalCode\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.country\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", token.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\treturn Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjEwOA=="}, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzODc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Njo1MVrOF2gBtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Njo1MVrOF2gBtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjE1MQ==", "bodyText": "Same as above", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692151", "createdAt": "2020-03-15T16:56:51Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -455,70 +456,76 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n-\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceAndListParam locationReference) {\n \t\tif (locationReference != null) {\n \t\t\tcriteria.createAlias(\"location\", \"l\");\n \t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\thandleAndListParam(locationReference, token -> {\n+\t\t\t\tif (token.getChain() != null) {\n+\t\t\t\t\tswitch (token.getChain()) {\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.postalCode\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.country\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", token.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\treturn Optional.empty();\n+\t\t\t});\n \t\t}\n \t}\n \t\n-\tprotected void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\tprotected void handleParticipantReference(Criteria criteria, ReferenceAndListParam participantReference) {\n \t\tif (participantReference != null) {\n \t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n \t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\").createAlias(\"ps.names\",\n-\t\t\t\t\t\t    \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\thandleAndListParam(participantReference, participantToken -> {\n+\t\t\t\tif (participantToken.getChain() != null) {\n+\t\t\t\t\tswitch (participantToken.getChain()) {\n+\t\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantToken.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Practitioner.SP_GIVEN:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantToken.getValue(), MatchMode.START));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Practitioner.SP_FAMILY:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantToken.getValue(), MatchMode.START));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Practitioner.SP_NAME:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n+\t\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\");\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tfor (String token : StringUtils.split(participantToken.getValue(), \" \\t,\")) {\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantToken.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\treturn Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzODg4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NzowMlrOF2gBxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NzowMlrOF2gBxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjE2NA==", "bodyText": "Same as above", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692164", "createdAt": "2020-03-15T16:57:02Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -569,45 +576,49 @@ protected void handleNames(Criteria criteria, StringOrListParam name, StringOrLi\n \t\t}\n \t}\n \t\n-\tprotected void handlePatientReference(Criteria criteria, ReferenceParam patientReference) {\n+\tprotected void handlePatientReference(Criteria criteria, ReferenceAndListParam patientReference) {\n \t\thandlePatientReference(criteria, patientReference, \"patient\");\n \t}\n \t\n-\tprotected void handlePatientReference(Criteria criteria, ReferenceParam patientReference, String associationPath) {\n+\tprotected void handlePatientReference(Criteria criteria, ReferenceAndListParam patientReference,\n+\t        String associationPath) {\n \t\tif (patientReference != null) {\n \t\t\tcriteria.createAlias(associationPath, \"p\");\n \t\t\t\n-\t\t\tif (patientReference.getChain() != null) {\n-\t\t\t\tswitch (patientReference.getChain()) {\n-\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", patientReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", patientReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", patientReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Patient.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(patientReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", patientReference.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\thandleAndListParam(patientReference, patientToken -> {\n+\t\t\t\tif (patientToken.getChain() != null) {\n+\t\t\t\t\tswitch (patientToken.getChain()) {\n+\t\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", patientToken.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Patient.SP_GIVEN:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n+\t\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", patientToken.getValue(), MatchMode.START));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Patient.SP_FAMILY:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\")\n+\t\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", patientToken.getValue(), MatchMode.START));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Patient.SP_NAME:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"p.names\", \"pn\");\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tfor (String token : StringUtils.split(patientToken.getValue(), \" \\t,\")) {\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n+\t\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\n+\t\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\t\tcriteria.add(eq(\"p.uuid\", patientToken.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\treturn Optional.empty();\n+\t\t\t});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 238}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTA3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NzozMVrOF2gB3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1NzozMVrOF2gB3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjE5MQ==", "bodyText": "@VaishSiddharth  setValue() method resets the value of chain to null. Hence you must set the chain after you set the value.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692191", "createdAt": "2020-03-15T16:57:31Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "diffHunk": "@@ -83,9 +85,13 @@ public void getAllergyIntoleranceByUuid_shouldReturnNullWhenCalledWithUnknownUui\n \t\n \t@Test\n \tpublic void searchForAllergies_shouldSearchForAllergiesByIdentifier() {\n-\t\tReferenceParam referenceParam = new ReferenceParam();\n-\t\treferenceParam.setChain(Patient.SP_IDENTIFIER);\n-\t\treferenceParam.setValue(\"M4001-1\");\n+\t\tReferenceAndListParam referenceParam = new ReferenceAndListParam();\n+\t\tReferenceParam allergyParam = new ReferenceParam();\n+\t\t\n+\t\tallergyParam.setChain(Patient.SP_IDENTIFIER);\n+\t\tallergyParam.setValue(\"M4001-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTEwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Nzo0MFrOF2gB4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Nzo0MFrOF2gB4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjE5NQ==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692195", "createdAt": "2020-03-15T16:57:40Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "diffHunk": "@@ -96,9 +102,13 @@ public void searchForAllergies_shouldSearchForAllergiesByIdentifier() {\n \t\n \t@Test\n \tpublic void searchForAllergies_shouldSearchForAllergiesByPatientGivenName() {\n-\t\tReferenceParam referenceParam = new ReferenceParam();\n-\t\treferenceParam.setChain(Patient.SP_GIVEN);\n-\t\treferenceParam.setValue(\"John\");\n+\t\tReferenceAndListParam referenceParam = new ReferenceAndListParam();\n+\t\tReferenceParam allergyParam = new ReferenceParam();\n+\t\t\n+\t\tallergyParam.setChain(Patient.SP_GIVEN);\n+\t\tallergyParam.setValue(\"John\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTE2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Nzo0OFrOF2gB6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Nzo0OFrOF2gB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjIwMw==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692203", "createdAt": "2020-03-15T16:57:48Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "diffHunk": "@@ -108,9 +118,13 @@ public void searchForAllergies_shouldSearchForAllergiesByPatientGivenName() {\n \t\n \t@Test\n \tpublic void searchForAllergies_shouldSearchForAllergiesByPatientFamilyName() {\n-\t\tReferenceParam referenceParam = new ReferenceParam();\n-\t\treferenceParam.setChain(Patient.SP_FAMILY);\n-\t\treferenceParam.setValue(\"Doe\");\n+\t\tReferenceAndListParam referenceParam = new ReferenceAndListParam();\n+\t\tReferenceParam allergyParam = new ReferenceParam();\n+\t\t\n+\t\tallergyParam.setChain(Patient.SP_FAMILY);\n+\t\tallergyParam.setValue(\"Doe\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTIwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Nzo1NlrOF2gB8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1Nzo1NlrOF2gB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjIxMA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692210", "createdAt": "2020-03-15T16:57:56Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImplTest.java", "diffHunk": "@@ -120,9 +134,13 @@ public void searchForAllergies_shouldSearchForAllergiesByPatientFamilyName() {\n \t\n \t@Test\n \tpublic void searchForAllergies_shouldSearchForAllergiesByPatientName() {\n-\t\tReferenceParam referenceParam = new ReferenceParam();\n-\t\treferenceParam.setChain(Patient.SP_NAME);\n-\t\treferenceParam.setValue(\"John Doe\");\n+\t\tReferenceAndListParam referenceParam = new ReferenceAndListParam();\n+\t\tReferenceParam allergyParam = new ReferenceParam();\n+\t\t\n+\t\tallergyParam.setChain(Patient.SP_NAME);\n+\t\tallergyParam.setValue(\"John Doe\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTYzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1ODozN1rOF2gCLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1ODozN1rOF2gCLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjI2OA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692268", "createdAt": "2020-03-15T16:58:37Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -219,9 +221,13 @@ public void searchForObs_shouldSupportMappedAndUnmappedConcepts() {\n \t\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientUuid() {\n-\t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setChain(\"\");\n-\t\tpatientReference.setValue(PATIENT_UUID);\n+\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n+\t\tReferenceParam patient = new ReferenceParam();\n+\t\t\n+\t\tpatient.setChain(\"\");\n+\t\tpatient.setValue(PATIENT_UUID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTY5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1ODo0NlrOF2gCOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1ODo0NlrOF2gCOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjI4MA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692280", "createdAt": "2020-03-15T16:58:46Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -232,9 +238,13 @@ public void searchForObs_shouldReturnObsByPatientUuid() {\n \t\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientGivenName() {\n-\t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setChain(Patient.SP_GIVEN);\n-\t\tpatientReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n+\t\tReferenceParam patient = new ReferenceParam();\n+\t\t\n+\t\tpatient.setChain(Patient.SP_GIVEN);\n+\t\tpatient.setValue(PATIENT_GIVEN_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTc2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1ODo1M1rOF2gCQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1ODo1M1rOF2gCQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjI5MA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692290", "createdAt": "2020-03-15T16:58:53Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -245,9 +255,13 @@ public void searchForObs_shouldReturnObsByPatientGivenName() {\n \t\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientFamilyName() {\n-\t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setChain(Patient.SP_FAMILY);\n-\t\tpatientReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n+\t\tReferenceParam patient = new ReferenceParam();\n+\t\t\n+\t\tpatient.setChain(Patient.SP_FAMILY);\n+\t\tpatient.setValue(PATIENT_FAMILY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTkwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTowMVrOF2gCUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTowMVrOF2gCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjMwNg==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692306", "createdAt": "2020-03-15T16:59:01Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -258,9 +272,13 @@ public void searchForObs_shouldReturnObsByPatientFamilyName() {\n \t\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientName() {\n-\t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setChain(Patient.SP_NAME);\n-\t\tpatientReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n+\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n+\t\tReferenceParam patient = new ReferenceParam();\n+\t\t\n+\t\tpatient.setChain(Patient.SP_NAME);\n+\t\tpatient.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDAzOTk4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OToxMFrOF2gCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OToxMFrOF2gCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjMxOA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692318", "createdAt": "2020-03-15T16:59:10Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -271,9 +289,13 @@ public void searchForObs_shouldReturnObsByPatientName() {\n \t\n \t@Test\n \tpublic void searchForObs_shouldReturnObsByPatientIdentifier() {\n-\t\tReferenceParam patientReference = new ReferenceParam();\n-\t\tpatientReference.setChain(Patient.SP_IDENTIFIER);\n-\t\tpatientReference.setValue(PATIENT_IDENTIFIER);\n+\t\tReferenceAndListParam patientReference = new ReferenceAndListParam();\n+\t\tReferenceParam patient = new ReferenceParam();\n+\t\t\n+\t\tpatient.setChain(Patient.SP_IDENTIFIER);\n+\t\tpatient.setValue(PATIENT_IDENTIFIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDA0MDE2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTozN1rOF2gCeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTozN1rOF2gCeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjM0NA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692344", "createdAt": "2020-03-15T16:59:37Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImplTest.java", "diffHunk": "@@ -111,7 +119,13 @@ public void searchForAllergies_shouldSearchForAllergiesByIdentifier() {\n \tpublic void searchForAllergies_shouldSearchForAllergiesByPatientGivenName() {\n \t\tCollection<Allergy> allergies = new ArrayList<>();\n \t\tallergies.add(omrsAllergy);\n-\t\tReferenceParam patientParam = new ReferenceParam().setChain(Patient.SP_GIVEN).setValue(\"John\");\n+\t\tReferenceAndListParam patientParam = new ReferenceAndListParam();\n+\t\tReferenceParam referenceParam = new ReferenceParam();\n+\t\t\n+\t\treferenceParam.setChain(Patient.SP_GIVEN);\n+\t\treferenceParam.setValue(\"John\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDA0MDIyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTo0NlrOF2gCgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTo0NlrOF2gCgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjM1Mw==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692353", "createdAt": "2020-03-15T16:59:46Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImplTest.java", "diffHunk": "@@ -126,7 +140,13 @@ public void searchForAllergies_shouldSearchForAllergiesByPatientGivenName() {\n \tpublic void searchForAllergies_shouldSearchForAllergiesByPatientFamilyName() {\n \t\tCollection<Allergy> allergies = new ArrayList<>();\n \t\tallergies.add(omrsAllergy);\n-\t\tReferenceParam patientParam = new ReferenceParam().setChain(Patient.SP_FAMILY).setValue(\"John\");\n+\t\tReferenceAndListParam patientParam = new ReferenceAndListParam();\n+\t\tReferenceParam referenceParam = new ReferenceParam();\n+\t\t\n+\t\treferenceParam.setChain(Patient.SP_FAMILY);\n+\t\treferenceParam.setValue(\"John\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNDA0MDMzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTo1NFrOF2gCjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNVQxNjo1OTo1NFrOF2gCjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjY5MjM2Ng==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r392692366", "createdAt": "2020-03-15T16:59:54Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImplTest.java", "diffHunk": "@@ -141,7 +161,13 @@ public void searchForAllergies_shouldSearchForAllergiesByPatientFamilyName() {\n \tpublic void searchForAllergies_shouldSearchForAllergiesByPatientName() {\n \t\tCollection<Allergy> allergies = new ArrayList<>();\n \t\tallergies.add(omrsAllergy);\n-\t\tReferenceParam patientParam = new ReferenceParam().setChain(Patient.SP_NAME).setValue(\"John Doe\");\n+\t\tReferenceAndListParam patientParam = new ReferenceAndListParam();\n+\t\tReferenceParam referenceParam = new ReferenceParam();\n+\t\t\n+\t\treferenceParam.setChain(Patient.SP_NAME);\n+\t\treferenceParam.setValue(\"John Doe\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjE2MjgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyNDozOFrOF2z_rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyNDozOFrOF2z_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxOTMxMQ==", "bodyText": "When we're doing this inside a handleAndListParam we do need to check that the alias doesn't already exist.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r393019311", "createdAt": "2020-03-16T13:24:38Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -455,70 +456,76 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n-\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceAndListParam locationReference) {\n \t\tif (locationReference != null) {\n \t\t\tcriteria.createAlias(\"location\", \"l\");\n \t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n-\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\thandleAndListParam(locationReference, token -> {\n+\t\t\t\tif (token.getChain() != null) {\n+\t\t\t\t\tswitch (token.getChain()) {\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\t\tpropertyLike(\"l.postalCode\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\t\tpropertyLike(\"l.country\", token.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", token.getValue()));\n+\t\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\treturn Optional.empty();\n+\t\t\t});\n \t\t}\n \t}\n \t\n-\tprotected void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\tprotected void handleParticipantReference(Criteria criteria, ReferenceAndListParam participantReference) {\n \t\tif (participantReference != null) {\n \t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n \t\t\t\n-\t\t\tif (participantReference.getChain() != null) {\n-\t\t\t\tswitch (participantReference.getChain()) {\n-\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_GIVEN:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_FAMILY:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\")\n-\t\t\t\t\t\t        .createAlias(\"ps.names\", \"pn\")\n-\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase Practitioner.SP_NAME:\n-\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"pro\").createAlias(\"pro.person\", \"ps\").createAlias(\"ps.names\",\n-\t\t\t\t\t\t    \"pn\");\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n-\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n-\t\t\t\t\t\tbreak;\n+\t\t\thandleAndListParam(participantReference, participantToken -> {\n+\t\t\t\tif (participantToken.getChain() != null) {\n+\t\t\t\t\tswitch (participantToken.getChain()) {\n+\t\t\t\t\t\tcase Practitioner.SP_IDENTIFIER:\n+\t\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantToken.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "431a8cbd8e88c61ab131852881c0a26c16e0c85b"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzM5MDY5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowODo0NVrOF3ALgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowODo0NVrOF3ALgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxODk0NQ==", "bodyText": "I would prefer that instead of creating the alias here, we just pass in what the alias is called as it was before.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r393218945", "createdAt": "2020-03-16T18:08:45Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -418,13 +418,14 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n-\tprotected Optional<Criterion> handleEncounterReference(@NotNull String encounterAlias,\n-\t        ReferenceParam encounterReference) {\n-\t\tif (encounterReference == null || encounterReference.getIdPart() == null) {\n-\t\t\treturn Optional.empty();\n+\tprotected void handleEncounterReference(Criteria criteria, ReferenceAndListParam encounterReference) {\n+\t\tif (encounterReference != null) {\n+\t\t\tcriteria.createAlias(\"encounter\", \"e\");\n+\t\t\thandleAndListParam(encounterReference, token -> {\n+\t\t\t\tcriteria.add(ilike(\"e.uuid\", token.getIdPart()));\n+\t\t\t\treturn Optional.empty();\n+\t\t\t});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af45acacfc21fddc1a4c9e444241882619df7276"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQwMDUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMDozMlrOF3ARfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMDozMlrOF3ARfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMDQ3Ng==", "bodyText": "I'd prefer this method to be re-written along the lines I requested for handleEncounterReference above. We don't want to be passing around the Criteria object unless we absolutely need to.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r393220476", "createdAt": "2020-03-16T18:10:32Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -455,58 +456,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n-\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceAndListParam locationReference) {\n \t\tif (locationReference != null) {\n \t\t\tcriteria.createAlias(\"location\", \"l\");\n \t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\thandleAndListParam(locationReference, token -> {\n+\t\t\t\tswitch (token.getChain()) {\n \t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tpropertyLike(\"l.postalCode\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tpropertyLike(\"l.country\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n+\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", token.getValue()));\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af45acacfc21fddc1a4c9e444241882619df7276"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQwNzAwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMjoxOVrOF3AVbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMjoxOVrOF3AVbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMTQ4Nw==", "bodyText": "We definitely need !containsAlias checks around these createAlias uses. This, however, seems like a legitimate place to pass in the criteria.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r393221487", "createdAt": "2020-03-16T18:12:19Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -455,58 +456,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n-\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceAndListParam locationReference) {\n \t\tif (locationReference != null) {\n \t\t\tcriteria.createAlias(\"location\", \"l\");\n \t\t\t\n-\t\t\tif (locationReference.getChain() != null) {\n-\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\thandleAndListParam(locationReference, token -> {\n+\t\t\t\tswitch (token.getChain()) {\n \t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n-\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", locationReference.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tpropertyLike(\"l.cityVillage\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n-\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", locationReference.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tpropertyLike(\"l.stateProvince\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n-\t\t\t\t\t\tpropertyLike(\"l.postalCode\", locationReference.getValue()).ifPresent(criteria::add);\n+\t\t\t\t\t\tpropertyLike(\"l.postalCode\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\t\tbreak;\n \t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n-\t\t\t\t\t\tpropertyLike(\"l.country\", locationReference.getValue()).ifPresent(criteria::add);\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tpropertyLike(\"l.country\", token.getValue()).ifPresent(criteria::add);\n \t\t\t\t\tcase \"\":\n-\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n+\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", token.getValue()));\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n-\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.empty();\n+\t\t\t});\n \t\t}\n \t}\n \t\n-\tprotected void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\tprotected void handleParticipantReference(Criteria criteria, ReferenceAndListParam participantReference) {\n \t\tif (participantReference != null) {\n \t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af45acacfc21fddc1a4c9e444241882619df7276"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQwODY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMjo1MlrOF3AWhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxMjo1MlrOF3AWhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMTc2NA==", "bodyText": "Again we should have !containsAlias check", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r393221764", "createdAt": "2020-03-16T18:12:52Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -569,33 +574,34 @@ protected void handleNames(Criteria criteria, StringOrListParam name, StringOrLi\n \t\t}\n \t}\n \t\n-\tprotected void handlePatientReference(Criteria criteria, ReferenceParam patientReference) {\n+\tprotected void handlePatientReference(Criteria criteria, ReferenceAndListParam patientReference) {\n \t\thandlePatientReference(criteria, patientReference, \"patient\");\n \t}\n \t\n-\tprotected void handlePatientReference(Criteria criteria, ReferenceParam patientReference, String associationPath) {\n+\tprotected void handlePatientReference(Criteria criteria, ReferenceAndListParam patientReference,\n+\t        String associationPath) {\n \t\tif (patientReference != null) {\n \t\t\tcriteria.createAlias(associationPath, \"p\");\n \t\t\t\n-\t\t\tif (patientReference.getChain() != null) {\n-\t\t\t\tswitch (patientReference.getChain()) {\n+\t\t\thandleAndListParam(patientReference, patientToken -> {\n+\t\t\t\tswitch (patientToken.getChain()) {\n \t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", patientReference.getValue()));\n+\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", patientToken.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af45acacfc21fddc1a4c9e444241882619df7276"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzAyOTgxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNjozOTowM1rOF5bM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MjoyMFrOF5fUqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1ODgyMw==", "bodyText": "So for these tests, rather than repurposing them for OR queries, we should leave the initial test as is, then test for OR and then add a separate test for AND (which looks like /Observation?subject.identifier=M4001-1&subject.identifier=IU230).\nAlso, it will be more readable if you save the ValueAsQueryTokens intermediate steps. Also note that unlike the results we sometimes use which are Collections the result of getValuesAsQueryTokens() are lists that can be indexed numerically.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r395758823", "createdAt": "2020-03-20T16:39:03Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProviderWebTest.java", "diffHunk": "@@ -138,18 +140,29 @@ public void shouldGetObservationsByPatientUuid() throws Exception {\n \t\t\n \t\tverify(observationService).searchForObservations(isNull(), patientCaptor.capture(), isNull(), isNull());\n \t\tassertThat(patientCaptor.getValue(), notNullValue());\n-\t\tassertThat(patientCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n-\t\tassertThat(patientCaptor.getValue().getResourceType(), equalTo(\"Patient\"));\n+\t\tassertThat(patientCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getIdPart(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(patientCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getResourceType(),\n+\t\t    equalTo(\"Patient\"));\n \t}\n \t\n \t@Test\n \tpublic void shouldGetObservationsByPatientIdentifier() throws Exception {\n-\t\tverifyUri(\"/Observation?subject.identifier=M4001-1\");\n+\t\tverifyUri(\"/Observation?subject.identifier=M4001-1,ABS098,YT56RE,IU23O\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c32eaa4cca6a796183c6096370175534a9cecac8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgxMTAwNg==", "bodyText": "(which looks like /Observation?subject.identifier=M4001-1&subject.identifier=IU230).\n\n@ibacher Can you explain what is this expected to give. I am asking this because when I was testing for /Observation?subject.identifier=M4001-1,IU230 I get size 2 of the list and when testing for /Observation?subject.identifier=M4001-1&subject.identifier=IU230 I get size equal to 1", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r395811006", "createdAt": "2020-03-20T18:11:52Z", "author": {"login": "VaishSiddharth"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProviderWebTest.java", "diffHunk": "@@ -138,18 +140,29 @@ public void shouldGetObservationsByPatientUuid() throws Exception {\n \t\t\n \t\tverify(observationService).searchForObservations(isNull(), patientCaptor.capture(), isNull(), isNull());\n \t\tassertThat(patientCaptor.getValue(), notNullValue());\n-\t\tassertThat(patientCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n-\t\tassertThat(patientCaptor.getValue().getResourceType(), equalTo(\"Patient\"));\n+\t\tassertThat(patientCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getIdPart(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(patientCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getResourceType(),\n+\t\t    equalTo(\"Patient\"));\n \t}\n \t\n \t@Test\n \tpublic void shouldGetObservationsByPatientIdentifier() throws Exception {\n-\t\tverifyUri(\"/Observation?subject.identifier=M4001-1\");\n+\t\tverifyUri(\"/Observation?subject.identifier=M4001-1,ABS098,YT56RE,IU23O\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1ODgyMw=="}, "originalCommit": {"oid": "c32eaa4cca6a796183c6096370175534a9cecac8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNjM0NA==", "bodyText": "So it depends on where you're looking. Remember that the hierarchy for these types goes:\nEach AndParam contains 1 or more OrParams which contains 1 or more Params.\nThis means that if you search for /Observation?subject.identifier=M4001-1&subject.identifier=IU23, then the length of patientCaptor.getValue().getValueAsQueryTokens() should be 2, but the length of patientCaptor.getValue().getValueAsQueryTokens().get(0).getValueAsQueryTokens should be 1.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r395826344", "createdAt": "2020-03-20T18:42:20Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProviderWebTest.java", "diffHunk": "@@ -138,18 +140,29 @@ public void shouldGetObservationsByPatientUuid() throws Exception {\n \t\t\n \t\tverify(observationService).searchForObservations(isNull(), patientCaptor.capture(), isNull(), isNull());\n \t\tassertThat(patientCaptor.getValue(), notNullValue());\n-\t\tassertThat(patientCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n-\t\tassertThat(patientCaptor.getValue().getResourceType(), equalTo(\"Patient\"));\n+\t\tassertThat(patientCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getIdPart(),\n+\t\t    equalTo(PATIENT_UUID));\n+\t\tassertThat(patientCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n+\t\t        .getValuesAsQueryTokens().iterator().next().getResourceType(),\n+\t\t    equalTo(\"Patient\"));\n \t}\n \t\n \t@Test\n \tpublic void shouldGetObservationsByPatientIdentifier() throws Exception {\n-\t\tverifyUri(\"/Observation?subject.identifier=M4001-1\");\n+\t\tverifyUri(\"/Observation?subject.identifier=M4001-1,ABS098,YT56RE,IU23O\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTc1ODgyMw=="}, "originalCommit": {"oid": "c32eaa4cca6a796183c6096370175534a9cecac8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzg3MjkyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToyOToyNFrOF5juWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMToyOToyNFrOF5juWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg5ODQ1OQ==", "bodyText": "I know this isn't syntactically required but OpenMRS prefer curly braces around all if statements see our coding style guide. The reason for that is that while things might work well now, it's easier for maintenance if the if blocks are consistent.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/115#discussion_r395898459", "createdAt": "2020-03-20T21:29:24Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -598,18 +598,22 @@ protected void handlePatientReference(Criteria criteria, ReferenceAndListParam p\n \t\t\thandleAndListParam(patientReference, patientToken -> {\n \t\t\t\tswitch (patientToken.getChain()) {\n \t\t\t\t\tcase Patient.SP_IDENTIFIER:\n-\t\t\t\t\t\tcriteria.createAlias(\"p.identifiers\", \"pi\").add(ilike(\"pi.identifier\", patientToken.getValue()));\n+\t\t\t\t\t\tif (!containsAlias(criteria, \"pi\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ed3d0bf8a6836fa9b2c505be96e28f861ec1939"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1132, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}