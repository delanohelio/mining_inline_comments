{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTY1MTUx", "number": 41, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDowNzoxN1rODbO1yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozOToxNVrODlHkPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODgxMjkxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/TaskFhirResourceProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDowNzoxN1rOFimLSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDowNzoxN1rOFimLSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMTM4NA==", "bodyText": "We should have one testing naming convention per file. I'd probably prefer changing this one to updateTask_shouldUpdateTask()", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r371821384", "createdAt": "2020-01-28T14:07:17Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/TaskFhirResourceProviderTest.java", "diffHunk": "@@ -82,4 +83,22 @@ public void getTaskByWithWrongId_shouldThrowResourceNotFoundException() {\n \t\tassertThat(resourceProvider.getTaskById(idType), nullValue());\n \t}\n \n+\t@Test\n+\tpublic void createTask_shouldCreateNewTask() {\n+\t\twhen(taskService.saveTask(task)).thenReturn(task);\n+\n+\t\tMethodOutcome result = resourceProvider.createTask(task);\n+\t\tassertThat(result.getResource(), equalTo(task));\n+\t}\n+\n+\t@Test\n+\tpublic void shouldUpdateTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7aa4bf1b370f322303c5a604b5203b962ee9c8f"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTk0Njk2OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1Mjo0OVrOFo_5JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1Mjo0OVrOFo_5JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNDE4MA==", "bodyText": "I'd save this as a file in the (non-existent) test/resources/org/openmrs/module/fhir2/providers. It can then be loaded by doing something like:\ntry (InputStream is = this.getClass().getClassLoader.getResourceAsStream(\"org/openmrs/module/fhir2/providers/TestDiagnosticReport_LAB.json\") {\n\tjsonDiagnosticReport = IOUtils.toString(is);\n}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r378534180", "createdAt": "2020-02-12T21:52:49Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -32,6 +32,34 @@\n \t\n \tprivate static final String WRONG_UUID = \"9bf0d1ac-62a8-4440-a5a1-eb1015a7cc65\";\n \t\n+\t// TODO: Load from file or clean up some other way - maybe Resource --> JSON representation\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT = \"{\\n\" + \"    \\\"resourceType\\\": \\\"Bundle\\\",\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a48c58d1043858a3326385262f36c3fd8672777"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTk2MDA5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1NzoyMFrOFpABYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1NzoyMFrOFpABYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjI5MQ==", "bodyText": "This probably also should have:\nrequest.setHeader(CONTENT_TYPE, FhirMediaTypes.JSON.toString());", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r378536291", "createdAt": "2020-02-12T21:57:20Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java", "diffHunk": "@@ -141,6 +141,11 @@ public FhirRequestBuilder accept(@NotNull MediaType mediaType) {\n \t\t\treturn this;\n \t\t}\n \t\t\n+\t\tpublic FhirRequestBuilder jsonContent(@NotNull String json) {\n+\t\t\trequest.setContent(json.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a48c58d1043858a3326385262f36c3fd8672777"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTk2Nzc3OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjowMDowN1rOFpAGcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjowMDowN1rOFpAGcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNzU4Nw==", "bodyText": "You almost certainly need something here like:\nwhen(service.updateDiagnosticReport(any(), any())).thenReturn(diagnosticReport);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r378537587", "createdAt": "2020-02-12T22:00:07Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -84,7 +113,8 @@ public void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a48c58d1043858a3326385262f36c3fd8672777"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDEzNjkyOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMToyODozM1rOFqwCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoxOToyNFrOFrp2Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MTQ4Nw==", "bodyText": "I can't figure out why this test (and the corresponding Task Web test) return status code 0 instead of 405. The MethodNotAllowedException seems to not be getting handled correctly, and I couldn't untangle it after looking into it a bit.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r380371487", "createdAt": "2020-02-17T21:28:33Z", "author": {"login": "pmanko"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -71,43 +85,83 @@ public void getDiagnosticReportByWrongUuid_shouldReturn404() throws Exception {\n \t\n \t@Test\n \tpublic void createDiagnosticReport_shouldCreateNewDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.saveDiagnosticReport(any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isCreated());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_NoId_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\").accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200.\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateDiagnosticReport_shouldErrorForNonexistentDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_WRONG_UUID_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n+\t\twhen(service.updateDiagnosticReport(eq(WRONG_UUID), any(DiagnosticReport.class)))\n+\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\t// Not sure why this is returning HTTP status code 0\n+\t\tassertThat(response, isMethodNotAllowed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd92fad901f93e03e56ec7f24cc489c98c5007f5"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMwMjQxMg==", "bodyText": "I'd need to dig into this a bit. 0 is not an HTTP status code...", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381302412", "createdAt": "2020-02-19T13:52:52Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -71,43 +85,83 @@ public void getDiagnosticReportByWrongUuid_shouldReturn404() throws Exception {\n \t\n \t@Test\n \tpublic void createDiagnosticReport_shouldCreateNewDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.saveDiagnosticReport(any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isCreated());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_NoId_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\").accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200.\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateDiagnosticReport_shouldErrorForNonexistentDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_WRONG_UUID_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n+\t\twhen(service.updateDiagnosticReport(eq(WRONG_UUID), any(DiagnosticReport.class)))\n+\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\t// Not sure why this is returning HTTP status code 0\n+\t\tassertThat(response, isMethodNotAllowed());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MTQ4Nw=="}, "originalCommit": {"oid": "dd92fad901f93e03e56ec7f24cc489c98c5007f5"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxODcyMg==", "bodyText": "Ok. The problem here is a bit subtle, but because MethodNotAllowedException has no default constructor (i.e., a constructor that takes no arguments), there's a deeper error happening causes the wrong exception to be thrown causing the weird return code. To fix this, simple change the .thenThrow() part to something like .thenThrow(new MethodNotAllowedException(\"DiagnosticReport \" + WRONG_UUID + \" does not exist\")) and the test will work as expected.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381318722", "createdAt": "2020-02-19T14:19:24Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -71,43 +85,83 @@ public void getDiagnosticReportByWrongUuid_shouldReturn404() throws Exception {\n \t\n \t@Test\n \tpublic void createDiagnosticReport_shouldCreateNewDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.saveDiagnosticReport(any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isCreated());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_NoId_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\").accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200.\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateDiagnosticReport_shouldErrorForNonexistentDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_WRONG_UUID_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n+\t\twhen(service.updateDiagnosticReport(eq(WRONG_UUID), any(DiagnosticReport.class)))\n+\t\t        .thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\t// Not sure why this is returning HTTP status code 0\n+\t\tassertThat(response, isMethodNotAllowed());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MTQ4Nw=="}, "originalCommit": {"oid": "dd92fad901f93e03e56ec7f24cc489c98c5007f5"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDE0NDgxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMTozMzo0MFrOFqwGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMzo0NDo1MlrOFrokXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MjY3OA==", "bodyText": "Not sure if this test is necessary, and if the error handling for updates in the DiagnosticReport and Task ServiceImpl are necessary either. The error handling gets handled by the HAPI libraries, and when(service.updateDiatnosticReport()) is not needed for this and ShouldErrorForIdMismatch() tests. In other words, the error handling implementation for these to cases doesn't seem to have an effect on the handling of the actual request.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r380372678", "createdAt": "2020-02-17T21:33:40Z", "author": {"login": "pmanko"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -71,43 +85,83 @@ public void getDiagnosticReportByWrongUuid_shouldReturn404() throws Exception {\n \t\n \t@Test\n \tpublic void createDiagnosticReport_shouldCreateNewDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.saveDiagnosticReport(any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isCreated());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd92fad901f93e03e56ec7f24cc489c98c5007f5"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI5Nzc1Nw==", "bodyText": "Yeah, I mostly worry about using these tests to ensure that we've done our part of the mappings properly, i.e., when someone sends the expected message our code handles the response appropriately. Since this is purely a test of the HAPI library, I don't think we need it, provided it works with an appropriately formulated request.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381297757", "createdAt": "2020-02-19T13:44:52Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -71,43 +85,83 @@ public void getDiagnosticReportByWrongUuid_shouldReturn404() throws Exception {\n \t\n \t@Test\n \tpublic void createDiagnosticReport_shouldCreateNewDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.saveDiagnosticReport(any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/DiagnosticReport\").jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isCreated());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldUpdateExistingDiagnosticReport() throws Exception {\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n+\t\t\n \t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n \t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\twhen(service.updateDiagnosticReport(anyString(), any(DiagnosticReport.class))).thenReturn(diagnosticReport);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + DIAGNOSTIC_REPORT_UUID)\n+\t\t        .jsonContent(jsonDiagnosticReport).accept(FhirMediaTypes.JSON).go();\n \t\t\n \t\tassertThat(response, isOk());\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForIdMismatch() throws Exception {\n-\t\tDiagnosticReport diagnosticReport = new DiagnosticReport();\n-\t\tdiagnosticReport.setId(DIAGNOSTIC_REPORT_UUID);\n+\t\tString jsonDiagnosticReport;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_DIAGNOSTIC_REPORT_PATH)) {\n+\t\t\tjsonDiagnosticReport = IOUtils.toString(is);\n+\t\t}\n \t\t\n-\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tMockHttpServletResponse response = put(\"/DiagnosticReport/\" + WRONG_UUID).jsonContent(jsonDiagnosticReport)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n \t\t\n-\t\t// TODO: Fix so status is 400, not 200. See\n-\t\tassertThat(response, isOk());\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n \t}\n \t\n \t@Test\n \tpublic void updateDiagnosticReport_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM3MjY3OA=="}, "originalCommit": {"oid": "dd92fad901f93e03e56ec7f24cc489c98c5007f5"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDE4NTM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirDiagnosticReportServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoxMjozMlrOFrpltg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoxMjozMlrOFrpltg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxNDQ4Ng==", "bodyText": "This should be !diagnosticReport.getId().equals(uuid). Strings are objects and for objects == asserts that they refer to the same object. This works when the strings are all generated inside the VM because of Java's string interning but is likely to fail in a real-world situation.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r381314486", "createdAt": "2020-02-19T14:12:32Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirDiagnosticReportServiceImpl.java", "diffHunk": "@@ -44,12 +46,24 @@ public DiagnosticReport saveDiagnosticReport(DiagnosticReport diagnosticReport)\n \t\n \t@Override\n \tpublic DiagnosticReport updateDiagnosticReport(String uuid, DiagnosticReport diagnosticReport) {\n+\t\tif (diagnosticReport.getId() == null) {\n+\t\t\tthrow new InvalidRequestException(\"Diagnostic Report resource is missing id.\");\n+\t\t}\n+\t\t\n+\t\tif (diagnosticReport.getId() != uuid) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd92fad901f93e03e56ec7f24cc489c98c5007f5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAzNDk5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo0MzoxNFrOFva4uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMjozMzoyN1rOFvjmbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Nzg5Ng==", "bodyText": "Can we change these names to something that actually reflects what they are testing? Also, are you planning to add more tests to this class in a new PR?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r385267896", "createdAt": "2020-02-27T17:43:14Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.when;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.ServiceRequest;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.api.FhirServiceRequestService;\n+import org.openmrs.module.fhir2.web.servlet.BaseFhirResourceProviderTest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirResourceProviderTest<ServiceRequestFhirResourceProvider, ServiceRequest> {\n+\t\n+\tprivate static final String SERVICE_REQUEST_UUID = \"7d13b03b-58c2-43f5-b34d-08750c51aea9\";\n+\t\n+\tprivate static final String WRONG_SERVICE_REQUEST_UUID = \"92b04062-e57d-43aa-8c38-90a1ad70080c\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate ServiceRequestFhirResourceProvider resourceProvider;\n+\t\n+\t@Mock\n+\tprivate FhirServiceRequestService service;\n+\t\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tresourceProvider = new ServiceRequestFhirResourceProvider();\n+\t\tresourceProvider.setServiceRequestService(service);\n+\t\tsuper.setup();\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPractitionerById_shouldReturnPractitioner() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c319cfe510f1ace172be668cd8f408f401765ac"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTQxMDY3MQ==", "bodyText": "Yes, I wanted to close this one out and extend/add tests for the new features from FM2-75 in a smaller PR.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r385410671", "createdAt": "2020-02-27T22:33:27Z", "author": {"login": "pmanko"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.when;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.ServiceRequest;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.api.FhirServiceRequestService;\n+import org.openmrs.module.fhir2.web.servlet.BaseFhirResourceProviderTest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ServiceRequestFhirResourceProviderWebTest extends BaseFhirResourceProviderTest<ServiceRequestFhirResourceProvider, ServiceRequest> {\n+\t\n+\tprivate static final String SERVICE_REQUEST_UUID = \"7d13b03b-58c2-43f5-b34d-08750c51aea9\";\n+\t\n+\tprivate static final String WRONG_SERVICE_REQUEST_UUID = \"92b04062-e57d-43aa-8c38-90a1ad70080c\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate ServiceRequestFhirResourceProvider resourceProvider;\n+\t\n+\t@Mock\n+\tprivate FhirServiceRequestService service;\n+\t\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tresourceProvider = new ServiceRequestFhirResourceProvider();\n+\t\tresourceProvider.setServiceRequestService(service);\n+\t\tsuper.setup();\n+\t}\n+\t\n+\t@Test\n+\tpublic void getPractitionerById_shouldReturnPractitioner() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2Nzg5Ng=="}, "originalCommit": {"oid": "6c319cfe510f1ace172be668cd8f408f401765ac"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NjAzODk1OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo0NDoyOFrOFva7Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo0NDoyOFrOFva7Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2ODUzOQ==", "bodyText": "JSON_DIAGNOSTIC_REPORT_NoId_PATH -> JSON_DIAGNOSTIC_REPORT_NO_ID_PATH or something similar", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r385268539", "createdAt": "2020-02-27T17:44:28Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/DiagnosticReportFhirResourceProviderWebTest.java", "diffHunk": "@@ -32,6 +40,12 @@\n \t\n \tprivate static final String WRONG_UUID = \"9bf0d1ac-62a8-4440-a5a1-eb1015a7cc65\";\n \t\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate.json\";\n+\t\n+\tprivate static final String JSON_DIAGNOSTIC_REPORT_NoId_PATH = \"org/openmrs/module/fhir2/providers/TestDiagnosticReport_CreateUpdate_NoId.json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c319cfe510f1ace172be668cd8f408f401765ac"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ3ODY5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozOToxNVrOFx02jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozOToxNVrOFx02jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5MDQ3OA==", "bodyText": "@ibacher I'm not sure why this test is failing.\nAlso, your param to prop changes are in this PR?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/41#discussion_r387790478", "createdAt": "2020-03-04T16:39:15Z", "author": {"login": "pmanko"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest.java", "diffHunk": "@@ -246,6 +246,7 @@ public void shouldReturnCollectionOfPeopleSortedByName() {\n \t\t\n \t\t// Smallest given name of person i should be less than the largest given name of person i + 1.\n \t\tfor (int i = 1; i < people.size(); i++) {\n+\t\t\tassertThat(people.get(i-1).getNames(), not(empty())); // Not sure why this test is failing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9fafde2219c52109769c2ccb710c0f975d94251"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1214, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}