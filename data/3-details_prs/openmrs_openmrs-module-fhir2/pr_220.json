{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzE2MjAw", "number": 220, "title": "FM2-217: Add create, update, and delete methods for Location", "bodyText": "LINK:https://issues.openmrs.org/browse/FM2-217", "createdAt": "2020-06-18T19:23:42Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220", "merged": true, "mergeCommit": {"oid": "c0c3100653ef17bc9cf2e424425520abb0179e2d"}, "closed": true, "closedAt": "2020-07-20T19:36:29Z", "author": {"login": "gitcliff"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcskXTRgBqjM0NTk5MTE2Mzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc22kSTAFqTQ1MTg4NTgwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4adbe5ce089c9379ffb1018b1f9d29e3d0039529", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4adbe5ce089c9379ffb1018b1f9d29e3d0039529", "committedDate": "2020-06-18T19:20:23Z", "message": "FM2-217:Add create, update, and delete methods for Location"}, "afterCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/168b52aa24c45c01e20568aa78f913fa4c34a309", "committedDate": "2020-06-18T20:19:46Z", "message": "FM2-217:Add create, update, and delete methods for Location"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzODMzNTEw", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-433833510", "createdAt": "2020-06-19T06:32:21Z", "commit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNjozMjoyMVrOGmJl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNjozMjoyMVrOGmJl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY1NjIyMw==", "bodyText": "@gitcliff  thanks for working on this, did you try importing org.hl7.fhir.r4 package and see the reaction?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r442656223", "createdAt": "2020-06-19T06:32:21Z", "author": {"login": "sherrif10"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3ODMwMDU3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-437830057", "createdAt": "2020-06-25T20:21:58Z", "commit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyMTo1OFrOGpKcgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyMTo1OFrOGpKcgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTkzOA==", "bodyText": "Could you update this to use the FhirProviderUtils.buildDelete() method for this?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r445815938", "createdAt": "2020-06-25T20:21:58Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/168b52aa24c45c01e20568aa78f913fa4c34a309", "committedDate": "2020-06-18T20:19:46Z", "message": "FM2-217:Add create, update, and delete methods for Location"}, "afterCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6d62e161abbea83ce89b27064f1c0836d2b3b15d", "committedDate": "2020-06-26T14:05:21Z", "message": "FM2-217:Add create, update, and delete methods for Location"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDc4NDQ2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-439078446", "createdAt": "2020-06-29T12:12:24Z", "commit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMjoyNFrOGqN-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDozNlrOGqODRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMjI4MQ==", "bodyText": "use util method", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446922281", "createdAt": "2020-06-29T12:12:24Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,39 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic org.hl7.fhir.r4.model.OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn FhirProviderUtils.buildDelete(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMjg2NA==", "bodyText": "ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446922864", "createdAt": "2020-06-29T12:13:22Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProvider.java", "diffHunk": "@@ -60,6 +68,36 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn location;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(fhirLocationService.create(location));\n+\t}\n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tlocation.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(fhirLocationService.update(id.getIdPart(), location));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = fhirLocationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzIxOQ==", "bodyText": "look at the name of other methods make it align with them", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446923219", "createdAt": "2020-06-29T12:13:56Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -402,4 +407,64 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateLocation() {\n+\t\tLocation newLocation = location;\n+\t\t\n+\t\twhen(locationService.update(LOCATION_UUID, location)).thenReturn(newLocation);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateLocation(new IdType().setValue(LOCATION_UUID), location);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newLocation));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updateLocation_shouldThrowInvalidRequestExceptionForWrongLocationUuid() {\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, location)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), location);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzQ1OA==", "bodyText": "why can't we use the same location we have", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446923458", "createdAt": "2020-06-29T12:14:22Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -402,4 +407,64 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateLocation() {\n+\t\tLocation newLocation = location;\n+\t\t\n+\t\twhen(locationService.update(LOCATION_UUID, location)).thenReturn(newLocation);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateLocation(new IdType().setValue(LOCATION_UUID), location);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newLocation));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updateLocation_shouldThrowInvalidRequestExceptionForWrongLocationUuid() {\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, location)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), location);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tLocation wrongLocation = new Location();\n+\t\t\n+\t\twrongLocation.setId(WRONG_LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, wrongLocation)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), wrongLocation);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() {\n+\t\tLocation newLocation = new Location();\n+\t\t\n+\t\twhen(locationService.delete(LOCATION_UUID)).thenReturn(newLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzU5MQ==", "bodyText": "change according to delete operation changes.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446923591", "createdAt": "2020-06-29T12:14:36Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -402,4 +407,64 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateLocation() {\n+\t\tLocation newLocation = location;\n+\t\t\n+\t\twhen(locationService.update(LOCATION_UUID, location)).thenReturn(newLocation);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateLocation(new IdType().setValue(LOCATION_UUID), location);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newLocation));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updateLocation_shouldThrowInvalidRequestExceptionForWrongLocationUuid() {\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, location)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), location);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tLocation wrongLocation = new Location();\n+\t\t\n+\t\twrongLocation.setId(WRONG_LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, wrongLocation)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), wrongLocation);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() {\n+\t\tLocation newLocation = new Location();\n+\t\t\n+\t\twhen(locationService.delete(LOCATION_UUID)).thenReturn(newLocation);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider\n+\t\t        .deleteLocation(new IdType().setValue(LOCATION_UUID));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getId(), equalTo(LOCATION_UUID));\n+\t}\n+\t\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deleteLocation_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_LOCATION_UUID);\n+\t\torg.hl7.fhir.r4.model.OperationOutcome location = resourceProvider.deleteLocation(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 76}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6d62e161abbea83ce89b27064f1c0836d2b3b15d", "committedDate": "2020-06-26T14:05:21Z", "message": "FM2-217:Add create, update, and delete methods for Location"}, "afterCommit": {"oid": "e5b486f18076557dad458e6e29fca236be23ffa5", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e5b486f18076557dad458e6e29fca236be23ffa5", "committedDate": "2020-06-30T20:17:02Z", "message": "FM2-217:Add create, update, and delete methods for Location"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e5b486f18076557dad458e6e29fca236be23ffa5", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e5b486f18076557dad458e6e29fca236be23ffa5", "committedDate": "2020-06-30T20:17:02Z", "message": "FM2-217:Add create, update, and delete methods for Location"}, "afterCommit": {"oid": "e80b47da66826bd430646c2ab6e3eb117b9cc8a4", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e80b47da66826bd430646c2ab6e3eb117b9cc8a4", "committedDate": "2020-07-01T06:23:40Z", "message": "FM2-217:Add create, update, and delete methods for Location"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e80b47da66826bd430646c2ab6e3eb117b9cc8a4", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e80b47da66826bd430646c2ab6e3eb117b9cc8a4", "committedDate": "2020-07-01T06:23:40Z", "message": "FM2-217:Add create, update, and delete methods for Location"}, "afterCommit": {"oid": "0af62620ecfebdbc299965e3c616ee02221d1c0e", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0af62620ecfebdbc299965e3c616ee02221d1c0e", "committedDate": "2020-07-01T08:04:42Z", "message": "FM2-217:Add create, update, and delete methods for Location"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0af62620ecfebdbc299965e3c616ee02221d1c0e", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0af62620ecfebdbc299965e3c616ee02221d1c0e", "committedDate": "2020-07-01T08:04:42Z", "message": "FM2-217:Add create, update, and delete methods for Location"}, "afterCommit": {"oid": "7af6b537e48f5cc8155d2ba86fc9ee33f4603da4", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7af6b537e48f5cc8155d2ba86fc9ee33f4603da4", "committedDate": "2020-07-01T17:17:03Z", "message": "FM2-217:Add create, update, and delete methods for Location"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjM4NDI5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-447238429", "createdAt": "2020-07-13T13:15:04Z", "commit": {"oid": "4c8c87e624c9f5b5eff47c22afd1095ea17d9238"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNTowNFrOGwn_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNTowNFrOGwn_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MDA5OQ==", "bodyText": "Please remove extra spaces. Find this useful throughout the PR.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r453640099", "createdAt": "2020-07-13T13:15:04Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/LocationWebTest_create.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Location\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\",\n+  \"postalCode\": \"9105 PZ\",\n+  \"state\": \"MI\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8c87e624c9f5b5eff47c22afd1095ea17d9238"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjM5NTky", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-447239592", "createdAt": "2020-07-13T13:16:36Z", "commit": {"oid": "4c8c87e624c9f5b5eff47c22afd1095ea17d9238"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNjozN1rOGwoDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNjozN1rOGwoDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTAxMg==", "bodyText": "Please rewrite this as FhirProviderUtils.buildDelete(Location30_40.convertLocation(location))", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r453641012", "createdAt": "2020-07-13T13:16:37Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -63,6 +72,35 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t\t    locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(location));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8c87e624c9f5b5eff47c22afd1095ea17d9238"}, "originalPosition": 68}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c8c87e624c9f5b5eff47c22afd1095ea17d9238", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4c8c87e624c9f5b5eff47c22afd1095ea17d9238", "committedDate": "2020-07-13T13:10:57Z", "message": "Merge branch 'master' into FM2-217"}, "afterCommit": {"oid": "410835bcb3dbd6ffc3481ec5e6901d17a2577a5c", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/410835bcb3dbd6ffc3481ec5e6901d17a2577a5c", "committedDate": "2020-07-13T19:45:00Z", "message": "FM2-217:Removing the white spaces"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4OTY4OTg4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-448968988", "createdAt": "2020-07-15T13:46:16Z", "commit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0NjoxNlrOGx-43g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDo1OFrOGx_HIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2Mzc3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = fhirLocationService.delete(id.getIdPart());\n          \n          \n            \n            \t\tLocation location = fhirLocationService.delete(id.getIdPart());", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455063774", "createdAt": "2020-07-15T13:46:16Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProvider.java", "diffHunk": "@@ -61,6 +69,33 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn location;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(fhirLocationService.create(location));\n+\t}\n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tlocation.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(fhirLocationService.update(id.getIdPart(), location));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = fhirLocationService.delete(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NDAxMQ==", "bodyText": "Please remove this test", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455064011", "createdAt": "2020-07-15T13:46:35Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -449,4 +456,69 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateNewLocation() {\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.createLocation(Location30_40.convertLocation(location));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(location));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() {\n+\t\t\n+\t\twhen(locationService.delete(LOCATION_UUID)).thenReturn(location);\n+\t\t\n+\t\tOperationOutcome result = resourceProvider.deleteLocation(new IdType().setValue(LOCATION_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssue(), notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\t\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deleteLocation_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_LOCATION_UUID);\n+\t\tOperationOutcome location = resourceProvider.deleteLocation(id);\n+\t\tassertThat(location, nullValue());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NDkwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455064905", "createdAt": "2020-07-15T13:47:48Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTA1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForIdMisMatch() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065054", "createdAt": "2020-07-15T13:48:01Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTMyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \t\tLocation location = new Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065324", "createdAt": "2020-07-15T13:48:20Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTQzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n          \n          \n            \n            \t\twhen(locationService.create(any(Location.class))).thenReturn(location);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065437", "createdAt": "2020-07-15T13:48:27Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTU2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \t\tLocation location = new Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065564", "createdAt": "2020-07-15T13:48:38Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTY3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n          \n          \n            \n            \t\twhen(locationService.update(anyString(), any(Location.class))).thenReturn(location);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065678", "createdAt": "2020-07-15T13:48:46Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTgzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065831", "createdAt": "2020-07-15T13:48:57Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTkyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForIdMisMatch() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065923", "createdAt": "2020-07-15T13:49:06Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NjA4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \t\tLocation location = new Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455066083", "createdAt": "2020-07-15T13:49:18Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NjcxMw==", "bodyText": "Please remove these lines", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455066713", "createdAt": "2020-07-15T13:50:03Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NzEyNw==", "bodyText": "Please remove these lines", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455067127", "createdAt": "2020-07-15T13:50:34Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NzQyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n             \n          \n          \n            \n            }", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455067426", "createdAt": "2020-07-15T13:50:58Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/LocationWebTest_UpdateWithWrongId.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Location\",\n+  \"id\": \"a0938123-1691-11df-97a5-7038c432aabc\",\n+  \"city\": \"kampalaa\",\n+  \"country\": \"uganda\",\n+  \"postalCode\": \"9105 PZ\",\n+  \"state\": \"MI\"\n+}\n+\n+ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90d467395cd76e601515ae4f3916031e234c6943", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/90d467395cd76e601515ae4f3916031e234c6943", "committedDate": "2020-07-15T17:42:04Z", "message": "FM2-217:Add create, update, and delete methods for Location"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6de8e5e137b62ccae877773eee82abb943242d3", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f6de8e5e137b62ccae877773eee82abb943242d3", "committedDate": "2020-07-15T17:42:06Z", "message": "FM2-217:Removing the white spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "503a8e80ff293aa53b50f9809b6b391685c84404", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/503a8e80ff293aa53b50f9809b6b391685c84404", "committedDate": "2020-07-15T17:42:07Z", "message": "FM2-217:Fixing formattings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c1b085006c2384c9e905262b0e2800c44883ba3", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3c1b085006c2384c9e905262b0e2800c44883ba3", "committedDate": "2020-07-15T18:08:26Z", "message": "FM2-217:Fix formattings"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/af88d57a55dfef528cd775431669997c9b72acc0", "committedDate": "2020-07-13T20:04:46Z", "message": "FM2-217:Fixing formattings"}, "afterCommit": {"oid": "3c1b085006c2384c9e905262b0e2800c44883ba3", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3c1b085006c2384c9e905262b0e2800c44883ba3", "committedDate": "2020-07-15T18:08:26Z", "message": "FM2-217:Fix formattings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "673ee1cedf30a2ac423a060682e24bf884f208f3", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/673ee1cedf30a2ac423a060682e24bf884f208f3", "committedDate": "2020-07-15T18:28:13Z", "message": "FM2-217:Fix formattings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MjQyNDc0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-449242474", "createdAt": "2020-07-15T18:55:05Z", "commit": {"oid": "673ee1cedf30a2ac423a060682e24bf884f208f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1NjozNlrOGyLpew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1NzowOVrOGyLqpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3MjgyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tOperationOutcome retVal = new OperationOutcome();\n          \n          \n            \n            \t\tretVal.setId(LOCATION_UUID);\n          \n          \n            \n            \t\tretVal.getText().setDivAsString(\"Deleted successfully\");", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455272827", "createdAt": "2020-07-15T18:56:36Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673ee1cedf30a2ac423a060682e24bf884f208f3"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3MzEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tOperationOutcome retVal = new OperationOutcome();\n          \n          \n            \n            \t\tretVal.setId(LOCATION_UUID);\n          \n          \n            \n            \t\tretVal.getText().setDivAsString(\"Deleted successfully\");", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455273126", "createdAt": "2020-07-15T18:57:09Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,89 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tLocation location = new Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tLocation location = new Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673ee1cedf30a2ac423a060682e24bf884f208f3"}, "originalPosition": 138}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5da46ff51cce3c8288728798e15add828c88a4c2", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5da46ff51cce3c8288728798e15add828c88a4c2", "committedDate": "2020-07-20T19:10:29Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Varun Gupta <59061747+varung-31@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODg1MjEw", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-451885210", "createdAt": "2020-07-20T19:11:34Z", "commit": {"oid": "5da46ff51cce3c8288728798e15add828c88a4c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxMTozNFrOG0brFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxMTozNFrOG0brFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMjUzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n          \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r457632535", "createdAt": "2020-07-20T19:11:34Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,84 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da46ff51cce3c8288728798e15add828c88a4c2"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7db00b0f9b604e0512891562f4599fa789529703", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7db00b0f9b604e0512891562f4599fa789529703", "committedDate": "2020-07-20T19:11:39Z", "message": "Update omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxODg1ODA3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#pullrequestreview-451885807", "createdAt": "2020-07-20T19:12:30Z", "commit": {"oid": "7db00b0f9b604e0512891562f4599fa789529703"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4087, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}