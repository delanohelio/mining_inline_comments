{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MjQ4MTg1", "number": 81, "title": "FM2-82 : Allergy resource initial implementation", "bodyText": "Description of what I changed\n\nAllergy resource initial implementation\nMore description on the ticket .\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-82\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit.\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-02-21T11:58:59Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81", "merged": true, "mergeCommit": {"oid": "f4f3be15833f8e69d24f833175d0a2f358228488"}, "closed": true, "closedAt": "2020-02-21T17:09:15Z", "author": {"login": "jecihjoy"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGe603AFqTM2MjU5MjExMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGi3W-AFqTM2Mjc4MTA5OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNTkyMTEx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#pullrequestreview-362592111", "createdAt": "2020-02-21T12:20:41Z", "commit": {"oid": "0092fcec1dc7ec052fcf8813cfac5085db31704d"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjoyMDo0MVrOFs1KPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMjoyOTo0OFrOFs1XyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1MjYzNg==", "bodyText": "private SessionFactory sessionFactory", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382552636", "createdAt": "2020-02-21T12:20:41Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.dao.impl;\n+\n+import static org.hibernate.criterion.Restrictions.eq;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hibernate.SessionFactory;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+\t\n+\t@Inject\n+\t@Named(\"sessionFactory\")\n+\tSessionFactory sessionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0092fcec1dc7ec052fcf8813cfac5085db31704d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjU1NjEwNQ==", "bodyText": "Can you add documentation here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382556105", "createdAt": "2020-02-21T12:29:48Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/AllergyIntoleranceTranslator.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.Allergy;\n+\n+public interface AllergyIntoleranceTranslator extends ToFhirTranslator<Allergy, AllergyIntolerance>, UpdatableOpenmrsTranslator<Allergy, AllergyIntolerance> {\n+\t\n+\t@Override\n+\tAllergyIntolerance toFhirResource(Allergy data);\n+\t\n+\t@Override\n+\tAllergy toOpenmrsType(Allergy allergy, AllergyIntolerance resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0092fcec1dc7ec052fcf8813cfac5085db31704d"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0092fcec1dc7ec052fcf8813cfac5085db31704d", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0092fcec1dc7ec052fcf8813cfac5085db31704d", "committedDate": "2020-02-21T11:56:06Z", "message": "FM2-82 : Allergy resource initial implementation"}, "afterCommit": {"oid": "a8d8fe055a0dfffc55f4987e3d6819f3ff2984e9", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8d8fe055a0dfffc55f4987e3d6819f3ff2984e9", "committedDate": "2020-02-21T16:16:51Z", "message": "FM2-82 : Allergy resource initial implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8d8fe055a0dfffc55f4987e3d6819f3ff2984e9", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a8d8fe055a0dfffc55f4987e3d6819f3ff2984e9", "committedDate": "2020-02-21T16:16:51Z", "message": "FM2-82 : Allergy resource initial implementation"}, "afterCommit": {"oid": "1d922aa2590104882cbdc06901b77c82f8bd2ca9", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1d922aa2590104882cbdc06901b77c82f8bd2ca9", "committedDate": "2020-02-21T16:17:30Z", "message": "FM2-82 : Allergy resource initial implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d922aa2590104882cbdc06901b77c82f8bd2ca9", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1d922aa2590104882cbdc06901b77c82f8bd2ca9", "committedDate": "2020-02-21T16:17:30Z", "message": "FM2-82 : Allergy resource initial implementation"}, "afterCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/70d6e94b30ed90b9aa83400f675a1c52d344176c", "committedDate": "2020-02-21T16:19:36Z", "message": "FM2-82 : Allergy resource initial implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzQ5ODQw", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#pullrequestreview-362749840", "createdAt": "2020-02-21T16:22:10Z", "commit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjoyMjoxMVrOFs8pUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNjoyOToyNlrOFs85nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTI4Mw==", "bodyText": "Just need the one /", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382675283", "createdAt": "2020-02-21T16:22:11Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/FhirConstants.java", "diffHunk": "@@ -29,6 +31,9 @@\n \tpublic static final String CONDITION_VERIFICATION_STATUS_VALUE_SET_URI = HL7_FHIR_VALUE_SET_PREFIX\n \t        + \"/condition-ver-status\";\n \t\n+\tpublic static final String ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET = HL7_FHIR_CODE_SYSTEM_PREFIX\n+\t        + \"//allergyintolerance-clinical\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NTc0OA==", "bodyText": "Add a blank line before this line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382675748", "createdAt": "2020-02-21T16:22:59Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NjA0Nw==", "bodyText": "Add a blank line before this line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382676047", "createdAt": "2020-02-21T16:23:32Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NjY1Nw==", "bodyText": "Add a blank line before here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382676657", "createdAt": "2020-02-21T16:24:31Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {\n+\t\tif (status.getCoding().size() == 0) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (status.getCoding().get(0).getCode().equals(\"active\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3NjgyOQ==", "bodyText": "Add a blank line before here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382676829", "createdAt": "2020-02-21T16:24:49Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {\n+\t\tif (status.getCoding().size() == 0) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (status.getCoding().get(0).getCode().equals(\"active\")) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (status.getCoding().get(0).getCode().equals(\"inactive\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3ODg1Mw==", "bodyText": "This could be coded like this:\nreturn status.getCoding().stream().filter(c -> FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET.equals(c.getSystem())).anyMatch(c -> \"inactive\".equals(c.getCode()))", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382678853", "createdAt": "2020-02-21T16:28:20Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY3OTQ1Mg==", "bodyText": "I would rename this something more descriptive like isAllergyInactive() or isStatusInactive()", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#discussion_r382679452", "createdAt": "2020-02-21T16:29:26Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AllergyIntoleranceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.openmrs.Allergen;\n+import org.openmrs.AllergenType;\n+import org.openmrs.Allergy;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.AllergyIntoleranceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class AllergyIntoleranceTranslatorImpl implements AllergyIntoleranceTranslator {\n+\t\n+\t@Override\n+\tpublic AllergyIntolerance toFhirResource(Allergy omrsAllergy) {\n+\t\tif (omrsAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(omrsAllergy.getUuid());\n+\t\tif (omrsAllergy.getAllergen() != null) {\n+\t\t\tswitch (omrsAllergy.getAllergen().getAllergenType()) {\n+\t\t\t\tcase DRUG:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.MEDICATION);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.addCategory(AllergyIntolerance.AllergyIntoleranceCategory.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase OTHER:\n+\t\t\t\tdefault:\n+\t\t\t\t\treturn allergy.addCategory(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setClinicalStatus(setClinicalStatus(omrsAllergy.getVoided()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\t@Override\n+\tpublic Allergy toOpenmrsType(Allergy allergy, AllergyIntolerance fhirAllergy) {\n+\t\tif (fhirAllergy == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tallergy.setUuid(fhirAllergy.getId());\n+\t\tif (allergy.getAllergen() == null) {\n+\t\t\tAllergen allergen = new Allergen();\n+\t\t\tallergy.setAllergen(allergen);\n+\t\t}\n+\t\tif (fhirAllergy.getCategory().size() > 0) {\n+\t\t\tswitch (fhirAllergy.getCategory().get(0).getValue()) {\n+\t\t\t\tcase MEDICATION:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.DRUG);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FOOD:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.FOOD);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(AllergenType.ENVIRONMENT);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase BIOLOGIC:\n+\t\t\t\tcase NULL:\n+\t\t\t\tdefault:\n+\t\t\t\t\tallergy.getAllergen().setAllergenType(null);\n+\t\t\t}\n+\t\t}\n+\t\tallergy.setVoided(getAllergyStatus(fhirAllergy.getClinicalStatus()));\n+\t\treturn allergy;\n+\t}\n+\t\n+\tprivate CodeableConcept setClinicalStatus(boolean voided) {\n+\t\tCodeableConcept status = new CodeableConcept();\n+\t\tif (voided == true) {\n+\t\t\tstatus.setText(\"Inactive\");\n+\t\t\tstatus.addCoding(\n+\t\t\t    new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"inactive\", \"Inactive\"));\n+\t\t} else {\n+\t\t\tstatus.setText(\"Active\");\n+\t\t\tstatus.addCoding(new Coding(FhirConstants.ALLERGY_INTOLERANCE_CLINICAL_STATUS_VALUE_SET, \"active\", \"Active\"));\n+\t\t}\n+\t\treturn status;\n+\t}\n+\t\n+\tprivate boolean getAllergyStatus(CodeableConcept status) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "committedDate": "2020-02-21T17:00:09Z", "message": "FM2-82 : Allergy resource initial implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70d6e94b30ed90b9aa83400f675a1c52d344176c", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/70d6e94b30ed90b9aa83400f675a1c52d344176c", "committedDate": "2020-02-21T16:19:36Z", "message": "FM2-82 : Allergy resource initial implementation"}, "afterCommit": {"oid": "101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/101c7ed688ffdd343d87ee196dff6b331ba3d6fd", "committedDate": "2020-02-21T17:00:09Z", "message": "FM2-82 : Allergy resource initial implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzgxMDk4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/81#pullrequestreview-362781098", "createdAt": "2020-02-21T17:06:52Z", "commit": {"oid": "101c7ed688ffdd343d87ee196dff6b331ba3d6fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4199, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}