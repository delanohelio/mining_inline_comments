{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNjcxNzky", "number": 200, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozOTowNlrOEGeCMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMjozNlrOEKDItQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MjE4OTk1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozOTowNlrOGlSUeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozOTowNlrOGlSUeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc1MDY0OQ==", "bodyText": "@gitcliff  Instead of doing get(results) so many times and considering it repeatedly queries the database, it's better to store it in a variable once and then use it. You may refer to other search query test classes for reference like LocationSearchQueryImplTest. Please find this useful throughout the PR.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r441750649", "createdAt": "2020-06-17T18:39:06Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzc2MDUxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxMTowOFrOGpKHgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToxMzoyM1rOGqr-pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw==", "bodyText": "@gitcliff This should be something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfor (int i = 1; i < get(results).size(); i++) {\n          \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n          \n          \n            \n            \t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tList<AllergyIntolerance> fullResults = (List<AllergyIntolerance>) get(results);\n          \n          \n            \n            \t\tfor (int i = 1; i < fullResults.size(); i++) {\n          \n          \n            \n            \t\t\tassertThat(fullResults.get(i - 1).getReactionFirstRep().getSeverity(),\n          \n          \n            \n            \t\t\t\t    lessThanOrEqualTo(fullResults.get(i).getReactionFirstRep().getSeverity()));\t\n          \n          \n            \n            \t\t}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810563", "createdAt": "2020-06-25T20:11:08Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDkzOQ==", "bodyText": "Similar comments apply to the rest of the sorting test methods.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810939", "createdAt": "2020-06-25T20:11:57Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIxNzk1OA==", "bodyText": "@ibacher  the above change you suggested which involves casting drops Cannot cast from List<IBaseResource> to List<AllergyIntolerance> compilation error", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447217958", "createdAt": "2020-06-29T19:57:57Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyMDAzNQ==", "bodyText": "You can do it using the following approach-\nget(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447220035", "createdAt": "2020-06-29T20:01:52Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxMzkyNw==", "bodyText": "thanks @varung-31  let me try it out", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447413927", "createdAt": "2020-06-30T05:13:23Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tfor (int i = 1; i < get(results).size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) get(results).get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) get(results).get(i)).getReactionFirstRep().getSeverity()));\t\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDU2Mw=="}, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzc2MTI4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoxMToyNVrOGpKH_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNTo1MDozNVrOGqsq2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDY4NQ==", "bodyText": "This should be after the for loop.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r445810685", "createdAt": "2020-06-25T20:11:25Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQyNTI0Mw==", "bodyText": "@ibacher i have fixed it ,,,kindly review", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447425243", "createdAt": "2020-06-30T05:50:35Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -490,4 +494,86 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxMDY4NQ=="}, "originalCommit": {"oid": "1fb4d7a1b0821bb7d32a7e59d6d925f69d05980d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTAwMDE4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowMDoxNFrOGqwfyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowMDoxNFrOGqwfyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4Nzk0NA==", "bodyText": "Do you think we need to cast it again to AllergyIntolerance given that the list contains AllergyIntolerance objects?\nPlease use this for all other sorting tests added.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447487944", "createdAt": "2020-06-30T08:00:14Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tList<AllergyIntolerance> fullResults = get(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());\n+\t\tfor (int i = 1; i < fullResults.size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) fullResults.get(i - 1)).getReactionFirstRep().getSeverity(),\n+\t\t\t\t    lessThanOrEqualTo(((AllergyIntolerance) fullResults.get(i)).getReactionFirstRep().getSeverity()));\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8edf70581ba75d8079a38c07548caf17edb154b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTAwNzc4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowMTo0MVrOGqwj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwODowMTo0MVrOGqwj6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4OTAwMg==", "bodyText": "We don't need to add FhirConstants.GLOBAL_PROPERTY_SEVERE. Check the dao implementation.\nPlease use this for all other sorting tests added.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447489002", "createdAt": "2020-06-30T08:01:41Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, FhirConstants.GLOBAL_PROPERTY_SEVERE, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8edf70581ba75d8079a38c07548caf17edb154b"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4OTcyNTk3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMjozNlrOGq3h0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxMjozNlrOGq3h0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwMzE1NQ==", "bodyText": "@gitcliff\nYou forgot to remove the casting I guess.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/200#discussion_r447603155", "createdAt": "2020-06-30T11:12:36Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/AllergyIntoleranceSearchQueryImplTest.java", "diffHunk": "@@ -760,4 +764,91 @@ public void searchForAllergies_shouldHandleComplexQuery() {\n \t\t    equalTo(PATIENT_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfAllergiesSortedBySeveritySevere() {\n+\t\t\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(AllergyIntolerance.SP_SEVERITY);\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tIBundleProvider results = search(\n+\t\t new SearchParameterMap().addParameter(FhirConstants.SEVERITY_SEARCH_HANDLER, new TokenAndListParam().addAnd(new TokenParam(SEVERITY_SEVERE))).setSortSpec(sort));\n+\t\t\n+\t\tList<AllergyIntolerance> fullResults = get(results).stream().map(p -> (AllergyIntolerance)p).collect(Collectors.toList());\n+\t\tfor (int i = 1; i < fullResults.size(); i++) {\n+\t\t\t\n+\t\t\tassertThat(((AllergyIntolerance) fullResults.get(i - 1)).getReactionFirstRep().getSeverity(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20dd5feaeb65f362bdf59209135ba1cd5835a831"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 931, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}