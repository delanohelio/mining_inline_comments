{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODIwNTU3", "number": 215, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxMzoxMlrOEJJfUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0OToxMlrOEUKCGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDI4MTEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirUserDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxMzoxMlrOGpie5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxMzoxMlrOGpie5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwOTc2Ng==", "bodyText": "We can actually probably get rid of this method since, to be consistent, it should be called get().", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/215#discussion_r446209766", "createdAt": "2020-06-26T14:13:12Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirUserDao.java", "diffHunk": "@@ -13,7 +13,7 @@\n \n import org.openmrs.User;\n \n-public interface FhirUserDao {\n+public interface FhirUserDao extends FhirDao<User> {\n \t\n \tUser getUserByUuid(@NotNull String uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1d74ffb9bb54024d30665d200dec175b036585"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDI4MjUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirUserDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxMzo0M1rOGpif6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxMzo0M1rOGpif6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxMDAyNw==", "bodyText": "Ditto: just using get() in place of duplicating this method makes the most sense to me.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/215#discussion_r446210027", "createdAt": "2020-06-26T14:13:43Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirUserDaoImpl.java", "diffHunk": "@@ -11,31 +11,55 @@\n \n import static org.hibernate.criterion.Restrictions.eq;\n \n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.StringAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n-import org.hibernate.SessionFactory;\n+import org.hibernate.Criteria;\n import org.openmrs.User;\n+import org.openmrs.module.fhir2.FhirConstants;\n import org.openmrs.module.fhir2.api.dao.FhirUserDao;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirUserDaoImpl implements FhirUserDao {\n-\t\n-\t@Autowired\n-\t@Qualifier(\"sessionFactory\")\n-\tprivate SessionFactory sessionFactory;\n+public class FhirUserDaoImpl extends BaseFhirDao<User> implements FhirUserDao {\n \t\n \t@Override\n \tpublic User getUserByUuid(String uuid) {\n-\t\treturn (User) sessionFactory.getCurrentSession().createCriteria(User.class).add(eq(\"uuid\", uuid)).uniqueResult();\n+\t\treturn (User) getSessionFactory().getCurrentSession().createCriteria(User.class).add(eq(\"uuid\", uuid)).uniqueResult();\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1d74ffb9bb54024d30665d200dec175b036585"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDI4NDY4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirPractitionerServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxNDoyMlrOGpihSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxNDoyMlrOGpihSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxMDM3Nw==", "bodyText": "This seems like extraneous space", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/215#discussion_r446210377", "createdAt": "2020-06-26T14:14:22Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirPractitionerServiceImpl.java", "diffHunk": "@@ -42,11 +47,39 @@\n \t@Autowired\n \tprivate SearchQuery<Provider, Practitioner, FhirPractitionerDao, PractitionerTranslator<Provider>> searchQuery;\n \t\n+\t@Autowired\n+\tprivate FhirUserService userService;\n+\t\n+\t@Override\n+\tpublic Practitioner get(String uuid) {\n+\t\tPractitioner practitioner = translator.toFhirResource(getDao().get(uuid));\n+\t\tif (practitioner == null) {\n+\t\t\t\n+\t\t\tpractitioner = userService.get(uuid);\n+\t\t}\n+\t\treturn practitioner;\n+\t}\n+\t\n \t@Override\n \tpublic IBundleProvider searchForPractitioners(StringAndListParam name, TokenAndListParam identifier) {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.NAME_SEARCH_HANDLER, name)\n \t\t        .addParameter(FhirConstants.IDENTIFIER_SEARCH_HANDLER, identifier);\n \t\t\n-\t\treturn searchQuery.getQueryResults(theParams, dao, translator);\n+\t\tIBundleProvider providerBundle = searchQuery.getQueryResults(theParams, dao, translator);\n+\t\tIBundleProvider userBundle = userService.searchForUsers(name, identifier);\n+\t\t\n+\t\tif (providerBundle.isEmpty() && userBundle.isEmpty()) {\n+\t\t\tList<IBaseResource> theResource = providerBundle.getResources(0, providerBundle.size());\n+\t\t\ttheResource.addAll(userBundle.getResources(0, userBundle.size()));\n+\t\t\t\n+\t\t\treturn new SimpleBundleProvider(theResource);\n+\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1d74ffb9bb54024d30665d200dec175b036585"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDI4NTQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirPractitionerServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxNDozNVrOGpihvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNDoxNDozNVrOGpihvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIxMDQ5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\treturn providerBundle;\n          \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\treturn providerBundle;", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/215#discussion_r446210492", "createdAt": "2020-06-26T14:14:35Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirPractitionerServiceImpl.java", "diffHunk": "@@ -42,11 +47,39 @@\n \t@Autowired\n \tprivate SearchQuery<Provider, Practitioner, FhirPractitionerDao, PractitionerTranslator<Provider>> searchQuery;\n \t\n+\t@Autowired\n+\tprivate FhirUserService userService;\n+\t\n+\t@Override\n+\tpublic Practitioner get(String uuid) {\n+\t\tPractitioner practitioner = translator.toFhirResource(getDao().get(uuid));\n+\t\tif (practitioner == null) {\n+\t\t\t\n+\t\t\tpractitioner = userService.get(uuid);\n+\t\t}\n+\t\treturn practitioner;\n+\t}\n+\t\n \t@Override\n \tpublic IBundleProvider searchForPractitioners(StringAndListParam name, TokenAndListParam identifier) {\n \t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.NAME_SEARCH_HANDLER, name)\n \t\t        .addParameter(FhirConstants.IDENTIFIER_SEARCH_HANDLER, identifier);\n \t\t\n-\t\treturn searchQuery.getQueryResults(theParams, dao, translator);\n+\t\tIBundleProvider providerBundle = searchQuery.getQueryResults(theParams, dao, translator);\n+\t\tIBundleProvider userBundle = userService.searchForUsers(name, identifier);\n+\t\t\n+\t\tif (providerBundle.isEmpty() && userBundle.isEmpty()) {\n+\t\t\tList<IBaseResource> theResource = providerBundle.getResources(0, providerBundle.size());\n+\t\t\ttheResource.addAll(userBundle.getResources(0, userBundle.size()));\n+\t\t\t\n+\t\t\treturn new SimpleBundleProvider(theResource);\n+\t\t\t\n+\t\t} else if (providerBundle.isEmpty() && !userBundle.isEmpty()) {\n+\t\t\t\n+\t\t\treturn providerBundle;\n+\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf1d74ffb9bb54024d30665d200dec175b036585"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTcxMzU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirPractitionerServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0OToxMlrOG6SkOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODo0OToxMlrOG6SkOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc3NDc3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\n          \n          \n            \n            \t\t\tpractitioner = userService.get(uuid);\n          \n          \n            \n            \t\t\tpractitioner = userService.get(uuid);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/215#discussion_r463774779", "createdAt": "2020-07-31T18:49:12Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirPractitionerServiceImpl.java", "diffHunk": "@@ -43,6 +48,19 @@\n \t@Autowired\n \tprivate SearchQuery<Provider, Practitioner, FhirPractitionerDao, PractitionerTranslator<Provider>> searchQuery;\n \t\n+\t@Autowired\n+\tprivate FhirUserService userService;\n+\t\n+\t@Override\n+\tpublic Practitioner get(String uuid) {\n+\t\tPractitioner practitioner = translator.toFhirResource(getDao().get(uuid));\n+\t\tif (practitioner == null) {\n+\t\t\t\n+\t\t\tpractitioner = userService.get(uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c865417ce2bf5599e53b2ab1b3cb38951ef4e41e"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 957, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}