{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDY0NDA5", "number": 246, "title": "FM2-216 :- Add create, update, and delete methods for List.", "bodyText": "Description of what I changed\nAdd create, update, and delete methods for List.\nIssue I worked on\nhttps://issues.openmrs.org/projects/FM2/issues/FM2-216?filter=myopenissues\nChecklist: I completed these to help reviewers :)\n\n\n\n\n[ X] My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n[ X] I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n[ X] I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n[ X] All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n[X ] My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-07-03T13:40:07Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246", "merged": true, "mergeCommit": {"oid": "72beacc7d00a1b6999ba936e2ff02bd227006068"}, "closed": true, "closedAt": "2020-07-07T06:09:32Z", "author": {"login": "Akayeshmantha"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyLM9CAFqTQ0MjgwMDcyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyfh6wAFqTQ0MzU4NTMxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODAwNzIz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#pullrequestreview-442800723", "createdAt": "2020-07-06T06:23:24Z", "commit": {"oid": "c4720a43d522dd58ef459f10772bed2e665fa327"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjoyMzoyNFrOGtKMnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjoyMzoyNFrOGtKMnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwNjE3NQ==", "bodyText": "change this to;\nreturn FhirProviderUtils.buildDelete(List30_40.convertList(listResource))));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450006175", "createdAt": "2020-07-06T06:23:24Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProvider.java", "diffHunk": "@@ -50,4 +59,34 @@ public ListResource getListById(@IdParam @NotNull IdType id) {\n \t\t\n \t\treturn List30_40.convertList(listResource);\n \t}\n+\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatListResource(@ResourceParam ListResource listResource) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t\t\tlistService.create(List30_40.convertList(listResource)));\n+\t}\n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateListResource(@IdParam IdType id, @ResourceParam ListResource listResource) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlistResource.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(listService.update(id.getIdPart(),\n+\t\t\t\tList30_40.convertList(listResource)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteListResource(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = listService.delete(id.getIdPart());\n+\t\tif (listResource == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find list to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(listResource));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4720a43d522dd58ef459f10772bed2e665fa327"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4720a43d522dd58ef459f10772bed2e665fa327", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c4720a43d522dd58ef459f10772bed2e665fa327", "committedDate": "2020-07-03T13:38:59Z", "message": "FM2-216 :- Add create, update, and delete methods for List."}, "afterCommit": {"oid": "fbeb7c59acd52149eb84910ad80839838420b523", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/fbeb7c59acd52149eb84910ad80839838420b523", "committedDate": "2020-07-06T12:00:50Z", "message": "FM2-216 :- Add create, update, and delete methods for List."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDMyOTk1", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#pullrequestreview-443032995", "createdAt": "2020-07-06T12:33:00Z", "commit": {"oid": "fbeb7c59acd52149eb84910ad80839838420b523"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozMzowMVrOGtVVSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozMzoxOFrOGtVV0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODYxOQ==", "bodyText": "Don't you think you should be using delete instead of get in this test ?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450188619", "createdAt": "2020-07-06T12:33:01Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java", "diffHunk": "@@ -76,4 +92,91 @@ public void shouldReturn404IfListNotFound() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\t@Test\n+\tpublic void createList_shouldCreateNewList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.create(any(org.hl7.fhir.r4.model.ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/List\").jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldUpdateRequestedList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.update(any(String.class), any(org.hl7.fhir.r4.model.ListResource.class)))\n+\t\t        .thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForNoId() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + UNKNOWN_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldDeleteList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\twhen(cohortFhirListService.delete(LIST_UUID)).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + LIST_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n+\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbeb7c59acd52149eb84910ad80839838420b523"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE4ODc1NA==", "bodyText": "ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450188754", "createdAt": "2020-07-06T12:33:18Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ListFhirResourceProviderWebTest.java", "diffHunk": "@@ -76,4 +96,84 @@ public void shouldReturn404IfListNotFound() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\t@Test\n+\tpublic void createList_shouldCreateNewList() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.create(any(ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/List\").jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldUpdateRequestedList() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.update(any(String.class), any(ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForNoId() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + UNKNOWN_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldDeleteList() throws Exception {\n+\t\twhen(cohortFhirListService.delete(LIST_UUID)).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + LIST_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n+\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbeb7c59acd52149eb84910ad80839838420b523"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDM1MTA3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#pullrequestreview-443035107", "createdAt": "2020-07-06T12:36:13Z", "commit": {"oid": "fbeb7c59acd52149eb84910ad80839838420b523"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozNjoxM1rOGtVbZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozNjoxM1rOGtVbZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MDE4MA==", "bodyText": "You can also add an assert here as -\nassertThat(response.getStatus(), equalTo(404));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#discussion_r450190180", "createdAt": "2020-07-06T12:36:13Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/ListFhirResourceProviderWebTest.java", "diffHunk": "@@ -76,4 +92,91 @@ public void shouldReturn404IfListNotFound() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\t@Test\n+\tpublic void createList_shouldCreateNewList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.create(any(org.hl7.fhir.r4.model.ListResource.class))).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/List\").jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldUpdateRequestedList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(cohortFhirListService.update(any(String.class), any(org.hl7.fhir.r4.model.ListResource.class)))\n+\t\t        .thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForNoId() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + LIST_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateList_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString listJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LIST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tlistJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/List/\" + UNKNOWN_UUID).jsonContent(listJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldDeleteList() throws Exception {\n+\t\torg.hl7.fhir.r4.model.ListResource listResource = new org.hl7.fhir.r4.model.ListResource();\n+\t\tlistResource.setId(LIST_UUID);\n+\t\twhen(cohortFhirListService.delete(LIST_UUID)).thenReturn(listResource);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/List/\" + LIST_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteList_shouldReturn404ForNonExistingList() throws Exception {\n+\t\twhen(cohortFhirListService.get(UNKNOWN_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/List/\" + UNKNOWN_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbeb7c59acd52149eb84910ad80839838420b523"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbeb7c59acd52149eb84910ad80839838420b523", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/fbeb7c59acd52149eb84910ad80839838420b523", "committedDate": "2020-07-06T12:00:50Z", "message": "FM2-216 :- Add create, update, and delete methods for List."}, "afterCommit": {"oid": "8d85bfba52d0e65ba5cd4401791d9d0501744566", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8d85bfba52d0e65ba5cd4401791d9d0501744566", "committedDate": "2020-07-06T12:55:13Z", "message": "FM2-216 :- Add create, update, and delete methods for List."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "committedDate": "2020-07-06T14:05:23Z", "message": "FM2-216 :- Add create, update, and delete methods for List."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d85bfba52d0e65ba5cd4401791d9d0501744566", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8d85bfba52d0e65ba5cd4401791d9d0501744566", "committedDate": "2020-07-06T12:55:13Z", "message": "FM2-216 :- Add create, update, and delete methods for List."}, "afterCommit": {"oid": "882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/882ee11d8dfbc88d6bd10fa6080320114e5a2e57", "committedDate": "2020-07-06T14:05:23Z", "message": "FM2-216 :- Add create, update, and delete methods for List."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTg1MzE3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/246#pullrequestreview-443585317", "createdAt": "2020-07-07T06:06:25Z", "commit": {"oid": "882ee11d8dfbc88d6bd10fa6080320114e5a2e57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4139, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}