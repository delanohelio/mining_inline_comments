{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Mjc5NjQz", "number": 297, "title": "FM2-290: Add Integration Tests for Person", "bodyText": "LINK:https://issues.openmrs.org/browse/FM2-290", "createdAt": "2020-08-28T08:58:23Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297", "merged": true, "mergeCommit": {"oid": "7879818676e512ab44856713a4c12b2f0e3f1ca5"}, "closed": true, "closedAt": "2020-09-08T15:22:54Z", "author": {"login": "gitcliff"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDT3jagFqTQ3NzY3Mzk4MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG5P0hgFqTQ4NDI1MTkxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NjczOTgw", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#pullrequestreview-477673980", "createdAt": "2020-08-28T12:07:52Z", "commit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowNzo1MlrOHJAg3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowNzo1MlrOHJAg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwNzY0NA==", "bodyText": "You get an error for this test because \"family\" is not a configured endpoint for the Person resource. You might as well try:\nget(\"/Person?name=Doe&_sort=given\")", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479207644", "createdAt": "2020-08-28T12:07:52Z", "author": {"login": "varung-31"}, "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"family\", startsWith(\"Doe\"))))));\n+\t\tassertThat(entries,\n+\t\t    containsInRelativeOrder(\n+\t\t        hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"Jean\")))),\n+\t\t        hasResource(hasProperty(\"nameFirstRep\", hasProperty(\"givenAsSingleString\", containsString(\"John\"))))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?family=Doe&_sort=given\").accept(FhirMediaTypes.XML).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "originalPosition": 433}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3Njc0MjE2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#pullrequestreview-477674216", "createdAt": "2020-08-28T12:08:17Z", "commit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowODoxN1rOHJAiuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowODoxN1rOHJAiuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwODEyMA==", "bodyText": "You get an error for this test because \"family\" is not a configured endpoint for the Person resource. You might as well try:\nget(\"/Person?name=Doe&_sort=given\")\nYou could take a look here for the configured endpoints-\nhttps://github.com/openmrs/openmrs-module-fhir2/blob/master/api/src/main/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProvider.java", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479208120", "createdAt": "2020-08-28T12:08:17Z", "author": {"login": "varung-31"}, "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, statusEquals(HttpStatus.GONE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenDeletingNonExistentPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSearchForAllPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person\").accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tBundle results = readBundleResponse(response);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results.getType(), equalTo(Bundle.BundleType.SEARCHSET));\n+\t\tassertThat(results.hasEntry(), is(true));\n+\t\t\n+\t\tList<Bundle.BundleEntryComponent> entries = results.getEntry();\n+\t\t\n+\t\tassertThat(entries, everyItem(hasProperty(\"fullUrl\", startsWith(\"http://localhost/ws/fhir2/R3/Person/\"))));\n+\t\tassertThat(entries, everyItem(hasResource(instanceOf(Person.class))));\n+\t\tassertThat(entries, everyItem(hasResource(validResource())));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnSortedAndFilteredSearchResultsForPersonsAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person?family=Doe&_sort=given\").accept(FhirMediaTypes.JSON).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "originalPosition": 388}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3Njg0ODIx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#pullrequestreview-477684821", "createdAt": "2020-08-28T12:26:11Z", "commit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyNjoxMVrOHJB1FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozMTowM1rOHJCLqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIyOTIwNA==", "bodyText": "Please leave a new line here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479229204", "createdAt": "2020-08-28T12:26:11Z", "author": {"login": "varung-31"}, "path": "test-data/src/test/resources/org/openmrs/module/fhir2/providers/PersonWebTest_create.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Person xmlns=\"http://hl7.org/fhir\">\n+    <identifier>\n+        <extension url=\"http://fhir.openmrs.org/ext/person/identifier#location\">\n+            <valueReference>\n+                <reference value=\"Location/92ab9667-4686-49af-8be8-65a4b58fc49c\"/>\n+                <type value=\"Location\"/>\n+            </valueReference>\n+        </extension>\n+        <use value=\"official\"/>\n+        <type><text value=\"Test Identifier Type\"/></type>\n+        <value value=\"4444-6\"/>\n+    </identifier>\n+    <name>\n+        <family value=\"John\"/>\n+        <given value=\"Adam\"/>\n+    </name>\n+    <gender value=\"male\"/>\n+    <birthDate value=\"2004-08-12\"/>\n+    <address>\n+        <city value=\"Kampala\"/>\n+        <state value=\"Mukono\"/>\n+        <country value=\"Uganda\"/>\n+    </address>\n+</Person>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMTkxMw==", "bodyText": "Please complete this as well before marking the PR as ready for review. You might make it a draft for now", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479231913", "createdAt": "2020-08-28T12:28:32Z", "author": {"login": "varung-31"}, "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r4/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,5 @@\n+package org.openmrs.module.fhir2.providers.r4;\n+\n+public class PersonFhirResourceProviderIntegrationTest {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzNDk4Ng==", "bodyText": "This can be written as a private static final variable since there is only one test data file to execute.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479234986", "createdAt": "2020-08-28T12:31:03Z", "author": {"login": "varung-31"}, "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NzAxNDMx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#pullrequestreview-477701431", "createdAt": "2020-08-28T12:51:52Z", "commit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo1MTo1MlrOHJDfGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo1MTo1MlrOHJDfGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NjM0Nw==", "bodyText": "@varung-31 when i look in to the current error ie\n[ERROR]   PersonFhirResourceProviderIntegrationTest.shouldDeleteExistingPerson:344                                                                                                               Expected: response with HTTP status indicating request was handled successfully                                                                                                                       but: response with status code <410> with message \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\"\nthrown on this method the uuid is deleted successfully, thats why we have  code <410> with message \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\" tho am not quite sure as to why the response message here is negative", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479256347", "createdAt": "2020-08-28T12:51:52Z", "author": {"login": "gitcliff"}, "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnNotFoundWhenUpdatingNonExistentPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + WRONG_PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\t// read the updated record\n+\t\tPerson updatedPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(updatedPerson, notNullValue());\n+\t\tassertThat(updatedPerson.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(updatedPerson.getBirthDate(), equalTo(birthDate));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// double-check the record returned via get\n+\t\tresponse = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson reReadPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(reReadPerson.getBirthDate(), equalTo(birthDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnBadRequestWhenDocumentIdDoesNotMatchPersonIdAsXML() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tperson.setId(WRONG_PERSON_UUID);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).xmlContext(toXML(person)).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tOperationOutcome operationOutcome = readOperationOutcome(response);\n+\t\t\n+\t\tassertThat(operationOutcome, notNullValue());\n+\t\tassertThat(operationOutcome.hasIssue(), is(true));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldDeleteExistingPerson() throws Exception {\n+\t\tMockHttpServletResponse response = delete(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "originalPosition": 344}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NzExNTM0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#pullrequestreview-477711534", "createdAt": "2020-08-28T13:06:24Z", "commit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzowNjoyNFrOHJERIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzowNjoyNFrOHJERIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI2OTE1NQ==", "bodyText": "@varung-31  the same goes here with this error  of which i think the person must be some how connect to a particular patient in the system", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r479269155", "createdAt": "2020-08-28T13:06:24Z", "author": {"login": "gitcliff"}, "path": "integration-tests/src/test/java/org/openmrs/module/fhir2/providers/r3/PersonFhirResourceProviderIntegrationTest.java", "diffHunk": "@@ -0,0 +1,455 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInRelativeOrder;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.equalToIgnoringCase;\n+import static org.hamcrest.Matchers.everyItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.time.LocalDate;\n+import java.time.ZoneId;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.Enumerations;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.dstu3.model.Person;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+public class PersonFhirResourceProviderIntegrationTest extends BaseFhirR3IntegrationTest<PersonFhirResourceProvider, Person> {\n+\t\n+\tprivate static final String[] PERSON_SEARCH_DATA_FILES = {\n+\t        \"org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml\" };\n+\t\n+\tprivate static final String JSON_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.json\";\n+\t\n+\tprivate static final String XML_CREATE_PERSON = \"org/openmrs/module/fhir2/providers/PersonWebTest_create.xml\";\n+\t\n+\tprivate static final String PERSON_UUID = \"61b38324-e2fd-4feb-95b7-9e9a2a4400df\";\n+\t\n+\tprivate static final String WRONG_PERSON_UUID = \"f090747b-459b-4a13-8c1b-c0567d8aeb63\";\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\t@Autowired\n+\tprivate PersonFhirResourceProvider resourceProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tsuper.setup();\n+\t\t\n+\t\tfor (String search_data : PERSON_SEARCH_DATA_FILES) {\n+\t\t\texecuteDataSet(search_data);\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsJson() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnExistingPersonAsXML() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), equalTo(PERSON_UUID));\n+\t\tassertThat(person, validResource());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldThrow404ForNonExistingPersonAsXml() throws Exception {\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + WRONG_PERSON_UUID).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isNotFound());\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsJson() throws Exception {\n+\t\t// read JSON record\n+\t\tString jsonPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.JSON).jsonContent(jsonPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldCreateNewPersonAsXML() throws Exception {\n+\t\t// read XML record\n+\t\tString xmlPerson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(XML_CREATE_PERSON)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\txmlPerson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\t// create person\n+\t\tMockHttpServletResponse response = post(\"/Person\").accept(FhirMediaTypes.XML).xmlContext(xmlPerson).go();\n+\t\t\n+\t\t// verify created correctly\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getHeader(\"Location\"), containsString(\"/Person/\"));\n+\t\tassertThat(response.getContentType(), is(FhirMediaTypes.XML.toString()));\n+\t\tassertThat(response.getContentAsString(), notNullValue());\n+\t\t\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\tassertThat(person, notNullValue());\n+\t\tassertThat(person.getIdElement().getIdPart(), notNullValue());\n+\t\tassertThat(person.getName().get(0).getGiven().get(0).toString(), equalToIgnoringCase(\"Adam\"));\n+\t\tassertThat(person.getName().get(0).getFamily(), equalToIgnoringCase(\"John\"));\n+\t\tassertThat(person.getGender(), equalTo(Enumerations.AdministrativeGender.MALE));\n+\t\t\n+\t\tDate birthDate = Date.from(LocalDate.of(2004, 8, 12).atStartOfDay(ZoneId.systemDefault()).toInstant());\n+\t\tassertThat(person.getBirthDate(), equalTo(birthDate));\n+\t\t\n+\t\tassertThat(person.getAddress().get(0).getCity(), equalTo(\"Kampala\"));\n+\t\tassertThat(person.getAddress().get(0).getState(), equalTo(\"Mukono\"));\n+\t\tassertThat(person.getAddress().get(0).getCountry(), equalTo(\"Uganda\"));\n+\t\tassertThat(person, validResource());\n+\t\t\n+\t\t// try to get new person\n+\t\tresponse = get(\"/Person/\" + person.getIdElement().getIdPart()).accept(FhirMediaTypes.XML).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\t\n+\t\tPerson newPerson = readResponse(response);\n+\t\t\n+\t\tassertThat(newPerson.getId(), equalTo(person.getId()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingPersonAsJson() throws Exception {\n+\t\t// get the existing record\n+\t\tMockHttpServletResponse response = get(\"/Person/\" + PERSON_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\tPerson person = readResponse(response);\n+\t\t\n+\t\t// update the existing record\n+\t\tDate birthDate = DateUtils.truncate(new Date(), Calendar.DATE);\n+\t\tperson.setBirthDate(birthDate);\n+\t\t\n+\t\t// send the update to the server\n+\t\tresponse = put(\"/Person/\" + PERSON_UUID).jsonContent(toJson(person)).go();\n+\t\t\n+\t\tassertThat(response, isOk());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57"}, "originalPosition": 223}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc6d6e1b7a6277fe77029059000052070bf217f8", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/fc6d6e1b7a6277fe77029059000052070bf217f8", "committedDate": "2020-08-31T17:14:56Z", "message": "FM2-290:Add Integration Tests for Person"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/fc6157dbe314b3e06db42f7d6bcf8fb89c2dcf57", "committedDate": "2020-08-28T08:55:19Z", "message": "FM2-290:Add Integration Tests for Person"}, "afterCommit": {"oid": "961c600578a71bc091fb932ad6778908b6f312bb", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/961c600578a71bc091fb932ad6778908b6f312bb", "committedDate": "2020-09-01T08:47:17Z", "message": "FM2-290:Add Integration Tests for Person"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3340d646743091d65c8c1917e52d3926dee665", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3f3340d646743091d65c8c1917e52d3926dee665", "committedDate": "2020-09-01T09:01:37Z", "message": "FM2-290:Add Integration Tests for Person"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "961c600578a71bc091fb932ad6778908b6f312bb", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/961c600578a71bc091fb932ad6778908b6f312bb", "committedDate": "2020-09-01T08:47:17Z", "message": "FM2-290:Add Integration Tests for Person"}, "afterCommit": {"oid": "3f3340d646743091d65c8c1917e52d3926dee665", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3f3340d646743091d65c8c1917e52d3926dee665", "committedDate": "2020-09-01T09:01:37Z", "message": "FM2-290:Add Integration Tests for Person"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTU4MTU0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#pullrequestreview-479558154", "createdAt": "2020-09-01T09:27:32Z", "commit": {"oid": "3f3340d646743091d65c8c1917e52d3926dee665"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyNzozMlrOHKt1-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOToyNzozMlrOHKt1-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk5ODkwNQ==", "bodyText": "Instead of changing this, please use the person with person_id=4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#discussion_r480998905", "createdAt": "2020-09-01T09:27:32Z", "author": {"login": "varung-31"}, "path": "test-data/src/test/resources/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImplTest_initial_data.xml", "diffHunk": "@@ -9,8 +9,8 @@\n     graphic logo is a trademark of OpenMRS Inc.\n -->\n <dataset>\n-    <person person_id=\"2\" gender=\"M\" birthdate=\"1999-12-20\" dead=\"false\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"61b38324-e2fd-4feb-95b7-9e9a2a4400df\"/>\n-    <person person_id=\"3\" gender=\"M\" birthdate=\"2000-11-18\" dead=\"true\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" uuid=\"5c521595-4e12-46b0-8248-b8f2d3697766\"/>\n+    <person person_id=\"2\" gender=\"M\" birthdate=\"1999-12-20\" dead=\"false\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\"  uuid=\"61b38324-e2fd-4feb-95b7-9e9a2a4400df\"/>\n+    <person person_id=\"3\" gender=\"M\" birthdate=\"2000-11-18\" dead=\"false\" creator=\"1\" date_created=\"2005-01-01 00:00:00.0\" voided=\"false\" void_reason=\"there is no reason\" uuid=\"5c521595-4e12-46b0-8248-b8f2d3697766\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3340d646743091d65c8c1917e52d3926dee665"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3282308d425a39e76757c9237496b21795c7518", "author": {"user": {"login": "gitcliff", "name": null}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a3282308d425a39e76757c9237496b21795c7518", "committedDate": "2020-09-03T08:15:23Z", "message": "FM2-290:Add integration tests for Person"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjUxOTEz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/297#pullrequestreview-484251913", "createdAt": "2020-09-08T15:22:39Z", "commit": {"oid": "a3282308d425a39e76757c9237496b21795c7518"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3985, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}