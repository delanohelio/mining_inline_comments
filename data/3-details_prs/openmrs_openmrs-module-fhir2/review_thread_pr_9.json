{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNjgxOTE5", "number": 9, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0MDozM1rODW34CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNjo1MzozN1rODXbmFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzEwNzI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0MDozNFrOFb4A-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0MDozNFrOFb4A-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc3MzYyNg==", "bodyText": "What happens if the taskId is not supplied? I expect that to be the case with a new resource (since the id should be provided by the source system and not the calling system). In other words, I think the implementation here should be:\norg.openmrs.module.fhir2.Task openmrsTask = null;\nif (task.getId() != null) {\n    openmrsTask = dao.getTaskByUuid(task.getId());\n}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r364773626", "createdAt": "2020-01-09T14:40:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -40,9 +40,32 @@ public Task getTaskByUuid(String uuid) {\n \t */\n \t@Override\n \tpublic Task saveTask(Task task) {\n-\t\torg.openmrs.module.fhir2.Task savedOpenmrsTask = dao.saveTask(translator.toOpenmrsType(task));\n+\t\torg.openmrs.module.fhir2.Task openmrsTask = translator.toOpenmrsType(task);\n+\t\torg.openmrs.module.fhir2.Task savedTask = dao.saveTask(openmrsTask);\n+\t\tTask translatedTask = translator.toFhirResource(savedTask);\n \t\t\n-\t\treturn null;\n+\t\treturn translatedTask;\n+\t}\n+\t\n+\t/**\n+\t * Save task to the DB, or update task if one exists with given UUID\n+\t * \n+\t * @param uuid the uuid of the task to update\n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\t@Override\n+\tpublic Task saveTask(String uuid, Task task) {\n+\t\torg.openmrs.module.fhir2.Task openmrsTask;\n+\t\topenmrsTask = dao.getTaskByUuid(task.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5472519a83633f3e9ab164e872f09342459780"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzExMjAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0MTo1M1rOFb4D-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0MTo1M1rOFb4D-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc3NDM5Mw==", "bodyText": "Maybe we should move this logic to the toOpenmrsType(openmrsTask, task) implementation, so that here we can just do:\ntranslator.toOpenmrsType(openmrsTask, task);\nThis is different from how I implemented the other translators, but I actually think it might be a better pattern than throwing an error.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r364774393", "createdAt": "2020-01-09T14:41:53Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -40,9 +40,32 @@ public Task getTaskByUuid(String uuid) {\n \t */\n \t@Override\n \tpublic Task saveTask(Task task) {\n-\t\torg.openmrs.module.fhir2.Task savedOpenmrsTask = dao.saveTask(translator.toOpenmrsType(task));\n+\t\torg.openmrs.module.fhir2.Task openmrsTask = translator.toOpenmrsType(task);\n+\t\torg.openmrs.module.fhir2.Task savedTask = dao.saveTask(openmrsTask);\n+\t\tTask translatedTask = translator.toFhirResource(savedTask);\n \t\t\n-\t\treturn null;\n+\t\treturn translatedTask;\n+\t}\n+\t\n+\t/**\n+\t * Save task to the DB, or update task if one exists with given UUID\n+\t * \n+\t * @param uuid the uuid of the task to update\n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\t@Override\n+\tpublic Task saveTask(String uuid, Task task) {\n+\t\torg.openmrs.module.fhir2.Task openmrsTask;\n+\t\topenmrsTask = dao.getTaskByUuid(task.getId());\n+\t\t\n+\t\tif (openmrsTask == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5472519a83633f3e9ab164e872f09342459780"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzExODM3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0MzozOVrOFb4H-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0MzozOVrOFb4H-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc3NTQxNw==", "bodyText": "Basically, with the changes I mentioned above, this should look something like:\nif (fhirTask != null) {\n    if (openmrsTask == null) {\n        openmrsTask = new org.openmrs.module.fhir2.Task();\n    }\n    setOpenmrsTaskFields(openmrsTask, fhirTask);\n}\n\nreturn openmrsTask;", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r364775417", "createdAt": "2020-01-09T14:43:39Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImpl.java", "diffHunk": "@@ -29,17 +27,40 @@ public Task toFhirResource(org.openmrs.module.fhir2.Task openmrsTask) {\n \tpublic org.openmrs.module.fhir2.Task toOpenmrsType(Task fhirTask) {\n \t\torg.openmrs.module.fhir2.Task openmrsTask = new org.openmrs.module.fhir2.Task();\n \t\t\n-\t\tif (fhirTask != null && fhirTask.getStatus() != null && fhirTask.getIntent() != null) {\n-\t\t\topenmrsTask.setUuid(fhirTask.getId());\n-\t\t\topenmrsTask.setStatus(org.openmrs.module.fhir2.Task.TaskStatus.valueOf(fhirTask.getStatus().name()));\n-\t\t\topenmrsTask.setIntent(org.openmrs.module.fhir2.Task.TaskIntent.valueOf(fhirTask.getIntent().name()));\n+\t\tif (fhirTask != null) {\n+\t\t\tsetOpenmrsTaskFields(openmrsTask, fhirTask);\n \t\t}\n \t\t\n \t\treturn openmrsTask;\n \t}\n \t\n \t@Override\n-\tpublic org.openmrs.module.fhir2.Task toOpenmrsType(org.openmrs.module.fhir2.Task existingObject, Task resource) {\n-\t\treturn null;\n+\tpublic org.openmrs.module.fhir2.Task toOpenmrsType(org.openmrs.module.fhir2.Task openmrsTask, Task fhirTask) {\n+\t\tif (fhirTask != null & openmrsTask != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5472519a83633f3e9ab164e872f09342459780"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzEyMTI3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0NDoyNFrOFb4JwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0NDoyNFrOFb4JwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc3NTg3Mg==", "bodyText": "As I mentioned above, I think we should not be supplying the taskId here.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r364775872", "createdAt": "2020-01-09T14:44:24Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.Task;\n+import org.openmrs.module.fhir2.api.dao.FhirTaskDao;\n+import org.openmrs.module.fhir2.api.translators.TaskTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.TaskTranslatorImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class FhirTaskServiceImplTest {\n+\t\n+\tprivate static final String TASK_UUID = \"dc9ce8be-3155-4adf-b28f-29436ec30a30\";\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_NEW_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_NEW_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskIntent FHIR_TASK_INTENT = org.hl7.fhir.r4.model.Task.TaskIntent.ORDER;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskIntent OPENMRS_TASK_INTENT = org.openmrs.module.fhir2.Task.TaskIntent.ORDER;\n+\t\n+\t@Mock\n+\tFhirTaskDao dao;\n+\t\n+\t@Mock\n+\tTaskTranslator translator;\n+\t\n+\tprivate FhirTaskServiceImpl fhirTaskService;\n+\t\n+\t@Before\n+\tpublic void setUp() {\n+\t\tfhirTaskService = new FhirTaskServiceImpl();\n+\t\tfhirTaskService.setDao(dao);\n+\t\tfhirTaskService.setTranslator(translator);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetTaskByUuid() {\n+\t\tTask task = new Task();\n+\t\torg.hl7.fhir.r4.model.Task translatedTask = new org.hl7.fhir.r4.model.Task();\n+\t\t\n+\t\ttask.setUuid(TASK_UUID);\n+\t\ttranslatedTask.setId(TASK_UUID);\n+\t\t\n+\t\twhen(dao.getTaskByUuid(TASK_UUID)).thenReturn(task);\n+\t\twhen(translator.toFhirResource(task)).thenReturn(translatedTask);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Task result = fhirTaskService.getTaskByUuid(TASK_UUID);\n+\t\tassertNotNull(result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSaveNewTask() {\n+\t\torg.hl7.fhir.r4.model.Task fhirTask = new org.hl7.fhir.r4.model.Task();\n+\t\tTask openmrsTask = new Task();\n+\t\t\n+\t\tfhirTask.setId(TASK_UUID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5472519a83633f3e9ab164e872f09342459780"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzEzMjk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0NzowNFrOFb4Qpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNDo0NzowNFrOFb4Qpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc3NzYzOA==", "bodyText": "I would suggest changing this to:\nif (openmrsTask.getUuid() == null) {\n    openmrsTask.setUuid(fhirTask.getId());\n}\nSince we don't want to allow a FHIR client to change the UUID of an existing task. I should also rethink this in the other translators.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r364777638", "createdAt": "2020-01-09T14:47:04Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImpl.java", "diffHunk": "@@ -29,17 +27,40 @@ public Task toFhirResource(org.openmrs.module.fhir2.Task openmrsTask) {\n \tpublic org.openmrs.module.fhir2.Task toOpenmrsType(Task fhirTask) {\n \t\torg.openmrs.module.fhir2.Task openmrsTask = new org.openmrs.module.fhir2.Task();\n \t\t\n-\t\tif (fhirTask != null && fhirTask.getStatus() != null && fhirTask.getIntent() != null) {\n-\t\t\topenmrsTask.setUuid(fhirTask.getId());\n-\t\t\topenmrsTask.setStatus(org.openmrs.module.fhir2.Task.TaskStatus.valueOf(fhirTask.getStatus().name()));\n-\t\t\topenmrsTask.setIntent(org.openmrs.module.fhir2.Task.TaskIntent.valueOf(fhirTask.getIntent().name()));\n+\t\tif (fhirTask != null) {\n+\t\t\tsetOpenmrsTaskFields(openmrsTask, fhirTask);\n \t\t}\n \t\t\n \t\treturn openmrsTask;\n \t}\n \t\n \t@Override\n-\tpublic org.openmrs.module.fhir2.Task toOpenmrsType(org.openmrs.module.fhir2.Task existingObject, Task resource) {\n-\t\treturn null;\n+\tpublic org.openmrs.module.fhir2.Task toOpenmrsType(org.openmrs.module.fhir2.Task openmrsTask, Task fhirTask) {\n+\t\tif (fhirTask != null & openmrsTask != null) {\n+\t\t\tsetOpenmrsTaskFields(openmrsTask, fhirTask);\n+\t\t}\n+\t\t\n+\t\treturn openmrsTask;\n+\t}\n+\t\n+\tprivate void setFhirTaskFields(org.openmrs.module.fhir2.Task openmrsTask, Task fhirTask) {\n+\t\tfhirTask.setId(openmrsTask.getUuid());\n+\t\tif (openmrsTask.getStatus() != null) {\n+\t\t\tfhirTask.setStatus(Task.TaskStatus.valueOf(openmrsTask.getStatus().name()));\n+\t\t}\n+\t\tif (openmrsTask.getIntent() != null) {\n+\t\t\tfhirTask.setIntent(Task.TaskIntent.valueOf(openmrsTask.getIntent().name()));\n+\t\t}\n+\t}\n+\t\n+\tprivate void setOpenmrsTaskFields(org.openmrs.module.fhir2.Task openmrsTask, Task fhirTask) {\n+\t\topenmrsTask.setUuid(fhirTask.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d5472519a83633f3e9ab164e872f09342459780"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ1MzI3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0NjowNFrOFcYAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0NjowNFrOFcYAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5Nzc4MA==", "bodyText": "We don't need the public modifier in an interface. Can you also change this for the other two methods here?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365297780", "createdAt": "2020-01-10T15:46:04Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java", "diffHunk": "@@ -32,4 +32,12 @@\n \t */\n \tpublic Task saveTask(Task task);\n \t\n+\t/**\n+\t * Save task to the DB\n+\t * \n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\tpublic Task saveTask(String uuid, Task task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ1ODE1OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0Nzo0M1rOFcYDng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0Nzo0M1rOFcYDng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODU5MA==", "bodyText": "This can be implemented as a one-liner:\nreturn translator.toFhirResource(dao.saveTask(translator.toOpenmrsType(task)));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365298590", "createdAt": "2020-01-10T15:47:43Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -40,9 +40,31 @@ public Task getTaskByUuid(String uuid) {\n \t */\n \t@Override\n \tpublic Task saveTask(Task task) {\n-\t\torg.openmrs.module.fhir2.Task savedOpenmrsTask = dao.saveTask(translator.toOpenmrsType(task));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ2MDU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0ODoyN1rOFcYFGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo0ODoyN1rOFcYFGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI5ODk3MA==", "bodyText": "return translator.toFhirResource(dao.saveTask(translator.toOpenmrsType(openmrsTask, task)));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365298970", "createdAt": "2020-01-10T15:48:27Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -40,9 +40,31 @@ public Task getTaskByUuid(String uuid) {\n \t */\n \t@Override\n \tpublic Task saveTask(Task task) {\n-\t\torg.openmrs.module.fhir2.Task savedOpenmrsTask = dao.saveTask(translator.toOpenmrsType(task));\n+\t\torg.openmrs.module.fhir2.Task openmrsTask = translator.toOpenmrsType(task);\n+\t\torg.openmrs.module.fhir2.Task savedTask = dao.saveTask(openmrsTask);\n+\t\tTask translatedTask = translator.toFhirResource(savedTask);\n \t\t\n-\t\treturn null;\n+\t\treturn translatedTask;\n+\t}\n+\t\n+\t/**\n+\t * Save task to the DB, or update task if one exists with given UUID\n+\t * \n+\t * @param uuid the uuid of the task to update\n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\t@Override\n+\tpublic Task saveTask(String uuid, Task task) {\n+\t\torg.openmrs.module.fhir2.Task openmrsTask = null;\n+\t\t\n+\t\tif (uuid != null) {\n+\t\t\topenmrsTask = dao.getTaskByUuid(task.getId());\n+\t\t}\n+\t\t\n+\t\topenmrsTask = translator.toOpenmrsType(openmrsTask, task);\n+\t\t\n+\t\treturn translator.toFhirResource(dao.saveTask(openmrsTask));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ3NDgzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1MjoxMVrOFcYNXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1MjoxMVrOFcYNXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMTA4NA==", "bodyText": "I think we'd prefer the \"shouldRetrieveTaskByUuid\" terminology to stay consistent with other tests.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365301084", "createdAt": "2020-01-10T15:52:11Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.Task;\n+import org.openmrs.module.fhir2.api.dao.FhirTaskDao;\n+import org.openmrs.module.fhir2.api.translators.TaskTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.TaskTranslatorImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class FhirTaskServiceImplTest {\n+\t\n+\tprivate static final String TASK_UUID = \"dc9ce8be-3155-4adf-b28f-29436ec30a30\";\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_NEW_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_NEW_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskIntent FHIR_TASK_INTENT = org.hl7.fhir.r4.model.Task.TaskIntent.ORDER;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskIntent OPENMRS_TASK_INTENT = org.openmrs.module.fhir2.Task.TaskIntent.ORDER;\n+\t\n+\t@Mock\n+\tFhirTaskDao dao;\n+\t\n+\t@Mock\n+\tTaskTranslator translator;\n+\t\n+\tprivate FhirTaskServiceImpl fhirTaskService;\n+\t\n+\t@Before\n+\tpublic void setUp() {\n+\t\tfhirTaskService = new FhirTaskServiceImpl();\n+\t\tfhirTaskService.setDao(dao);\n+\t\tfhirTaskService.setTranslator(translator);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetTaskByUuid() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ4MDc4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NDowN1rOFcYRLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NDowN1rOFcYRLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMjA2MQ==", "bodyText": "We should also have:\nassertEquals(task, result);\nor (equivalently):\nassertThat(result, equalTo(task));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365302061", "createdAt": "2020-01-10T15:54:07Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.Task;\n+import org.openmrs.module.fhir2.api.dao.FhirTaskDao;\n+import org.openmrs.module.fhir2.api.translators.TaskTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.TaskTranslatorImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class FhirTaskServiceImplTest {\n+\t\n+\tprivate static final String TASK_UUID = \"dc9ce8be-3155-4adf-b28f-29436ec30a30\";\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_NEW_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_NEW_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskIntent FHIR_TASK_INTENT = org.hl7.fhir.r4.model.Task.TaskIntent.ORDER;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskIntent OPENMRS_TASK_INTENT = org.openmrs.module.fhir2.Task.TaskIntent.ORDER;\n+\t\n+\t@Mock\n+\tFhirTaskDao dao;\n+\t\n+\t@Mock\n+\tTaskTranslator translator;\n+\t\n+\tprivate FhirTaskServiceImpl fhirTaskService;\n+\t\n+\t@Before\n+\tpublic void setUp() {\n+\t\tfhirTaskService = new FhirTaskServiceImpl();\n+\t\tfhirTaskService.setDao(dao);\n+\t\tfhirTaskService.setTranslator(translator);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetTaskByUuid() {\n+\t\tTask task = new Task();\n+\t\torg.hl7.fhir.r4.model.Task translatedTask = new org.hl7.fhir.r4.model.Task();\n+\t\t\n+\t\ttask.setUuid(TASK_UUID);\n+\t\ttranslatedTask.setId(TASK_UUID);\n+\t\t\n+\t\twhen(dao.getTaskByUuid(TASK_UUID)).thenReturn(task);\n+\t\twhen(translator.toFhirResource(task)).thenReturn(translatedTask);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Task result = fhirTaskService.getTaskByUuid(TASK_UUID);\n+\t\tassertNotNull(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ4MTMzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NDoxNVrOFcYRig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NDoxNVrOFcYRig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMjE1NA==", "bodyText": "We should also have:\nassertEquals(task, result);\nor (equivalently):\nassertThat(result, equalTo(task));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365302154", "createdAt": "2020-01-10T15:54:15Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.Task;\n+import org.openmrs.module.fhir2.api.dao.FhirTaskDao;\n+import org.openmrs.module.fhir2.api.translators.TaskTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.TaskTranslatorImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class FhirTaskServiceImplTest {\n+\t\n+\tprivate static final String TASK_UUID = \"dc9ce8be-3155-4adf-b28f-29436ec30a30\";\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_NEW_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_NEW_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskIntent FHIR_TASK_INTENT = org.hl7.fhir.r4.model.Task.TaskIntent.ORDER;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskIntent OPENMRS_TASK_INTENT = org.openmrs.module.fhir2.Task.TaskIntent.ORDER;\n+\t\n+\t@Mock\n+\tFhirTaskDao dao;\n+\t\n+\t@Mock\n+\tTaskTranslator translator;\n+\t\n+\tprivate FhirTaskServiceImpl fhirTaskService;\n+\t\n+\t@Before\n+\tpublic void setUp() {\n+\t\tfhirTaskService = new FhirTaskServiceImpl();\n+\t\tfhirTaskService.setDao(dao);\n+\t\tfhirTaskService.setTranslator(translator);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetTaskByUuid() {\n+\t\tTask task = new Task();\n+\t\torg.hl7.fhir.r4.model.Task translatedTask = new org.hl7.fhir.r4.model.Task();\n+\t\t\n+\t\ttask.setUuid(TASK_UUID);\n+\t\ttranslatedTask.setId(TASK_UUID);\n+\t\t\n+\t\twhen(dao.getTaskByUuid(TASK_UUID)).thenReturn(task);\n+\t\twhen(translator.toFhirResource(task)).thenReturn(translatedTask);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Task result = fhirTaskService.getTaskByUuid(TASK_UUID);\n+\t\tassertNotNull(result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSaveNewTask() {\n+\t\torg.hl7.fhir.r4.model.Task fhirTask = new org.hl7.fhir.r4.model.Task();\n+\t\tTask openmrsTask = new Task();\n+\t\t\n+\t\tfhirTask.setStatus(FHIR_TASK_STATUS);\n+\t\tfhirTask.setIntent(FHIR_TASK_INTENT);\n+\t\t\n+\t\topenmrsTask.setUuid(TASK_UUID);\n+\t\topenmrsTask.setStatus(OPENMRS_TASK_STATUS);\n+\t\topenmrsTask.setIntent(OPENMRS_TASK_INTENT);\n+\t\t\n+\t\twhen(translator.toOpenmrsType(fhirTask)).thenReturn(openmrsTask);\n+\t\twhen(dao.saveTask(openmrsTask)).thenReturn(openmrsTask);\n+\t\twhen(translator.toFhirResource(openmrsTask)).thenReturn(fhirTask);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Task result = fhirTaskService.saveTask(fhirTask);\n+\t\t\n+\t\tassertNotNull(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ4MTY1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NDoyMVrOFcYRug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NDoyMVrOFcYRug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMjIwMg==", "bodyText": "We should also have:\nassertEquals(task, result);\nor (equivalently):\nassertThat(result, equalTo(task));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365302202", "createdAt": "2020-01-10T15:54:21Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImplTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.impl;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.runners.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.Task;\n+import org.openmrs.module.fhir2.api.dao.FhirTaskDao;\n+import org.openmrs.module.fhir2.api.translators.TaskTranslator;\n+import org.openmrs.module.fhir2.api.translators.impl.TaskTranslatorImpl;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class FhirTaskServiceImplTest {\n+\t\n+\tprivate static final String TASK_UUID = \"dc9ce8be-3155-4adf-b28f-29436ec30a30\";\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskStatus FHIR_NEW_TASK_STATUS = org.hl7.fhir.r4.model.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.REQUESTED;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskStatus OPENMRS_NEW_TASK_STATUS = org.openmrs.module.fhir2.Task.TaskStatus.ACCEPTED;\n+\t\n+\tprivate static final org.hl7.fhir.r4.model.Task.TaskIntent FHIR_TASK_INTENT = org.hl7.fhir.r4.model.Task.TaskIntent.ORDER;\n+\t\n+\tprivate static final org.openmrs.module.fhir2.Task.TaskIntent OPENMRS_TASK_INTENT = org.openmrs.module.fhir2.Task.TaskIntent.ORDER;\n+\t\n+\t@Mock\n+\tFhirTaskDao dao;\n+\t\n+\t@Mock\n+\tTaskTranslator translator;\n+\t\n+\tprivate FhirTaskServiceImpl fhirTaskService;\n+\t\n+\t@Before\n+\tpublic void setUp() {\n+\t\tfhirTaskService = new FhirTaskServiceImpl();\n+\t\tfhirTaskService.setDao(dao);\n+\t\tfhirTaskService.setTranslator(translator);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetTaskByUuid() {\n+\t\tTask task = new Task();\n+\t\torg.hl7.fhir.r4.model.Task translatedTask = new org.hl7.fhir.r4.model.Task();\n+\t\t\n+\t\ttask.setUuid(TASK_UUID);\n+\t\ttranslatedTask.setId(TASK_UUID);\n+\t\t\n+\t\twhen(dao.getTaskByUuid(TASK_UUID)).thenReturn(task);\n+\t\twhen(translator.toFhirResource(task)).thenReturn(translatedTask);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Task result = fhirTaskService.getTaskByUuid(TASK_UUID);\n+\t\tassertNotNull(result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSaveNewTask() {\n+\t\torg.hl7.fhir.r4.model.Task fhirTask = new org.hl7.fhir.r4.model.Task();\n+\t\tTask openmrsTask = new Task();\n+\t\t\n+\t\tfhirTask.setStatus(FHIR_TASK_STATUS);\n+\t\tfhirTask.setIntent(FHIR_TASK_INTENT);\n+\t\t\n+\t\topenmrsTask.setUuid(TASK_UUID);\n+\t\topenmrsTask.setStatus(OPENMRS_TASK_STATUS);\n+\t\topenmrsTask.setIntent(OPENMRS_TASK_INTENT);\n+\t\t\n+\t\twhen(translator.toOpenmrsType(fhirTask)).thenReturn(openmrsTask);\n+\t\twhen(dao.saveTask(openmrsTask)).thenReturn(openmrsTask);\n+\t\twhen(translator.toFhirResource(openmrsTask)).thenReturn(fhirTask);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Task result = fhirTaskService.saveTask(fhirTask);\n+\t\t\n+\t\tassertNotNull(result);\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldSaveExistingTask() {\n+\t\torg.hl7.fhir.r4.model.Task fhirTask = new org.hl7.fhir.r4.model.Task();\n+\t\tTask openmrsTask = new Task();\n+\t\tTask updatedOpenmrsTask = new Task();\n+\t\t\n+\t\tfhirTask.setId(TASK_UUID);\n+\t\tfhirTask.setStatus(FHIR_NEW_TASK_STATUS);\n+\t\tfhirTask.setIntent(FHIR_TASK_INTENT);\n+\t\t\n+\t\topenmrsTask.setUuid(TASK_UUID);\n+\t\topenmrsTask.setStatus(OPENMRS_TASK_STATUS);\n+\t\topenmrsTask.setIntent(OPENMRS_TASK_INTENT);\n+\t\t\n+\t\tupdatedOpenmrsTask.setUuid(TASK_UUID);\n+\t\tupdatedOpenmrsTask.setStatus(OPENMRS_NEW_TASK_STATUS);\n+\t\topenmrsTask.setIntent(OPENMRS_TASK_INTENT);\n+\t\t\n+\t\twhen(translator.toOpenmrsType(openmrsTask, fhirTask)).thenReturn(updatedOpenmrsTask);\n+\t\twhen(dao.saveTask(updatedOpenmrsTask)).thenReturn(updatedOpenmrsTask);\n+\t\twhen(dao.getTaskByUuid(TASK_UUID)).thenReturn(openmrsTask);\n+\t\twhen(translator.toFhirResource(updatedOpenmrsTask)).thenReturn(fhirTask);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Task result = fhirTaskService.saveTask(TASK_UUID, fhirTask);\n+\t\t\n+\t\tassertNotNull(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ4NTMwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NTozN1rOFcYUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NTozN1rOFcYUMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMjgzMw==", "bodyText": "Not that it's harmful, but we don't need this if we aren't using the @Mock annotation", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365302833", "createdAt": "2020-01-10T15:55:37Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "diffHunk": "@@ -22,10 +23,16 @@\n @RunWith(MockitoJUnitRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ4NjM4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NjowMVrOFcYU4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NjowMVrOFcYU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMzAwOQ==", "bodyText": "Can we organize these imports so all the hamcrest one's are together followed by the junit one?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365303009", "createdAt": "2020-01-10T15:56:01Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "diffHunk": "@@ -12,6 +12,7 @@\n import static org.hamcrest.Matchers.notNullValue;\n import static org.junit.Assert.assertThat;\n import static org.hamcrest.Matchers.equalTo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ4OTQwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1Njo1N1rOFcYWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1Njo1N1rOFcYWrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMzQ3MA==", "bodyText": "We should also assert the value of intent.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365303470", "createdAt": "2020-01-10T15:56:57Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "diffHunk": "@@ -77,4 +84,48 @@ public void shouldTranslateFhirTaskStatusIntentToOpenmrsTaskStatusIntent() {\n \t\tassertThat(result.getStatus(), equalTo(OPENMRS_TASK_STATUS));\n \t\tassertThat(result.getIntent(), equalTo(OPENMRS_TASK_INTENT));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldTranslateNewOpenmrsTask() {\n+\t\tTask fhirTask = new Task();\n+\t\tfhirTask.setStatus(FHIR_NEW_TASK_STATUS);\n+\t\tfhirTask.setIntent(FHIR_TASK_INTENT);\n+\t\t\n+\t\torg.openmrs.module.fhir2.Task result = taskTranslator.toOpenmrsType(fhirTask);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getStatus(), equalTo(OPENMRS_NEW_TASK_STATUS));\n+\t\tassertThat(result.getUuid(), notNullValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ5MDA2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NzoxM1rOFcYXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NzoxM1rOFcYXIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMzU4Ng==", "bodyText": "These two lines shouldn't be necessary for this test.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365303586", "createdAt": "2020-01-10T15:57:13Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "diffHunk": "@@ -77,4 +84,48 @@ public void shouldTranslateFhirTaskStatusIntentToOpenmrsTaskStatusIntent() {\n \t\tassertThat(result.getStatus(), equalTo(OPENMRS_TASK_STATUS));\n \t\tassertThat(result.getIntent(), equalTo(OPENMRS_TASK_INTENT));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldTranslateNewOpenmrsTask() {\n+\t\tTask fhirTask = new Task();\n+\t\tfhirTask.setStatus(FHIR_NEW_TASK_STATUS);\n+\t\tfhirTask.setIntent(FHIR_TASK_INTENT);\n+\t\t\n+\t\torg.openmrs.module.fhir2.Task result = taskTranslator.toOpenmrsType(fhirTask);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getStatus(), equalTo(OPENMRS_NEW_TASK_STATUS));\n+\t\tassertThat(result.getUuid(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldIgnoreUUIDForNewOpenmrsTask() {\n+\t\tTask fhirTask = new Task();\n+\t\tfhirTask.setStatus(FHIR_NEW_TASK_STATUS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ5MTM3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NzozNlrOFcYX5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1NzozNlrOFcYX5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMzc4Mw==", "bodyText": "We should add a similar test without having a status or intent set on the task.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365303783", "createdAt": "2020-01-10T15:57:36Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "diffHunk": "@@ -77,4 +84,48 @@ public void shouldTranslateFhirTaskStatusIntentToOpenmrsTaskStatusIntent() {\n \t\tassertThat(result.getStatus(), equalTo(OPENMRS_TASK_STATUS));\n \t\tassertThat(result.getIntent(), equalTo(OPENMRS_TASK_INTENT));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldTranslateNewOpenmrsTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NjQ5MTcxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1Nzo0MlrOFcYYJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNTo1Nzo0MlrOFcYYJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTMwMzg0Nw==", "bodyText": "We should add a similar test without having a status or intent set on the task.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365303847", "createdAt": "2020-01-10T15:57:42Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/TaskTranslatorImplTest.java", "diffHunk": "@@ -77,4 +84,48 @@ public void shouldTranslateFhirTaskStatusIntentToOpenmrsTaskStatusIntent() {\n \t\tassertThat(result.getStatus(), equalTo(OPENMRS_TASK_STATUS));\n \t\tassertThat(result.getIntent(), equalTo(OPENMRS_TASK_INTENT));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldTranslateNewOpenmrsTask() {\n+\t\tTask fhirTask = new Task();\n+\t\tfhirTask.setStatus(FHIR_NEW_TASK_STATUS);\n+\t\tfhirTask.setIntent(FHIR_TASK_INTENT);\n+\t\t\n+\t\torg.openmrs.module.fhir2.Task result = taskTranslator.toOpenmrsType(fhirTask);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getStatus(), equalTo(OPENMRS_NEW_TASK_STATUS));\n+\t\tassertThat(result.getUuid(), notNullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldIgnoreUUIDForNewOpenmrsTask() {\n+\t\tTask fhirTask = new Task();\n+\t\tfhirTask.setStatus(FHIR_NEW_TASK_STATUS);\n+\t\tfhirTask.setIntent(FHIR_TASK_INTENT);\n+\t\t\n+\t\tfhirTask.setId(TASK_UUID);\n+\t\t\n+\t\torg.openmrs.module.fhir2.Task result = taskTranslator.toOpenmrsType(fhirTask);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getStatus(), equalTo(OPENMRS_NEW_TASK_STATUS));\n+\t\tassertThat(result.getUuid(), not(equalTo(TASK_UUID)));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldUpdateExistingOpenmrsTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccb13ec6bf74474e8d08b5bc179177238810a9ca"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzc0OTQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwNTozMToxMVrOFckb5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwNTozMToxMVrOFckb5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUwMTQxMg==", "bodyText": "I think this should be UpdateTask instead\nRegardless of using dao.saveTask() the method does update the existing Task", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365501412", "createdAt": "2020-01-11T05:31:11Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -40,9 +40,25 @@ public Task getTaskByUuid(String uuid) {\n \t */\n \t@Override\n \tpublic Task saveTask(Task task) {\n-\t\torg.openmrs.module.fhir2.Task savedOpenmrsTask = dao.saveTask(translator.toOpenmrsType(task));\n+\t\treturn translator.toFhirResource(dao.saveTask(translator.toOpenmrsType(task)));\n+\t}\n+\t\n+\t/**\n+\t * Save task to the DB, or update task if one exists with given UUID\n+\t * \n+\t * @param uuid the uuid of the task to update\n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\t@Override\n+\tpublic Task saveTask(String uuid, Task task) {\n+\t\torg.openmrs.module.fhir2.Task openmrsTask = null;\n \t\t\n-\t\treturn null;\n+\t\tif (uuid != null) {\n+\t\t\topenmrsTask = dao.getTaskByUuid(task.getId());\n+\t\t}\n+\n+\t\treturn translator.toFhirResource(dao.saveTask(translator.toOpenmrsType(openmrsTask, task)));\n \t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "071079c00c5ede7f5ffb176a26a89b93beb517f8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Nzc1MDM3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwNTozNDoxMVrOFckcWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMVQwNTozNDoxMVrOFckcWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTUwMTUzMQ==", "bodyText": "You should also change also here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365501531", "createdAt": "2020-01-11T05:34:11Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirTaskService.java", "diffHunk": "@@ -22,14 +22,21 @@\n \t * @param uuid\n \t * @return task with given internal identifier\n \t */\n-\tpublic Task getTaskByUuid(String uuid);\n+\tTask getTaskByUuid(String uuid);\n \t\n \t/**\n \t * Save task to the DB\n \t * \n \t * @param task the task to save\n \t * @return the saved task\n \t */\n-\tpublic Task saveTask(Task task);\n+\tTask saveTask(Task task);\n \t\n+\t/**\n+\t * Save task to the DB\n+\t * \n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\tTask saveTask(String uuid, Task task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "071079c00c5ede7f5ffb176a26a89b93beb517f8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1ODk1OTU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwNjo1MzozN1rOFcuRzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QwODozNzoyOVrOFcvvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2MjY3MQ==", "bodyText": "Don't  you guys think that maybe we can stick to the same approach being used in openmrs core and openmrs modules where same save method is used for both save and update?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365662671", "createdAt": "2020-01-13T06:53:37Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -40,9 +40,25 @@ public Task getTaskByUuid(String uuid) {\n \t */\n \t@Override\n \tpublic Task saveTask(Task task) {\n-\t\torg.openmrs.module.fhir2.Task savedOpenmrsTask = dao.saveTask(translator.toOpenmrsType(task));\n+\t\treturn translator.toFhirResource(dao.saveTask(translator.toOpenmrsType(task)));\n+\t}\n+\t\n+\t/**\n+\t * Save task to the DB, or update task if one exists with given UUID\n+\t * \n+\t * @param uuid the uuid of the task to update\n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\t@Override\n+\tpublic Task updateTask(String uuid, Task task) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfd554d3e662a48c556fb2efb741cdad85105264"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY4NjUyOA==", "bodyText": "It's okay to have the same save method for saveOrUpdate in the DAO layer. But we should try to distinguish in the service layer. Although it's using the same dao method.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/9#discussion_r365686528", "createdAt": "2020-01-13T08:37:29Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirTaskServiceImpl.java", "diffHunk": "@@ -40,9 +40,25 @@ public Task getTaskByUuid(String uuid) {\n \t */\n \t@Override\n \tpublic Task saveTask(Task task) {\n-\t\torg.openmrs.module.fhir2.Task savedOpenmrsTask = dao.saveTask(translator.toOpenmrsType(task));\n+\t\treturn translator.toFhirResource(dao.saveTask(translator.toOpenmrsType(task)));\n+\t}\n+\t\n+\t/**\n+\t * Save task to the DB, or update task if one exists with given UUID\n+\t * \n+\t * @param uuid the uuid of the task to update\n+\t * @param task the task to save\n+\t * @return the saved task\n+\t */\n+\t@Override\n+\tpublic Task updateTask(String uuid, Task task) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTY2MjY3MQ=="}, "originalCommit": {"oid": "dfd554d3e662a48c556fb2efb741cdad85105264"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1186, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}