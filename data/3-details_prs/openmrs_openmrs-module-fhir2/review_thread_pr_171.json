{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjYxNzEz", "number": 171, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODowMDozMVrOD96Usw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NjoyMlrOD--t7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjQ1Mjk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODowMDozMVrOGXsRNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNTowODoxNlrOGYQhpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTczMw==", "bodyText": "Do we need AtomicReferences here?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/171#discussion_r427495733", "createdAt": "2020-05-19T18:00:31Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -104,4 +115,52 @@ protected String paramToProp(String param) {\n \t\t\n \t\treturn super.paramToProp(param);\n \t}\n+\t\n+\tprivate void handleNames(List<PropParam<?>> params, Criteria criteria) {\n+\t\tAtomicReference<StringAndListParam> name = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4dc9ea45d292ac2b90c0eb5d5d455a6448bebe"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc1OTA3NA==", "bodyText": "Not necessarily, I used it to avoid duplicate alias. That was the first thing I thought of but I think there's a better of handling this.\nThe goal here is to call handleNames(criteria, name, given, family) once in a query to avoid duplicate alias. Alternative is to call it multiple times with different alias each the method is called. Didn't like the query generated. I chose the first option of storing passed in values temporarily.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/171#discussion_r427759074", "createdAt": "2020-05-20T05:59:54Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -104,4 +115,52 @@ protected String paramToProp(String param) {\n \t\t\n \t\treturn super.paramToProp(param);\n \t}\n+\t\n+\tprivate void handleNames(List<PropParam<?>> params, Criteria criteria) {\n+\t\tAtomicReference<StringAndListParam> name = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTczMw=="}, "originalCommit": {"oid": "da4dc9ea45d292ac2b90c0eb5d5d455a6448bebe"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNzc4Mw==", "bodyText": "Doesn't it just make sense to avoid the using the lambdas altogether:\nprivate void handleNames(List<PropParam<?>> params, Criteria criteria) {\n\tStringAndListParam name = null;\n\tStringAndListParam given = null;\n\tStringAndListParam family = null;\n\n\tfor (PropParam<?> param : params) {\n\t\tswitch (param.getPropertyName()) {\n\t\t\tcase FhirConstants.NAME_PROPERTY:\n\t\t\t\tname = (StringAndListParam) param.getParam();\n\t\t\t\tbreak;\n\t\t\tcase FhirConstants.GIVEN_PROPERTY:\n\t\t\t\tgiven = (StringAndListParam) param.getParam();\n\t\t\t\tbreak;\n\t\t\tcase FhirConstants.FAMILY_PROPERTY:\n\t\t\t\tfamily = (StringAndListParam) param.getParam();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\thandleNames(criteria, name, given, family);\n}\nThe for loop is actually marginally more performant and I just don't see the value-added to using the .forEach() function here.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/171#discussion_r428027783", "createdAt": "2020-05-20T13:50:59Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -104,4 +115,52 @@ protected String paramToProp(String param) {\n \t\t\n \t\treturn super.paramToProp(param);\n \t}\n+\t\n+\tprivate void handleNames(List<PropParam<?>> params, Criteria criteria) {\n+\t\tAtomicReference<StringAndListParam> name = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTczMw=="}, "originalCommit": {"oid": "da4dc9ea45d292ac2b90c0eb5d5d455a6448bebe"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4OTc2NA==", "bodyText": "That make sense \u263a\ufe0f", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/171#discussion_r428089764", "createdAt": "2020-05-20T15:08:16Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -104,4 +115,52 @@ protected String paramToProp(String param) {\n \t\t\n \t\treturn super.paramToProp(param);\n \t}\n+\t\n+\tprivate void handleNames(List<PropParam<?>> params, Criteria criteria) {\n+\t\tAtomicReference<StringAndListParam> name = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5NTczMw=="}, "originalCommit": {"oid": "da4dc9ea45d292ac2b90c0eb5d5d455a6448bebe"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzY1MjkyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NDo0MlrOGZaI1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NDo0MlrOGZaI1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5NTgyOA==", "bodyText": "Really minor point, but could we order these city, state, postal code, property (that's roughly ascending order of size (except that postal code probably belong at the front of the list) just to keep things consistent (my main hang-up is making sure \"state\" is before \"country\" since it isn't always obvious to people that \"state\" means state in the sense of \"US state\" or \"Australian state\" rather than \"country\").", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/171#discussion_r429295828", "createdAt": "2020-05-22T14:54:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -104,4 +114,53 @@ protected String paramToProp(String param) {\n \t\t\n \t\treturn super.paramToProp(param);\n \t}\n+\t\n+\tprivate void handleNames(List<PropParam<?>> params, Criteria criteria) {\n+\t\tStringAndListParam name = null;\n+\t\tStringAndListParam given = null;\n+\t\tStringAndListParam family = null;\n+\t\tfor (PropParam<?> param : params) {\n+\t\t\tswitch (param.getPropertyName()) {\n+\t\t\t\tcase FhirConstants.NAME_PROPERTY:\n+\t\t\t\t\tname = (StringAndListParam) param.getParam();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.GIVEN_PROPERTY:\n+\t\t\t\t\tgiven = (StringAndListParam) param.getParam();\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.FAMILY_PROPERTY:\n+\t\t\t\t\tfamily = (StringAndListParam) param.getParam();\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\t\n+\t\thandleNames(criteria, name, given, family);\n+\t}\n+\t\n+\tprivate void handleAddresses(Criteria criteria, Map.Entry<String, List<PropParam<?>>> entry) {\n+\t\tStringAndListParam city = null;\n+\t\tStringAndListParam country = null;\n+\t\tStringAndListParam postalCode = null;\n+\t\tStringAndListParam state = null;\n+\t\tfor (PropParam<?> param : entry.getValue()) {\n+\t\t\tswitch (param.getPropertyName()) {\n+\t\t\t\tcase FhirConstants.CITY_PROPERTY:\n+\t\t\t\t\tcity = ((StringAndListParam) param.getParam());\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.COUNTRY_PROPERTY:\n+\t\t\t\t\tcountry = ((StringAndListParam) param.getParam());\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.POSTAL_CODE_PROPERTY:\n+\t\t\t\t\tpostalCode = ((StringAndListParam) param.getParam());\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.STATE_PROPERTY:\n+\t\t\t\t\tstate = ((StringAndListParam) param.getParam());\n+\t\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2de48a0de038b6cb739fa0b7808e0681809ef30"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzY1ODcxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/PatientFhirResourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NjoyMlrOGZaMiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NjoyMlrOGZaMiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5Njc3Nw==", "bodyText": "I would probably prefer caching the call of results.getResources(0, 1) and reusing that as each time we invoke that, it makes a query to the database and, while it's not a huge deal, I'd like to keep the unit tests as quick as possible so people continue to want to run them.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/171#discussion_r429296777", "createdAt": "2020-05-22T14:56:22Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/PatientFhirResourceProviderTest.java", "diffHunk": "@@ -303,14 +316,15 @@ public void searchForPatients_shouldReturnMatchingBundleOfPatientsByCountry() {\n \t\t        .addAnd(new StringOrListParam().add(new StringParam(COUNTRY)));\n \t\twhen(patientService.searchForPatients(isNull(), isNull(), isNull(), isNull(), isNull(), isNull(), isNull(), isNull(),\n \t\t    isNull(), isNull(), isNull(), argThat(is(countryParam)), isNull()))\n-\t\t            .thenReturn(Collections.singletonList(patient));\n+\t\t            .thenReturn(new BaseFhirIBundleResourceProviderTest<>(Collections.singletonList(patient), 10, 1));\n \t\t\n-\t\tBundle results = resourceProvider.searchPatients(null, null, null, null, null, null, null, null, null, null, null,\n-\t\t    countryParam, null);\n+\t\tIBundleProvider results = resourceProvider.searchPatients(null, null, null, null, null, null, null, null, null, null,\n+\t\t    null, countryParam, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n-\t\tassertThat(results.isResource(), is(true));\n-\t\tassertThat(results.getEntry().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.getResources(0, 1), hasSize(equalTo(1)));\n+\t\tassertThat(results.getResources(0, 1).get(0).fhirType(), is(\"Patient\"));\n+\t\tassertThat(results.getResources(0, 1).get(0).getIdElement().getIdPart(), is(PATIENT_UUID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2de48a0de038b6cb739fa0b7808e0681809ef30"}, "originalPosition": 272}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 887, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}