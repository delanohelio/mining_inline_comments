{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MzA2NTEx", "number": 82, "title": "FM2-61 Add support for Observation.referenceRange", "bodyText": "Description of what I changed\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-61\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit.\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-02-21T14:21:09Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82", "merged": true, "mergeCommit": {"oid": "194c84bd215f18048958bd729b591836986fb8af"}, "closed": true, "closedAt": "2020-02-24T17:04:03Z", "author": {"login": "VaishSiddharth"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGgtsbAFqTM2MjY2ODIxMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHgg9hgBqjMwNjYxNjg3Mjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNjY4MjEy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#pullrequestreview-362668212", "createdAt": "2020-02-21T14:31:14Z", "commit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozMToxNFrOFs4v8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDozNTo1MlrOFs451g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMTQ0Mg==", "bodyText": "This class should have the annotations @Component and @Setter(AccessLevel.PACKAGE). The first of those annotations registers this with Spring so it can be @Injected where appropriate. A little more on that here. The second tells Lombok to generate a setter.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382611442", "createdAt": "2020-02-21T14:31:14Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMTg1NA==", "bodyText": "I think it's preferable for these constants to go in the FhirConstants class.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382611854", "createdAt": "2020-02-21T14:32:02Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjI3Mw==", "bodyText": "Move this line to above 41", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612273", "createdAt": "2020-02-21T14:32:50Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjQzMw==", "bodyText": "Remove this blank line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612433", "createdAt": "2020-02-21T14:33:07Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();\n+\t\t\t\tcodeableConceptCritical.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptCritical);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjY0NQ==", "bodyText": "Add a blank line before this one", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612645", "createdAt": "2020-02-21T14:33:29Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();\n+\t\t\t\tcodeableConceptCritical.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptCritical);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t\t\n+\t\t\t} else if (conceptNumeric.getHiAbsolute() != null || conceptNumeric.getLowAbsolute() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiAbsolute()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowAbsolute()));\n+\t\t\t\tCodeableConcept codeableConceptAbsolute = new CodeableConcept();\n+\t\t\t\tcodeableConceptAbsolute.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptAbsolute);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t}\n+\t\t\treturn observationReferenceRangeComponentList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjc3Mg==", "bodyText": "Add a blank line before this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612772", "createdAt": "2020-02-21T14:33:40Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();\n+\t\t\t\tcodeableConceptCritical.addCoding().setCode(OBSERVATION_REFERENCE_TREATMENT)\n+\t\t\t\t        .setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\t\trangeComponentTreatment.setType(codeableConceptCritical);\n+\t\t\t\tobservationReferenceRangeComponentList.add(rangeComponentTreatment);\n+\t\t\t\t\n+\t\t\t} else if (conceptNumeric.getHiAbsolute() != null || conceptNumeric.getLowAbsolute() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiAbsolute()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowAbsolute()));\n+\t\t\t\tCodeableConcept codeableConceptAbsolute = new CodeableConcept();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjgzNA==", "bodyText": "Add a blank line before this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612834", "createdAt": "2020-02-21T14:33:49Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();\n+\t\t\tcodeableConcept.addCoding().setCode(OBSERVATION_REFERENCE_NORMAL).setSystem(OBSERVATION_REFERENCE_RANGE_URI);\n+\t\t\trangeComponentNormal.setType(codeableConcept);\n+\t\t\tobservationReferenceRangeComponentList.add(rangeComponentNormal);\n+\t\t\t\n+\t\t\tif (conceptNumeric.getHiCritical() != null || conceptNumeric.getLowCritical() != null) {\n+\t\t\t\trangeComponentTreatment.setHigh(new Quantity().setValue(conceptNumeric.getHiCritical()));\n+\t\t\t\trangeComponentTreatment.setLow(new Quantity().setValue(conceptNumeric.getLowCritical()));\n+\t\t\t\tCodeableConcept codeableConceptCritical = new CodeableConcept();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMjkwMg==", "bodyText": "Add a blank line before this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382612902", "createdAt": "2020-02-21T14:33:55Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_RANGE_URI = \"http://terminology.hl7.org/CodeSystem/referencerange-meaning\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_NORMAL = \"normal\";\n+\t\n+\tprivate static final String OBSERVATION_REFERENCE_TREATMENT = \"treatment\";\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentTreatment = new Observation.ObservationReferenceRangeComponent();\n+\t\t\trangeComponentNormal.setHigh(new Quantity().setValue(conceptNumeric.getHiNormal()));\n+\t\t\trangeComponentNormal.setLow(new Quantity().setValue(conceptNumeric.getLowNormal()));\n+\t\t\tCodeableConcept codeableConcept = new CodeableConcept();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzIzOA==", "bodyText": "Remove this blank line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382613238", "createdAt": "2020-02-21T14:34:28Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -89,6 +95,14 @@ public Observation toFhirResource(Obs observation) {\n \t\t\n \t\tobs.addInterpretation(interpretationTranslator.toFhirResource(observation));\n \t\t\n+\t\tif (observation.getValueNumeric() != null) {\n+\t\t\tConcept concept = observation.getConcept();\n+\t\t\tif (concept instanceof ConceptNumeric) {\n+\t\t\t\tobs.setReferenceRange(referenceRangeTranslator.toFhirResource((ConceptNumeric) concept));\n+\t\t\t}\n+\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxMzk3NA==", "bodyText": "We'll need to add a test to this class as well to ensure that it's invoking the referenceRangeTranslator. I think this can be modeled on the test for ObservationInterpretationTranslator", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382613974", "createdAt": "2020-02-21T14:35:52Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImplTest.java", "diffHunk": "@@ -41,6 +41,7 @@\n import org.openmrs.module.fhir2.api.translators.EncounterReferenceTranslator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNjc4OTUy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#pullrequestreview-362678952", "createdAt": "2020-02-21T14:46:16Z", "commit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0NjoxNlrOFs5RMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNDo0NjoxNlrOFs5RMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjYxOTk1NA==", "bodyText": "assertThat(result,\n\t        hasItem(allOf(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE)))),\n\t            hasProperty(\"type\", hasProperty(\"coding\", hasItem(allOf(hasProperty(\"system\", equalTo(\"http://terminology.hl7.org/CodeSystem/referencerange-meaning\")),\n\t                hasProperty(\"code\", equalTo(\"normal\")))))))));\nI forgot that type has a coding property, which is the list of codes themselves which have the system and code properties.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382619954", "createdAt": "2020-02-21T14:46:16Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImplTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.ConceptNumeric;\n+\n+public class ObservationReferenceRangeTranslatorImplTest {\n+\t\n+\tprivate static final Double LOW_NORMAL_VALUE = 1.0;\n+\t\n+\tprivate static final Double HIGH_NORMAL_VALUE = 2.0;\n+\t\n+\tprivate static final Double LOW_ABSOLUTE_VALUE = 3.0;\n+\t\n+\tprivate static final Double HIGH_ABSOLUTE_VALUE = 4.0;\n+\t\n+\tprivate static final Double LOW_CRITICAL_VALUE = 5.0;\n+\t\n+\tprivate static final Double HIGH_CRITICAL_VALUE = 6.0;\n+\t\n+\tprivate ObservationReferenceRangeTranslatorImpl observationReferenceRangeTranslator;\n+\t\n+\tprivate static final String CONCEPT_UUID = \"12345-abcdef-12345\";\n+\t\n+\t@Before\n+\tpublic void setup() {\n+\t\tobservationReferenceRangeTranslator = new ObservationReferenceRangeTranslatorImpl();\n+\t}\n+\t\n+\t@Test\n+\tpublic void toFhirType_shouldMapObservationReferenceRangeToExpected() {\n+\t\t\n+\t\tConceptNumeric conceptNumeric = new ConceptNumeric();\n+\t\tconceptNumeric.setUuid(CONCEPT_UUID);\n+\t\t\n+\t\tconceptNumeric.setLowNormal(LOW_NORMAL_VALUE);\n+\t\tconceptNumeric.setHiNormal(HIGH_NORMAL_VALUE);\n+\t\tconceptNumeric.setLowAbsolute(LOW_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setHiAbsolute(HIGH_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setLowCritical(LOW_CRITICAL_VALUE);\n+\t\tconceptNumeric.setHiCritical(HIGH_CRITICAL_VALUE);\n+\t\t\n+\t\tList<Observation.ObservationReferenceRangeComponent> result = observationReferenceRangeTranslator\n+\t\t        .toFhirResource(conceptNumeric);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result, hasItem(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE))))));\n+\t\tassertThat(result,\n+\t\t    hasItem(hasProperty(\"high\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(HIGH_NORMAL_VALUE))))));\n+\t\t\n+\t\t//    assertThat(result,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe7a2a9399943b88db6a7d03c69ed3297ac6244"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyNzgwMDc2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#pullrequestreview-362780076", "createdAt": "2020-02-21T17:05:17Z", "commit": {"oid": "dcd4f8b19e15d8a60e88b7417f7835f002d03e00"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNToxN1rOFs-Fcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxNzowNToxN1rOFs-Fcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjY5ODg2Ng==", "bodyText": "You've got a lot of repeated code here. It might be better to break this out into a method like this:\nprivate Observation.ObservationReferenceRangeComponent createObservationReferenceRange(double hiValue, double lowValue, String code) {\n    Observation.ObservationReferenceRangeComponent component = new Observation.ObservationReferenceRangeComponent()\n        .setHigh(new Quantity().setValue(hiValue))\n        .setLow(new Quantity().setValue(lowValue));\n\n    CodeableConcept referenceRangeType = new CodeableConcept();\n    concept.addCoding().setCode(code).setSystem(FhirConstants.OBSERVATION_REFERENCE_RANGE_URI);\n    component.setType(codeableConcept);\n    \n    return component;\n}\nYou can then call it like this:\nobservationReferenceRangeComponentList.add(createObservationReferenceRange(conceptNumeric.getHiNormal(), conceptNumeric.getLowNormal(), FhirConstants.OBSERVATION_REFERENCE_NORMAL));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382698866", "createdAt": "2020-02-21T17:05:17Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Observation;\n+import org.hl7.fhir.r4.model.Quantity;\n+import org.openmrs.ConceptNumeric;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ObservationReferenceRangeTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationReferenceRangeTranslatorImpl implements ObservationReferenceRangeTranslator {\n+\t\n+\t@Override\n+\tpublic List<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric conceptNumeric) {\n+\t\tif (conceptNumeric != null) {\n+\t\t\tList<Observation.ObservationReferenceRangeComponent> observationReferenceRangeComponentList = new ArrayList<>();\n+\t\t\tObservation.ObservationReferenceRangeComponent rangeComponentNormal = new Observation.ObservationReferenceRangeComponent();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd4f8b19e15d8a60e88b7417f7835f002d03e00"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDMxMjU0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#pullrequestreview-363031254", "createdAt": "2020-02-22T14:24:48Z", "commit": {"oid": "3c6511e5e7cb569c392d46e827d293c26792a366"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNDoyNDo0OVrOFtLV5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQxNDoyNTozNFrOFtLWIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxNjA2OA==", "bodyText": "Can we swap this out for the other testing style we talked about? I think that\u2019s more maintainable. Also, the checks here make the assertions above redundant (they verify the same thing), so I\u2019d remove the above assertions.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382916068", "createdAt": "2020-02-22T14:24:49Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/translators/impl/ObservationReferenceRangeTranslatorImplTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.allOf;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.ConceptNumeric;\n+\n+public class ObservationReferenceRangeTranslatorImplTest {\n+\t\n+\tprivate static final Double LOW_NORMAL_VALUE = 1.0;\n+\t\n+\tprivate static final Double HIGH_NORMAL_VALUE = 2.0;\n+\t\n+\tprivate static final Double LOW_ABSOLUTE_VALUE = 3.0;\n+\t\n+\tprivate static final Double HIGH_ABSOLUTE_VALUE = 4.0;\n+\t\n+\tprivate static final Double LOW_CRITICAL_VALUE = 5.0;\n+\t\n+\tprivate static final Double HIGH_CRITICAL_VALUE = 6.0;\n+\t\n+\tprivate ObservationReferenceRangeTranslatorImpl observationReferenceRangeTranslator;\n+\t\n+\tprivate static final String CONCEPT_UUID = \"12345-abcdef-12345\";\n+\t\n+\t@Before\n+\tpublic void setup() {\n+\t\tobservationReferenceRangeTranslator = new ObservationReferenceRangeTranslatorImpl();\n+\t}\n+\t\n+\t@Test\n+\tpublic void toFhirType_shouldMapObservationReferenceRangeToExpected() {\n+\t\t\n+\t\tConceptNumeric conceptNumeric = new ConceptNumeric();\n+\t\tconceptNumeric.setUuid(CONCEPT_UUID);\n+\t\t\n+\t\tconceptNumeric.setLowNormal(LOW_NORMAL_VALUE);\n+\t\tconceptNumeric.setHiNormal(HIGH_NORMAL_VALUE);\n+\t\tconceptNumeric.setLowAbsolute(LOW_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setHiAbsolute(HIGH_ABSOLUTE_VALUE);\n+\t\tconceptNumeric.setLowCritical(LOW_CRITICAL_VALUE);\n+\t\tconceptNumeric.setHiCritical(HIGH_CRITICAL_VALUE);\n+\t\t\n+\t\tList<Observation.ObservationReferenceRangeComponent> result = observationReferenceRangeTranslator\n+\t\t        .toFhirResource(conceptNumeric);\n+\t\t\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result, hasItem(hasProperty(\"low\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(LOW_NORMAL_VALUE))))));\n+\t\tassertThat(result,\n+\t\t    hasItem(hasProperty(\"high\", hasProperty(\"value\", equalTo(BigDecimal.valueOf(HIGH_NORMAL_VALUE))))));\n+\t\t\n+\t\tassertThat(result,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6511e5e7cb569c392d46e827d293c26792a366"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjkxNjEzMQ==", "bodyText": "Please remove this blank line", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#discussion_r382916131", "createdAt": "2020-02-22T14:25:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/ObservationReferenceRangeTranslator.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators;\n+\n+import java.util.List;\n+\n+import org.hl7.fhir.r4.model.Observation;\n+import org.openmrs.ConceptNumeric;\n+\n+public interface ObservationReferenceRangeTranslator extends ToFhirTranslator<ConceptNumeric, List<Observation.ObservationReferenceRangeComponent>> {\n+\t\n+\t@Override\n+\tList<Observation.ObservationReferenceRangeComponent> toFhirResource(ConceptNumeric concept);\n+\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6511e5e7cb569c392d46e827d293c26792a366"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDQzODA5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#pullrequestreview-363443809", "createdAt": "2020-02-24T14:49:45Z", "commit": {"oid": "85d1abd816b9c7f136d02c556479d764409bb870"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDU4ODQz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#pullrequestreview-363458843", "createdAt": "2020-02-24T15:08:40Z", "commit": {"oid": "c6a3811b6cd8161fba3a34b6a2d752f48c5e7858"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNDc0MTIw", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/82#pullrequestreview-363474120", "createdAt": "2020-02-24T15:27:38Z", "commit": {"oid": "c6a3811b6cd8161fba3a34b6a2d752f48c5e7858"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6a3811b6cd8161fba3a34b6a2d752f48c5e7858", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c6a3811b6cd8161fba3a34b6a2d752f48c5e7858", "committedDate": "2020-02-24T14:49:56Z", "message": "Merge branch 'master' into FM2-61"}, "afterCommit": {"oid": "468f858b4e70a07cae1c2ae8bcc73a5e56fda197", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/468f858b4e70a07cae1c2ae8bcc73a5e56fda197", "committedDate": "2020-02-24T16:52:25Z", "message": "FM2-61 Add support for Observation.referenceRange"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96dfb5305605cbb5ba56453ba968f8e0e28c0dd3", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/96dfb5305605cbb5ba56453ba968f8e0e28c0dd3", "committedDate": "2020-02-24T16:56:20Z", "message": "FM2-61 Add support for Observation.referenceRange"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "468f858b4e70a07cae1c2ae8bcc73a5e56fda197", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/468f858b4e70a07cae1c2ae8bcc73a5e56fda197", "committedDate": "2020-02-24T16:52:25Z", "message": "FM2-61 Add support for Observation.referenceRange"}, "afterCommit": {"oid": "96dfb5305605cbb5ba56453ba968f8e0e28c0dd3", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/96dfb5305605cbb5ba56453ba968f8e0e28c0dd3", "committedDate": "2020-02-24T16:56:20Z", "message": "FM2-61 Add support for Observation.referenceRange"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4203, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}