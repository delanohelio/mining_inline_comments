{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDQ2OTky", "number": 97, "title": "FM2-83 : Create appropriate search functionality for allergy intolerance resource", "bodyText": "Description of what I changed\nImplemented search by patient reference, allergy category, allergy substance, severity, manifestation/reaction and clinical status\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-83\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit.\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-03-01T13:52:58Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97", "merged": true, "mergeCommit": {"oid": "e9401621a332f58c8d29fac4e5bf47b9bc7a414f"}, "closed": true, "closedAt": "2020-03-09T06:40:27Z", "author": {"login": "jecihjoy"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJcmoIABqjMwODU3MzM1NjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcL4D3GgFqTM3MDk0MDYyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7a309633d8c5b0324fbc0ec75b07e16b2cebed91", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/7a309633d8c5b0324fbc0ec75b07e16b2cebed91", "committedDate": "2020-03-01T13:47:25Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "6055d1cefd24ec99ec12d179927720de83d38bd7", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6055d1cefd24ec99ec12d179927720de83d38bd7", "committedDate": "2020-03-01T17:30:46Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6055d1cefd24ec99ec12d179927720de83d38bd7", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6055d1cefd24ec99ec12d179927720de83d38bd7", "committedDate": "2020-03-01T17:30:46Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "8beea9cdc9c7355d78c31c2ac215a88df3445185", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8beea9cdc9c7355d78c31c2ac215a88df3445185", "committedDate": "2020-03-02T14:15:05Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MzQzMDE0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#pullrequestreview-367343014", "createdAt": "2020-03-02T16:32:17Z", "commit": {"oid": "8beea9cdc9c7355d78c31c2ac215a88df3445185"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMjoxOFrOFwmWZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNjozMzozN1rOFwmZ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNDI5NQ==", "bodyText": "Imported but never used", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r386504295", "createdAt": "2020-03-02T16:32:18Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/impl/FhirAllergyIntoleranceServiceImpl.java", "diffHunk": "@@ -11,8 +11,16 @@\n \n import javax.inject.Inject;\n \n+import java.util.Collection;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8beea9cdc9c7355d78c31c2ac215a88df3445185"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjUwNTE3MQ==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r386505171", "createdAt": "2020-03-02T16:33:37Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -13,15 +13,25 @@\n import javax.validation.constraints.NotNull;\n \n import ca.uhn.fhir.rest.annotation.IdParam;\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n import ca.uhn.fhir.rest.annotation.Read;\n+import ca.uhn.fhir.rest.annotation.Search;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import ca.uhn.fhir.rest.server.IResourceProvider;\n import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8beea9cdc9c7355d78c31c2ac215a88df3445185"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8beea9cdc9c7355d78c31c2ac215a88df3445185", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8beea9cdc9c7355d78c31c2ac215a88df3445185", "committedDate": "2020-03-02T14:15:05Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7", "committedDate": "2020-03-02T18:47:48Z", "message": "FM2-90 : Add ability to search patients using address-country"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTM5NzY5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#pullrequestreview-367939769", "createdAt": "2020-03-03T12:33:29Z", "commit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjozMzoyOVrOFxD8ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMjozMzoyOVrOFxD8ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njk4OTIxOQ==", "bodyText": "Why do you pass statusParam as TokenOrListParam", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r386989219", "createdAt": "2020-03-03T12:33:29Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"cs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleSeverity(Criteria criteria, TokenOrListParam severityParam) {\n+\t\tif (severityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tcriteria.createAlias(\"severity\", \"c\");\n+\t\t\n+\t\treturn handleOrListParam(severityParam, token -> {\n+\t\t\ttry {\n+\t\t\t\tAllergyIntolerance.AllergyIntoleranceSeverity severity = AllergyIntolerance.AllergyIntoleranceSeverity\n+\t\t\t\t        .fromCode(token.getValue());\n+\t\t\t\tswitch (severity) {\n+\t\t\t\t\tcase MILD:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD))));\n+\t\t\t\t\tcase MODERATE:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MODERATE))));\n+\t\t\t\t\tcase SEVERE:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_SEVERE))));\n+\t\t\t\t\tcase NULL:\n+\t\t\t\t\t\treturn Optional.of(eq(\"c.conceptId\",\n+\t\t\t\t\t\t    getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_OTHER))));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (FHIRException ignored) {}\n+\t\t\treturn Optional.empty();\n+\t\t});\n+\t\t\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleAllergenCategory(String propertyName, StringOrListParam categoryParam) {\n+\t\tif (categoryParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleOrListParam(categoryParam, token -> {\n+\t\t\ttry {\n+\t\t\t\tAllergyIntolerance.AllergyIntoleranceCategory category = AllergyIntolerance.AllergyIntoleranceCategory\n+\t\t\t\t        .fromCode(token.getValue());\n+\t\t\t\tswitch (category) {\n+\t\t\t\t\tcase FOOD:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.FOOD));\n+\t\t\t\t\tcase MEDICATION:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.DRUG));\n+\t\t\t\t\tcase ENVIRONMENT:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.ENVIRONMENT));\n+\t\t\t\t\tcase NULL:\n+\t\t\t\t\t\treturn Optional.of(eq(propertyName, AllergenType.OTHER));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (FHIRException ignored) {}\n+\t\t\treturn Optional.empty();\n+\t\t});\n+\t\t\n+\t}\n+\t\n+\tpublic TokenOrListParam createClinicalStatusToken(StringOrListParam statusParam) {\n+\t\tif (statusParam != null && !statusParam.getValuesAsQueryTokens().isEmpty()) {\n+\t\t\tswitch (statusParam.getValuesAsQueryTokens().get(0).getValue()) {\n+\t\t\t\tcase \"active\":\n+\t\t\t\t\treturn new TokenOrListParam().add(\"false\");\n+\t\t\t\tcase \"inactive\":\n+\t\t\t\t\treturn new TokenOrListParam().add(\"true\");\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 175}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3OTc0MTM4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#pullrequestreview-367974138", "createdAt": "2020-03-03T13:26:16Z", "commit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "state": "DISMISSED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzoyNjoxNlrOFxFmmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxMzo0NDo0MFrOFxGPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNjM0Nw==", "bodyText": "clinicalStatus should be a TokenOrListParam. The definitions for the values taken by these parameters can be found here. Note that the difference between a TokenParam and a StringParam is that the TokenParam can contain a system value indicating what value-set the value it encodes represents.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387016347", "createdAt": "2020-03-03T13:26:16Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirAllergyIntoleranceService.java", "diffHunk": "@@ -11,9 +11,18 @@\n \n import javax.validation.constraints.NotNull;\n \n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import org.hl7.fhir.r4.model.AllergyIntolerance;\n \n public interface FhirAllergyIntoleranceService {\n \t\n \tAllergyIntolerance getAllergyIntoleranceByUuid(@NotNull String uuid);\n+\t\n+\tCollection<AllergyIntolerance> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNjUyMA==", "bodyText": "As above for clinicalStatus", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387016520", "createdAt": "2020-03-03T13:26:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "diffHunk": "@@ -11,9 +11,20 @@\n \n import javax.validation.constraints.NotNull;\n \n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import org.hl7.fhir.r4.model.Patient;\n import org.openmrs.Allergy;\n \n public interface FhirAllergyIntoleranceDao {\n \t\n \tAllergy getAllergyIntoleranceByUuid(@NotNull String uuid);\n+\t\n+\tCollection<Allergy> searchForAllergies(@OptionalParam(name = Patient.SP_IDENTIFIER) ReferenceParam patientReference,\n+\t        StringOrListParam category, TokenOrListParam allergen, TokenOrListParam severity,\n+\t        TokenOrListParam manifestationCode, StringOrListParam clinicalStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNjc1Mg==", "bodyText": "@OptionalParam does not belong here, but only on the ResourceProvider.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387016752", "createdAt": "2020-03-03T13:27:02Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "diffHunk": "@@ -11,9 +11,20 @@\n \n import javax.validation.constraints.NotNull;\n \n+import java.util.Collection;\n+\n+import ca.uhn.fhir.rest.annotation.OptionalParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import org.hl7.fhir.r4.model.Patient;\n import org.openmrs.Allergy;\n \n public interface FhirAllergyIntoleranceDao {\n \t\n \tAllergy getAllergyIntoleranceByUuid(@NotNull String uuid);\n+\t\n+\tCollection<Allergy> searchForAllergies(@OptionalParam(name = Patient.SP_IDENTIFIER) ReferenceParam patientReference,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNzUzNA==", "bodyText": "This seems to be creating a join on the codedAllergen.uuid field, which is not going to work.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387017534", "createdAt": "2020-03-03T13:28:35Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxNzg4Nw==", "bodyText": "This seems to be creating a join on the r.reaction.uuid field, which is not going to work.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387017887", "createdAt": "2020-03-03T13:29:05Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAxODQwOA==", "bodyText": "Please add a new line here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387018408", "createdAt": "2020-03-03T13:30:01Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"cs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleSeverity(Criteria criteria, TokenOrListParam severityParam) {\n+\t\tif (severityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tcriteria.createAlias(\"severity\", \"c\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjA3Ng==", "bodyText": "This is a proper way to implement this; however, it is probably preferable to cache the values of the calls to getConceptId(globalPropertyService.getGlobalProperty(...)) outside of the lambda expression. something like this:\nfinal int mildConceptId = getConceptId(globalPropertyService.getGlobalProperty(FhirConstants.GLOBAL_PROPERTY_MILD));\n...\nreturn handleOrListParam(severityParam, token -> {\n    try {\n        AllergyIntolerance.AllergyIntoleranceSeverity severity = AllergyIntolerance.AllergyIntoleranceSeverity\n            .fromCode(token.getValue());\n        \n        switch(servity) {\n             case MILD:\n                 return Optional.of(eq(\"c.conceptId\", mildConceptId));\n             ...\n        }\n    }\n    ...\n});\nThinking about this some more, we should probably create a method on the globalPropertyService called getGlobalProperties(String... properties) that looks something like this:\npublic Collection<String> getGlobalProperties(String... properties) {\n    List<GlobalProperty> globalProperties = (GlobalProperty) sessionFactory.getCurrentSession()\n        .createCriteria(GlobalProperty.class).add(Restrictions.in(\"property\", properties)).list();\n    return globalProperties.stream().filter(p -> p != null).map(GlobalProperty::getPropertyValue).collect(Collectors.toList());\n}\nThen we can use this:\nfinal int[] severityConceptUuids = globalPropertyService.getGlobalProperties(FhirConstants.GLOBAL_PROPERTY_MILD, FhirConstants.GLOBAL_PROPERTY_MODERATE, FhirConstants.GLOBAL_PROPERTY_SEVERE, FhirConstants.GLOBAL_PROPERTY_OTHER);\n...\nreturn handleOrListParam(severityParam, token -> {\n    try {\n        AllergyIntolerance.AllergyIntoleranceSeverity severity = AllergyIntolerance.AllergyIntoleranceSeverity\n            .fromCode(token.getValue());\n        \n        switch(servity) {\n             case MILD:\n                 return Optional.of(eq(\"c.uuid\", severityConceptIds[0]));\n             ...\n        }\n    }\n    ...\n});", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387026076", "createdAt": "2020-03-03T13:43:24Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirAllergyIntoleranceDaoImpl.java", "diffHunk": "@@ -10,28 +10,181 @@\n package org.openmrs.module.fhir2.api.dao.impl;\n \n import static org.hibernate.criterion.Restrictions.eq;\n+import static org.hibernate.criterion.Restrictions.in;\n+import static org.hibernate.criterion.Restrictions.or;\n \n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n import lombok.AccessLevel;\n import lombok.Setter;\n+import org.hibernate.Criteria;\n import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Criterion;\n+import org.hl7.fhir.exceptions.FHIRException;\n+import org.hl7.fhir.r4.model.AllergyIntolerance;\n+import org.openmrs.AllergenType;\n import org.openmrs.Allergy;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirConceptService;\n+import org.openmrs.module.fhir2.api.FhirGlobalPropertyService;\n import org.openmrs.module.fhir2.api.dao.FhirAllergyIntoleranceDao;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirAllergyIntoleranceDaoImpl implements FhirAllergyIntoleranceDao {\n+public class FhirAllergyIntoleranceDaoImpl extends BaseDaoImpl implements FhirAllergyIntoleranceDao {\n \t\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n+\t@Inject\n+\tprivate FhirConceptService conceptService;\n+\t\n+\t@Inject\n+\tprivate FhirGlobalPropertyService globalPropertyService;\n+\t\n \t@Override\n \tpublic Allergy getAllergyIntoleranceByUuid(String uuid) {\n \t\treturn (Allergy) sessionFactory.getCurrentSession().createCriteria(Allergy.class).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Allergy> searchForAllergies(ReferenceParam patientReference, StringOrListParam category,\n+\t        TokenOrListParam allergen, TokenOrListParam severity, TokenOrListParam manifestationCode,\n+\t        StringOrListParam clinicalStatus) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Allergy.class);\n+\t\thandlePatientReference(criteria, patientReference, \"patient\");\n+\t\thandleAllergenCategory(\"allergen.allergenType\", category);\n+\t\thandleAllergen(criteria, allergen);\n+\t\thandleSeverity(criteria, severity).ifPresent(criteria::add);\n+\t\thandleManifestation(criteria, manifestationCode);\n+\t\thandleBoolean(\"voided\", createClinicalStatusToken(clinicalStatus));\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleManifestation(Criteria criteria, TokenOrListParam manifestation) {\n+\t\tif (manifestation == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tcriteria.createAlias(\"reactions\", \"r\");\n+\t\tcriteria.createAlias(\"r.reaction\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(manifestation, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"rs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"rs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"rs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleAllergen(Criteria criteria, TokenOrListParam allergen) {\n+\t\tif (allergen == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"allergen.codedAllergen\", \"c\");\n+\t\t\n+\t\thandleOrListParamBySystem(allergen, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"c.uuid\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cs\")) {\n+\t\t\t\t\tcriteria.createAlias(\"c.uuid\", \"cs\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(or(eq(\"cs.name\", system), in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate Optional<Criterion> handleSeverity(Criteria criteria, TokenOrListParam severityParam) {\n+\t\tif (severityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\tcriteria.createAlias(\"severity\", \"c\");\n+\t\t\n+\t\treturn handleOrListParam(severityParam, token -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjcxMQ==", "bodyText": "TokenOrListParam", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387026711", "createdAt": "2020-03-03T13:44:28Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -47,4 +55,19 @@ public AllergyIntolerance getAllergyIntoleranceByUuid(@IdParam @NotNull IdType i\n \t\t}\n \t\treturn allergy;\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchForAllergies(\n+\t        @OptionalParam(name = AllergyIntolerance.SP_PATIENT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam patientReference,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CATEGORY) StringOrListParam category,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzAyNjgzNQ==", "bodyText": "TokenOrListParam", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#discussion_r387026835", "createdAt": "2020-03-03T13:44:40Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -47,4 +55,19 @@ public AllergyIntolerance getAllergyIntoleranceByUuid(@IdParam @NotNull IdType i\n \t\t}\n \t\treturn allergy;\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchForAllergies(\n+\t        @OptionalParam(name = AllergyIntolerance.SP_PATIENT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam patientReference,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CATEGORY) StringOrListParam category,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CODE) TokenOrListParam allergen,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_SEVERITY) TokenOrListParam severity,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_MANIFESTATION) TokenOrListParam manifestationCode,\n+\t        @OptionalParam(name = AllergyIntolerance.SP_CLINICAL_STATUS) StringOrListParam clinicalStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ef0c6b08f8dda46610f8f8582bc4ca20aeddbac7", "committedDate": "2020-03-02T18:47:48Z", "message": "FM2-90 : Add ability to search patients using address-country"}, "afterCommit": {"oid": "2b3e281559fef9b6cc37eb6c6548bb32727f5f45", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2b3e281559fef9b6cc37eb6c6548bb32727f5f45", "committedDate": "2020-03-04T10:14:37Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b3e281559fef9b6cc37eb6c6548bb32727f5f45", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2b3e281559fef9b6cc37eb6c6548bb32727f5f45", "committedDate": "2020-03-04T10:14:37Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "b6316843cee11580d9bf4dea7c0d7880730c56a9", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b6316843cee11580d9bf4dea7c0d7880730c56a9", "committedDate": "2020-03-04T10:15:36Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NjczMTUw", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#pullrequestreview-368673150", "createdAt": "2020-03-04T10:43:25Z", "commit": {"oid": "b6316843cee11580d9bf4dea7c0d7880730c56a9"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6316843cee11580d9bf4dea7c0d7880730c56a9", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b6316843cee11580d9bf4dea7c0d7880730c56a9", "committedDate": "2020-03-04T10:15:36Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "5e443236a9884bdadb4794a9f312cfa2e55ea5cf", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5e443236a9884bdadb4794a9f312cfa2e55ea5cf", "committedDate": "2020-03-04T10:47:06Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e443236a9884bdadb4794a9f312cfa2e55ea5cf", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5e443236a9884bdadb4794a9f312cfa2e55ea5cf", "committedDate": "2020-03-04T10:47:06Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "cad1a96f66c7fdccf2dd75390e99ab2dd9b11567", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/cad1a96f66c7fdccf2dd75390e99ab2dd9b11567", "committedDate": "2020-03-04T16:59:42Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cad1a96f66c7fdccf2dd75390e99ab2dd9b11567", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/cad1a96f66c7fdccf2dd75390e99ab2dd9b11567", "committedDate": "2020-03-04T16:59:42Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "3021c1b610081db187837ea5aa9ac5bf53424f29", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3021c1b610081db187837ea5aa9ac5bf53424f29", "committedDate": "2020-03-09T06:14:01Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db66eec0bbcdf7f85a557ff5ab5de4b948f30b97", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/db66eec0bbcdf7f85a557ff5ab5de4b948f30b97", "committedDate": "2020-03-09T06:16:52Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3021c1b610081db187837ea5aa9ac5bf53424f29", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3021c1b610081db187837ea5aa9ac5bf53424f29", "committedDate": "2020-03-09T06:14:01Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}, "afterCommit": {"oid": "db66eec0bbcdf7f85a557ff5ab5de4b948f30b97", "author": {"user": {"login": "jecihjoy", "name": "Jacinta Gichuhi"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/db66eec0bbcdf7f85a557ff5ab5de4b948f30b97", "committedDate": "2020-03-09T06:16:52Z", "message": "FM2-83 : Create appropriate search functionality for allergy intolerance resource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwOTQwNjIx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/97#pullrequestreview-370940621", "createdAt": "2020-03-09T06:38:09Z", "commit": {"oid": "db66eec0bbcdf7f85a557ff5ab5de4b948f30b97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4231, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}