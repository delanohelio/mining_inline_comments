{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTk0NjMw", "number": 182, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo0MTo0N1rOD-1YYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjozMDoyM1rOD-16Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjEyODk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo0MTo0N1rOGZLSnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0NzozM1rOGZZ5Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU3NQ==", "bodyText": "You should also add a check for null concept", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429052575", "createdAt": "2020-05-22T05:41:47Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.mappings.ObservationCategoryMap;\n+import org.openmrs.module.fhir2.api.translators.ObservationCategoryTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryTranslatorImpl implements ObservationCategoryTranslator {\n+\t\n+\t@Autowired\n+\tprivate ObservationCategoryMap categoryMap;\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Concept concept) {\n+\t\tString category = categoryMap.getCategory(concept.getConceptClass().getUuid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NDMyOQ==", "bodyText": "Sorry, my bad", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429074329", "createdAt": "2020-05-22T06:55:28Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.mappings.ObservationCategoryMap;\n+import org.openmrs.module.fhir2.api.translators.ObservationCategoryTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryTranslatorImpl implements ObservationCategoryTranslator {\n+\t\n+\t@Autowired\n+\tprivate ObservationCategoryMap categoryMap;\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Concept concept) {\n+\t\tString category = categoryMap.getCategory(concept.getConceptClass().getUuid());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU3NQ=="}, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MTg0Mg==", "bodyText": "This is actually a good point. It's better to have null checks at the point it's used rather than just before it's called.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429291842", "createdAt": "2020-05-22T14:47:33Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.mappings.ObservationCategoryMap;\n+import org.openmrs.module.fhir2.api.translators.ObservationCategoryTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryTranslatorImpl implements ObservationCategoryTranslator {\n+\t\n+\t@Autowired\n+\tprivate ObservationCategoryMap categoryMap;\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Concept concept) {\n+\t\tString category = categoryMap.getCategory(concept.getConceptClass().getUuid());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU3NQ=="}, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE5ODI2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoyMjowOVrOGZL8iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0Nzo0M1rOGZZ5pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzMwNw==", "bodyText": "I think this can be achieved using one loop with two declarations of ImmutableMap.Builder<String, String> builder. One less loop is better", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429063307", "createdAt": "2020-05-22T06:22:09Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tclassDelegate = builder.build();\n+\t\t\t\t\t\n+\t\t\t\t\tbuilder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getKey().toString(), entry.getValue().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tconceptDelegate = builder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MTk0MQ==", "bodyText": "You're absolutely right!", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429291941", "createdAt": "2020-05-22T14:47:43Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tclassDelegate = builder.build();\n+\t\t\t\t\t\n+\t\t\t\t\tbuilder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getKey().toString(), entry.getValue().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tconceptDelegate = builder.build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzMwNw=="}, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjIxNTE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjozMDoyM1rOGZMGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0ODowMlrOGZZ6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NTg1OQ==", "bodyText": "There's a possibility of  entry.getValue().toString() having extra space. You should consider trimming by adding entry.getValue().toString().trim()", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429065859", "createdAt": "2020-05-22T06:30:23Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MjExMQ==", "bodyText": "Thanks Bett! I forgot about that.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429292111", "createdAt": "2020-05-22T14:48:02Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NTg1OQ=="}, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 900, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}