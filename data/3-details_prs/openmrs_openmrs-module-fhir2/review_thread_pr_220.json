{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzE2MjAw", "number": 220, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNjozMjoyMVrOEHAZZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxMTozNFrOEQVd_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzgxOTg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNjozMjoyMVrOGmJl3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0MzozNFrOGmLV-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY1NjIyMw==", "bodyText": "@gitcliff  thanks for working on this, did you try importing org.hl7.fhir.r4 package and see the reaction?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r442656223", "createdAt": "2020-06-19T06:32:21Z", "author": {"login": "sherrif10"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NDkyMg==", "bodyText": "no i dint want to import it while working in r3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r442684922", "createdAt": "2020-06-19T07:43:34Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY1NjIyMw=="}, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Nzc5MzUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDoyMTo1OFrOGpKcgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMTowMzozNlrOGp8gHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTkzOA==", "bodyText": "Could you update this to use the FhirProviderUtils.buildDelete() method for this?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r445815938", "createdAt": "2020-06-25T20:21:58Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0NjAyNQ==", "bodyText": "@ibacher  i have added FhirProviderUtils.buildDelete()\nAbout the the create, delete, and update to the tests for the R3 version of the provider, the Location instance used in the R3 LocationFhirResourceProviderTest class is from org.hl7.fhir.r4.model.Location which brings about incompatibility mis-match in the arguments ie \"**The method updateLocation(org.hl7.fhir.dstu3.model.IdType, org.hl7.fhir.dstu3.model.Location) in the type LocationFhirResourceProvider is not applicable for the arguments (org.hl7.fhir.dstu3.model.IdType, org.hl7.fhir.r4.model.Location)**\"..\nI have tried changing the Location instance in R3 LocationFhirResourceProviderTest to org.hl7.fhir.dstu3.model.Location in order to match the method arguments but it break the existing tests because they use methods defined in org.hl7.fhir.r4.model.Location which are not defined in org.hl7.fhir.dstu3.model.Location", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446146025", "createdAt": "2020-06-26T12:13:03Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTkzOA=="}, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE0Njk4MA==", "bodyText": "the reason as to why the tests work in R4 is because it uses org.hl7.fhir.r4.model.Location location instance", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446146980", "createdAt": "2020-06-26T12:15:21Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTkzOA=="}, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwNDU5Mw==", "bodyText": "@gitcliff So I would use something like this to test the create method for instance:\n@Test\npublic void createLocation_shouldCreateNewLocation() {\n\twhen(locationService.create(any())).thenReturn(location);\n\torg.hl7.fhir.dstu3.model.Location r3Location = Location30_40.convertLocation(location);\n\n\tMethodOutcome result = resourceProvider.createLocation(r3Location);\n\n\tassertThat(result, notNullValue());\n\tassertThat(result.getCreated(), is(true));\n\tassertThat(result.getResource().getIdElement().getIdPart(), equalTo(r3Location.getId()));\n}\nNote that using this did require some surgery. In particular, I needed to change the types in FhirProviderUtils to accept IAnyResource instead of DomainResource, but this should be a fairly harmless change.\nAlso, my create method ended up like this:\n@Create\npublic MethodOutcome createLocation(@ResourceParam Location location) {\n\treturn FhirProviderUtils.buildCreate(Location30_40.convertLocation(locationService.create(Location30_40.convertLocation(location))));\n}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446204593", "createdAt": "2020-06-26T14:04:11Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTkzOA=="}, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzNjA2MQ==", "bodyText": "hello @ibacher thanks for the response above...\ni came up with a test case for the update method like this one\n@Test\n\tpublic void updateLocation_shouldUpdateLocation() {\n\t\t\n\t\twhen(locationService.update(LOCATION_UUID, location)).thenReturn(location);\n\t\t\n\t\torg.hl7.fhir.dstu3.model.Location r3Location = new org.hl7.fhir.dstu3.model.Location();\n\t\tr3Location = Location30_40.convertLocation(location);\n\t\t\n\t\tMethodOutcome result = resourceProvider.updateLocation(new IdType().setValue(LOCATION_UUID), r3Location);\n\t\tassertThat(result, CoreMatchers.notNullValue());\n\t\tassertThat(result.getResource(), equalTo(r3Location));\n\t}\n\t\n\nhowever it fails with this error , i did use IAnyResource instead of DomainResource in FhirProviderUtils not sure what i could be missing here\ncc @corneliouzbett", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446636061", "createdAt": "2020-06-28T11:03:36Z", "author": {"login": "gitcliff"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,38 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgxNTkzOA=="}, "originalCommit": {"oid": "168b52aa24c45c01e20568aa78f913fa4c34a309"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMyMTQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMjoyNFrOGqN-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMjoyNFrOGqN-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMjI4MQ==", "bodyText": "use util method", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446922281", "createdAt": "2020-06-29T12:12:24Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -57,6 +61,39 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic org.hl7.fhir.r4.model.OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn FhirProviderUtils.buildDelete(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMyNTE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMzoyMlrOGqOAcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMzoyMlrOGqOAcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMjg2NA==", "bodyText": "ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446922864", "createdAt": "2020-06-29T12:13:22Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProvider.java", "diffHunk": "@@ -60,6 +68,36 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn location;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(fhirLocationService.create(location));\n+\t}\n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tlocation.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(fhirLocationService.update(id.getIdPart(), location));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = fhirLocationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMyNzQ4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMzo1NlrOGqOB0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxMzo1NlrOGqOB0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzIxOQ==", "bodyText": "look at the name of other methods make it align with them", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446923219", "createdAt": "2020-06-29T12:13:56Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -402,4 +407,64 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateLocation() {\n+\t\tLocation newLocation = location;\n+\t\t\n+\t\twhen(locationService.update(LOCATION_UUID, location)).thenReturn(newLocation);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateLocation(new IdType().setValue(LOCATION_UUID), location);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newLocation));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updateLocation_shouldThrowInvalidRequestExceptionForWrongLocationUuid() {\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, location)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), location);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMyOTA4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDoyMlrOGqOCwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDoyMlrOGqOCwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzQ1OA==", "bodyText": "why can't we use the same location we have", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446923458", "createdAt": "2020-06-29T12:14:22Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -402,4 +407,64 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateLocation() {\n+\t\tLocation newLocation = location;\n+\t\t\n+\t\twhen(locationService.update(LOCATION_UUID, location)).thenReturn(newLocation);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateLocation(new IdType().setValue(LOCATION_UUID), location);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newLocation));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updateLocation_shouldThrowInvalidRequestExceptionForWrongLocationUuid() {\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, location)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), location);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tLocation wrongLocation = new Location();\n+\t\t\n+\t\twrongLocation.setId(WRONG_LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, wrongLocation)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), wrongLocation);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() {\n+\t\tLocation newLocation = new Location();\n+\t\t\n+\t\twhen(locationService.delete(LOCATION_UUID)).thenReturn(newLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTMyOTkzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDozNlrOGqODRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjoxNDozNlrOGqODRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkyMzU5MQ==", "bodyText": "change according to delete operation changes.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r446923591", "createdAt": "2020-06-29T12:14:36Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -402,4 +407,64 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateLocation() {\n+\t\tLocation newLocation = location;\n+\t\t\n+\t\twhen(locationService.update(LOCATION_UUID, location)).thenReturn(newLocation);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.updateLocation(new IdType().setValue(LOCATION_UUID), location);\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(newLocation));\n+\t}\n+\t\n+\t@Test(expected = InvalidRequestException.class)\n+\tpublic void updateLocation_shouldThrowInvalidRequestExceptionForWrongLocationUuid() {\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, location)).thenThrow(InvalidRequestException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), location);\n+\t}\n+\t\n+\t@Test(expected = MethodNotAllowedException.class)\n+\tpublic void updateAllergyShouldThrowMethodNotAllowedIfDoesNotExist() {\n+\t\tLocation wrongLocation = new Location();\n+\t\t\n+\t\twrongLocation.setId(WRONG_LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(WRONG_LOCATION_UUID, wrongLocation)).thenThrow(MethodNotAllowedException.class);\n+\t\t\n+\t\tresourceProvider.updateLocation(new IdType().setValue(WRONG_LOCATION_UUID), wrongLocation);\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() {\n+\t\tLocation newLocation = new Location();\n+\t\t\n+\t\twhen(locationService.delete(LOCATION_UUID)).thenReturn(newLocation);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.OperationOutcome result = resourceProvider\n+\t\t        .deleteLocation(new IdType().setValue(LOCATION_UUID));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getId(), equalTo(LOCATION_UUID));\n+\t}\n+\t\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deleteLocation_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_LOCATION_UUID);\n+\t\torg.hl7.fhir.r4.model.OperationOutcome location = resourceProvider.deleteLocation(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d62e161abbea83ce89b27064f1c0836d2b3b15d"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTE4ODUyOnYy", "diffSide": "RIGHT", "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/LocationWebTest_create.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNTowNFrOGwn_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNTowNFrOGwn_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MDA5OQ==", "bodyText": "Please remove extra spaces. Find this useful throughout the PR.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r453640099", "createdAt": "2020-07-13T13:15:04Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/LocationWebTest_create.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Location\",\n+  \"city\": \"kampala\",\n+  \"country\": \"uganda\",\n+  \"postalCode\": \"9105 PZ\",\n+  \"state\": \"MI\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8c87e624c9f5b5eff47c22afd1095ea17d9238"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTE5NDUyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNjozN1rOGwoDNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoxNjozN1rOGwoDNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0MTAxMg==", "bodyText": "Please rewrite this as FhirProviderUtils.buildDelete(Location30_40.convertLocation(location))", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r453641012", "createdAt": "2020-07-13T13:16:37Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -63,6 +72,35 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn Location30_40.convertLocation(location);\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t\t    locationService.create(Location30_40.convertLocation(location)));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tlocation.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(locationService.update(id.getIdPart(),\n+\t\t    Location30_40.convertLocation(location)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = locationService.delete(id.getIdPart());\n+\t\tif (location == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find location to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(location));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c8c87e624c9f5b5eff47c22afd1095ea17d9238"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQxNjc4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0NjoxNlrOGx-43g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0NjoxNlrOGx-43g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2Mzc3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = fhirLocationService.delete(id.getIdPart());\n          \n          \n            \n            \t\tLocation location = fhirLocationService.delete(id.getIdPart());", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455063774", "createdAt": "2020-07-15T13:46:16Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProvider.java", "diffHunk": "@@ -61,6 +69,33 @@ public Location getLocationById(@IdParam @NotNull IdType id) {\n \t\treturn location;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createLocation(@ResourceParam Location location) {\n+\t\treturn FhirProviderUtils.buildCreate(fhirLocationService.create(location));\n+\t}\n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateLocation(@IdParam IdType id, @ResourceParam Location location) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tlocation.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(fhirLocationService.update(id.getIdPart(), location));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteLocation(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Location location = fhirLocationService.delete(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQxODQ1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0NjozNVrOGx-5yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0NjozNVrOGx-5yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NDAxMQ==", "bodyText": "Please remove this test", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455064011", "createdAt": "2020-07-15T13:46:35Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -449,4 +456,69 @@ public void getLocationHistoryByWithWrongId_shouldThrowResourceNotFoundException\n \tprivate List<IBaseResource> get(IBundleProvider results) {\n \t\treturn results.getResources(START_INDEX, END_INDEX);\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateNewLocation() {\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMethodOutcome result = resourceProvider.createLocation(Location30_40.convertLocation(location));\n+\t\tassertThat(result, CoreMatchers.notNullValue());\n+\t\tassertThat(result.getCreated(), is(true));\n+\t\tassertThat(result.getResource(), CoreMatchers.equalTo(location));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() {\n+\t\t\n+\t\twhen(locationService.delete(LOCATION_UUID)).thenReturn(location);\n+\t\t\n+\t\tOperationOutcome result = resourceProvider.deleteLocation(new IdType().setValue(LOCATION_UUID));\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(result.getIssue(), notNullValue());\n+\t\tassertThat(result.getIssueFirstRep().getSeverity(), equalTo(OperationOutcome.IssueSeverity.INFORMATION));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getCode(), equalTo(\"MSG_DELETED\"));\n+\t\tassertThat(result.getIssueFirstRep().getDetails().getCodingFirstRep().getDisplay(),\n+\t\t    equalTo(\"This resource has been deleted\"));\n+\t}\n+\t\n+\t@Test(expected = ResourceNotFoundException.class)\n+\tpublic void deleteLocation_shouldThrowResourceNotFoundException() {\n+\t\tIdType id = new IdType();\n+\t\tid.setValue(WRONG_LOCATION_UUID);\n+\t\tOperationOutcome location = resourceProvider.deleteLocation(id);\n+\t\tassertThat(location, nullValue());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQyMzY2OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0Nzo0OFrOGx-9SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0Nzo0OFrOGx-9SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NDkwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455064905", "createdAt": "2020-07-15T13:47:48Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQyNDY1OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODowMVrOGx-93g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODowMVrOGx-93g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTA1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForIdMisMatch() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065054", "createdAt": "2020-07-15T13:48:01Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQyNjM3OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODoyMFrOGx--7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODoyMFrOGx--7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTMyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \t\tLocation location = new Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065324", "createdAt": "2020-07-15T13:48:20Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQyNzIxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODoyN1rOGx-_XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODoyN1rOGx-_XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTQzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n          \n          \n            \n            \t\twhen(locationService.create(any(Location.class))).thenReturn(location);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065437", "createdAt": "2020-07-15T13:48:27Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQyODAwOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODozOFrOGx-_3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODozOFrOGx-_3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \t\tLocation location = new Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065564", "createdAt": "2020-07-15T13:48:38Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQyODczOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODo0NlrOGx_ATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODo0NlrOGx_ATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n          \n          \n            \n            \t\twhen(locationService.update(anyString(), any(Location.class))).thenReturn(location);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065678", "createdAt": "2020-07-15T13:48:46Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQyOTY4OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODo1N1rOGx_A5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0ODo1N1rOGx_A5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTgzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065831", "createdAt": "2020-07-15T13:48:57Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQzMDI5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0OTowNlrOGx_BQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0OTowNlrOGx_BQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NTkyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updateLocation_shouldThrowErrorForIdMisMatch() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455065923", "createdAt": "2020-07-15T13:49:06Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQzMTQzOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0OToxOFrOGx_B4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo0OToxOFrOGx_B4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NjA4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \t\tLocation location = new Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455066083", "createdAt": "2020-07-15T13:49:18Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQzNTU2OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDowM1rOGx_EWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDowM1rOGx_EWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NjcxMw==", "bodyText": "Please remove these lines", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455066713", "createdAt": "2020-07-15T13:50:03Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,90 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQzODIxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDozNFrOGx_F9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDozNFrOGx_F9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NzEyNw==", "bodyText": "Please remove these lines", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455067127", "createdAt": "2020-07-15T13:50:34Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODQ0MDE5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/LocationWebTest_UpdateWithWrongId.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDo1OFrOGx_HIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMzo1MDo1OFrOGx_HIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA2NzQyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            \n          \n          \n            \n             \n          \n          \n            \n            }", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455067426", "createdAt": "2020-07-15T13:50:58Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/LocationWebTest_UpdateWithWrongId.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+  \"resourceType\": \"Location\",\n+  \"id\": \"a0938123-1691-11df-97a5-7038c432aabc\",\n+  \"city\": \"kampalaa\",\n+  \"country\": \"uganda\",\n+  \"postalCode\": \"9105 PZ\",\n+  \"state\": \"MI\"\n+}\n+\n+ ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af88d57a55dfef528cd775431669997c9b72acc0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTcxNjk4OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1NjozNlrOGyLpew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1NjozNlrOGyLpew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3MjgyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tOperationOutcome retVal = new OperationOutcome();\n          \n          \n            \n            \t\tretVal.setId(LOCATION_UUID);\n          \n          \n            \n            \t\tretVal.getText().setDivAsString(\"Deleted successfully\");", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455272827", "createdAt": "2020-07-15T18:56:36Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,87 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673ee1cedf30a2ac423a060682e24bf884f208f3"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTcxODczOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1NzowOVrOGyLqpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODo1NzowOVrOGyLqpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI3MzEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tOperationOutcome retVal = new OperationOutcome();\n          \n          \n            \n            \t\tretVal.setId(LOCATION_UUID);\n          \n          \n            \n            \t\tretVal.getText().setDivAsString(\"Deleted successfully\");", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r455273126", "createdAt": "2020-07-15T18:57:09Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -441,4 +456,89 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tLocation location = new Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tLocation location = new Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(LOCATION_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "673ee1cedf30a2ac423a060682e24bf884f208f3"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTY0NDE0OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxMTozNFrOG0brFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOToxMTozNFrOG0brFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzYzMjUzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n          \n          \n            \n            \t\t\n          \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n          \n          \n            \n            \tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n          \n          \n            \n            \t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/220#discussion_r457632535", "createdAt": "2020-07-20T19:11:34Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -421,4 +437,84 @@ private void verifyURI(String uri) throws Exception {\n \t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n \t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n \t}\n+\t\n+\t@Ignore\n+\t@Test\n+\tpublic void createLocation_shouldCreateLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.create(any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Location\").jsonContent(jsonLocation).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldUpdateExistingLocation() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\t\n+\t\twhen(locationService.update(anyString(), any(org.hl7.fhir.r4.model.Location.class))).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForNoId() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateLocation_shouldThrowErrorForIdMissMatch() throws Exception {\n+\t\tString jsonLocation;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_LOCATION_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonLocation = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\tMockHttpServletResponse response = put(\"/Location/\" + WRONG_LOCATION_UUID).jsonContent(jsonLocation)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteLocation_shouldDeleteLocation() throws Exception {\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Location location = new org.hl7.fhir.r4.model.Location();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5da46ff51cce3c8288728798e15add828c88a4c2"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 967, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}