{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUxMTQ2OTkw", "number": 259, "title": "FM2-246: Add search for _include using Location:partof", "bodyText": "Description of what I changed\n\n\nAdd search for _include using Location:partof\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-246\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-07-17T14:03:21Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/259", "merged": true, "mergeCommit": {"oid": "0de7afa4681b5abb695767aff328e3c705841ef8"}, "closed": true, "closedAt": "2020-07-31T12:52:50Z", "author": {"login": "varung-31"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3GxiFgFqTQ1MjQ3OTA2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6TtmzAFqTQ1OTE0ODQ5Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDc5MDYy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/259#pullrequestreview-452479062", "createdAt": "2020-07-21T13:52:29Z", "commit": {"oid": "731e4f1013adae4b7269f8920195fa662d4bc126"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo1MjoyOVrOG05BuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDowNToyNFrOG05oCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExMzQ2NA==", "bodyText": "This could be \"Location:\" + Location.SP_PARTOF. Also I don't love following the convention of theIncludes. HAPI seems to use this convention so that they can unambiguously write:\nmyIncludes = theIncludes;\nBut this isn't generally what code in OpenMRS looks like. I would just call them includes.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/259#discussion_r458113464", "createdAt": "2020-07-21T13:52:29Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/LocationFhirResourceProvider.java", "diffHunk": "@@ -84,8 +88,13 @@ public IBundleProvider searchLocations(@OptionalParam(name = Location.SP_NAME) S\n \t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n \t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceAndListParam parent,\n \t        @OptionalParam(name = Location.SP_RES_ID) TokenAndListParam id,\n-\t        @OptionalParam(name = \"_lastUpdated\") DateRangeParam lastUpdated, @Sort SortSpec sort) {\n+\t        @OptionalParam(name = \"_lastUpdated\") DateRangeParam lastUpdated,\n+\t        @IncludeParam(allow = \"Location:partof\") HashSet<Include> theIncludes, @Sort SortSpec sort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731e4f1013adae4b7269f8920195fa662d4bc126"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMjI0NQ==", "bodyText": "This seems unnecessarily verbose. Couldn't this whole thing be simplified to something like:\nprivate static Set<Location> handlePartofInclude(List<Location> locations) {\n\tresourceList.stream().map(Location::getPartOf).filter(Objects::nonNull).map(ref -> getIdFromReference(ref)).collect(Collectors.toSet());\n}\n\nI.e., do we actually need a setup similar to what we do for searching (where the point is to be able to combine a series of operations to produce a single Criteria object for running the query) or can we get away with something much simpler?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/259#discussion_r458122245", "createdAt": "2020-07-21T14:04:04Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/search/SearchQueryIncludeImpl.java", "diffHunk": "@@ -11,23 +11,71 @@\n \n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n \n+import ca.uhn.fhir.model.api.Include;\n import lombok.NoArgsConstructor;\n import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Location;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirLocationService;\n+import org.openmrs.module.fhir2.api.search.param.PropParam;\n import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.CollectionUtils;\n \n @Component\n @NoArgsConstructor\n public class SearchQueryIncludeImpl<U extends IBaseResource> implements SearchQueryInclude<U> {\n \t\n+\t@Autowired\n+\tprivate FhirLocationService locationService;\n+\t\n \t@Override\n+\t@SuppressWarnings(\"unchecked\")\n \tpublic Set<IBaseResource> getIncludedResources(List<U> resourceList, SearchParameterMap theParams) {\n \t\tSet<IBaseResource> includedResourcesSet = new HashSet<>();\n \t\t\n-\t\t// TODO -> Add implementation to compute the included resources\n+\t\tList<PropParam<?>> includeParamList = theParams.getParameters(FhirConstants.INCLUDE_SEARCH_HANDLER);\n+\t\t\n+\t\tif (CollectionUtils.isEmpty(includeParamList)) {\n+\t\t\treturn includedResourcesSet;\n+\t\t}\n+\t\t\n+\t\tSet<Include> includeSet = (HashSet<Include>) includeParamList.get(0).getParam();\n+\t\tincludeSet.forEach(includeParam -> {\n+\t\t\tswitch (includeParam.getParamName()) {\n+\t\t\t\tcase FhirConstants.INCLUDE_PART_OF_PARAM:\n+\t\t\t\t\tincludedResourcesSet.addAll(handlePartofInclude(resourceList, includeParam.getParamType()));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t\t\n \t\treturn includedResourcesSet;\n \t}\n+\t\n+\tprivate Set<IBaseResource> handlePartofInclude(List<U> resourceList, String paramType) {\n+\t\tSet<IBaseResource> includedResources = new HashSet<>();\n+\t\tSet<String> uniqueParentLocationUUIDs = new HashSet<>();\n+\t\t\n+\t\tswitch (paramType) {\n+\t\t\tcase FhirConstants.LOCATION:\n+\t\t\t\tresourceList.forEach(\n+\t\t\t\t    resource -> uniqueParentLocationUUIDs.add(getIdFromReference(((Location) resource).getPartOf())));\n+\t\t\t\t\n+\t\t\t\tuniqueParentLocationUUIDs.removeIf(Objects::isNull);\n+\t\t\t\tincludedResources.addAll(locationService.get(uniqueParentLocationUUIDs));\n+\t\t\t\tbreak;\n+\t\t}\n+\t\t\n+\t\treturn includedResources;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731e4f1013adae4b7269f8920195fa662d4bc126"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyMzI3NQ==", "bodyText": "Does this need to take a set? Could we instead support a list, array, or even generic collection?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/259#discussion_r458123275", "createdAt": "2020-07-21T14:05:24Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirService.java", "diffHunk": "@@ -11,12 +11,17 @@\n \n import javax.validation.constraints.NotNull;\n \n+import java.util.List;\n+import java.util.Set;\n+\n import org.hl7.fhir.instance.model.api.IAnyResource;\n \n public interface FhirService<T extends IAnyResource> {\n \t\n \tT get(@NotNull String uuid);\n \t\n+\tList<T> get(@NotNull Set<String> distinctUUIDs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731e4f1013adae4b7269f8920195fa662d4bc126"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de7afa4681b5abb695767aff328e3c705841ef8", "author": {"user": {"login": "varung-31", "name": "Varun Gupta"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0de7afa4681b5abb695767aff328e3c705841ef8", "committedDate": "2020-07-21T19:02:10Z", "message": "FM2-246: Add search for _include using Location:partof"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "731e4f1013adae4b7269f8920195fa662d4bc126", "author": {"user": {"login": "varung-31", "name": "Varun Gupta"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/731e4f1013adae4b7269f8920195fa662d4bc126", "committedDate": "2020-07-17T13:26:25Z", "message": "FM2-246: Add search for _include using Location:partof"}, "afterCommit": {"oid": "0de7afa4681b5abb695767aff328e3c705841ef8", "author": {"user": {"login": "varung-31", "name": "Varun Gupta"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0de7afa4681b5abb695767aff328e3c705841ef8", "committedDate": "2020-07-21T19:02:10Z", "message": "FM2-246: Add search for _include using Location:partof"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTQ4NDkz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/259#pullrequestreview-459148493", "createdAt": "2020-07-31T12:51:42Z", "commit": {"oid": "0de7afa4681b5abb695767aff328e3c705841ef8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4162, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}