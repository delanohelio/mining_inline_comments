{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDEwMjE5", "number": 57, "title": "Improve ability to generate complex queries", "bodyText": "FHIR Search provides rather complex ways of querying the database. This is where we start to need the Dao infrastructure we've been building into the module: to not only interact with the OpenMRS API, but to provide us a way to answer FHIR searches as efficiently as possible.\nHibernate's CriteriaQuery API gives us the flexibility to dynamically add conditions to create a full query, which is useful for doing this kind of translation work.\nThe purpose of this draft PR is to show a vision for what this might look like and get some feedback from our active developers (or anyone else in the community who is interested). Please take a look, especially at this branches implementation of FhirObservationDaoImpl#handleCodedConcept and compare it to the current one committed to this repo.\nIs it clear what that method does? Is the code easy to read and understand or is the previous version easier?\nThe queries both versions generate are mostly equivalent. If you want to see the actual queries generated, pick a test case (the FhirObservationDaoImplTest#searchForObs_shouldHandleComplexQuery() test is a good exercise of this) and at the start of the test case add:\norg.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(\"org.hibernate.SQL\");\nlogger.setLevel(org.apache.log4j.Level.ALL);\nRun just that test case in the usual way and you should see the generated query in the output. Note that this query will have ? to indicate where parameter values are being supplied by code.\nPlease let me know what you think via comments on this or a review.\nThanks!\n@jecihjoy  @pmanko", "createdAt": "2020-02-07T13:24:54Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57", "merged": true, "mergeCommit": {"oid": "c837e2849e1794b84d84b1efdffd9822e62b3830"}, "closed": true, "closedAt": "2020-02-20T06:59:30Z", "author": {"login": "ibacher"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC9idrgFqTM1NTg5NjI2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGFkfwgFqTM2MTY2ODY0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODk2MjY3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57#pullrequestreview-355896267", "createdAt": "2020-02-10T12:25:03Z", "commit": {"oid": "5a2ddbefa7551a2bda190c46d4bf2c6560eff842"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNTowM1rOFnkLjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNTowM1rOFnkLjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTU2Nw==", "bodyText": "Why can't we have this in the BaseDaoImpl so that we override", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57#discussion_r377031567", "createdAt": "2020-02-10T12:25:03Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -89,4 +101,115 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\treturn sessionFactory.getCurrentSession().createCriteria(Patient.class).createAlias(\"names\", \"names\")\n \t\t        .add(ilike(\"names.familyName\", family, MatchMode.START)).list();\n \t}\n+\n+\t@Override\n+\tpublic Collection<Patient> searchForPatients(StringOrListParam name, StringOrListParam given, StringOrListParam family,\n+\t\t\tTokenOrListParam identifier, TokenOrListParam gender, DateRangeParam birthDate, DateRangeParam deathDate,\n+\t\t\tTokenOrListParam deceased, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode,\n+\t\t\tSortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Patient.class);\n+\n+\t\thandleNames(criteria, name, given, family);\n+\t\thandleIdentifier(criteria, identifier);\n+\t\thandleGender(\"gender\", gender).ifPresent(criteria::add);\n+\t\thandleDateRange(\"birthdate\", birthDate).ifPresent(criteria::add);\n+\t\thandleDateRange(\"deathdate\", deathDate).ifPresent(criteria::add);\n+\t\thandleBoolean(\"dead\", deceased).ifPresent(criteria::add);\n+\t\thandleAddress(criteria, city, state, postalCode);\n+\t\thandleSort(criteria, sort, this::paramToProp);\n+\n+\t\treturn criteria.list();\n+\t}\n+\n+\tprivate void handleAddress(Criteria criteria, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode) {\n+\t\tif (city == null && state == null && postalCode == null) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\tprivate void handleIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"identifiers\", \"pi\");\n+\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n+\t\tcriteria.add(eq(\"pi.retired\", false));\n+\n+\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\tList<TokenParam> paramList = identifier.getValuesAsQueryTokens();\n+\n+\t\tString previousSystem = null;\n+\t\tList<String> codes = new ArrayList<>();\n+\t\tfor (TokenParam coding : paramList) {\n+\t\t\tif (coding.getSystem() != null) {\n+\t\t\t\tif (!coding.getSystem().equals(previousSystem)) {\n+\t\t\t\t\tif (codes.size() > 0) {\n+\t\t\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t\t\t\tcodes.clear();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tpreviousSystem = coding.getSystem();\n+\t\t\t\t}\n+\n+\t\t\t\tcodes.add(coding.getValue());\n+\t\t\t} else {\n+\t\t\t\tcriterionList.add(eq(\"pi.identifier\", coding.getValue()));\n+\t\t\t}\n+\n+\t\t\tif (codes.size() > 0) {\n+\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t}\n+\t\t}\n+\n+\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t}\n+\n+\tprivate void handleNames(Criteria criteria, StringOrListParam name, StringOrListParam given, StringOrListParam family) {\n+\t\tif (name == null && given == null && family == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"names\", \"pn\");\n+\n+\t\tif (name != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam nameParam : name.getValuesAsQueryTokens()) {\n+\t\t\t\tfor (String token : StringUtils.split(nameParam.getValue(), \" \\t,\")) {\n+\t\t\t\t\tStringParam tokenParam = new StringParam().setValue(token).setExact(nameParam.isExact()).setContains(nameParam.isContains());\n+\t\t\t\t\tpropertyLike(\"pn.givenName\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.middle\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.family\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (given != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam givenName : given.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.givenName\", givenName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (family != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam familyName : family.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.familyName\", familyName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\t}\n+\n+\tprivate String paramToProp(String paramName) {\n+\t\treturn null;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2ddbefa7551a2bda190c46d4bf2c6560eff842"}, "originalPosition": 153}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a2ddbefa7551a2bda190c46d4bf2c6560eff842", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5a2ddbefa7551a2bda190c46d4bf2c6560eff842", "committedDate": "2020-02-07T13:10:42Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "0f1cbd3c35e0e7dc9e18d1477a5d06ffc7524169", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0f1cbd3c35e0e7dc9e18d1477a5d06ffc7524169", "committedDate": "2020-02-10T15:33:50Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f1cbd3c35e0e7dc9e18d1477a5d06ffc7524169", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/0f1cbd3c35e0e7dc9e18d1477a5d06ffc7524169", "committedDate": "2020-02-10T15:33:50Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "8fae2bfe1bb4f36141dded2f9150de7afe2733c6", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8fae2bfe1bb4f36141dded2f9150de7afe2733c6", "committedDate": "2020-02-10T15:34:35Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fae2bfe1bb4f36141dded2f9150de7afe2733c6", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8fae2bfe1bb4f36141dded2f9150de7afe2733c6", "committedDate": "2020-02-10T15:34:35Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "efafe44164e619cf65be6f9be3b93150e687bbd0", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/efafe44164e619cf65be6f9be3b93150e687bbd0", "committedDate": "2020-02-10T19:10:01Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efafe44164e619cf65be6f9be3b93150e687bbd0", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/efafe44164e619cf65be6f9be3b93150e687bbd0", "committedDate": "2020-02-10T19:10:01Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "e72960d4fe0fb6777f5555d433063c6ddda1b7d7", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e72960d4fe0fb6777f5555d433063c6ddda1b7d7", "committedDate": "2020-02-10T19:31:00Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e72960d4fe0fb6777f5555d433063c6ddda1b7d7", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e72960d4fe0fb6777f5555d433063c6ddda1b7d7", "committedDate": "2020-02-10T19:31:00Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "6441c824539dab71170b9225965033d6d5f7f24d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6441c824539dab71170b9225965033d6d5f7f24d", "committedDate": "2020-02-17T17:02:58Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6441c824539dab71170b9225965033d6d5f7f24d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6441c824539dab71170b9225965033d6d5f7f24d", "committedDate": "2020-02-17T17:02:58Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "4cc0eb7444ffd810c07b70deb2460fc541f133b7", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4cc0eb7444ffd810c07b70deb2460fc541f133b7", "committedDate": "2020-02-17T17:46:59Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4cc0eb7444ffd810c07b70deb2460fc541f133b7", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4cc0eb7444ffd810c07b70deb2460fc541f133b7", "committedDate": "2020-02-17T17:46:59Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "6969878148292a0c0d4bf1170aff298cc11db886", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6969878148292a0c0d4bf1170aff298cc11db886", "committedDate": "2020-02-17T19:35:45Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6969878148292a0c0d4bf1170aff298cc11db886", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6969878148292a0c0d4bf1170aff298cc11db886", "committedDate": "2020-02-17T19:35:45Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "efdf84f9d24ed06bb34e06aa0fa120bb631d95b9", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/efdf84f9d24ed06bb34e06aa0fa120bb631d95b9", "committedDate": "2020-02-17T19:57:50Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "efdf84f9d24ed06bb34e06aa0fa120bb631d95b9", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/efdf84f9d24ed06bb34e06aa0fa120bb631d95b9", "committedDate": "2020-02-17T19:57:50Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "080a2411bfb69da08bea0f2f8a601a3f9fdc1622", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/080a2411bfb69da08bea0f2f8a601a3f9fdc1622", "committedDate": "2020-02-17T20:05:37Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "080a2411bfb69da08bea0f2f8a601a3f9fdc1622", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/080a2411bfb69da08bea0f2f8a601a3f9fdc1622", "committedDate": "2020-02-17T20:05:37Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "1c29ac820ddce8ba3f411a8e5e71d6fff4882287", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1c29ac820ddce8ba3f411a8e5e71d6fff4882287", "committedDate": "2020-02-18T14:04:47Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1a4b7160cfcb6a0f965b311b06434b5101a2eb2", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f1a4b7160cfcb6a0f965b311b06434b5101a2eb2", "committedDate": "2020-02-19T14:19:49Z", "message": "Merge branch 'master' into improve_query_generation"}, "afterCommit": {"oid": "835fd774d28068e97bf57d17f52db0abe8589949", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/835fd774d28068e97bf57d17f52db0abe8589949", "committedDate": "2020-02-19T15:23:15Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdba261dd03350a6e8e1bc39077f8adc417d54d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2bdba261dd03350a6e8e1bc39077f8adc417d54d", "committedDate": "2020-02-19T19:50:34Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "835fd774d28068e97bf57d17f52db0abe8589949", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/835fd774d28068e97bf57d17f52db0abe8589949", "committedDate": "2020-02-19T15:23:15Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}, "afterCommit": {"oid": "2bdba261dd03350a6e8e1bc39077f8adc417d54d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2bdba261dd03350a6e8e1bc39077f8adc417d54d", "committedDate": "2020-02-19T19:50:34Z", "message": "Refactoring and additional methods to make it easier to generate\ncomplex queries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjY4NjQ2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57#pullrequestreview-361668646", "createdAt": "2020-02-20T06:59:01Z", "commit": {"oid": "2bdba261dd03350a6e8e1bc39077f8adc417d54d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4391, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}