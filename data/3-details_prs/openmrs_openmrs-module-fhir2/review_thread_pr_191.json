{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MTEwNjQ3", "number": 191, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo1MjoxNFrOEBp3WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo1MjoxNFrOEBp3WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTY5OTQ1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/LocationSearchQueryImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODo1MjoxNFrOGdoQVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMzo0NFrOGegIuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyMTQzMA==", "bodyText": "The method get(IBundleProvider results) makes a database request, calling it twice that's two database requests. We can optimize this to only one DB request.\nThis is how;\nList<IBaseResource> locations = get(search(theParams));\nassertThat(locations, notNullValue());\nassertThat(locations.size(), equalTo(1));\nassertThat(((Location) locations.iterator().next()).getName(), equalTo(LOCATION_NAME));\nActually I made the same mistake \ud83e\udd26\ud83c\udffe\u200d\u2642\ufe0f in observation resource, sorry my bad.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/191#discussion_r433721430", "createdAt": "2020-06-02T08:52:14Z", "author": {"login": "corneliouzbett"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/LocationSearchQueryImplTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.search;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortOrderEnum;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.ReferenceOrListParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringAndListParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Location;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.TestFhirSpringConfiguration;\n+import org.openmrs.module.fhir2.api.dao.FhirLocationDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.module.fhir2.api.translators.LocationTranslator;\n+import org.openmrs.test.BaseModuleContextSensitiveTest;\n+import org.openmrs.test.SkipBaseSetup;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+@SkipBaseSetup\n+@ContextConfiguration(classes = TestFhirSpringConfiguration.class, inheritLocations = false)\n+public class LocationSearchQueryImplTest extends BaseModuleContextSensitiveTest {\n+\t\n+\tpublic static final String LOCATION_UUID = \"c0938432-1691-11df-2222-8038u432aabd\";\n+\t\n+\tprivate static final String LOCATION_NAME = \"Test location 7\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_NAME = \"Location2\";\n+\t\n+\tprivate static final String LOCATION_CITY = \"Artuor\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_CITY = \"ArtuorA\";\n+\t\n+\tprivate static final String LOCATION_COUNTRY = \"Kenya\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_COUNTRY = \"KenyaA\";\n+\t\n+\tprivate static final String POSTAL_CODE = \"4069-3100\";\n+\t\n+\tprivate static final String UNKNOWN_POSTAL_CODE = \"4015-3100\";\n+\t\n+\tprivate static final String LOCATION_STATE = \"province\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_STATE = \"province state\";\n+\t\n+\tprivate static final String LOGIN_LOCATION_TAG_NAME = \"login\";\n+\t\n+\tprivate static final String LOCATION_PARENT_CITY = \"Artuor\";\n+\t\n+\tprivate static final String LOCATION_PARENT_COUNTRY = \"Kenya\";\n+\t\n+\tprivate static final String LOCATION_PARENT_POSTAL_CODE = \"4069-3100\";\n+\t\n+\tprivate static final String LOCATION_PARENT_STATE = \"province\";\n+\t\n+\tprivate static final String LOCATION_PARENT_ID = \"c0938432-1691-11df-2222-7038c432aabd\";\n+\t\n+\tprivate static final String LOCATION_PARENT_NAME = \"Test location 5\";\n+\t\n+\tprivate static final String LOCATION_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest_initial_data.xml\";\n+\t\n+\t@Autowired\n+\tprivate FhirLocationDao fhirLocationDao;\n+\t\n+\t@Autowired\n+\tprivate LocationTranslator translator;\n+\t\n+\t@Autowired\n+\tSearchQuery<org.openmrs.Location, Location, FhirLocationDao, LocationTranslator> searchQuery;\n+\t\n+\tprivate static final int START_INDEX = 0;\n+\t\n+\tprivate static final int END_INDEX = 10;\n+\t\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\texecuteDataSet(INITIAL_XML_DATASET_PACKAGE_PATH);\n+\t\texecuteDataSet(LOCATION_INITIAL_DATA_XML);\n+\t}\n+\t\n+\tprivate IBundleProvider search(SearchParameterMap theParams) {\n+\t\treturn searchQuery.getQueryResults(theParams, fhirLocationDao, translator);\n+\t}\n+\t\n+\tprivate List<IBaseResource> get(IBundleProvider results) {\n+\t\treturn results.getResources(START_INDEX, END_INDEX);\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringAndListParam location = new StringAndListParam()\n+\t\t        .addAnd(new StringOrListParam().add(new StringParam(LOCATION_NAME)));\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.NAME_SEARCH_HANDLER, location);\n+\t\tIBundleProvider locations = search(theParams);\n+\t\t\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(get(locations).size(), equalTo(1));\n+\t\tassertThat(((Location) get(locations).iterator().next()).getName(), equalTo(LOCATION_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9e306c6e609b4433478c5e23f319841cfee3672"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNjk4Nw==", "bodyText": "Done. Thanks for pointing that out.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/191#discussion_r434636987", "createdAt": "2020-06-03T15:03:44Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/LocationSearchQueryImplTest.java", "diffHunk": "@@ -0,0 +1,488 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.search;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.empty;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.rest.api.SortOrderEnum;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.ReferenceOrListParam;\n+import ca.uhn.fhir.rest.param.ReferenceParam;\n+import ca.uhn.fhir.rest.param.StringAndListParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.StringParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Location;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.TestFhirSpringConfiguration;\n+import org.openmrs.module.fhir2.api.dao.FhirLocationDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.module.fhir2.api.translators.LocationTranslator;\n+import org.openmrs.test.BaseModuleContextSensitiveTest;\n+import org.openmrs.test.SkipBaseSetup;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+@SkipBaseSetup\n+@ContextConfiguration(classes = TestFhirSpringConfiguration.class, inheritLocations = false)\n+public class LocationSearchQueryImplTest extends BaseModuleContextSensitiveTest {\n+\t\n+\tpublic static final String LOCATION_UUID = \"c0938432-1691-11df-2222-8038u432aabd\";\n+\t\n+\tprivate static final String LOCATION_NAME = \"Test location 7\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_NAME = \"Location2\";\n+\t\n+\tprivate static final String LOCATION_CITY = \"Artuor\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_CITY = \"ArtuorA\";\n+\t\n+\tprivate static final String LOCATION_COUNTRY = \"Kenya\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_COUNTRY = \"KenyaA\";\n+\t\n+\tprivate static final String POSTAL_CODE = \"4069-3100\";\n+\t\n+\tprivate static final String UNKNOWN_POSTAL_CODE = \"4015-3100\";\n+\t\n+\tprivate static final String LOCATION_STATE = \"province\";\n+\t\n+\tprivate static final String UNKNOWN_LOCATION_STATE = \"province state\";\n+\t\n+\tprivate static final String LOGIN_LOCATION_TAG_NAME = \"login\";\n+\t\n+\tprivate static final String LOCATION_PARENT_CITY = \"Artuor\";\n+\t\n+\tprivate static final String LOCATION_PARENT_COUNTRY = \"Kenya\";\n+\t\n+\tprivate static final String LOCATION_PARENT_POSTAL_CODE = \"4069-3100\";\n+\t\n+\tprivate static final String LOCATION_PARENT_STATE = \"province\";\n+\t\n+\tprivate static final String LOCATION_PARENT_ID = \"c0938432-1691-11df-2222-7038c432aabd\";\n+\t\n+\tprivate static final String LOCATION_PARENT_NAME = \"Test location 5\";\n+\t\n+\tprivate static final String LOCATION_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest_initial_data.xml\";\n+\t\n+\t@Autowired\n+\tprivate FhirLocationDao fhirLocationDao;\n+\t\n+\t@Autowired\n+\tprivate LocationTranslator translator;\n+\t\n+\t@Autowired\n+\tSearchQuery<org.openmrs.Location, Location, FhirLocationDao, LocationTranslator> searchQuery;\n+\t\n+\tprivate static final int START_INDEX = 0;\n+\t\n+\tprivate static final int END_INDEX = 10;\n+\t\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\texecuteDataSet(INITIAL_XML_DATASET_PACKAGE_PATH);\n+\t\texecuteDataSet(LOCATION_INITIAL_DATA_XML);\n+\t}\n+\t\n+\tprivate IBundleProvider search(SearchParameterMap theParams) {\n+\t\treturn searchQuery.getQueryResults(theParams, fhirLocationDao, translator);\n+\t}\n+\t\n+\tprivate List<IBaseResource> get(IBundleProvider results) {\n+\t\treturn results.getResources(START_INDEX, END_INDEX);\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForLocations_shouldReturnCorrectLocationByName() {\n+\t\tStringAndListParam location = new StringAndListParam()\n+\t\t        .addAnd(new StringOrListParam().add(new StringParam(LOCATION_NAME)));\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.NAME_SEARCH_HANDLER, location);\n+\t\tIBundleProvider locations = search(theParams);\n+\t\t\n+\t\tassertThat(locations, notNullValue());\n+\t\tassertThat(get(locations).size(), equalTo(1));\n+\t\tassertThat(((Location) get(locations).iterator().next()).getName(), equalTo(LOCATION_NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyMTQzMA=="}, "originalCommit": {"oid": "f9e306c6e609b4433478c5e23f319841cfee3672"}, "originalPosition": 128}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 908, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}