{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NjI5NTg4", "number": 112, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozMjoxN1rODnLVnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1MzozNFrODocQQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDA2ODEyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozMjoxN1rOF1Bgiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNzozMjoxN1rOF1Bgiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE0MzU2Mw==", "bodyText": "Please leave a line before the return statement.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391143563", "createdAt": "2020-03-11T17:32:17Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -683,6 +684,18 @@ protected Criterion generateSystemQuery(String system, List<String> codes) {\n \t\t}\n \t}\n \t\n+\tprotected TokenOrListParam convertStringStatusToBoolean(TokenOrListParam statusParam) {\n+\t\tif (statusParam != null && !statusParam.getValuesAsQueryTokens().isEmpty()) {\n+\t\t\tswitch (statusParam.getValuesAsQueryTokens().get(0).getValue()) {\n+\t\t\t\tcase \"active\":\n+\t\t\t\t\treturn statusParam.add(\"false\");\n+\t\t\t\tcase \"inactive\":\n+\t\t\t\t\treturn statusParam.add(\"true\");\n+\t\t\t}\n+\t\t}\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDM2ODg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo1MzoyN1rOF1EfCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTozODowNVrOF1F4uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MjMyOA==", "bodyText": "Do we actually need this in BaseDaoImpl?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391192328", "createdAt": "2020-03-11T18:53:27Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -683,6 +684,18 @@ protected Criterion generateSystemQuery(String system, List<String> codes) {\n \t\t}\n \t}\n \t\n+\tprotected TokenOrListParam convertStringStatusToBoolean(TokenOrListParam statusParam) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5ODI4NQ==", "bodyText": "Also, on the implementation of this:\nIt should take a single TokenParam and return and single result or handle every OrListParam result and return a separate OrListParam of those values.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391198285", "createdAt": "2020-03-11T19:04:29Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -683,6 +684,18 @@ protected Criterion generateSystemQuery(String system, List<String> codes) {\n \t\t}\n \t}\n \t\n+\tprotected TokenOrListParam convertStringStatusToBoolean(TokenOrListParam statusParam) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MjMyOA=="}, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwMTU3NQ==", "bodyText": "On part one yes, because I was to be. able to reuse this in different Dao classes. On two i'm not sure I understood you correctly..", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391201575", "createdAt": "2020-03-11T19:11:00Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -683,6 +684,18 @@ protected Criterion generateSystemQuery(String system, List<String> codes) {\n \t\t}\n \t}\n \t\n+\tprotected TokenOrListParam convertStringStatusToBoolean(TokenOrListParam statusParam) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MjMyOA=="}, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNTI4OA==", "bodyText": "So, given a value list like [\"active\", \"inactive\"], corresponding to the query: Medication?status=active,inactive, the current code will return this:\n[\"active\", \"true\"]\n\nWhereas it should return:\n[\"true\", \"false\"]\n\nI think the correct code for this looks something like:\nreturn handleOrListParam(statusParam).map(s -> {\n\tswitch (s.getValue()) {\n\t\tcase \"active\":\n\t\t\treturn Optional.of(\"true\");\n\t\tcase \"inactive\":\n\t\t\treturn Optional.of(\"false\");\n\t\tdefault:\n\t\t\treturn Optional.empty();\n\t}\n}).filter(Optional::isPresent).map(Optional::get)\n\t\t.collect(TokenOrListParam::new, (tp, v) -> tp.add(String.valueOf(v)),\n\t\t\t\t(tp1, tp2) -> tp2.getListAsCodings().forEach(tp1::add))", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391215288", "createdAt": "2020-03-11T19:38:05Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -683,6 +684,18 @@ protected Criterion generateSystemQuery(String system, List<String> codes) {\n \t\t}\n \t}\n \t\n+\tprotected TokenOrListParam convertStringStatusToBoolean(TokenOrListParam statusParam) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5MjMyOA=="}, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDM3OTc1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxODo1NjoxNVrOF1Elhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTo0MDozNFrOF1F9wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5Mzk5MA==", "bodyText": "We should probably make sure to use different aliases so that these don't interfere with those in handleMedicationDosageForm. It would be nice if we could create one function that handles the details in common among these three and have each of the three functions do their individual setup and then just call that function.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391193990", "createdAt": "2020-03-11T18:56:15Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -33,4 +42,78 @@\n \tpublic Drug getMedicationByUuid(String uuid) {\n \t\treturn (Drug) sessionFactory.getCurrentSession().createCriteria(Drug.class).add(eq(\"uuid\", uuid)).uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Drug> searchForMedications(TokenOrListParam code, TokenOrListParam dosageForm,\n+\t        TokenOrListParam ingredientCode, TokenOrListParam status) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Drug.class);\n+\t\thandleMedicationCode(criteria, code);\n+\t\thandleMedicationDosageForm(criteria, dosageForm);\n+\t\thandleIngredientCode(criteria, ingredientCode);\n+\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleMedicationCode(Criteria criteria, TokenOrListParam code) {\n+\t\tif (code != null) {\n+\t\t\tcriteria.createAlias(\"concept\", \"dc\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(code, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"dc.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"dc.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"dcm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"dc.conceptMappings\", \"dcm\").createAlias(\"dcm.conceptReferenceTerm\", \"dcrt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleMedicationDosageForm(Criteria criteria, TokenOrListParam dosageForm) {\n+\t\tif (dosageForm != null) {\n+\t\t\tcriteria.createAlias(\"dosageForm\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(dosageForm, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"c.conceptMappings\", \"cm\").createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleIngredientCode(Criteria criteria, TokenOrListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(ingredientCode, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NDQ1NA==", "bodyText": "There's something similar in the works for #99, but it would need to be modified and extended to support this use case with multiple concepts.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391194454", "createdAt": "2020-03-11T18:57:07Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -33,4 +42,78 @@\n \tpublic Drug getMedicationByUuid(String uuid) {\n \t\treturn (Drug) sessionFactory.getCurrentSession().createCriteria(Drug.class).add(eq(\"uuid\", uuid)).uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Drug> searchForMedications(TokenOrListParam code, TokenOrListParam dosageForm,\n+\t        TokenOrListParam ingredientCode, TokenOrListParam status) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Drug.class);\n+\t\thandleMedicationCode(criteria, code);\n+\t\thandleMedicationDosageForm(criteria, dosageForm);\n+\t\thandleIngredientCode(criteria, ingredientCode);\n+\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleMedicationCode(Criteria criteria, TokenOrListParam code) {\n+\t\tif (code != null) {\n+\t\t\tcriteria.createAlias(\"concept\", \"dc\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(code, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"dc.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"dc.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"dcm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"dc.conceptMappings\", \"dcm\").createAlias(\"dcm.conceptReferenceTerm\", \"dcrt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleMedicationDosageForm(Criteria criteria, TokenOrListParam dosageForm) {\n+\t\tif (dosageForm != null) {\n+\t\t\tcriteria.createAlias(\"dosageForm\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(dosageForm, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"c.conceptMappings\", \"cm\").createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleIngredientCode(Criteria criteria, TokenOrListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(ingredientCode, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5Mzk5MA=="}, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNjM4NA==", "bodyText": "I had done some work on making this method reusable but the challenge was with the conflicting aliases", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391206384", "createdAt": "2020-03-11T19:20:25Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -33,4 +42,78 @@\n \tpublic Drug getMedicationByUuid(String uuid) {\n \t\treturn (Drug) sessionFactory.getCurrentSession().createCriteria(Drug.class).add(eq(\"uuid\", uuid)).uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Drug> searchForMedications(TokenOrListParam code, TokenOrListParam dosageForm,\n+\t        TokenOrListParam ingredientCode, TokenOrListParam status) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Drug.class);\n+\t\thandleMedicationCode(criteria, code);\n+\t\thandleMedicationDosageForm(criteria, dosageForm);\n+\t\thandleIngredientCode(criteria, ingredientCode);\n+\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleMedicationCode(Criteria criteria, TokenOrListParam code) {\n+\t\tif (code != null) {\n+\t\t\tcriteria.createAlias(\"concept\", \"dc\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(code, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"dc.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"dc.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"dcm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"dc.conceptMappings\", \"dcm\").createAlias(\"dcm.conceptReferenceTerm\", \"dcrt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleMedicationDosageForm(Criteria criteria, TokenOrListParam dosageForm) {\n+\t\tif (dosageForm != null) {\n+\t\t\tcriteria.createAlias(\"dosageForm\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(dosageForm, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"c.conceptMappings\", \"cm\").createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleIngredientCode(Criteria criteria, TokenOrListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(ingredientCode, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5Mzk5MA=="}, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIxNjU3Ng==", "bodyText": "I'd probably just turn the aliases into parameters like so: String conceptAlias, String conceptMapAlias, String conceptReferenceTermAlias. Then plug those in where necessary.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391216576", "createdAt": "2020-03-11T19:40:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -33,4 +42,78 @@\n \tpublic Drug getMedicationByUuid(String uuid) {\n \t\treturn (Drug) sessionFactory.getCurrentSession().createCriteria(Drug.class).add(eq(\"uuid\", uuid)).uniqueResult();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Drug> searchForMedications(TokenOrListParam code, TokenOrListParam dosageForm,\n+\t        TokenOrListParam ingredientCode, TokenOrListParam status) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Drug.class);\n+\t\thandleMedicationCode(criteria, code);\n+\t\thandleMedicationDosageForm(criteria, dosageForm);\n+\t\thandleIngredientCode(criteria, ingredientCode);\n+\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleMedicationCode(Criteria criteria, TokenOrListParam code) {\n+\t\tif (code != null) {\n+\t\t\tcriteria.createAlias(\"concept\", \"dc\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(code, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"dc.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"dc.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"dcm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"dc.conceptMappings\", \"dcm\").createAlias(\"dcm.conceptReferenceTerm\", \"dcrt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleMedicationDosageForm(Criteria criteria, TokenOrListParam dosageForm) {\n+\t\tif (dosageForm != null) {\n+\t\t\tcriteria.createAlias(\"dosageForm\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(dosageForm, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\t\tcriteria.createAlias(\"c.conceptMappings\", \"cm\").createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t\t}\n+\t\t\t}).ifPresent(criteria::add);\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleIngredientCode(Criteria criteria, TokenOrListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"c\");\n+\t\t\t\n+\t\t\thandleOrListParamBySystem(ingredientCode, (system, tokens) -> {\n+\t\t\t\tif (system.isEmpty()) {\n+\t\t\t\t\treturn Optional.of(\n+\t\t\t\t\t    or(in(\"c.conceptId\", tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t\t        in(\"c.uuid\", tokensToList(tokens))));\n+\t\t\t\t} else {\n+\t\t\t\t\tif (!containsAlias(criteria, \"cm\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5Mzk5MA=="}, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDM5MTY2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/MedicationTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOTowMDowN1rOF1EtZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOToxOTozNFrOF1FUUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NjAwNg==", "bodyText": "This should probably map to ingredient.strength. If that won't work, we should just leave it out. This is definitely the wrong place to map the strength.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391196006", "createdAt": "2020-03-11T19:00:07Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/MedicationTranslatorImpl.java", "diffHunk": "@@ -47,10 +47,9 @@ public Medication toFhirResource(Drug drug) {\n \t\tmedication.setCode(conceptTranslator.toFhirResource(drug.getConcept()));\n \t\tmedication.setForm(conceptTranslator.toFhirResource(drug.getDosageForm()));\n \t\t\n-\t\tMedication.MedicationIngredientComponent ingredient = new Medication.MedicationIngredientComponent();\n-\t\tCodeableConcept codeableConcept;\n \t\tfor (DrugIngredient val : drug.getIngredients()) {\n-\t\t\tcodeableConcept = conceptTranslator.toFhirResource(val.getIngredient());\n+\t\t\tMedication.MedicationIngredientComponent ingredient = new Medication.MedicationIngredientComponent();\n+\t\t\tCodeableConcept codeableConcept = conceptTranslator.toFhirResource(val.getIngredient());\n \t\t\tif (val.getStrength() != null) {\n \t\t\t\tcodeableConcept.setText(val.getStrength().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNTk3MA==", "bodyText": "Noted", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r391205970", "createdAt": "2020-03-11T19:19:34Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/MedicationTranslatorImpl.java", "diffHunk": "@@ -47,10 +47,9 @@ public Medication toFhirResource(Drug drug) {\n \t\tmedication.setCode(conceptTranslator.toFhirResource(drug.getConcept()));\n \t\tmedication.setForm(conceptTranslator.toFhirResource(drug.getDosageForm()));\n \t\t\n-\t\tMedication.MedicationIngredientComponent ingredient = new Medication.MedicationIngredientComponent();\n-\t\tCodeableConcept codeableConcept;\n \t\tfor (DrugIngredient val : drug.getIngredients()) {\n-\t\t\tcodeableConcept = conceptTranslator.toFhirResource(val.getIngredient());\n+\t\t\tMedication.MedicationIngredientComponent ingredient = new Medication.MedicationIngredientComponent();\n+\t\t\tCodeableConcept codeableConcept = conceptTranslator.toFhirResource(val.getIngredient());\n \t\t\tif (val.getStrength() != null) {\n \t\t\t\tcodeableConcept.setText(val.getStrength().toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTE5NjAwNg=="}, "originalCommit": {"oid": "16895fc4ca2b85b68826a74308952c72c308af9c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzMyNTQ1OnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/MedicationFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1MzozNFrOF2_iOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMzo1OFrOF2_8dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwODM3Ng==", "bodyText": "Can you remove this parameter from the search? That way it won't end up being specified as something we support. You can change the value to be null in the call below so we don't have to change the rest of the API.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r393208376", "createdAt": "2020-03-16T17:53:34Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/MedicationFhirResourceProvider.java", "diffHunk": "@@ -47,4 +52,14 @@ public Medication getMedicationByUuid(@IdParam @NotNull IdType id) {\n \t\t}\n \t\treturn medication;\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchForMedication(@OptionalParam(name = Medication.SP_CODE) TokenOrListParam code,\n+\t        @OptionalParam(name = Medication.SP_FORM) TokenOrListParam dosageForm,\n+\t        @OptionalParam(name = Medication.SP_INGREDIENT_CODE) TokenOrListParam ingredientCode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1deb901fe7ffe7f7973700d3f1f62dcc67ffdbe9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNTA5Mg==", "bodyText": "done", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/112#discussion_r393215092", "createdAt": "2020-03-16T18:03:58Z", "author": {"login": "jecihjoy"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/MedicationFhirResourceProvider.java", "diffHunk": "@@ -47,4 +52,14 @@ public Medication getMedicationByUuid(@IdParam @NotNull IdType id) {\n \t\t}\n \t\treturn medication;\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchForMedication(@OptionalParam(name = Medication.SP_CODE) TokenOrListParam code,\n+\t        @OptionalParam(name = Medication.SP_FORM) TokenOrListParam dosageForm,\n+\t        @OptionalParam(name = Medication.SP_INGREDIENT_CODE) TokenOrListParam ingredientCode,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwODM3Ng=="}, "originalCommit": {"oid": "1deb901fe7ffe7f7973700d3f1f62dcc67ffdbe9"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1126, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}