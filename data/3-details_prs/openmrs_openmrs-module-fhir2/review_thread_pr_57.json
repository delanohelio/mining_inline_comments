{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDEwMjE5", "number": 57, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNTowM1rODebxUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNTowM1rODebxUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjM4ODY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyNTowM1rOFnkLjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1OTo1NlrOFnnCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTU2Nw==", "bodyText": "Why can't we have this in the BaseDaoImpl so that we override", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57#discussion_r377031567", "createdAt": "2020-02-10T12:25:03Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -89,4 +101,115 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\treturn sessionFactory.getCurrentSession().createCriteria(Patient.class).createAlias(\"names\", \"names\")\n \t\t        .add(ilike(\"names.familyName\", family, MatchMode.START)).list();\n \t}\n+\n+\t@Override\n+\tpublic Collection<Patient> searchForPatients(StringOrListParam name, StringOrListParam given, StringOrListParam family,\n+\t\t\tTokenOrListParam identifier, TokenOrListParam gender, DateRangeParam birthDate, DateRangeParam deathDate,\n+\t\t\tTokenOrListParam deceased, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode,\n+\t\t\tSortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Patient.class);\n+\n+\t\thandleNames(criteria, name, given, family);\n+\t\thandleIdentifier(criteria, identifier);\n+\t\thandleGender(\"gender\", gender).ifPresent(criteria::add);\n+\t\thandleDateRange(\"birthdate\", birthDate).ifPresent(criteria::add);\n+\t\thandleDateRange(\"deathdate\", deathDate).ifPresent(criteria::add);\n+\t\thandleBoolean(\"dead\", deceased).ifPresent(criteria::add);\n+\t\thandleAddress(criteria, city, state, postalCode);\n+\t\thandleSort(criteria, sort, this::paramToProp);\n+\n+\t\treturn criteria.list();\n+\t}\n+\n+\tprivate void handleAddress(Criteria criteria, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode) {\n+\t\tif (city == null && state == null && postalCode == null) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\tprivate void handleIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"identifiers\", \"pi\");\n+\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n+\t\tcriteria.add(eq(\"pi.retired\", false));\n+\n+\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\tList<TokenParam> paramList = identifier.getValuesAsQueryTokens();\n+\n+\t\tString previousSystem = null;\n+\t\tList<String> codes = new ArrayList<>();\n+\t\tfor (TokenParam coding : paramList) {\n+\t\t\tif (coding.getSystem() != null) {\n+\t\t\t\tif (!coding.getSystem().equals(previousSystem)) {\n+\t\t\t\t\tif (codes.size() > 0) {\n+\t\t\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t\t\t\tcodes.clear();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tpreviousSystem = coding.getSystem();\n+\t\t\t\t}\n+\n+\t\t\t\tcodes.add(coding.getValue());\n+\t\t\t} else {\n+\t\t\t\tcriterionList.add(eq(\"pi.identifier\", coding.getValue()));\n+\t\t\t}\n+\n+\t\t\tif (codes.size() > 0) {\n+\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t}\n+\t\t}\n+\n+\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t}\n+\n+\tprivate void handleNames(Criteria criteria, StringOrListParam name, StringOrListParam given, StringOrListParam family) {\n+\t\tif (name == null && given == null && family == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"names\", \"pn\");\n+\n+\t\tif (name != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam nameParam : name.getValuesAsQueryTokens()) {\n+\t\t\t\tfor (String token : StringUtils.split(nameParam.getValue(), \" \\t,\")) {\n+\t\t\t\t\tStringParam tokenParam = new StringParam().setValue(token).setExact(nameParam.isExact()).setContains(nameParam.isContains());\n+\t\t\t\t\tpropertyLike(\"pn.givenName\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.middle\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.family\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (given != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam givenName : given.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.givenName\", givenName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (family != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam familyName : family.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.familyName\", familyName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\t}\n+\n+\tprivate String paramToProp(String paramName) {\n+\t\treturn null;\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a2ddbefa7551a2bda190c46d4bf2c6560eff842"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3ODM1OQ==", "bodyText": "That's a good thought!", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/57#discussion_r377078359", "createdAt": "2020-02-10T13:59:56Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -89,4 +101,115 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\treturn sessionFactory.getCurrentSession().createCriteria(Patient.class).createAlias(\"names\", \"names\")\n \t\t        .add(ilike(\"names.familyName\", family, MatchMode.START)).list();\n \t}\n+\n+\t@Override\n+\tpublic Collection<Patient> searchForPatients(StringOrListParam name, StringOrListParam given, StringOrListParam family,\n+\t\t\tTokenOrListParam identifier, TokenOrListParam gender, DateRangeParam birthDate, DateRangeParam deathDate,\n+\t\t\tTokenOrListParam deceased, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode,\n+\t\t\tSortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Patient.class);\n+\n+\t\thandleNames(criteria, name, given, family);\n+\t\thandleIdentifier(criteria, identifier);\n+\t\thandleGender(\"gender\", gender).ifPresent(criteria::add);\n+\t\thandleDateRange(\"birthdate\", birthDate).ifPresent(criteria::add);\n+\t\thandleDateRange(\"deathdate\", deathDate).ifPresent(criteria::add);\n+\t\thandleBoolean(\"dead\", deceased).ifPresent(criteria::add);\n+\t\thandleAddress(criteria, city, state, postalCode);\n+\t\thandleSort(criteria, sort, this::paramToProp);\n+\n+\t\treturn criteria.list();\n+\t}\n+\n+\tprivate void handleAddress(Criteria criteria, StringOrListParam city, StringOrListParam state, StringOrListParam postalCode) {\n+\t\tif (city == null && state == null && postalCode == null) {\n+\t\t\treturn;\n+\t\t}\n+\t}\n+\n+\tprivate void handleIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"identifiers\", \"pi\");\n+\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n+\t\tcriteria.add(eq(\"pi.retired\", false));\n+\n+\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\tList<TokenParam> paramList = identifier.getValuesAsQueryTokens();\n+\n+\t\tString previousSystem = null;\n+\t\tList<String> codes = new ArrayList<>();\n+\t\tfor (TokenParam coding : paramList) {\n+\t\t\tif (coding.getSystem() != null) {\n+\t\t\t\tif (!coding.getSystem().equals(previousSystem)) {\n+\t\t\t\t\tif (codes.size() > 0) {\n+\t\t\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t\t\t\tcodes.clear();\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tpreviousSystem = coding.getSystem();\n+\t\t\t\t}\n+\n+\t\t\t\tcodes.add(coding.getValue());\n+\t\t\t} else {\n+\t\t\t\tcriterionList.add(eq(\"pi.identifier\", coding.getValue()));\n+\t\t\t}\n+\n+\t\t\tif (codes.size() > 0) {\n+\t\t\t\tcriterionList.add(and(eq(\"pit.name\", previousSystem), in(\"pi.identifier\", codes)));\n+\t\t\t}\n+\t\t}\n+\n+\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t}\n+\n+\tprivate void handleNames(Criteria criteria, StringOrListParam name, StringOrListParam given, StringOrListParam family) {\n+\t\tif (name == null && given == null && family == null) {\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tcriteria.createAlias(\"names\", \"pn\");\n+\n+\t\tif (name != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam nameParam : name.getValuesAsQueryTokens()) {\n+\t\t\t\tfor (String token : StringUtils.split(nameParam.getValue(), \" \\t,\")) {\n+\t\t\t\t\tStringParam tokenParam = new StringParam().setValue(token).setExact(nameParam.isExact()).setContains(nameParam.isContains());\n+\t\t\t\t\tpropertyLike(\"pn.givenName\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.middle\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t\tpropertyLike(\"pn.family\", tokenParam).ifPresent(criterionList::add);\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (given != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam givenName : given.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.givenName\", givenName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\n+\t\tif (family != null) {\n+\t\t\tList<Criterion> criterionList = new ArrayList<>();\n+\n+\t\t\tfor (StringParam familyName : family.getValuesAsQueryTokens()) {\n+\t\t\t\tpropertyLike(\"pn.familyName\", familyName).ifPresent(criterionList::add);\n+\t\t\t}\n+\n+\t\t\tcriteria.add(or(criterionList.toArray(new Criterion[0])));\n+\t\t}\n+\t}\n+\n+\tprivate String paramToProp(String paramName) {\n+\t\treturn null;\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzMTU2Nw=="}, "originalCommit": {"oid": "5a2ddbefa7551a2bda190c46d4bf2c6560eff842"}, "originalPosition": 153}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1237, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}