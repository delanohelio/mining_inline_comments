{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTAzOTY5", "number": 103, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo0NzoxMFrODkxbgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyMDozM1rODlD9Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODg1MTg2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo0NzoxMFrOFxSFJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo0NzoxMFrOFxSFJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMDc3Mw==", "bodyText": "We actually shouldn't return null if it's a DrugOrder. I'd just handle it as usual anyways.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387220773", "createdAt": "2020-03-03T18:47:10Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java", "diffHunk": "@@ -109,6 +111,13 @@ protected Reference createPractitionerReference(@NotNull Provider provider) {\n \t\treturn reference;\n \t}\n \t\n+\tprotected Reference createOrderReference(@NotNull Order order) {\n+\t\tif (order instanceof DrugOrder) {\n+\t\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODg2MDAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo0OToxNlrOFxSKGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo0OToxNlrOFxSKGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjA0MA==", "bodyText": "Please don't use the org.openmrs.api.OrderService here. Instead, create a FhirOrderDao to get the order from the database. I don't want to depend on the OpenMRS Service API if we can avoid it.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387222040", "createdAt": "2020-03-03T18:49:16Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Order;\n+import org.openmrs.api.OrderService;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.ObservationBasedOnReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationBasedOnReferenceTranslatorImpl extends AbstractReferenceHandlingTranslator implements ObservationBasedOnReferenceTranslator {\n+\t\n+\t@Inject\n+\tprivate OrderService orderService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODg2NDU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1MDozN1rOFxSM_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTozNzo0OFrOFxTxXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw==", "bodyText": "We should not being doing this. Let the dateCreated (and dateChanged) fields get updated by the system, not by our code.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387222783", "createdAt": "2020-03-03T18:50:37Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MTI3Ng==", "bodyText": "@ibacher I'm not sure I understand this, do you mean like we shouldn't be mapping openmrs fields?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387241276", "createdAt": "2020-03-03T19:24:33Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw=="}, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MjM1Mw==", "bodyText": "I just mean we shouldn't be updating dateCreated and dateUpdated based on values supplied via the FHIR interface. They should basically be read-only fields.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387242353", "createdAt": "2020-03-03T19:26:28Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw=="}, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0ODQ3Nw==", "bodyText": "got it", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387248477", "createdAt": "2020-03-03T19:37:48Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMjc4Mw=="}, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODg2OTMyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1MTo0MlrOFxSP2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToyNzo1OFrOFxTcuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzUxMg==", "bodyText": "What happens if there is no effectiveDateTimeType set for this resource? We should actually have a translator here that can handle (at least) effectiveDateTime and effectiveInstant.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387223512", "createdAt": "2020-03-03T18:51:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());\n+\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MjI2NA==", "bodyText": "@ibacher do you mean doing this in something like a ObservationEffectiveDatetimeTranslator?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387242264", "createdAt": "2020-03-03T19:26:15Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());\n+\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzUxMg=="}, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0MzE5Mw==", "bodyText": "Yes. It's kind of similar to what we had to do with ObservationValueTranslator.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387243193", "createdAt": "2020-03-03T19:27:58Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());\n+\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzUxMg=="}, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODg3MDU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1MjowMlrOFxSQkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1MjowMlrOFxSQkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyMzY5OA==", "bodyText": "Add a new line here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387223698", "createdAt": "2020-03-03T18:52:02Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationTranslatorImpl.java", "diffHunk": "@@ -137,6 +145,11 @@ public Obs toOpenmrsType(Obs existingObs, Observation observation, Supplier<Obs>\n \t\t\tinterpretationTranslator.toOpenmrsType(existingObs, observation.getInterpretation().get(0));\n \t\t}\n \t\texistingObs.setDateChanged(observation.getMeta().getLastUpdated());\n+\t\texistingObs.setDateCreated(observation.getIssued());\n+\t\texistingObs.setObsDatetime(observation.getEffectiveDateTimeType().getValue());\n+\t\tif (observation.hasBasedOn()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11bf02c6acd2d0ec46eb324784d0b79783ec07f8"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTg3MTAxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxNjo0MVrOFxu55w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxNzozOFrOFxu8Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MzAzMQ==", "bodyText": "This should still be \"ServiceRequest\" since \"Order\" isn't a valid FHIR object type.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387693031", "createdAt": "2020-03-04T14:16:41Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java", "diffHunk": "@@ -109,6 +110,10 @@ protected Reference createPractitionerReference(@NotNull Provider provider) {\n \t\treturn reference;\n \t}\n \t\n+\tprotected Reference createOrderReference(@NotNull Order order) {\n+\t\treturn new Reference().setReference(FhirConstants.ORDER + \"/\" + order.getUuid()).setType(FhirConstants.ORDER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MzYxMQ==", "bodyText": "In this method, it may make sense to differentiate DrugOrders, but in that case have them return a reference to a \"MedicationRequest\". However, that only makes sense once the MedicationRequest resource is created.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387693611", "createdAt": "2020-03-04T14:17:38Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/AbstractReferenceHandlingTranslator.java", "diffHunk": "@@ -109,6 +110,10 @@ protected Reference createPractitionerReference(@NotNull Provider provider) {\n \t\treturn reference;\n \t}\n \t\n+\tprotected Reference createOrderReference(@NotNull Order order) {\n+\t\treturn new Reference().setReference(FhirConstants.ORDER + \"/\" + order.getUuid()).setType(FhirConstants.ORDER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MzAzMQ=="}, "originalCommit": {"oid": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTg3OTU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxODo0MFrOFxu-6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxODo0MFrOFxu-6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NDMxMw==", "bodyText": "Again, reference should be to a ServiceRequest, not an Order", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387694313", "createdAt": "2020-03-04T14:18:40Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationBasedOnReferenceTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import javax.inject.Inject;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.openmrs.Order;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.dao.FhirOrderDao;\n+import org.openmrs.module.fhir2.api.translators.ObservationBasedOnReferenceTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationBasedOnReferenceTranslatorImpl extends AbstractReferenceHandlingTranslator implements ObservationBasedOnReferenceTranslator {\n+\t\n+\t@Inject\n+\tprivate FhirOrderDao<Order> orderDao;\n+\t\n+\t@Override\n+\tpublic Reference toFhirResource(Order order) {\n+\t\tif (order == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\treturn createOrderReference(order);\n+\t}\n+\t\n+\t@Override\n+\tpublic Order toOpenmrsType(Reference reference) {\n+\t\tif (reference == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (!reference.getType().equals(FhirConstants.ORDER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTg4NzU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationEffectiveDatetimeTranslatorImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyMDozM1rOFxvDjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyMDozM1rOFxvDjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NTUwMA==", "bodyText": "In addition to DateTimeType we should also support InstantType here, which is very similar to DateTimeType, but represents a slightly more precise type.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/103#discussion_r387695500", "createdAt": "2020-03-04T14:20:33Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationEffectiveDatetimeTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.r4.model.DateTimeType;\n+import org.hl7.fhir.r4.model.Type;\n+import org.openmrs.Obs;\n+import org.openmrs.module.fhir2.api.translators.ObservationEffectiveDatetimeTranslator;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationEffectiveDatetimeTranslatorImpl implements ObservationEffectiveDatetimeTranslator {\n+\t\n+\t@Override\n+\tpublic Type toFhirResource(Obs obs) {\n+\t\tif (obs == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (obs.getObsDatetime() != null) {\n+\t\t\treturn (new DateTimeType(obs.getObsDatetime()));\n+\t\t}\n+\t\t\n+\t\treturn null;\n+\t}\n+\t\n+\t@Override\n+\tpublic Obs toOpenmrsType(Obs obs, Type resource) {\n+\t\tif (resource == null) {\n+\t\t\treturn obs;\n+\t\t}\n+\t\t\n+\t\tif (resource instanceof DateTimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c262cd8444f3e23aba89cb5062e04c5ef2b0ab2e"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1114, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}