{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODcwMTQy", "number": 212, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTowMjozM1rOEGEhUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozODo1NVrOELqvVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODAwOTc2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/AllergyIntoleranceFhirResourceProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOTowMjozM1rOGkpO1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMDo0NjozM1rOGksjqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NzQ2Mg==", "bodyText": "@Akayeshmantha thanks for the work,,,,,\nmay be the naming can be like this updateAllergy_shouldUpdateAllergyIntolerance()", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r441077462", "createdAt": "2020-06-16T19:02:33Z", "author": {"login": "gitcliff"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/AllergyIntoleranceFhirResourceProviderTest.java", "diffHunk": "@@ -336,4 +339,51 @@ public void createAllergy_shouldCreateAllergyIntolerance() {\n \t\tassertThat(result.getResource(), CoreMatchers.equalTo(allergyIntolerance));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldUpdateAllergy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abd3eacbdaeca0ed3a4807bcdf4cba7229055033"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTEzMTk0NQ==", "bodyText": "Good point @gitcliff", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r441131945", "createdAt": "2020-06-16T20:46:33Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/AllergyIntoleranceFhirResourceProviderTest.java", "diffHunk": "@@ -336,4 +339,51 @@ public void createAllergy_shouldCreateAllergyIntolerance() {\n \t\tassertThat(result.getResource(), CoreMatchers.equalTo(allergyIntolerance));\n \t}\n \t\n+\t@Test\n+\tpublic void shouldUpdateAllergy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NzQ2Mg=="}, "originalCommit": {"oid": "abd3eacbdaeca0ed3a4807bcdf4cba7229055033"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTY0NTcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDozODozOFrOGo1GPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDoxMDozOVrOGp0wMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2NjE3NA==", "bodyText": "Make use of util method introduced by #214\nreturn FhirProviderUtils.buildDelete(allergyIntolerance);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r445466174", "createdAt": "2020-06-25T10:38:38Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -76,6 +84,39 @@ public AllergyIntolerance getAllergyIntoleranceById(@IdParam @NotNull IdType id)\n \t\t        .map(Provenance30_40::convertProvenance).collect(Collectors.toList());\n \t}\n \t\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t    allergyIntoleranceService.create(AllergyIntolerance30_40.convertAllergyIntolerance(allergyIntolerance)));\n+\t}\n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateAllergyIntolerance(@IdParam IdType id, @ResourceParam AllergyIntolerance allergyIntolerance) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tallergyIntolerance.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(allergyIntoleranceService.update(id.getIdPart(),\n+\t\t    AllergyIntolerance30_40.convertAllergyIntolerance(allergyIntolerance)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteAllergyIntolerance(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = allergyIntoleranceService.delete(id.getIdPart());\n+\t\tif (allergyIntolerance == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find allergyIntolerance to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c3c844d9c20fe81848bb9d3ce444a409696ea0"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTEwNg==", "bodyText": "sure for the operationoutcome right ?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r446509106", "createdAt": "2020-06-27T10:10:39Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -76,6 +84,39 @@ public AllergyIntolerance getAllergyIntoleranceById(@IdParam @NotNull IdType id)\n \t\t        .map(Provenance30_40::convertProvenance).collect(Collectors.toList());\n \t}\n \t\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t    allergyIntoleranceService.create(AllergyIntolerance30_40.convertAllergyIntolerance(allergyIntolerance)));\n+\t}\n+\t\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateAllergyIntolerance(@IdParam IdType id, @ResourceParam AllergyIntolerance allergyIntolerance) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\t\t\n+\t\tallergyIntolerance.setId(id.getIdPart());\n+\t\t\n+\t\treturn FhirProviderUtils.buildUpdate(allergyIntoleranceService.update(id.getIdPart(),\n+\t\t    AllergyIntolerance30_40.convertAllergyIntolerance(allergyIntolerance)));\n+\t}\n+\t\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteAllergyIntolerance(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = allergyIntoleranceService.delete(id.getIdPart());\n+\t\tif (allergyIntolerance == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find allergyIntolerance to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(id.getIdPart());\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\t\treturn retVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2NjE3NA=="}, "originalCommit": {"oid": "f8c3c844d9c20fe81848bb9d3ce444a409696ea0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTY1MzI2OnYy", "diffSide": "RIGHT", "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/AllergyIntoleranceWebTest_UpdateWithoutId.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDo0MToyMVrOGo1LSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDo0MToyMVrOGo1LSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2NzQ2Nw==", "bodyText": "Add a newline", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r445467467", "createdAt": "2020-06-25T10:41:21Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/AllergyIntoleranceWebTest_UpdateWithoutId.json", "diffHunk": "@@ -0,0 +1,71 @@\n+{\n+  \"resourceType\": \"AllergyIntolerance\",\n+  \"clinicalStatus\": {\n+    \"coding\": [\n+      {\n+        \"system\": \"http://terminology.hl7.org/CodeSystem/allergyintolerance-clinical\",\n+        \"code\": \"active\",\n+        \"display\": \"Active\"\n+      }\n+    ],\n+    \"text\": \"Active\"\n+  },\n+  \"type\": \"allergy\",\n+  \"category\": [\n+    \"medication\"\n+  ],\n+  \"code\": {\n+    \"text\": \"value for allergen non coded. 123456\"\n+  },\n+  \"patient\": {\n+    \"reference\": \"Patient/dd55571f-1691-11df-97a5-7038c432aabf\",\n+    \"type\": \"Patient\",\n+    \"identifier\": {\n+      \"id\": \"dce9740a-1691-11df-97a5-7038c432aabf\",\n+      \"use\": \"usual\",\n+      \"system\": \"OpenMRS Identification Number\",\n+      \"value\": \"35TU-9\"\n+    },\n+    \"display\": \"Kimetto Akimena Ediati(OpenMRS Identification Number:35TU-9)\"\n+  },\n+  \"recorder\": {\n+    \"reference\": \"Practitioner/842f4bae-1692-11df-97a5-7038c432aabf\",\n+    \"type\": \"Practitioner\",\n+    \"display\": \"Super User\"\n+  },\n+  \"note\": [\n+    {\n+      \"text\": \"allergy comment\"\n+    }\n+  ],\n+  \"reaction\": [\n+    {\n+      \"substance\": {\n+        \"coding\": [\n+          {\n+            \"code\": \"162298AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+          },\n+          {\n+            \"system\": \"urn:oid:2.16.840.1.113883.3.7201\",\n+            \"code\": \"162298\"\n+          }\n+        ]\n+      },\n+      \"manifestation\": [\n+        {\n+          \"coding\": [\n+            {\n+              \"code\": \"1513AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\"\n+            },\n+            {\n+              \"system\": \"urn:oid:2.16.840.1.113883.3.7201\",\n+              \"code\": \"1513\"\n+            }\n+          ],\n+          \"text\": \"1513AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA text\"\n+        }\n+      ],\n+      \"severity\": \"severe\"\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8c3c844d9c20fe81848bb9d3ce444a409696ea0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTUzNjM4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNTozNlrOGqP-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzowNTozNlrOGqP-ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1NTIwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic MethodOutcome creatAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {\n          \n          \n            \n            \tpublic MethodOutcome createAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r446955203", "createdAt": "2020-06-29T13:05:36Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirResourceProvider.java", "diffHunk": "@@ -76,6 +85,36 @@ public AllergyIntolerance getAllergyIntoleranceById(@IdParam @NotNull IdType id)\n \t\t        .map(Provenance30_40::convertProvenance).collect(Collectors.toList());\n \t}\n \t\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatAllergyIntolerance(@ResourceParam AllergyIntolerance allergyIntolerance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723856a0ba32082386291541d3faf346275122c8"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzcyOTMyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirR3ResourceProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjozODowNlrOGqk-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNzo1NDowOVrOGqwQhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5OTI1NQ==", "bodyText": "@Akayeshmantha Can we add the update tests as well?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r447299255", "createdAt": "2020-06-29T22:38:06Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirR3ResourceProviderTest.java", "diffHunk": "@@ -323,4 +326,20 @@ public void searchForAllergies_shouldReturnMatchingBundleOfAllergiesByStatus() {\n \t\tassertThat(((org.hl7.fhir.r4.model.AllergyIntolerance) resultList.iterator().next()).getId(), equalTo(ALLERGY_UUID));\n \t}\n \t\n+\t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "723856a0ba32082386291541d3faf346275122c8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ4NDAzNg==", "bodyText": "@ibacher  sure I will do it", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r447484036", "createdAt": "2020-06-30T07:54:09Z", "author": {"login": "Akayeshmantha"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirR3ResourceProviderTest.java", "diffHunk": "@@ -323,4 +326,20 @@ public void searchForAllergies_shouldReturnMatchingBundleOfAllergiesByStatus() {\n \t\tassertThat(((org.hl7.fhir.r4.model.AllergyIntolerance) resultList.iterator().next()).getId(), equalTo(ALLERGY_UUID));\n \t}\n \t\n+\t@Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI5OTI1NQ=="}, "originalCommit": {"oid": "723856a0ba32082386291541d3faf346275122c8"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjY5OTE4OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/AllergyIntoleranceFhirResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozODozMlrOGtVgCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozODozMlrOGtVgCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MTM3MQ==", "bodyText": "Please use delete instead of get in this test", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r450191371", "createdAt": "2020-07-06T12:38:32Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/AllergyIntoleranceFhirResourceProviderWebTest.java", "diffHunk": "@@ -433,4 +442,90 @@ public void createAllergy_shouldCreateAllergyIntolerance() throws Exception {\n \t\tassertThat(response, isCreated());\n \t\tassertThat(response.getStatus(), is(201));\n \t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldUpdateRequestedAllergyIntolerance() throws Exception {\n+\t\tAllergyIntolerance allergy = new AllergyIntolerance();\n+\t\tallergy.setId(ALLERGY_UUID);\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(any(String.class), any(AllergyIntolerance.class))).thenReturn(allergy);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForIdMismatch() throws Exception {\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForNoId() throws Exception {\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITHOUTID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForNonexistentMedication() throws Exception {\n+\t\tString createAllergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITH_WRONGID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tcreateAllergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(eq(WRONG_ALLERGY_UUID), any(AllergyIntolerance.class)))\n+\t\t        .thenThrow(new MethodNotAllowedException(\"AllergyIntolerance \" + WRONG_ALLERGY_UUID + \" does not exist\"));\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(createAllergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isMethodNotAllowed());\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldDeleteRequestedAllergyIntolerance() throws Exception {\n+\t\twhen(allergyService.delete(any(String.class))).thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldReturn404ForNonExistingAllergyIntolerance() throws Exception {\n+\t\twhen(allergyService.get(WRONG_ALLERGY_UUID)).thenReturn(null);\n+\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "482b0082e6e9ddbd663461e0e7bd1ae603433017"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNjcwMDM5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirR3ResourceProviderWebTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozODo1NVrOGtVgzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozODo1NVrOGtVgzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MTU2Ng==", "bodyText": "Please use delete instead of get in this test", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/212#discussion_r450191566", "createdAt": "2020-07-06T12:38:55Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/AllergyIntoleranceFhirR3ResourceProviderWebTest.java", "diffHunk": "@@ -393,4 +408,111 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(ALLERGY_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void createAllergyIntolerance_shouldCreateNewAllergyIntolerance() throws Exception {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = new org.hl7.fhir.r4.model.AllergyIntolerance();\n+\t\tallergyIntolerance.setId(ALLERGY_UUID);\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.create(any(org.hl7.fhir.r4.model.AllergyIntolerance.class))).thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/AllergyIntolerance\").jsonContent(allergyJson).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldUpdateRequestedAllergyIntolerance() throws Exception {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = new org.hl7.fhir.r4.model.AllergyIntolerance();\n+\t\tallergyIntolerance.setId(ALLERGY_UUID);\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(any(String.class), any(org.hl7.fhir.r4.model.AllergyIntolerance.class)))\n+\t\t        .thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(allergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldThrowErrorForIdMismatch() throws Exception {\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(allergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldErrorForNoId() throws Exception {\n+\t\tString allergyJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITHOUTID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tallergyJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + ALLERGY_UUID).jsonContent(allergyJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateAllergyIntolerance_shouldErrorForNonexistentMedication() throws Exception {\n+\t\tString medicationJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_WITH_WRONGID_ALLERGY_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tmedicationJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(allergyService.update(eq(WRONG_ALLERGY_UUID), any(org.hl7.fhir.r4.model.AllergyIntolerance.class)))\n+\t\t        .thenThrow(new MethodNotAllowedException(\"AllergyIntolerance \" + WRONG_ALLERGY_UUID + \" does not exist\"));\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).jsonContent(medicationJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isMethodNotAllowed());\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldDeleteAllergyIntolerance() throws Exception {\n+\t\torg.hl7.fhir.r4.model.AllergyIntolerance allergyIntolerance = new org.hl7.fhir.r4.model.AllergyIntolerance();\n+\t\tallergyIntolerance.setId(ALLERGY_UUID);\n+\t\t\n+\t\twhen(allergyService.delete(any(String.class))).thenReturn(allergyIntolerance);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/AllergyIntolerance/\" + ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteAllergyIntolerance_shouldReturn404ForNonExistingAllergyIntolerance() throws Exception {\n+\t\twhen(allergyService.get(WRONG_ALLERGY_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/AllergyIntolerance/\" + WRONG_ALLERGY_UUID).accept(FhirMediaTypes.JSON).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "482b0082e6e9ddbd663461e0e7bd1ae603433017"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 947, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}