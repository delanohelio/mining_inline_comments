{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTI4Mjgy", "number": 95, "title": "FM2-95: Implement sorting for Patient Resource", "bodyText": "Description of what I changed\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-95\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit.\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-02-28T18:21:09Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95", "merged": true, "mergeCommit": {"oid": "4e5301b206f84f812496ddd570c26f9e813be5fa"}, "closed": true, "closedAt": "2020-03-17T20:00:08Z", "author": {"login": "CaptainDaVinci"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLY_VegFqTM3MDc4MDk2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOoGuNABqjMxMzg4MDM5MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzgwOTY4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#pullrequestreview-370780968", "createdAt": "2020-03-07T18:18:10Z", "commit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxODoxMVrOFzRFLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyNToxMlrOFzRGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTU0OA==", "bodyText": "@CaptainDaVinci Here I'll suggest to use Patient.SP_NAME", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301548", "createdAt": "2020-03-07T18:18:11Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTU3MQ==", "bodyText": "here  Patient.SP_GIVEN", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301571", "createdAt": "2020-03-07T18:18:30Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTYwNQ==", "bodyText": "Here Patient.SP_FAMILY", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301605", "createdAt": "2020-03-07T18:19:01Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTYyMw==", "bodyText": "Here Patient.SP_BIRTHDATE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301623", "createdAt": "2020-03-07T18:19:33Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTY2MQ==", "bodyText": "Here Patient.SP_DEATH_DATE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301661", "createdAt": "2020-03-07T18:20:09Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTY5OA==", "bodyText": "Here Patient.SP_ADDRESS_CITY", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301698", "createdAt": "2020-03-07T18:20:38Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTc1MQ==", "bodyText": "Here Patient.SP_ADDRESS_STATE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301751", "createdAt": "2020-03-07T18:21:20Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":\n+\t\t\t\treturn \"pad.cityVillage\";\n+\t\t\tcase \"address-state\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTc5OQ==", "bodyText": "Here Patient.SP_ADDRESS_POSTALCODE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301799", "createdAt": "2020-03-07T18:21:45Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":\n+\t\t\t\treturn \"pad.cityVillage\";\n+\t\t\tcase \"address-state\":\n+\t\t\t\treturn \"pad.stateProvince\";\n+\t\t\tcase \"address-postalCode\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTgyNA==", "bodyText": "Here Patient.SP_ADDRESS_COUNTRY", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301824", "createdAt": "2020-03-07T18:22:24Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":\n+\t\t\t\treturn \"pad.cityVillage\";\n+\t\t\tcase \"address-state\":\n+\t\t\t\treturn \"pad.stateProvince\";\n+\t\t\tcase \"address-postalCode\":\n+\t\t\t\treturn \"pad.postalCode\";\n+\t\t\tcase \"address-country\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA==", "bodyText": "@CaptainDaVinci  I would suggest you use Patient.SP_NAME instead of name Patient.SP_GIVEN instead of given Patient.SP_FAMILY instead of family", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301958", "createdAt": "2020-03-07T18:25:12Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/edc81e5e5655003898036786db5422e0311ce5b3", "committedDate": "2020-02-28T18:14:46Z", "message": "FM2-95: Implement sorting for Patient Resource"}, "afterCommit": {"oid": "b491962c15da2b5cbc7daa271376824fba13eaf3", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b491962c15da2b5cbc7daa271376824fba13eaf3", "committedDate": "2020-03-09T03:35:27Z", "message": "FM2-95: Implement sorting for Patient Resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b491962c15da2b5cbc7daa271376824fba13eaf3", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b491962c15da2b5cbc7daa271376824fba13eaf3", "committedDate": "2020-03-09T03:35:27Z", "message": "FM2-95: Implement sorting for Patient Resource"}, "afterCommit": {"oid": "b2d29663cb312e662034af25f082ab878f4ccc90", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b2d29663cb312e662034af25f082ab878f4ccc90", "committedDate": "2020-03-10T13:53:53Z", "message": "FM2-95: Implement sorting for Patient Resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2d29663cb312e662034af25f082ab878f4ccc90", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b2d29663cb312e662034af25f082ab878f4ccc90", "committedDate": "2020-03-10T13:53:53Z", "message": "FM2-95: Implement sorting for Patient Resource"}, "afterCommit": {"oid": "4b64b06433067437284120191f13200bdbab014f", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4b64b06433067437284120191f13200bdbab014f", "committedDate": "2020-03-16T18:18:46Z", "message": "FM2-95: Implement sorting for Patient Resource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODI0OTkx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#pullrequestreview-375824991", "createdAt": "2020-03-17T08:30:56Z", "commit": {"oid": "e4b37eea86b3a964cde52dece7e07c331b55a5d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozMDo1NlrOF3SIVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozMDo1NlrOF3SIVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMzA0Nw==", "bodyText": "Please leave a line before the return", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r393513047", "createdAt": "2020-03-17T08:30:56Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImplTest.java", "diffHunk": "@@ -379,4 +389,224 @@ public void searchForPatients_shouldSearchForPatientsByPostalCode() {\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getUuid(), equalTo(PATIENT_ADDRESS_PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByName() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"name\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\t// Smallest given name of patient i should be less than the largest given name of next patient.\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getNames(), not(empty())); // Not sure why this test is failing\n+\t\t\tString currentSmallestGivenName = patients.get(i - 1).getNames().stream()\n+\t\t\t        .min(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\tString nextLargestGivenName = patients.get(i).getNames().stream()\n+\t\t\t        .max(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\t\n+\t\t\tassertThat(currentSmallestGivenName, lessThanOrEqualTo(nextLargestGivenName));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\t// Largest given name of patient i + 1 i should be greater than the smallest given name of previous patient.\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tString largestGivenName = patients.get(i - 1).getNames().stream()\n+\t\t\t        .max(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\tString nextSmallestGivenName = patients.get(i).getNames().stream()\n+\t\t\t        .min(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\t\n+\t\t\tassertThat(largestGivenName, greaterThanOrEqualTo(nextSmallestGivenName));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByBirthDate() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"birthdate\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getBirthdate(), sameOrBefore(patients.get(i).getBirthdate()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getBirthdate(), sameOrAfter(patients.get(i).getBirthdate()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByDeathDate() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"deathdate\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getDeathDate(), sameOrBefore(patients.get(i).getDeathDate()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getDeathDate(), sameOrAfter(patients.get(i).getDeathDate()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByCity() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-city\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCityVillage(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getCityVillage()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCityVillage(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getCityVillage()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByState() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-state\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getStateProvince(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getStateProvince()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getStateProvince(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getStateProvince()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByPostalCode() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-postalCode\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getPostalCode(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getPostalCode()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getPostalCode(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getPostalCode()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByCountry() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-country\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCountry(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getCountry()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCountry(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getCountry()));\n+\t\t}\n+\t}\n+\t\n+\tprivate List<Patient> getPatientListForSorting(SortSpec sort) {\n+\t\tCollection<Patient> patients = dao.searchForPatients(null, null, null, null, null, null, null, null, null, null,\n+\t\t    null, null, sort);\n+\t\t\n+\t\tassertThat(patients, notNullValue());\n+\t\tassertThat(patients, not(empty()));\n+\t\tassertThat(patients.size(), greaterThan(1));\n+\t\t\n+\t\tList<Patient> patientList = new ArrayList<>(patients);\n+\t\t// remove patients with sort parameter value null, to allow comparison while asserting. \n+\t\tswitch (sort.getParamName()) {\n+\t\t\tcase \"name\":\n+\t\t\t\tpatientList.removeIf(p -> p.getGivenName() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"birthdate\":\n+\t\t\t\tpatientList.removeIf(p -> p.getBirthdate() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"deathdate\":\n+\t\t\t\tpatientList.removeIf(p -> p.getDeathDate() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-city\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"city\"));\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-state\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"state\"));\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-postalcode\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"postalCode\"));\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-country\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"country\"));\n+\t\t\t\tbreak;\n+\t\t}\n+\t\t\n+\t\tassertThat(patientList.size(), greaterThan(1));\n+\t\t\n+\t\treturn patientList;\n+\t}\n+\t\n+\tprivate boolean addressComponentNullorEmtpy(PersonAddress address, String component) {\n+\t\tif (address == null) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tswitch (component) {\n+\t\t\tcase \"city\":\n+\t\t\t\treturn address.getCityVillage() == null || address.getCityVillage().isEmpty();\n+\t\t\tcase \"state\":\n+\t\t\t\treturn address.getStateProvince() == null || address.getStateProvince().isEmpty();\n+\t\t\tcase \"postalCode\":\n+\t\t\t\treturn address.getPostalCode() == null || address.getPostalCode().isEmpty();\n+\t\t\tcase \"country\":\n+\t\t\t\treturn address.getCountry() == null || address.getCountry().isEmpty();\n+\t\t}\n+\t\treturn false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b37eea86b3a964cde52dece7e07c331b55a5d7"}, "originalPosition": 262}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4b37eea86b3a964cde52dece7e07c331b55a5d7", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e4b37eea86b3a964cde52dece7e07c331b55a5d7", "committedDate": "2020-03-16T21:33:36Z", "message": "Add tests for sorting"}, "afterCommit": {"oid": "6dbfe4f12a6927873560d211e8dc9b8fb38d4c6b", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6dbfe4f12a6927873560d211e8dc9b8fb38d4c6b", "committedDate": "2020-03-17T09:33:04Z", "message": "Add tests for sorting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6dbfe4f12a6927873560d211e8dc9b8fb38d4c6b", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6dbfe4f12a6927873560d211e8dc9b8fb38d4c6b", "committedDate": "2020-03-17T09:33:04Z", "message": "Add tests for sorting"}, "afterCommit": {"oid": "9bbaa4f98f891605c60006c718c0d3a26beeaa0b", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9bbaa4f98f891605c60006c718c0d3a26beeaa0b", "committedDate": "2020-03-17T12:03:12Z", "message": "Add tests for sorting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9bbaa4f98f891605c60006c718c0d3a26beeaa0b", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9bbaa4f98f891605c60006c718c0d3a26beeaa0b", "committedDate": "2020-03-17T12:03:12Z", "message": "Add tests for sorting"}, "afterCommit": {"oid": "3c2ec0176c1e2737405b9650dc223ed08d41e968", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3c2ec0176c1e2737405b9650dc223ed08d41e968", "committedDate": "2020-03-17T12:04:08Z", "message": "FM2-95: Implement sorting for Patient Resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c2ec0176c1e2737405b9650dc223ed08d41e968", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/3c2ec0176c1e2737405b9650dc223ed08d41e968", "committedDate": "2020-03-17T12:04:08Z", "message": "FM2-95: Implement sorting for Patient Resource"}, "afterCommit": {"oid": "400f63ffcad3ca403c7e20942758dd4223a6afee", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/400f63ffcad3ca403c7e20942758dd4223a6afee", "committedDate": "2020-03-17T15:30:43Z", "message": "FM2-95: Implement sorting for Patient Resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f9432a3cbdfeddb90171d031c031559b4b5332d", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4f9432a3cbdfeddb90171d031c031559b4b5332d", "committedDate": "2020-03-17T19:01:33Z", "message": "FM2-95: Implement sorting for Patient Resource\n\nImproves sorting for Person resource and provides a means of sorting by name"}, "afterCommit": {"oid": "a478145d86c19e16f83014219d9aeee990015861", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a478145d86c19e16f83014219d9aeee990015861", "committedDate": "2020-03-17T19:14:26Z", "message": "FM2-95: Implement sorting for Patient Resource\n\nImproves sorting for Person resource and provides a means of sorting by name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06ad13fee8956c80132ddd9bc601dfa18604fcc", "author": {"user": {"login": "CaptainDaVinci", "name": "Yash  Kothari"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d06ad13fee8956c80132ddd9bc601dfa18604fcc", "committedDate": "2020-03-17T19:16:33Z", "message": "FM2-95: Implement sorting for Patient Resource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a478145d86c19e16f83014219d9aeee990015861", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/a478145d86c19e16f83014219d9aeee990015861", "committedDate": "2020-03-17T19:14:26Z", "message": "FM2-95: Implement sorting for Patient Resource\n\nImproves sorting for Person resource and provides a means of sorting by name"}, "afterCommit": {"oid": "6e6867a6e618454d3fe5f7a3710bc10300ebad86", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6e6867a6e618454d3fe5f7a3710bc10300ebad86", "committedDate": "2020-03-17T19:16:33Z", "message": "FM2-95: Implement sorting for Patient Resource\n\nImproves sorting for Person resource and provides a means of sorting by name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzQyMDc4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#pullrequestreview-376342078", "createdAt": "2020-03-17T19:30:38Z", "commit": {"oid": "400f63ffcad3ca403c7e20942758dd4223a6afee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec7d75d73afa9821cf71f2e0079f2b1a6d5d3ed9", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ec7d75d73afa9821cf71f2e0079f2b1a6d5d3ed9", "committedDate": "2020-03-17T19:44:02Z", "message": "FM2-95: Implement sorting for Patient Resource\n\nImproves sorting for Person resource and provides a means of sorting by name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e6867a6e618454d3fe5f7a3710bc10300ebad86", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/6e6867a6e618454d3fe5f7a3710bc10300ebad86", "committedDate": "2020-03-17T19:16:33Z", "message": "FM2-95: Implement sorting for Patient Resource\n\nImproves sorting for Person resource and provides a means of sorting by name"}, "afterCommit": {"oid": "ec7d75d73afa9821cf71f2e0079f2b1a6d5d3ed9", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ec7d75d73afa9821cf71f2e0079f2b1a6d5d3ed9", "committedDate": "2020-03-17T19:44:02Z", "message": "FM2-95: Implement sorting for Patient Resource\n\nImproves sorting for Person resource and provides a means of sorting by name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4229, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}