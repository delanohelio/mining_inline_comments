{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDA3MTkz", "number": 56, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyMDowM1rODdXslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0MDo1MlrODdzpJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTIzNTQyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirLocationService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyMDowM1rOFl7r3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOTo0MDozM1rOFmUsdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMxOTUxNg==", "bodyText": "Instead of List<TokenParam> tags use TokenAndListParam tags", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375319516", "createdAt": "2020-02-05T15:20:03Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirLocationService.java", "diffHunk": "@@ -28,4 +30,6 @@\n \tCollection<Location> findLocationsByPostalCode(@NotNull String postalCode);\n \t\n \tCollection<Location> findLocationsByState(@NotNull String state);\n+\t\n+\tCollection<Location> findLocationsByTags(@NotNull List<TokenParam> tags);\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83b378477dc9c79b48eca89d070d85185086fe3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyMTQwMA==", "bodyText": "Also, @NotNull doesn't apply to the list. You should be checking if it's empty", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375321400", "createdAt": "2020-02-05T15:23:00Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirLocationService.java", "diffHunk": "@@ -28,4 +30,6 @@\n \tCollection<Location> findLocationsByPostalCode(@NotNull String postalCode);\n \t\n \tCollection<Location> findLocationsByState(@NotNull String state);\n+\t\n+\tCollection<Location> findLocationsByTags(@NotNull List<TokenParam> tags);\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMxOTUxNg=="}, "originalCommit": {"oid": "f83b378477dc9c79b48eca89d070d85185086fe3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM0MjI3Mg==", "bodyText": "I'd rather avoid using TokenAndListParam right now because things get a bit dicey (the ...AndListParam contains ...OrListParam entries which contain actual TokenParams). I'm working on setting up a pattern to work with these types of things.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375342272", "createdAt": "2020-02-05T15:53:49Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirLocationService.java", "diffHunk": "@@ -28,4 +30,6 @@\n \tCollection<Location> findLocationsByPostalCode(@NotNull String postalCode);\n \t\n \tCollection<Location> findLocationsByState(@NotNull String state);\n+\t\n+\tCollection<Location> findLocationsByTags(@NotNull List<TokenParam> tags);\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMxOTUxNg=="}, "originalCommit": {"oid": "f83b378477dc9c79b48eca89d070d85185086fe3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyOTI3MA==", "bodyText": "This makes sense, I'm looking forward to improve this once you've finish setting up the enhanced search.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375729270", "createdAt": "2020-02-06T09:40:33Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirLocationService.java", "diffHunk": "@@ -28,4 +30,6 @@\n \tCollection<Location> findLocationsByPostalCode(@NotNull String postalCode);\n \t\n \tCollection<Location> findLocationsByState(@NotNull String state);\n+\t\n+\tCollection<Location> findLocationsByTags(@NotNull List<TokenParam> tags);\n }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMxOTUxNg=="}, "originalCommit": {"oid": "f83b378477dc9c79b48eca89d070d85185086fe3"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTI1NzU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirLocationDao.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyNToxNVrOFl75dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToyNToxNVrOFl75dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyMjk5Ng==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375322996", "createdAt": "2020-02-05T15:25:15Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirLocationDao.java", "diffHunk": "@@ -28,4 +30,6 @@\n \tCollection<Location> findLocationsByPostalCode(@NotNull String postalCode);\n \t\n \tCollection<Location> findLocationsByState(@NotNull String state);\n+\t\n+\tCollection<Location> findLocationsByTags(@NotNull List<TokenParam> tags);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83b378477dc9c79b48eca89d070d85185086fe3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTI4NzAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirLocationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozMTo0NFrOFl8L4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNTozMTo0NFrOFl8L4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMyNzcxMw==", "bodyText": "Could we revise this to just findLocationsByTag(@NotNull TokenParam tag)? The correct implementation for a list of tags is quite a bit more complicated.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375327713", "createdAt": "2020-02-05T15:31:44Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirLocationService.java", "diffHunk": "@@ -28,4 +30,6 @@\n \tCollection<Location> findLocationsByPostalCode(@NotNull String postalCode);\n \t\n \tCollection<Location> findLocationsByState(@NotNull String state);\n+\t\n+\tCollection<Location> findLocationsByTags(@NotNull List<TokenParam> tags);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83b378477dc9c79b48eca89d070d85185086fe3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDI5NTA5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjoxNjoxOFrOFmZExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjoxNjoxOFrOFmZExg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwMTAzMA==", "bodyText": "You should remove this code block. It has no use or do you have any use for this?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375801030", "createdAt": "2020-02-06T12:16:18Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderTest.java", "diffHunk": "@@ -222,4 +231,17 @@ public void findLocationsByWrongPostalCode_shouldReturnBundleWithEmptyEntries()\n \t\tassertThat(results.getEntry(), is(empty()));\n \t}\n \t\n+\t@Test\n+\tpublic void findLocationsByTags_shouldReturnMatchingBundleOfLocations() {\n+\t\tTokenParam tag = new TokenParam(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG, LOGIN_LOCATION_TAG_NAME);\n+\t\twhen(locationService.findLocationsByTag(tag)).thenReturn(Collections.singletonList(location));\n+\t\tStringParam param = new StringParam();\n+\t\tparam.setValue(LOCATION_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9f34e9bdc0c5ac9d3c68532b72410cc9c5009"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDMwMzc5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjoxOTo1NlrOFmZKOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjoxOTo1NlrOFmZKOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwMjQyNg==", "bodyText": "It should be findLocationByTag_shouldReturnLocationsContainingGivenTag", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375802426", "createdAt": "2020-02-06T12:19:56Z", "author": {"login": "corneliouzbett"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirLocationDaoImplTest.java", "diffHunk": "@@ -171,4 +175,12 @@ public void findLocationsByState_shouldReturnEmptyCollectionWhenCalledWithUnknow\n \t\tassertThat(locations, notNullValue());\n \t\tassertThat(locations.size(), equalTo(0));\n \t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByTags_shouldReturnLocationsContainingGivenTags() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9f34e9bdc0c5ac9d3c68532b72410cc9c5009"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDM0OTUyOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozNzowNlrOFmZmMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozNzowNlrOFmZmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwOTU4NQ==", "bodyText": "Change this to shouldReturn404IfLocationNotFound", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r375809585", "createdAt": "2020-02-06T12:37:06Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.Mockito.when;\n+\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.Location;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.api.FhirLocationService;\n+import org.openmrs.module.fhir2.web.servlet.BaseFhirResourceProviderTest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LocationFhirResourceProviderWebTest extends BaseFhirResourceProviderTest<LocationFhirResourceProvider, Location> {\n+\t\n+\tprivate static final String LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n+\t\n+\tprivate static final String WRONG_LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aabd\";\n+\t\n+\t@Mock\n+\tprivate FhirLocationService locationService;\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate LocationFhirResourceProvider locationProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tlocationProvider = new LocationFhirResourceProvider();\n+\t\tlocationProvider.setFhirLocationService(locationService);\n+\t\tsuper.setup();\n+\t}\n+\t\n+\t@Override\n+\tpublic LocationFhirResourceProvider getResourceProvider() {\n+\t\treturn locationProvider;\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnLocationByUuid() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\twhen(locationService.getLocationByUuid(LOCATION_UUID)).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location/\" + LOCATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tLocation resource = readResponse(response);\n+\t\tassertThat(resource.getIdElement().getIdPart(), equalTo(LOCATION_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturn404IfPersonNotFound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1a9f34e9bdc0c5ac9d3c68532b72410cc9c5009"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTc4NzQ5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMTo0OFrOFmniAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTozMTo0OFrOFmniAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAzNzg4OQ==", "bodyText": "Could we make this \"...LocationNotFound\"", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r376037889", "createdAt": "2020-02-06T19:31:48Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.Address;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Location;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirLocationService;\n+import org.openmrs.module.fhir2.web.servlet.BaseFhirResourceProviderTest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LocationFhirResourceProviderWebTest extends BaseFhirResourceProviderTest<LocationFhirResourceProvider, Location> {\n+\t\n+\tprivate static final String LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n+\t\n+\tprivate static final String WRONG_LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aabd\";\n+\t\n+\tprivate static final String LOCATION_NAME = \"Ngeria\";\n+\t\n+\tprivate static final String CITY = \"Test City\";\n+\t\n+\tprivate static final String COUNTRY = \"Kenya\";\n+\t\n+\tprivate static final String STATE = \"Pan villa\";\n+\t\n+\tprivate static final String POSTAL_CODE = \"234-30100\";\n+\t\n+\tprivate static final String LOGIN_LOCATION_TAG_NAME = \"login\";\n+\t\n+\tprivate static final String LOGIN_LOCATION_TAG_DESCRIPTION = \"Identify login locations\";\n+\t\n+\t@Mock\n+\tprivate FhirLocationService locationService;\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate LocationFhirResourceProvider locationProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tlocationProvider = new LocationFhirResourceProvider();\n+\t\tlocationProvider.setFhirLocationService(locationService);\n+\t\tsuper.setup();\n+\t}\n+\t\n+\t@Override\n+\tpublic LocationFhirResourceProvider getResourceProvider() {\n+\t\treturn locationProvider;\n+\t}\n+\t\n+\t@Test\n+\tpublic void getLocationById_shouldReturnLocationWithMatchingUuid() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\twhen(locationService.getLocationByUuid(LOCATION_UUID)).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location/\" + LOCATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tLocation resource = readResponse(response);\n+\t\tassertThat(resource.getIdElement().getIdPart(), equalTo(LOCATION_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationByName_shouldReturnBundleOfLocationsWithMatchingName() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setName(LOCATION_NAME);\n+\t\twhen(locationService.findLocationByName(LOCATION_NAME)).thenReturn(Collections.singletonList(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?name=\" + LOCATION_NAME).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByCity_shouldReturnBundleOfLocationsWithMatchingCity() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setCity(CITY));\n+\t\twhen(locationService.findLocationsByCity(CITY)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-city=\" + CITY).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByCountry_shouldReturnBundleOfLocationsWithMatchingCountry() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setCountry(COUNTRY));\n+\t\twhen(locationService.findLocationsByCountry(COUNTRY)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-country=\" + COUNTRY).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByPostalCode_shouldReturnBundleOfLocationsWithMatchingAddressCode() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setPostalCode(POSTAL_CODE));\n+\t\twhen(locationService.findLocationsByPostalCode(POSTAL_CODE)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-postalcode=\" + POSTAL_CODE).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByState_shouldReturnBundleOfLocationsWithMatchingAddressState() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setCountry(STATE));\n+\t\twhen(locationService.findLocationsByState(STATE)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-state=\" + STATE).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByTag_shouldReturnBundleOfLocationsWithMatchingTag() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.getMeta().setTag(Collections.singletonList(new Coding(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG,\n+\t\t        LOGIN_LOCATION_TAG_NAME, LOGIN_LOCATION_TAG_DESCRIPTION)));\n+\t\t\n+\t\twhen(locationService.findLocationsByTag(any(TokenParam.class))).thenReturn(Collections.singletonList(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?_tag=\" + LOGIN_LOCATION_TAG_NAME).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturn404IfLocationsWereNotFound() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287996e7d4bd9cc134e010d977d4c8110011119b"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTgxNDE0OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0MDo1MlrOFmny4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxOTo0MDo1MlrOFmny4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA0MjIxMA==", "bodyText": "Ok. Now that we know this works, we want to actually ensure that we're generating the value we expect here, so:\n\nCreate a ArgumentCaptor object like so (in the class):\n\n@Captor\nArgumentCaptor<TokenParam> tagCaptor;\n\nAfter the assertThat statements you already have, add this:\n\nverify(locationService).findLocationsByTag(tagCaptor.capture());\nverify is from org.mockito.Mockito\n\nAdd some checks to ensure it is called with the parameters we expect:\n\nassertThat(codeCaptor.getValue(), notNullValue());\nassertThat(codeCaptor.getValue().getSystem, equalTo(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG));\nassertThat(codeCaptor.getValue().getValue(), equalTo(LOGIN_LOCATION_TAG_NAME));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/56#discussion_r376042210", "createdAt": "2020-02-06T19:40:52Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/LocationFhirResourceProviderWebTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Collections;\n+\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import lombok.AccessLevel;\n+import lombok.Getter;\n+import org.hl7.fhir.r4.model.Address;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Location;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.FhirLocationService;\n+import org.openmrs.module.fhir2.web.servlet.BaseFhirResourceProviderTest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LocationFhirResourceProviderWebTest extends BaseFhirResourceProviderTest<LocationFhirResourceProvider, Location> {\n+\t\n+\tprivate static final String LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aaba\";\n+\t\n+\tprivate static final String WRONG_LOCATION_UUID = \"c0938432-1691-11df-97a5-7038c432aabd\";\n+\t\n+\tprivate static final String LOCATION_NAME = \"Ngeria\";\n+\t\n+\tprivate static final String CITY = \"Test City\";\n+\t\n+\tprivate static final String COUNTRY = \"Kenya\";\n+\t\n+\tprivate static final String STATE = \"Pan villa\";\n+\t\n+\tprivate static final String POSTAL_CODE = \"234-30100\";\n+\t\n+\tprivate static final String LOGIN_LOCATION_TAG_NAME = \"login\";\n+\t\n+\tprivate static final String LOGIN_LOCATION_TAG_DESCRIPTION = \"Identify login locations\";\n+\t\n+\t@Mock\n+\tprivate FhirLocationService locationService;\n+\t\n+\t@Getter(AccessLevel.PUBLIC)\n+\tprivate LocationFhirResourceProvider locationProvider;\n+\t\n+\t@Before\n+\t@Override\n+\tpublic void setup() throws Exception {\n+\t\tlocationProvider = new LocationFhirResourceProvider();\n+\t\tlocationProvider.setFhirLocationService(locationService);\n+\t\tsuper.setup();\n+\t}\n+\t\n+\t@Override\n+\tpublic LocationFhirResourceProvider getResourceProvider() {\n+\t\treturn locationProvider;\n+\t}\n+\t\n+\t@Test\n+\tpublic void getLocationById_shouldReturnLocationWithMatchingUuid() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setId(LOCATION_UUID);\n+\t\twhen(locationService.getLocationByUuid(LOCATION_UUID)).thenReturn(location);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location/\" + LOCATION_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\t\n+\t\tLocation resource = readResponse(response);\n+\t\tassertThat(resource.getIdElement().getIdPart(), equalTo(LOCATION_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationByName_shouldReturnBundleOfLocationsWithMatchingName() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setName(LOCATION_NAME);\n+\t\twhen(locationService.findLocationByName(LOCATION_NAME)).thenReturn(Collections.singletonList(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?name=\" + LOCATION_NAME).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByCity_shouldReturnBundleOfLocationsWithMatchingCity() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setCity(CITY));\n+\t\twhen(locationService.findLocationsByCity(CITY)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-city=\" + CITY).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByCountry_shouldReturnBundleOfLocationsWithMatchingCountry() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setCountry(COUNTRY));\n+\t\twhen(locationService.findLocationsByCountry(COUNTRY)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-country=\" + COUNTRY).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByPostalCode_shouldReturnBundleOfLocationsWithMatchingAddressCode() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setPostalCode(POSTAL_CODE));\n+\t\twhen(locationService.findLocationsByPostalCode(POSTAL_CODE)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-postalcode=\" + POSTAL_CODE).accept(FhirMediaTypes.JSON)\n+\t\t        .go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByState_shouldReturnBundleOfLocationsWithMatchingAddressState() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.setAddress(new Address().setCountry(STATE));\n+\t\twhen(locationService.findLocationsByState(STATE)).thenReturn(Collections.singleton(location));\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Location?address-state=\" + STATE).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void findLocationsByTag_shouldReturnBundleOfLocationsWithMatchingTag() throws Exception {\n+\t\tLocation location = new Location();\n+\t\tlocation.getMeta().setTag(Collections.singletonList(new Coding(FhirConstants.OPENMRS_FHIR_EXT_LOCATION_TAG,\n+\t\t        LOGIN_LOCATION_TAG_NAME, LOGIN_LOCATION_TAG_DESCRIPTION)));\n+\t\t\n+\t\twhen(locationService.findLocationsByTag(any(TokenParam.class))).thenReturn(Collections.singletonList(location));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "287996e7d4bd9cc134e010d977d4c8110011119b"}, "originalPosition": 163}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1236, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}