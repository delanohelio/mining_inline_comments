{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDI0NjQ1", "number": 243, "title": "FM2-215: Add create, update, and delete methods for Encounter.", "bodyText": "Description of what I changed\nAdd create, update, and delete methods for Encounter.\nIssue I worked on\nhttps://issues.openmrs.org/projects/FM2/issues/FM2-215?filter=myopenissues\nChecklist: I completed these to help reviewers :)\n\n\n[X ] My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n[X ] I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n[ X] I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n[ X] All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n[ X] My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-07-03T12:08:24Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243", "merged": true, "mergeCommit": {"oid": "77db160c7fa22d01a02d839655c2b9ad43dc5423"}, "closed": true, "closedAt": "2020-07-10T02:46:54Z", "author": {"login": "Akayeshmantha"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyLj8tgFqTQ0MjgxMDc3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABczKsQygBqjM1Mjg1NTY4NTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODEwNzc5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#pullrequestreview-442810779", "createdAt": "2020-07-06T06:46:27Z", "commit": {"oid": "e068a26886586b61f1d09bfe667a60ccd7ef9816"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0NjoyN1rOGtKtGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjo0NjoyN1rOGtKtGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxNDQ4OA==", "bodyText": "return FhirProviderUtils.buildDelete(Encounter30_40.convertEncounter(encounter))));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450014488", "createdAt": "2020-07-06T06:46:27Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java", "diffHunk": "@@ -61,6 +70,36 @@ public Encounter getEncounterById(@IdParam @NotNull IdType id) {\n \t\t\n \t\treturn Encounter30_40.convertEncounter(encounter);\n \t}\n+\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome creatEncounter(@ResourceParam Encounter encounter) {\n+\t\treturn FhirProviderUtils.buildCreate(\n+\t\t\t\tencounterService.create(Encounter30_40.convertEncounter(encounter)));\n+\t}\n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateEncounter(@IdParam IdType id, @ResourceParam Encounter encounter) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tencounter.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(encounterService.update(id.getIdPart(),\n+\t\t\t\tEncounter30_40.convertEncounter(encounter)));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteEncounter(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = encounterService.delete(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter to delete with id \" + id.getIdPart());\n+\t\t}\n+\t\treturn OperationOutcome30_40.convertOperationOutcome(FhirProviderUtils.buildDelete(encounter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e068a26886586b61f1d09bfe667a60ccd7ef9816"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e068a26886586b61f1d09bfe667a60ccd7ef9816", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e068a26886586b61f1d09bfe667a60ccd7ef9816", "committedDate": "2020-07-03T12:07:02Z", "message": "FM2-215:Add create, update, and delete methods for Encounter."}, "afterCommit": {"oid": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "committedDate": "2020-07-06T11:56:33Z", "message": "FM2-215:Add create, update, and delete methods for Encounter."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDM3Njk0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#pullrequestreview-443037694", "createdAt": "2020-07-06T12:39:57Z", "commit": {"oid": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozOTo1N1rOGtVi7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0MDoxMlrOGtVjdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjEwOQ==", "bodyText": "Please use delete instead of get.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450192109", "createdAt": "2020-07-06T12:39:57Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -553,4 +566,92 @@ private MockHttpServletResponse getEncounterHistoryRequest() throws IOException,\n \t\treturn get(\"/Encounter/\" + ENCOUNTER_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createEncounter_shouldCreateNewEncounter() throws Exception {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = new org.hl7.fhir.r4.model.Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.create(any(org.hl7.fhir.r4.model.Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Encounter\").jsonContent(encounterJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldUpdateRequestedEncounter() throws Exception {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = new org.hl7.fhir.r4.model.Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.update(any(String.class), any(org.hl7.fhir.r4.model.Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForNoId() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldDeleteEncounter() throws Exception {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = new org.hl7.fhir.r4.model.Encounter();\n+\t\tencounter.setId(ENCOUNTER_UUID);\n+\t\t\n+\t\twhen(encounterService.delete(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/Encounter/\" + ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldReturn404ForNonExistingEncounter() throws Exception {\n+\t\twhen(encounterService.get(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjI0NA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/243#discussion_r450192244", "createdAt": "2020-07-06T12:40:12Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -587,4 +604,85 @@ private MockHttpServletResponse getEncounterHistoryRequest() throws IOException,\n \t\treturn get(\"/Encounter/\" + ENCOUNTER_UUID + \"/_history\").accept(FhirMediaTypes.JSON).go();\n \t}\n \t\n+\t@Test\n+\tpublic void createEncounter_shouldCreateNewEncounter() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.create(any(Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = post(\"/Encounter\").jsonContent(encounterJson).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isCreated());\n+\t\tassertThat(response.getStatus(), is(201));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldUpdateRequestedEncounter() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\twhen(encounterService.update(any(String.class), any(Encounter.class))).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForNoId() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(), containsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void updateEncounter_shouldErrorForIdMissMatch() throws Exception {\n+\t\tString encounterJson;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_ENCOUNTER_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tencounterJson = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\t\t\n+\t\tMockHttpServletResponse response = put(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).jsonContent(encounterJson)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t    containsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldDeleteEncounter() throws Exception {\n+\t\twhen(encounterService.delete(ENCOUNTER_UUID)).thenReturn(encounter);\n+\t\t\n+\t\tMockHttpServletResponse response = delete(\"/Encounter/\" + ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();\n+\t\t\n+\t\tassertThat(response, isOk());\n+\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void deleteEncounter_shouldReturn404ForNonExistingEncounter() throws Exception {\n+\t\twhen(encounterService.get(WRONG_ENCOUNTER_UUID)).thenReturn(null);\n+\t\t\n+\t\tMockHttpServletResponse response = get(\"/Encounter/\" + WRONG_ENCOUNTER_UUID).accept(FhirMediaTypes.JSON).go();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676"}, "originalPosition": 143}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/c4b9b009df8a9abc93bdaf317366c25d7fbdd676", "committedDate": "2020-07-06T11:56:33Z", "message": "FM2-215:Add create, update, and delete methods for Encounter."}, "afterCommit": {"oid": "f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "committedDate": "2020-07-06T12:57:58Z", "message": "FM2-215:Add create, update, and delete methods for Encounter."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c54bf95bf5ad041393908f55e3b87b1feb56c6", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/81c54bf95bf5ad041393908f55e3b87b1feb56c6", "committedDate": "2020-07-09T08:20:15Z", "message": "FM2-215:Add create, update, and delete methods for Encounter."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f65d25d56e7c6ab1cf1bccfcba08cbd91caf783a", "committedDate": "2020-07-06T12:57:58Z", "message": "FM2-215:Add create, update, and delete methods for Encounter."}, "afterCommit": {"oid": "81c54bf95bf5ad041393908f55e3b87b1feb56c6", "author": {"user": {"login": "Akayeshmantha", "name": "Ayeshmantha Perera"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/81c54bf95bf5ad041393908f55e3b87b1feb56c6", "committedDate": "2020-07-09T08:20:15Z", "message": "FM2-215:Add create, update, and delete methods for Encounter."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4133, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}