{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTk2MDk1", "number": 46, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoyMTowNVrODbPKuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoyMTowNVrODbPKuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODg2NjUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoyMTowNVrOFimryA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNToyMVrOFioaBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyOTcwNA==", "bodyText": "I'd prefer the criteria version of this:\nreturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class).createAlias(\"patient\", \"p\")\n\t\t\t\t.createAlias(\"p.identifiers\", \"pi\")\n\t\t\t\t.add(eq(\"pi.identifier\", patientIdentifier))\n\t\t\t\t.list();\n\nMy reason for favouring Criteria over HQL or JPQL is that it will make things easier when we get to implementing search across multiple properties.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/46#discussion_r371829704", "createdAt": "2020-01-28T14:21:05Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -24,14 +26,23 @@\n @Component\n @Setter(AccessLevel.PACKAGE)\n public class FhirEncounterDaoImpl implements FhirEncounterDao {\n-\t\n+\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n-\t\n+\n \t@Override\n \tpublic Encounter getEncounterByUuid(String uuid) {\n \t\treturn (Encounter) sessionFactory.getCurrentSession().createCriteria(Encounter.class).add(eq(\"uuid\", uuid))\n-\t\t        .uniqueResult();\n+\t\t\t\t.uniqueResult();\n+\t}\n+\n+\t@Override\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n+\t\treturn sessionFactory.getCurrentSession().createQuery(\"FROM Encounter e \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21b9f9dfc3478926dab3394935e9a87665ef2868"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NzkyNQ==", "bodyText": "Got it", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/46#discussion_r371857925", "createdAt": "2020-01-28T15:05:21Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -24,14 +26,23 @@\n @Component\n @Setter(AccessLevel.PACKAGE)\n public class FhirEncounterDaoImpl implements FhirEncounterDao {\n-\t\n+\n \t@Inject\n \t@Named(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n-\t\n+\n \t@Override\n \tpublic Encounter getEncounterByUuid(String uuid) {\n \t\treturn (Encounter) sessionFactory.getCurrentSession().createCriteria(Encounter.class).add(eq(\"uuid\", uuid))\n-\t\t        .uniqueResult();\n+\t\t\t\t.uniqueResult();\n+\t}\n+\n+\t@Override\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n+\t\treturn sessionFactory.getCurrentSession().createQuery(\"FROM Encounter e \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyOTcwNA=="}, "originalCommit": {"oid": "21b9f9dfc3478926dab3394935e9a87665ef2868"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1222, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}