{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDA1MzQ2", "number": 199, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTowMjozM1rOEEBBDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTowNDoyMFrOEEBDXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjQ2NDEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTowMjozM1rOGhYO1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQxMzoyNDozMlrOGmmjXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MzIwNQ==", "bodyText": "@ibacher I added the following implementation to allow search by ingredient_code. But while running the unit tests, I get an  Ambiguous column name \"CONCEPT_ID\"; error. Not sure why this is happening.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/199#discussion_r437653205", "createdAt": "2020-06-09T19:02:33Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -34,18 +34,36 @@ public Drug createOrUpdate(Drug drug) {\n \t\t\n \t\treturn drug;\n \t}\n-\t\n+\n \t@Override\n-\tpublic Collection<Drug> searchForMedications(TokenAndListParam code, TokenAndListParam dosageForm,\n-\t        TokenAndListParam ingredientCode, TokenAndListParam status) {\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Drug.class);\n-\t\thandleMedicationCode(criteria, code);\n-\t\thandleMedicationDosageForm(criteria, dosageForm);\n-\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.CODED_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.DOSAGE_FORM_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationDosageForm(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.INGREDIENT_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleIngredientCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.BOOLEAN_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleBoolean(\"retired\", convertStringStatusToBoolean((TokenAndListParam) param.getParam())).ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n-\t\n+\n+\tprivate void handleIngredientCode(Criteria criteria, TokenAndListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"ic\");\n+\n+\t\t\thandleCodeableConcept(criteria, ingredientCode, \"ic\", \"icm\", \"icrt\").ifPresent(criteria::add);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da995b551fa1f59437825d2088de05add07dd6e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzczMjI1Nw==", "bodyText": "Seeing the query logs, the concept table is joining twice and that's why it is not able to distinguish between the column names. But why it is joining twice is still a matter of concern.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/199#discussion_r437732257", "createdAt": "2020-06-09T21:26:48Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -34,18 +34,36 @@ public Drug createOrUpdate(Drug drug) {\n \t\t\n \t\treturn drug;\n \t}\n-\t\n+\n \t@Override\n-\tpublic Collection<Drug> searchForMedications(TokenAndListParam code, TokenAndListParam dosageForm,\n-\t        TokenAndListParam ingredientCode, TokenAndListParam status) {\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Drug.class);\n-\t\thandleMedicationCode(criteria, code);\n-\t\thandleMedicationDosageForm(criteria, dosageForm);\n-\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.CODED_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.DOSAGE_FORM_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationDosageForm(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.INGREDIENT_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleIngredientCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.BOOLEAN_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleBoolean(\"retired\", convertStringStatusToBoolean((TokenAndListParam) param.getParam())).ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n-\t\n+\n+\tprivate void handleIngredientCode(Criteria criteria, TokenAndListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"ic\");\n+\n+\t\t\thandleCodeableConcept(criteria, ingredientCode, \"ic\", \"icm\", \"icrt\").ifPresent(criteria::add);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MzIwNQ=="}, "originalCommit": {"oid": "0da995b551fa1f59437825d2088de05add07dd6e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODExMTgwOA==", "bodyText": "@varung-31 Can you paste the query here?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/199#discussion_r438111808", "createdAt": "2020-06-10T13:15:05Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -34,18 +34,36 @@ public Drug createOrUpdate(Drug drug) {\n \t\t\n \t\treturn drug;\n \t}\n-\t\n+\n \t@Override\n-\tpublic Collection<Drug> searchForMedications(TokenAndListParam code, TokenAndListParam dosageForm,\n-\t        TokenAndListParam ingredientCode, TokenAndListParam status) {\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Drug.class);\n-\t\thandleMedicationCode(criteria, code);\n-\t\thandleMedicationDosageForm(criteria, dosageForm);\n-\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.CODED_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.DOSAGE_FORM_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationDosageForm(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.INGREDIENT_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleIngredientCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.BOOLEAN_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleBoolean(\"retired\", convertStringStatusToBoolean((TokenAndListParam) param.getParam())).ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n-\t\n+\n+\tprivate void handleIngredientCode(Criteria criteria, TokenAndListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"ic\");\n+\n+\t\t\thandleCodeableConcept(criteria, ingredientCode, \"ic\", \"icm\", \"icrt\").ifPresent(criteria::add);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MzIwNQ=="}, "originalCommit": {"oid": "0da995b551fa1f59437825d2088de05add07dd6e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODEzMTcwNA==", "bodyText": "select\n        this_.drug_id as drug_id1_27_3_,\n        this_.name as name2_27_3_,\n        this_.combination as combinat3_27_3_,\n        this_.maximum_daily_dose as maximum_4_27_3_,\n        this_.minimum_daily_dose as minimum_5_27_3_,\n        this_.strength as strength6_27_3_,\n        this_.date_created as date_cre7_27_3_,\n        this_.changed_by as changed_8_27_3_,\n        this_.date_changed as date_cha9_27_3_,\n        this_.retired as retired10_27_3_,\n        this_.date_retired as date_re11_27_3_,\n        this_.retire_reason as retire_12_27_3_,\n        this_.concept_id as concept13_27_3_,\n        this_.dosage_form as dosage_14_27_3_,\n        this_.uuid as uuid15_27_3_,\n        this_.creator as creator16_27_3_,\n        this_.retired_by as retired17_27_3_,\n        i1_.drug_id as drug_id1_28_0_,\n        i1_.ingredient_id as ingredie2_28_0_,\n        i1_.uuid as uuid3_28_0_,\n        i1_.strength as strength4_28_0_,\n        i1_.units as units5_28_0_,\n        ic2_.concept_id as concept_1_6_1_,\n        ic2_.uuid as uuid2_6_1_,\n        ic2_.retired as retired3_6_1_,\n        ic2_.date_created as date_cre4_6_1_,\n        ic2_.version as version5_6_1_,\n        ic2_.date_changed as date_cha6_6_1_,\n        ic2_.is_set as is_set7_6_1_,\n        ic2_.retire_reason as retire_r8_6_1_,\n        ic2_.date_retired as date_ret9_6_1_,\n        ic2_.retired_by as retired10_6_1_,\n        ic2_.datatype_id as datatyp11_6_1_,\n        ic2_.class_id as class_i12_6_1_,\n        ic2_.changed_by as changed13_6_1_,\n        ic2_.creator as creator14_6_1_,\n        ic2_1_.hi_absolute as hi_absol2_18_1_,\n        ic2_1_.hi_critical as hi_criti3_18_1_,\n        ic2_1_.hi_normal as hi_norma4_18_1_,\n        ic2_1_.low_absolute as low_abso5_18_1_,\n        ic2_1_.low_critical as low_crit6_18_1_,\n        ic2_1_.low_normal as low_norm7_18_1_,\n        ic2_1_.units as units8_18_1_,\n        ic2_1_.precise as precise9_18_1_,\n        ic2_1_.display_precision as display10_18_1_,\n        ic2_2_.handler as handler2_11_1_,\n        case \n            when ic2_1_.concept_id is not null then 1 \n            when ic2_2_.concept_id is not null then 2 \n            when ic2_.concept_id is not null then 0 \n        end as clazz_1_,\n        ic2_.concept_id as concept_1_6_2_,\n        ic2_.uuid as uuid2_6_2_,\n        ic2_.retired as retired3_6_2_,\n        ic2_.date_created as date_cre4_6_2_,\n        ic2_.version as version5_6_2_,\n        ic2_.date_changed as date_cha6_6_2_,\n        ic2_.is_set as is_set7_6_2_,\n        ic2_.retire_reason as retire_r8_6_2_,\n        ic2_.date_retired as date_ret9_6_2_,\n        ic2_.retired_by as retired10_6_2_,\n        ic2_.datatype_id as datatyp11_6_2_,\n        ic2_.class_id as class_i12_6_2_,\n        ic2_.changed_by as changed13_6_2_,\n        ic2_.creator as creator14_6_2_,\n        ic2_1_.hi_absolute as hi_absol2_18_2_,\n        ic2_1_.hi_critical as hi_criti3_18_2_,\n        ic2_1_.hi_normal as hi_norma4_18_2_,\n        ic2_1_.low_absolute as low_abso5_18_2_,\n        ic2_1_.low_critical as low_crit6_18_2_,\n        ic2_1_.low_normal as low_norm7_18_2_,\n        ic2_1_.units as units8_18_2_,\n        ic2_1_.precise as precise9_18_2_,\n        ic2_1_.display_precision as display10_18_2_,\n        ic2_2_.handler as handler2_11_2_,\n        case \n            when ic2_1_.concept_id is not null then 1 \n            when ic2_2_.concept_id is not null then 2 \n            when ic2_.concept_id is not null then 0 \n        end as clazz_2_ \n    from\n        drug this_ \n    inner join\n        drug_ingredient i1_ \n            on this_.drug_id=i1_.drug_id \n    inner join\n        concept ic2_ \n            on i1_.ingredient_id=ic2_.concept_id \n    left outer join\n        concept_numeric ic2_1_ \n            on ic2_.concept_id=ic2_1_.concept_id \n    left outer join\n        concept_complex ic2_2_ \n            on ic2_.concept_id=ic2_2_.concept_id \n    inner join\n        concept ic2_ \n            on i1_.ingredient_id=ic2_.concept_id \n    left outer join\n        concept_numeric ic2_1_ \n            on ic2_.concept_id=ic2_1_.concept_id \n    left outer join\n        concept_complex ic2_2_ \n            on ic2_.concept_id=ic2_2_.concept_id \n    where\n        (\n            (\n                (\n                    ic2_.concept_id in (\n                        ?\n                    ) \n                    or ic2_.uuid in (\n                        ?\n                    )\n                )\n            )\n        ) limit ?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/199#discussion_r438131704", "createdAt": "2020-06-10T13:42:48Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -34,18 +34,36 @@ public Drug createOrUpdate(Drug drug) {\n \t\t\n \t\treturn drug;\n \t}\n-\t\n+\n \t@Override\n-\tpublic Collection<Drug> searchForMedications(TokenAndListParam code, TokenAndListParam dosageForm,\n-\t        TokenAndListParam ingredientCode, TokenAndListParam status) {\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Drug.class);\n-\t\thandleMedicationCode(criteria, code);\n-\t\thandleMedicationDosageForm(criteria, dosageForm);\n-\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.CODED_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.DOSAGE_FORM_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationDosageForm(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.INGREDIENT_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleIngredientCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.BOOLEAN_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleBoolean(\"retired\", convertStringStatusToBoolean((TokenAndListParam) param.getParam())).ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n-\t\n+\n+\tprivate void handleIngredientCode(Criteria criteria, TokenAndListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"ic\");\n+\n+\t\t\thandleCodeableConcept(criteria, ingredientCode, \"ic\", \"icm\", \"icrt\").ifPresent(criteria::add);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MzIwNQ=="}, "originalCommit": {"oid": "0da995b551fa1f59437825d2088de05add07dd6e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzEzMDcxOQ==", "bodyText": "Resolved using DetachedCriteria.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/199#discussion_r443130719", "createdAt": "2020-06-20T13:24:32Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImpl.java", "diffHunk": "@@ -34,18 +34,36 @@ public Drug createOrUpdate(Drug drug) {\n \t\t\n \t\treturn drug;\n \t}\n-\t\n+\n \t@Override\n-\tpublic Collection<Drug> searchForMedications(TokenAndListParam code, TokenAndListParam dosageForm,\n-\t        TokenAndListParam ingredientCode, TokenAndListParam status) {\n-\t\tCriteria criteria = getSessionFactory().getCurrentSession().createCriteria(Drug.class);\n-\t\thandleMedicationCode(criteria, code);\n-\t\thandleMedicationDosageForm(criteria, dosageForm);\n-\t\thandleBoolean(\"retired\", convertStringStatusToBoolean(status)).ifPresent(criteria::add);\n-\t\t\n-\t\treturn criteria.list();\n+\tprotected void setupSearchParams(Criteria criteria, SearchParameterMap theParams) {\n+\t\ttheParams.getParameters().forEach(entry -> {\n+\t\t\tswitch (entry.getKey()) {\n+\t\t\t\tcase FhirConstants.CODED_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.DOSAGE_FORM_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleMedicationDosageForm(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.INGREDIENT_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleIngredientCode(criteria, (TokenAndListParam) param.getParam()));\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase FhirConstants.BOOLEAN_SEARCH_HANDLER:\n+\t\t\t\t\tentry.getValue().forEach(param -> handleBoolean(\"retired\", convertStringStatusToBoolean((TokenAndListParam) param.getParam())).ifPresent(criteria::add));\n+\t\t\t\t\tbreak;\n+\t\t\t}\n+\t\t});\n \t}\n-\t\n+\n+\tprivate void handleIngredientCode(Criteria criteria, TokenAndListParam ingredientCode) {\n+\t\tif (ingredientCode != null) {\n+\t\t\tcriteria.createAlias(\"ingredients\", \"i\");\n+\t\t\tcriteria.createAlias(\"i.ingredient\", \"ic\");\n+\n+\t\t\thandleCodeableConcept(criteria, ingredientCode, \"ic\", \"icm\", \"icrt\").ifPresent(criteria::add);\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1MzIwNQ=="}, "originalCommit": {"oid": "0da995b551fa1f59437825d2088de05add07dd6e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNjQ3MDA1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/MedicationSearchQueryImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTowNDoyMFrOGhYSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxOTowNDoyMFrOGhYSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzY1NDE2Ng==", "bodyText": "This is the test which gives me the ambiguous column name error.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/199#discussion_r437654166", "createdAt": "2020-06-09T19:04:20Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/search/MedicationSearchQueryImplTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.openmrs.module.fhir2.api.search;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.greaterThanOrEqualTo;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import ca.uhn.fhir.rest.param.TokenParam;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.hl7.fhir.r4.model.Medication;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.openmrs.Drug;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.TestFhirSpringConfiguration;\n+import org.openmrs.module.fhir2.api.dao.FhirMedicationDao;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.module.fhir2.api.translators.MedicationTranslator;\n+import org.openmrs.test.BaseModuleContextSensitiveTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ContextConfiguration;\n+\n+@ContextConfiguration(classes = TestFhirSpringConfiguration.class, inheritLocations = false)\n+public class MedicationSearchQueryImplTest extends BaseModuleContextSensitiveTest {\n+\n+\tprivate static final String CONCEPT_UUID = \"0f97e14e-cdc2-49ac-9255-b5126f8a5147\";\n+\n+\tprivate static final String WRONG_CONCEPT_UUID = \"0f97e14e-gdsh-49ac-9255-b5126f8a5147\";\n+\n+\tprivate static final String DOSAGE_FORM_UUID = \"e10ffe54-5184-4efe-8960-cd565ec1cdf8\";\n+\n+\tprivate static final String WRONG_DOSAGE_FORM_UUID = \"e10ffe54-5184-4efe-8960-cd565ds1cdf8\";\n+\n+\tprivate static final String INGREDIENT_CODE_UUID = \"d198bec0-d9c5-11e3-9c1a-0800200c9a66\";\n+\n+\tprivate static final String WRONG_INGREDIENT_CODE_UUID = \"d198bec0-d9c5-11e3-9c1a-dsh0200c9a66\";\n+\n+\tprivate static final String MEDICATION_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirMedicationDaoImplTest_initial_data.xml\";\n+\n+\tprivate static final int START_INDEX = 0;\n+\n+\tprivate static final int END_INDEX = 10;\n+\n+\t@Autowired\n+\tprivate FhirMedicationDao dao;\n+\n+\t@Autowired\n+\tprivate MedicationTranslator translator;\n+\n+\t@Autowired\n+\tprivate SearchQuery<Drug, Medication, FhirMedicationDao, MedicationTranslator> searchQuery;\n+\n+\t@Before\n+\tpublic void setup() throws Exception {\n+\t\texecuteDataSet(MEDICATION_INITIAL_DATA_XML);\n+\t}\n+\n+\tprivate IBundleProvider search(SearchParameterMap theParams) {\n+\t\treturn searchQuery.getQueryResults(theParams, dao, translator);\n+\t}\n+\n+\tprivate List<IBaseResource> get(IBundleProvider results) {\n+\t\treturn results.getResources(START_INDEX, END_INDEX);\n+\t}\n+\n+\t@Test\n+\tpublic void searchForMedications_shouldSearchMedicationsByCode() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tcode.addAnd(new TokenOrListParam().addOr(new TokenParam().setValue(CONCEPT_UUID)));\n+\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.CODED_SEARCH_HANDLER, code);\n+\n+\t\tIBundleProvider result = search(theParams);\n+\n+\t\tList<IBaseResource> resultList = get(result);\n+\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(((Medication) resultList.iterator().next()).getCode().getCodingFirstRep().getCode(), equalTo(CONCEPT_UUID));\n+\t}\n+\n+\t@Test\n+\tpublic void searchForMedications_shouldSearchMedicationsByWrongCode() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tcode.addAnd(new TokenOrListParam().addOr(new TokenParam().setValue(WRONG_CONCEPT_UUID)));\n+\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.CODED_SEARCH_HANDLER, code);\n+\n+\t\tIBundleProvider result = search(theParams);\n+\n+\t\tList<IBaseResource> resultList = get(result);\n+\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(resultList.size(), equalTo(0));\n+\t}\n+\n+\t@Test\n+\tpublic void searchForMedications_shouldSearchMedicationsByDosageForm() {\n+\t\tTokenAndListParam dosageForm = new TokenAndListParam();\n+\t\tdosageForm.addAnd(new TokenOrListParam().addOr(new TokenParam().setValue(DOSAGE_FORM_UUID)));\n+\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.DOSAGE_FORM_SEARCH_HANDLER, dosageForm);\n+\n+\t\tIBundleProvider result = search(theParams);\n+\n+\t\tList<IBaseResource> resultList = get(result);\n+\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(resultList.size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(((Medication) resultList.iterator().next()).getForm().getCodingFirstRep().getCode(), equalTo(DOSAGE_FORM_UUID));\n+\t}\n+\n+\t@Test\n+\tpublic void searchForMedications_shouldSearchMedicationsByWrongDosageForm() {\n+\t\tTokenAndListParam dosageForm = new TokenAndListParam();\n+\t\tdosageForm.addAnd(new TokenOrListParam().addOr(new TokenParam().setValue(WRONG_DOSAGE_FORM_UUID)));\n+\n+\t\tSearchParameterMap theParams = new SearchParameterMap().addParameter(FhirConstants.DOSAGE_FORM_SEARCH_HANDLER, dosageForm);\n+\n+\t\tIBundleProvider result = search(theParams);\n+\n+\t\tList<IBaseResource> resultList = get(result);\n+\n+\t\tassertThat(result, notNullValue());\n+\t\tassertThat(resultList.size(), equalTo(0));\n+\t}\n+\n+\t@Test\n+\tpublic void searchForMedications_shouldSearchMedicationsByIngredientCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da995b551fa1f59437825d2088de05add07dd6e"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 928, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}