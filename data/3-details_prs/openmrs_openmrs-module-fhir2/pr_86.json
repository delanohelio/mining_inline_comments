{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4Njk2Nzc3", "number": 86, "title": "FM2-79 Improve Search for Encounter", "bodyText": "Description of what I changed\n\n\nFM2-79 Improved Search for Encounter\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-79\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit.\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-02-23T11:48:14Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86", "merged": true, "mergeCommit": {"oid": "40dd9cb72fe0d4c544493d651e05d6fdba21dcb6"}, "closed": true, "closedAt": "2020-02-26T19:13:51Z", "author": {"login": "VaishSiddharth"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHa29jgFqTM2MzI4NDYxNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcILrKxgFqTM2NTE2ODc0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjg0NjE0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-363284614", "createdAt": "2020-02-24T10:21:06Z", "commit": {"oid": "ea6852b8f2e92f67f578408865141311d7b4298e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoyMTowN1rOFtbfmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMDoyMTowN1rOFtbfmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE4MDY5Nw==", "bodyText": "I noticed that a similar handlers are used for PatientDaoImpl and will be used for PersonDaoImpl as well, shouldn't we refactor this to be present in the BaseDaoImpl?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383180697", "createdAt": "2020-02-24T10:21:07Z", "author": {"login": "CaptainDaVinci"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -44,4 +57,116 @@ public Encounter getEncounterByUuid(String uuid) {\n \t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject, TokenOrListParam participantIdentifier,\n+\t        StringOrListParam participantName, StringOrListParam participantGiven, StringOrListParam participantFamily,\n+\t        TokenOrListParam subjectIdentifier, StringOrListParam subjectName, StringOrListParam subjectGiven,\n+\t        StringOrListParam subjectFamily) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleSubjectNames(criteria, subjectName, subjectGiven, subjectFamily);\n+\t\thandleParticipantNames(criteria, participantName, participantGiven, participantFamily);\n+\t\thandleSubjectIdentifier(criteria, subjectIdentifier);\n+\t\thandleParticipantIdentifier(criteria, participantIdentifier);\n+\t\thandleDateRange(\"date\", date).ifPresent(criteria::add);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleParticipantIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"identifiers\", \"pi\", JoinType.INNER_JOIN, eq(\"pi.voided\", false));\n+\t\t\n+\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"pi.identifier\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"pit\")) {\n+\t\t\t\t\tcriteria.createAlias(\"pi.identifierType\", \"pit\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(and(eq(\"pit.name\", system), in(\"pi.identifier\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleSubjectIdentifier(Criteria criteria, TokenOrListParam identifier) {\n+\t\tif (identifier == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tcriteria.createAlias(\"identifiers\", \"si\", JoinType.INNER_JOIN, eq(\"si.voided\", false));\n+\t\t\n+\t\thandleOrListParamBySystem(identifier, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(in(\"si.identifier\", tokensToList(tokens)));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"sit\")) {\n+\t\t\t\t\tcriteria.createAlias(\"si.identifierType\", \"sit\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(and(eq(\"sit.name\", system), in(\"si.identifier\", tokensToList(tokens))));\n+\t\t\t}\n+\t\t}).ifPresent(criteria::add);\n+\t}\n+\t\n+\tprivate void handleSubjectNames(Criteria criteria, StringOrListParam name, StringOrListParam given,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea6852b8f2e92f67f578408865141311d7b4298e"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjgxNjQ2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-363681646", "createdAt": "2020-02-24T20:33:55Z", "commit": {"oid": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozMzo1NVrOFtu6Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozMzo1NVrOFtu6Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5ODg1MQ==", "bodyText": "You seem to have mapped Encounter.SP_SUBJECT twice. Are you sure this is right?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383498851", "createdAt": "2020-02-24T20:33:55Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java", "diffHunk": "@@ -59,4 +62,18 @@ public Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.\n \t\treturn FhirUtils\n \t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n \t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjgyNDY3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-363682467", "createdAt": "2020-02-24T20:35:30Z", "commit": {"oid": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozNTozMFrOFtu9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozNTozMFrOFtu9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5OTU3OQ==", "bodyText": "Should we be using Patient.SP_IDENTIFIER here?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383499579", "createdAt": "2020-02-24T20:35:30Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -44,4 +57,121 @@ public Encounter getEncounterByUuid(String uuid) {\n \t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\t\tif (locationReference != null) {\n+\t\t\tcriteria.createAlias(\"location\", \"l\");\n+\t\t\t\n+\t\t\tif (locationReference.getChain() != null) {\n+\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\t\tif (participantReference != null) {\n+\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n+\t\t\t\n+\t\t\tif (participantReference.getChain() != null) {\n+\t\t\t\tswitch (participantReference.getChain()) {\n+\t\t\t\t\tcase Patient.SP_IDENTIFIER:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNjgzMTAx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-363683101", "createdAt": "2020-02-24T20:36:39Z", "commit": {"oid": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozNjozOVrOFtu_Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDozNjozOVrOFtu_Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDA5OA==", "bodyText": "How does this differ from the handlePatientReference() function that already exists?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383500098", "createdAt": "2020-02-24T20:36:39Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -44,4 +57,121 @@ public Encounter getEncounterByUuid(String uuid) {\n \t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\t\tif (locationReference != null) {\n+\t\t\tcriteria.createAlias(\"location\", \"l\");\n+\t\t\t\n+\t\t\tif (locationReference.getChain() != null) {\n+\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\t\tif (participantReference != null) {\n+\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n+\t\t\t\n+\t\t\tif (participantReference.getChain() != null) {\n+\t\t\t\tswitch (participantReference.getChain()) {\n+\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_GIVEN:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_FAMILY:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_NAME:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MTM1MDE0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-364135014", "createdAt": "2020-02-25T13:23:32Z", "commit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzoyMzozMlrOFuF1xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMzozMToxNlrOFuGFWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NDUwMA==", "bodyText": "@VaishSiddharth Can you rebase onto the latest version of master and use the handlePatientReference() method instead? Thanks \ud83d\ude04", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383874500", "createdAt": "2020-02-25T13:23:32Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -44,4 +57,121 @@ public Encounter getEncounterByUuid(String uuid) {\n \t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n \t\t        .list();\n \t}\n+\t\n+\t@Override\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n+\t}\n+\t\n+\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\t\tif (locationReference != null) {\n+\t\t\tcriteria.createAlias(\"location\", \"l\");\n+\t\t\t\n+\t\t\tif (locationReference.getChain() != null) {\n+\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_STATE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.stateProvince\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_POSTALCODE:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.postalCode\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Location.SP_ADDRESS_COUNTRY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.country\", locationReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"l.uuid\", locationReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate void handleParticipantReference(Criteria criteria, ReferenceParam participantReference) {\n+\t\tif (participantReference != null) {\n+\t\t\tcriteria.createAlias(\"encounterProviders\", \"ep\");\n+\t\t\t\n+\t\t\tif (participantReference.getChain() != null) {\n+\t\t\t\tswitch (participantReference.getChain()) {\n+\t\t\t\t\tcase Patient.SP_IDENTIFIER:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").add(ilike(\"p.identifier\", participantReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_GIVEN:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t        .add(ilike(\"pn.givenName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_FAMILY:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\")\n+\t\t\t\t\t\t        .add(ilike(\"pn.familyName\", participantReference.getValue(), MatchMode.START));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase Patient.SP_NAME:\n+\t\t\t\t\t\tcriteria.createAlias(\"ep.provider\", \"p\").createAlias(\"p.person\", \"ps\").createAlias(\"ps.names\", \"pn\");\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tfor (String token : StringUtils.split(participantReference.getValue(), \" \\t,\")) {\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.givenName\", token));\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.middleName\", token));\n+\t\t\t\t\t\t\tcriterionList.add(propertyLike(\"pn.familyName\", token));\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t\n+\t\t\t\t\t\tcriteria.add(or(toCriteriaArray(criterionList)));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"ep.uuid\", participantReference.getValue()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected void handleSubjectReference(Criteria criteria, ReferenceParam subjectReference) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzUwMDA5OA=="}, "originalCommit": {"oid": "739857e5b4ce2bf8b4aee3e71c47920ad9e60377"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NTQ0Nw==", "bodyText": "We should still be able to search by patient identifier, right?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383875447", "createdAt": "2020-02-25T13:25:28Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NTc1Mw==", "bodyText": "Take a look at the data defined for this class (in the XML file)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383875753", "createdAt": "2020-02-25T13:26:03Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\t//TODO: THIS FAILS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjI3OA==", "bodyText": "We should also have tests by Given and Family", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876278", "createdAt": "2020-02-25T13:27:03Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\t//TODO: THIS FAILS\n+\t\t//java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>\n+\t\tassertThat(results, not(empty()));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME + \" \" + PATIENT_FAMILY_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", Matchers.equalTo(ENCOUNTER_UUID))));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjM0NQ==", "bodyText": "We should also have tests by Given and Family", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876345", "createdAt": "2020-02-25T13:27:11Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +91,66 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n-\t\t    equalTo(PATIENT_IDENTIFIER));\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATE)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\t//TODO: THIS FAILS\n+\t\t//java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>\n+\t\tassertThat(results, not(empty()));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjU3OQ==", "bodyText": "Could this be useful in other places?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876579", "createdAt": "2020-02-25T13:27:41Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -38,10 +52,119 @@ public Encounter getEncounterByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n-\t\treturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class)\n-\t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n-\t\t        .list();\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location\n+\t\t\n+\t\treturn criteria.list();\n \t}\n+\t\n+\tprivate void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjY2OQ==", "bodyText": "I think you've already done this!", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383876669", "createdAt": "2020-02-25T13:27:50Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -38,10 +52,119 @@ public Encounter getEncounterByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n-\t\treturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class)\n-\t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n-\t\t        .list();\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NzUwMA==", "bodyText": "What does this method actually test?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383877500", "createdAt": "2020-02-25T13:29:28Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +75,21 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n-\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\tpublic void searchForEncounter_shouldSearchForEncounterBySubjectName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NzgyMw==", "bodyText": "Should this property still be referring to Patient?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383877823", "createdAt": "2020-02-25T13:30:10Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java", "diffHunk": "@@ -54,9 +56,16 @@ public Encounter getEncounterByUuid(@IdParam @NotNull IdType id) {\n \t}\n \t\n \t@Search\n-\tpublic Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.SP_PATIENT, chainWhitelist = {\n-\t        Patient.SP_IDENTIFIER }) ReferenceParam identifier) {\n-\t\treturn FhirUtils\n-\t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3Nzk5OQ==", "bodyText": "Will this support sub-properties of location?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383877999", "createdAt": "2020-02-25T13:30:28Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java", "diffHunk": "@@ -54,9 +56,16 @@ public Encounter getEncounterByUuid(@IdParam @NotNull IdType id) {\n \t}\n \t\n \t@Search\n-\tpublic Bundle findEncountersByPatientIdentifier(@RequiredParam(name = Encounter.SP_PATIENT, chainWhitelist = {\n-\t        Patient.SP_IDENTIFIER }) ReferenceParam identifier) {\n-\t\treturn FhirUtils\n-\t\t        .convertSearchResultsToBundle(encounterService.findEncountersByPatientIdentifier(identifier.getIdPart()));\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OperationParam(name = Encounter.SP_LOCATION) ReferenceParam location,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3ODMwMg==", "bodyText": "Don't forget to re-add similar tests", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383878302", "createdAt": "2020-02-25T13:30:57Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java", "diffHunk": "@@ -85,24 +79,4 @@ public void getEncounterWithWrongUuid_shouldThrowResourceNotFoundException() {\n \t\tEncounter result = resourceProvider.getEncounterByUuid(id);\n \t\tassertThat(result, nullValue());\n \t}\n-\t\n-\t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnMatchingBundleOfEncounters() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3ODQ4OA==", "bodyText": "This test should not be removed.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r383878488", "createdAt": "2020-02-25T13:31:16Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -81,32 +72,4 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t\tassertThat(response, isNotFound());\n \t}\n \t\n-\t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDAyODQ3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-364402847", "createdAt": "2020-02-25T19:51:35Z", "commit": {"oid": "128058fa8e53dd1a8fab6fb772adda45e288dfe6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo1MTozNVrOFuS-cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxOTo1MTozNVrOFuS-cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4OTcxMg==", "bodyText": "I appreciate the initiative, but unless these are directly necessary for the encounter stuff, don't modify these tests here. I've got another ticket to deal with that.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384089712", "createdAt": "2020-02-25T19:51:35Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -220,8 +220,8 @@ public void searchForObs_shouldSupportMappedAndUnmappedConcepts() {\n \t@Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "128058fa8e53dd1a8fab6fb772adda45e288dfe6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDg0OTcy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-364484972", "createdAt": "2020-02-25T22:07:09Z", "commit": {"oid": "1b39b0f5ed28df36936a181492a2c8789b2c72e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjowNzowOVrOFuXAjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMjowNzowOVrOFuXAjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE1NTc4OQ==", "bodyText": "I know that this is wrong will revert this in the next commit", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384155789", "createdAt": "2020-02-25T22:07:09Z", "author": {"login": "VaishSiddharth"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProvider.java", "diffHunk": "@@ -58,12 +58,13 @@ public Encounter getEncounterByUuid(@IdParam @NotNull IdType id) {\n \t}\n \t\n \t@Search\n-\tpublic Bundle searchEncounter(@OperationParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\tpublic Bundle searchEncounter(@RequiredParam(name = Encounter.SP_DATE) DateRangeParam date,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b39b0f5ed28df36936a181492a2c8789b2c72e9"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "committedDate": "2020-02-26T13:34:43Z", "message": "FM2-79 Improve Search for Encounter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8139806f2efdb5f2d19f35fc12de608258b2e486", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8139806f2efdb5f2d19f35fc12de608258b2e486", "committedDate": "2020-02-25T23:35:13Z", "message": "rebase and code added in BaseDaoImpl"}, "afterCommit": {"oid": "59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/59d2836e433bcc1f5dd99eeec420d6a0d3d5dd80", "committedDate": "2020-02-26T13:34:43Z", "message": "FM2-79 Improve Search for Encounter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/abfdde871aa48708a002414bac97c705dac8df9c", "committedDate": "2020-02-26T14:03:05Z", "message": "Merge branch 'master' into FM2-79"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTU0NDAz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-364954403", "createdAt": "2020-02-26T14:42:54Z", "commit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo0Mjo1NVrOFuuLhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDo1NDowNVrOFuuqvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNTQyOA==", "bodyText": "Can we simplify the ilike() construction to just propertyLike(\"l.cityVillage\", locationReference.getValue())?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384535428", "createdAt": "2020-02-26T14:42:55Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -440,6 +442,73 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t});\n \t}\n \t\n+\tprotected void handleLocationReference(Criteria criteria, ReferenceParam locationReference) {\n+\t\tif (locationReference != null) {\n+\t\t\tcriteria.createAlias(\"location\", \"l\");\n+\t\t\t\n+\t\t\tif (locationReference.getChain() != null) {\n+\t\t\t\tswitch (locationReference.getChain()) {\n+\t\t\t\t\tcase Location.SP_ADDRESS_CITY:\n+\t\t\t\t\t\tcriteria.add(ilike(\"l.cityVillage\", locationReference.getValue(), MatchMode.START));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNTU2MQ==", "bodyText": "Remove this comment", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384535561", "createdAt": "2020-02-26T14:43:07Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImpl.java", "diffHunk": "@@ -38,10 +52,119 @@ public Encounter getEncounterByUuid(String uuid) {\n \t}\n \t\n \t@Override\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic List<Encounter> findEncountersByPatientIdentifier(String patientIdentifier) {\n-\t\treturn (List<Encounter>) sessionFactory.getCurrentSession().createCriteria(Encounter.class)\n-\t\t        .createAlias(\"patient\", \"p\").createAlias(\"p.identifiers\", \"pi\").add(eq(\"pi.identifier\", patientIdentifier))\n-\t\t        .list();\n+\tpublic Collection<Encounter> searchForEncounters(DateRangeParam date, ReferenceParam location,\n+\t        ReferenceParam participant, ReferenceParam subject) {\n+\t\t\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Encounter.class);\n+\t\thandleDateRange(\"encounterDatetime\", date).ifPresent(criteria::add);\n+\t\thandleLocationReference(criteria, location);\n+\t\thandleParticipantReference(criteria, participant);\n+\t\thandleSubjectReference(criteria, subject);\n+\t\t//TODO: handle ReferenceParam for participant, subject, location", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzg3NjY2OQ=="}, "originalCommit": {"oid": "5308c2c1d204d1a8dba16d670594e583910b460e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNjA2NA==", "bodyText": "We should still have tests making use of WRONG_PATIENT_IDENTIFIER", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384536064", "createdAt": "2020-02-26T14:43:54Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -40,10 +47,28 @@\n \t\n \tprivate static final String PATIENT_IDENTIFIER = \"1000WF\";\n \t\n-\tprivate static final String WRONG_PATIENT_IDENTIFIER = \"12334HD\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNzE4NQ==", "bodyText": "Can we actually remove this file from the PR?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384537185", "createdAt": "2020-02-26T14:45:31Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -220,8 +220,8 @@ public void searchForObs_shouldSupportMappedAndUnmappedConcepts() {\n \t@Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA4OTcxMg=="}, "originalCommit": {"oid": "128058fa8e53dd1a8fab6fb772adda45e288dfe6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzNzk4NA==", "bodyText": "We shouldn't need the encounter data XML file anywhere outside of the DAO tests. Everything else should be mocked.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384537984", "createdAt": "2020-02-26T14:46:32Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -34,6 +46,28 @@\n \t\n \tprivate static final String PATIENT_IDENTIFIER = \"1003GH\";\n \t\n+\tprivate static final String PATIENT_FULL_NAME = \"Mr. John Doe\";\n+\t\n+\tprivate static final String ENCOUNTER_INITIAL_DATA_XML = \"org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest_initial_data.xml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzODQ1NQ==", "bodyText": "Can these statements be ordered in a more logical fashion? This is very confusing to read.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384538455", "createdAt": "2020-02-26T14:47:16Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTMyOQ==", "bodyText": "Ditto on ordering", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384539329", "createdAt": "2020-02-26T14:48:28Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService\n-\t\t        .findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results.size(), equalTo(1));\n-\t\tassertThat(results.stream().findFirst().isPresent(), is(true));\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam location = new ReferenceParam();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTQzMw==", "bodyText": "Ditto on ordering", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384539433", "createdAt": "2020-02-26T14:48:35Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService\n-\t\t        .findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results.size(), equalTo(1));\n-\t\tassertThat(results.stream().findFirst().isPresent(), is(true));\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam participant = new ReferenceParam();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUzOTU4Nw==", "bodyText": "Ditto on ordering", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384539587", "createdAt": "2020-02-26T14:48:46Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/impl/FhirEncounterServiceImplTest.java", "diffHunk": "@@ -70,16 +104,84 @@ public void shouldGetEncounterByUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\twhen(dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(openMrsEncounter));\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByDate() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tDateRangeParam dateRangeParam = new DateRangeParam(new DateParam(ENCOUNTER_DATETIME));\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(argThat(is(dateRangeParam)), any(), any(), any())).thenReturn(encounters);\n \t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n \t\t\n-\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService\n-\t\t        .findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(results, notNullValue());\n-\t\tassertThat(results.size(), equalTo(1));\n-\t\tassertThat(results.stream().findFirst().isPresent(), is(true));\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(dateRangeParam, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getId(), equalTo(ENCOUNTER_UUID));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByLocation() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam location = new ReferenceParam();\n+\t\tlocation.setValue(ENCOUNTER_ADDRESS_STATE);\n+\t\tlocation.setChain(Location.SP_ADDRESS_CITY);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), argThat(is(location)), any(), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, location, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterByParticipant() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam participant = new ReferenceParam();\n+\t\tparticipant.setValue(PARTICIPANT_IDENTIFIER);\n+\t\tparticipant.setChain(Practitioner.SP_IDENTIFIER);\n+\t\t\n+\t\tencounters.add(openMrsEncounter);\n+\t\t\n+\t\tfhirEncounter.setId(ENCOUNTER_UUID);\n+\t\twhen(dao.searchForEncounters(any(), any(), argThat(is(participant)), any())).thenReturn(encounters);\n+\t\twhen(encounterTranslator.toFhirResource(openMrsEncounter)).thenReturn(fhirEncounter);\n+\t\t\n+\t\tCollection<org.hl7.fhir.r4.model.Encounter> results = encounterService.searchForEncounters(null, null, participant,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), greaterThanOrEqualTo(1));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounter_shouldReturnCollectionOfEncounterBySubject() {\n+\t\tCollection<Encounter> encounters = new ArrayList<>();\n+\t\tReferenceParam subject = new ReferenceParam();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MDYwNw==", "bodyText": "Why is this here?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384540607", "createdAt": "2020-02-26T14:50:11Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderTest.java", "diffHunk": "@@ -87,22 +88,22 @@ public void getEncounterWithWrongUuid_shouldThrowResourceNotFoundException() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnMatchingBundleOfEncounters() {\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n-\t\tReferenceParam param = new ReferenceParam();\n-\t\tparam.setValue(PATIENT_IDENTIFIER);\n-\t\tBundle encounterBundle = resourceProvider.findEncountersByPatientIdentifier(param);\n-\t\tassertThat(encounterBundle, notNullValue());\n-\t\tassertThat(encounterBundle.getEntry().size(), equalTo(1));\n-\t}\n-\t\n-\t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnBundleWithEmptyEntries() {\n-\t\tReferenceParam param = new ReferenceParam();\n-\t\tparam.setValue(PATIENT_IDENTIFIER);\n-\t\tBundle bundle = resourceProvider.findEncountersByPatientIdentifier(param);\n-\t\tassertThat(bundle, notNullValue());\n-\t\tassertThat(bundle.getEntry(), is(empty()));\n+\tpublic void searchEncounters_shouldReturnMatchingEncounters() {\n+\t\tList<Encounter> encounters = new ArrayList<>();\n+\t\tencounters.add(encounter);\n+\t\twhen(encounterService.searchForEncounters(any(), any(), any(), any())).thenReturn(encounters);\n+\t\tReferenceParam subjectreference = new ReferenceParam();\n+\t\tsubjectreference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\torg.hl7.fhir.r4.model.Encounter enc = new org.hl7.fhir.r4.model.Encounter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MDkxMA==", "bodyText": "Observations?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384540910", "createdAt": "2020-02-26T14:50:38Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTAzMg==", "bodyText": "Observations?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384541032", "createdAt": "2020-02-26T14:50:49Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter?patient.identifier=\" + PATIENT_IDENTIFIER)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByDate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTIwMA==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384541200", "createdAt": "2020-02-26T14:51:01Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter?patient.identifier=\" + PATIENT_IDENTIFIER)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByDate() throws Exception {\n+\t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n-\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n+\t\tassertThat(dateRangeCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(1975, 1, 2);\n+\t\t\n+\t\tassertThat(dateRangeCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeCaptor.getValue().getUpperBound(), nullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationCityVillage() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MTI4MQ==", "bodyText": "Ditto", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384541281", "createdAt": "2020-02-26T14:51:08Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -82,31 +125,145 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnBundleOfEncounters() throws IOException, ServletException {\n-\t\tEncounter encounter = new Encounter();\n-\t\tencounter.setId(ENCOUNTER_UUID);\n-\t\twhen(encounterService.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER))\n-\t\t        .thenReturn(Collections.singletonList(encounter));\n+\tpublic void shouldGetObservationsBySubjectUuid() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter?subject:Patient=%s\", PATIENT_UUID));\n \t\t\n-\t\tMockHttpServletResponse response = get(\"/Encounter?patient.identifier=\" + PATIENT_IDENTIFIER)\n-\t\t        .accept(FhirMediaTypes.JSON).go();\n+\t\tverify(encounterService).searchForEncounters(isNull(), isNull(), isNull(), subjectCaptor.capture());\n+\t\tassertThat(subjectCaptor.getValue(), notNullValue());\n+\t\tassertThat(subjectCaptor.getValue().getIdPart(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByDate() throws Exception {\n+\t\tverifyUri(\"/Encounter/?date=ge1975-02-02\");\n \t\t\n-\t\tassertThat(response, isOk());\n-\t\tassertThat(response.getContentType(), equalTo(FhirMediaTypes.JSON.toString()));\n-\t\tassertThat(readBundleResponse(response).getEntry().size(), greaterThanOrEqualTo(1));\n+\t\tverify(encounterService).searchForEncounters(dateRangeCaptor.capture(), isNull(), isNull(), isNull());\n+\t\tassertThat(dateRangeCaptor.getValue(), notNullValue());\n+\t\t\n+\t\tCalendar calendar = Calendar.getInstance();\n+\t\tcalendar.set(1975, 1, 2);\n+\t\t\n+\t\tassertThat(dateRangeCaptor.getValue().getLowerBound().getValue(),\n+\t\t    equalTo(DateUtils.truncate(calendar.getTime(), Calendar.DATE)));\n+\t\tassertThat(dateRangeCaptor.getValue().getUpperBound(), nullValue());\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationCityVillage() throws Exception {\n+\t\tverifyUri(String.format(\"/Encounter/?location.address-city=%s\", ENCOUNTER_ADDRESS_CITY));\n+\t\t\n+\t\tverify(encounterService).searchForEncounters(isNull(), locationCaptor.capture(), isNull(), isNull());\n+\t\tassertThat(locationCaptor.getValue(), notNullValue());\n+\t\tassertThat(locationCaptor.getValue().getChain(), equalTo(\"address-city\"));\n+\t\tassertThat(locationCaptor.getValue().getValue(), equalTo(ENCOUNTER_ADDRESS_CITY));\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldGetObservationsByLocationState() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDU0MzQyMA==", "bodyText": "This also needs some tests verifying complex behaviour. I.e., what should happen if I request\n/Encounter?subject.given=Harold&location.address-postalcode=90210,90177?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384543420", "createdAt": "2020-02-26T14:54:05Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/EncounterFhirResourceProviderWebTest.java", "diffHunk": "@@ -12,22 +12,29 @@\n import static org.hamcrest.MatcherAssert.assertThat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abfdde871aa48708a002414bac97c705dac8df9c"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e7618c7ea7dc002a5338ac49792b88f95b60c29", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/9e7618c7ea7dc002a5338ac49792b88f95b60c29", "committedDate": "2020-02-26T16:57:59Z", "message": "issues fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5afb7189963f1536dcd3742eac504eb5d2d521bb", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/5afb7189963f1536dcd3742eac504eb5d2d521bb", "committedDate": "2020-02-26T17:15:49Z", "message": "observation file removed and code ordered properly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTM4NzEy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-365138712", "createdAt": "2020-02-26T18:29:55Z", "commit": {"oid": "5afb7189963f1536dcd3742eac504eb5d2d521bb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODoyOTo1NVrOFu3GZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxODozMToyOVrOFu3JuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MTU3NA==", "bodyText": "This seems to be searching by subject rather than participant", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384681574", "createdAt": "2020-02-26T18:29:55Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +100,183 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n \t\t    equalTo(PATIENT_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afb7189963f1536dcd3742eac504eb5d2d521bb"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjEwNQ==", "bodyText": "The constant we use here should be PARTICIPANT_IDENTIFIER even if it has the same value as PATIENT_IDENTIFIER.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384682105", "createdAt": "2020-02-26T18:30:53Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +100,183 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n \t\t    equalTo(PATIENT_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afb7189963f1536dcd3742eac504eb5d2d521bb"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY4MjQyNQ==", "bodyText": "This constant should be PRACTITIONER_FULL_NAME even if it has the same value as PATIENT_FULL_NAME", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#discussion_r384682425", "createdAt": "2020-02-26T18:31:29Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirEncounterDaoImplTest.java", "diffHunk": "@@ -72,21 +100,183 @@ public void shouldReturnNullWithUnknownEncounterUuid() {\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByPatientIdentifier_shouldReturnCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters.size(), greaterThanOrEqualTo(1));\n-\t\tassertThat(encounters.stream().findFirst().isPresent(), is(true));\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient(), notNullValue());\n-\t\tassertThat(encounters.stream().findFirst().get().getPatient().getPatientIdentifier().getIdentifier(),\n+\tpublic void searchForEncounters_shouldSearchForEncountersByDate() {\n+\t\tCollection<Encounter> results = dao.searchForEncounters(new DateRangeParam(new DateParam(ENCOUNTER_DATETIME)), null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterDatetime().toString(), equalTo(ENCOUNTER_DATE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_NAME);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFullName(),\n+\t\t    equalTo(PATIENT_FULL_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectFamilyName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FAMILY_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getFamilyName(),\n+\t\t    equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectGivenName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_GIVEN_NAME);\n+\t\tsubjectReference.setChain(Patient.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPerson().getPersonName().getGivenName(),\n+\t\t    equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersBySubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getPatient().getPatientIdentifier().getIdentifier(),\n \t\t    equalTo(PATIENT_IDENTIFIER));\n \t}\n \t\n \t@Test\n-\tpublic void findEncountersByWrongPatientIdentifier_shouldReturnEmptyCollectionOfEncounters() {\n-\t\tList<Encounter> encounters = dao.findEncountersByPatientIdentifier(WRONG_PATIENT_IDENTIFIER);\n-\t\tassertThat(encounters, notNullValue());\n-\t\tassertThat(encounters, is(empty()));\n+\tpublic void searchForEncounters_shouldReturnEmptyCollectionOfEncountersByWrongSubjectIdentifier() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(WRONG_PATIENT_IDENTIFIER);\n+\t\tsubjectReference.setChain(Patient.SP_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, null, subjectReference);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, is(empty()));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantIdentifier() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setChain(Practitioner.SP_IDENTIFIER);\n+\t\tparticipantReference.setValue(PATIENT_IDENTIFIER);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getIdentifier(),\n+\t\t    equalTo(PARTICIPANT_IDENTIFIER));\n \t}\n \t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantGivenName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_GIVEN_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_GIVEN);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getGivenName(),\n+\t\t    equalTo(PARTICIPANT_GIVEN_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantFamilyName() {\n+\t\tReferenceParam participantReference = new ReferenceParam();\n+\t\t\n+\t\tparticipantReference.setValue(PARTICIPANT_FAMILY_NAME);\n+\t\tparticipantReference.setChain(Practitioner.SP_FAMILY);\n+\t\t\n+\t\tCollection<Encounter> results = dao.searchForEncounters(null, null, participantReference, null);\n+\t\t\n+\t\tassertThat(results, Matchers.notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().size(), greaterThanOrEqualTo(1));\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider(), notNullValue());\n+\t\tassertThat(results.iterator().next().getEncounterProviders().iterator().next().getProvider().getPerson()\n+\t\t        .getPersonName().getFamilyName(),\n+\t\t    equalTo(PARTICIPANT_FAMILY_NAME));\n+\t\t\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForEncounters_shouldSearchForEncountersByParticipantName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam();\n+\t\t\n+\t\tsubjectReference.setValue(PATIENT_FULL_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afb7189963f1536dcd3742eac504eb5d2d521bb"}, "originalPosition": 216}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee11aeee393035fc7a351c44a075cc23ae6fa84b", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ee11aeee393035fc7a351c44a075cc23ae6fa84b", "committedDate": "2020-02-26T19:05:14Z", "message": "names in tests corrected"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTY4NzQ5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/86#pullrequestreview-365168749", "createdAt": "2020-02-26T19:13:35Z", "commit": {"oid": "ee11aeee393035fc7a351c44a075cc23ae6fa84b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4217, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}