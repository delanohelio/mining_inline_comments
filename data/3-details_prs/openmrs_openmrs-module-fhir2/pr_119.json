{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxODQ5NjU4", "number": 119, "title": "Implementation of several parameters for Condition search (api-2.2)", "bodyText": "FM2-87 Add search for Condition resource\n\n\n\nDescription of what I changed\nThis is an implementation of several (not all) parameters for Condition search and only for api-2.2.\n\n\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-87\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit.\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-03-21T11:53:50Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119", "merged": true, "mergeCommit": {"oid": "3d8e0f2bb279d01da2a5d39feef6014b98e533a2"}, "closed": true, "closedAt": "2020-03-26T12:36:32Z", "author": {"login": "bashir2"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPz8PNAFqTM3ODkxMzg1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcROp9nABqjMxNjU4OTE5NTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTEzODU5", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#pullrequestreview-378913859", "createdAt": "2020-03-21T12:05:53Z", "commit": {"oid": "2c3a59e278afc3065232530d1abbb483750b7875"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMjowNTo1NFrOF5pI4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMVQxMjowNTo1NFrOF5pI4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTk4NzE3MQ==", "bodyText": "I will update this unit-test later (before merge); the problem is that the main input data file (FhirConditionDaoImplTest_initial_data.xml) has been changed while I was working on this PR and the change is fairly significant. I also needed to make changes in that file, so I need to figure out how the new save feature works and why this test fails with my version of the input data file.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r395987171", "createdAt": "2020-03-21T12:05:54Z", "author": {"login": "bashir2"}, "path": "api-2.2/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2Test.java", "diffHunk": "@@ -106,6 +267,7 @@ public void shouldSaveNewCondition() {\n \t\tassertThat(result.getUuid(), equalTo(CONDITION_UUID));\n \t}\n \t\n+\t/* TODO comment out and fix before submit, once the conflicts in the initial_data.xml file are resolved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c3a59e278afc3065232530d1abbb483750b7875"}, "originalPosition": 223}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c3a59e278afc3065232530d1abbb483750b7875", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2c3a59e278afc3065232530d1abbb483750b7875", "committedDate": "2020-03-21T11:42:35Z", "message": "Implementation of several parameters for Condition search (api-2.2)\n\nautomatic formatting changes\n\nminor; missing @Override"}, "afterCommit": {"oid": "f34ade0f6397cbb7910943166988b3e23bc396c0", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f34ade0f6397cbb7910943166988b3e23bc396c0", "committedDate": "2020-03-24T03:22:28Z", "message": "Implementation of several parameters for Condition search (api-2.2)\n\nautomatic formatting changes\n\nminor; missing @Override"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f34ade0f6397cbb7910943166988b3e23bc396c0", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/f34ade0f6397cbb7910943166988b3e23bc396c0", "committedDate": "2020-03-24T03:22:28Z", "message": "Implementation of several parameters for Condition search (api-2.2)\n\nautomatic formatting changes\n\nminor; missing @Override"}, "afterCommit": {"oid": "2f68b7a4d0cbfc490948b33b5806c5c6209eb89a", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2f68b7a4d0cbfc490948b33b5806c5c6209eb89a", "committedDate": "2020-03-24T03:31:58Z", "message": "Implementation of several parameters for Condition search (api-2.2)\n\nautomatic formatting changes\n\nminor; missing @Override"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/86d3df5f5bb1c53e1f231b9c8271452769e5a675", "committedDate": "2020-03-24T04:50:34Z", "message": "Implementation of several parameters for Condition search (api-2.2)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f68b7a4d0cbfc490948b33b5806c5c6209eb89a", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/2f68b7a4d0cbfc490948b33b5806c5c6209eb89a", "committedDate": "2020-03-24T03:31:58Z", "message": "Implementation of several parameters for Condition search (api-2.2)\n\nautomatic formatting changes\n\nminor; missing @Override"}, "afterCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/86d3df5f5bb1c53e1f231b9c8271452769e5a675", "committedDate": "2020-03-24T04:50:34Z", "message": "Implementation of several parameters for Condition search (api-2.2)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMzEwMjA4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#pullrequestreview-380310208", "createdAt": "2020-03-24T13:32:31Z", "commit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzozMjozMVrOF6wVdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzo1NDozNlrOF6xUYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MzY1Mg==", "bodyText": "This shouldn't be part of this commit", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397153652", "createdAt": "2020-03-24T13:32:31Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -247,7 +247,7 @@ public void searchForObs_shouldReturnObsByPatientGivenName() {\n \t\tpatient.setChain(Patient.SP_GIVEN);\n \t\t\n \t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1Mzk0NQ==", "bodyText": "Just delete this instead of commenting it out.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397153945", "createdAt": "2020-03-24T13:32:56Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ConditionFhirResourceProvider.java", "diffHunk": "@@ -70,4 +80,21 @@ public Condition getConditionByUuid(@IdParam @NotNull IdType id) {\n \tpublic MethodOutcome createCondition(@ResourceParam Condition newCondition) {\n \t\treturn FhirServerUtils.buildCreate(conditionService.saveCondition(newCondition));\n \t}\n+\t\n+\t@Search\n+\t//@SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1NTM1MQ==", "bodyText": "I would use a DateRangeParam here. DateParam only expresses a single date. DateRangeParam can express a single date or (more obviously) a point that is between two dates / instants.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397155351", "createdAt": "2020-03-24T13:35:02Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ConditionFhirResourceProvider.java", "diffHunk": "@@ -70,4 +80,21 @@ public Condition getConditionByUuid(@IdParam @NotNull IdType id) {\n \tpublic MethodOutcome createCondition(@ResourceParam Condition newCondition) {\n \t\treturn FhirServerUtils.buildCreate(conditionService.saveCondition(newCondition));\n \t}\n+\t\n+\t@Search\n+\t//@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchConditions(\n+\t        @OptionalParam(name = Condition.SP_PATIENT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_NAME,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY }) ReferenceAndListParam patientParam,\n+\t        @OptionalParam(name = Condition.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_NAME,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY }) ReferenceAndListParam subjectParam,\n+\t        @OptionalParam(name = Condition.SP_CODE) TokenOrListParam code,\n+\t        @OptionalParam(name = Condition.SP_CLINICAL_STATUS) TokenOrListParam clinicalStatus,\n+\t        @OptionalParam(name = Condition.SP_ONSET_DATE) DateParam onsetDate,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1OTAxMA==", "bodyText": "Is returning duplicated Conditions the desired outcome?\n\nShort version: no, we really shouldn't be getting duplicated conditions. Can you say more about why this is happening?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397159010", "createdAt": "2020-03-24T13:40:15Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2Test.java", "diffHunk": "@@ -90,14 +116,166 @@ public void shouldReturnNullWhenGetConditionByWrongUuid() {\n \t\tassertThat(condition, nullValue());\n \t}\n \t\n+\tpublic void searchForPatients_shouldReturnConditionByPatientUuid() {\n+\t\tReferenceParam patientReference = new ReferenceParam(\"\", PATIENT_UUID);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientGivenName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_GIVEN, PATIENT_GIVEN_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\t// TODO during review: Is returning duplicated Conditions the desired outcome?\n+\t\tassertThat(results.size(), equalTo(6));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MTA4Nw==", "bodyText": "Where does this CD41003 value come from?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397161087", "createdAt": "2020-03-24T13:43:03Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2Test.java", "diffHunk": "@@ -90,14 +116,166 @@ public void shouldReturnNullWhenGetConditionByWrongUuid() {\n \t\tassertThat(condition, nullValue());\n \t}\n \t\n+\tpublic void searchForPatients_shouldReturnConditionByPatientUuid() {\n+\t\tReferenceParam patientReference = new ReferenceParam(\"\", PATIENT_UUID);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientGivenName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_GIVEN, PATIENT_GIVEN_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\t// TODO during review: Is returning duplicated Conditions the desired outcome?\n+\t\tassertThat(results.size(), equalTo(6));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n \t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientFamilyName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_FAMILY, PATIENT_FAMILY_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_NAME, PATIENT_PARTIAL_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam(Patient.SP_NAME, PATIENT_PARTIAL_NAME);\n+\t\tReferenceAndListParam subjectList = new ReferenceAndListParam();\n+\t\tsubjectList.addValue(new ReferenceOrListParam().add(subjectReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, subjectList, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByOnsetDate() {\n+\t\tString testDate = \"2017-01-12\";\n+\t\t\n+\t\tDateParam onsetDate = new DateParam(\"eq\" + testDate);\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, null, onsetDate, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getOnsetDate().toString(), startsWith(testDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByRecordedDate() {\n+\t\tString testDate = \"2016-01-12\";\n+\t\t\n+\t\tDateParam recordedDate = new DateParam(\"eq\" + testDate);\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, null, null, null, recordedDate, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(1));\n+\t\tassertThat(results.iterator().next().getDateCreated().toString(), startsWith(testDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusActive() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"active\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(5));\n+\t\tassertThat(results.iterator().next().getClinicalStatus(), equalTo(ConditionClinicalStatus.ACTIVE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusInactive() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"inactive\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(1));\n+\t\tassertThat(results.iterator().next().getClinicalStatus(), equalTo(ConditionClinicalStatus.INACTIVE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusAll() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"active\"));\n+\t\tlistParam.add(new TokenParam(\"inactive\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(6));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByCode() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"CD41003\")); // for concept_id=5497", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzkzNg==", "bodyText": "We shouldn't be, since HISTORY_OF is not semantically equivalent to any of those values. Normally, I'd say we just add a custom valueset, but that obviously makes us non-conformant. I think we need to handle HISTORY_OF via an extension. Ugh...", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397163936", "createdAt": "2020-03-24T13:46:56Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2NjUzOA==", "bodyText": "The patient search parameter is defined as Condition.subject.where(resolve() is Patient), i.e., if the patientParam is valid, we should not handle the subjectParam at all.\n\nDo we require a \":Patient\" modifier or a \"Patient/\" type for the \"subject\" search param?\n\nNo, but we should support these where present\n\nDo we want to support anything other than \"Patient\" under \"subject\" based searches (e.g., \"Group\")?\n\nWe currently haven't implemented the concept of \"Group\" in the OpenMRS FHIR module, so we needn't support it here.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397166538", "createdAt": "2020-03-24T13:50:24Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;\n+\t}\n+\t\n+\t@Override\n+\tpublic Collection<Condition> searchForConditions(ReferenceAndListParam patientParam, ReferenceAndListParam subjectParam,\n+\t        TokenOrListParam code, TokenOrListParam clinicalStatus, DateParam onsetDate, QuantityParam onsetAge,\n+\t        DateParam recordedData, SortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Condition.class);\n+\t\t\n+\t\thandlePatientReference(criteria, patientParam);\n+\t\t// TODO during review: Do we require a \":Patient\" modifier or a \"Patient/\" type for the \"subject\" search param?\n+\t\t// And do we want to support anything other than \"Patient\" under \"subject\" based searches (e.g., \"Group\")?\n+\t\thandlePatientReference(criteria, subjectParam);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2OTc2Mg==", "bodyText": "Use handleResourceCode() for this. We should give that function a more descriptive name... and some docs!", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397169762", "createdAt": "2020-03-24T13:54:36Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;\n+\t}\n+\t\n+\t@Override\n+\tpublic Collection<Condition> searchForConditions(ReferenceAndListParam patientParam, ReferenceAndListParam subjectParam,\n+\t        TokenOrListParam code, TokenOrListParam clinicalStatus, DateParam onsetDate, QuantityParam onsetAge,\n+\t        DateParam recordedData, SortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Condition.class);\n+\t\t\n+\t\thandlePatientReference(criteria, patientParam);\n+\t\t// TODO during review: Do we require a \":Patient\" modifier or a \"Patient/\" type for the \"subject\" search param?\n+\t\t// And do we want to support anything other than \"Patient\" under \"subject\" based searches (e.g., \"Group\")?\n+\t\thandlePatientReference(criteria, subjectParam);\n+\t\thandleDate(\"onsetDate\", onsetDate).ifPresent(criteria::add);\n+\t\t// TODO: Handle onsetAge as well.\n+\t\thandleDate(\"dateCreated\", recordedData).ifPresent(criteria::add);\n+\t\thandleOrListParam(clinicalStatus,\n+\t\t    tokenParam -> Optional.of(eq(\"clinicalStatus\", convertStatus(tokenParam.getValue())))).ifPresent(criteria::add);\n+\t\tif (code != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDQzNDQy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#pullrequestreview-380443442", "createdAt": "2020-03-24T15:47:20Z", "commit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0NzoyMVrOF62sMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwODoxODo0NVrOF7QDag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1Nzc3Ng==", "bodyText": "I see, so defining an extension seems beyond this PR. The HISTORY_OF option is not exposed in new versions of OpenMRS Ref App (judging from 2.10.0-SNAPSHOT); so maybe it is on its way to become deprecated?\nAnyways, the code in ConditionClinicalStatusTranslatorImpl_2_2 handles the same problem they way it is implemented here, i.e., it maps HISTORY_OF to a coding with the same text (which as you said is not standard conforming) and then maps it back to HISTORY_OF in the reverse translation. So I simply  updated the TODO here with a reference to that, WDYT?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397257776", "createdAt": "2020-03-24T15:47:21Z", "author": {"login": "bashir2"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzkzNg=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMjQ2Nw==", "bodyText": "Done; was a leftover of merge conflicts/squash.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397402467", "createdAt": "2020-03-24T19:19:08Z", "author": {"login": "bashir2"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -247,7 +247,7 @@ public void searchForObs_shouldReturnObsByPatientGivenName() {\n \t\tpatient.setChain(Patient.SP_GIVEN);\n \t\t\n \t\tpatientReference.addValue(new ReferenceOrListParam().add(patient));\n-\t\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1MzY1Mg=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwMzEwOA==", "bodyText": "Other @Search methods have this so I was not sure if I have set my IDE properly or not (since I don't get the warning). If you don't mind, for now I uncommented it to be consistent but we can remove it from all @Search methods in another PR.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397403108", "createdAt": "2020-03-24T19:20:14Z", "author": {"login": "bashir2"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ConditionFhirResourceProvider.java", "diffHunk": "@@ -70,4 +80,21 @@ public Condition getConditionByUuid(@IdParam @NotNull IdType id) {\n \tpublic MethodOutcome createCondition(@ResourceParam Condition newCondition) {\n \t\treturn FhirServerUtils.buildCreate(conditionService.saveCondition(newCondition));\n \t}\n+\t\n+\t@Search\n+\t//@SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1Mzk0NQ=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQwOTkzMQ==", "bodyText": "It comes from this line of standardTestDataset.xml, i.e., how concept_id of an OpenMRS condition is translated into a FHIR condition code according to ConditionTranslatorImpl_2_2.\nPlease note that with your suggestion of using handleResourceCode() the system part of a code token is now properly handled so I have added an additional line for fhir_concept_source in FhirConditionDaoImplTest_initial_data.xml; PTAL.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397409931", "createdAt": "2020-03-24T19:32:34Z", "author": {"login": "bashir2"}, "path": "api-2.2/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2Test.java", "diffHunk": "@@ -90,14 +116,166 @@ public void shouldReturnNullWhenGetConditionByWrongUuid() {\n \t\tassertThat(condition, nullValue());\n \t}\n \t\n+\tpublic void searchForPatients_shouldReturnConditionByPatientUuid() {\n+\t\tReferenceParam patientReference = new ReferenceParam(\"\", PATIENT_UUID);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientGivenName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_GIVEN, PATIENT_GIVEN_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\t// TODO during review: Is returning duplicated Conditions the desired outcome?\n+\t\tassertThat(results.size(), equalTo(6));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n \t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientFamilyName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_FAMILY, PATIENT_FAMILY_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_NAME, PATIENT_PARTIAL_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam(Patient.SP_NAME, PATIENT_PARTIAL_NAME);\n+\t\tReferenceAndListParam subjectList = new ReferenceAndListParam();\n+\t\tsubjectList.addValue(new ReferenceOrListParam().add(subjectReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, subjectList, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByOnsetDate() {\n+\t\tString testDate = \"2017-01-12\";\n+\t\t\n+\t\tDateParam onsetDate = new DateParam(\"eq\" + testDate);\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, null, onsetDate, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getOnsetDate().toString(), startsWith(testDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByRecordedDate() {\n+\t\tString testDate = \"2016-01-12\";\n+\t\t\n+\t\tDateParam recordedDate = new DateParam(\"eq\" + testDate);\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, null, null, null, recordedDate, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(1));\n+\t\tassertThat(results.iterator().next().getDateCreated().toString(), startsWith(testDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusActive() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"active\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(5));\n+\t\tassertThat(results.iterator().next().getClinicalStatus(), equalTo(ConditionClinicalStatus.ACTIVE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusInactive() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"inactive\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(1));\n+\t\tassertThat(results.iterator().next().getClinicalStatus(), equalTo(ConditionClinicalStatus.INACTIVE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusAll() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"active\"));\n+\t\tlistParam.add(new TokenParam(\"inactive\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(6));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByCode() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"CD41003\")); // for concept_id=5497", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MTA4Nw=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzU5MzAzNg==", "bodyText": "Done.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397593036", "createdAt": "2020-03-25T03:41:04Z", "author": {"login": "bashir2"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ConditionFhirResourceProvider.java", "diffHunk": "@@ -70,4 +80,21 @@ public Condition getConditionByUuid(@IdParam @NotNull IdType id) {\n \tpublic MethodOutcome createCondition(@ResourceParam Condition newCondition) {\n \t\treturn FhirServerUtils.buildCreate(conditionService.saveCondition(newCondition));\n \t}\n+\t\n+\t@Search\n+\t//@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchConditions(\n+\t        @OptionalParam(name = Condition.SP_PATIENT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_NAME,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY }) ReferenceAndListParam patientParam,\n+\t        @OptionalParam(name = Condition.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_NAME,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY }) ReferenceAndListParam subjectParam,\n+\t        @OptionalParam(name = Condition.SP_CODE) TokenOrListParam code,\n+\t        @OptionalParam(name = Condition.SP_CLINICAL_STATUS) TokenOrListParam clinicalStatus,\n+\t        @OptionalParam(name = Condition.SP_ONSET_DATE) DateParam onsetDate,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1NTM1MQ=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYyNjk1OQ==", "bodyText": "Thanks for the suggestion; it took me a while to figure out the right query before, I wish I had noticed this :-)\nBTW, I think there was a bug in handleResourceCode(), in the case that system was provided, by assuming that conceptReferenceTermAlias is always crt (the actual bug was in generateSystemQuery). I fixed that too, PTAL.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397626959", "createdAt": "2020-03-25T06:09:22Z", "author": {"login": "bashir2"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;\n+\t}\n+\t\n+\t@Override\n+\tpublic Collection<Condition> searchForConditions(ReferenceAndListParam patientParam, ReferenceAndListParam subjectParam,\n+\t        TokenOrListParam code, TokenOrListParam clinicalStatus, DateParam onsetDate, QuantityParam onsetAge,\n+\t        DateParam recordedData, SortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Condition.class);\n+\t\t\n+\t\thandlePatientReference(criteria, patientParam);\n+\t\t// TODO during review: Do we require a \":Patient\" modifier or a \"Patient/\" type for the \"subject\" search param?\n+\t\t// And do we want to support anything other than \"Patient\" under \"subject\" based searches (e.g., \"Group\")?\n+\t\thandlePatientReference(criteria, subjectParam);\n+\t\thandleDate(\"onsetDate\", onsetDate).ifPresent(criteria::add);\n+\t\t// TODO: Handle onsetAge as well.\n+\t\thandleDate(\"dateCreated\", recordedData).ifPresent(criteria::add);\n+\t\thandleOrListParam(clinicalStatus,\n+\t\t    tokenParam -> Optional.of(eq(\"clinicalStatus\", convertStatus(tokenParam.getValue())))).ifPresent(criteria::add);\n+\t\tif (code != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2OTc2Mg=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYzODA3OA==", "bodyText": "I think what is happening is that for PATIENT_GIVEN_NAME (i.e., \"Horatio\") there are two person_name entries (see here) both with person_id=\"2\" and the same given_name. There are three conditions in the test file for this person_id and because there is a JOIN between person and person_name tables, the final result contains 6 rows; while in fact each real condition is repeated twice.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397638078", "createdAt": "2020-03-25T06:47:45Z", "author": {"login": "bashir2"}, "path": "api-2.2/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2Test.java", "diffHunk": "@@ -90,14 +116,166 @@ public void shouldReturnNullWhenGetConditionByWrongUuid() {\n \t\tassertThat(condition, nullValue());\n \t}\n \t\n+\tpublic void searchForPatients_shouldReturnConditionByPatientUuid() {\n+\t\tReferenceParam patientReference = new ReferenceParam(\"\", PATIENT_UUID);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientGivenName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_GIVEN, PATIENT_GIVEN_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\t// TODO during review: Is returning duplicated Conditions the desired outcome?\n+\t\tassertThat(results.size(), equalTo(6));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1OTAxMA=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzY3MzMyMg==", "bodyText": "Thanks for the clarifications; here is my interpretation (please let me know if I misunderstood what you said):\n\nIf patientParam is present, we do not process subjectParam (added a test for this case).\nOtherwise, we assume subject is referring to a Patient resource; i.e., we ignore the getResourceType() part of subjectParam entries but its presence will not cause any problems. IOW, subject:Patient.name=foo is equivalent to subject.name=foo but it is also equivalent to subject:Group.name=foo.\n\nSide note: I think there was a bug in handlePatientReference when ReferenceAndListParam had multiple of the same parameter (e.g., multiple patient.name) which I fixed and a corresponding test is added too; PTAL.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397673322", "createdAt": "2020-03-25T08:18:45Z", "author": {"login": "bashir2"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;\n+\t}\n+\t\n+\t@Override\n+\tpublic Collection<Condition> searchForConditions(ReferenceAndListParam patientParam, ReferenceAndListParam subjectParam,\n+\t        TokenOrListParam code, TokenOrListParam clinicalStatus, DateParam onsetDate, QuantityParam onsetAge,\n+\t        DateParam recordedData, SortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Condition.class);\n+\t\t\n+\t\thandlePatientReference(criteria, patientParam);\n+\t\t// TODO during review: Do we require a \":Patient\" modifier or a \"Patient/\" type for the \"subject\" search param?\n+\t\t// And do we want to support anything other than \"Patient\" under \"subject\" based searches (e.g., \"Group\")?\n+\t\thandlePatientReference(criteria, subjectParam);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2NjUzOA=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0788de7b99bbc97a6b3480f4175747b97643fd", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/df0788de7b99bbc97a6b3480f4175747b97643fd", "committedDate": "2020-03-25T09:15:17Z", "message": "addressing first round of review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMjA2NzUz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#pullrequestreview-381206753", "createdAt": "2020-03-25T14:34:08Z", "commit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDozNDowOFrOF7eB1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDo0OToyMFrOF7ex6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMjI5Mg==", "bodyText": "I think that's an artifact of the fact that we've been writing code backwards, i.e., tests after the fact, so that the methods look like they're unused. Unfortunately, I'm as guilty of that as the next person.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397902292", "createdAt": "2020-03-25T14:34:08Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ConditionFhirResourceProvider.java", "diffHunk": "@@ -70,4 +80,21 @@ public Condition getConditionByUuid(@IdParam @NotNull IdType id) {\n \tpublic MethodOutcome createCondition(@ResourceParam Condition newCondition) {\n \t\treturn FhirServerUtils.buildCreate(conditionService.saveCondition(newCondition));\n \t}\n+\t\n+\t@Search\n+\t//@SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1Mzk0NQ=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkwMzEzMA==", "bodyText": "Thanks! I haven't looks through the standard dataset in a while, so I forgot about that.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397903130", "createdAt": "2020-03-25T14:35:06Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2Test.java", "diffHunk": "@@ -90,14 +116,166 @@ public void shouldReturnNullWhenGetConditionByWrongUuid() {\n \t\tassertThat(condition, nullValue());\n \t}\n \t\n+\tpublic void searchForPatients_shouldReturnConditionByPatientUuid() {\n+\t\tReferenceParam patientReference = new ReferenceParam(\"\", PATIENT_UUID);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientGivenName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_GIVEN, PATIENT_GIVEN_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\t// TODO during review: Is returning duplicated Conditions the desired outcome?\n+\t\tassertThat(results.size(), equalTo(6));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t}\n+\t\n \t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientFamilyName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_FAMILY, PATIENT_FAMILY_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_NAME, PATIENT_PARTIAL_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionBySubjectName() {\n+\t\tReferenceParam subjectReference = new ReferenceParam(Patient.SP_NAME, PATIENT_PARTIAL_NAME);\n+\t\tReferenceAndListParam subjectList = new ReferenceAndListParam();\n+\t\tsubjectList.addValue(new ReferenceOrListParam().add(subjectReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, subjectList, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(9));\n+\t\tassertThat(results.iterator().next().getPatient().getGivenName(), equalTo(PATIENT_GIVEN_NAME));\n+\t\tassertThat(results.iterator().next().getPatient().getFamilyName(), equalTo(PATIENT_FAMILY_NAME));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByOnsetDate() {\n+\t\tString testDate = \"2017-01-12\";\n+\t\t\n+\t\tDateParam onsetDate = new DateParam(\"eq\" + testDate);\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, null, onsetDate, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getOnsetDate().toString(), startsWith(testDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByRecordedDate() {\n+\t\tString testDate = \"2016-01-12\";\n+\t\t\n+\t\tDateParam recordedDate = new DateParam(\"eq\" + testDate);\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, null, null, null, recordedDate, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(1));\n+\t\tassertThat(results.iterator().next().getDateCreated().toString(), startsWith(testDate));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusActive() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"active\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(5));\n+\t\tassertThat(results.iterator().next().getClinicalStatus(), equalTo(ConditionClinicalStatus.ACTIVE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusInactive() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"inactive\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(1));\n+\t\tassertThat(results.iterator().next().getClinicalStatus(), equalTo(ConditionClinicalStatus.INACTIVE));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByClinicalStatusAll() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"active\"));\n+\t\tlistParam.add(new TokenParam(\"inactive\"));\n+\t\tCollection<Condition> results = dao.searchForConditions(null, null, null, listParam, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(6));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByCode() {\n+\t\tTokenOrListParam listParam = new TokenOrListParam();\n+\t\tlistParam.add(new TokenParam(\"CD41003\")); // for concept_id=5497", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MTA4Nw=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMDA0MQ==", "bodyText": "Yep, that's a good point and probably out of scope for this ticket. I'll create a new ticket to resolve that issue. Small note on coding style, I prefer using the Hamcrest hasSize() method instead of size(), equalTo() as it results in a more meaningful error message when it fails.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397910041", "createdAt": "2020-03-25T14:43:42Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2Test.java", "diffHunk": "@@ -90,14 +116,166 @@ public void shouldReturnNullWhenGetConditionByWrongUuid() {\n \t\tassertThat(condition, nullValue());\n \t}\n \t\n+\tpublic void searchForPatients_shouldReturnConditionByPatientUuid() {\n+\t\tReferenceParam patientReference = new ReferenceParam(\"\", PATIENT_UUID);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.size(), equalTo(3));\n+\t\tassertThat(results.iterator().next().getPatient().getUuid(), equalTo(PATIENT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForPatients_shouldReturnConditionByPatientGivenName() {\n+\t\tReferenceParam patientReference = new ReferenceParam(Patient.SP_GIVEN, PATIENT_GIVEN_NAME);\n+\t\tReferenceAndListParam patientList = new ReferenceAndListParam();\n+\t\tpatientList.addValue(new ReferenceOrListParam().add(patientReference));\n+\t\tCollection<Condition> results = dao.searchForConditions(patientList, null, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\t// TODO during review: Is returning duplicated Conditions the desired outcome?\n+\t\tassertThat(results.size(), equalTo(6));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE1OTAxMA=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxMTA4OA==", "bodyText": "Thanks! Yeah... generateSystemQuery() was written with some different assumptions. Thanks for fixing that.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397911088", "createdAt": "2020-03-25T14:45:03Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;\n+\t}\n+\t\n+\t@Override\n+\tpublic Collection<Condition> searchForConditions(ReferenceAndListParam patientParam, ReferenceAndListParam subjectParam,\n+\t        TokenOrListParam code, TokenOrListParam clinicalStatus, DateParam onsetDate, QuantityParam onsetAge,\n+\t        DateParam recordedData, SortSpec sort) {\n+\t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Condition.class);\n+\t\t\n+\t\thandlePatientReference(criteria, patientParam);\n+\t\t// TODO during review: Do we require a \":Patient\" modifier or a \"Patient/\" type for the \"subject\" search param?\n+\t\t// And do we want to support anything other than \"Patient\" under \"subject\" based searches (e.g., \"Group\")?\n+\t\thandlePatientReference(criteria, subjectParam);\n+\t\thandleDate(\"onsetDate\", onsetDate).ifPresent(criteria::add);\n+\t\t// TODO: Handle onsetAge as well.\n+\t\thandleDate(\"dateCreated\", recordedData).ifPresent(criteria::add);\n+\t\thandleOrListParam(clinicalStatus,\n+\t\t    tokenParam -> Optional.of(eq(\"clinicalStatus\", convertStatus(tokenParam.getValue())))).ifPresent(criteria::add);\n+\t\tif (code != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2OTc2Mg=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkxNDYwMg==", "bodyText": "Yeah, that's fine.\nI don't know whether it's on its way to being deprecated or not, but I hope so. Maybe I can propose that core adopts the second level values from the HL7 value set, since \"remission\" and \"resolved\" seem more semantically meaningful than just \"history of\".", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#discussion_r397914602", "createdAt": "2020-03-25T14:49:20Z", "author": {"login": "ibacher"}, "path": "api-2.2/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirConditionDaoImpl_2_2.java", "diffHunk": "@@ -42,6 +52,47 @@ public Condition getConditionByUuid(String uuid) {\n \t\t        .uniqueResult();\n \t}\n \t\n+\tprivate ConditionClinicalStatus convertStatus(String status) {\n+\t\tif (\"active\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.ACTIVE;\n+\t\t}\n+\t\tif (\"inactive\".equalsIgnoreCase(status)) {\n+\t\t\treturn ConditionClinicalStatus.INACTIVE;\n+\t\t}\n+\t\t// TODO during review: What value of the spec. should be mapped to HISTORY_OF?\n+\t\t// http://www.hl7.org/fhir/valueset-condition-clinical.html\n+\t\treturn ConditionClinicalStatus.HISTORY_OF;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE2MzkzNg=="}, "originalCommit": {"oid": "86d3df5f5bb1c53e1f231b9c8271452769e5a675"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "649e0ebdfeba0a24f0c36a2db50dd7c5d627d78d", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/649e0ebdfeba0a24f0c36a2db50dd7c5d627d78d", "committedDate": "2020-03-25T20:08:16Z", "message": "2nd review round and more unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxNTAxODUy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/119#pullrequestreview-381501852", "createdAt": "2020-03-25T20:16:02Z", "commit": {"oid": "69a0237268434a6ddeec5632046fb218045f0b21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29e7ac5873b32fd1d7ccf6009f005917b123d36", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b29e7ac5873b32fd1d7ccf6009f005917b123d36", "committedDate": "2020-03-25T21:02:03Z", "message": "Merge branch 'master' into FM2-87"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69a0237268434a6ddeec5632046fb218045f0b21", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/69a0237268434a6ddeec5632046fb218045f0b21", "committedDate": "2020-03-25T20:15:22Z", "message": "Merge branch 'master' into FM2-87"}, "afterCommit": {"oid": "b29e7ac5873b32fd1d7ccf6009f005917b123d36", "author": {"user": {"login": "bashir2", "name": "Bashir Sadjad"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/b29e7ac5873b32fd1d7ccf6009f005917b123d36", "committedDate": "2020-03-25T21:02:03Z", "message": "Merge branch 'master' into FM2-87"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4270, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}