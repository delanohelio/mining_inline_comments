{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNjk0NTA2", "number": 158, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMjozM1rOD4HWyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNTo1NFrOD9aNbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY3MzY4OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMjozM1rOGOw0BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMjozM1rOGOw0BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMjk5Nw==", "bodyText": "Minor point, but please configure your IDE not to introduce * imports. OpenMRS doesn't like anyone to use them, and it makes some sense.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418132997", "createdAt": "2020-04-30T16:22:33Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY3NTQ2OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMjo1OFrOGOw1EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMjo1OFrOGOw1EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMzI2NQ==", "bodyText": "Remove the * import", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418133265", "createdAt": "2020-04-30T16:22:58Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY3NzkyOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/ConditionDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMzo0M1rOGOw2uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyMzo0M1rOGOw2uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzMzY4OQ==", "bodyText": "Yes! We should implement this!", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418133689", "createdAt": "2020-04-30T16:23:43Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/ConditionDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.QuantityAndListParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirConditionService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ConditionDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirConditionService conditionService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Condition.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Condition getConditionById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Condition condition = conditionService.getConditionByUuid(id.getIdPart());\n+\t\tif (condition == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find condition with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertCondition(condition);\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getConditionHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Condition condition = conditionService.getConditionByUuid(id.getIdPart());\n+\t\tif (condition == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find condition with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertCondition(condition).getContained();\n+\t}\n+\t\n+\t//\t// TODO: Required or not?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY4MTk1OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/DiagnosticReportDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNDozNlrOGOw5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNDozNlrOGOw5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNDMyNQ==", "bodyText": "Required, but we will obviously be given the R3 version of the DiagnosticReport here.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418134325", "createdAt": "2020-04-30T16:24:36Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/DiagnosticReportDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.MethodOutcome;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.DiagnosticReport;\n+import org.hl7.fhir.dstu3.model.IdType;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirDiagnosticReportService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class DiagnosticReportDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirDiagnosticReportService diagnosticReportService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn DiagnosticReport.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic DiagnosticReport getDiagnosticReportById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.DiagnosticReport diagnosticReport = diagnosticReportService\n+\t\t        .getDiagnosticReportByUuid(id.getIdPart());\n+\t\tif (diagnosticReport == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find diagnosticReport with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertDiagnosticReport(diagnosticReport);\n+\t}\n+\t\n+\t// TODO: Required or not?\n+\t@Create\n+\tpublic MethodOutcome createDiagnosticReport(@ResourceParam org.hl7.fhir.r4.model.DiagnosticReport diagnosticReport) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY4MzEzOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/DiagnosticReportDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNDo1NVrOGOw5-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNDo1NVrOGOw5-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNDUyMg==", "bodyText": "Required, but we will obviously be given the R3 version of the DiagnosticReport here.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418134522", "createdAt": "2020-04-30T16:24:55Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/DiagnosticReportDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.MethodOutcome;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.DiagnosticReport;\n+import org.hl7.fhir.dstu3.model.IdType;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirDiagnosticReportService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class DiagnosticReportDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirDiagnosticReportService diagnosticReportService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn DiagnosticReport.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic DiagnosticReport getDiagnosticReportById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.DiagnosticReport diagnosticReport = diagnosticReportService\n+\t\t        .getDiagnosticReportByUuid(id.getIdPart());\n+\t\tif (diagnosticReport == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find diagnosticReport with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertDiagnosticReport(diagnosticReport);\n+\t}\n+\t\n+\t// TODO: Required or not?\n+\t@Create\n+\tpublic MethodOutcome createDiagnosticReport(@ResourceParam org.hl7.fhir.r4.model.DiagnosticReport diagnosticReport) {\n+\t\treturn FhirServerUtils.buildCreate(diagnosticReportService.saveDiagnosticReport(diagnosticReport));\n+\t}\n+\t\n+\t// TODO: Required or not?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY4NTkyOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/EncounterDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNTo0N1rOGOw7-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzoxMjoxOVrOGOyohQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNTAzMw==", "bodyText": "I'd prefer if these files were structured similarly, i.e. with the @History method following the @Read method.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418135033", "createdAt": "2020-04-30T16:25:47Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/EncounterDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirEncounterService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class EncounterDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirEncounterService encounterService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Encounter.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Encounter getEncounterById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertEncounter(encounter);\n+\t}\n+\t\n+\t@Search\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceAndListParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceAndListParam participantReference,\n+\t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n+\t                Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam subjectReference) {\n+\t\treturn VersionConvertor_30_40.convertBundle(FhirServerUtils.convertSearchResultsToBundle(\n+\t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference)));\n+\t\t\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE2MjgyMQ==", "bodyText": "@ibacher This might need to be changed in master as well. I am not changing anything in omod  module because it might be irrelevant for this PR", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418162821", "createdAt": "2020-04-30T17:12:19Z", "author": {"login": "VaishSiddharth"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/EncounterDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirEncounterService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class EncounterDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirEncounterService encounterService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Encounter.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Encounter getEncounterById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertEncounter(encounter);\n+\t}\n+\t\n+\t@Search\n+\tpublic Bundle searchEncounter(@OptionalParam(name = Encounter.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Encounter.SP_LOCATION, chainWhitelist = { \"\", Location.SP_ADDRESS_CITY,\n+\t                Location.SP_ADDRESS_STATE, Location.SP_ADDRESS_COUNTRY,\n+\t                Location.SP_ADDRESS_POSTALCODE }, targetTypes = Location.class) ReferenceAndListParam location,\n+\t        @OptionalParam(name = Encounter.SP_PARTICIPANT, chainWhitelist = { \"\", Practitioner.SP_IDENTIFIER,\n+\t                Practitioner.SP_GIVEN, Practitioner.SP_FAMILY,\n+\t                Practitioner.SP_NAME }, targetTypes = Practitioner.class) ReferenceAndListParam participantReference,\n+\t        @OptionalParam(name = Encounter.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n+\t                Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam subjectReference) {\n+\t\treturn VersionConvertor_30_40.convertBundle(FhirServerUtils.convertSearchResultsToBundle(\n+\t\t    encounterService.searchForEncounters(date, location, participantReference, subjectReference)));\n+\t\t\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNTAzMw=="}, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTY5MzUyOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNzozOFrOGOxAtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjoyNzozOFrOGOxAtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNjI0Nw==", "bodyText": "Thinking about this some more, I think that instead of naming every ResourceProvider ...DStu3ResourceProvider we should move them into a r3 package so, for instance, this class would become org.openmrs.module.fhir2.providers.r3.AllergyIntoleranceFhirResourceProvider.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418136247", "createdAt": "2020-04-30T16:27:38Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcwMzAxOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozMDowM1rOGOxGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozMDowM1rOGOxGvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzNzc4OQ==", "bodyText": "Let's shorten this to fhirR3Resources (R3 is the release, but was called STU3 \u2014 standard trial use; R2 was released and called DSTU2 \u2014 draft standard trial use; I'm just favouring the shorter one!)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418137789", "createdAt": "2020-04-30T16:30:03Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/AllergyIntoleranceDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirAllergyIntoleranceService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcwODYyOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/ObservationDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozMTozNFrOGOxKVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozMTozNFrOGOxKVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzODcxMQ==", "bodyText": "See above about the order of methods", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418138711", "createdAt": "2020-04-30T16:31:34Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/ObservationDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.*;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirObservationService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirObservationService observationService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Observation.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Observation getObservationById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.getObservationByUuid(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertObservation(observation);\n+\t}\n+\t\n+\t@Search\n+\tpublic Bundle searchObservations(\n+\t        @OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceAndListParam encounterReference,\n+\t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n+\t                Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam patientReference,\n+\t        //TODO: SP_HAS_MEMBER not found converted to SP_BASED_ON it's wrong\n+\t        @OptionalParam(name = Observation.SP_BASED_ON, chainWhitelist = { \"\",\n+\t                Observation.SP_CODE }, targetTypes = Observation.class) ReferenceParam hasMemberReference,\n+\t        @OptionalParam(name = Observation.SP_VALUE_CONCEPT) TokenAndListParam valueConcept,\n+\t        @OptionalParam(name = Observation.SP_VALUE_DATE) DateRangeParam valueDateParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_QUANTITY) QuantityAndListParam valueQuantityParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_STRING) StringAndListParam valueStringParam,\n+\t        @OptionalParam(name = Observation.SP_DATE) DateRangeParam date,\n+\t        @OptionalParam(name = Observation.SP_CODE) TokenAndListParam code, @Sort SortSpec sort) {\n+\t\treturn VersionConvertor_30_40.convertBundle(FhirServerUtils.convertSearchResultsToBundle(\n+\t\t    observationService.searchForObservations(encounterReference, patientReference, hasMemberReference, valueConcept,\n+\t\t        valueDateParam, valueQuantityParam, valueStringParam, date, code, sort)));\n+\t}\n+\t\n+\t@History\n+\tpublic List<Resource> getObservationHistoryById(@IdParam @NotNull IdType id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcxMDg2OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/PatientDstu3FhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozMjowN1rOGOxLxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNzo1NToyMlrOGO0MLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzOTA3OQ==", "bodyText": "getPatientHistoryById, also ordering.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418139079", "createdAt": "2020-04-30T16:32:07Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/PatientDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirPatientService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class PatientDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirPatientService patientService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Patient.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Patient getPatientById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.getPatientByUuid(id.getIdPart());\n+\t\tif (patient == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find patient with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertPatient(patient);\n+\t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchPatients(@OptionalParam(name = Patient.SP_NAME) StringOrListParam name,\n+\t        @OptionalParam(name = Patient.SP_GIVEN) StringOrListParam given,\n+\t        @OptionalParam(name = Patient.SP_FAMILY) StringOrListParam family,\n+\t        @OptionalParam(name = Patient.SP_IDENTIFIER) TokenOrListParam identifier,\n+\t        @OptionalParam(name = Patient.SP_GENDER) TokenOrListParam gender,\n+\t        @OptionalParam(name = Patient.SP_BIRTHDATE) DateRangeParam birthDate,\n+\t        @OptionalParam(name = Patient.SP_DEATH_DATE) DateRangeParam deathDate,\n+\t        @OptionalParam(name = Patient.SP_DECEASED) TokenOrListParam deceased,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_CITY) StringOrListParam city,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_STATE) StringOrListParam state,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_POSTALCODE) StringOrListParam postalCode,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_COUNTRY) StringOrListParam country, @Sort SortSpec sort) {\n+\t\treturn VersionConvertor_30_40\n+\t\t        .convertBundle(FhirServerUtils.convertSearchResultsToBundle(patientService.searchForPatients(name, given,\n+\t\t            family, identifier, gender, birthDate, deathDate, deceased, city, state, postalCode, country, sort)));\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getPatientResourceHistory(@IdParam @NotNull IdType id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE3MjAxOA==", "bodyText": "@ibacher This might need to be changed in master as well", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418172018", "createdAt": "2020-04-30T17:27:43Z", "author": {"login": "VaishSiddharth"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/PatientDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirPatientService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class PatientDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirPatientService patientService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Patient.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Patient getPatientById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.getPatientByUuid(id.getIdPart());\n+\t\tif (patient == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find patient with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertPatient(patient);\n+\t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchPatients(@OptionalParam(name = Patient.SP_NAME) StringOrListParam name,\n+\t        @OptionalParam(name = Patient.SP_GIVEN) StringOrListParam given,\n+\t        @OptionalParam(name = Patient.SP_FAMILY) StringOrListParam family,\n+\t        @OptionalParam(name = Patient.SP_IDENTIFIER) TokenOrListParam identifier,\n+\t        @OptionalParam(name = Patient.SP_GENDER) TokenOrListParam gender,\n+\t        @OptionalParam(name = Patient.SP_BIRTHDATE) DateRangeParam birthDate,\n+\t        @OptionalParam(name = Patient.SP_DEATH_DATE) DateRangeParam deathDate,\n+\t        @OptionalParam(name = Patient.SP_DECEASED) TokenOrListParam deceased,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_CITY) StringOrListParam city,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_STATE) StringOrListParam state,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_POSTALCODE) StringOrListParam postalCode,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_COUNTRY) StringOrListParam country, @Sort SortSpec sort) {\n+\t\treturn VersionConvertor_30_40\n+\t\t        .convertBundle(FhirServerUtils.convertSearchResultsToBundle(patientService.searchForPatients(name, given,\n+\t\t            family, identifier, gender, birthDate, deathDate, deceased, city, state, postalCode, country, sort)));\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getPatientResourceHistory(@IdParam @NotNull IdType id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzOTA3OQ=="}, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE4ODMzMw==", "bodyText": "I'm aware. I've got to go through that code soon.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418188333", "createdAt": "2020-04-30T17:55:22Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/PatientDstu3FhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.StringOrListParam;\n+import ca.uhn.fhir.rest.param.TokenOrListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirPatientService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirDstu3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class PatientDstu3FhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirPatientService patientService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Patient.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Patient getPatientById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Patient patient = patientService.getPatientByUuid(id.getIdPart());\n+\t\tif (patient == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find patient with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertPatient(patient);\n+\t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchPatients(@OptionalParam(name = Patient.SP_NAME) StringOrListParam name,\n+\t        @OptionalParam(name = Patient.SP_GIVEN) StringOrListParam given,\n+\t        @OptionalParam(name = Patient.SP_FAMILY) StringOrListParam family,\n+\t        @OptionalParam(name = Patient.SP_IDENTIFIER) TokenOrListParam identifier,\n+\t        @OptionalParam(name = Patient.SP_GENDER) TokenOrListParam gender,\n+\t        @OptionalParam(name = Patient.SP_BIRTHDATE) DateRangeParam birthDate,\n+\t        @OptionalParam(name = Patient.SP_DEATH_DATE) DateRangeParam deathDate,\n+\t        @OptionalParam(name = Patient.SP_DECEASED) TokenOrListParam deceased,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_CITY) StringOrListParam city,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_STATE) StringOrListParam state,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_POSTALCODE) StringOrListParam postalCode,\n+\t        @OptionalParam(name = Patient.SP_ADDRESS_COUNTRY) StringOrListParam country, @Sort SortSpec sort) {\n+\t\treturn VersionConvertor_30_40\n+\t\t        .convertBundle(FhirServerUtils.convertSearchResultsToBundle(patientService.searchForPatients(name, given,\n+\t\t            family, identifier, gender, birthDate, deathDate, deceased, city, state, postalCode, country, sort)));\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getPatientResourceHistory(@IdParam @NotNull IdType id) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzOTA3OQ=="}, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcxNDUwOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/web/servlet/FhirDstu3RestServlet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozMzowN1rOGOxOKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozMzowN1rOGOxOKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODEzOTY4OQ==", "bodyText": "To be consistent, let's call this FhirR3RestServlet", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418139689", "createdAt": "2020-04-30T16:33:07Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/web/servlet/FhirDstu3RestServlet.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.web.servlet;\n+\n+import java.util.Collection;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class FhirDstu3RestServlet extends FhirRestServlet {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcxODAxOnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/web/filter/ForwardingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNDowNlrOGOxQbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNDowNlrOGOxQbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MDI3MA==", "bodyText": "Let's remove this from this switch since we aren't going to use it right now.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418140270", "createdAt": "2020-04-30T16:34:06Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/web/filter/ForwardingFilter.java", "diffHunk": "@@ -33,7 +38,29 @@ public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n \t\tString contextPath = ((HttpServletRequest) req).getContextPath();\n \t\tString prefix = contextPath + \"/ws/fhir2/\";\n \t\tif (requestURI.startsWith(prefix)) {\n-\t\t\tString newURI = requestURI.replace(prefix, \"/ms/fhir2Servlet/\");\n+\t\t\tString[] requestPath = requestURI.split(prefix, 1);\n+\t\t\tString maybeVersion = requestPath[1].split(\"/\", 1)[0];\n+\t\t\t\n+\t\t\tString replacement;\n+\t\t\tswitch (maybeVersion) {\n+\t\t\t\tcase \"R2\":\n+\t\t\t\t\tprefix += \"/\" + maybeVersion + \"/\";\n+\t\t\t\t\treplacement = \"/ms/fhir2Dstu2Servlet\";\n+\t\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcyMTk0OnYy", "diffSide": "RIGHT", "path": "omod/src/main/resources/config.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNToxMFrOGOxS7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNToxMFrOGOxS7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MDkxMQ==", "bodyText": "We should remove this servlet mapping", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418140911", "createdAt": "2020-04-30T16:35:10Z", "author": {"login": "ibacher"}, "path": "omod/src/main/resources/config.xml", "diffHunk": "@@ -50,6 +50,16 @@\n \t\t<servlet-class>org.openmrs.module.fhir2.web.servlet.FhirRestServlet</servlet-class>\n \t</servlet>\n \n+\t<servlet>\n+\t\t<servlet-name>fhir2Dstu3Servlet</servlet-name>\n+\t\t<servlet-class>org.openmrs.module.fhir2.web.servlet.FhirDstu3RestServlet</servlet-class>\n+\t</servlet>\n+\n+\t<servlet>\n+\t\t<servlet-name>fhir2Dstu2Servlet</servlet-name>\n+\t\t<servlet-class>org.openmrs.module.fhir2.web.servlet.FhirDstu2RestServlet</servlet-class>\n+\t</servlet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcyMjc4OnYy", "diffSide": "RIGHT", "path": "omod/src/main/resources/config.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNToyNVrOGOxTgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNToyNVrOGOxTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MTA1OA==", "bodyText": "We should change this servlet-name to fhir2R3Servlet", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418141058", "createdAt": "2020-04-30T16:35:25Z", "author": {"login": "ibacher"}, "path": "omod/src/main/resources/config.xml", "diffHunk": "@@ -50,6 +50,16 @@\n \t\t<servlet-class>org.openmrs.module.fhir2.web.servlet.FhirRestServlet</servlet-class>\n \t</servlet>\n \n+\t<servlet>\n+\t\t<servlet-name>fhir2Dstu3Servlet</servlet-name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTcyNTQyOnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/web/filter/ForwardingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNjoxNFrOGOxVUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozNjoxNFrOGOxVUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MTUyMw==", "bodyText": "We need to rethink this. We should return an error if the value isn't a known version so that we're using a consistent access URL.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418141523", "createdAt": "2020-04-30T16:36:14Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/web/filter/ForwardingFilter.java", "diffHunk": "@@ -33,7 +38,29 @@ public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n \t\tString contextPath = ((HttpServletRequest) req).getContextPath();\n \t\tString prefix = contextPath + \"/ws/fhir2/\";\n \t\tif (requestURI.startsWith(prefix)) {\n-\t\t\tString newURI = requestURI.replace(prefix, \"/ms/fhir2Servlet/\");\n+\t\t\tString[] requestPath = requestURI.split(prefix, 1);\n+\t\t\tString maybeVersion = requestPath[1].split(\"/\", 1)[0];\n+\t\t\t\n+\t\t\tString replacement;\n+\t\t\tswitch (maybeVersion) {\n+\t\t\t\tcase \"R2\":\n+\t\t\t\t\tprefix += \"/\" + maybeVersion + \"/\";\n+\t\t\t\t\treplacement = \"/ms/fhir2Dstu2Servlet\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase \"R3\":\n+\t\t\t\t\tprefix += \"/\" + maybeVersion + \"/\";\n+\t\t\t\t\treplacement = \"/ms/fhir2Dstu3Servlet\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase \"R4\":\n+\t\t\t\t\tprefix += \"/\" + maybeVersion + \"/\";\n+\t\t\t\t\treplacement = \"/ms/fhir2Servlet\";\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\treplacement = \"/ms/fhir2Servlet\";\n+\t\t\t\t\tbreak;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTczMzM5OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozODowNVrOGOxaBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozODowNVrOGOxaBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MjcyNQ==", "bodyText": "Instead of making a fork of this class, maybe it makes more sense to call the version here BaseFhirR3ResourceProviderTest and have it extend BaseFhirResourceProviderTest and then make the changes that we need here. This might involve changing BaseFhirResourceProviderTest, but that's ok.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418142725", "createdAt": "2020-04-30T16:38:05Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirResourceProviderTest.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.web.servlet;\n+\n+import static org.springframework.http.HttpHeaders.ACCEPT;\n+import static org.springframework.http.HttpHeaders.CONTENT_TYPE;\n+\n+import javax.servlet.ServletConfig;\n+import javax.servlet.ServletException;\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.stream.Collectors;\n+\n+import ca.uhn.fhir.context.FhirContext;\n+import ca.uhn.fhir.parser.DataFormatException;\n+import ca.uhn.fhir.parser.IParser;\n+import ca.uhn.fhir.rest.api.RequestTypeEnum;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.interceptor.LoggingInterceptor;\n+import lombok.SneakyThrows;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.hl7.fhir.dstu3.model.Bundle;\n+import org.hl7.fhir.dstu3.model.OperationOutcome;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.openmrs.api.APIException;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.impl.FhirGlobalPropertyServiceImpl;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.mock.web.MockHttpServletRequest;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+import org.springframework.mock.web.MockServletConfig;\n+import org.springframework.mock.web.MockServletContext;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public abstract class BaseFhirResourceProviderTest<T extends IResourceProvider, U extends IBaseResource> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTczNjU4OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirProvenanceResourceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozODo0OVrOGOxb7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNjozODo0OVrOGOxb7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODE0MzIxMw==", "bodyText": "Instead of making a fork of this class, maybe it makes more sense to call the version here BaseFhirR3ProvenanceResourceTest and have it extend BaseFhirProvenanceResourceTest and then make the changes that we need here. This might involve changing BaseFhirProvenanceResourceTest, but that's ok.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418143213", "createdAt": "2020-04-30T16:38:49Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/test/java/org/openmrs/module/fhir2/web/servlet/BaseFhirProvenanceResourceTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.web.servlet;\n+\n+import static org.mockito.Mockito.when;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.DomainResource;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.hl7.fhir.r4.model.Coding;\n+import org.hl7.fhir.r4.model.Practitioner;\n+import org.hl7.fhir.r4.model.Provenance;\n+import org.hl7.fhir.r4.model.Reference;\n+import org.mockito.Mock;\n+import org.openmrs.User;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.translators.PractitionerReferenceTranslator;\n+\n+public abstract class BaseFhirProvenanceResourceTest<T extends DomainResource> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e97a17de2cccf29cebd349a2cd7af83ac4c2673"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjE1ODk5OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODozNzo1OFrOGO1pAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo0NDo0M1rOGO13xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjA5OA==", "bodyText": "@ibacher Test for all these @History functions fail. Can you give an idea, what's wrong here", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418212098", "createdAt": "2020-04-30T18:37:58Z", "author": {"login": "VaishSiddharth"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java", "diffHunk": "@@ -53,6 +53,16 @@ public Encounter getEncounterById(@IdParam @NotNull IdType id) {\n \t\treturn VersionConvertor_30_40.convertEncounter(encounter);\n \t}\n \t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertEncounter(encounter).getContained();\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84293a9076dfb4f095fcbfd6eb9a05ab2a2a4e26"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxNTg3OA==", "bodyText": "Likely because the converter doesn't handled the contained resources properly, so when getContained() gets called here, it returns an empty list. We may need to look at implementing re-implementing the code to get the provenance resources as part of the R3 submodule.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r418215878", "createdAt": "2020-04-30T18:44:43Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/EncounterFhirResourceProvider.java", "diffHunk": "@@ -53,6 +53,16 @@ public Encounter getEncounterById(@IdParam @NotNull IdType id) {\n \t\treturn VersionConvertor_30_40.convertEncounter(encounter);\n \t}\n \t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getEncounterHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Encounter encounter = encounterService.getEncounterByUuid(id.getIdPart());\n+\t\tif (encounter == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find encounter with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertEncounter(encounter).getContained();\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIxMjA5OA=="}, "originalCommit": {"oid": "84293a9076dfb4f095fcbfd6eb9a05ab2a2a4e26"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTAxOTc1OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/FhirResourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzowOTozOFrOGSII9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxODoxMDozMFrOGSKXKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2MDkxOA==", "bodyText": "@ibacher I have added an interface like this.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r421660918", "createdAt": "2020-05-07T17:09:38Z", "author": {"login": "VaishSiddharth"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/FhirResourceProviderTest.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.openmrs.module.fhir2.providers;\n+\n+import org.hl7.fhir.instance.model.api.IBaseBundle;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.io.UnsupportedEncodingException;\n+\n+public interface FhirResourceProviderTest {\n+    IBaseBundle readBundleResponse(MockHttpServletResponse response) throws UnsupportedEncodingException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f754bd0f49ebbef8ef681b2c794fceadf34a8b76"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY5NzMyMQ==", "bodyText": "@VaishSiddharth Sorry... I was apparently leading you astray. This commit has the refactoring necessary for this. I left some errors in the DSTU3 test classes though. See if you can work them out.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r421697321", "createdAt": "2020-05-07T18:10:30Z", "author": {"login": "ibacher"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/FhirResourceProviderTest.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package org.openmrs.module.fhir2.providers;\n+\n+import org.hl7.fhir.instance.model.api.IBaseBundle;\n+import org.springframework.mock.web.MockHttpServletResponse;\n+\n+import java.io.UnsupportedEncodingException;\n+\n+public interface FhirResourceProviderTest {\n+    IBaseBundle readBundleResponse(MockHttpServletResponse response) throws UnsupportedEncodingException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2MDkxOA=="}, "originalCommit": {"oid": "f754bd0f49ebbef8ef681b2c794fceadf34a8b76"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODEwMDUzOnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/ConditionFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMjoxNVrOGSlCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMjoxNVrOGSlCRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNDM0Mw==", "bodyText": "This is correct.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r422134343", "createdAt": "2020-05-08T13:12:15Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/ConditionFhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.MethodOutcome;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.param.DateRangeParam;\n+import ca.uhn.fhir.rest.param.QuantityAndListParam;\n+import ca.uhn.fhir.rest.param.ReferenceAndListParam;\n+import ca.uhn.fhir.rest.param.TokenAndListParam;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirConditionService;\n+import org.openmrs.module.fhir2.util.FhirServerUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirR3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ConditionFhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirConditionService conditionService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Condition.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Condition getConditionById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Condition condition = conditionService.getConditionByUuid(id.getIdPart());\n+\t\tif (condition == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find condition with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertCondition(condition);\n+\t}\n+\t\n+\t@History\n+\t@SuppressWarnings(\"unused\")\n+\tpublic List<Resource> getConditionHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Condition condition = conditionService.getConditionByUuid(id.getIdPart());\n+\t\tif (condition == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find condition with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertCondition(condition).getContained();\n+\t}\n+\t\n+\t@Create\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome createCondition(@ResourceParam Condition newCondition) {\n+\t\treturn FhirServerUtils\n+\t\t        .buildCreate(conditionService.saveCondition(VersionConvertor_30_40.convertCondition(newCondition)));\n+\t}\n+\t\n+\t@Search\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Bundle searchConditions(\n+\t        @OptionalParam(name = Condition.SP_PATIENT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_NAME,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY }) ReferenceAndListParam patientParam,\n+\t        @OptionalParam(name = Condition.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_NAME,\n+\t                Patient.SP_GIVEN, Patient.SP_FAMILY }) ReferenceAndListParam subjectParam,\n+\t        @OptionalParam(name = Condition.SP_CODE) TokenAndListParam code,\n+\t        @OptionalParam(name = Condition.SP_CLINICAL_STATUS) TokenAndListParam clinicalStatus,\n+\t        @OptionalParam(name = Condition.SP_ONSET_DATE) DateRangeParam onsetDate,\n+\t        @OptionalParam(name = Condition.SP_ONSET_AGE) QuantityAndListParam onsetAge,\n+\t        //SP_RECORDED_DATE not present so changed to SP_ASSERTED_DATE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c139e48446381c4e91525c556fcf8741788c527"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODEwMzQ5OnYy", "diffSide": "RIGHT", "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/ObservationFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMzoxMzoxNFrOGSlELQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNDowNjo1MVrOGSmzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNDgyOQ==", "bodyText": "This should be SP_RELATED, but note that SP_RELATED has a somewhat different structure.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r422134829", "createdAt": "2020-05-08T13:13:14Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/ObservationFhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.*;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirObservationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirR3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationFhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirObservationService observationService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Observation.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Observation getObservationById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertObservation(observation);\n+\t}\n+\t\n+\t@History\n+\tpublic List<Resource> getObservationHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find Observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertObservation(observation).getContained();\n+\t}\n+\t\n+\t@Search\n+\tpublic IBundleProvider searchObservations(\n+\t        @OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceAndListParam encounterReference,\n+\t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n+\t                Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam patientReference,\n+\t        //TODO: SP_HAS_MEMBER not present so converted to SP_BASED_ON just to prevent errors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c139e48446381c4e91525c556fcf8741788c527"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1MzYzMA==", "bodyText": "@ibacher Shouldn't this be SP_RELATED_TYPE here is why I think so.\nAlso only changing the data type will not solve the problems, I think that we'll have to map it, as we did for Task also the observation resource returns IBundleProvider in search function which complicates things or if not all the tests are failing with this error message\nca.uhn.fhir.context.ConfigurationException: This context is for FHIR version \"DSTU3\" but the class \"org.hl7.fhir.r4.model.OperationOutcome\" is for version \"R4\"\n\n\nI guess we'll need to override this method also in BaseFhirR3ResourceProviderTest", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r422153630", "createdAt": "2020-05-08T13:49:14Z", "author": {"login": "VaishSiddharth"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/ObservationFhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.*;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirObservationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirR3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationFhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirObservationService observationService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Observation.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Observation getObservationById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertObservation(observation);\n+\t}\n+\t\n+\t@History\n+\tpublic List<Resource> getObservationHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find Observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertObservation(observation).getContained();\n+\t}\n+\t\n+\t@Search\n+\tpublic IBundleProvider searchObservations(\n+\t        @OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceAndListParam encounterReference,\n+\t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n+\t                Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam patientReference,\n+\t        //TODO: SP_HAS_MEMBER not present so converted to SP_BASED_ON just to prevent errors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNDgyOQ=="}, "originalCommit": {"oid": "1c139e48446381c4e91525c556fcf8741788c527"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE1ODcyMQ==", "bodyText": "No. SP_RELATED. SP_RELATED_TYPE refers to the type structure that is part of the related element. Technically, SP_RELATED_TARGET is the more direct replacement for SP_HAS_MEMBER, but only when the related structure looks like this:\n\"related\": {\n    \"type\": \"has-member\",\n    \"target\": \"Observation/3\"\n}\nOr, in terms of search parameters:\n/Observation?related.type=has-member&related.target=Observation/3\n\nThis also isn't exactly like Task, because what we're converting here isn't a full resource, but a search parameter.\nThe message you highlight:\nca.uhn.fhir.context.ConfigurationException: This context is for FHIR version \"DSTU3\" but the class \"org.hl7.fhir.r4.model.OperationOutcome\" is for version \"R4\"\n\nDoes indicate a problem, but part of the problem is that we're not properly handling things when the result is an OperationOutcome (which itself needs to be translated). Please step through one of these failing tests with a debugger to see what is actually happening.\n\nI guess we'll need to override this method also in BaseFhirR3ResourceProviderTest\n\nWhich method are you referring to?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r422158721", "createdAt": "2020-05-08T13:58:43Z", "author": {"login": "ibacher"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/ObservationFhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.*;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirObservationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirR3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationFhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirObservationService observationService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Observation.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Observation getObservationById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertObservation(observation);\n+\t}\n+\t\n+\t@History\n+\tpublic List<Resource> getObservationHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find Observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertObservation(observation).getContained();\n+\t}\n+\t\n+\t@Search\n+\tpublic IBundleProvider searchObservations(\n+\t        @OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceAndListParam encounterReference,\n+\t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n+\t                Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam patientReference,\n+\t        //TODO: SP_HAS_MEMBER not present so converted to SP_BASED_ON just to prevent errors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNDgyOQ=="}, "originalCommit": {"oid": "1c139e48446381c4e91525c556fcf8741788c527"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjE2MzI1Mw==", "bodyText": "@ibacher\n\nWhich method are you referring to?\n\nprotected void describeMismatchSafely(MockHttpServletResponse item, Description mismatchDescription) in this function we have OperationOutcome which is of import org.hl7.fhir.r4.model.OperationOutcome; type so I think this needs to be generic so that all versions and use it", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r422163253", "createdAt": "2020-05-08T14:06:51Z", "author": {"login": "VaishSiddharth"}, "path": "omod-dstu3/src/main/java/org/openmrs/module/fhir2/providers/r3/ObservationFhirResourceProvider.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.providers.r3;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.util.List;\n+\n+import ca.uhn.fhir.rest.annotation.*;\n+import ca.uhn.fhir.rest.api.SortSpec;\n+import ca.uhn.fhir.rest.api.server.IBundleProvider;\n+import ca.uhn.fhir.rest.param.*;\n+import ca.uhn.fhir.rest.server.IResourceProvider;\n+import ca.uhn.fhir.rest.server.exceptions.ResourceNotFoundException;\n+import lombok.AccessLevel;\n+import lombok.Setter;\n+import org.hl7.fhir.convertors.VersionConvertor_30_40;\n+import org.hl7.fhir.dstu3.model.*;\n+import org.hl7.fhir.instance.model.api.IBaseResource;\n+import org.openmrs.module.fhir2.api.FhirObservationService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+@Qualifier(\"fhirR3Resources\")\n+@Setter(AccessLevel.PACKAGE)\n+public class ObservationFhirResourceProvider implements IResourceProvider {\n+\t\n+\t@Autowired\n+\tprivate FhirObservationService observationService;\n+\t\n+\t@Override\n+\tpublic Class<? extends IBaseResource> getResourceType() {\n+\t\treturn Observation.class;\n+\t}\n+\t\n+\t@Read\n+\t@SuppressWarnings(\"unused\")\n+\tpublic Observation getObservationById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\t\n+\t\treturn VersionConvertor_30_40.convertObservation(observation);\n+\t}\n+\t\n+\t@History\n+\tpublic List<Resource> getObservationHistoryById(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.Observation observation = observationService.get(id.getIdPart());\n+\t\tif (observation == null) {\n+\t\t\tthrow new ResourceNotFoundException(\"Could not find Observation with Id \" + id.getIdPart());\n+\t\t}\n+\t\treturn VersionConvertor_30_40.convertObservation(observation).getContained();\n+\t}\n+\t\n+\t@Search\n+\tpublic IBundleProvider searchObservations(\n+\t        @OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceAndListParam encounterReference,\n+\t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n+\t                Patient.SP_FAMILY,\n+\t                Patient.SP_NAME }, targetTypes = Patient.class) ReferenceAndListParam patientReference,\n+\t        //TODO: SP_HAS_MEMBER not present so converted to SP_BASED_ON just to prevent errors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEzNDgyOQ=="}, "originalCommit": {"oid": "1c139e48446381c4e91525c556fcf8741788c527"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDY5OTExOnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/web/servlet/FhirVersionUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNDoyNjowM1rOGWhUCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowOTozNlrOGW45qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2NzY1OA==", "bodyText": "@ibacher I get a NPE here when I do something like this\nreturn request.getScheme() + \"://\" + request.getServerName() + port + \"/\" + contextPath + \"/ws/fhir2/\"\n\t\t        + FhirVersionUtils.getFhirResourceVersion(request);\nin OpenmrsFhirAddressStrategy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r426267658", "createdAt": "2020-05-17T14:26:03Z", "author": {"login": "VaishSiddharth"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/web/servlet/FhirVersionUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.web.servlet;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class FhirVersionUtils {\n+\t\n+\tpublic enum FhirVersion {\n+\t\tR4,\n+\t\tR3,\n+\t\tERROR\n+\t}\n+\t\n+\tpublic static Enum<FhirVersion> getFhirResourceVersion(HttpServletRequest request) {\n+\t\tString requestURI = request.getRequestURI();\n+\t\tString contextPath = request.getContextPath();\n+\t\tString prefix = contextPath + \"/ws/fhir2\";\n+\t\tif (requestURI.startsWith(prefix)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e50aa183c7fcb22ccb9ddd642eef317b083630"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1NDEyMw==", "bodyText": "Can you give me some more context for this? What does the new version of OpenmrsFhirAddressStrategy look like? What does the test case that you are using look like?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r426654123", "createdAt": "2020-05-18T14:09:36Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/web/servlet/FhirVersionUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.web.servlet;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class FhirVersionUtils {\n+\t\n+\tpublic enum FhirVersion {\n+\t\tR4,\n+\t\tR3,\n+\t\tERROR\n+\t}\n+\t\n+\tpublic static Enum<FhirVersion> getFhirResourceVersion(HttpServletRequest request) {\n+\t\tString requestURI = request.getRequestURI();\n+\t\tString contextPath = request.getContextPath();\n+\t\tString prefix = contextPath + \"/ws/fhir2\";\n+\t\tif (requestURI.startsWith(prefix)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2NzY1OA=="}, "originalCommit": {"oid": "52e50aa183c7fcb22ccb9ddd642eef317b083630"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE4NDU3OnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/web/servlet/FhirVersionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNDoyNVrOGW4ruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNDoyNVrOGW4ruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MDU1NQ==", "bodyText": "I would make this UNKNOWN. Also I would order the values in the enum this way: UNKNOWN, R3, R4. That way we're adding values to the end and (hopefully) not messing up the ordinal order of the enum.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r426650555", "createdAt": "2020-05-18T14:04:25Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/web/servlet/FhirVersionUtils.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.web.servlet;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+public class FhirVersionUtils {\n+\t\n+\tpublic enum FhirVersion {\n+\t\tR4,\n+\t\tR3,\n+\t\tERROR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e50aa183c7fcb22ccb9ddd642eef317b083630"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NzE5MTQ5OnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/web/filter/ForwardingFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNTo1NFrOGW4vww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNDowNTo1NFrOGW4vww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjY1MTU4Nw==", "bodyText": "It would be better to switch on the enum value here, even if we do need to calculate the string value. That way we have a compile-time check of the various cases.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/158#discussion_r426651587", "createdAt": "2020-05-18T14:05:54Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/web/filter/ForwardingFilter.java", "diffHunk": "@@ -39,45 +40,26 @@ public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain)\n \t\t\t\n \t\t\tString contextPath = ((HttpServletRequest) req).getContextPath();\n \t\t\tString prefix = contextPath + \"/ws/fhir2\";\n-\t\t\tif (requestURI.startsWith(prefix)) {\n-\t\t\t\tint prefixIdx = requestURI.indexOf(prefix);\n-\t\t\t\tif (prefixIdx >= 0) {\n-\t\t\t\t\tint prefixEnd = prefixIdx + prefix.length();\n-\t\t\t\t\tint pathIdx = requestURI.indexOf('/', prefixEnd + 1);\n-\t\t\t\t\t\n-\t\t\t\t\tif (pathIdx >= 0) {\n-\t\t\t\t\t\tString version = requestURI.substring(prefixEnd, pathIdx);\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif (version.isEmpty()) {\n-\t\t\t\t\t\t\t((HttpServletResponse) res).sendError(HttpServletResponse.SC_NOT_FOUND);\n-\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif (version.charAt(0) == '/') {\n-\t\t\t\t\t\t\tversion = version.substring(1);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tString replacement;\n-\t\t\t\t\t\tswitch (version) {\n-\t\t\t\t\t\t\tcase \"R3\":\n-\t\t\t\t\t\t\t\tprefix += \"/\" + version;\n-\t\t\t\t\t\t\t\treplacement = \"/ms/fhir2R3Servlet\";\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tcase \"R4\":\n-\t\t\t\t\t\t\t\tprefix += \"/\" + version;\n-\t\t\t\t\t\t\t\treplacement = \"/ms/fhir2Servlet\";\n-\t\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\t\tdefault:\n-\t\t\t\t\t\t\t\t((HttpServletResponse) res).sendError(HttpServletResponse.SC_NOT_FOUND);\n-\t\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tString newURI = requestURI.replace(prefix, replacement);\n-\t\t\t\t\t\treq.getRequestDispatcher(newURI).forward(req, res);\n-\t\t\t\t\t\treturn;\n-\t\t\t\t\t}\n-\t\t\t\t}\n+\t\t\tString fhirVersion = String.valueOf(FhirVersionUtils.getFhirResourceVersion(request));\n+\t\t\t\n+\t\t\tString replacement;\n+\t\t\tswitch (fhirVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52e50aa183c7fcb22ccb9ddd642eef317b083630"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1161, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}