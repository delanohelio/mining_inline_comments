{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NjAxMjQz", "number": 172, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjowOTo1OFrOD8cw_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjowOTo1OFrOD8cw_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzEyNDQ1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirDiagnosticReportDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjowOTo1OVrOGVZPfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDoyMDoyNlrOGVem0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4Njg0NQ==", "bodyText": "Do you want to use newObs/obs as the argument name here?\nIt will align better with the exception being thrown hence more readable", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/172#discussion_r425086845", "createdAt": "2020-05-14T12:09:59Z", "author": {"login": "jecihjoy"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirDiagnosticReportDaoImpl.java", "diffHunk": "@@ -9,40 +9,24 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import static org.hibernate.criterion.Restrictions.eq;\n-\n import lombok.AccessLevel;\n import lombok.Setter;\n-import org.hibernate.SessionFactory;\n import org.openmrs.Obs;\n import org.openmrs.api.db.DAOException;\n import org.openmrs.module.fhir2.api.dao.FhirDiagnosticReportDao;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirDiagnosticReportDaoImpl implements FhirDiagnosticReportDao {\n-\t\n-\t@Autowired\n-\t@Qualifier(\"sessionFactory\")\n-\tSessionFactory sessionFactory;\n+public class FhirDiagnosticReportDaoImpl extends BaseFhirDao<Obs> implements FhirDiagnosticReportDao {\n \t\n \t@Override\n-\tpublic Obs getObsGroupByUuid(String uuid) {\n-\t\treturn (Obs) sessionFactory.getCurrentSession().createCriteria(Obs.class).createAlias(\"groupMembers\", \"group\")\n-\t\t        .add(eq(\"uuid\", uuid)).uniqueResult();\n-\t}\n-\t\n-\t@Override\n-\tpublic Obs saveObsGroup(Obs obs) throws DAOException {\n-\t\tif (!obs.isObsGrouping()) {\n+\tpublic Obs createOrUpdate(Obs newEntry) throws DAOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8a610c105cd83d19296568146aeaae0dba9a31e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE3NDczOQ==", "bodyText": "Done", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/172#discussion_r425174739", "createdAt": "2020-05-14T14:20:26Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirDiagnosticReportDaoImpl.java", "diffHunk": "@@ -9,40 +9,24 @@\n  */\n package org.openmrs.module.fhir2.api.dao.impl;\n \n-import static org.hibernate.criterion.Restrictions.eq;\n-\n import lombok.AccessLevel;\n import lombok.Setter;\n-import org.hibernate.SessionFactory;\n import org.openmrs.Obs;\n import org.openmrs.api.db.DAOException;\n import org.openmrs.module.fhir2.api.dao.FhirDiagnosticReportDao;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Component;\n \n @Component\n @Setter(AccessLevel.PACKAGE)\n-public class FhirDiagnosticReportDaoImpl implements FhirDiagnosticReportDao {\n-\t\n-\t@Autowired\n-\t@Qualifier(\"sessionFactory\")\n-\tSessionFactory sessionFactory;\n+public class FhirDiagnosticReportDaoImpl extends BaseFhirDao<Obs> implements FhirDiagnosticReportDao {\n \t\n \t@Override\n-\tpublic Obs getObsGroupByUuid(String uuid) {\n-\t\treturn (Obs) sessionFactory.getCurrentSession().createCriteria(Obs.class).createAlias(\"groupMembers\", \"group\")\n-\t\t        .add(eq(\"uuid\", uuid)).uniqueResult();\n-\t}\n-\t\n-\t@Override\n-\tpublic Obs saveObsGroup(Obs obs) throws DAOException {\n-\t\tif (!obs.isObsGrouping()) {\n+\tpublic Obs createOrUpdate(Obs newEntry) throws DAOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA4Njg0NQ=="}, "originalCommit": {"oid": "b8a610c105cd83d19296568146aeaae0dba9a31e"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 889, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}