{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDg3MjM2", "number": 99, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxOTowOVrODkzUsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNjo0NlrODrT7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTE2MjA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirObservationService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxOToxMFrOFxVGYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDo1MTo1NVrOFxWEbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MDI0Mg==", "bodyText": "@ibacher I have a few questions here\n\nWhat should be the data type of hasMemberReference I think that TokenOrListParam should be the datatype as we do have a function in BaseDaoImpl to handleBoolean.\nI am a bit confused that how should we handle the value parameters, should we have only a single ReferenceParam and include all of these value-concept value-date value-quantity value-string, and then make a function to handle all the value related search queries.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387270242", "createdAt": "2020-03-03T20:19:10Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirObservationService.java", "diffHunk": "@@ -23,5 +26,7 @@\n \tObservation getObservationByUuid(@NotNull String uuid);\n \t\n \tCollection<Observation> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n+\t        ReferenceParam hasMemberReference, TokenAndListParam valueConcept, DateRangeParam valueDateParam,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NjEyNQ==", "bodyText": "@VaishSiddharth\n\n\nSo the hasMember property of FHIR Observations is not a boolean value. It stores a reference to an observation that is part of this observation group. So this should be a ReferenceParam and treated similarly to how we treat Subject, etc.\n\n\nThe FHIR spec actually wants separate parameters for each value type, so value-concept should map to a TokenAndListParam, value-date to a DateRangeParam, value-quantity to a QuantityAndListParam and value-string to a StringAndListParam.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387286125", "createdAt": "2020-03-03T20:51:55Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirObservationService.java", "diffHunk": "@@ -23,5 +26,7 @@\n \tObservation getObservationByUuid(@NotNull String uuid);\n \t\n \tCollection<Observation> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n+\t        ReferenceParam hasMemberReference, TokenAndListParam valueConcept, DateRangeParam valueDateParam,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MDI0Mg=="}, "originalCommit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMTkxODM0OnYy", "diffSide": "RIGHT", "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyNzo1M1rOFxvWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMTozNzo1MFrOFx-ivQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMDM5NQ==", "bodyText": "I'd actually prefer it if SP_CODE came after the SP_SUBJECT and before all these other search functions.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387700395", "createdAt": "2020-03-04T14:27:53Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProvider.java", "diffHunk": "@@ -61,8 +64,15 @@ public Observation getObservationById(@IdParam @NotNull IdType id) {\n \tpublic Bundle searchObservations(@OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceParam encounterReference,\n \t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam patientReference,\n+\t        @OptionalParam(name = Observation.SP_HAS_MEMBER) ReferenceParam hasMemberReference,\n+\t        @OptionalParam(name = Observation.SP_VALUE_CONCEPT) TokenAndListParam valueConcept,\n+\t        @OptionalParam(name = Observation.SP_VALUE_DATE) DateRangeParam valueDateParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_QUANTITY) QuantityAndListParam valueQuantityParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_STRING) StringAndListParam valueStringParam,\n+\t        @OptionalParam(name = Observation.SP_DATE) DateRangeParam date,\n \t        @OptionalParam(name = Observation.SP_CODE) TokenAndListParam code, @Sort SortSpec sort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk0OTI0NQ==", "bodyText": "will make this change in the next commit", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387949245", "createdAt": "2020-03-04T21:37:50Z", "author": {"login": "VaishSiddharth"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProvider.java", "diffHunk": "@@ -61,8 +64,15 @@ public Observation getObservationById(@IdParam @NotNull IdType id) {\n \tpublic Bundle searchObservations(@OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceParam encounterReference,\n \t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam patientReference,\n+\t        @OptionalParam(name = Observation.SP_HAS_MEMBER) ReferenceParam hasMemberReference,\n+\t        @OptionalParam(name = Observation.SP_VALUE_CONCEPT) TokenAndListParam valueConcept,\n+\t        @OptionalParam(name = Observation.SP_VALUE_DATE) DateRangeParam valueDateParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_QUANTITY) QuantityAndListParam valueQuantityParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_STRING) StringAndListParam valueStringParam,\n+\t        @OptionalParam(name = Observation.SP_DATE) DateRangeParam date,\n \t        @OptionalParam(name = Observation.SP_CODE) TokenAndListParam code, @Sort SortSpec sort) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMDM5NQ=="}, "originalCommit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzM3NzA1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToxMDoxN1rOFx9vcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTowMTo0MFrOF0c7pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA==", "bodyText": "@ibacher Please have a look at the handlers. I am still left with the has-member.code parameter. Not very sure about how to convert value to codeable concept. I guess something like this\nhandleAndListParamBySystem(valueConcept, (system, tokens) -> {\nCodeableConcept codeableConcept=new CodeableConcept();\n\t\tcodeableConcept.addCoding().setCode(Not sure what will come here).setSystem(system);\n});", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387936114", "createdAt": "2020-03-04T21:10:17Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ0Nzk1Ng==", "bodyText": "@ibacher Please have a look", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390447956", "createdAt": "2020-03-10T16:31:33Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ5NzUzMg==", "bodyText": "I actually don't think that you need to turn the has-member.code parameter into a codeable concept. Just refactor out the relevant part of the handleCodedConcept method from FhirObservationDaoImpl into BaseDaoImpl and call that.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390497532", "createdAt": "2020-03-10T17:45:24Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMjc1OQ==", "bodyText": "@ibacher I think that we'll have to handle it by doing something like this\nprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n\t\tif (hasMemberReference != null) {\n\t\t\tcriteria.createAlias(\"obsGroup\", \"og\");\n\n\t\t\tif (hasMemberReference.getChain() != null) {\n\t\t\t\tswitch (hasMemberReference.getChain()) {\n\t\t\t\t\tcase Observation.SP_CODE:\n\t\t\t\t\t\tcriteria.add(eq(\"og.concept\", hasMemberReference.getValue()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"\":\n\t\t\t\t\t\tcriteria.add(eq(\"og.uuid\", hasMemberReference.getValue()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\nbut I am not sure that should we use obsGroup or groupMembers", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390502759", "createdAt": "2020-03-10T17:53:37Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyOTEwNQ==", "bodyText": "@ibacher Isn't it better to have only one parameter as hasMember and through that we could search by hasMember.code as well. Will the above code not be a good option to use?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390529105", "createdAt": "2020-03-10T18:36:27Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUyOTc0OQ==", "bodyText": "So the property you should use is groupMembers. And, you're right that we'll need two branches here, but the handling for SP_CODE will need to be a bit more complex to handle:\n/ws/fhir2/Observation?has-member.code=http://loinc.org|8854-6\n\ud83d\ude04", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390529749", "createdAt": "2020-03-10T18:37:32Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzMDcyMw==", "bodyText": "@VaishSiddharth Do you see what I'm getting at here?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390530723", "createdAt": "2020-03-10T18:39:08Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUzNjU2Ng==", "bodyText": "@ibacher Yes you mean to say that the code part will be a bit difficult to handle, so no problem in that but can't we include that part in this handle function itself?\nprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n\t\tif (hasMemberReference != null) {\n\t\t\tcriteria.createAlias(\"obsGroup\", \"og\");\n\n\t\t\tif (hasMemberReference.getChain() != null) {\n\t\t\t\tswitch (hasMemberReference.getChain()) {\n\t\t\t\t\tcase Observation.SP_CODE:\n\n//Call a function similar to handleValueCodedConcept\n\t\t\t\t\t\tcriteria.add(eq(\"og.concept\", hasMemberReference.getValue()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase \"\":\n\t\t\t\t\t\tcriteria.add(eq(\"og.uuid\", hasMemberReference.getValue()));\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390536566", "createdAt": "2020-03-10T18:48:41Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU0NDI5Mw==", "bodyText": "Yes, that's the idea!", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390544293", "createdAt": "2020-03-10T19:01:40Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA=="}, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDk1NTU0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowNDo1NVrOFzF3eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowNTo1NFrOF0TJGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzgxOA==", "bodyText": "@ibacher Please help me resolve this issue", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r389117818", "createdAt": "2020-03-06T20:04:55Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -394,4 +412,75 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tTokenParam codingToken = new TokenParam();\n+\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n+\t\tcode.addAnd(codingToken);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n+\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\t//\t\tQuantityAndListParam quantityAndListParam=new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM0NjcyOQ==", "bodyText": "Change VALUE_QUANTITY from \"134.0\" to 134.0d and change the type to double.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390346729", "createdAt": "2020-03-10T14:18:53Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -394,4 +412,75 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tTokenParam codingToken = new TokenParam();\n+\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n+\t\tcode.addAnd(codingToken);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n+\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\t//\t\tQuantityAndListParam quantityAndListParam=new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzgxOA=="}, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM1NTI3NQ==", "bodyText": "@ibacher Still the same error", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390355275", "createdAt": "2020-03-10T14:29:48Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -394,4 +412,75 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tTokenParam codingToken = new TokenParam();\n+\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n+\t\tcode.addAnd(codingToken);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n+\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\t//\t\tQuantityAndListParam quantityAndListParam=new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzgxOA=="}, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MDE3Nw==", "bodyText": "@VaishSiddharth Can you put the full stack trace somewhere?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390370177", "createdAt": "2020-03-10T14:48:38Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -394,4 +412,75 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tTokenParam codingToken = new TokenParam();\n+\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n+\t\tcode.addAnd(codingToken);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n+\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\t//\t\tQuantityAndListParam quantityAndListParam=new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzgxOA=="}, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3NTUxMA==", "bodyText": "@Test\n\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n\t\t\n\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n\t\t\n\t\tQuantityParam quantityParam = new QuantityParam();\n\t\tquantityParam.setValue(134.0d);\n\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n\t\t\n\t\t// Error java.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader 'bootstrap')\n\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n\t\t    null, null);\n\t\t\n\t\tassertThat(results, notNullValue());\n\t\tassertThat(results, not(empty()));\n\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n\t}\n/usr/lib/jvm/jdk-13.0.1/bin/java -ea -Didea.test.cyclic.buffer.size=1048576 -javaagent:/snap/intellij-idea-community/208/lib/idea_rt.jar=45755:/snap/intellij-idea-community/208/bin -Dfile.encoding=UTF-8 -classpath /snap/intellij-idea-community/208/lib/idea_rt.jar:/snap/intellij-idea-community/208/plugins/junit/lib/junit5-rt.jar:/snap/intellij-idea-community/208/plugins/junit/lib/junit-rt.jar:/home/sid/IdeaProjects/openmrs-module-fhir2/api/target/test-classes:/home/sid/IdeaProjects/openmrs-module-fhir2/api/target/classes:/home/sid/.m2/repository/ca/uhn/hapi/fhir/hapi-fhir-base/4.2.0/hapi-fhir-base-4.2.0.jar:/home/sid/.m2/repository/com/google/code/gson/gson/2.8.5/gson-2.8.5.jar:/home/sid/.m2/repository/org/apache/commons/commons-lang3/3.9/commons-lang3-3.9.jar:/home/sid/.m2/repository/org/apache/commons/commons-text/1.7/commons-text-1.7.jar:/home/sid/.m2/repository/commons-codec/commons-codec/1.12/commons-codec-1.12.jar:/home/sid/.m2/repository/ca/uhn/hapi/fhir/hapi-fhir-structures-r4/4.2.0/hapi-fhir-structures-r4-4.2.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/fhir/org.hl7.fhir.utilities/4.2.0/org.hl7.fhir.utilities-4.2.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/fhir/org.hl7.fhir.r4/4.2.0/org.hl7.fhir.r4-4.2.0.jar:/home/sid/.m2/repository/org/fhir/ucum/1.0.2/ucum-1.0.2.jar:/home/sid/.m2/repository/xpp3/xpp3/1.1.4c/xpp3-1.1.4c.jar:/home/sid/.m2/repository/xpp3/xpp3_xpath/1.1.4c/xpp3_xpath-1.1.4c.jar:/home/sid/.m2/repository/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar:/home/sid/.m2/repository/org/projectlombok/lombok/1.18.10/lombok-1.18.10.jar:/home/sid/.m2/repository/javax/inject/javax.inject/1/javax.inject-1.jar:/home/sid/.m2/repository/com/google/guava/guava/28.1-jre/guava-28.1-jre.jar:/home/sid/.m2/repository/com/google/guava/failureaccess/1.0.1/failureaccess-1.0.1.jar:/home/sid/.m2/repository/com/google/guava/listenablefuture/9999.0-empty-to-avoid-conflict-with-guava/listenablefuture-9999.0-empty-to-avoid-conflict-with-guava.jar:/home/sid/.m2/repository/org/checkerframework/checker-qual/2.8.1/checker-qual-2.8.1.jar:/home/sid/.m2/repository/com/google/errorprone/error_prone_annotations/2.3.2/error_prone_annotations-2.3.2.jar:/home/sid/.m2/repository/com/google/j2objc/j2objc-annotations/1.3/j2objc-annotations-1.3.jar:/home/sid/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.18/animal-sniffer-annotations-1.18.jar:/home/sid/.m2/repository/org/exparity/hamcrest-date/2.0.7/hamcrest-date-2.0.7.jar:/home/sid/.m2/repository/org/openmrs/api/openmrs-api/2.0.5/openmrs-api-2.0.5.jar:/home/sid/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:/home/sid/.m2/repository/commons-beanutils/commons-beanutils/1.7.0/commons-beanutils-1.7.0.jar:/home/sid/.m2/repository/commons-io/commons-io/1.4/commons-io-1.4.jar:/home/sid/.m2/repository/org/azeckoski/reflectutils/0.9.14/reflectutils-0.9.14.jar:/home/sid/.m2/repository/org/apache/velocity/velocity/1.6.2/velocity-1.6.2.jar:/home/sid/.m2/repository/commons-lang/commons-lang/2.4/commons-lang-2.4.jar:/home/sid/.m2/repository/log4j/log4j/1.2.15/log4j-1.2.15.jar:/home/sid/.m2/repository/org/springframework/spring-core/4.1.4.RELEASE/spring-core-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-beans/4.1.4.RELEASE/spring-beans-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-context/4.1.4.RELEASE/spring-context-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-expression/4.1.4.RELEASE/spring-expression-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-aop/4.1.4.RELEASE/spring-aop-4.1.4.RELEASE.jar:/home/sid/.m2/repository/aopalliance/aopalliance/1.0/aopalliance-1.0.jar:/home/sid/.m2/repository/org/springframework/spring-orm/4.1.4.RELEASE/spring-orm-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-tx/4.1.4.RELEASE/spring-tx-4.1.4.RELEASE.jar:/home/sid/.m2/repository/org/springframework/spring-jdbc/4.1.4.RELEASE/spring-jdbc-4.1.4.RELEASE.jar:/home/sid/.m2/repository/asm/asm-commons/2.2.3/asm-commons-2.2.3.jar:/home/sid/.m2/repository/asm/asm-tree/2.2.3/asm-tree-2.2.3.jar:/home/sid/.m2/repository/asm/asm/2.2.3/asm-2.2.3.jar:/home/sid/.m2/repository/asm/asm-util/2.2.3/asm-util-2.2.3.jar:/home/sid/.m2/repository/cglib/cglib-nodep/2.2/cglib-nodep-2.2.jar:/home/sid/.m2/repository/ca/uhn/hapi/hapi-base/2.0/hapi-base-2.0.jar:/home/sid/.m2/repository/commons-cli/commons-cli/1.2/commons-cli-1.2.jar:/home/sid/.m2/repository/org/jdom/jdom/1.1/jdom-1.1.jar:/home/sid/.m2/repository/xalan/xalan/2.7.0/xalan-2.7.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/hapi-structures-v25/2.0/hapi-structures-v25-2.0.jar:/home/sid/.m2/repository/ca/uhn/hapi/hapi-structures-v26/2.0/hapi-structures-v26-2.0.jar:/home/sid/.m2/repository/org/javassist/javassist/3.19.0-GA/javassist-3.19.0-GA.jar:/home/sid/.m2/repository/org/hibernate/hibernate-core/4.3.9.Final/hibernate-core-4.3.9.Final.jar:/home/sid/.m2/repository/org/jboss/logging/jboss-logging/3.1.3.GA/jboss-logging-3.1.3.GA.jar:/home/sid/.m2/repository/org/jboss/logging/jboss-logging-annotations/1.2.0.Beta1/jboss-logging-annotations-1.2.0.Beta1.jar:/home/sid/.m2/repository/org/jboss/spec/javax/transaction/jboss-transaction-api_1.2_spec/1.0.0.Final/jboss-transaction-api_1.2_spec-1.0.0.Final.jar:/home/sid/.m2/repository/org/hibernate/common/hibernate-commons-annotations/4.0.5.Final/hibernate-commons-annotations-4.0.5.Final.jar:/home/sid/.m2/repository/org/hibernate/javax/persistence/hibernate-jpa-2.1-api/1.0.0.Final/hibernate-jpa-2.1-api-1.0.0.Final.jar:/home/sid/.m2/repository/antlr/antlr/2.7.7/antlr-2.7.7.jar:/home/sid/.m2/repository/org/jboss/jandex/1.1.0.Final/jandex-1.1.0.Final.jar:/home/sid/.m2/repository/org/hibernate/hibernate-c3p0/4.3.9.Final/hibernate-c3p0-4.3.9.Final.jar:/home/sid/.m2/repository/com/mchange/c3p0/0.9.2.1/c3p0-0.9.2.1.jar:/home/sid/.m2/repository/com/mchange/mchange-commons-java/0.2.3.4/mchange-commons-java-0.2.3.4.jar:/home/sid/.m2/repository/org/hibernate/hibernate-ehcache/4.3.9.Final/hibernate-ehcache-4.3.9.Final.jar:/home/sid/.m2/repository/org/hibernate/hibernate-search-orm/5.1.2.Final/hibernate-search-orm-5.1.2.Final.jar:/home/sid/.m2/repository/org/hibernate/hibernate-search-engine/5.1.2.Final/hibernate-search-engine-5.1.2.Final.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-analyzers-common/4.10.4/lucene-analyzers-common-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-facet/4.10.4/lucene-facet-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-queryparser/4.10.4/lucene-queryparser-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-core/4.10.4/lucene-core-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-sandbox/4.10.4/lucene-sandbox-4.10.4.jar:/home/sid/.m2/repository/org/apache/lucene/lucene-queries/4.10.4/lucene-queries-4.10.4.jar:/home/sid/.m2/repository/dom4j/dom4j/1.6.1/dom4j-1.6.1.jar:/home/sid/.m2/repository/org/slf4j/slf4j-api/1.6.0/slf4j-api-1.6.0.jar:/home/sid/.m2/repository/org/slf4j/jcl-over-slf4j/1.6.0/jcl-over-slf4j-1.6.0.jar:/home/sid/.m2/repository/org/slf4j/slf4j-log4j12/1.6.0/slf4j-log4j12-1.6.0.jar:/home/sid/.m2/repository/com/thoughtworks/xstream/xstream/1.4.3/xstream-1.4.3.jar:/home/sid/.m2/repository/xmlpull/xmlpull/1.1.3.1/xmlpull-1.1.3.1.jar:/home/sid/.m2/repository/xpp3/xpp3_min/1.1.4c/xpp3_min-1.1.4c.jar:/home/sid/.m2/repository/javax/mail/mail/1.4.1/mail-1.4.1.jar:/home/sid/.m2/repository/javax/activation/activation/1.1/activation-1.1.jar:/home/sid/.m2/repository/org/liquibase/liquibase-core/2.0.5/liquibase-core-2.0.5.jar:/home/sid/.m2/repository/org/openmrs/liquibase/ext/modify-column/2.0.2/modify-column-2.0.2.jar:/home/sid/.m2/repository/org/openmrs/liquibase/ext/identity-insert/1.2.1/identity-insert-1.2.1.jar:/home/sid/.m2/repository/org/openmrs/liquibase/ext/type-converter/1.0.1/type-converter-1.0.1.jar:/home/sid/.m2/repository/xerces/xercesImpl/2.8.0/xercesImpl-2.8.0.jar:/home/sid/.m2/repository/javax/validation/validation-api/1.0.0.GA/validation-api-1.0.0.GA.jar:/home/sid/.m2/repository/org/hibernate/hibernate-validator/4.2.0.Final/hibernate-validator-4.2.0.Final.jar:/home/sid/.m2/repository/org/codehaus/jackson/jackson-core-asl/1.9.13/jackson-core-asl-1.9.13.jar:/home/sid/.m2/repository/org/codehaus/jackson/jackson-mapper-asl/1.9.13/jackson-mapper-asl-1.9.13.jar:/home/sid/.m2/repository/org/codehaus/groovy/groovy-all/2.4.6/groovy-all-2.4.6.jar:/home/sid/.m2/repository/net/sf/ehcache/ehcache/2.10.0/ehcache-2.10.0.jar:/home/sid/.m2/repository/org/openmrs/api/openmrs-api/2.0.5/openmrs-api-2.0.5-tests.jar:/home/sid/.m2/repository/org/springframework/spring-test/4.1.4.RELEASE/spring-test-4.1.4.RELEASE.jar:/home/sid/.m2/repository/com/h2database/h2/1.4.187/h2-1.4.187.jar:/home/sid/.m2/repository/org/databene/databene-benerator/0.5.9/databene-benerator-0.5.9.jar:/home/sid/.m2/repository/org/databene/databene-webdecs/0.4.9/databene-webdecs-0.4.9.jar:/home/sid/.m2/repository/org/apache/poi/poi/3.5-beta5/poi-3.5-beta5.jar:/home/sid/.m2/repository/org/freemarker/freemarker/2.3.9/freemarker-2.3.9.jar:/home/sid/.m2/repository/org/databene/databene-commons/0.4.9/databene-commons-0.4.9.jar:/home/sid/.m2/repository/org/databene/databene-gui/0.1.9/databene-gui-0.1.9.jar:/home/sid/.m2/repository/net/sourceforge/jtds/jtds/1.2.2/jtds-1.2.2.jar:/home/sid/.m2/repository/mysql/mysql-connector-java/5.1.6/mysql-connector-java-5.1.6.jar:/home/sid/.m2/repository/org/apache/derby/derbyclient/10.4.2.0/derbyclient-10.4.2.0.jar:/home/sid/.m2/repository/postgresql/postgresql/8.3-603.jdbc4/postgresql-8.3-603.jdbc4.jar:/home/sid/.m2/repository/org/dbunit/dbunit/2.4.7/dbunit-2.4.7.jar:/home/sid/.m2/repository/xmlunit/xmlunit/1.3/xmlunit-1.3.jar:/home/sid/.m2/repository/com/carrotsearch/junit-benchmarks/0.7.0/junit-benchmarks-0.7.0.jar:/home/sid/.m2/repository/junit/junit/4.13/junit-4.13.jar:/home/sid/.m2/repository/org/hamcrest/hamcrest-core/2.2/hamcrest-core-2.2.jar:/home/sid/.m2/repository/org/hamcrest/hamcrest/2.2/hamcrest-2.2.jar:/home/sid/.m2/repository/org/hamcrest/hamcrest-library/2.2/hamcrest-library-2.2.jar:/home/sid/.m2/repository/org/mockito/mockito-core/3.2.4/mockito-core-3.2.4.jar:/home/sid/.m2/repository/net/bytebuddy/byte-buddy/1.10.5/byte-buddy-1.10.5.jar:/home/sid/.m2/repository/net/bytebuddy/byte-buddy-agent/1.10.5/byte-buddy-agent-1.10.5.jar:/home/sid/.m2/repository/org/objenesis/objenesis/2.6/objenesis-2.6.jar:/home/sid/.m2/repository/org/powermock/powermock-module-junit4/2.0.4/powermock-module-junit4-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-module-junit4-common/2.0.4/powermock-module-junit4-common-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-reflect/2.0.4/powermock-reflect-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-core/2.0.4/powermock-core-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-api-mockito2/2.0.4/powermock-api-mockito2-2.0.4.jar:/home/sid/.m2/repository/org/powermock/powermock-api-support/2.0.4/powermock-api-support-2.0.4.jar com.intellij.rt.junit.JUnitStarter -ideVersion5 -junit4 org.openmrs.module.fhir2.api.dao.impl.FhirObservationDaoImplTest,searchForObs_shouldSearchForObsByValueQuantity\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by org.springframework.cglib.core.ReflectUtils$2 (file:/home/sid/.m2/repository/org/springframework/spring-core/4.1.4.RELEASE/spring-core-4.1.4.RELEASE.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain)\nWARNING: Please consider reporting this to the maintainers of org.springframework.cglib.core.ReflectUtils$2\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations\nWARNING: All illegal access operations will be denied in a future release\n\njava.lang.ClassCastException: class java.lang.String cannot be cast to class java.lang.Double (java.lang.String and java.lang.Double are in module java.base of loader 'bootstrap')\n\n\tat org.hibernate.type.descriptor.java.DoubleTypeDescriptor.unwrap(DoubleTypeDescriptor.java:36)\n\tat org.hibernate.type.descriptor.sql.DoubleTypeDescriptor$1.doBind(DoubleTypeDescriptor.java:63)\n\tat org.hibernate.type.descriptor.sql.BasicBinder.bind(BasicBinder.java:90)\n\tat org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:286)\n\tat org.hibernate.type.AbstractStandardBasicType.nullSafeSet(AbstractStandardBasicType.java:281)\n\tat org.hibernate.loader.Loader.bindPositionalParameters(Loader.java:1995)\n\tat org.hibernate.loader.Loader.bindParameterValues(Loader.java:1966)\n\tat org.hibernate.loader.Loader.prepareQueryStatement(Loader.java:1901)\n\tat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1862)\n\tat org.hibernate.loader.Loader.executeQueryStatement(Loader.java:1839)\n\tat org.hibernate.loader.Loader.doQuery(Loader.java:910)\n\tat org.hibernate.loader.Loader.doQueryAndInitializeNonLazyCollections(Loader.java:355)\n\tat org.hibernate.loader.Loader.doList(Loader.java:2554)\n\tat org.hibernate.loader.Loader.doList(Loader.java:2540)\n\tat org.hibernate.loader.Loader.listIgnoreQueryCache(Loader.java:2370)\n\tat org.hibernate.loader.Loader.list(Loader.java:2365)\n\tat org.hibernate.loader.criteria.CriteriaLoader.list(CriteriaLoader.java:126)\n\tat org.hibernate.internal.SessionImpl.list(SessionImpl.java:1718)\n\tat org.hibernate.internal.CriteriaImpl.list(CriteriaImpl.java:380)\n\tat org.openmrs.module.fhir2.api.dao.impl.FhirObservationDaoImpl.searchForObservations(FhirObservationDaoImpl.java:77)\n\tat org.openmrs.module.fhir2.api.dao.impl.FhirObservationDaoImplTest.searchForObs_shouldSearchForObsByValueQuantity(FhirObservationDaoImplTest.java:467)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:73)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:82)\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:73)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:217)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:83)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:68)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:163)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)\n\n\nProcess finished with exit code 255", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390375510", "createdAt": "2020-03-10T14:55:07Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -394,4 +412,75 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tTokenParam codingToken = new TokenParam();\n+\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n+\t\tcode.addAnd(codingToken);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n+\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\t//\t\tQuantityAndListParam quantityAndListParam=new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzgxOA=="}, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4Mzg5OA==", "bodyText": "@ibacher Found the solution for this. Thanks for the help", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390383898", "createdAt": "2020-03-10T15:05:54Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -394,4 +412,75 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tTokenParam codingToken = new TokenParam();\n+\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n+\t\tcode.addAnd(codingToken);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n+\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\t//\t\tQuantityAndListParam quantityAndListParam=new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzgxOA=="}, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxOTIwNzU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo0OTo0MlrOF0SW2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTowODozNFrOF0TRSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MTAzNA==", "bodyText": "We shouldn't use ilike here, which is only for matching strings. We should use eq.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390371034", "createdAt": "2020-03-10T14:49:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -52,17 +57,50 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n+\t        ReferenceParam hasMemberReference, TokenAndListParam valueConcept, DateRangeParam valueDateParam,\n+\t        QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam, DateRangeParam date,\n \t        TokenAndListParam code, SortSpec sort) {\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam,\n+\t\t    v -> Optional.of(ilike(propertyName, v.getValueAsString(), MatchMode.EXACT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NTA1MQ==", "bodyText": "@ibacher Ok I will change this. Is everything else fine, should I complete the code & tests and update the PR?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390385051", "createdAt": "2020-03-10T15:07:29Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -52,17 +57,50 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n+\t        ReferenceParam hasMemberReference, TokenAndListParam valueConcept, DateRangeParam valueDateParam,\n+\t        QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam, DateRangeParam date,\n \t        TokenAndListParam code, SortSpec sort) {\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam,\n+\t\t    v -> Optional.of(ilike(propertyName, v.getValueAsString(), MatchMode.EXACT)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MTAzNA=="}, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM4NTk5Mw==", "bodyText": "I haven't really gone through everything else here, but please do keep this up to date", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390385993", "createdAt": "2020-03-10T15:08:34Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -52,17 +57,50 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n+\t        ReferenceParam hasMemberReference, TokenAndListParam valueConcept, DateRangeParam valueDateParam,\n+\t        QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam, DateRangeParam date,\n \t        TokenAndListParam code, SortSpec sort) {\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam,\n+\t\t    v -> Optional.of(ilike(propertyName, v.getValueAsString(), MatchMode.EXACT)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MTAzNA=="}, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDAyNTc2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1NDowM1rOF0aauA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1NDowM1rOF0aauA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMzA5Ng==", "bodyText": "Rather than duplicating code all over the place, we should look for ways to create common methods, e.g. adding something like this to BaseDaoImpl:\nprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts) {\n    if (concepts == null) {\n         return Optional.empty();\n    }\n\n    return handleAndListParamBySystem(concepts, (system, tokens) -> {\n\t    if (system.isEmpty()) {\n\t\t\treturn Optional.of(\n\t\t\t    or(in(String.format(\"%.conceptId\", conceptAlias), tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n\t\t\t        in(String.format(\"%.uuid\", conceptAlias), tokensToList(tokens))));\n\t\t} else {\n\t\t\tif (!containsAlias(criteria, \"cm\")) {\n\t\t\t\tcriteria.createAlias(String.format(\"%.conceptMappings\", conceptAlias), \"cm\").createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n\t\t\t}\n\n\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n\t\t}\n\t}\n}\n\nAnd then just changing this to:\nprivate void handleValueCodedConcept(Criteria criteria, TokenAndListParam valueConcepts) {\n\tif (valueConcept != null) {\n\t\tcriteria.createAlias(\"valueCoded\", \"c\");\n        findMatchingConcepts(\"c\", valueConcepts).ifPresent(criteria::add);\n    }\n}\nDo similar things for FhirObservationDaoImpl and FhirAllergyIntoleranceDaoImpl.\nThis would also address my comment above about refactoring.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390503096", "createdAt": "2020-03-10T17:54:03Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -73,6 +111,26 @@ protected String paramToProp(@NotNull String paramName) {\n \t\t}\n \t}\n \t\n+\tprivate void handleValueCodedConcept(Criteria criteria, TokenAndListParam valueConcept) {\n+\t\tif (valueConcept != null) {\n+\t\t\tcriteria.createAlias(\"valueCoded\", \"c\");\n+\t\t\t\n+\t\t\thandleAndListParamBySystem(valueConcept, (system, tokens) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDQ2MDc3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOToyMjowNFrOF1FZLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoyMjowN1rOF1gt0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ==", "bodyText": "@ibacher Please help me with this error", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391207215", "createdAt": "2020-03-11T19:22:04Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIyMDk0Ng==", "bodyText": "So MEMBER_UUID should be referring to the UUID that is the member of an obs group. An Obs is a member of an obs group when the obs_group_id column points to the id of another observation.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391220946", "createdAt": "2020-03-11T19:49:07Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ=="}, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0MzQ2NQ==", "bodyText": "@ibacher I added this and tried pointing to both the ids still the same error\n<obs obs_id=\"22\" person_id=\"7\" concept_id=\"5092\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"98.3\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"/>\n    <obs obs_id=\"23\" person_id=\"7\" obs_group_id=\"22\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"14.0\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"744b91f8-bdbc-4950-833b-002244e9fa2b\"/>", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391243465", "createdAt": "2020-03-11T20:16:23Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ=="}, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI0OTA5MA==", "bodyText": "When you say \"pointing to both ids\", could you spell out what you mean?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391249090", "createdAt": "2020-03-11T20:27:42Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ=="}, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MDc5OA==", "bodyText": "i tried both\nmemberReference.setValue(\"744b91f8-bdbc-4950-833b-002244e9fa2b\");\n\t\tmemberReference.setChain(\"\");\nTHIS FAILED SO I TRIED THE BELOW ONE AND THAT ALSO FAILED\nmemberReference.setValue(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\");\n\t\tmemberReference.setChain(\"\");", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391250798", "createdAt": "2020-03-11T20:31:02Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ=="}, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI1MjM1OQ==", "bodyText": "The first one looks right to me. Could you make those changes to this branch and push it out? That way we can both be looking at the same code.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391252359", "createdAt": "2020-03-11T20:34:14Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ=="}, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1NDg2NQ==", "bodyText": "@ibacher Any ideas what's wrong here?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391654865", "createdAt": "2020-03-12T14:22:07Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ=="}, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MDYyNTQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNToyMVrOF5Ds6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1Nzo0MlrOF5Sm8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzgwMg==", "bodyText": "@ibacher Not very sure how to handle 1e2 type of numbers please have a look", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395373802", "createdAt": "2020-03-19T23:25:21Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -433,7 +434,25 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t}\n \t\t\n \t\tif (quantityParam.getPrefix() == null) {\n-\t\t\treturn Optional.of(eq(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODAzNA==", "bodyText": "My advice would be to write a test case using \"1e2\" and see what happens.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618034", "createdAt": "2020-03-20T12:57:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -433,7 +434,25 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t}\n \t\t\n \t\tif (quantityParam.getPrefix() == null) {\n-\t\t\treturn Optional.of(eq(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzgwMg=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjE3NTE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1Nzo1OVrOF5Snrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozODoxMlrOF5fMrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw==", "bodyText": "Should be and rather than or", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618223", "createdAt": "2020-03-20T12:57:59Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMDE3MQ==", "bodyText": "Of course, better than using and or or here would be to use between", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395620171", "createdAt": "2020-03-20T13:01:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY2NjUzOQ==", "bodyText": "@ibacher I am not sure not to test this out. The problem that I am facing is that I can't get the range of a quantityParam. Please tell how should I approach this?\n\nMy advice would be to write a test case using \"1e2\" and see what happens.\n\n@Test\n\tpublic void shouldGetObservationsByValueQuantityWithPrefix() throws Exception {\n\t\tverifyUri(\"/Observation?value-quantity=1e2\");\n\t\t\n\t\tverify(observationService).searchForObservations(isNull(), isNull(), isNull(), isNull(), isNull(),\n\t\t    valueQuantityCaptor.capture(), isNull(), isNull(), isNull(), isNull());\n\t\t\n\t\tassertThat(valueQuantityCaptor.getValue(), notNullValue());\n\t\tassertThat(valueQuantityCaptor.getValue().getValuesAsQueryTokens(), not(empty()));\n\t\tassertThat(valueQuantityCaptor.getAllValues().iterator().next().getValuesAsQueryTokens().iterator().next()\n\t\t        .getValuesAsQueryTokens().iterator().next().getValueAsString(),\n\t\t    equalTo(\"100\"));\n\t}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395666539", "createdAt": "2020-03-20T14:18:29Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4ODQ2MQ==", "bodyText": "So, for our purposes, I'm less concerned that we map \"1e2\" to [95 ... 105) than I am that we map 1e-2 to [.005 ... .015), i.e., even if we're not matching the precision implied by the spec, I think we're ok. Properly support 1e2 would, I think, require us to go a little crazy writing a string to number parser.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395688461", "createdAt": "2020-03-20T14:51:12Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgwOTIzMg==", "bodyText": "@ibacher I need a way to test these ranges then only I'll be able to code something up for 1e-2 like numbers. Please suggest a way to do so", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395809232", "createdAt": "2020-03-20T18:08:20Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNDMwMg==", "bodyText": "So, the quickest way to test is to search (at the DAO level) for an Obs with a quantity of \"36\". There's exactly one Obs in the dataset that should fall in that range (Obs 7e77d071-1f7d-4394-a316-0a458edf28c3; it represents body temperature). Then I'd do a search a search for 39.5. That should have a single result, (Obs 1a9b5242-0ff9-4c5c-adb3-d517632ea63e). That should show that it finds values within \u00b110%.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395824302", "createdAt": "2020-03-20T18:38:12Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjE3NTkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1ODoxM1rOF5SoJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowMTo0OFrOF5Svgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODM0MA==", "bodyText": "Should be and rather than or", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618340", "createdAt": "2020-03-20T12:58:13Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMDIyNg==", "bodyText": "Of course, better than using and or or here would be to use between", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395620226", "createdAt": "2020-03-20T13:01:48Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODM0MA=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjE3Njc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1ODozM1rOF5Soxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzozMjo1N1rOF5Tz_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODUwMg==", "bodyText": "Shouldn't this be le?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618502", "createdAt": "2020-03-20T12:58:33Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNjgwNQ==", "bodyText": "@ibacher So here I saw something like\n[99.995 ... 100.005)\nwhere ) means not included that's why I used lt and not le\nPlease let me know what's correct", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395636805", "createdAt": "2020-03-20T13:31:22Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODUwMg=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYzNzc1Nw==", "bodyText": "Good point", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395637757", "createdAt": "2020-03-20T13:32:57Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODUwMg=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MjE3ODcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1OToxMFrOF5SqDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowMTozOFrOF5SvGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODgyOQ==", "bodyText": "Should be and", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618829", "createdAt": "2020-03-20T12:59:10Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMDEyMg==", "bodyText": "Of course, better than using and or or here would be to use between", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395620122", "createdAt": "2020-03-20T13:01:38Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODgyOQ=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkyNzQ0OnYy", "diffSide": "RIGHT", "path": "api/src/test/resources/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest_initial_data_suppl.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NTo0MlrOF5kQHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1ODowN1rOF5kTJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzEwMQ==", "bodyText": "Please leave a new line at the end of the file", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395907101", "createdAt": "2020-03-20T21:55:42Z", "author": {"login": "ibacher"}, "path": "api/src/test/resources/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest_initial_data_suppl.xml", "diffHunk": "@@ -61,4 +61,6 @@\n     <obs obs_id=\"22\" person_id=\"7\" concept_id=\"5092\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"98.3\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"/>\n     <obs obs_id=\"23\" person_id=\"7\" obs_group_id=\"22\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"14.0\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"744b91f8-bdbc-4950-833b-002244e9fa2b\"/>\n     <obs obs_id=\"24\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"134.0\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"5242\" value_coded_name_id=\"1439\" value_complex=\"cbdft\" value_text=\"AFH56\" value_datetime=\"2008-08-18 14:09:35.0\" value_drug=\"[NULL]\" uuid=\"785li1f8-bdbc-4950-833b-002244e9fa2b\"/>\n-</dataset>\n+    <obs obs_id=\"25\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"100.001\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"89fg071-1f7d-4394-a316-0a458edf28c3\"/>\n+    <obs obs_id=\"26\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"0.007\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"56htgf-1f7d-4394-a316-0a458edf28c3\"/>\n+</dataset>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzg3Nw==", "bodyText": "I'll do that in the next commit", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395907877", "createdAt": "2020-03-20T21:58:07Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/resources/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest_initial_data_suppl.xml", "diffHunk": "@@ -61,4 +61,6 @@\n     <obs obs_id=\"22\" person_id=\"7\" concept_id=\"5092\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"98.3\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"/>\n     <obs obs_id=\"23\" person_id=\"7\" obs_group_id=\"22\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"14.0\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"744b91f8-bdbc-4950-833b-002244e9fa2b\"/>\n     <obs obs_id=\"24\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"134.0\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"5242\" value_coded_name_id=\"1439\" value_complex=\"cbdft\" value_text=\"AFH56\" value_datetime=\"2008-08-18 14:09:35.0\" value_drug=\"[NULL]\" uuid=\"785li1f8-bdbc-4950-833b-002244e9fa2b\"/>\n-</dataset>\n+    <obs obs_id=\"25\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"100.001\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"89fg071-1f7d-4394-a316-0a458edf28c3\"/>\n+    <obs obs_id=\"26\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"0.007\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"56htgf-1f7d-4394-a316-0a458edf28c3\"/>\n+</dataset>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzEwMQ=="}, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkyODQ4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NjoxNVrOF5kQzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQxNToyNDoyOVrOF5wYUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzI3Ng==", "bodyText": "@ibacher So I have added some tests which don't pass at the moment because the prefix coding is not correct for 1e2 and 1e-2 type of numbers.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395907276", "createdAt": "2020-03-20T21:56:15Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));\n+\t//\t}\n+\t//\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndNegativeEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjA5ODYxMg==", "bodyText": "So, for prefix coding, I'm happy with eq being an exact equality, e.g. 1e2 means only exactly 100 (despite the spec, this is the actual implementation in the HAPI JPA Server). ap should still work, since 1e2 should still translate to [90 ... 100]. le, ge, lt, and gt are all defined as starting from the exact position at infinite precision, so again should be covered by just the normal Hibernate operations.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396098612", "createdAt": "2020-03-22T14:17:10Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));\n+\t//\t}\n+\t//\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndNegativeEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzI3Ng=="}, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjEwNTgwOA==", "bodyText": "@ibacher I have pushed a commit after this please have a look and tell if anything needs to be fixed", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396105808", "createdAt": "2020-03-22T15:24:29Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));\n+\t//\t}\n+\t//\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndNegativeEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzI3Ng=="}, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzkzMTAwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NzozNFrOF5kSXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjoxMDo1OVrOF5khxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzY3OQ==", "bodyText": "@ibacher We'll need to correct this part", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395907679", "createdAt": "2020-03-20T21:57:34Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -440,8 +440,8 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t\tint eIdx = plainString.indexOf('e');\n \t\t\tif (dotIdx == -1 && eIdx == -1) {\n \t\t\t\treturn Optional\n-\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue(),\n-\t\t\t\t            quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue()));\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.5)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(0.5)).doubleValue()));\n \t\t\t} else if (eIdx != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMTYyMw==", "bodyText": "So, new BigDecimal(0.1) is closer to what we want. What we actually want is this:\n// At the top of the file\nprivate static final BigDecimal APPROX_RANGE = new BigDecimal(0.1);\n\nBigDecimal value = quantityParam.getValue();\nBigDecimal approxRange = APPROX_RANGE.multiply(value);\n\nreturn Optional\n    .of(between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395911623", "createdAt": "2020-03-20T22:10:59Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -440,8 +440,8 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t\tint eIdx = plainString.indexOf('e');\n \t\t\tif (dotIdx == -1 && eIdx == -1) {\n \t\t\t\treturn Optional\n-\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue(),\n-\t\t\t\t            quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue()));\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.5)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(0.5)).doubleValue()));\n \t\t\t} else if (eIdx != -1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzY3OQ=="}, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzk0MTE1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowMjo0NFrOF5kYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjoxMzowMVrOF5kj9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTI3Mg==", "bodyText": "This has the wrong UUID, since we elected not to implement the approximation range without a decimal point, the search range for 1e2 is [99.5 ... 100.5], which is fine, but only UUID 89fg071-1f7d-4394-a316-0a458edf28c3 falls into that range. The other test works for me.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395909272", "createdAt": "2020-03-20T22:02:44Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMDQxOQ==", "bodyText": "But here I couldn't find the same range\n\n\n\n[parameter]=1e2\nValues that equal 100, to 1 significant figures precision, so this is actually searching for values in the range [95 ... 105)\n\n\n\nDoes 1e-2 works for you?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395910419", "createdAt": "2020-03-20T22:06:42Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTI3Mg=="}, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMjE4Mg==", "bodyText": "I'm aware. This is a point where I'm suggesting we break spec, because the alternative seems to be to write a parser for scientific notation. Maybe we'll reassess later, but I don't think that's necessary at this point in time. And, yes, 1e-2 worked for me without modifications...", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395912182", "createdAt": "2020-03-20T22:13:01Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTI3Mg=="}, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQyODYxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0Nzo0N1rOF6XfiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0Nzo0N1rOF6XfiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NjYzMw==", "bodyText": "Remove this whole else block", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396746633", "createdAt": "2020-03-23T20:47:47Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQyOTE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0Nzo1NlrOF6Xf2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0Nzo1NlrOF6Xf2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NjcxNQ==", "bodyText": "We don't really need this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396746715", "createdAt": "2020-03-23T20:47:56Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQzMDc4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0ODoyNlrOF6Xg8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0ODoyNlrOF6Xg8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0Njk5NQ==", "bodyText": "This should be pushed down to where dotIdx == -1 since that's the only place we need this value", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396746995", "createdAt": "2020-03-23T20:48:26Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQzMjIxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0ODo1MVrOF6Xh2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0ODo1MVrOF6Xh2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NzIyNg==", "bodyText": "Substitute value for quantityParam.getValue()", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396747226", "createdAt": "2020-03-23T20:48:51Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQzNTYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MDowMVrOF6XkDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MDowMVrOF6XkDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0Nzc4OA==", "bodyText": "double val = value.getValue() then use val below", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396747788", "createdAt": "2020-03-23T20:50:01Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t}\n+\t\t} else {\n+\t\t\tswitch (quantityParam.getPrefix()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQzNzMxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MDozM1rOF6XlFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MDozM1rOF6XlFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODA1NA==", "bodyText": "Remove this block", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396748054", "createdAt": "2020-03-23T20:50:33Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t}\n+\t\t} else {\n+\t\t\tswitch (quantityParam.getPrefix()) {\n+\t\t\t\tcase EQUAL:\n+\t\t\t\t\treturn Optional.of(eq(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase NOT_EQUAL:\n+\t\t\t\t\treturn Optional.of(ne(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase LESSTHAN_OR_EQUALS:\n+\t\t\t\t\treturn Optional.of(le(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase LESSTHAN:\n+\t\t\t\t\treturn Optional.of(lt(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase GREATERTHAN_OR_EQUALS:\n+\t\t\t\t\treturn Optional.of(ge(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase GREATERTHAN:\n+\t\t\t\t\treturn Optional.of(gt(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase APPROXIMATE:\n+\t\t\t\t\treturn Optional.of(between(propertyName,\n+\t\t\t\t\t    quantityParam.getValue().subtract(quantityParam.getValue().multiply(new BigDecimal(0.1)))\n+\t\t\t\t\t            .doubleValue(),\n+\t\t\t\t\t    quantityParam.getValue().add(quantityParam.getValue().multiply(new BigDecimal(0.1))).doubleValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTQ0MDAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MToyN1rOF6Xm3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MToyN1rOF6Xm3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODUxMQ==", "bodyText": "Change this to quantityParam.getPrefix() == null || quantityParam.getPrefix.equals(APPROXIMATE)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396748511", "createdAt": "2020-03-23T20:51:27Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjUzOTY4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMjo0N1rOF61-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMjo0N1rOF61-ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NjA5MA==", "bodyText": "Can we refactor thins so this method is also in BaseDaoImpl", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397246090", "createdAt": "2020-03-24T15:32:47Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {\n+\t\t\t\tswitch (hasMemberReference.getChain()) {\n+\t\t\t\t\tcase Observation.SP_CODE:\n+\t\t\t\t\t\tTokenAndListParam code = new TokenAndListParam()\n+\t\t\t\t\t\t        .addAnd(new TokenParam().setValue(hasMemberReference.getValue()));\n+\t\t\t\t\t\tcriteria.createAlias(\"gm.concept\", \"c\");\n+\t\t\t\t\t\tfindMatchingConcepts(\"c\", code, criteria).ifPresent(criteria::add);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"gm.uuid\", hasMemberReference.getIdPart()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam, quantityParam -> handleQuantity(propertyName, quantityParam));\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU0OTE3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNDozOFrOF62EjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNDozOFrOF62EjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NzYyOQ==", "bodyText": "Is there any reason to prefer this to propertyLike?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397247629", "createdAt": "2020-03-24T15:34:38Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {\n+\t\t\t\tswitch (hasMemberReference.getChain()) {\n+\t\t\t\t\tcase Observation.SP_CODE:\n+\t\t\t\t\t\tTokenAndListParam code = new TokenAndListParam()\n+\t\t\t\t\t\t        .addAnd(new TokenParam().setValue(hasMemberReference.getValue()));\n+\t\t\t\t\t\tcriteria.createAlias(\"gm.concept\", \"c\");\n+\t\t\t\t\t\tfindMatchingConcepts(\"c\", code, criteria).ifPresent(criteria::add);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"gm.uuid\", hasMemberReference.getIdPart()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam, quantityParam -> handleQuantity(propertyName, quantityParam));\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueStringParam(@NotNull String propertyName, StringAndListParam valueStringParam) {\n+\t\tif (valueStringParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueStringParam, v -> Optional.of(ilike(propertyName, v.getValue(), MatchMode.EXACT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU1NTQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNTo1MlrOF62IkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozNzoxNlrOF62Mqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0ODY1Nw==", "bodyText": "Change this to handleCodeableConcept", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397248657", "createdAt": "2020-03-24T15:35:52Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0OTcwNg==", "bodyText": "Also change the signature to match handleResourceCode", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397249706", "createdAt": "2020-03-24T15:37:16Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0ODY1Nw=="}, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU2NzY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozODoyNlrOF62QMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxNToxNVrOF64DGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDYxMQ==", "bodyText": "Can we refactor out the lambda in here (the expression beginning (system, tokens) ->) and turn it into a proper method which can be called both here and handleResourceCode", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397250611", "createdAt": "2020-03-24T15:38:26Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,\n+\t        Criteria criteria) {\n+\t\tif (concepts == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleAndListParamBySystem(concepts, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(or(\n+\t\t\t\t    in(String.format(\"%s.conceptId\", conceptAlias),\n+\t\t\t\t        tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t    in(String.format(\"%s.uuid\", conceptAlias), tokensToList(tokens))));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\tcriteria.createAlias(String.format(\"%s.conceptMappings\", conceptAlias), \"cm\")\n+\t\t\t\t\t        .createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDgxNw==", "bodyText": "Also refactor handleResourceCode to be called handleCodeableConcept. Hopefully we can eventually get rid of the TokenOrListParam version of that.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397250817", "createdAt": "2020-03-24T15:38:41Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,\n+\t        Criteria criteria) {\n+\t\tif (concepts == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleAndListParamBySystem(concepts, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(or(\n+\t\t\t\t    in(String.format(\"%s.conceptId\", conceptAlias),\n+\t\t\t\t        tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t    in(String.format(\"%s.uuid\", conceptAlias), tokensToList(tokens))));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\tcriteria.createAlias(String.format(\"%s.conceptMappings\", conceptAlias), \"cm\")\n+\t\t\t\t\t        .createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDYxMQ=="}, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI3Nzc4Nw==", "bodyText": "@ibacher So I guess we'll need to change the parameter either here or in handleResourceCode to make it TokenOrListParam or TokenAndListParam", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397277787", "createdAt": "2020-03-24T16:12:25Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,\n+\t        Criteria criteria) {\n+\t\tif (concepts == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleAndListParamBySystem(concepts, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(or(\n+\t\t\t\t    in(String.format(\"%s.conceptId\", conceptAlias),\n+\t\t\t\t        tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t    in(String.format(\"%s.uuid\", conceptAlias), tokensToList(tokens))));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\tcriteria.createAlias(String.format(\"%s.conceptMappings\", conceptAlias), \"cm\")\n+\t\t\t\t\t        .createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDYxMQ=="}, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MDAyNA==", "bodyText": "Well, I'd like to keep them separate for now so that anything that's relying on TokenOrListParam doesn't break and we keep the scope of this PR relatively focused. We can have two method with the same name that are distinguished by parameter types, so that shouldn't be an issue. We just need to make these two resemble each other so it's clear that they provide the same functionality.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397280024", "createdAt": "2020-03-24T16:15:15Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,\n+\t        Criteria criteria) {\n+\t\tif (concepts == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleAndListParamBySystem(concepts, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(or(\n+\t\t\t\t    in(String.format(\"%s.conceptId\", conceptAlias),\n+\t\t\t\t        tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t    in(String.format(\"%s.uuid\", conceptAlias), tokensToList(tokens))));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\tcriteria.createAlias(String.format(\"%s.conceptMappings\", conceptAlias), \"cm\")\n+\t\t\t\t\t        .createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDYxMQ=="}, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU3NTY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MDoxMFrOF62VWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0MDoxMFrOF62VWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MTkzMA==", "bodyText": "I'd rename this handleQuantity() and move it to BaseDaoImpl. I'd also rename the parameter quantityAndListParam.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397251930", "createdAt": "2020-03-24T15:40:10Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {\n+\t\t\t\tswitch (hasMemberReference.getChain()) {\n+\t\t\t\t\tcase Observation.SP_CODE:\n+\t\t\t\t\t\tTokenAndListParam code = new TokenAndListParam()\n+\t\t\t\t\t\t        .addAnd(new TokenParam().setValue(hasMemberReference.getValue()));\n+\t\t\t\t\t\tcriteria.createAlias(\"gm.concept\", \"c\");\n+\t\t\t\t\t\tfindMatchingConcepts(\"c\", code, criteria).ifPresent(criteria::add);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"gm.uuid\", hasMemberReference.getIdPart()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjU5NTY5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0NDoxMVrOF62iGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0NDoxMVrOF62iGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NTE5Mw==", "bodyText": "This is an unnecessary check.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397255193", "createdAt": "2020-03-24T15:44:11Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzIyMTc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNzoyN1rOF687GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNzoyN1rOF687GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1OTg5Ng==", "bodyText": "Can this also be called handleCodeableConcept()? Also, can we move it so it's with the other handleCodeableConcept method?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397359896", "createdAt": "2020-03-24T18:07:27Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -792,9 +804,8 @@ protected Criterion generateSystemQuery(String system, List<String> codes) {\n \t\t}\n \t}\n \t\n-\tprotected void handleResourceCode(Criteria criteria, TokenOrListParam code, @NotNull String conceptAlias,\n+\tprotected void handleCode(Criteria criteria, TokenOrListParam code, @NotNull String conceptAlias,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8384acbdd3523ce87650b79a9d85b4c3d546ae3c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzIyMzcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNzo1NlrOF688Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODoyMDoxNlrOF69aFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MDE5NA==", "bodyText": "Let's get rid of this altogether, even though that means updating more files.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397360194", "createdAt": "2020-03-24T18:07:56Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -812,6 +823,12 @@ protected void handleResourceCode(Criteria criteria, TokenOrListParam code, @Not\n \t\t}).ifPresent(criteria::add);\n \t}\n \t\n+\tprotected void handleResourceCode(Criteria criteria, TokenOrListParam code, @NotNull String conceptAlias,\n+\t        @NotNull String conceptMapAlias, @NotNull String conceptReferenceTermAlias) {\n+\t\t\n+\t\thandleCode(criteria, code, conceptAlias, conceptMapAlias, conceptReferenceTermAlias);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8384acbdd3523ce87650b79a9d85b4c3d546ae3c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2NzgzMQ==", "bodyText": "@ibacher I'll do that but it'll take some time", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397367831", "createdAt": "2020-03-24T18:20:16Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -812,6 +823,12 @@ protected void handleResourceCode(Criteria criteria, TokenOrListParam code, @Not\n \t\t}).ifPresent(criteria::add);\n \t}\n \t\n+\tprotected void handleResourceCode(Criteria criteria, TokenOrListParam code, @NotNull String conceptAlias,\n+\t        @NotNull String conceptMapAlias, @NotNull String conceptReferenceTermAlias) {\n+\t\t\n+\t\thandleCode(criteria, code, conceptAlias, conceptMapAlias, conceptReferenceTermAlias);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MDE5NA=="}, "originalCommit": {"oid": "8384acbdd3523ce87650b79a9d85b4c3d546ae3c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQyMDA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNjo0NlrOF7lWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNjo0NlrOF7lWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjE1Mw==", "bodyText": "I don't think we need a separate method for this any more. Just inline this for handleCodeableConcept. However, this function should still take the conceptMapAlias and conceptReferenceTermAlias parameters instead of hard-coding them as cm and crt.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r398022153", "createdAt": "2020-03-25T17:06:46Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +597,33 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> handleCode(Criteria criteria, TokenAndListParam concepts, @NotNull String conceptAlias) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab23925fcfb3d9fe8a393aaec494ed4e104b80c"}, "originalPosition": 106}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1105, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}