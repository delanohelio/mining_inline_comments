{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDg3MjM2", "number": 99, "title": "FM2-88 Enhance Observation Search", "bodyText": "Description of what I changed\n\n\nFM2-88 Enhanced Observation Search\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-88\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My pull request only contains ONE single commit.\nNo? -> read here on how to squash multiple commits into one\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-03-01T20:00:08Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99", "merged": true, "mergeCommit": {"oid": "83a893a385ea7982bbf935f9b0c96e2e9a544eb8"}, "closed": true, "closedAt": "2020-03-25T17:52:11Z", "author": {"login": "VaishSiddharth"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKINXjAFqTM2ODI5NDU4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRLMEcAH2gAyMzgyMDg3MjM2OjhmNzQzYzUyOTAyMDZlZjE5YjMxZjhlZjhmM2RmZTA0ZTA2NjRhYjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mjk0NTg2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-368294586", "createdAt": "2020-03-03T20:19:09Z", "commit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxOToxMFrOFxVGYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoxOToxMFrOFxVGYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MDI0Mg==", "bodyText": "@ibacher I have a few questions here\n\nWhat should be the data type of hasMemberReference I think that TokenOrListParam should be the datatype as we do have a function in BaseDaoImpl to handleBoolean.\nI am a bit confused that how should we handle the value parameters, should we have only a single ReferenceParam and include all of these value-concept value-date value-quantity value-string, and then make a function to handle all the value related search queries.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387270242", "createdAt": "2020-03-03T20:19:10Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/FhirObservationService.java", "diffHunk": "@@ -23,5 +26,7 @@\n \tObservation getObservationByUuid(@NotNull String uuid);\n \t\n \tCollection<Observation> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n+\t        ReferenceParam hasMemberReference, TokenAndListParam valueConcept, DateRangeParam valueDateParam,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4ODIxNzE1", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-368821715", "createdAt": "2020-03-04T14:27:52Z", "commit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyNzo1M1rOFxvWqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoyNzo1M1rOFxvWqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzcwMDM5NQ==", "bodyText": "I'd actually prefer it if SP_CODE came after the SP_SUBJECT and before all these other search functions.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387700395", "createdAt": "2020-03-04T14:27:53Z", "author": {"login": "ibacher"}, "path": "omod/src/main/java/org/openmrs/module/fhir2/providers/ObservationFhirResourceProvider.java", "diffHunk": "@@ -61,8 +64,15 @@ public Observation getObservationById(@IdParam @NotNull IdType id) {\n \tpublic Bundle searchObservations(@OptionalParam(name = Observation.SP_ENCOUNTER) ReferenceParam encounterReference,\n \t        @OptionalParam(name = Observation.SP_SUBJECT, chainWhitelist = { \"\", Patient.SP_IDENTIFIER, Patient.SP_GIVEN,\n \t                Patient.SP_FAMILY, Patient.SP_NAME }, targetTypes = Patient.class) ReferenceParam patientReference,\n+\t        @OptionalParam(name = Observation.SP_HAS_MEMBER) ReferenceParam hasMemberReference,\n+\t        @OptionalParam(name = Observation.SP_VALUE_CONCEPT) TokenAndListParam valueConcept,\n+\t        @OptionalParam(name = Observation.SP_VALUE_DATE) DateRangeParam valueDateParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_QUANTITY) QuantityAndListParam valueQuantityParam,\n+\t        @OptionalParam(name = Observation.SP_VALUE_STRING) StringAndListParam valueStringParam,\n+\t        @OptionalParam(name = Observation.SP_DATE) DateRangeParam date,\n \t        @OptionalParam(name = Observation.SP_CODE) TokenAndListParam code, @Sort SortSpec sort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca35cbc3464b46619b9eec15b7cb1e894bd4f9c7"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MTI0ODUx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-369124851", "createdAt": "2020-03-04T21:10:17Z", "commit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToxMDoxN1rOFx9vcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMToxMDoxN1rOFx9vcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzNjExNA==", "bodyText": "@ibacher Please have a look at the handlers. I am still left with the has-member.code parameter. Not very sure about how to convert value to codeable concept. I guess something like this\nhandleAndListParamBySystem(valueConcept, (system, tokens) -> {\nCodeableConcept codeableConcept=new CodeableConcept();\n\t\tcodeableConcept.addCoding().setCode(Not sure what will come here).setSystem(system);\n});", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r387936114", "createdAt": "2020-03-04T21:10:17Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -63,16 +64,43 @@ public Obs getObsByUuid(String uuid) {\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n-//\t\thandleBoolean(\"hasGroupMembers\",hasMemberReference);\n-\n-\t\thandleDateRange(\"valueDatetime\",valueDateParam);\n-\t\thandleDateRange(\"obsDatetime\",date);\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3402921bbbea535d9d910f8b25d304248edcaa63"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNTkzNTk0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-370593594", "createdAt": "2020-03-06T20:04:55Z", "commit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowNDo1NVrOFzF3eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQyMDowNDo1NVrOFzF3eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTExNzgxOA==", "bodyText": "@ibacher Please help me resolve this issue", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r389117818", "createdAt": "2020-03-06T20:04:55Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -394,4 +412,75 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueConceptId() {\n+\t\tTokenAndListParam code = new TokenAndListParam();\n+\t\tTokenParam codingToken = new TokenParam();\n+\t\tcodingToken.setValue(VALUE_CONCEPT_ID);\n+\t\tcode.addAnd(codingToken);\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, code, null, null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_VALUE_CONCEPT_UUID));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueDate() {\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null,\n+\t\t    new DateRangeParam(new DateParam(VALUE_DATE_AND_TIME)), null, null, null, null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_UUID))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\t//\t\tQuantityAndListParam quantityAndListParam=new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDI0NjE2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-372024616", "createdAt": "2020-03-10T14:49:42Z", "commit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo0OTo0MlrOF0SW2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo0OTo0MlrOF0SW2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MTAzNA==", "bodyText": "We shouldn't use ilike here, which is only for matching strings. We should use eq.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390371034", "createdAt": "2020-03-10T14:49:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -52,17 +57,50 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceParam encounterReference, ReferenceParam patientReference,\n+\t        ReferenceParam hasMemberReference, TokenAndListParam valueConcept, DateRangeParam valueDateParam,\n+\t        QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam, DateRangeParam date,\n \t        TokenAndListParam code, SortSpec sort) {\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(\"hm\", hasMemberReference).ifPresent(c -> criteria.createAlias(\"groupMembers\", \"hm\").add(c));\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam,\n+\t\t    v -> Optional.of(ilike(propertyName, v.getValueAsString(), MatchMode.EXACT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMTg5ODMw", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-372189830", "createdAt": "2020-03-10T17:54:03Z", "commit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1NDowM1rOF0aauA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNzo1NDowM1rOF0aauA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDUwMzA5Ng==", "bodyText": "Rather than duplicating code all over the place, we should look for ways to create common methods, e.g. adding something like this to BaseDaoImpl:\nprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts) {\n    if (concepts == null) {\n         return Optional.empty();\n    }\n\n    return handleAndListParamBySystem(concepts, (system, tokens) -> {\n\t    if (system.isEmpty()) {\n\t\t\treturn Optional.of(\n\t\t\t    or(in(String.format(\"%.conceptId\", conceptAlias), tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n\t\t\t        in(String.format(\"%.uuid\", conceptAlias), tokensToList(tokens))));\n\t\t} else {\n\t\t\tif (!containsAlias(criteria, \"cm\")) {\n\t\t\t\tcriteria.createAlias(String.format(\"%.conceptMappings\", conceptAlias), \"cm\").createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n\t\t\t}\n\n\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n\t\t}\n\t}\n}\n\nAnd then just changing this to:\nprivate void handleValueCodedConcept(Criteria criteria, TokenAndListParam valueConcepts) {\n\tif (valueConcept != null) {\n\t\tcriteria.createAlias(\"valueCoded\", \"c\");\n        findMatchingConcepts(\"c\", valueConcepts).ifPresent(criteria::add);\n    }\n}\nDo similar things for FhirObservationDaoImpl and FhirAllergyIntoleranceDaoImpl.\nThis would also address my comment above about refactoring.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r390503096", "createdAt": "2020-03-10T17:54:03Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -73,6 +111,26 @@ protected String paramToProp(@NotNull String paramName) {\n \t\t}\n \t}\n \t\n+\tprivate void handleValueCodedConcept(Criteria criteria, TokenAndListParam valueConcept) {\n+\t\tif (valueConcept != null) {\n+\t\t\tcriteria.createAlias(\"valueCoded\", \"c\");\n+\t\t\t\n+\t\t\thandleAndListParamBySystem(valueConcept, (system, tokens) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0fd569abec8f591b724546ec70ef7a63558d9ab"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52c80b82867ea51d074460a4c3d1a67c11f3a3d7", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/52c80b82867ea51d074460a4c3d1a67c11f3a3d7", "committedDate": "2020-03-10T19:55:53Z", "message": "tests added and hasMember handler added"}, "afterCommit": {"oid": "1025bdebe7d81bfdd3d8260ac0655da4e739348c", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1025bdebe7d81bfdd3d8260ac0655da4e739348c", "committedDate": "2020-03-10T20:34:16Z", "message": "Enhance Observation Search"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27ef0e93a35f92c247c0073fb27bf51f0be16b2b", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/27ef0e93a35f92c247c0073fb27bf51f0be16b2b", "committedDate": "2020-03-10T21:40:48Z", "message": "tests added for ObservationFhirResourceProviderWebTest"}, "afterCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/057a29f8a6b6988dd5d3d479ab72c1e593698cb5", "committedDate": "2020-03-11T19:13:40Z", "message": "Enhance Observation Search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMDU2Mjcz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-373056273", "createdAt": "2020-03-11T19:22:04Z", "commit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOToyMjowNFrOF1FZLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxOToyMjowNFrOF1FZLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTIwNzIxNQ==", "bodyText": "@ibacher Please help me with this error", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r391207215", "createdAt": "2020-03-11T19:22:04Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -387,4 +415,83 @@ public void searchForObs_shouldHandleComplexQuery() {\n \t\t\tassertThat(resultsList.get(i - 1).getObsDatetime(), sameOrAfter(resultsList.get(i).getObsDatetime()));\n \t\t}\n \t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldReturnObsByMemberReference() {\n+\t\tReferenceParam memberReference = new ReferenceParam();\n+\t\tmemberReference.setValue(MEMBER_UUID);\n+\t\tmemberReference.setChain(\"\");\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, memberReference, null, null, null, null, null, null, null,\n+\t\t    null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\t// This gives java.lang.AssertionError:\n+\t\t//Expected: not an empty collection\n+\t\t//     but: was <[]>\n+\t\t//Expected :not an empty collection\n+\t\t//Actual   :<[]>,\n+\t\t// I tried adding data to xml file but not relevant tags found similar to groupMember\n+\t\t//\t\tassertThat(results, not(empty()));\n+\t\t//\t\tassertThat(results.iterator().next().getUuid(), equalTo(OBS_UUID));\n+\t\t//\t\tassertThat(results.iterator().next().getGroupMembers().iterator().next().getUuid(), equalTo(OBS_UUID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "057a29f8a6b6988dd5d3d479ab72c1e593698cb5"}, "originalPosition": 226}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d29ff43392ab2abac31a7a76ade56b006d8a861", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/1d29ff43392ab2abac31a7a76ade56b006d8a861", "committedDate": "2020-03-13T21:14:53Z", "message": "prefix for quantity"}, "afterCommit": {"oid": "ae170287597e6e3389dd6858978c1e245c82442c", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ae170287597e6e3389dd6858978c1e245c82442c", "committedDate": "2020-03-18T18:43:27Z", "message": "prefix for quantity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTU5MzIz", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-378159323", "createdAt": "2020-03-19T23:25:21Z", "commit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNToyMVrOF5Ds6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzoyNToyMVrOF5Ds6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzgwMg==", "bodyText": "@ibacher Not very sure how to handle 1e2 type of numbers please have a look", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395373802", "createdAt": "2020-03-19T23:25:21Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -433,7 +434,25 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t}\n \t\t\n \t\tif (quantityParam.getPrefix() == null) {\n-\t\t\treturn Optional.of(eq(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NDU4NTI3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-378458527", "createdAt": "2020-03-20T12:57:42Z", "commit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMjo1Nzo0MlrOF5Sm8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMzowMTo0OFrOF5Svgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODAzNA==", "bodyText": "My advice would be to write a test case using \"1e2\" and see what happens.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618034", "createdAt": "2020-03-20T12:57:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -433,7 +434,25 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t}\n \t\t\n \t\tif (quantityParam.getPrefix() == null) {\n-\t\t\treturn Optional.of(eq(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3MzgwMg=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw==", "bodyText": "Should be and rather than or", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618223", "createdAt": "2020-03-20T12:57:59Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODM0MA==", "bodyText": "Should be and rather than or", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618340", "createdAt": "2020-03-20T12:58:13Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODUwMg==", "bodyText": "Shouldn't this be le?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618502", "createdAt": "2020-03-20T12:58:33Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODgyOQ==", "bodyText": "Should be and", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395618829", "createdAt": "2020-03-20T12:59:10Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMDEyMg==", "bodyText": "Of course, better than using and or or here would be to use between", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395620122", "createdAt": "2020-03-20T13:01:38Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODgyOQ=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMDE3MQ==", "bodyText": "Of course, better than using and or or here would be to use between", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395620171", "createdAt": "2020-03-20T13:01:42Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODIyMw=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYyMDIyNg==", "bodyText": "Of course, better than using and or or here would be to use between", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395620226", "createdAt": "2020-03-20T13:01:48Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +428,59 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue())));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),\n+\t\t\t\t    lt(propertyName, quantityParam.getValue().add(new BigDecimal(val)).doubleValue())));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional.of(or(ge(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTYxODM0MA=="}, "originalCommit": {"oid": "467674c123e510a03517b6be75f829c46b480b45"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODMzNDk3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-378833497", "createdAt": "2020-03-20T21:55:42Z", "commit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NTo0MlrOF5kQHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NTo0MlrOF5kQHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzEwMQ==", "bodyText": "Please leave a new line at the end of the file", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395907101", "createdAt": "2020-03-20T21:55:42Z", "author": {"login": "ibacher"}, "path": "api/src/test/resources/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest_initial_data_suppl.xml", "diffHunk": "@@ -61,4 +61,6 @@\n     <obs obs_id=\"22\" person_id=\"7\" concept_id=\"5092\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"98.3\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"/>\n     <obs obs_id=\"23\" person_id=\"7\" obs_group_id=\"22\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"14.0\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"744b91f8-bdbc-4950-833b-002244e9fa2b\"/>\n     <obs obs_id=\"24\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"134.0\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"5242\" value_coded_name_id=\"1439\" value_complex=\"cbdft\" value_text=\"AFH56\" value_datetime=\"2008-08-18 14:09:35.0\" value_drug=\"[NULL]\" uuid=\"785li1f8-bdbc-4950-833b-002244e9fa2b\"/>\n-</dataset>\n+    <obs obs_id=\"25\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"100.001\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"89fg071-1f7d-4394-a316-0a458edf28c3\"/>\n+    <obs obs_id=\"26\" person_id=\"7\" concept_id=\"5242\" encounter_id=\"3\" obs_datetime=\"2008-07-01 00:00:00.0\" location_id=\"1\" value_numeric=\"0.007\" comments=\"\" creator=\"1\" date_created=\"2008-08-18 14:09:35.0\" voided=\"false\" value_coded=\"[NULL]\" value_coded_name_id=\"[NULL]\" value_complex=\"[NULL]\" value_text=\"[NULL]\" value_datetime=\"[NULL]\" value_drug=\"[NULL]\" uuid=\"56htgf-1f7d-4394-a316-0a458edf28c3\"/>\n+</dataset>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODMzNzI0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-378833724", "createdAt": "2020-03-20T21:56:15Z", "commit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NjoxNVrOF5kQzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NjoxNVrOF5kQzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzI3Ng==", "bodyText": "@ibacher So I have added some tests which don't pass at the moment because the prefix coding is not correct for 1e2 and 1e-2 type of numbers.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395907276", "createdAt": "2020-03-20T21:56:15Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));\n+\t//\t}\n+\t//\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndNegativeEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODM0MjE0", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-378834214", "createdAt": "2020-03-20T21:57:33Z", "commit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NzozNFrOF5kSXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMTo1NzozNFrOF5kSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwNzY3OQ==", "bodyText": "@ibacher We'll need to correct this part", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395907679", "createdAt": "2020-03-20T21:57:34Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -440,8 +440,8 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\t\tint eIdx = plainString.indexOf('e');\n \t\t\tif (dotIdx == -1 && eIdx == -1) {\n \t\t\t\treturn Optional\n-\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.1)).doubleValue(),\n-\t\t\t\t            quantityParam.getValue().add(new BigDecimal(0.1)).doubleValue()));\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(0.5)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(0.5)).doubleValue()));\n \t\t\t} else if (eIdx != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4ODM2MTk3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-378836197", "createdAt": "2020-03-20T22:02:43Z", "commit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowMjo0NFrOF5kYmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowMjo0NFrOF5kYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkwOTI3Mg==", "bodyText": "This has the wrong UUID, since we elected not to implement the approximation range without a decimal point, the search range for 1e2 is [99.5 ... 100.5], which is fine, but only UUID 89fg071-1f7d-4394-a316-0a458edf28c3 falls into that range. The other test works for me.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r395909272", "createdAt": "2020-03-20T22:02:44Z", "author": {"login": "ibacher"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImplTest.java", "diffHunk": "@@ -477,21 +478,94 @@ public void searchForObs_shouldSearchForObsByValueDate() {\n \t}\n \t\n \t@Test\n-\tpublic void searchForObs_shouldSearchForObsByValueQuantity() {\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithPrefixAp() {\n \t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n \t\t\n \t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n \t\t\n \t\tQuantityParam quantityParam = new QuantityParam();\n-\t\tquantityParam.setValue(VALUE_QUANTITY);\n+\t\tquantityParam.setValue(\"36\");\n+\t\tquantityParam.setPrefix(ParamPrefixEnum.APPROXIMATE);\n \t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n \t\t\n \t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n \t\t    null, null);\n \t\t\n \t\tassertThat(results, notNullValue());\n \t\tassertThat(results, not(empty()));\n-\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(OBS_VALUE_CONCEPT_UUID))));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"7e77d071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t@Test\n+\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndDecimalValue() {\n+\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t\t\n+\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t\t\n+\t\tQuantityParam quantityParam = new QuantityParam();\n+\t\tquantityParam.setValue(\"100.00\");\n+\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t\t\n+\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t\t    null, null);\n+\t\t\n+\t\tassertThat(results, notNullValue());\n+\t\tassertThat(results, not(empty()));\n+\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"89fg071-1f7d-4394-a316-0a458edf28c3\"))));\n+\t}\n+\t\n+\t//\t@Test\n+\t//\tpublic void searchForObs_shouldSearchForObsByValueQuantityWithoutPrefixAndEValue() {\n+\t//\t\tQuantityAndListParam quantityAndListParam = new QuantityAndListParam();\n+\t//\n+\t//\t\tQuantityOrListParam quantityOrListParam = new QuantityOrListParam();\n+\t//\n+\t//\t\tQuantityParam quantityParam = new QuantityParam();\n+\t//\t\tquantityParam.setValue(\"1e2\");\n+\t//\t\tquantityAndListParam.addAnd(quantityOrListParam.add(quantityParam));\n+\t//\n+\t//\t\tCollection<Obs> results = dao.searchForObservations(null, null, null, null, null, quantityAndListParam, null, null,\n+\t//\t\t    null, null);\n+\t//\n+\t//\t\tassertThat(results, notNullValue());\n+\t//\t\tassertThat(results, not(empty()));\n+\t//\t\tassertThat(results, hasItem(hasProperty(\"uuid\", equalTo(\"4efa62d2-6b8b-4803-a8fa-3f32ee54db4f\"))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a256174da9caddf98156d7b9ccb85237ad93fbd"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4OTA1NTU1", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-378905555", "createdAt": "2020-03-21T09:33:02Z", "commit": {"oid": "5f0b9a2afafade8ccb55eb0df6187b0de5bfab02"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1cd1f722e5383f8873928e57a8ba0b7467bb2db", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d1cd1f722e5383f8873928e57a8ba0b7467bb2db", "committedDate": "2020-03-23T18:38:25Z", "message": "all prefix tests added"}, "afterCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37", "committedDate": "2020-03-23T19:04:18Z", "message": "merge"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODA5Nzc3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-379809777", "createdAt": "2020-03-23T20:47:47Z", "commit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo0Nzo0N1rOF6XfiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDo1MToyN1rOF6Xm3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NjYzMw==", "bodyText": "Remove this whole else block", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396746633", "createdAt": "2020-03-23T20:47:47Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NjcxNQ==", "bodyText": "We don't really need this", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396746715", "createdAt": "2020-03-23T20:47:56Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0Njk5NQ==", "bodyText": "This should be pushed down to where dotIdx == -1 since that's the only place we need this value", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396746995", "createdAt": "2020-03-23T20:48:26Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0NzIyNg==", "bodyText": "Substitute value for quantityParam.getValue()", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396747226", "createdAt": "2020-03-23T20:48:51Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0Nzc4OA==", "bodyText": "double val = value.getValue() then use val below", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396747788", "createdAt": "2020-03-23T20:50:01Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t}\n+\t\t} else {\n+\t\t\tswitch (quantityParam.getPrefix()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODA1NA==", "bodyText": "Remove this block", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396748054", "createdAt": "2020-03-23T20:50:33Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {\n+\t\t\tString plainString = quantityParam.getValue().toPlainString();\n+\t\t\tint dotIdx = plainString.indexOf('.');\n+\t\t\tint eIdx = plainString.indexOf('e');\n+\t\t\tif (dotIdx == -1 && eIdx == -1) {\n+\t\t\t\treturn Optional.of(\n+\t\t\t\t    between(propertyName, value.subtract(approxRange).doubleValue(), value.add(approxRange).doubleValue()));\n+\t\t\t} else if (eIdx != -1) {\n+\t\t\t\tint precision = plainString.length() - (eIdx);\n+\t\t\t\tdouble mul = Math.pow(10, precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t} else {\n+\t\t\t\tint precision = plainString.length() - (dotIdx);\n+\t\t\t\tdouble mul = Math.pow(10, -precision);\n+\t\t\t\tdouble val = mul * 5.0d;\n+\t\t\t\treturn Optional\n+\t\t\t\t        .of(between(propertyName, quantityParam.getValue().subtract(new BigDecimal(val)).doubleValue(),\n+\t\t\t\t            quantityParam.getValue().add(new BigDecimal(val)).doubleValue()));\n+\t\t\t}\n+\t\t} else {\n+\t\t\tswitch (quantityParam.getPrefix()) {\n+\t\t\t\tcase EQUAL:\n+\t\t\t\t\treturn Optional.of(eq(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase NOT_EQUAL:\n+\t\t\t\t\treturn Optional.of(ne(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase LESSTHAN_OR_EQUALS:\n+\t\t\t\t\treturn Optional.of(le(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase LESSTHAN:\n+\t\t\t\t\treturn Optional.of(lt(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase GREATERTHAN_OR_EQUALS:\n+\t\t\t\t\treturn Optional.of(ge(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase GREATERTHAN:\n+\t\t\t\t\treturn Optional.of(gt(propertyName, quantityParam.getValue().doubleValue()));\n+\t\t\t\tcase APPROXIMATE:\n+\t\t\t\t\treturn Optional.of(between(propertyName,\n+\t\t\t\t\t    quantityParam.getValue().subtract(quantityParam.getValue().multiply(new BigDecimal(0.1)))\n+\t\t\t\t\t            .doubleValue(),\n+\t\t\t\t\t    quantityParam.getValue().add(quantityParam.getValue().multiply(new BigDecimal(0.1))).doubleValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc0ODUxMQ==", "bodyText": "Change this to quantityParam.getPrefix() == null || quantityParam.getPrefix.equals(APPROXIMATE)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r396748511", "createdAt": "2020-03-23T20:51:27Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -424,6 +431,62 @@ protected boolean containsAlias(Iterator<CriteriaImpl.Subcriteria> subcriteriaIt\n \t\treturn Optional.empty();\n \t}\n \t\n+\tprotected Optional<Criterion> handleQuantity(String propertyName, QuantityParam quantityParam) {\n+\t\tif (quantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\tBigDecimal value = quantityParam.getValue();\n+\t\tBigDecimal approxRange = APPROX_RANGE.multiply(value);\n+\t\t\n+\t\tif (quantityParam.getPrefix() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b5c3bfafb165f898f9e9aa592f64c6a7a4ab37"}, "originalPosition": 56}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ef9b131ca2c494b89e98d48798ec0305f580c7f", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/4ef9b131ca2c494b89e98d48798ec0305f580c7f", "committedDate": "2020-03-23T21:09:42Z", "message": "prefix for quantity improved"}, "afterCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/d5b0c1968c649c41cc00d402087b03cccb60f1fc", "committedDate": "2020-03-23T21:58:52Z", "message": "Enhance Observation Search"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDI4ODU4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-380428858", "createdAt": "2020-03-24T15:32:46Z", "commit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTozMjo0N1rOF61-ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0NDoxMVrOF62iGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NjA5MA==", "bodyText": "Can we refactor thins so this method is also in BaseDaoImpl", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397246090", "createdAt": "2020-03-24T15:32:47Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {\n+\t\t\t\tswitch (hasMemberReference.getChain()) {\n+\t\t\t\t\tcase Observation.SP_CODE:\n+\t\t\t\t\t\tTokenAndListParam code = new TokenAndListParam()\n+\t\t\t\t\t\t        .addAnd(new TokenParam().setValue(hasMemberReference.getValue()));\n+\t\t\t\t\t\tcriteria.createAlias(\"gm.concept\", \"c\");\n+\t\t\t\t\t\tfindMatchingConcepts(\"c\", code, criteria).ifPresent(criteria::add);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"gm.uuid\", hasMemberReference.getIdPart()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam, quantityParam -> handleQuantity(propertyName, quantityParam));\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0NzYyOQ==", "bodyText": "Is there any reason to prefer this to propertyLike?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397247629", "createdAt": "2020-03-24T15:34:38Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {\n+\t\t\t\tswitch (hasMemberReference.getChain()) {\n+\t\t\t\t\tcase Observation.SP_CODE:\n+\t\t\t\t\t\tTokenAndListParam code = new TokenAndListParam()\n+\t\t\t\t\t\t        .addAnd(new TokenParam().setValue(hasMemberReference.getValue()));\n+\t\t\t\t\t\tcriteria.createAlias(\"gm.concept\", \"c\");\n+\t\t\t\t\t\tfindMatchingConcepts(\"c\", code, criteria).ifPresent(criteria::add);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"gm.uuid\", hasMemberReference.getIdPart()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,\n+\t        QuantityAndListParam valueQuantityParam) {\n+\t\tif (valueQuantityParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueQuantityParam, quantityParam -> handleQuantity(propertyName, quantityParam));\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueStringParam(@NotNull String propertyName, StringAndListParam valueStringParam) {\n+\t\tif (valueStringParam == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\treturn handleAndListParam(valueStringParam, v -> Optional.of(ilike(propertyName, v.getValue(), MatchMode.EXACT)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0ODY1Nw==", "bodyText": "Change this to handleCodeableConcept", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397248657", "createdAt": "2020-03-24T15:35:52Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0OTcwNg==", "bodyText": "Also change the signature to match handleResourceCode", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397249706", "createdAt": "2020-03-24T15:37:16Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI0ODY1Nw=="}, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDYxMQ==", "bodyText": "Can we refactor out the lambda in here (the expression beginning (system, tokens) ->) and turn it into a proper method which can be called both here and handleResourceCode", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397250611", "createdAt": "2020-03-24T15:38:26Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,\n+\t        Criteria criteria) {\n+\t\tif (concepts == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleAndListParamBySystem(concepts, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(or(\n+\t\t\t\t    in(String.format(\"%s.conceptId\", conceptAlias),\n+\t\t\t\t        tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t    in(String.format(\"%s.uuid\", conceptAlias), tokensToList(tokens))));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\tcriteria.createAlias(String.format(\"%s.conceptMappings\", conceptAlias), \"cm\")\n+\t\t\t\t\t        .createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDgxNw==", "bodyText": "Also refactor handleResourceCode to be called handleCodeableConcept. Hopefully we can eventually get rid of the TokenOrListParam version of that.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397250817", "createdAt": "2020-03-24T15:38:41Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +589,29 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> findMatchingConcepts(@NotNull String conceptAlias, TokenAndListParam concepts,\n+\t        Criteria criteria) {\n+\t\tif (concepts == null) {\n+\t\t\treturn Optional.empty();\n+\t\t}\n+\t\t\n+\t\treturn handleAndListParamBySystem(concepts, (system, tokens) -> {\n+\t\t\tif (system.isEmpty()) {\n+\t\t\t\treturn Optional.of(or(\n+\t\t\t\t    in(String.format(\"%s.conceptId\", conceptAlias),\n+\t\t\t\t        tokensToParams(tokens).map(NumberUtils::toInt).collect(Collectors.toList())),\n+\t\t\t\t    in(String.format(\"%s.uuid\", conceptAlias), tokensToList(tokens))));\n+\t\t\t} else {\n+\t\t\t\tif (!containsAlias(criteria, \"cm\")) {\n+\t\t\t\t\tcriteria.createAlias(String.format(\"%s.conceptMappings\", conceptAlias), \"cm\")\n+\t\t\t\t\t        .createAlias(\"cm.conceptReferenceTerm\", \"crt\");\n+\t\t\t\t}\n+\t\t\t\t\n+\t\t\t\treturn Optional.of(generateSystemQuery(system, tokensToList(tokens)));\n+\t\t\t}\n+\t\t});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MDYxMQ=="}, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1MTkzMA==", "bodyText": "I'd rename this handleQuantity() and move it to BaseDaoImpl. I'd also rename the parameter quantityAndListParam.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397251930", "createdAt": "2020-03-24T15:40:10Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {\n+\t\t\t\tswitch (hasMemberReference.getChain()) {\n+\t\t\t\t\tcase Observation.SP_CODE:\n+\t\t\t\t\t\tTokenAndListParam code = new TokenAndListParam()\n+\t\t\t\t\t\t        .addAnd(new TokenParam().setValue(hasMemberReference.getValue()));\n+\t\t\t\t\t\tcriteria.createAlias(\"gm.concept\", \"c\");\n+\t\t\t\t\t\tfindMatchingConcepts(\"c\", code, criteria).ifPresent(criteria::add);\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"\":\n+\t\t\t\t\t\tcriteria.add(eq(\"gm.uuid\", hasMemberReference.getIdPart()));\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprotected Optional<Criterion> handleValueQuantityParam(@NotNull String propertyName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1NTE5Mw==", "bodyText": "This is an unnecessary check.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397255193", "createdAt": "2020-03-24T15:44:11Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -44,17 +50,62 @@ public Obs getObsByUuid(String uuid) {\n \t\n \t@Override\n \tpublic Collection<Obs> searchForObservations(ReferenceAndListParam encounterReference,\n-\t        ReferenceAndListParam patientReference, TokenAndListParam code, SortSpec sort) {\n+\t        ReferenceAndListParam patientReference, ReferenceParam hasMemberReference, TokenAndListParam valueConcept,\n+\t        DateRangeParam valueDateParam, QuantityAndListParam valueQuantityParam, StringAndListParam valueStringParam,\n+\t        DateRangeParam date, TokenAndListParam code, SortSpec sort) {\n+\t\t\n \t\tCriteria criteria = sessionFactory.getCurrentSession().createCriteria(Obs.class);\n \t\t\n \t\thandleEncounterReference(\"e\", encounterReference).ifPresent(c -> criteria.createAlias(\"encounter\", \"e\").add(c));\n \t\thandlePatientReference(criteria, patientReference, \"person\");\n+\t\thandleHasMemberReference(criteria, hasMemberReference);\n+\t\thandleValueCodedConcept(criteria, valueConcept);\n+\t\thandleDateRange(\"valueDatetime\", valueDateParam);\n+\t\t\n+\t\thandleValueStringParam(\"valueText\", valueStringParam).ifPresent(criteria::add);\n+\t\thandleValueQuantityParam(\"valueNumeric\", valueQuantityParam).ifPresent(criteria::add);\n+\t\thandleDateRange(\"obsDatetime\", date);\n \t\thandleCodedConcept(criteria, code);\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\tprotected void handleHasMemberReference(Criteria criteria, ReferenceParam hasMemberReference) {\n+\t\tif (hasMemberReference != null) {\n+\t\t\tcriteria.createAlias(\"groupMembers\", \"gm\");\n+\t\t\t\n+\t\t\tif (hasMemberReference.getChain() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5b0c1968c649c41cc00d402087b03cccb60f1fc"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTcxMzk3", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-380571397", "createdAt": "2020-03-24T18:07:27Z", "commit": {"oid": "8384acbdd3523ce87650b79a9d85b4c3d546ae3c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNzoyN1rOF687GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxODowNzo1NlrOF688Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1OTg5Ng==", "bodyText": "Can this also be called handleCodeableConcept()? Also, can we move it so it's with the other handleCodeableConcept method?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397359896", "createdAt": "2020-03-24T18:07:27Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -792,9 +804,8 @@ protected Criterion generateSystemQuery(String system, List<String> codes) {\n \t\t}\n \t}\n \t\n-\tprotected void handleResourceCode(Criteria criteria, TokenOrListParam code, @NotNull String conceptAlias,\n+\tprotected void handleCode(Criteria criteria, TokenOrListParam code, @NotNull String conceptAlias,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8384acbdd3523ce87650b79a9d85b4c3d546ae3c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM2MDE5NA==", "bodyText": "Let's get rid of this altogether, even though that means updating more files.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r397360194", "createdAt": "2020-03-24T18:07:56Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -812,6 +823,12 @@ protected void handleResourceCode(Criteria criteria, TokenOrListParam code, @Not\n \t\t}).ifPresent(criteria::add);\n \t}\n \t\n+\tprotected void handleResourceCode(Criteria criteria, TokenOrListParam code, @NotNull String conceptAlias,\n+\t        @NotNull String conceptMapAlias, @NotNull String conceptReferenceTermAlias) {\n+\t\t\n+\t\thandleCode(criteria, code, conceptAlias, conceptMapAlias, conceptReferenceTermAlias);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8384acbdd3523ce87650b79a9d85b4c3d546ae3c"}, "originalPosition": 71}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bbb2b04481272f2f13643df0e3badf425fc93f4f", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/bbb2b04481272f2f13643df0e3badf425fc93f4f", "committedDate": "2020-03-25T12:39:32Z", "message": "Merge branch 'master' into FM2-88"}, "afterCommit": {"oid": "dab23925fcfb3d9fe8a393aaec494ed4e104b80c", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/dab23925fcfb3d9fe8a393aaec494ed4e104b80c", "committedDate": "2020-03-25T12:42:33Z", "message": "base dao improved"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b57be258d659e6739979fa54de4f46894f9d96", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/87b57be258d659e6739979fa54de4f46894f9d96", "committedDate": "2020-03-25T12:42:33Z", "message": "Enhance Observation Search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "492505db34c052763b4ff8ae2aa38b270a6204f0", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/492505db34c052763b4ff8ae2aa38b270a6204f0", "committedDate": "2020-03-25T12:42:33Z", "message": "refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dab23925fcfb3d9fe8a393aaec494ed4e104b80c", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/dab23925fcfb3d9fe8a393aaec494ed4e104b80c", "committedDate": "2020-03-25T12:42:33Z", "message": "base dao improved"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzU2NjMx", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-381356631", "createdAt": "2020-03-25T17:06:46Z", "commit": {"oid": "dab23925fcfb3d9fe8a393aaec494ed4e104b80c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNjo0NlrOF7lWCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNjo0NlrOF7lWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjE1Mw==", "bodyText": "I don't think we need a separate method for this any more. Just inline this for handleCodeableConcept. However, this function should still take the conceptMapAlias and conceptReferenceTermAlias parameters instead of hard-coding them as cm and crt.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#discussion_r398022153", "createdAt": "2020-03-25T17:06:46Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseDaoImpl.java", "diffHunk": "@@ -539,6 +597,33 @@ protected void handleParticipantReference(Criteria criteria, ReferenceAndListPar\n \t\t}\n \t}\n \t\n+\tprotected Optional<Criterion> handleCode(Criteria criteria, TokenAndListParam concepts, @NotNull String conceptAlias) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dab23925fcfb3d9fe8a393aaec494ed4e104b80c"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzg5MDA2", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/99#pullrequestreview-381389006", "createdAt": "2020-03-25T17:44:21Z", "commit": {"oid": "8f743c5290206ef19b31f8ef8f3dfe04e0664ab9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f743c5290206ef19b31f8ef8f3dfe04e0664ab9", "author": {"user": {"login": "VaishSiddharth", "name": "Siddharth Vaish"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/8f743c5290206ef19b31f8ef8f3dfe04e0664ab9", "committedDate": "2020-03-25T17:44:56Z", "message": "improvements"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4240, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}