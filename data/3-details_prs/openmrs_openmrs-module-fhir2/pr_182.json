{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNTk0NjMw", "number": 182, "title": "FM2-182: Add support for Observation.category", "bodyText": "Description of what I changed\n\n\nThis adds support for the Observation.category field in FHIR by determining the category from the concept class associated with the Observation, where this is possible.\nIssue I worked on\n\n\n\n\nsee https://issues.openmrs.org/browse/FM2-182\nChecklist: I completed these to help reviewers :)\n\n\n\n\n My IDE is configured to follow the code style of this project.\nNo? Unsure? -> configure your IDE, format the code and add the changes with git add . && git commit --amend\n\n\n I have added tests to cover my changes. (If you refactored\nexisting code that was well tested you do not have to add tests)\nNo? -> write tests and add them to this commit git add . && git commit --amend\n\n\n I ran mvn clean package right before creating this pull request and\nadded all formatting changes to my commit.\nNo? -> execute above command\n\n\n All new and existing tests passed.\nNo? -> figure out why and add the fix to your commit. It is your responsibility to make sure your code works.\n\n\n My pull request is based on the latest changes of the master branch.\nNo? Unsure? -> execute command git pull --rebase upstream master", "createdAt": "2020-05-21T21:21:51Z", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182", "merged": true, "mergeCommit": {"oid": "1ca058f2c170b858eba2cc5c0e3d5d88aa769d86"}, "closed": true, "closedAt": "2020-05-26T15:51:04Z", "author": {"login": "ibacher"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjsT3OgFqTQxNjY2MDIyMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclGbXWABqjMzNzQxMTUzNTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NjYwMjIy", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#pullrequestreview-416660222", "createdAt": "2020-05-22T05:41:47Z", "commit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNTo0MTo0N1rOGZLSnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjozMDoyM1rOGZMGgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA1MjU3NQ==", "bodyText": "You should also add a check for null concept", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429052575", "createdAt": "2020-05-22T05:41:47Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/translators/impl/ObservationCategoryTranslatorImpl.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.translators.impl;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hl7.fhir.r4.model.CodeableConcept;\n+import org.openmrs.Concept;\n+import org.openmrs.module.fhir2.FhirConstants;\n+import org.openmrs.module.fhir2.api.mappings.ObservationCategoryMap;\n+import org.openmrs.module.fhir2.api.translators.ObservationCategoryTranslator;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryTranslatorImpl implements ObservationCategoryTranslator {\n+\t\n+\t@Autowired\n+\tprivate ObservationCategoryMap categoryMap;\n+\t\n+\t@Override\n+\tpublic CodeableConcept toFhirResource(Concept concept) {\n+\t\tString category = categoryMap.getCategory(concept.getConceptClass().getUuid());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzMwNw==", "bodyText": "I think this can be achieved using one loop with two declarations of ImmutableMap.Builder<String, String> builder. One less loop is better", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429063307", "createdAt": "2020-05-22T06:22:09Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tclassDelegate = builder.build();\n+\t\t\t\t\t\n+\t\t\t\t\tbuilder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getKey().toString(), entry.getValue().toString());\n+\t\t\t\t\t}\n+\t\t\t\t\t\n+\t\t\t\t\tconceptDelegate = builder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2NTg1OQ==", "bodyText": "There's a possibility of  entry.getValue().toString() having extra space. You should consider trimming by adding entry.getValue().toString().trim()", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#discussion_r429065859", "createdAt": "2020-05-22T06:30:23Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/mappings/ObservationCategoryMap.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * This Source Code Form is subject to the terms of the Mozilla Public License,\n+ * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n+ * obtain one at http://mozilla.org/MPL/2.0/. OpenMRS is also distributed under\n+ * the terms of the Healthcare Disclaimer located at http://openmrs.org/license.\n+ *\n+ * Copyright (C) OpenMRS Inc. OpenMRS is a registered trademark and the OpenMRS\n+ * graphic logo is a trademark of OpenMRS Inc.\n+ */\n+package org.openmrs.module.fhir2.api.mappings;\n+\n+import javax.validation.constraints.NotNull;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class ObservationCategoryMap {\n+\t\n+\t@Autowired\n+\tprivate ResourceLoader resourceLoader;\n+\t\n+\tprivate volatile Map<String, String> classDelegate = null;\n+\t\n+\tprivate volatile Map<String, String> conceptDelegate = null;\n+\t\n+\tpublic String getCategory(@NotNull String conceptClassUuid) {\n+\t\tsetupDelegates();\n+\t\treturn classDelegate.getOrDefault(conceptClassUuid, null);\n+\t}\n+\t\n+\tpublic String getConceptClassUuid(@NotNull String category) {\n+\t\tsetupDelegates();\n+\t\treturn conceptDelegate.getOrDefault(category, null);\n+\t}\n+\t\n+\tprivate void setupDelegates() {\n+\t\tif (classDelegate == null) {\n+\t\t\tsynchronized (this) {\n+\t\t\t\tif (classDelegate == null) {\n+\t\t\t\t\tResource resource = resourceLoader.getResource(\"classpath:observationCategoryMap.properties\");\n+\t\t\t\t\tProperties properties = new Properties();\n+\t\t\t\t\t\n+\t\t\t\t\ttry (InputStream in = resource.getInputStream()) {\n+\t\t\t\t\t\tproperties.load(in);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (IOException ignored) {}\n+\t\t\t\t\t\n+\t\t\t\t\tImmutableMap.Builder<String, String> builder = ImmutableMap.builderWithExpectedSize(properties.size());\n+\t\t\t\t\tfor (Map.Entry<Object, Object> entry : properties.entrySet()) {\n+\t\t\t\t\t\tbuilder.put(entry.getValue().toString(), entry.getKey().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "601a6dcd221b9c98b2511314c01aebaa4cd61406", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/601a6dcd221b9c98b2511314c01aebaa4cd61406", "committedDate": "2020-05-21T21:20:30Z", "message": "FM2-182: Add support for Observation.category"}, "afterCommit": {"oid": "ef74f1a1e53b6693641d82137130a3616933fc83", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ef74f1a1e53b6693641d82137130a3616933fc83", "committedDate": "2020-05-22T14:58:20Z", "message": "FM2-182: Add support for Observation.category"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef74f1a1e53b6693641d82137130a3616933fc83", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/ef74f1a1e53b6693641d82137130a3616933fc83", "committedDate": "2020-05-22T14:58:20Z", "message": "FM2-182: Add support for Observation.category"}, "afterCommit": {"oid": "e577222de33fe2c408741a485125ec625b47bd38", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e577222de33fe2c408741a485125ec625b47bd38", "committedDate": "2020-05-22T15:00:11Z", "message": "FM2-182: Add support for Observation.category"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTg3Mzc4", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/182#pullrequestreview-417987378", "createdAt": "2020-05-26T05:53:14Z", "commit": {"oid": "e577222de33fe2c408741a485125ec625b47bd38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e2ecbcd9111d01484f92a8a366f424e7a7233f", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/17e2ecbcd9111d01484f92a8a366f424e7a7233f", "committedDate": "2020-05-26T15:30:27Z", "message": "FM2-182: Add support for Observation.category"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e577222de33fe2c408741a485125ec625b47bd38", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/e577222de33fe2c408741a485125ec625b47bd38", "committedDate": "2020-05-22T15:00:11Z", "message": "FM2-182: Add support for Observation.category"}, "afterCommit": {"oid": "17e2ecbcd9111d01484f92a8a366f424e7a7233f", "author": {"user": {"login": "ibacher", "name": "Ian"}}, "url": "https://github.com/openmrs/openmrs-module-fhir2/commit/17e2ecbcd9111d01484f92a8a366f424e7a7233f", "committedDate": "2020-05-26T15:30:27Z", "message": "FM2-182: Add support for Observation.category"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4029, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}