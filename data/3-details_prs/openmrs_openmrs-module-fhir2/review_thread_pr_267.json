{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4NjI4Mzc5", "number": 267, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxOToxN1rOEU4GVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNDo1NVrOEU-N-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzI2MTAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxOToxN1rOG7UJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1MTowNVrOG7e7Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTI2MQ==", "bodyText": "why not @Authorized(PrivilegeConstants.DELETE_ALLERGIES)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464849261", "createdAt": "2020-08-04T07:19:17Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "diffHunk": "@@ -9,8 +9,29 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Allergy;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirAllergyIntoleranceDao extends FhirDao<Allergy> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_ALLERGIES)\n+\tAllergy get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_ALLERGIES, PrivilegeConstants.EDIT_ALLERGIES })\n+\tAllergy createOrUpdate(Allergy newEntry);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.EDIT_ALLERGIES })\n+\tAllergy delete(String uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNTg4Ng==", "bodyText": "Ugh... so this gets complicated. I modeled the behaviour based on the privileges for Obs. So, for instance, voiding an Obs (which is all we ever do) only requires the EDIT_OBS privilege. The DELETE_OBS privilege protects the purge operation (which actually deletes the record from the database). Of course, Obs is special (since an Obs is never edited, simply voided and replaced) so this may be a special case and I need to re-evaluate this. After all, DELETE_ALLERGIES does seem to be used to protect the the void rather than purge operation.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465025886", "createdAt": "2020-08-04T12:51:05Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirAllergyIntoleranceDao.java", "diffHunk": "@@ -9,8 +9,29 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Allergy;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirAllergyIntoleranceDao extends FhirDao<Allergy> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_ALLERGIES)\n+\tAllergy get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_ALLERGIES, PrivilegeConstants.EDIT_ALLERGIES })\n+\tAllergy createOrUpdate(Allergy newEntry);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.EDIT_ALLERGIES })\n+\tAllergy delete(String uuid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTI2MQ=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzUzMzUwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirObservationDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODozNzo0MlrOG7WxLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODozNzo0MlrOG7WxLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5MjIwNg==", "bodyText": "Should be @Authorized(PrivilegeConstants.DELETE_OBS) instead of \ud83d\udc46", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464892206", "createdAt": "2020-08-04T08:37:42Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirObservationDao.java", "diffHunk": "@@ -9,8 +9,33 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Obs;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirObservationDao extends FhirDao<Obs> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_OBS)\n+\tObs get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_OBS, PrivilegeConstants.EDIT_OBS })\n+\tObs createOrUpdate(Obs newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_OBS)\n+\tObs delete(String uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzUzNzk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirPersonDao.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODozOTowMlrOG7W0Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODozOTowMlrOG7W0Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5Mjk1MQ==", "bodyText": "@Authorized(PrivilegeConstants.DELETE_PERSONS)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464892951", "createdAt": "2020-08-04T08:39:02Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirPersonDao.java", "diffHunk": "@@ -15,10 +15,34 @@\n \n import org.openmrs.Person;\n import org.openmrs.PersonAttribute;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirPersonDao extends FhirDao<Person> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tPerson get(String uuid);\n+\t\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n \tList<PersonAttribute> getActiveAttributesByPersonAndAttributeTypeUuid(@NotNull Person person,\n \t        @NotNull String personAttributeTypeUuid);\n \t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_PERSONS, PrivilegeConstants.EDIT_PERSONS })\n+\tPerson createOrUpdate(Person newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_PERSONS)\n+\tPerson delete(String uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzU1NzIzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirRelatedPersonDao.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwODo0NDowMFrOG7XAAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0MToxNFrOG7g4kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5NjAwMg==", "bodyText": "Is there a specific reason not to use 'Relationship PrivilegeConstants'? i.e\n@Authorized(PrivilegeConstants.GET_RELATIONSHIPS), @Authorized(PrivilegeConstants.DELETE_RELATIONSHIPS),\n@Authorized(PrivilegeConstants.EDIT_RELATIONSHIPS)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464896002", "createdAt": "2020-08-04T08:44:00Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirRelatedPersonDao.java", "diffHunk": "@@ -9,8 +9,33 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Relationship;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirRelatedPersonDao extends FhirDao<Relationship> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tRelationship get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_PERSONS, PrivilegeConstants.EDIT_PERSONS })\n+\tRelationship createOrUpdate(Relationship newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_PERSONS)\n+\tRelationship delete(String uuid);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<String> getSearchResultUuids(SearchParameterMap theParams);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<Relationship> getSearchResults(SearchParameterMap theParams, List<String> matchingResourceUuids, int firstResult,\n+\t        int lastResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyNjY2Nw==", "bodyText": "Hmmm... should probably have both. My rationale was that we're not really exposing the relationship itself, just using it as a pass-thru to get the related person object (hence the actual thing being returned is a Person), but this is a good point.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465026667", "createdAt": "2020-08-04T12:52:23Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirRelatedPersonDao.java", "diffHunk": "@@ -9,8 +9,33 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Relationship;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirRelatedPersonDao extends FhirDao<Relationship> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tRelationship get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_PERSONS, PrivilegeConstants.EDIT_PERSONS })\n+\tRelationship createOrUpdate(Relationship newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_PERSONS)\n+\tRelationship delete(String uuid);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<String> getSearchResultUuids(SearchParameterMap theParams);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<Relationship> getSearchResults(SearchParameterMap theParams, List<String> matchingResourceUuids, int firstResult,\n+\t        int lastResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5NjAwMg=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NzkzNw==", "bodyText": "Yes, we can have both", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465057937", "createdAt": "2020-08-04T13:41:14Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/FhirRelatedPersonDao.java", "diffHunk": "@@ -9,8 +9,33 @@\n  */\n package org.openmrs.module.fhir2.api.dao;\n \n+import java.util.List;\n+\n import org.openmrs.Relationship;\n+import org.openmrs.annotation.Authorized;\n+import org.openmrs.module.fhir2.api.search.param.SearchParameterMap;\n+import org.openmrs.util.PrivilegeConstants;\n \n public interface FhirRelatedPersonDao extends FhirDao<Relationship> {\n \t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tRelationship get(String uuid);\n+\t\n+\t@Override\n+\t@Authorized({ PrivilegeConstants.ADD_PERSONS, PrivilegeConstants.EDIT_PERSONS })\n+\tRelationship createOrUpdate(Relationship newEntry);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.EDIT_PERSONS)\n+\tRelationship delete(String uuid);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<String> getSearchResultUuids(SearchParameterMap theParams);\n+\t\n+\t@Override\n+\t@Authorized(PrivilegeConstants.GET_PERSONS)\n+\tList<Relationship> getSearchResults(SearchParameterMap theParams, List<String> matchingResourceUuids, int firstResult,\n+\t        int lastResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg5NjAwMg=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDA5MTU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMToyMjoxNlrOG7cGPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1NDo1MVrOG7fEgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3OTUxNg==", "bodyText": "It can reduce to this, just thinking aloud\nif(isVoidable || isRetirable) {\n  if(isVoided(result) || isRetired(result)) {\n     throw new ResourceGoneException(uuid);\n  }\n}", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464979516", "createdAt": "2020-08-04T11:22:16Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n-\t@Autowired\n-\tprivate FhirGlobalPropertyService globalPropertyService;\n-\t\n \tprotected BaseFhirDao() {\n \t\ttypeToken = new TypeToken<T>(getClass()) {\n \t\t\t\n \t\t};\n+\t\t\n+\t\tthis.isRetireable = Retireable.class.isAssignableFrom(typeToken.getRawType());\n+\t\tthis.isVoidable = Voidable.class.isAssignableFrom(typeToken.getRawType());\n \t}\n \t\n \t@Override\n \t@Transactional(readOnly = true)\n \t@SuppressWarnings(\"unchecked\")\n \tpublic T get(String uuid) {\n-\t\treturn (T) sessionFactory.getCurrentSession().createCriteria(typeToken.getRawType()).add(eq(\"uuid\", uuid))\n+\t\tT result = (T) sessionFactory.getCurrentSession().createCriteria(typeToken.getRawType()).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n+\t\t\n+\t\tif (result == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (isVoidable) {\n+\t\t\tif (isVoided(result)) {\n+\t\t\t\tthrow new ResourceGoneException(uuid);\n+\t\t\t}\n+\t\t} else if (isRetireable) {\n+\t\t\tif (isRetired(result)) {\n+\t\t\t\tthrow new ResourceGoneException(uuid);\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyODIyNg==", "bodyText": "Basically I was trying to keep the implementations of isVoided() or isRetired() simple and not deal with the ClassCastException. To make your suggestion work, the implementation of those methods would have to be something like this:\nreturn object instanceof Voidable && ((Voidable) object).getVoided();\nThat's not too bad, so I'll go ahead and make that change. Thanks.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465028226", "createdAt": "2020-08-04T12:54:51Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;\n \t\n-\t@Autowired\n-\tprivate FhirGlobalPropertyService globalPropertyService;\n-\t\n \tprotected BaseFhirDao() {\n \t\ttypeToken = new TypeToken<T>(getClass()) {\n \t\t\t\n \t\t};\n+\t\t\n+\t\tthis.isRetireable = Retireable.class.isAssignableFrom(typeToken.getRawType());\n+\t\tthis.isVoidable = Voidable.class.isAssignableFrom(typeToken.getRawType());\n \t}\n \t\n \t@Override\n \t@Transactional(readOnly = true)\n \t@SuppressWarnings(\"unchecked\")\n \tpublic T get(String uuid) {\n-\t\treturn (T) sessionFactory.getCurrentSession().createCriteria(typeToken.getRawType()).add(eq(\"uuid\", uuid))\n+\t\tT result = (T) sessionFactory.getCurrentSession().createCriteria(typeToken.getRawType()).add(eq(\"uuid\", uuid))\n \t\t        .uniqueResult();\n+\t\t\n+\t\tif (result == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t\n+\t\tif (isVoidable) {\n+\t\t\tif (isVoided(result)) {\n+\t\t\t\tthrow new ResourceGoneException(uuid);\n+\t\t\t}\n+\t\t} else if (isRetireable) {\n+\t\t\tif (isRetired(result)) {\n+\t\t\t\tthrow new ResourceGoneException(uuid);\n+\t\t\t}\n+\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3OTUxNg=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDEwNzg0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMToyNzozMlrOG7cQAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0Njo0OFrOG7hHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4MjAxOA==", "bodyText": "We should consider making this public.\nDepending on spring context to inject sessionFactory is a little bit complex, it isn't obvious.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464982018", "createdAt": "2020-08-04T11:27:32Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAyODY4OA==", "bodyText": "What would be the rationale for making this public? Also, I'm not sure I understand the second comment?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465028688", "createdAt": "2020-08-04T12:55:32Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4MjAxOA=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NzIyMw==", "bodyText": "What would be the rationale for making this public? Also, I'm not sure I understand the second comment?\n\nSorry about that.\nSo this is how most, if not all of out DaoImpl tests are structured\npublic class DummyDaoImpl extends BaseFhirDao {\n\n}\n\npublic class DummyDaoImplTest extends BaseModuleContextSensitiveTest {\n\n      @Autowired\n      @Qualifier(\"sessionFactory\")\n      private SessionFactory sessionFactory;\n\n      private DummyDaoImpl dao;\n        \n      @Before\n      public void setup() {\n        dao = new DummyDaoImpl();\n        dao.setSessionFactory(sessionFactory);\n      }\n}\nSo if you want to use the same structure for testing from another different module with fhir2 as a dependency, it won't work because of @Setter(AccessLevel.PROTECTED).\ndao.setSessionFactory(sessionFactory); will not be available.\nAlternatively, you can rely on spring context by auto-wiring DummyDaoImpl instead of using its an instance (Not sure if it can work)", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465057223", "createdAt": "2020-08-04T13:40:10Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4MjAxOA=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2MTc4Mw==", "bodyText": "Thanks! Yeah, that makes sense.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465061783", "createdAt": "2020-08-04T13:46:48Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/BaseFhirDao.java", "diffHunk": "@@ -48,29 +54,49 @@\n @SuppressWarnings(\"UnstableApiUsage\")\n public abstract class BaseFhirDao<T extends OpenmrsObject & Auditable> extends BaseDao implements FhirDao<T> {\n \t\n-\tprivate final TypeToken<T> typeToken;\n+\tprotected final TypeToken<T> typeToken;\n+\t\n+\tprivate final boolean isRetireable;\n+\t\n+\tprivate final boolean isVoidable;\n \t\n \t@Autowired\n \t@Getter(AccessLevel.PROTECTED)\n \t@Setter(AccessLevel.PROTECTED)\n \t@Qualifier(\"sessionFactory\")\n \tprivate SessionFactory sessionFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4MjAxOA=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDE5NTk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMTo1NDozNVrOG7dEYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjo1ODoxNVrOG7fM7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NTQyNg==", "bodyText": "Just curious, You've used handleLastUpdatedImmutable() method for Observation, DiagnosticReport, and MedicationRequest Daos and not for rest. Can't seem to find the obvious reason? \ud83e\udd26\ud83c\udffe\u200d\u2642\ufe0f\nDoes this mean for Observation, DiagnosticReport & MedicationRequest once created, that cannot be changed?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r464995426", "createdAt": "2020-08-04T11:54:35Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -94,15 +88,8 @@ protected void setupSearchParams(Criteria criteria, SearchParameterMap theParams\n \t}\n \t\n \t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\tprotected Optional<Criterion> handleLastUpdated(DateRangeParam param) {\n+\t\treturn super.handleLastUpdatedImmutable(param);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAzMDM4Mg==", "bodyText": "None of the Hibernate mappings for the classes backing those objects have a value for the dateChanged field in the database, so trying to include it as a property in the query threw an exception.\nAnd, yes, I think Obs and Orders cannot be modified, but only voided and replaced. This is behaviour we're going to need to implement ourselves as well.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465030382", "createdAt": "2020-08-04T12:58:15Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirObservationDaoImpl.java", "diffHunk": "@@ -94,15 +88,8 @@ protected void setupSearchParams(Criteria criteria, SearchParameterMap theParams\n \t}\n \t\n \t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n-\t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n-\t\t\n-\t\tcriterionList.add(handleDateRange(\"dateVoided\", param));\n-\t\t\n-\t\tcriterionList.add(Optional.of(\n-\t\t    and(toCriteriaArray(Stream.of(Optional.of(isNull(\"dateVoided\")), handleDateRange(\"dateCreated\", param))))));\n-\t\t\n-\t\treturn Optional.of(or(toCriteriaArray(criterionList)));\n+\tprotected Optional<Criterion> handleLastUpdated(DateRangeParam param) {\n+\t\treturn super.handleLastUpdatedImmutable(param);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk5NTQyNg=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDI2MzYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNDo1NVrOG7dsjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzozMzo1OFrOG7gmeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNTcxMA==", "bodyText": "Is it worth it adding a second param - String property to handleLastUpdated() method so that this functionality can be handled consistently by the superclass? Of course, you can override", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465005710", "createdAt": "2020-08-04T12:14:55Z", "author": {"login": "corneliouzbett"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "diffHunk": "@@ -75,7 +73,7 @@ protected void setupSearchParams(Criteria criteria, SearchParameterMap theParams\n \t}\n \t\n \t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\tprotected Optional<Criterion> handleLastUpdated(DateRangeParam param) {\n \t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n \t\t\n \t\tcriterionList.add(handleDateRange(\"personDateVoided\", param));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MzMwNA==", "bodyText": "There are advantages to doing that, like I've actually left too much code in this handleLastUpdated() implementation. This seems like a one-off, though, as I'm not aware of other data-types that use non-standard fields for this.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/267#discussion_r465053304", "createdAt": "2020-08-04T13:33:58Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPersonDaoImpl.java", "diffHunk": "@@ -75,7 +73,7 @@ protected void setupSearchParams(Criteria criteria, SearchParameterMap theParams\n \t}\n \t\n \t@Override\n-\tprotected Optional<Criterion> getCriteriaForLastUpdated(DateRangeParam param) {\n+\tprotected Optional<Criterion> handleLastUpdated(DateRangeParam param) {\n \t\tList<Optional<Criterion>> criterionList = new ArrayList<>();\n \t\t\n \t\tcriterionList.add(handleDateRange(\"personDateVoided\", param));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNTcxMA=="}, "originalCommit": {"oid": "952ec737e2cd373c5871a8d48e188da8bbbcd7ba"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1041, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}