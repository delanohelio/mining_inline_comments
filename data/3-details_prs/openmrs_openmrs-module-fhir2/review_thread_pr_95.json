{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTI4Mjgy", "number": 95, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxODoxMVrODmCzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozMDo1NlrODon7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NDU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxODoxMVrOFzRFLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxODoxMVrOFzRFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTU0OA==", "bodyText": "@CaptainDaVinci Here I'll suggest to use Patient.SP_NAME", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301548", "createdAt": "2020-03-07T18:18:11Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NDgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxODozMFrOFzRFQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxODozMFrOFzRFQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTU3MQ==", "bodyText": "here  Patient.SP_GIVEN", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301571", "createdAt": "2020-03-07T18:18:30Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NTA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxOTowMVrOFzRFZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxOTowMVrOFzRFZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTYwNQ==", "bodyText": "Here Patient.SP_FAMILY", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301605", "createdAt": "2020-03-07T18:19:01Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NTE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxOTozM1rOFzRFdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoxOTozM1rOFzRFdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTYyMw==", "bodyText": "Here Patient.SP_BIRTHDATE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301623", "createdAt": "2020-03-07T18:19:33Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NTQyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMDowOVrOFzRFnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMDowOVrOFzRFnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTY2MQ==", "bodyText": "Here Patient.SP_DEATH_DATE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301661", "createdAt": "2020-03-07T18:20:09Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NTcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMDozOFrOFzRFwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMDozOFrOFzRFwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTY5OA==", "bodyText": "Here Patient.SP_ADDRESS_CITY", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301698", "createdAt": "2020-03-07T18:20:38Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NjE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMToyMFrOFzRF9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMToyMFrOFzRF9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTc1MQ==", "bodyText": "Here Patient.SP_ADDRESS_STATE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301751", "createdAt": "2020-03-07T18:21:20Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":\n+\t\t\t\treturn \"pad.cityVillage\";\n+\t\t\tcase \"address-state\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NjU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMTo0NVrOFzRGJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMTo0NVrOFzRGJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTc5OQ==", "bodyText": "Here Patient.SP_ADDRESS_POSTALCODE", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301799", "createdAt": "2020-03-07T18:21:45Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":\n+\t\t\t\treturn \"pad.cityVillage\";\n+\t\t\tcase \"address-state\":\n+\t\t\t\treturn \"pad.stateProvince\";\n+\t\t\tcase \"address-postalCode\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NjcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMjoyNFrOFzRGQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyMjoyNFrOFzRGQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTgyNA==", "bodyText": "Here Patient.SP_ADDRESS_COUNTRY", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301824", "createdAt": "2020-03-07T18:22:24Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))\n+\t\t\t        && !containsAlias(criteria, \"pn\")) {\n+\t\t\t\tcriteria.createAlias(\"names\", \"pn\");\n+\t\t\t}\n+\t\t\tif (paramName.startsWith(\"address\") && !containsAlias(criteria, \"pad\")) {\n+\t\t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n+\t\t\t}\n+\t\t}\n \t\thandleSort(criteria, sort);\n \t\t\n \t\treturn criteria.list();\n \t}\n \t\n+\t@Override\n+\tprotected String paramToProp(String param) {\n+\t\tswitch (param) {\n+\t\t\tcase \"name\":\n+\t\t\tcase \"given\":\n+\t\t\t\treturn \"pn.givenName\";\n+\t\t\tcase \"family\":\n+\t\t\t\treturn \"pn.familyName\";\n+\t\t\tcase \"birthdate\":\n+\t\t\t\treturn \"birthdate\";\n+\t\t\tcase \"deathdate\":\n+\t\t\t\treturn \"deathDate\";\n+\t\t\tcase \"address-city\":\n+\t\t\t\treturn \"pad.cityVillage\";\n+\t\t\tcase \"address-state\":\n+\t\t\t\treturn \"pad.stateProvince\";\n+\t\t\tcase \"address-postalCode\":\n+\t\t\t\treturn \"pad.postalCode\";\n+\t\t\tcase \"address-country\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjE4NzcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QxODoyNToxMlrOFzRGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo1Mjo1N1rOF0Ncew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA==", "bodyText": "@CaptainDaVinci  I would suggest you use Patient.SP_NAME instead of name Patient.SP_GIVEN instead of given Patient.SP_FAMILY instead of family", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389301958", "createdAt": "2020-03-07T18:25:12Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5MjM3NQ==", "bodyText": "@VaishSiddharth I don't think these changes are feasible because there's already an \"import org.openmrs.Patient;\" line. Otherwise, it'd have to always written like \"org.hl7.fhir.r4.model.Patient.SP_NAME\".", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389392375", "createdAt": "2020-03-08T18:09:04Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA=="}, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5MzE0MA==", "bodyText": "I am not very sure about what you are saying but please have a look at this maybe it'll help.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389393140", "createdAt": "2020-03-08T18:20:05Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA=="}, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM5NzMwMA==", "bodyText": "No, I am not saying that it can't be done. All I am saying is that in PatientDaoImpl, patient cannot be imported from two different locations. Hence, you'll need to write the full package name again and again.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389397300", "createdAt": "2020-03-08T19:18:30Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA=="}, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQwMDcwNg==", "bodyText": "Okay I understood what your are trying to say. Not sure that which approach is better I think for code cleanliness we should use name etc but I guess using org.hl7.fhir.r4.model.Patient.SP_NAME will be more fault tolerant.\n@ibacher What is your take on this?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389400706", "createdAt": "2020-03-08T20:06:17Z", "author": {"login": "VaishSiddharth"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA=="}, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ0OTY5Mw==", "bodyText": "I too prefer using named constants instead of literals.\nOne way to go about having a less verbose approach would be to create an alias,\nclass FHIRPerson extends org.hl7.fhir.r4.model.Patient {\n\t\t\t\n}\n...\n case FHIRPatient.SP_NAME:\n...", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r389449693", "createdAt": "2020-03-09T03:31:03Z", "author": {"login": "CaptainDaVinci"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA=="}, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5MDU1NQ==", "bodyText": "Frankly, I wouldn't get too hung-up on the constants vs literals thing. Either are fine. I certainly wouldn't support introducing a new class just to have the name of the constants to be shorter. In that case, it might make more sense to just use static imports, so you can just write:\n...\ncase SP_NAME:\n...", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r390290555", "createdAt": "2020-03-10T12:52:57Z", "author": {"login": "ibacher"}, "path": "api/src/main/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImpl.java", "diffHunk": "@@ -85,9 +86,44 @@ public PatientIdentifierType getPatientIdentifierTypeByNameOrUuid(String name, S\n \t\t\tcriteria.createAlias(\"addresses\", \"pad\");\n \t\t\tcriteria.add(c);\n \t\t});\n+\t\tif (sort != null) {\n+\t\t\tString paramName = sort.getParamName();\n+\t\t\tif ((paramName.equals(\"name\") || paramName.equals(\"given\") || paramName.equals(\"family\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTMwMTk1OA=="}, "originalCommit": {"oid": "edc81e5e5655003898036786db5422e0311ce5b3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTIzODk4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozMDo1NlrOF3SIVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozMDo1NlrOF3SIVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxMzA0Nw==", "bodyText": "Please leave a line before the return", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/95#discussion_r393513047", "createdAt": "2020-03-17T08:30:56Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/api/dao/impl/FhirPatientDaoImplTest.java", "diffHunk": "@@ -379,4 +389,224 @@ public void searchForPatients_shouldSearchForPatientsByPostalCode() {\n \t\tassertThat(results, not(empty()));\n \t\tassertThat(results.iterator().next().getUuid(), equalTo(PATIENT_ADDRESS_PATIENT_UUID));\n \t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByName() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"name\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\t// Smallest given name of patient i should be less than the largest given name of next patient.\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getNames(), not(empty())); // Not sure why this test is failing\n+\t\t\tString currentSmallestGivenName = patients.get(i - 1).getNames().stream()\n+\t\t\t        .min(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\tString nextLargestGivenName = patients.get(i).getNames().stream()\n+\t\t\t        .max(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\t\n+\t\t\tassertThat(currentSmallestGivenName, lessThanOrEqualTo(nextLargestGivenName));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\t// Largest given name of patient i + 1 i should be greater than the smallest given name of previous patient.\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tString largestGivenName = patients.get(i - 1).getNames().stream()\n+\t\t\t        .max(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\tString nextSmallestGivenName = patients.get(i).getNames().stream()\n+\t\t\t        .min(Comparator.comparing(pn -> pn.getGivenName())).get().getGivenName();\n+\t\t\t\n+\t\t\tassertThat(largestGivenName, greaterThanOrEqualTo(nextSmallestGivenName));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByBirthDate() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"birthdate\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getBirthdate(), sameOrBefore(patients.get(i).getBirthdate()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getBirthdate(), sameOrAfter(patients.get(i).getBirthdate()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByDeathDate() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"deathdate\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getDeathDate(), sameOrBefore(patients.get(i).getDeathDate()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getDeathDate(), sameOrAfter(patients.get(i).getDeathDate()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByCity() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-city\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCityVillage(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getCityVillage()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCityVillage(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getCityVillage()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByState() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-state\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getStateProvince(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getStateProvince()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getStateProvince(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getStateProvince()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByPostalCode() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-postalCode\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getPostalCode(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getPostalCode()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getPostalCode(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getPostalCode()));\n+\t\t}\n+\t}\n+\t\n+\t@Test\n+\tpublic void shouldReturnCollectionOfPatientsSortedByCountry() {\n+\t\tSortSpec sort = new SortSpec();\n+\t\tsort.setParamName(\"address-country\");\n+\t\tsort.setOrder(SortOrderEnum.ASC);\n+\t\t\n+\t\tList<Patient> patients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCountry(),\n+\t\t\t    lessThanOrEqualTo(patients.get(i).getPersonAddress().getCountry()));\n+\t\t}\n+\t\t\n+\t\tsort.setOrder(SortOrderEnum.DESC);\n+\t\t\n+\t\tpatients = getPatientListForSorting(sort);\n+\t\t\n+\t\tfor (int i = 1; i < patients.size(); i++) {\n+\t\t\tassertThat(patients.get(i - 1).getPersonAddress().getCountry(),\n+\t\t\t    greaterThanOrEqualTo(patients.get(i).getPersonAddress().getCountry()));\n+\t\t}\n+\t}\n+\t\n+\tprivate List<Patient> getPatientListForSorting(SortSpec sort) {\n+\t\tCollection<Patient> patients = dao.searchForPatients(null, null, null, null, null, null, null, null, null, null,\n+\t\t    null, null, sort);\n+\t\t\n+\t\tassertThat(patients, notNullValue());\n+\t\tassertThat(patients, not(empty()));\n+\t\tassertThat(patients.size(), greaterThan(1));\n+\t\t\n+\t\tList<Patient> patientList = new ArrayList<>(patients);\n+\t\t// remove patients with sort parameter value null, to allow comparison while asserting. \n+\t\tswitch (sort.getParamName()) {\n+\t\t\tcase \"name\":\n+\t\t\t\tpatientList.removeIf(p -> p.getGivenName() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"birthdate\":\n+\t\t\t\tpatientList.removeIf(p -> p.getBirthdate() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"deathdate\":\n+\t\t\t\tpatientList.removeIf(p -> p.getDeathDate() == null);\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-city\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"city\"));\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-state\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"state\"));\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-postalcode\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"postalCode\"));\n+\t\t\t\tbreak;\n+\t\t\tcase \"address-country\":\n+\t\t\t\tpatientList.removeIf(p -> addressComponentNullorEmtpy(p.getPersonAddress(), \"country\"));\n+\t\t\t\tbreak;\n+\t\t}\n+\t\t\n+\t\tassertThat(patientList.size(), greaterThan(1));\n+\t\t\n+\t\treturn patientList;\n+\t}\n+\t\n+\tprivate boolean addressComponentNullorEmtpy(PersonAddress address, String component) {\n+\t\tif (address == null) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tswitch (component) {\n+\t\t\tcase \"city\":\n+\t\t\t\treturn address.getCityVillage() == null || address.getCityVillage().isEmpty();\n+\t\t\tcase \"state\":\n+\t\t\t\treturn address.getStateProvince() == null || address.getStateProvince().isEmpty();\n+\t\t\tcase \"postalCode\":\n+\t\t\t\treturn address.getPostalCode() == null || address.getPostalCode().isEmpty();\n+\t\t\tcase \"country\":\n+\t\t\t\treturn address.getCountry() == null || address.getCountry().isEmpty();\n+\t\t}\n+\t\treturn false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4b37eea86b3a964cde52dece7e07c331b55a5d7"}, "originalPosition": 262}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1093, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}