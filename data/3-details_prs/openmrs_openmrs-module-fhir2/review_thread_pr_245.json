{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDUxODg5", "number": 245, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozMDowN1rOELjjBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NzoxNlrOEOrBuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTUyMTk3OnYy", "diffSide": "RIGHT", "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/ServiceRequestWebTest_UpdateWithWrongId.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozMDowN1rOGtKVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozMDowN1rOGtKVxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAwODUxOA==", "bodyText": "Remove these extra spaces", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r450008518", "createdAt": "2020-07-06T06:30:07Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/ServiceRequestWebTest_UpdateWithWrongId.json", "diffHunk": "@@ -0,0 +1,8 @@\n+{\n+  \"resourceType\": \"ServiceRequest\",\n+  \"id\": \"c0258498-2387-77df-97a5-7038c432aaba\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd2dac0c08593af3a0a7bb3c7d6a3af31237c22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNTUzNTQ1OnYy", "diffSide": "RIGHT", "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/ServiceRequestWebTest_create.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozNTo1MlrOGtKduQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozNTo1MlrOGtKduQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMDU1Mw==", "bodyText": "Why do you need this file with only resourceType property? It's not a valid ServiceRequest resource CREATE payload?", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r450010553", "createdAt": "2020-07-06T06:35:52Z", "author": {"login": "corneliouzbett"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/ServiceRequestWebTest_create.json", "diffHunk": "@@ -0,0 +1,7 @@\n+{\n+  \"resourceType\": \"ServiceRequest\"\n+\n+\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd2dac0c08593af3a0a7bb3c7d6a3af31237c22"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTIyNzQ5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyNDoxN1rOGwoW9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyNDoxN1rOGwoW9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NjA3MA==", "bodyText": "Typo in MissMatch", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r453646070", "createdAt": "2020-07-13T13:24:17Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -68,4 +86,93 @@ public void getEncounterByWrongUuid_shouldReturn404() throws Exception {\n \t\t\n \t\tassertThat(response, isNotFound());\n \t}\n+\t\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldErrorForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldErrorForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd2dac0c08593af3a0a7bb3c7d6a3af31237c22"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTIyOTkxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/ServiceRequestWebTest_update.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyNDo0OVrOGwoYYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyNDo0OVrOGwoYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0NjQzMg==", "bodyText": "Please add more fields to the json files and also remove the extra spaces throughout the PR.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r453646432", "createdAt": "2020-07-13T13:24:49Z", "author": {"login": "varung-31"}, "path": "omod/src/test/resources/org/openmrs/module/fhir2/providers/ServiceRequestWebTest_update.json", "diffHunk": "@@ -0,0 +1,9 @@\n+{\n+  \"resourceType\": \"ServiceRequest\",\n+  \"id\": \"7d13b03b-58c2-43f5-b34d-08750c51aea9\"\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd2dac0c08593af3a0a7bb3c7d6a3af31237c22"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODE5MDI1OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1MzozNlrOGx8sfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1MzozNlrOGx8sfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyNzgzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {\n          \n          \n            \n            \tpublic void updateServiceRequest_shouldRaiseExceptionForIdMisMatch() throws Exception {", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455027837", "createdAt": "2020-07-15T12:53:36Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODE5MzY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NDoyOFrOGx8uhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NDoyOFrOGx8uhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyODM1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());\n          \n          \n            \n            \t\tServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455028357", "createdAt": "2020-07-15T12:54:28Z", "author": {"login": "varung-31"}, "path": "api/src/main/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProvider.java", "diffHunk": "@@ -55,6 +63,33 @@ public ServiceRequest getServiceRequestById(@IdParam @NotNull IdType id) {\n \t\treturn serviceRequest;\n \t}\n \t\n+\t@Create\n+\tpublic MethodOutcome createServiceRequest(@ResourceParam ServiceRequest serviceRequest) {\n+\t\treturn FhirProviderUtils.buildCreate(serviceRequestService.create(serviceRequest));\n+\t} \n+\n+\t@Update\n+\t@SuppressWarnings(\"unused\")\n+\tpublic MethodOutcome updateServiceRequest(@IdParam IdType id, @ResourceParam ServiceRequest serviceRequest) {\n+\t\tif (id == null || id.getIdPart() == null) {\n+\t\t\tthrow new InvalidRequestException(\"id must be specified to update\");\n+\t\t}\n+\n+\t\tserviceRequest.setId(id.getIdPart());\n+\n+\t\treturn FhirProviderUtils.buildUpdate(serviceRequestService.update(id.getIdPart(), serviceRequest));\n+\t}\n+\n+\t@Delete\n+\t@SuppressWarnings(\"unused\")\n+\tpublic OperationOutcome deleteServiceRequest(@IdParam @NotNull IdType id) {\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = serviceRequestService.delete(id.getIdPart());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODE5NTE1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NDo1M1rOGx8vaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NDo1M1rOGx8vaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyODU4NQ==", "bodyText": "Please remove this.", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455028585", "createdAt": "2020-07-15T12:54:53Z", "author": {"login": "varung-31"}, "path": "api/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderTest.java", "diffHunk": "@@ -106,6 +112,7 @@ public void getServiceRequestByWithWrongId_shouldThrowResourceNotFoundException(\n \t}\n \t\n \t@Test\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODE5OTY0OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NTo1OVrOGx8yHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NTo1OVrOGx8yHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTI3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029277", "createdAt": "2020-07-15T12:55:59Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODIwMTQzOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NjoyM1rOGx8zLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NjoyM1rOGx8zLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTU1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n          \n          \n            \n            \t\twhen(service.create(any(ServiceRequest.class))).thenReturn(serviceRequest);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029550", "createdAt": "2020-07-15T12:56:23Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODIwMjE5OnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NjozOVrOGx8zwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NjozOVrOGx8zwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029697", "createdAt": "2020-07-15T12:56:39Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODIwMjkxOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1Njo0OFrOGx80LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1Njo0OFrOGx80LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAyOTgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n          \n          \n            \n            \t\twhen(service.update(anyString(), any(ServiceRequest.class))).thenReturn(serviceRequest);", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455029805", "createdAt": "2020-07-15T12:56:48Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODIwNDczOnYy", "diffSide": "RIGHT", "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NzoxN1rOGx81Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjo1NzoxN1rOGx81Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAzMDA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n          \n          \n            \n            \t\tServiceRequest serviceRequest = new ServiceRequest();", "url": "https://github.com/openmrs/openmrs-module-fhir2/pull/245#discussion_r455030099", "createdAt": "2020-07-15T12:57:17Z", "author": {"login": "varung-31"}, "path": "omod/src/test/java/org/openmrs/module/fhir2/providers/r4/ServiceRequestFhirResourceProviderWebTest.java", "diffHunk": "@@ -141,4 +160,92 @@ private void verifyUri(String uri) throws Exception {\n \t\tassertThat(results.getEntry().get(0).getResource(), notNullValue());\n \t\tassertThat(results.getEntry().get(0).getResource().getIdElement().getIdPart(), equalTo(SERVICE_REQUEST_UUID));\n \t}\n+\n+\t@Test\n+\tpublic void createServiceRequest_shouldCreateServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_CREATE_SERVICE_REQUEST_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.create(any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = post(\"/ServiceRequest\").jsonContent(jsonServiceRequest)\n+\t\t        .accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isCreated());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldUpdateExistingServiceRequest() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_PATH )) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();\n+\t\tserviceRequest.setId(SERVICE_REQUEST_UUID);\n+\n+\t\twhen(service.update(anyString(), any(org.hl7.fhir.r4.model.ServiceRequest.class))).thenReturn(serviceRequest);\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isOk());\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldRaiseExceptionForNoId() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader().getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_NO_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element for update\"));\n+\t}\n+\n+\t@Test\n+\tpublic void updateServiceRequest_shouldrRaiseExceptionForIdMissMatch() throws Exception {\n+\t\tString jsonServiceRequest;\n+\t\ttry (InputStream is = this.getClass().getClassLoader()\n+\t\t\t\t.getResourceAsStream(JSON_UPDATE_SERVICE_REQUEST_WRONG_ID_PATH)) {\n+\t\t\tObjects.requireNonNull(is);\n+\t\t\tjsonServiceRequest = IOUtils.toString(is, StandardCharsets.UTF_8);\n+\t\t}\n+\n+\t\tMockHttpServletResponse response = put(\"/ServiceRequest/\" + WRONG_SERVICE_REQUEST_UUID).jsonContent(jsonServiceRequest)\n+\t\t\t\t.accept(FhirMediaTypes.JSON).go();\n+\n+\t\tassertThat(response, isBadRequest());\n+\t\tassertThat(response.getContentAsString(),\n+\t\t\t\tcontainsStringIgnoringCase(\"body must contain an ID element which matches the request URL\"));\n+\t}\n+\n+\t@Test\n+\tpublic void deleteServiceRequest_shouldDeleteServiceRequest() throws Exception {\n+\t\tOperationOutcome retVal = new OperationOutcome();\n+\t\tretVal.setId(SERVICE_REQUEST_UUID);\n+\t\tretVal.getText().setDivAsString(\"Deleted successfully\");\n+\n+\t\torg.hl7.fhir.r4.model.ServiceRequest serviceRequest = new org.hl7.fhir.r4.model.ServiceRequest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb0e6be24cd61ec69e3cab19195de81c57d2c5d"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1012, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}