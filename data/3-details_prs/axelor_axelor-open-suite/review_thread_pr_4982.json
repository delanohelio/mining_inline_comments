{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NjIyNTYx", "number": 4982, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NDoxNVrODkRXrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0Nzo1NFrODkRcLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzU5OTE3OnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NDoxNVrOFwf9RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwOTowNDo0NFrOFw9Q1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5OTU1Ng==", "bodyText": "Create a JPQL query using SUM instead of computing the sum in java", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386399556", "createdAt": "2020-03-02T13:44:15Z", "author": {"login": "ale-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(\n+      ActionRequest request, ActionResponse response) {\n+    List<Map<String, Object>> dataList = new ArrayList<>();\n+    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n+    BigDecimal salesThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal salesLastYear =\n+        repo.all()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg3OTcwMw==", "bodyText": "used SQL query instead for every charts", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386879703", "createdAt": "2020-03-03T09:04:44Z", "author": {"login": "erg-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(\n+      ActionRequest request, ActionResponse response) {\n+    List<Map<String, Object>> dataList = new ArrayList<>();\n+    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n+    BigDecimal salesThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal salesLastYear =\n+        repo.all()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM5OTU1Ng=="}, "originalCommit": {"oid": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzYwMzM5OnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTozNlrOFwf_zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTozNlrOFwf_zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDIwNg==", "bodyText": "Please refactor this controller to use a service", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386400206", "createdAt": "2020-03-02T13:45:36Z", "author": {"login": "ale-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzYwNDU5OnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTo1OFrOFwgAjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0NTo1OFrOFwgAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMDM5OQ==", "bodyText": "use signum() to check if a big decimal is equal to 0", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386400399", "createdAt": "2020-03-02T13:45:58Z", "author": {"login": "ale-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(\n+      ActionRequest request, ActionResponse response) {\n+    List<Map<String, Object>> dataList = new ArrayList<>();\n+    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n+    BigDecimal salesThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal salesLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal totalThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesThisYear);\n+    BigDecimal totalLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesLastYear);\n+    if (!totalLastYear.equals(BigDecimal.ZERO)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzYxMDcxOnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0Nzo1NFrOFwgEPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMzo0Nzo1NFrOFwgEPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQwMTM0MA==", "bodyText": "please replace LocalDate.now() by appBaseService.getTodayDate()", "url": "https://github.com/axelor/axelor-open-suite/pull/4982#discussion_r386401340", "createdAt": "2020-03-02T13:47:54Z", "author": {"login": "ale-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/web/AccountChartController.java", "diffHunk": "@@ -58,4 +68,259 @@ public void installChart(ActionRequest request, ActionResponse response) throws\n \n     } else response.setFlash(I18n.get(IExceptionMessage.ACCOUNT_CHART_3));\n   }\n+\n+  public void chartInvoicedTurnoverThisYearVsLastyear(\n+      ActionRequest request, ActionResponse response) {\n+    List<Map<String, Object>> dataList = new ArrayList<>();\n+    InvoiceRepository repo = Beans.get(InvoiceRepository.class);\n+    BigDecimal salesThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal salesLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=3 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add);\n+    BigDecimal totalThisYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesThisYear);\n+    BigDecimal totalLastYear =\n+        repo.all()\n+            .filter(\n+                \"self.statusSelect != 1 and self.operationTypeSelect=4 and DATE_PART('year', self.invoiceDate) = DATE_PART('year',CURRENT_DATE) - 1 \")\n+            .fetchStream()\n+            .map(i -> i.getExTaxTotal())\n+            .reduce(BigDecimal.ZERO, BigDecimal::add)\n+            .negate()\n+            .add(salesLastYear);\n+    if (!totalLastYear.equals(BigDecimal.ZERO)) {\n+      Map<String, Object> dataMap = new HashMap<>();\n+      dataMap.put(\"_year\", LocalDate.now().getYear() - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bafb7efa750dc16bafe9a0bd1662142c4c2cb9c"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3497, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}