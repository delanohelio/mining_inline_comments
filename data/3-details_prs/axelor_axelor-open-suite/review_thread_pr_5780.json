{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMzE4ODQw", "number": 5780, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToxNToyM1rOEdRNkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoxMzozMlrOEfh5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTI2MTYzOnYy", "diffSide": "RIGHT", "path": "axelor-production/src/main/java/com/axelor/apps/production/service/MrpLineServiceProductionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToxNToyM1rOHIVIcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNToxNToyM1rOHIVIcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ5Njg4MQ==", "bodyText": "It's better to refactor this method so we can call super() instead of duplicating code.\nWe can create a second method used only for a singe mrpLineOrigin and call it from the main method.\nThis would allow to override only the second method in production module and call super().", "url": "https://github.com/axelor/axelor-open-suite/pull/5780#discussion_r478496881", "createdAt": "2020-08-27T15:15:23Z", "author": {"login": "ale-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/MrpLineServiceProductionImpl.java", "diffHunk": "@@ -105,6 +126,47 @@ protected void generateManufacturingProposal(MrpLine mrpLine) throws AxelorExcep\n     linkToOrder(mrpLine, manufOrder);\n   }\n \n+  @Override\n+  protected String getPurchaseOrderOrigin(MrpLine mrpLine) {\n+    String origin = \"\";\n+    int count = 0;\n+    for (MrpLineOrigin mrpLineOrigin : mrpLine.getMrpLineOriginList()) {\n+      if (mrpLineOrigin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4adca1b094920baee669903b3b7a62a1f0bfd0a"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDkzMzExOnYy", "diffSide": "RIGHT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/MrpServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowNToyNlrOHL2dow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjowNToyNlrOHL2dow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE4ODcwNw==", "bodyText": ":)", "url": "https://github.com/axelor/axelor-open-suite/pull/5780#discussion_r482188707", "createdAt": "2020-09-02T16:05:26Z", "author": {"login": "ale-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/MrpServiceImpl.java", "diffHunk": "@@ -670,7 +669,7 @@ protected void createSaleOrderMrpLines() throws AxelorException {\n \n     MrpLineType saleOrderMrpLineType =\n         this.getMrpLineType(MrpLineTypeRepository.ELEMENT_SALE_ORDER);\n-\n+    System.out.println(\"COUCOUUUU \" + saleOrderMrpLineType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4adca1b094920baee669903b3b7a62a1f0bfd0a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDk2NjI0OnYy", "diffSide": "RIGHT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/MrpServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoxMzozMlrOHL2yag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoxMzozMlrOHL2yag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5NDAyNg==", "bodyText": "Do not use system.out.println (if needed, a logger can be used instead)", "url": "https://github.com/axelor/axelor-open-suite/pull/5780#discussion_r482194026", "createdAt": "2020-09-02T16:13:32Z", "author": {"login": "ale-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/MrpServiceImpl.java", "diffHunk": "@@ -909,7 +908,7 @@ protected MrpLine createAvailableStockMrpLine(\n   protected MrpLineType getMrpLineType(int elementSelect) {\n \n     int applicationFieldSelect = getApplicationField(mrp.getMrpTypeSelect());\n-\n+    System.out.println(applicationFieldSelect);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4adca1b094920baee669903b3b7a62a1f0bfd0a"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3561, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}