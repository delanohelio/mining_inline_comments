{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMzgxNTg3", "number": 5868, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1NjoxNVrOElu9Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTo0NTo0M1rOEmAYeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDAyMTE5OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1NjoxNVrOHVXx6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo1NjoxNVrOHVXx6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE3MTc1Mg==", "bodyText": "can be simplified to ObjectUtils.notEmpty(docuSignFieldSetting.getDocuSignSignerSetting())\n&& signerItem.getRecipientId()\n.equals(\ndocuSignFieldSetting.getDocuSignSignerSetting().getRecipientId())", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492171752", "createdAt": "2020-09-21T15:56:15Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "diffHunk": "@@ -0,0 +1,902 @@\n+package com.axelor.apps.docusign.service;\n+\n+import com.axelor.app.AppSettings;\n+import com.axelor.apps.base.db.Company;\n+import com.axelor.apps.base.db.Partner;\n+import com.axelor.apps.docusign.db.DocuSignAccount;\n+import com.axelor.apps.docusign.db.DocuSignDocument;\n+import com.axelor.apps.docusign.db.DocuSignDocumentSetting;\n+import com.axelor.apps.docusign.db.DocuSignEnvelope;\n+import com.axelor.apps.docusign.db.DocuSignEnvelopeSetting;\n+import com.axelor.apps.docusign.db.DocuSignField;\n+import com.axelor.apps.docusign.db.DocuSignFieldSetting;\n+import com.axelor.apps.docusign.db.DocuSignSigner;\n+import com.axelor.apps.docusign.db.DocuSignSignerSetting;\n+import com.axelor.apps.docusign.db.repo.DocuSignEnvelopeRepository;\n+import com.axelor.apps.docusign.db.repo.DocuSignFieldSettingRepository;\n+import com.axelor.apps.docusign.exceptions.IExceptionMessage;\n+import com.axelor.apps.message.service.TemplateContextService;\n+import com.axelor.common.ObjectUtils;\n+import com.axelor.common.StringUtils;\n+import com.axelor.db.JPA;\n+import com.axelor.db.Model;\n+import com.axelor.db.mapper.Mapper;\n+import com.axelor.exception.AxelorException;\n+import com.axelor.exception.db.repo.TraceBackRepository;\n+import com.axelor.i18n.I18n;\n+import com.axelor.meta.MetaFiles;\n+import com.axelor.meta.db.MetaFile;\n+import com.axelor.meta.db.MetaModel;\n+import com.axelor.meta.schema.actions.ActionView;\n+import com.axelor.rpc.Context;\n+import com.axelor.tool.template.TemplateMaker;\n+import com.docusign.esign.api.EnvelopesApi;\n+import com.docusign.esign.client.ApiClient;\n+import com.docusign.esign.client.ApiException;\n+import com.docusign.esign.model.Document;\n+import com.docusign.esign.model.Envelope;\n+import com.docusign.esign.model.EnvelopeDefinition;\n+import com.docusign.esign.model.EnvelopeDocument;\n+import com.docusign.esign.model.EnvelopeDocumentsResult;\n+import com.docusign.esign.model.EnvelopeEvent;\n+import com.docusign.esign.model.EnvelopeSummary;\n+import com.docusign.esign.model.EventNotification;\n+import com.docusign.esign.model.InPersonSigner;\n+import com.docusign.esign.model.RecipientEvent;\n+import com.docusign.esign.model.Recipients;\n+import com.docusign.esign.model.Signer;\n+import com.docusign.esign.model.Tabs;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DocuSignEnvelopeServiceImpl implements DocuSignEnvelopeService {\n+\n+  private final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  protected static final char TEMPLATE_DELIMITER = '$';\n+\n+  public static final String CERTIFICATE_ID = \"certificate\";\n+  public static final String CERTIFICATE_FILENAME = \"Certificate of completion\";\n+  public static final String PDF_EXTENSION = \"pdf\";\n+\n+  protected DocuSignEnvelopeRepository docuSignEnvelopeRepo;\n+  protected TemplateContextService templateContextService;\n+  protected MetaFiles metaFiles;\n+\n+  @Inject\n+  public DocuSignEnvelopeServiceImpl(\n+      DocuSignEnvelopeRepository docuSignEnvelopeRepo,\n+      TemplateContextService templateContextService,\n+      MetaFiles metaFiles) {\n+    this.docuSignEnvelopeRepo = docuSignEnvelopeRepo;\n+    this.templateContextService = templateContextService;\n+    this.metaFiles = metaFiles;\n+  }\n+\n+  @Override\n+  public Map<String, Object> generateEnvelope(\n+      DocuSignEnvelopeSetting envelopeSetting, Long objectId) throws AxelorException {\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+    if (ObjectUtils.isEmpty(metaModel)) {\n+      return null;\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting)) {\n+\n+      DocuSignEnvelope envelope = createEnvelope(envelopeSetting, objectId);\n+\n+      return ActionView.define(\"Create envelope\")\n+          .model(DocuSignEnvelope.class.getName())\n+          .add(\"form\", \"docusign-envelope-form\")\n+          .param(\"forceEdit\", \"true\")\n+          .context(\"_showRecord\", envelope.getId().toString())\n+          .map();\n+    }\n+\n+    return null;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope createEnvelope(DocuSignEnvelopeSetting envelopeSetting, Long objectId)\n+      throws AxelorException {\n+\n+    DocuSignEnvelope envelope = new DocuSignEnvelope();\n+    envelope.setDocuSignEnvelopeSetting(envelopeSetting);\n+    envelope.setIsOrderedDocuments(envelopeSetting.getIsOrderedDocuments());\n+    envelope.setIsOrderedSigners(envelopeSetting.getIsOrderedSigners());\n+\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+\n+    Context scriptContext = null;\n+    if (ObjectUtils.notEmpty(metaModel) && ObjectUtils.notEmpty(objectId)) {\n+      try {\n+        Class<? extends Model> modelClass =\n+            (Class<? extends Model>) Class.forName(metaModel.getFullName());\n+        Model model = JPA.find(modelClass, objectId);\n+        if (ObjectUtils.notEmpty(model)) {\n+          TemplateMaker maker =\n+              new TemplateMaker(Locale.FRENCH, TEMPLATE_DELIMITER, TEMPLATE_DELIMITER);\n+          maker.setContext(model);\n+          if (StringUtils.notEmpty(envelopeSetting.getName())) {\n+            maker.setTemplate(envelopeSetting.getName());\n+            envelope.setName(maker.make());\n+          }\n+          if (StringUtils.notEmpty(envelopeSetting.getEmailSubject())) {\n+            maker.setTemplate(envelopeSetting.getEmailSubject());\n+            envelope.setEmailSubject(maker.make());\n+          }\n+\n+          envelope.setRelatedToSelect(metaModel.getFullName());\n+          envelope.setRelatedToId(objectId);\n+          scriptContext = new Context(Mapper.toMap(model), modelClass);\n+        }\n+      } catch (ClassNotFoundException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignSignerSettingList())) {\n+      for (DocuSignSignerSetting signerSetting : envelopeSetting.getDocuSignSignerSettingList()) {\n+        envelope.addDocuSignSignerListItem(createDocuSignSigner(signerSetting, scriptContext));\n+      }\n+    }\n+\n+    List<DocuSignSigner> docuSignSignerList = envelope.getDocuSignSignerList();\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignDocumentSettingList())\n+        && CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      for (DocuSignDocumentSetting documentSetting :\n+          envelopeSetting.getDocuSignDocumentSettingList()) {\n+        envelope.addDocuSignDocumentListItem(\n+            createDocuSignDocument(documentSetting, scriptContext, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignEnvelopeRepo.save(envelope);\n+  }\n+\n+  private DocuSignSigner createDocuSignSigner(\n+      DocuSignSignerSetting signerSetting, Context scriptContext) {\n+    DocuSignSigner docuSignSigner = new DocuSignSigner();\n+    docuSignSigner.setName(signerSetting.getName());\n+    docuSignSigner.setRecipientId(signerSetting.getRecipientId());\n+    docuSignSigner.setIsRequired(signerSetting.getIsRequired());\n+    docuSignSigner.setSequence(signerSetting.getSequence());\n+    docuSignSigner.setIsInPersonSigner(signerSetting.getIsInPersonSigner());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getSignerDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getSignerDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Partner signerPartner = (Partner) evaluation;\n+          docuSignSigner.setSigner(signerPartner);\n+        }\n+      }\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getCompanyDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getCompanyDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Company company = (Company) evaluation;\n+          docuSignSigner.setCompany(company);\n+        }\n+      }\n+    }\n+\n+    return docuSignSigner;\n+  }\n+\n+  private DocuSignDocument createDocuSignDocument(\n+      DocuSignDocumentSetting documentSetting,\n+      Context scriptContext,\n+      List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignDocument docuSignDocument = new DocuSignDocument();\n+    docuSignDocument.setName(documentSetting.getName());\n+    docuSignDocument.setDocumentId(documentSetting.getDocumentId());\n+    docuSignDocument.setFileExtension(documentSetting.getFileExtension());\n+    docuSignDocument.setSequence(documentSetting.getSequence());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+      if (ObjectUtils.notEmpty(documentSetting.getUnsignedMetaFileDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                documentSetting.getUnsignedMetaFileDefaultPath(), scriptContext);\n+        if (evaluation instanceof MetaFile) {\n+          MetaFile unsignedMetaFile = (MetaFile) evaluation;\n+          docuSignDocument.setUnsignedMetaFile(unsignedMetaFile);\n+        }\n+      }\n+    }\n+\n+    if (CollectionUtils.isNotEmpty(documentSetting.getDocuSignFieldSettingList())) {\n+      documentSetting\n+          .getDocuSignFieldSettingList()\n+          .forEach(\n+              fieldSetting ->\n+                  docuSignDocument.addDocuSignFieldListItem(\n+                      createDocuSignField(fieldSetting, docuSignSignerList)));\n+    }\n+    return docuSignDocument;\n+  }\n+\n+  private DocuSignField createDocuSignField(\n+      DocuSignFieldSetting docuSignFieldSetting, List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignField docuSignField = new DocuSignField();\n+    docuSignField.setName(docuSignFieldSetting.getName());\n+    docuSignField.setTypeSelect(docuSignFieldSetting.getTypeSelect());\n+    docuSignField.setValue(docuSignFieldSetting.getValue());\n+    docuSignField.setTabLabel(docuSignFieldSetting.getTabLabel());\n+    docuSignField.setPageNumber(docuSignFieldSetting.getPageNumber());\n+    docuSignField.setAnchor(docuSignFieldSetting.getAnchor());\n+    docuSignField.setAnchorUnits(docuSignFieldSetting.getAnchorUnits());\n+    docuSignField.setAnchorXOffset(docuSignFieldSetting.getAnchorXOffset());\n+    docuSignField.setAnchorYOffset(docuSignFieldSetting.getAnchorYOffset());\n+    docuSignField.setxPosition(docuSignFieldSetting.getxPosition());\n+    docuSignField.setyPosition(docuSignFieldSetting.getyPosition());\n+    docuSignField.setIsRequired(docuSignFieldSetting.getIsRequired());\n+    docuSignField.setFont(docuSignFieldSetting.getFont());\n+    docuSignField.setFontSize(docuSignFieldSetting.getFontSize());\n+    docuSignField.setFontColor(docuSignFieldSetting.getFontColor());\n+    docuSignField.setIsBold(docuSignFieldSetting.getIsBold());\n+\n+    DocuSignSigner docuSignSigner =\n+        docuSignSignerList.stream()\n+            .filter(\n+                signerItem ->\n+                    (ObjectUtils.notEmpty(docuSignFieldSetting.getDocuSignSignerSetting())\n+                        ? signerItem\n+                            .getRecipientId()\n+                            .equals(\n+                                docuSignFieldSetting.getDocuSignSignerSetting().getRecipientId())\n+                        : false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "185c0b5b14636a643610e71d21f909dab58d3ad5"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDI3MDE3OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1OToyOVrOHVaMpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNjo1OToyOVrOHVaMpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxMTM2Nw==", "bodyText": "Can docuSignField.getDocuSignSigner() be null ? The field is not required, and I'm not sure if this is checked earlier.\nI think it's better to check here if it's null to avoid NPE", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492211367", "createdAt": "2020-09-21T16:59:29Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "diffHunk": "@@ -0,0 +1,902 @@\n+package com.axelor.apps.docusign.service;\n+\n+import com.axelor.app.AppSettings;\n+import com.axelor.apps.base.db.Company;\n+import com.axelor.apps.base.db.Partner;\n+import com.axelor.apps.docusign.db.DocuSignAccount;\n+import com.axelor.apps.docusign.db.DocuSignDocument;\n+import com.axelor.apps.docusign.db.DocuSignDocumentSetting;\n+import com.axelor.apps.docusign.db.DocuSignEnvelope;\n+import com.axelor.apps.docusign.db.DocuSignEnvelopeSetting;\n+import com.axelor.apps.docusign.db.DocuSignField;\n+import com.axelor.apps.docusign.db.DocuSignFieldSetting;\n+import com.axelor.apps.docusign.db.DocuSignSigner;\n+import com.axelor.apps.docusign.db.DocuSignSignerSetting;\n+import com.axelor.apps.docusign.db.repo.DocuSignEnvelopeRepository;\n+import com.axelor.apps.docusign.db.repo.DocuSignFieldSettingRepository;\n+import com.axelor.apps.docusign.exceptions.IExceptionMessage;\n+import com.axelor.apps.message.service.TemplateContextService;\n+import com.axelor.common.ObjectUtils;\n+import com.axelor.common.StringUtils;\n+import com.axelor.db.JPA;\n+import com.axelor.db.Model;\n+import com.axelor.db.mapper.Mapper;\n+import com.axelor.exception.AxelorException;\n+import com.axelor.exception.db.repo.TraceBackRepository;\n+import com.axelor.i18n.I18n;\n+import com.axelor.meta.MetaFiles;\n+import com.axelor.meta.db.MetaFile;\n+import com.axelor.meta.db.MetaModel;\n+import com.axelor.meta.schema.actions.ActionView;\n+import com.axelor.rpc.Context;\n+import com.axelor.tool.template.TemplateMaker;\n+import com.docusign.esign.api.EnvelopesApi;\n+import com.docusign.esign.client.ApiClient;\n+import com.docusign.esign.client.ApiException;\n+import com.docusign.esign.model.Document;\n+import com.docusign.esign.model.Envelope;\n+import com.docusign.esign.model.EnvelopeDefinition;\n+import com.docusign.esign.model.EnvelopeDocument;\n+import com.docusign.esign.model.EnvelopeDocumentsResult;\n+import com.docusign.esign.model.EnvelopeEvent;\n+import com.docusign.esign.model.EnvelopeSummary;\n+import com.docusign.esign.model.EventNotification;\n+import com.docusign.esign.model.InPersonSigner;\n+import com.docusign.esign.model.RecipientEvent;\n+import com.docusign.esign.model.Recipients;\n+import com.docusign.esign.model.Signer;\n+import com.docusign.esign.model.Tabs;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DocuSignEnvelopeServiceImpl implements DocuSignEnvelopeService {\n+\n+  private final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  protected static final char TEMPLATE_DELIMITER = '$';\n+\n+  public static final String CERTIFICATE_ID = \"certificate\";\n+  public static final String CERTIFICATE_FILENAME = \"Certificate of completion\";\n+  public static final String PDF_EXTENSION = \"pdf\";\n+\n+  protected DocuSignEnvelopeRepository docuSignEnvelopeRepo;\n+  protected TemplateContextService templateContextService;\n+  protected MetaFiles metaFiles;\n+\n+  @Inject\n+  public DocuSignEnvelopeServiceImpl(\n+      DocuSignEnvelopeRepository docuSignEnvelopeRepo,\n+      TemplateContextService templateContextService,\n+      MetaFiles metaFiles) {\n+    this.docuSignEnvelopeRepo = docuSignEnvelopeRepo;\n+    this.templateContextService = templateContextService;\n+    this.metaFiles = metaFiles;\n+  }\n+\n+  @Override\n+  public Map<String, Object> generateEnvelope(\n+      DocuSignEnvelopeSetting envelopeSetting, Long objectId) throws AxelorException {\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+    if (ObjectUtils.isEmpty(metaModel)) {\n+      return null;\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting)) {\n+\n+      DocuSignEnvelope envelope = createEnvelope(envelopeSetting, objectId);\n+\n+      return ActionView.define(\"Create envelope\")\n+          .model(DocuSignEnvelope.class.getName())\n+          .add(\"form\", \"docusign-envelope-form\")\n+          .param(\"forceEdit\", \"true\")\n+          .context(\"_showRecord\", envelope.getId().toString())\n+          .map();\n+    }\n+\n+    return null;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope createEnvelope(DocuSignEnvelopeSetting envelopeSetting, Long objectId)\n+      throws AxelorException {\n+\n+    DocuSignEnvelope envelope = new DocuSignEnvelope();\n+    envelope.setDocuSignEnvelopeSetting(envelopeSetting);\n+    envelope.setIsOrderedDocuments(envelopeSetting.getIsOrderedDocuments());\n+    envelope.setIsOrderedSigners(envelopeSetting.getIsOrderedSigners());\n+\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+\n+    Context scriptContext = null;\n+    if (ObjectUtils.notEmpty(metaModel) && ObjectUtils.notEmpty(objectId)) {\n+      try {\n+        Class<? extends Model> modelClass =\n+            (Class<? extends Model>) Class.forName(metaModel.getFullName());\n+        Model model = JPA.find(modelClass, objectId);\n+        if (ObjectUtils.notEmpty(model)) {\n+          TemplateMaker maker =\n+              new TemplateMaker(Locale.FRENCH, TEMPLATE_DELIMITER, TEMPLATE_DELIMITER);\n+          maker.setContext(model);\n+          if (StringUtils.notEmpty(envelopeSetting.getName())) {\n+            maker.setTemplate(envelopeSetting.getName());\n+            envelope.setName(maker.make());\n+          }\n+          if (StringUtils.notEmpty(envelopeSetting.getEmailSubject())) {\n+            maker.setTemplate(envelopeSetting.getEmailSubject());\n+            envelope.setEmailSubject(maker.make());\n+          }\n+\n+          envelope.setRelatedToSelect(metaModel.getFullName());\n+          envelope.setRelatedToId(objectId);\n+          scriptContext = new Context(Mapper.toMap(model), modelClass);\n+        }\n+      } catch (ClassNotFoundException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignSignerSettingList())) {\n+      for (DocuSignSignerSetting signerSetting : envelopeSetting.getDocuSignSignerSettingList()) {\n+        envelope.addDocuSignSignerListItem(createDocuSignSigner(signerSetting, scriptContext));\n+      }\n+    }\n+\n+    List<DocuSignSigner> docuSignSignerList = envelope.getDocuSignSignerList();\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignDocumentSettingList())\n+        && CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      for (DocuSignDocumentSetting documentSetting :\n+          envelopeSetting.getDocuSignDocumentSettingList()) {\n+        envelope.addDocuSignDocumentListItem(\n+            createDocuSignDocument(documentSetting, scriptContext, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignEnvelopeRepo.save(envelope);\n+  }\n+\n+  private DocuSignSigner createDocuSignSigner(\n+      DocuSignSignerSetting signerSetting, Context scriptContext) {\n+    DocuSignSigner docuSignSigner = new DocuSignSigner();\n+    docuSignSigner.setName(signerSetting.getName());\n+    docuSignSigner.setRecipientId(signerSetting.getRecipientId());\n+    docuSignSigner.setIsRequired(signerSetting.getIsRequired());\n+    docuSignSigner.setSequence(signerSetting.getSequence());\n+    docuSignSigner.setIsInPersonSigner(signerSetting.getIsInPersonSigner());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getSignerDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getSignerDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Partner signerPartner = (Partner) evaluation;\n+          docuSignSigner.setSigner(signerPartner);\n+        }\n+      }\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getCompanyDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getCompanyDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Company company = (Company) evaluation;\n+          docuSignSigner.setCompany(company);\n+        }\n+      }\n+    }\n+\n+    return docuSignSigner;\n+  }\n+\n+  private DocuSignDocument createDocuSignDocument(\n+      DocuSignDocumentSetting documentSetting,\n+      Context scriptContext,\n+      List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignDocument docuSignDocument = new DocuSignDocument();\n+    docuSignDocument.setName(documentSetting.getName());\n+    docuSignDocument.setDocumentId(documentSetting.getDocumentId());\n+    docuSignDocument.setFileExtension(documentSetting.getFileExtension());\n+    docuSignDocument.setSequence(documentSetting.getSequence());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+      if (ObjectUtils.notEmpty(documentSetting.getUnsignedMetaFileDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                documentSetting.getUnsignedMetaFileDefaultPath(), scriptContext);\n+        if (evaluation instanceof MetaFile) {\n+          MetaFile unsignedMetaFile = (MetaFile) evaluation;\n+          docuSignDocument.setUnsignedMetaFile(unsignedMetaFile);\n+        }\n+      }\n+    }\n+\n+    if (CollectionUtils.isNotEmpty(documentSetting.getDocuSignFieldSettingList())) {\n+      documentSetting\n+          .getDocuSignFieldSettingList()\n+          .forEach(\n+              fieldSetting ->\n+                  docuSignDocument.addDocuSignFieldListItem(\n+                      createDocuSignField(fieldSetting, docuSignSignerList)));\n+    }\n+    return docuSignDocument;\n+  }\n+\n+  private DocuSignField createDocuSignField(\n+      DocuSignFieldSetting docuSignFieldSetting, List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignField docuSignField = new DocuSignField();\n+    docuSignField.setName(docuSignFieldSetting.getName());\n+    docuSignField.setTypeSelect(docuSignFieldSetting.getTypeSelect());\n+    docuSignField.setValue(docuSignFieldSetting.getValue());\n+    docuSignField.setTabLabel(docuSignFieldSetting.getTabLabel());\n+    docuSignField.setPageNumber(docuSignFieldSetting.getPageNumber());\n+    docuSignField.setAnchor(docuSignFieldSetting.getAnchor());\n+    docuSignField.setAnchorUnits(docuSignFieldSetting.getAnchorUnits());\n+    docuSignField.setAnchorXOffset(docuSignFieldSetting.getAnchorXOffset());\n+    docuSignField.setAnchorYOffset(docuSignFieldSetting.getAnchorYOffset());\n+    docuSignField.setxPosition(docuSignFieldSetting.getxPosition());\n+    docuSignField.setyPosition(docuSignFieldSetting.getyPosition());\n+    docuSignField.setIsRequired(docuSignFieldSetting.getIsRequired());\n+    docuSignField.setFont(docuSignFieldSetting.getFont());\n+    docuSignField.setFontSize(docuSignFieldSetting.getFontSize());\n+    docuSignField.setFontColor(docuSignFieldSetting.getFontColor());\n+    docuSignField.setIsBold(docuSignFieldSetting.getIsBold());\n+\n+    DocuSignSigner docuSignSigner =\n+        docuSignSignerList.stream()\n+            .filter(\n+                signerItem ->\n+                    (ObjectUtils.notEmpty(docuSignFieldSetting.getDocuSignSignerSetting())\n+                        ? signerItem\n+                            .getRecipientId()\n+                            .equals(\n+                                docuSignFieldSetting.getDocuSignSignerSetting().getRecipientId())\n+                        : false))\n+            .findAny()\n+            .orElse(null);\n+    docuSignField.setDocuSignSigner(docuSignSigner);\n+\n+    if (CollectionUtils.isNotEmpty(docuSignFieldSetting.getDocuSignFieldSettingList())) {\n+      for (DocuSignFieldSetting docuSignFieldSettingChild :\n+          docuSignFieldSetting.getDocuSignFieldSettingList()) {\n+        docuSignField.addDocuSignFieldListItem(\n+            createDocuSignField(docuSignFieldSettingChild, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignField;\n+  }\n+\n+  private void checkEventNotification(\n+      EnvelopeDefinition envelopeDefinition, DocuSignEnvelopeSetting envelopeSetting)\n+      throws AxelorException {\n+\n+    EventNotification eventNotification = new EventNotification();\n+    String webhookUrl = AppSettings.get().getBaseURL() + \"/ws/public/docusign/update-envelope\";\n+\n+    eventNotification.setUrl(webhookUrl);\n+    eventNotification.setLoggingEnabled(\"true\");\n+    eventNotification.setRequireAcknowledgment(\"true\");\n+\n+    if (envelopeSetting.getCheckEnvelopeStatus()) {\n+      List<EnvelopeEvent> envelopeEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckEnvelopeStatusDelivered()) {\n+        EnvelopeEvent envelopeEventDelivered = new EnvelopeEvent();\n+        envelopeEventDelivered.setEnvelopeEventStatusCode(\"delivered\");\n+        envelopeEvents.add(envelopeEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusCompleted()) {\n+        EnvelopeEvent envelopeEventCompleted = new EnvelopeEvent();\n+        envelopeEventCompleted.setEnvelopeEventStatusCode(\"completed\");\n+        envelopeEvents.add(envelopeEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusDeclined()) {\n+        EnvelopeEvent envelopeEventDeclined = new EnvelopeEvent();\n+        envelopeEventDeclined.setEnvelopeEventStatusCode(\"declined\");\n+        envelopeEvents.add(envelopeEventDeclined);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusVoided()) {\n+        EnvelopeEvent envelopeEventVoided = new EnvelopeEvent();\n+        envelopeEventVoided.setEnvelopeEventStatusCode(\"voided\");\n+        envelopeEvents.add(envelopeEventVoided);\n+      }\n+\n+      eventNotification.setEnvelopeEvents(envelopeEvents);\n+    }\n+\n+    if (envelopeSetting.getCheckRecipientStatus()) {\n+      List<RecipientEvent> recipientEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckRecipientStatusDelivered()) {\n+        RecipientEvent recipientEventDelivered = new RecipientEvent();\n+        recipientEventDelivered.setRecipientEventStatusCode(\"delivered\");\n+        recipientEvents.add(recipientEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusCompleted()) {\n+        RecipientEvent recipientEventCompleted = new RecipientEvent();\n+        recipientEventCompleted.setRecipientEventStatusCode(\"completed\");\n+        recipientEvents.add(recipientEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusDeclined()) {\n+        RecipientEvent recipientEventDeclined = new RecipientEvent();\n+        recipientEventDeclined.setRecipientEventStatusCode(\"Declined\");\n+        recipientEvents.add(recipientEventDeclined);\n+      }\n+\n+      eventNotification.setRecipientEvents(recipientEvents);\n+    }\n+\n+    envelopeDefinition.setEventNotification(eventNotification);\n+  }\n+\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope sendEnvelope(DocuSignEnvelope docuSignEnvelope) throws AxelorException {\n+    if (ObjectUtils.notEmpty(docuSignEnvelope)\n+        && ObjectUtils.notEmpty(docuSignEnvelope.getDocuSignEnvelopeSetting())\n+        && CollectionUtils.isNotEmpty(docuSignEnvelope.getDocuSignDocumentList())) {\n+      DocuSignEnvelopeSetting envelopeSetting = docuSignEnvelope.getDocuSignEnvelopeSetting();\n+\n+      EnvelopeDefinition envelopeDefinition =\n+          createEnvelopeDefinition(envelopeSetting, docuSignEnvelope);\n+\n+      EnvelopesApi envelopesApi = getEnvelopesApi(envelopeSetting.getDocuSignAccount());\n+\n+      try {\n+        EnvelopeSummary results =\n+            envelopesApi.createEnvelope(\n+                envelopeSetting.getDocuSignAccount().getAccountId(), envelopeDefinition);\n+\n+        if (StringUtils.notEmpty(results.getEnvelopeId())) {\n+          docuSignEnvelope.setEnvelopeId(results.getEnvelopeId());\n+          docuSignEnvelope.setStatusSelect(DocuSignEnvelopeRepository.STATUS_SENT);\n+          docuSignEnvelopeRepo.save(docuSignEnvelope);\n+        } else {\n+          throw new AxelorException(\n+              TraceBackRepository.CATEGORY_INCONSISTENCY,\n+              I18n.get(IExceptionMessage.DOCUSIGN_ENVELOPE_ID_NULL));\n+        }\n+\n+      } catch (ApiException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return docuSignEnvelope;\n+  }\n+\n+  private EnvelopeDefinition createEnvelopeDefinition(\n+      DocuSignEnvelopeSetting envelopeSetting, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+\n+    EnvelopeDefinition envelopeDefinition = new EnvelopeDefinition();\n+    envelopeDefinition.setEmailSubject(envelopeSetting.getEmailSubject());\n+\n+    List<DocuSignDocument> docuSignDocumentList = docuSignEnvelope.getDocuSignDocumentList();\n+    List<Document> documentList = createDocuments(docuSignDocumentList);\n+    envelopeDefinition.setDocuments(documentList);\n+\n+    List<Signer> signerList = createSigners(docuSignEnvelope.getDocuSignSignerList());\n+    List<InPersonSigner> inPersonSignerList =\n+        createInPersonSigners(docuSignEnvelope.getDocuSignSignerList());\n+    updateSigners(signerList, inPersonSignerList, docuSignDocumentList);\n+    Recipients recipients = new Recipients();\n+    if (CollectionUtils.isNotEmpty(signerList)) {\n+      recipients.setSigners(signerList);\n+    }\n+    if (CollectionUtils.isNotEmpty(inPersonSignerList)) {\n+      recipients.setInPersonSigners(inPersonSignerList);\n+    }\n+    envelopeDefinition.setRecipients(recipients);\n+\n+    if (envelopeSetting.getActiveWebhook()) {\n+      checkEventNotification(envelopeDefinition, envelopeSetting);\n+    }\n+\n+    envelopeDefinition.setStatus(DocuSignEnvelopeRepository.STATUS_SENT);\n+\n+    return envelopeDefinition;\n+  }\n+\n+  private List<Document> createDocuments(List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+    List<Document> documentList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+      documentList = new ArrayList<>();\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (ObjectUtils.notEmpty(docuSignDocument.getUnsignedMetaFile())) {\n+          documentList.add(\n+              createDocument(docuSignDocument, docuSignDocument.getUnsignedMetaFile()));\n+        }\n+      }\n+    }\n+    return documentList;\n+  }\n+\n+  private Document createDocument(DocuSignDocument docuSignDocument, MetaFile metaFile)\n+      throws AxelorException {\n+    Document document = null;\n+\n+    if (ObjectUtils.notEmpty(docuSignDocument) && ObjectUtils.notEmpty(metaFile)) {\n+      try {\n+        document = new Document();\n+        byte[] buffer = Files.readAllBytes(MetaFiles.getPath(metaFile));\n+\n+        String docBase64 = new String(Base64.getEncoder().encode(buffer));\n+        document.setDocumentBase64(docBase64);\n+        document.setName(docuSignDocument.getName());\n+        document.setFileExtension(docuSignDocument.getFileExtension());\n+        document.setDocumentId(docuSignDocument.getDocumentId());\n+        if (ObjectUtils.notEmpty(docuSignDocument.getDocuSignEnvelope())\n+            && docuSignDocument.getDocuSignEnvelope().getIsOrderedDocuments()) {\n+          document.setOrder(String.valueOf(docuSignDocument.getSequence()));\n+        }\n+\n+      } catch (IOException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return document;\n+  }\n+\n+  private List<Signer> createSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<Signer> signerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      signerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (!docuSignSigner.getIsInPersonSigner()) {\n+          Signer signer = new Signer();\n+          signer.setRecipientId(recipientId);\n+          signer.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            signer.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            signer.setEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          signer.setName(signerPartner.getSimpleFullName());\n+\n+          signerList.add(signer);\n+        }\n+      }\n+    }\n+\n+    return signerList;\n+  }\n+\n+  private List<InPersonSigner> createInPersonSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<InPersonSigner> inPersonSignerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      inPersonSignerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (docuSignSigner.getIsInPersonSigner()) {\n+          InPersonSigner inPersonSigner = new InPersonSigner();\n+          inPersonSigner.setRecipientId(recipientId);\n+          inPersonSigner.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            inPersonSigner.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            inPersonSigner.setHostEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          inPersonSigner.setHostName(signerPartner.getSimpleFullName());\n+\n+          inPersonSignerList.add(inPersonSigner);\n+        }\n+      }\n+    }\n+\n+    return inPersonSignerList;\n+  }\n+\n+  private void updateSigners(\n+      List<Signer> signerList,\n+      List<InPersonSigner> inPersonSignerList,\n+      List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (CollectionUtils.isNotEmpty(docuSignDocument.getDocuSignFieldList())) {\n+          for (DocuSignField docuSignField : docuSignDocument.getDocuSignFieldList()) {\n+            String recipientId = docuSignField.getDocuSignSigner().getRecipientId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 556}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDMwNTYxOnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowOToxNVrOHVaifQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzowOToxNVrOHVaifQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIxNjk1Nw==", "bodyText": "There is a missing I18n.get in the exception message.", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492216957", "createdAt": "2020-09-21T17:09:15Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "diffHunk": "@@ -0,0 +1,902 @@\n+package com.axelor.apps.docusign.service;\n+\n+import com.axelor.app.AppSettings;\n+import com.axelor.apps.base.db.Company;\n+import com.axelor.apps.base.db.Partner;\n+import com.axelor.apps.docusign.db.DocuSignAccount;\n+import com.axelor.apps.docusign.db.DocuSignDocument;\n+import com.axelor.apps.docusign.db.DocuSignDocumentSetting;\n+import com.axelor.apps.docusign.db.DocuSignEnvelope;\n+import com.axelor.apps.docusign.db.DocuSignEnvelopeSetting;\n+import com.axelor.apps.docusign.db.DocuSignField;\n+import com.axelor.apps.docusign.db.DocuSignFieldSetting;\n+import com.axelor.apps.docusign.db.DocuSignSigner;\n+import com.axelor.apps.docusign.db.DocuSignSignerSetting;\n+import com.axelor.apps.docusign.db.repo.DocuSignEnvelopeRepository;\n+import com.axelor.apps.docusign.db.repo.DocuSignFieldSettingRepository;\n+import com.axelor.apps.docusign.exceptions.IExceptionMessage;\n+import com.axelor.apps.message.service.TemplateContextService;\n+import com.axelor.common.ObjectUtils;\n+import com.axelor.common.StringUtils;\n+import com.axelor.db.JPA;\n+import com.axelor.db.Model;\n+import com.axelor.db.mapper.Mapper;\n+import com.axelor.exception.AxelorException;\n+import com.axelor.exception.db.repo.TraceBackRepository;\n+import com.axelor.i18n.I18n;\n+import com.axelor.meta.MetaFiles;\n+import com.axelor.meta.db.MetaFile;\n+import com.axelor.meta.db.MetaModel;\n+import com.axelor.meta.schema.actions.ActionView;\n+import com.axelor.rpc.Context;\n+import com.axelor.tool.template.TemplateMaker;\n+import com.docusign.esign.api.EnvelopesApi;\n+import com.docusign.esign.client.ApiClient;\n+import com.docusign.esign.client.ApiException;\n+import com.docusign.esign.model.Document;\n+import com.docusign.esign.model.Envelope;\n+import com.docusign.esign.model.EnvelopeDefinition;\n+import com.docusign.esign.model.EnvelopeDocument;\n+import com.docusign.esign.model.EnvelopeDocumentsResult;\n+import com.docusign.esign.model.EnvelopeEvent;\n+import com.docusign.esign.model.EnvelopeSummary;\n+import com.docusign.esign.model.EventNotification;\n+import com.docusign.esign.model.InPersonSigner;\n+import com.docusign.esign.model.RecipientEvent;\n+import com.docusign.esign.model.Recipients;\n+import com.docusign.esign.model.Signer;\n+import com.docusign.esign.model.Tabs;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DocuSignEnvelopeServiceImpl implements DocuSignEnvelopeService {\n+\n+  private final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  protected static final char TEMPLATE_DELIMITER = '$';\n+\n+  public static final String CERTIFICATE_ID = \"certificate\";\n+  public static final String CERTIFICATE_FILENAME = \"Certificate of completion\";\n+  public static final String PDF_EXTENSION = \"pdf\";\n+\n+  protected DocuSignEnvelopeRepository docuSignEnvelopeRepo;\n+  protected TemplateContextService templateContextService;\n+  protected MetaFiles metaFiles;\n+\n+  @Inject\n+  public DocuSignEnvelopeServiceImpl(\n+      DocuSignEnvelopeRepository docuSignEnvelopeRepo,\n+      TemplateContextService templateContextService,\n+      MetaFiles metaFiles) {\n+    this.docuSignEnvelopeRepo = docuSignEnvelopeRepo;\n+    this.templateContextService = templateContextService;\n+    this.metaFiles = metaFiles;\n+  }\n+\n+  @Override\n+  public Map<String, Object> generateEnvelope(\n+      DocuSignEnvelopeSetting envelopeSetting, Long objectId) throws AxelorException {\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+    if (ObjectUtils.isEmpty(metaModel)) {\n+      return null;\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting)) {\n+\n+      DocuSignEnvelope envelope = createEnvelope(envelopeSetting, objectId);\n+\n+      return ActionView.define(\"Create envelope\")\n+          .model(DocuSignEnvelope.class.getName())\n+          .add(\"form\", \"docusign-envelope-form\")\n+          .param(\"forceEdit\", \"true\")\n+          .context(\"_showRecord\", envelope.getId().toString())\n+          .map();\n+    }\n+\n+    return null;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope createEnvelope(DocuSignEnvelopeSetting envelopeSetting, Long objectId)\n+      throws AxelorException {\n+\n+    DocuSignEnvelope envelope = new DocuSignEnvelope();\n+    envelope.setDocuSignEnvelopeSetting(envelopeSetting);\n+    envelope.setIsOrderedDocuments(envelopeSetting.getIsOrderedDocuments());\n+    envelope.setIsOrderedSigners(envelopeSetting.getIsOrderedSigners());\n+\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+\n+    Context scriptContext = null;\n+    if (ObjectUtils.notEmpty(metaModel) && ObjectUtils.notEmpty(objectId)) {\n+      try {\n+        Class<? extends Model> modelClass =\n+            (Class<? extends Model>) Class.forName(metaModel.getFullName());\n+        Model model = JPA.find(modelClass, objectId);\n+        if (ObjectUtils.notEmpty(model)) {\n+          TemplateMaker maker =\n+              new TemplateMaker(Locale.FRENCH, TEMPLATE_DELIMITER, TEMPLATE_DELIMITER);\n+          maker.setContext(model);\n+          if (StringUtils.notEmpty(envelopeSetting.getName())) {\n+            maker.setTemplate(envelopeSetting.getName());\n+            envelope.setName(maker.make());\n+          }\n+          if (StringUtils.notEmpty(envelopeSetting.getEmailSubject())) {\n+            maker.setTemplate(envelopeSetting.getEmailSubject());\n+            envelope.setEmailSubject(maker.make());\n+          }\n+\n+          envelope.setRelatedToSelect(metaModel.getFullName());\n+          envelope.setRelatedToId(objectId);\n+          scriptContext = new Context(Mapper.toMap(model), modelClass);\n+        }\n+      } catch (ClassNotFoundException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignSignerSettingList())) {\n+      for (DocuSignSignerSetting signerSetting : envelopeSetting.getDocuSignSignerSettingList()) {\n+        envelope.addDocuSignSignerListItem(createDocuSignSigner(signerSetting, scriptContext));\n+      }\n+    }\n+\n+    List<DocuSignSigner> docuSignSignerList = envelope.getDocuSignSignerList();\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignDocumentSettingList())\n+        && CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      for (DocuSignDocumentSetting documentSetting :\n+          envelopeSetting.getDocuSignDocumentSettingList()) {\n+        envelope.addDocuSignDocumentListItem(\n+            createDocuSignDocument(documentSetting, scriptContext, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignEnvelopeRepo.save(envelope);\n+  }\n+\n+  private DocuSignSigner createDocuSignSigner(\n+      DocuSignSignerSetting signerSetting, Context scriptContext) {\n+    DocuSignSigner docuSignSigner = new DocuSignSigner();\n+    docuSignSigner.setName(signerSetting.getName());\n+    docuSignSigner.setRecipientId(signerSetting.getRecipientId());\n+    docuSignSigner.setIsRequired(signerSetting.getIsRequired());\n+    docuSignSigner.setSequence(signerSetting.getSequence());\n+    docuSignSigner.setIsInPersonSigner(signerSetting.getIsInPersonSigner());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getSignerDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getSignerDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Partner signerPartner = (Partner) evaluation;\n+          docuSignSigner.setSigner(signerPartner);\n+        }\n+      }\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getCompanyDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getCompanyDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Company company = (Company) evaluation;\n+          docuSignSigner.setCompany(company);\n+        }\n+      }\n+    }\n+\n+    return docuSignSigner;\n+  }\n+\n+  private DocuSignDocument createDocuSignDocument(\n+      DocuSignDocumentSetting documentSetting,\n+      Context scriptContext,\n+      List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignDocument docuSignDocument = new DocuSignDocument();\n+    docuSignDocument.setName(documentSetting.getName());\n+    docuSignDocument.setDocumentId(documentSetting.getDocumentId());\n+    docuSignDocument.setFileExtension(documentSetting.getFileExtension());\n+    docuSignDocument.setSequence(documentSetting.getSequence());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+      if (ObjectUtils.notEmpty(documentSetting.getUnsignedMetaFileDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                documentSetting.getUnsignedMetaFileDefaultPath(), scriptContext);\n+        if (evaluation instanceof MetaFile) {\n+          MetaFile unsignedMetaFile = (MetaFile) evaluation;\n+          docuSignDocument.setUnsignedMetaFile(unsignedMetaFile);\n+        }\n+      }\n+    }\n+\n+    if (CollectionUtils.isNotEmpty(documentSetting.getDocuSignFieldSettingList())) {\n+      documentSetting\n+          .getDocuSignFieldSettingList()\n+          .forEach(\n+              fieldSetting ->\n+                  docuSignDocument.addDocuSignFieldListItem(\n+                      createDocuSignField(fieldSetting, docuSignSignerList)));\n+    }\n+    return docuSignDocument;\n+  }\n+\n+  private DocuSignField createDocuSignField(\n+      DocuSignFieldSetting docuSignFieldSetting, List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignField docuSignField = new DocuSignField();\n+    docuSignField.setName(docuSignFieldSetting.getName());\n+    docuSignField.setTypeSelect(docuSignFieldSetting.getTypeSelect());\n+    docuSignField.setValue(docuSignFieldSetting.getValue());\n+    docuSignField.setTabLabel(docuSignFieldSetting.getTabLabel());\n+    docuSignField.setPageNumber(docuSignFieldSetting.getPageNumber());\n+    docuSignField.setAnchor(docuSignFieldSetting.getAnchor());\n+    docuSignField.setAnchorUnits(docuSignFieldSetting.getAnchorUnits());\n+    docuSignField.setAnchorXOffset(docuSignFieldSetting.getAnchorXOffset());\n+    docuSignField.setAnchorYOffset(docuSignFieldSetting.getAnchorYOffset());\n+    docuSignField.setxPosition(docuSignFieldSetting.getxPosition());\n+    docuSignField.setyPosition(docuSignFieldSetting.getyPosition());\n+    docuSignField.setIsRequired(docuSignFieldSetting.getIsRequired());\n+    docuSignField.setFont(docuSignFieldSetting.getFont());\n+    docuSignField.setFontSize(docuSignFieldSetting.getFontSize());\n+    docuSignField.setFontColor(docuSignFieldSetting.getFontColor());\n+    docuSignField.setIsBold(docuSignFieldSetting.getIsBold());\n+\n+    DocuSignSigner docuSignSigner =\n+        docuSignSignerList.stream()\n+            .filter(\n+                signerItem ->\n+                    (ObjectUtils.notEmpty(docuSignFieldSetting.getDocuSignSignerSetting())\n+                        ? signerItem\n+                            .getRecipientId()\n+                            .equals(\n+                                docuSignFieldSetting.getDocuSignSignerSetting().getRecipientId())\n+                        : false))\n+            .findAny()\n+            .orElse(null);\n+    docuSignField.setDocuSignSigner(docuSignSigner);\n+\n+    if (CollectionUtils.isNotEmpty(docuSignFieldSetting.getDocuSignFieldSettingList())) {\n+      for (DocuSignFieldSetting docuSignFieldSettingChild :\n+          docuSignFieldSetting.getDocuSignFieldSettingList()) {\n+        docuSignField.addDocuSignFieldListItem(\n+            createDocuSignField(docuSignFieldSettingChild, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignField;\n+  }\n+\n+  private void checkEventNotification(\n+      EnvelopeDefinition envelopeDefinition, DocuSignEnvelopeSetting envelopeSetting)\n+      throws AxelorException {\n+\n+    EventNotification eventNotification = new EventNotification();\n+    String webhookUrl = AppSettings.get().getBaseURL() + \"/ws/public/docusign/update-envelope\";\n+\n+    eventNotification.setUrl(webhookUrl);\n+    eventNotification.setLoggingEnabled(\"true\");\n+    eventNotification.setRequireAcknowledgment(\"true\");\n+\n+    if (envelopeSetting.getCheckEnvelopeStatus()) {\n+      List<EnvelopeEvent> envelopeEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckEnvelopeStatusDelivered()) {\n+        EnvelopeEvent envelopeEventDelivered = new EnvelopeEvent();\n+        envelopeEventDelivered.setEnvelopeEventStatusCode(\"delivered\");\n+        envelopeEvents.add(envelopeEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusCompleted()) {\n+        EnvelopeEvent envelopeEventCompleted = new EnvelopeEvent();\n+        envelopeEventCompleted.setEnvelopeEventStatusCode(\"completed\");\n+        envelopeEvents.add(envelopeEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusDeclined()) {\n+        EnvelopeEvent envelopeEventDeclined = new EnvelopeEvent();\n+        envelopeEventDeclined.setEnvelopeEventStatusCode(\"declined\");\n+        envelopeEvents.add(envelopeEventDeclined);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusVoided()) {\n+        EnvelopeEvent envelopeEventVoided = new EnvelopeEvent();\n+        envelopeEventVoided.setEnvelopeEventStatusCode(\"voided\");\n+        envelopeEvents.add(envelopeEventVoided);\n+      }\n+\n+      eventNotification.setEnvelopeEvents(envelopeEvents);\n+    }\n+\n+    if (envelopeSetting.getCheckRecipientStatus()) {\n+      List<RecipientEvent> recipientEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckRecipientStatusDelivered()) {\n+        RecipientEvent recipientEventDelivered = new RecipientEvent();\n+        recipientEventDelivered.setRecipientEventStatusCode(\"delivered\");\n+        recipientEvents.add(recipientEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusCompleted()) {\n+        RecipientEvent recipientEventCompleted = new RecipientEvent();\n+        recipientEventCompleted.setRecipientEventStatusCode(\"completed\");\n+        recipientEvents.add(recipientEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusDeclined()) {\n+        RecipientEvent recipientEventDeclined = new RecipientEvent();\n+        recipientEventDeclined.setRecipientEventStatusCode(\"Declined\");\n+        recipientEvents.add(recipientEventDeclined);\n+      }\n+\n+      eventNotification.setRecipientEvents(recipientEvents);\n+    }\n+\n+    envelopeDefinition.setEventNotification(eventNotification);\n+  }\n+\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope sendEnvelope(DocuSignEnvelope docuSignEnvelope) throws AxelorException {\n+    if (ObjectUtils.notEmpty(docuSignEnvelope)\n+        && ObjectUtils.notEmpty(docuSignEnvelope.getDocuSignEnvelopeSetting())\n+        && CollectionUtils.isNotEmpty(docuSignEnvelope.getDocuSignDocumentList())) {\n+      DocuSignEnvelopeSetting envelopeSetting = docuSignEnvelope.getDocuSignEnvelopeSetting();\n+\n+      EnvelopeDefinition envelopeDefinition =\n+          createEnvelopeDefinition(envelopeSetting, docuSignEnvelope);\n+\n+      EnvelopesApi envelopesApi = getEnvelopesApi(envelopeSetting.getDocuSignAccount());\n+\n+      try {\n+        EnvelopeSummary results =\n+            envelopesApi.createEnvelope(\n+                envelopeSetting.getDocuSignAccount().getAccountId(), envelopeDefinition);\n+\n+        if (StringUtils.notEmpty(results.getEnvelopeId())) {\n+          docuSignEnvelope.setEnvelopeId(results.getEnvelopeId());\n+          docuSignEnvelope.setStatusSelect(DocuSignEnvelopeRepository.STATUS_SENT);\n+          docuSignEnvelopeRepo.save(docuSignEnvelope);\n+        } else {\n+          throw new AxelorException(\n+              TraceBackRepository.CATEGORY_INCONSISTENCY,\n+              I18n.get(IExceptionMessage.DOCUSIGN_ENVELOPE_ID_NULL));\n+        }\n+\n+      } catch (ApiException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return docuSignEnvelope;\n+  }\n+\n+  private EnvelopeDefinition createEnvelopeDefinition(\n+      DocuSignEnvelopeSetting envelopeSetting, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+\n+    EnvelopeDefinition envelopeDefinition = new EnvelopeDefinition();\n+    envelopeDefinition.setEmailSubject(envelopeSetting.getEmailSubject());\n+\n+    List<DocuSignDocument> docuSignDocumentList = docuSignEnvelope.getDocuSignDocumentList();\n+    List<Document> documentList = createDocuments(docuSignDocumentList);\n+    envelopeDefinition.setDocuments(documentList);\n+\n+    List<Signer> signerList = createSigners(docuSignEnvelope.getDocuSignSignerList());\n+    List<InPersonSigner> inPersonSignerList =\n+        createInPersonSigners(docuSignEnvelope.getDocuSignSignerList());\n+    updateSigners(signerList, inPersonSignerList, docuSignDocumentList);\n+    Recipients recipients = new Recipients();\n+    if (CollectionUtils.isNotEmpty(signerList)) {\n+      recipients.setSigners(signerList);\n+    }\n+    if (CollectionUtils.isNotEmpty(inPersonSignerList)) {\n+      recipients.setInPersonSigners(inPersonSignerList);\n+    }\n+    envelopeDefinition.setRecipients(recipients);\n+\n+    if (envelopeSetting.getActiveWebhook()) {\n+      checkEventNotification(envelopeDefinition, envelopeSetting);\n+    }\n+\n+    envelopeDefinition.setStatus(DocuSignEnvelopeRepository.STATUS_SENT);\n+\n+    return envelopeDefinition;\n+  }\n+\n+  private List<Document> createDocuments(List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+    List<Document> documentList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+      documentList = new ArrayList<>();\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (ObjectUtils.notEmpty(docuSignDocument.getUnsignedMetaFile())) {\n+          documentList.add(\n+              createDocument(docuSignDocument, docuSignDocument.getUnsignedMetaFile()));\n+        }\n+      }\n+    }\n+    return documentList;\n+  }\n+\n+  private Document createDocument(DocuSignDocument docuSignDocument, MetaFile metaFile)\n+      throws AxelorException {\n+    Document document = null;\n+\n+    if (ObjectUtils.notEmpty(docuSignDocument) && ObjectUtils.notEmpty(metaFile)) {\n+      try {\n+        document = new Document();\n+        byte[] buffer = Files.readAllBytes(MetaFiles.getPath(metaFile));\n+\n+        String docBase64 = new String(Base64.getEncoder().encode(buffer));\n+        document.setDocumentBase64(docBase64);\n+        document.setName(docuSignDocument.getName());\n+        document.setFileExtension(docuSignDocument.getFileExtension());\n+        document.setDocumentId(docuSignDocument.getDocumentId());\n+        if (ObjectUtils.notEmpty(docuSignDocument.getDocuSignEnvelope())\n+            && docuSignDocument.getDocuSignEnvelope().getIsOrderedDocuments()) {\n+          document.setOrder(String.valueOf(docuSignDocument.getSequence()));\n+        }\n+\n+      } catch (IOException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return document;\n+  }\n+\n+  private List<Signer> createSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<Signer> signerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      signerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (!docuSignSigner.getIsInPersonSigner()) {\n+          Signer signer = new Signer();\n+          signer.setRecipientId(recipientId);\n+          signer.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            signer.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            signer.setEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          signer.setName(signerPartner.getSimpleFullName());\n+\n+          signerList.add(signer);\n+        }\n+      }\n+    }\n+\n+    return signerList;\n+  }\n+\n+  private List<InPersonSigner> createInPersonSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<InPersonSigner> inPersonSignerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      inPersonSignerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (docuSignSigner.getIsInPersonSigner()) {\n+          InPersonSigner inPersonSigner = new InPersonSigner();\n+          inPersonSigner.setRecipientId(recipientId);\n+          inPersonSigner.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            inPersonSigner.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            inPersonSigner.setHostEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          inPersonSigner.setHostName(signerPartner.getSimpleFullName());\n+\n+          inPersonSignerList.add(inPersonSigner);\n+        }\n+      }\n+    }\n+\n+    return inPersonSignerList;\n+  }\n+\n+  private void updateSigners(\n+      List<Signer> signerList,\n+      List<InPersonSigner> inPersonSignerList,\n+      List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (CollectionUtils.isNotEmpty(docuSignDocument.getDocuSignFieldList())) {\n+          for (DocuSignField docuSignField : docuSignDocument.getDocuSignFieldList()) {\n+            String recipientId = docuSignField.getDocuSignSigner().getRecipientId();\n+            if (docuSignField.getDocuSignSigner().getIsInPersonSigner()) {\n+              InPersonSigner inPersonSigner = findInPersonSigner(inPersonSignerList, recipientId);\n+              if (ObjectUtils.notEmpty(inPersonSigner)) {\n+                updateInPersonSigner(inPersonSigner, docuSignField);\n+              } else {\n+                throw new AxelorException(\n+                    TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                    I18n.get(IExceptionMessage.DOCUSIGN_IN_PERSON_SIGNER_NOT_FOUND));\n+              }\n+\n+            } else {\n+              Signer signer = findSigner(signerList, recipientId);\n+              if (ObjectUtils.notEmpty(signer)) {\n+                updateSigner(signer, docuSignField);\n+              } else {\n+                throw new AxelorException(\n+                    TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                    I18n.get(IExceptionMessage.DOCUSIGN_SIGNER_NOT_FOUND));\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private InPersonSigner findInPersonSigner(\n+      List<InPersonSigner> inPersonSignerList, String recipientId) {\n+    InPersonSigner inPersonSigner = null;\n+\n+    if (CollectionUtils.isNotEmpty(inPersonSignerList) && StringUtils.notEmpty(recipientId)) {\n+      inPersonSigner =\n+          inPersonSignerList.stream()\n+              .filter(signerItem -> recipientId.equals(signerItem.getRecipientId()))\n+              .findAny()\n+              .orElse(null);\n+    }\n+\n+    return inPersonSigner;\n+  }\n+\n+  private InPersonSigner updateInPersonSigner(\n+      InPersonSigner inPersonSigner, DocuSignField docuSignField) throws AxelorException {\n+\n+    if (ObjectUtils.notEmpty(docuSignField.getDocuSignSigner())) {\n+\n+      DocuSignSigner docuSignSigner = docuSignField.getDocuSignSigner();\n+      Partner signerPartner = docuSignSigner.getSigner();\n+      Company company = docuSignSigner.getCompany();\n+      Tabs tabs = inPersonSigner.getTabs();\n+      if (ObjectUtils.isEmpty(tabs)) {\n+        tabs = new Tabs();\n+        inPersonSigner.setTabs(tabs);\n+      }\n+\n+      String documentId = docuSignField.getDocuSignDocument().getDocumentId();\n+      processItem(\n+          tabs, docuSignField, documentId, inPersonSigner.getRecipientId(), signerPartner, company);\n+    }\n+\n+    return inPersonSigner;\n+  }\n+\n+  private Signer findSigner(List<Signer> signerList, String recipientId) {\n+    Signer signer = null;\n+\n+    if (CollectionUtils.isNotEmpty(signerList) && StringUtils.notEmpty(recipientId)) {\n+      signer =\n+          signerList.stream()\n+              .filter(signerItem -> recipientId.equals(signerItem.getRecipientId()))\n+              .findAny()\n+              .orElse(null);\n+    }\n+\n+    return signer;\n+  }\n+\n+  private Signer updateSigner(Signer signer, DocuSignField docuSignField) throws AxelorException {\n+\n+    if (ObjectUtils.notEmpty(docuSignField.getDocuSignSigner())) {\n+      DocuSignSigner docuSignSigner = docuSignField.getDocuSignSigner();\n+      Partner signerPartner = docuSignSigner.getSigner();\n+      Company company = docuSignSigner.getCompany();\n+      Tabs tabs = signer.getTabs();\n+      if (ObjectUtils.isEmpty(tabs)) {\n+        tabs = new Tabs();\n+        signer.setTabs(tabs);\n+      }\n+\n+      String documentId = docuSignField.getDocuSignDocument().getDocumentId();\n+      processItem(tabs, docuSignField, documentId, signer.getRecipientId(), signerPartner, company);\n+    }\n+\n+    return signer;\n+  }\n+\n+  private void processItem(\n+      Tabs tabs,\n+      DocuSignField docuSignField,\n+      String documentId,\n+      String recipientId,\n+      Partner partner,\n+      Company company)\n+      throws AxelorException {\n+\n+    switch (docuSignField.getTypeSelect()) {\n+      case DocuSignFieldSettingRepository.TYPE_SIGN_HERE:\n+        DocuSignUtils.addSignHere(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_FULL_NAME:\n+        DocuSignUtils.addFullName(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_EMAIL:\n+        String email = null;\n+        if (ObjectUtils.notEmpty(partner) && ObjectUtils.notEmpty(partner.getEmailAddress())) {\n+          email = partner.getEmailAddress().getAddress();\n+        }\n+        DocuSignUtils.addEmail(tabs, docuSignField, documentId, recipientId, email);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_COMPANY:\n+        String companyName = null;\n+        if (ObjectUtils.notEmpty(company)) {\n+          companyName = company.getName();\n+        }\n+        DocuSignUtils.addCompany(tabs, docuSignField, documentId, recipientId, companyName);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_CHECKBOX:\n+        DocuSignUtils.addCheckbox(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_RADIO_GROUP:\n+        DocuSignUtils.addRadioGroup(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_LIST:\n+        DocuSignUtils.addList(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_APPROVE:\n+        DocuSignUtils.addApprove(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_DECLINE:\n+        DocuSignUtils.addDecline(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      default:\n+        throw new AxelorException(\n+            TraceBackRepository.CATEGORY_INCONSISTENCY,\n+            I18n.get(IExceptionMessage.DOCUSIGN_PARAM_ITEM_UNKNOWN_TYPE));\n+    }\n+  }\n+\n+  private EnvelopesApi getEnvelopesApi(DocuSignAccount docuSignAccount) throws AxelorException {\n+\n+    EnvelopesApi envelopesApi = null;\n+    if (ObjectUtils.notEmpty(docuSignAccount)) {\n+      ApiClient apiClient = new ApiClient();\n+      apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + docuSignAccount.getAccessToken());\n+      apiClient.setBasePath(docuSignAccount.getBasePath());\n+      envelopesApi = new EnvelopesApi(apiClient);\n+    } else {\n+      throw new AxelorException(\n+          TraceBackRepository.CATEGORY_INCONSISTENCY, IExceptionMessage.DOCUSIGN_ACCOUNT_EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 715}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjU0NDE0OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyMTozOFrOHVvLCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyMTozOFrOHVvLCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NTAxOA==", "bodyText": "Can the documentId be null for a docuSignDocument here ?", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492555018", "createdAt": "2020-09-22T08:21:38Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "diffHunk": "@@ -0,0 +1,902 @@\n+package com.axelor.apps.docusign.service;\n+\n+import com.axelor.app.AppSettings;\n+import com.axelor.apps.base.db.Company;\n+import com.axelor.apps.base.db.Partner;\n+import com.axelor.apps.docusign.db.DocuSignAccount;\n+import com.axelor.apps.docusign.db.DocuSignDocument;\n+import com.axelor.apps.docusign.db.DocuSignDocumentSetting;\n+import com.axelor.apps.docusign.db.DocuSignEnvelope;\n+import com.axelor.apps.docusign.db.DocuSignEnvelopeSetting;\n+import com.axelor.apps.docusign.db.DocuSignField;\n+import com.axelor.apps.docusign.db.DocuSignFieldSetting;\n+import com.axelor.apps.docusign.db.DocuSignSigner;\n+import com.axelor.apps.docusign.db.DocuSignSignerSetting;\n+import com.axelor.apps.docusign.db.repo.DocuSignEnvelopeRepository;\n+import com.axelor.apps.docusign.db.repo.DocuSignFieldSettingRepository;\n+import com.axelor.apps.docusign.exceptions.IExceptionMessage;\n+import com.axelor.apps.message.service.TemplateContextService;\n+import com.axelor.common.ObjectUtils;\n+import com.axelor.common.StringUtils;\n+import com.axelor.db.JPA;\n+import com.axelor.db.Model;\n+import com.axelor.db.mapper.Mapper;\n+import com.axelor.exception.AxelorException;\n+import com.axelor.exception.db.repo.TraceBackRepository;\n+import com.axelor.i18n.I18n;\n+import com.axelor.meta.MetaFiles;\n+import com.axelor.meta.db.MetaFile;\n+import com.axelor.meta.db.MetaModel;\n+import com.axelor.meta.schema.actions.ActionView;\n+import com.axelor.rpc.Context;\n+import com.axelor.tool.template.TemplateMaker;\n+import com.docusign.esign.api.EnvelopesApi;\n+import com.docusign.esign.client.ApiClient;\n+import com.docusign.esign.client.ApiException;\n+import com.docusign.esign.model.Document;\n+import com.docusign.esign.model.Envelope;\n+import com.docusign.esign.model.EnvelopeDefinition;\n+import com.docusign.esign.model.EnvelopeDocument;\n+import com.docusign.esign.model.EnvelopeDocumentsResult;\n+import com.docusign.esign.model.EnvelopeEvent;\n+import com.docusign.esign.model.EnvelopeSummary;\n+import com.docusign.esign.model.EventNotification;\n+import com.docusign.esign.model.InPersonSigner;\n+import com.docusign.esign.model.RecipientEvent;\n+import com.docusign.esign.model.Recipients;\n+import com.docusign.esign.model.Signer;\n+import com.docusign.esign.model.Tabs;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DocuSignEnvelopeServiceImpl implements DocuSignEnvelopeService {\n+\n+  private final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  protected static final char TEMPLATE_DELIMITER = '$';\n+\n+  public static final String CERTIFICATE_ID = \"certificate\";\n+  public static final String CERTIFICATE_FILENAME = \"Certificate of completion\";\n+  public static final String PDF_EXTENSION = \"pdf\";\n+\n+  protected DocuSignEnvelopeRepository docuSignEnvelopeRepo;\n+  protected TemplateContextService templateContextService;\n+  protected MetaFiles metaFiles;\n+\n+  @Inject\n+  public DocuSignEnvelopeServiceImpl(\n+      DocuSignEnvelopeRepository docuSignEnvelopeRepo,\n+      TemplateContextService templateContextService,\n+      MetaFiles metaFiles) {\n+    this.docuSignEnvelopeRepo = docuSignEnvelopeRepo;\n+    this.templateContextService = templateContextService;\n+    this.metaFiles = metaFiles;\n+  }\n+\n+  @Override\n+  public Map<String, Object> generateEnvelope(\n+      DocuSignEnvelopeSetting envelopeSetting, Long objectId) throws AxelorException {\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+    if (ObjectUtils.isEmpty(metaModel)) {\n+      return null;\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting)) {\n+\n+      DocuSignEnvelope envelope = createEnvelope(envelopeSetting, objectId);\n+\n+      return ActionView.define(\"Create envelope\")\n+          .model(DocuSignEnvelope.class.getName())\n+          .add(\"form\", \"docusign-envelope-form\")\n+          .param(\"forceEdit\", \"true\")\n+          .context(\"_showRecord\", envelope.getId().toString())\n+          .map();\n+    }\n+\n+    return null;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope createEnvelope(DocuSignEnvelopeSetting envelopeSetting, Long objectId)\n+      throws AxelorException {\n+\n+    DocuSignEnvelope envelope = new DocuSignEnvelope();\n+    envelope.setDocuSignEnvelopeSetting(envelopeSetting);\n+    envelope.setIsOrderedDocuments(envelopeSetting.getIsOrderedDocuments());\n+    envelope.setIsOrderedSigners(envelopeSetting.getIsOrderedSigners());\n+\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+\n+    Context scriptContext = null;\n+    if (ObjectUtils.notEmpty(metaModel) && ObjectUtils.notEmpty(objectId)) {\n+      try {\n+        Class<? extends Model> modelClass =\n+            (Class<? extends Model>) Class.forName(metaModel.getFullName());\n+        Model model = JPA.find(modelClass, objectId);\n+        if (ObjectUtils.notEmpty(model)) {\n+          TemplateMaker maker =\n+              new TemplateMaker(Locale.FRENCH, TEMPLATE_DELIMITER, TEMPLATE_DELIMITER);\n+          maker.setContext(model);\n+          if (StringUtils.notEmpty(envelopeSetting.getName())) {\n+            maker.setTemplate(envelopeSetting.getName());\n+            envelope.setName(maker.make());\n+          }\n+          if (StringUtils.notEmpty(envelopeSetting.getEmailSubject())) {\n+            maker.setTemplate(envelopeSetting.getEmailSubject());\n+            envelope.setEmailSubject(maker.make());\n+          }\n+\n+          envelope.setRelatedToSelect(metaModel.getFullName());\n+          envelope.setRelatedToId(objectId);\n+          scriptContext = new Context(Mapper.toMap(model), modelClass);\n+        }\n+      } catch (ClassNotFoundException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignSignerSettingList())) {\n+      for (DocuSignSignerSetting signerSetting : envelopeSetting.getDocuSignSignerSettingList()) {\n+        envelope.addDocuSignSignerListItem(createDocuSignSigner(signerSetting, scriptContext));\n+      }\n+    }\n+\n+    List<DocuSignSigner> docuSignSignerList = envelope.getDocuSignSignerList();\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignDocumentSettingList())\n+        && CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      for (DocuSignDocumentSetting documentSetting :\n+          envelopeSetting.getDocuSignDocumentSettingList()) {\n+        envelope.addDocuSignDocumentListItem(\n+            createDocuSignDocument(documentSetting, scriptContext, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignEnvelopeRepo.save(envelope);\n+  }\n+\n+  private DocuSignSigner createDocuSignSigner(\n+      DocuSignSignerSetting signerSetting, Context scriptContext) {\n+    DocuSignSigner docuSignSigner = new DocuSignSigner();\n+    docuSignSigner.setName(signerSetting.getName());\n+    docuSignSigner.setRecipientId(signerSetting.getRecipientId());\n+    docuSignSigner.setIsRequired(signerSetting.getIsRequired());\n+    docuSignSigner.setSequence(signerSetting.getSequence());\n+    docuSignSigner.setIsInPersonSigner(signerSetting.getIsInPersonSigner());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getSignerDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getSignerDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Partner signerPartner = (Partner) evaluation;\n+          docuSignSigner.setSigner(signerPartner);\n+        }\n+      }\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getCompanyDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getCompanyDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Company company = (Company) evaluation;\n+          docuSignSigner.setCompany(company);\n+        }\n+      }\n+    }\n+\n+    return docuSignSigner;\n+  }\n+\n+  private DocuSignDocument createDocuSignDocument(\n+      DocuSignDocumentSetting documentSetting,\n+      Context scriptContext,\n+      List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignDocument docuSignDocument = new DocuSignDocument();\n+    docuSignDocument.setName(documentSetting.getName());\n+    docuSignDocument.setDocumentId(documentSetting.getDocumentId());\n+    docuSignDocument.setFileExtension(documentSetting.getFileExtension());\n+    docuSignDocument.setSequence(documentSetting.getSequence());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+      if (ObjectUtils.notEmpty(documentSetting.getUnsignedMetaFileDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                documentSetting.getUnsignedMetaFileDefaultPath(), scriptContext);\n+        if (evaluation instanceof MetaFile) {\n+          MetaFile unsignedMetaFile = (MetaFile) evaluation;\n+          docuSignDocument.setUnsignedMetaFile(unsignedMetaFile);\n+        }\n+      }\n+    }\n+\n+    if (CollectionUtils.isNotEmpty(documentSetting.getDocuSignFieldSettingList())) {\n+      documentSetting\n+          .getDocuSignFieldSettingList()\n+          .forEach(\n+              fieldSetting ->\n+                  docuSignDocument.addDocuSignFieldListItem(\n+                      createDocuSignField(fieldSetting, docuSignSignerList)));\n+    }\n+    return docuSignDocument;\n+  }\n+\n+  private DocuSignField createDocuSignField(\n+      DocuSignFieldSetting docuSignFieldSetting, List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignField docuSignField = new DocuSignField();\n+    docuSignField.setName(docuSignFieldSetting.getName());\n+    docuSignField.setTypeSelect(docuSignFieldSetting.getTypeSelect());\n+    docuSignField.setValue(docuSignFieldSetting.getValue());\n+    docuSignField.setTabLabel(docuSignFieldSetting.getTabLabel());\n+    docuSignField.setPageNumber(docuSignFieldSetting.getPageNumber());\n+    docuSignField.setAnchor(docuSignFieldSetting.getAnchor());\n+    docuSignField.setAnchorUnits(docuSignFieldSetting.getAnchorUnits());\n+    docuSignField.setAnchorXOffset(docuSignFieldSetting.getAnchorXOffset());\n+    docuSignField.setAnchorYOffset(docuSignFieldSetting.getAnchorYOffset());\n+    docuSignField.setxPosition(docuSignFieldSetting.getxPosition());\n+    docuSignField.setyPosition(docuSignFieldSetting.getyPosition());\n+    docuSignField.setIsRequired(docuSignFieldSetting.getIsRequired());\n+    docuSignField.setFont(docuSignFieldSetting.getFont());\n+    docuSignField.setFontSize(docuSignFieldSetting.getFontSize());\n+    docuSignField.setFontColor(docuSignFieldSetting.getFontColor());\n+    docuSignField.setIsBold(docuSignFieldSetting.getIsBold());\n+\n+    DocuSignSigner docuSignSigner =\n+        docuSignSignerList.stream()\n+            .filter(\n+                signerItem ->\n+                    (ObjectUtils.notEmpty(docuSignFieldSetting.getDocuSignSignerSetting())\n+                        ? signerItem\n+                            .getRecipientId()\n+                            .equals(\n+                                docuSignFieldSetting.getDocuSignSignerSetting().getRecipientId())\n+                        : false))\n+            .findAny()\n+            .orElse(null);\n+    docuSignField.setDocuSignSigner(docuSignSigner);\n+\n+    if (CollectionUtils.isNotEmpty(docuSignFieldSetting.getDocuSignFieldSettingList())) {\n+      for (DocuSignFieldSetting docuSignFieldSettingChild :\n+          docuSignFieldSetting.getDocuSignFieldSettingList()) {\n+        docuSignField.addDocuSignFieldListItem(\n+            createDocuSignField(docuSignFieldSettingChild, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignField;\n+  }\n+\n+  private void checkEventNotification(\n+      EnvelopeDefinition envelopeDefinition, DocuSignEnvelopeSetting envelopeSetting)\n+      throws AxelorException {\n+\n+    EventNotification eventNotification = new EventNotification();\n+    String webhookUrl = AppSettings.get().getBaseURL() + \"/ws/public/docusign/update-envelope\";\n+\n+    eventNotification.setUrl(webhookUrl);\n+    eventNotification.setLoggingEnabled(\"true\");\n+    eventNotification.setRequireAcknowledgment(\"true\");\n+\n+    if (envelopeSetting.getCheckEnvelopeStatus()) {\n+      List<EnvelopeEvent> envelopeEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckEnvelopeStatusDelivered()) {\n+        EnvelopeEvent envelopeEventDelivered = new EnvelopeEvent();\n+        envelopeEventDelivered.setEnvelopeEventStatusCode(\"delivered\");\n+        envelopeEvents.add(envelopeEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusCompleted()) {\n+        EnvelopeEvent envelopeEventCompleted = new EnvelopeEvent();\n+        envelopeEventCompleted.setEnvelopeEventStatusCode(\"completed\");\n+        envelopeEvents.add(envelopeEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusDeclined()) {\n+        EnvelopeEvent envelopeEventDeclined = new EnvelopeEvent();\n+        envelopeEventDeclined.setEnvelopeEventStatusCode(\"declined\");\n+        envelopeEvents.add(envelopeEventDeclined);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusVoided()) {\n+        EnvelopeEvent envelopeEventVoided = new EnvelopeEvent();\n+        envelopeEventVoided.setEnvelopeEventStatusCode(\"voided\");\n+        envelopeEvents.add(envelopeEventVoided);\n+      }\n+\n+      eventNotification.setEnvelopeEvents(envelopeEvents);\n+    }\n+\n+    if (envelopeSetting.getCheckRecipientStatus()) {\n+      List<RecipientEvent> recipientEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckRecipientStatusDelivered()) {\n+        RecipientEvent recipientEventDelivered = new RecipientEvent();\n+        recipientEventDelivered.setRecipientEventStatusCode(\"delivered\");\n+        recipientEvents.add(recipientEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusCompleted()) {\n+        RecipientEvent recipientEventCompleted = new RecipientEvent();\n+        recipientEventCompleted.setRecipientEventStatusCode(\"completed\");\n+        recipientEvents.add(recipientEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusDeclined()) {\n+        RecipientEvent recipientEventDeclined = new RecipientEvent();\n+        recipientEventDeclined.setRecipientEventStatusCode(\"Declined\");\n+        recipientEvents.add(recipientEventDeclined);\n+      }\n+\n+      eventNotification.setRecipientEvents(recipientEvents);\n+    }\n+\n+    envelopeDefinition.setEventNotification(eventNotification);\n+  }\n+\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope sendEnvelope(DocuSignEnvelope docuSignEnvelope) throws AxelorException {\n+    if (ObjectUtils.notEmpty(docuSignEnvelope)\n+        && ObjectUtils.notEmpty(docuSignEnvelope.getDocuSignEnvelopeSetting())\n+        && CollectionUtils.isNotEmpty(docuSignEnvelope.getDocuSignDocumentList())) {\n+      DocuSignEnvelopeSetting envelopeSetting = docuSignEnvelope.getDocuSignEnvelopeSetting();\n+\n+      EnvelopeDefinition envelopeDefinition =\n+          createEnvelopeDefinition(envelopeSetting, docuSignEnvelope);\n+\n+      EnvelopesApi envelopesApi = getEnvelopesApi(envelopeSetting.getDocuSignAccount());\n+\n+      try {\n+        EnvelopeSummary results =\n+            envelopesApi.createEnvelope(\n+                envelopeSetting.getDocuSignAccount().getAccountId(), envelopeDefinition);\n+\n+        if (StringUtils.notEmpty(results.getEnvelopeId())) {\n+          docuSignEnvelope.setEnvelopeId(results.getEnvelopeId());\n+          docuSignEnvelope.setStatusSelect(DocuSignEnvelopeRepository.STATUS_SENT);\n+          docuSignEnvelopeRepo.save(docuSignEnvelope);\n+        } else {\n+          throw new AxelorException(\n+              TraceBackRepository.CATEGORY_INCONSISTENCY,\n+              I18n.get(IExceptionMessage.DOCUSIGN_ENVELOPE_ID_NULL));\n+        }\n+\n+      } catch (ApiException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return docuSignEnvelope;\n+  }\n+\n+  private EnvelopeDefinition createEnvelopeDefinition(\n+      DocuSignEnvelopeSetting envelopeSetting, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+\n+    EnvelopeDefinition envelopeDefinition = new EnvelopeDefinition();\n+    envelopeDefinition.setEmailSubject(envelopeSetting.getEmailSubject());\n+\n+    List<DocuSignDocument> docuSignDocumentList = docuSignEnvelope.getDocuSignDocumentList();\n+    List<Document> documentList = createDocuments(docuSignDocumentList);\n+    envelopeDefinition.setDocuments(documentList);\n+\n+    List<Signer> signerList = createSigners(docuSignEnvelope.getDocuSignSignerList());\n+    List<InPersonSigner> inPersonSignerList =\n+        createInPersonSigners(docuSignEnvelope.getDocuSignSignerList());\n+    updateSigners(signerList, inPersonSignerList, docuSignDocumentList);\n+    Recipients recipients = new Recipients();\n+    if (CollectionUtils.isNotEmpty(signerList)) {\n+      recipients.setSigners(signerList);\n+    }\n+    if (CollectionUtils.isNotEmpty(inPersonSignerList)) {\n+      recipients.setInPersonSigners(inPersonSignerList);\n+    }\n+    envelopeDefinition.setRecipients(recipients);\n+\n+    if (envelopeSetting.getActiveWebhook()) {\n+      checkEventNotification(envelopeDefinition, envelopeSetting);\n+    }\n+\n+    envelopeDefinition.setStatus(DocuSignEnvelopeRepository.STATUS_SENT);\n+\n+    return envelopeDefinition;\n+  }\n+\n+  private List<Document> createDocuments(List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+    List<Document> documentList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+      documentList = new ArrayList<>();\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (ObjectUtils.notEmpty(docuSignDocument.getUnsignedMetaFile())) {\n+          documentList.add(\n+              createDocument(docuSignDocument, docuSignDocument.getUnsignedMetaFile()));\n+        }\n+      }\n+    }\n+    return documentList;\n+  }\n+\n+  private Document createDocument(DocuSignDocument docuSignDocument, MetaFile metaFile)\n+      throws AxelorException {\n+    Document document = null;\n+\n+    if (ObjectUtils.notEmpty(docuSignDocument) && ObjectUtils.notEmpty(metaFile)) {\n+      try {\n+        document = new Document();\n+        byte[] buffer = Files.readAllBytes(MetaFiles.getPath(metaFile));\n+\n+        String docBase64 = new String(Base64.getEncoder().encode(buffer));\n+        document.setDocumentBase64(docBase64);\n+        document.setName(docuSignDocument.getName());\n+        document.setFileExtension(docuSignDocument.getFileExtension());\n+        document.setDocumentId(docuSignDocument.getDocumentId());\n+        if (ObjectUtils.notEmpty(docuSignDocument.getDocuSignEnvelope())\n+            && docuSignDocument.getDocuSignEnvelope().getIsOrderedDocuments()) {\n+          document.setOrder(String.valueOf(docuSignDocument.getSequence()));\n+        }\n+\n+      } catch (IOException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return document;\n+  }\n+\n+  private List<Signer> createSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<Signer> signerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      signerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (!docuSignSigner.getIsInPersonSigner()) {\n+          Signer signer = new Signer();\n+          signer.setRecipientId(recipientId);\n+          signer.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            signer.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            signer.setEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          signer.setName(signerPartner.getSimpleFullName());\n+\n+          signerList.add(signer);\n+        }\n+      }\n+    }\n+\n+    return signerList;\n+  }\n+\n+  private List<InPersonSigner> createInPersonSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<InPersonSigner> inPersonSignerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      inPersonSignerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (docuSignSigner.getIsInPersonSigner()) {\n+          InPersonSigner inPersonSigner = new InPersonSigner();\n+          inPersonSigner.setRecipientId(recipientId);\n+          inPersonSigner.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            inPersonSigner.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            inPersonSigner.setHostEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          inPersonSigner.setHostName(signerPartner.getSimpleFullName());\n+\n+          inPersonSignerList.add(inPersonSigner);\n+        }\n+      }\n+    }\n+\n+    return inPersonSignerList;\n+  }\n+\n+  private void updateSigners(\n+      List<Signer> signerList,\n+      List<InPersonSigner> inPersonSignerList,\n+      List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (CollectionUtils.isNotEmpty(docuSignDocument.getDocuSignFieldList())) {\n+          for (DocuSignField docuSignField : docuSignDocument.getDocuSignFieldList()) {\n+            String recipientId = docuSignField.getDocuSignSigner().getRecipientId();\n+            if (docuSignField.getDocuSignSigner().getIsInPersonSigner()) {\n+              InPersonSigner inPersonSigner = findInPersonSigner(inPersonSignerList, recipientId);\n+              if (ObjectUtils.notEmpty(inPersonSigner)) {\n+                updateInPersonSigner(inPersonSigner, docuSignField);\n+              } else {\n+                throw new AxelorException(\n+                    TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                    I18n.get(IExceptionMessage.DOCUSIGN_IN_PERSON_SIGNER_NOT_FOUND));\n+              }\n+\n+            } else {\n+              Signer signer = findSigner(signerList, recipientId);\n+              if (ObjectUtils.notEmpty(signer)) {\n+                updateSigner(signer, docuSignField);\n+              } else {\n+                throw new AxelorException(\n+                    TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                    I18n.get(IExceptionMessage.DOCUSIGN_SIGNER_NOT_FOUND));\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private InPersonSigner findInPersonSigner(\n+      List<InPersonSigner> inPersonSignerList, String recipientId) {\n+    InPersonSigner inPersonSigner = null;\n+\n+    if (CollectionUtils.isNotEmpty(inPersonSignerList) && StringUtils.notEmpty(recipientId)) {\n+      inPersonSigner =\n+          inPersonSignerList.stream()\n+              .filter(signerItem -> recipientId.equals(signerItem.getRecipientId()))\n+              .findAny()\n+              .orElse(null);\n+    }\n+\n+    return inPersonSigner;\n+  }\n+\n+  private InPersonSigner updateInPersonSigner(\n+      InPersonSigner inPersonSigner, DocuSignField docuSignField) throws AxelorException {\n+\n+    if (ObjectUtils.notEmpty(docuSignField.getDocuSignSigner())) {\n+\n+      DocuSignSigner docuSignSigner = docuSignField.getDocuSignSigner();\n+      Partner signerPartner = docuSignSigner.getSigner();\n+      Company company = docuSignSigner.getCompany();\n+      Tabs tabs = inPersonSigner.getTabs();\n+      if (ObjectUtils.isEmpty(tabs)) {\n+        tabs = new Tabs();\n+        inPersonSigner.setTabs(tabs);\n+      }\n+\n+      String documentId = docuSignField.getDocuSignDocument().getDocumentId();\n+      processItem(\n+          tabs, docuSignField, documentId, inPersonSigner.getRecipientId(), signerPartner, company);\n+    }\n+\n+    return inPersonSigner;\n+  }\n+\n+  private Signer findSigner(List<Signer> signerList, String recipientId) {\n+    Signer signer = null;\n+\n+    if (CollectionUtils.isNotEmpty(signerList) && StringUtils.notEmpty(recipientId)) {\n+      signer =\n+          signerList.stream()\n+              .filter(signerItem -> recipientId.equals(signerItem.getRecipientId()))\n+              .findAny()\n+              .orElse(null);\n+    }\n+\n+    return signer;\n+  }\n+\n+  private Signer updateSigner(Signer signer, DocuSignField docuSignField) throws AxelorException {\n+\n+    if (ObjectUtils.notEmpty(docuSignField.getDocuSignSigner())) {\n+      DocuSignSigner docuSignSigner = docuSignField.getDocuSignSigner();\n+      Partner signerPartner = docuSignSigner.getSigner();\n+      Company company = docuSignSigner.getCompany();\n+      Tabs tabs = signer.getTabs();\n+      if (ObjectUtils.isEmpty(tabs)) {\n+        tabs = new Tabs();\n+        signer.setTabs(tabs);\n+      }\n+\n+      String documentId = docuSignField.getDocuSignDocument().getDocumentId();\n+      processItem(tabs, docuSignField, documentId, signer.getRecipientId(), signerPartner, company);\n+    }\n+\n+    return signer;\n+  }\n+\n+  private void processItem(\n+      Tabs tabs,\n+      DocuSignField docuSignField,\n+      String documentId,\n+      String recipientId,\n+      Partner partner,\n+      Company company)\n+      throws AxelorException {\n+\n+    switch (docuSignField.getTypeSelect()) {\n+      case DocuSignFieldSettingRepository.TYPE_SIGN_HERE:\n+        DocuSignUtils.addSignHere(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_FULL_NAME:\n+        DocuSignUtils.addFullName(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_EMAIL:\n+        String email = null;\n+        if (ObjectUtils.notEmpty(partner) && ObjectUtils.notEmpty(partner.getEmailAddress())) {\n+          email = partner.getEmailAddress().getAddress();\n+        }\n+        DocuSignUtils.addEmail(tabs, docuSignField, documentId, recipientId, email);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_COMPANY:\n+        String companyName = null;\n+        if (ObjectUtils.notEmpty(company)) {\n+          companyName = company.getName();\n+        }\n+        DocuSignUtils.addCompany(tabs, docuSignField, documentId, recipientId, companyName);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_CHECKBOX:\n+        DocuSignUtils.addCheckbox(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_RADIO_GROUP:\n+        DocuSignUtils.addRadioGroup(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_LIST:\n+        DocuSignUtils.addList(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_APPROVE:\n+        DocuSignUtils.addApprove(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_DECLINE:\n+        DocuSignUtils.addDecline(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      default:\n+        throw new AxelorException(\n+            TraceBackRepository.CATEGORY_INCONSISTENCY,\n+            I18n.get(IExceptionMessage.DOCUSIGN_PARAM_ITEM_UNKNOWN_TYPE));\n+    }\n+  }\n+\n+  private EnvelopesApi getEnvelopesApi(DocuSignAccount docuSignAccount) throws AxelorException {\n+\n+    EnvelopesApi envelopesApi = null;\n+    if (ObjectUtils.notEmpty(docuSignAccount)) {\n+      ApiClient apiClient = new ApiClient();\n+      apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + docuSignAccount.getAccessToken());\n+      apiClient.setBasePath(docuSignAccount.getBasePath());\n+      envelopesApi = new EnvelopesApi(apiClient);\n+    } else {\n+      throw new AxelorException(\n+          TraceBackRepository.CATEGORY_INCONSISTENCY, IExceptionMessage.DOCUSIGN_ACCOUNT_EMPTY);\n+    }\n+\n+    return envelopesApi;\n+  }\n+\n+  @Transactional\n+  @Override\n+  public DocuSignEnvelope synchroniseEnvelopeStatus(DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+    DocuSignEnvelopeSetting envelopeSetting = docuSignEnvelope.getDocuSignEnvelopeSetting();\n+    if (ObjectUtils.notEmpty(envelopeSetting)) {\n+      EnvelopesApi envelopesApi = getEnvelopesApi(envelopeSetting.getDocuSignAccount());\n+\n+      String envelopeId = docuSignEnvelope.getEnvelopeId();\n+      if (StringUtils.notEmpty(envelopeId)) {\n+        try {\n+          Envelope envelope =\n+              envelopesApi.getEnvelope(\n+                  envelopeSetting.getDocuSignAccount().getAccountId(), envelopeId);\n+          String envelopeStatus = envelope.getStatus();\n+          docuSignEnvelope.setStatusSelect(envelopeStatus);\n+          LOG.debug(\"Envelope id : \" + envelopeId + \" / status : \" + envelopeStatus);\n+\n+          updateFields(envelopesApi, docuSignEnvelope);\n+          if (DocuSignEnvelopeRepository.STATUS_COMPLETED.equals(envelopeStatus)) {\n+            downloadDocumentsFile(envelopesApi, docuSignEnvelope);\n+            if (StringUtils.notEmpty(envelope.getCompletedDateTime())) {\n+              docuSignEnvelope.setCompletedDateTime(\n+                  Instant.parse(envelope.getCompletedDateTime())\n+                      .atZone(ZoneId.systemDefault())\n+                      .toLocalDateTime());\n+            }\n+          } else if (DocuSignEnvelopeRepository.STATUS_DECLINED.equals(envelopeStatus)) {\n+            if (StringUtils.notEmpty(envelope.getDeclinedDateTime())) {\n+              docuSignEnvelope.setDeclinedDateTime(\n+                  Instant.parse(envelope.getDeclinedDateTime())\n+                      .atZone(ZoneId.systemDefault())\n+                      .toLocalDateTime());\n+            }\n+          }\n+          docuSignEnvelopeRepo.save(docuSignEnvelope);\n+\n+        } catch (ApiException e) {\n+          throw new AxelorException(e, TraceBackRepository.CATEGORY_INCONSISTENCY);\n+        }\n+      }\n+\n+    } else {\n+      throw new AxelorException(\n+          TraceBackRepository.CATEGORY_INCONSISTENCY,\n+          I18n.get(IExceptionMessage.DOCUSIGN_ENVELOPE_SETTING_EMPTY));\n+    }\n+    return docuSignEnvelope;\n+  }\n+\n+  private void updateFields(EnvelopesApi envelopesApi, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+    try {\n+      List<DocuSignSigner> docuSignSigners = docuSignEnvelope.getDocuSignSignerList();\n+      if (CollectionUtils.isNotEmpty(docuSignSigners)) {\n+        for (DocuSignSigner docuSignSigner : docuSignSigners) {\n+\n+          String recipientId = docuSignSigner.getRecipientId();\n+          Tabs tabs =\n+              envelopesApi.listTabs(\n+                  docuSignEnvelope.getDocuSignEnvelopeSetting().getDocuSignAccount().getAccountId(),\n+                  docuSignEnvelope.getEnvelopeId(),\n+                  recipientId);\n+\n+          if (ObjectUtils.notEmpty(tabs)) {\n+            LOG.debug(tabs.toString());\n+          }\n+          if (CollectionUtils.isNotEmpty(docuSignSigner.getDocuSignFieldList())) {\n+            for (DocuSignField field : docuSignSigner.getDocuSignFieldList()) {\n+              updateField(field, tabs);\n+            }\n+          }\n+        }\n+      }\n+    } catch (ApiException e) {\n+      throw new AxelorException(e, TraceBackRepository.CATEGORY_INCONSISTENCY);\n+    }\n+  }\n+\n+  private void updateField(DocuSignField field, Tabs tabs) throws AxelorException {\n+    int typeSelect = field.getTypeSelect();\n+    switch (typeSelect) {\n+      case DocuSignFieldSettingRepository.TYPE_SIGN_HERE:\n+        DocuSignUtils.updateSignHereField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_FULL_NAME:\n+        DocuSignUtils.updateFullNameField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_EMAIL:\n+        DocuSignUtils.updateEmailField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_COMPANY:\n+        DocuSignUtils.updateCompanyField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_CHECKBOX:\n+        DocuSignUtils.updateCheckboxField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_RADIO_GROUP:\n+        DocuSignUtils.updateRadioGroupField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_LIST:\n+        DocuSignUtils.updateListField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_APPROVE:\n+        DocuSignUtils.updateApproveField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_DECLINE:\n+        DocuSignUtils.updateDeclineField(field, tabs);\n+        break;\n+      default:\n+        throw new AxelorException(\n+            TraceBackRepository.CATEGORY_INCONSISTENCY,\n+            I18n.get(IExceptionMessage.DOCUSIGN_PARAM_ITEM_UNKNOWN_TYPE));\n+    }\n+  }\n+\n+  private void downloadDocumentsFile(EnvelopesApi envelopesApi, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+    try {\n+      EnvelopeDocumentsResult result =\n+          envelopesApi.listDocuments(\n+              docuSignEnvelope.getDocuSignEnvelopeSetting().getDocuSignAccount().getAccountId(),\n+              docuSignEnvelope.getEnvelopeId());\n+      if (ObjectUtils.notEmpty(result)) {\n+        if (CollectionUtils.isNotEmpty(result.getEnvelopeDocuments())) {\n+          for (EnvelopeDocument doc : result.getEnvelopeDocuments()) {\n+            if (CERTIFICATE_ID.equals(doc.getDocumentId())) {\n+              if (ObjectUtils.isEmpty(docuSignEnvelope.getCertificateMetaFile())) {\n+                byte[] results =\n+                    envelopesApi.getDocument(\n+                        docuSignEnvelope\n+                            .getDocuSignEnvelopeSetting()\n+                            .getDocuSignAccount()\n+                            .getAccountId(),\n+                        docuSignEnvelope.getEnvelopeId(),\n+                        CERTIFICATE_ID);\n+                if (ObjectUtils.notEmpty(results)) {\n+                  String fileName = addExtension(CERTIFICATE_FILENAME, PDF_EXTENSION);\n+                  MetaFile certificateMetaFile =\n+                      metaFiles.upload(new ByteArrayInputStream(results), fileName);\n+                  docuSignEnvelope.setCertificateMetaFile(certificateMetaFile);\n+                }\n+              }\n+            } else {\n+              DocuSignDocument docuSignDocument =\n+                  docuSignEnvelope.getDocuSignDocumentList().stream()\n+                      .filter(d -> doc.getDocumentId().equals(d.getDocumentId()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 867}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjU2MDQ5OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyNTo1NFrOHVvUvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwODoyNTo1NFrOHVvUvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU1NzUwMg==", "bodyText": "Can these fields be null and cause a NPE ?", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492557502", "createdAt": "2020-09-22T08:25:54Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignEnvelopeServiceImpl.java", "diffHunk": "@@ -0,0 +1,902 @@\n+package com.axelor.apps.docusign.service;\n+\n+import com.axelor.app.AppSettings;\n+import com.axelor.apps.base.db.Company;\n+import com.axelor.apps.base.db.Partner;\n+import com.axelor.apps.docusign.db.DocuSignAccount;\n+import com.axelor.apps.docusign.db.DocuSignDocument;\n+import com.axelor.apps.docusign.db.DocuSignDocumentSetting;\n+import com.axelor.apps.docusign.db.DocuSignEnvelope;\n+import com.axelor.apps.docusign.db.DocuSignEnvelopeSetting;\n+import com.axelor.apps.docusign.db.DocuSignField;\n+import com.axelor.apps.docusign.db.DocuSignFieldSetting;\n+import com.axelor.apps.docusign.db.DocuSignSigner;\n+import com.axelor.apps.docusign.db.DocuSignSignerSetting;\n+import com.axelor.apps.docusign.db.repo.DocuSignEnvelopeRepository;\n+import com.axelor.apps.docusign.db.repo.DocuSignFieldSettingRepository;\n+import com.axelor.apps.docusign.exceptions.IExceptionMessage;\n+import com.axelor.apps.message.service.TemplateContextService;\n+import com.axelor.common.ObjectUtils;\n+import com.axelor.common.StringUtils;\n+import com.axelor.db.JPA;\n+import com.axelor.db.Model;\n+import com.axelor.db.mapper.Mapper;\n+import com.axelor.exception.AxelorException;\n+import com.axelor.exception.db.repo.TraceBackRepository;\n+import com.axelor.i18n.I18n;\n+import com.axelor.meta.MetaFiles;\n+import com.axelor.meta.db.MetaFile;\n+import com.axelor.meta.db.MetaModel;\n+import com.axelor.meta.schema.actions.ActionView;\n+import com.axelor.rpc.Context;\n+import com.axelor.tool.template.TemplateMaker;\n+import com.docusign.esign.api.EnvelopesApi;\n+import com.docusign.esign.client.ApiClient;\n+import com.docusign.esign.client.ApiException;\n+import com.docusign.esign.model.Document;\n+import com.docusign.esign.model.Envelope;\n+import com.docusign.esign.model.EnvelopeDefinition;\n+import com.docusign.esign.model.EnvelopeDocument;\n+import com.docusign.esign.model.EnvelopeDocumentsResult;\n+import com.docusign.esign.model.EnvelopeEvent;\n+import com.docusign.esign.model.EnvelopeSummary;\n+import com.docusign.esign.model.EventNotification;\n+import com.docusign.esign.model.InPersonSigner;\n+import com.docusign.esign.model.RecipientEvent;\n+import com.docusign.esign.model.Recipients;\n+import com.docusign.esign.model.Signer;\n+import com.docusign.esign.model.Tabs;\n+import com.google.inject.Inject;\n+import com.google.inject.persist.Transactional;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandles;\n+import java.nio.file.Files;\n+import java.time.Instant;\n+import java.time.ZoneId;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DocuSignEnvelopeServiceImpl implements DocuSignEnvelopeService {\n+\n+  private final Logger LOG = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n+\n+  protected static final char TEMPLATE_DELIMITER = '$';\n+\n+  public static final String CERTIFICATE_ID = \"certificate\";\n+  public static final String CERTIFICATE_FILENAME = \"Certificate of completion\";\n+  public static final String PDF_EXTENSION = \"pdf\";\n+\n+  protected DocuSignEnvelopeRepository docuSignEnvelopeRepo;\n+  protected TemplateContextService templateContextService;\n+  protected MetaFiles metaFiles;\n+\n+  @Inject\n+  public DocuSignEnvelopeServiceImpl(\n+      DocuSignEnvelopeRepository docuSignEnvelopeRepo,\n+      TemplateContextService templateContextService,\n+      MetaFiles metaFiles) {\n+    this.docuSignEnvelopeRepo = docuSignEnvelopeRepo;\n+    this.templateContextService = templateContextService;\n+    this.metaFiles = metaFiles;\n+  }\n+\n+  @Override\n+  public Map<String, Object> generateEnvelope(\n+      DocuSignEnvelopeSetting envelopeSetting, Long objectId) throws AxelorException {\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+    if (ObjectUtils.isEmpty(metaModel)) {\n+      return null;\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting)) {\n+\n+      DocuSignEnvelope envelope = createEnvelope(envelopeSetting, objectId);\n+\n+      return ActionView.define(\"Create envelope\")\n+          .model(DocuSignEnvelope.class.getName())\n+          .add(\"form\", \"docusign-envelope-form\")\n+          .param(\"forceEdit\", \"true\")\n+          .context(\"_showRecord\", envelope.getId().toString())\n+          .map();\n+    }\n+\n+    return null;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope createEnvelope(DocuSignEnvelopeSetting envelopeSetting, Long objectId)\n+      throws AxelorException {\n+\n+    DocuSignEnvelope envelope = new DocuSignEnvelope();\n+    envelope.setDocuSignEnvelopeSetting(envelopeSetting);\n+    envelope.setIsOrderedDocuments(envelopeSetting.getIsOrderedDocuments());\n+    envelope.setIsOrderedSigners(envelopeSetting.getIsOrderedSigners());\n+\n+    MetaModel metaModel = envelopeSetting.getMetaModel();\n+\n+    Context scriptContext = null;\n+    if (ObjectUtils.notEmpty(metaModel) && ObjectUtils.notEmpty(objectId)) {\n+      try {\n+        Class<? extends Model> modelClass =\n+            (Class<? extends Model>) Class.forName(metaModel.getFullName());\n+        Model model = JPA.find(modelClass, objectId);\n+        if (ObjectUtils.notEmpty(model)) {\n+          TemplateMaker maker =\n+              new TemplateMaker(Locale.FRENCH, TEMPLATE_DELIMITER, TEMPLATE_DELIMITER);\n+          maker.setContext(model);\n+          if (StringUtils.notEmpty(envelopeSetting.getName())) {\n+            maker.setTemplate(envelopeSetting.getName());\n+            envelope.setName(maker.make());\n+          }\n+          if (StringUtils.notEmpty(envelopeSetting.getEmailSubject())) {\n+            maker.setTemplate(envelopeSetting.getEmailSubject());\n+            envelope.setEmailSubject(maker.make());\n+          }\n+\n+          envelope.setRelatedToSelect(metaModel.getFullName());\n+          envelope.setRelatedToId(objectId);\n+          scriptContext = new Context(Mapper.toMap(model), modelClass);\n+        }\n+      } catch (ClassNotFoundException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignSignerSettingList())) {\n+      for (DocuSignSignerSetting signerSetting : envelopeSetting.getDocuSignSignerSettingList()) {\n+        envelope.addDocuSignSignerListItem(createDocuSignSigner(signerSetting, scriptContext));\n+      }\n+    }\n+\n+    List<DocuSignSigner> docuSignSignerList = envelope.getDocuSignSignerList();\n+    if (ObjectUtils.notEmpty(envelopeSetting.getDocuSignDocumentSettingList())\n+        && CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      for (DocuSignDocumentSetting documentSetting :\n+          envelopeSetting.getDocuSignDocumentSettingList()) {\n+        envelope.addDocuSignDocumentListItem(\n+            createDocuSignDocument(documentSetting, scriptContext, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignEnvelopeRepo.save(envelope);\n+  }\n+\n+  private DocuSignSigner createDocuSignSigner(\n+      DocuSignSignerSetting signerSetting, Context scriptContext) {\n+    DocuSignSigner docuSignSigner = new DocuSignSigner();\n+    docuSignSigner.setName(signerSetting.getName());\n+    docuSignSigner.setRecipientId(signerSetting.getRecipientId());\n+    docuSignSigner.setIsRequired(signerSetting.getIsRequired());\n+    docuSignSigner.setSequence(signerSetting.getSequence());\n+    docuSignSigner.setIsInPersonSigner(signerSetting.getIsInPersonSigner());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getSignerDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getSignerDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Partner signerPartner = (Partner) evaluation;\n+          docuSignSigner.setSigner(signerPartner);\n+        }\n+      }\n+\n+      if (ObjectUtils.notEmpty(signerSetting.getCompanyDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                signerSetting.getCompanyDefaultPath(), scriptContext);\n+        if (evaluation instanceof Partner) {\n+          Company company = (Company) evaluation;\n+          docuSignSigner.setCompany(company);\n+        }\n+      }\n+    }\n+\n+    return docuSignSigner;\n+  }\n+\n+  private DocuSignDocument createDocuSignDocument(\n+      DocuSignDocumentSetting documentSetting,\n+      Context scriptContext,\n+      List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignDocument docuSignDocument = new DocuSignDocument();\n+    docuSignDocument.setName(documentSetting.getName());\n+    docuSignDocument.setDocumentId(documentSetting.getDocumentId());\n+    docuSignDocument.setFileExtension(documentSetting.getFileExtension());\n+    docuSignDocument.setSequence(documentSetting.getSequence());\n+\n+    if (ObjectUtils.notEmpty(scriptContext)) {\n+      if (ObjectUtils.notEmpty(documentSetting.getUnsignedMetaFileDefaultPath())) {\n+        Object evaluation =\n+            templateContextService.computeTemplateContext(\n+                documentSetting.getUnsignedMetaFileDefaultPath(), scriptContext);\n+        if (evaluation instanceof MetaFile) {\n+          MetaFile unsignedMetaFile = (MetaFile) evaluation;\n+          docuSignDocument.setUnsignedMetaFile(unsignedMetaFile);\n+        }\n+      }\n+    }\n+\n+    if (CollectionUtils.isNotEmpty(documentSetting.getDocuSignFieldSettingList())) {\n+      documentSetting\n+          .getDocuSignFieldSettingList()\n+          .forEach(\n+              fieldSetting ->\n+                  docuSignDocument.addDocuSignFieldListItem(\n+                      createDocuSignField(fieldSetting, docuSignSignerList)));\n+    }\n+    return docuSignDocument;\n+  }\n+\n+  private DocuSignField createDocuSignField(\n+      DocuSignFieldSetting docuSignFieldSetting, List<DocuSignSigner> docuSignSignerList) {\n+    DocuSignField docuSignField = new DocuSignField();\n+    docuSignField.setName(docuSignFieldSetting.getName());\n+    docuSignField.setTypeSelect(docuSignFieldSetting.getTypeSelect());\n+    docuSignField.setValue(docuSignFieldSetting.getValue());\n+    docuSignField.setTabLabel(docuSignFieldSetting.getTabLabel());\n+    docuSignField.setPageNumber(docuSignFieldSetting.getPageNumber());\n+    docuSignField.setAnchor(docuSignFieldSetting.getAnchor());\n+    docuSignField.setAnchorUnits(docuSignFieldSetting.getAnchorUnits());\n+    docuSignField.setAnchorXOffset(docuSignFieldSetting.getAnchorXOffset());\n+    docuSignField.setAnchorYOffset(docuSignFieldSetting.getAnchorYOffset());\n+    docuSignField.setxPosition(docuSignFieldSetting.getxPosition());\n+    docuSignField.setyPosition(docuSignFieldSetting.getyPosition());\n+    docuSignField.setIsRequired(docuSignFieldSetting.getIsRequired());\n+    docuSignField.setFont(docuSignFieldSetting.getFont());\n+    docuSignField.setFontSize(docuSignFieldSetting.getFontSize());\n+    docuSignField.setFontColor(docuSignFieldSetting.getFontColor());\n+    docuSignField.setIsBold(docuSignFieldSetting.getIsBold());\n+\n+    DocuSignSigner docuSignSigner =\n+        docuSignSignerList.stream()\n+            .filter(\n+                signerItem ->\n+                    (ObjectUtils.notEmpty(docuSignFieldSetting.getDocuSignSignerSetting())\n+                        ? signerItem\n+                            .getRecipientId()\n+                            .equals(\n+                                docuSignFieldSetting.getDocuSignSignerSetting().getRecipientId())\n+                        : false))\n+            .findAny()\n+            .orElse(null);\n+    docuSignField.setDocuSignSigner(docuSignSigner);\n+\n+    if (CollectionUtils.isNotEmpty(docuSignFieldSetting.getDocuSignFieldSettingList())) {\n+      for (DocuSignFieldSetting docuSignFieldSettingChild :\n+          docuSignFieldSetting.getDocuSignFieldSettingList()) {\n+        docuSignField.addDocuSignFieldListItem(\n+            createDocuSignField(docuSignFieldSettingChild, docuSignSignerList));\n+      }\n+    }\n+\n+    return docuSignField;\n+  }\n+\n+  private void checkEventNotification(\n+      EnvelopeDefinition envelopeDefinition, DocuSignEnvelopeSetting envelopeSetting)\n+      throws AxelorException {\n+\n+    EventNotification eventNotification = new EventNotification();\n+    String webhookUrl = AppSettings.get().getBaseURL() + \"/ws/public/docusign/update-envelope\";\n+\n+    eventNotification.setUrl(webhookUrl);\n+    eventNotification.setLoggingEnabled(\"true\");\n+    eventNotification.setRequireAcknowledgment(\"true\");\n+\n+    if (envelopeSetting.getCheckEnvelopeStatus()) {\n+      List<EnvelopeEvent> envelopeEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckEnvelopeStatusDelivered()) {\n+        EnvelopeEvent envelopeEventDelivered = new EnvelopeEvent();\n+        envelopeEventDelivered.setEnvelopeEventStatusCode(\"delivered\");\n+        envelopeEvents.add(envelopeEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusCompleted()) {\n+        EnvelopeEvent envelopeEventCompleted = new EnvelopeEvent();\n+        envelopeEventCompleted.setEnvelopeEventStatusCode(\"completed\");\n+        envelopeEvents.add(envelopeEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusDeclined()) {\n+        EnvelopeEvent envelopeEventDeclined = new EnvelopeEvent();\n+        envelopeEventDeclined.setEnvelopeEventStatusCode(\"declined\");\n+        envelopeEvents.add(envelopeEventDeclined);\n+      }\n+      if (envelopeSetting.getCheckEnvelopeStatusVoided()) {\n+        EnvelopeEvent envelopeEventVoided = new EnvelopeEvent();\n+        envelopeEventVoided.setEnvelopeEventStatusCode(\"voided\");\n+        envelopeEvents.add(envelopeEventVoided);\n+      }\n+\n+      eventNotification.setEnvelopeEvents(envelopeEvents);\n+    }\n+\n+    if (envelopeSetting.getCheckRecipientStatus()) {\n+      List<RecipientEvent> recipientEvents = new ArrayList<>();\n+\n+      if (envelopeSetting.getCheckRecipientStatusDelivered()) {\n+        RecipientEvent recipientEventDelivered = new RecipientEvent();\n+        recipientEventDelivered.setRecipientEventStatusCode(\"delivered\");\n+        recipientEvents.add(recipientEventDelivered);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusCompleted()) {\n+        RecipientEvent recipientEventCompleted = new RecipientEvent();\n+        recipientEventCompleted.setRecipientEventStatusCode(\"completed\");\n+        recipientEvents.add(recipientEventCompleted);\n+      }\n+      if (envelopeSetting.getCheckRecipientStatusDeclined()) {\n+        RecipientEvent recipientEventDeclined = new RecipientEvent();\n+        recipientEventDeclined.setRecipientEventStatusCode(\"Declined\");\n+        recipientEvents.add(recipientEventDeclined);\n+      }\n+\n+      eventNotification.setRecipientEvents(recipientEvents);\n+    }\n+\n+    envelopeDefinition.setEventNotification(eventNotification);\n+  }\n+\n+  @Override\n+  @Transactional(rollbackOn = {AxelorException.class, Exception.class})\n+  public DocuSignEnvelope sendEnvelope(DocuSignEnvelope docuSignEnvelope) throws AxelorException {\n+    if (ObjectUtils.notEmpty(docuSignEnvelope)\n+        && ObjectUtils.notEmpty(docuSignEnvelope.getDocuSignEnvelopeSetting())\n+        && CollectionUtils.isNotEmpty(docuSignEnvelope.getDocuSignDocumentList())) {\n+      DocuSignEnvelopeSetting envelopeSetting = docuSignEnvelope.getDocuSignEnvelopeSetting();\n+\n+      EnvelopeDefinition envelopeDefinition =\n+          createEnvelopeDefinition(envelopeSetting, docuSignEnvelope);\n+\n+      EnvelopesApi envelopesApi = getEnvelopesApi(envelopeSetting.getDocuSignAccount());\n+\n+      try {\n+        EnvelopeSummary results =\n+            envelopesApi.createEnvelope(\n+                envelopeSetting.getDocuSignAccount().getAccountId(), envelopeDefinition);\n+\n+        if (StringUtils.notEmpty(results.getEnvelopeId())) {\n+          docuSignEnvelope.setEnvelopeId(results.getEnvelopeId());\n+          docuSignEnvelope.setStatusSelect(DocuSignEnvelopeRepository.STATUS_SENT);\n+          docuSignEnvelopeRepo.save(docuSignEnvelope);\n+        } else {\n+          throw new AxelorException(\n+              TraceBackRepository.CATEGORY_INCONSISTENCY,\n+              I18n.get(IExceptionMessage.DOCUSIGN_ENVELOPE_ID_NULL));\n+        }\n+\n+      } catch (ApiException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return docuSignEnvelope;\n+  }\n+\n+  private EnvelopeDefinition createEnvelopeDefinition(\n+      DocuSignEnvelopeSetting envelopeSetting, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+\n+    EnvelopeDefinition envelopeDefinition = new EnvelopeDefinition();\n+    envelopeDefinition.setEmailSubject(envelopeSetting.getEmailSubject());\n+\n+    List<DocuSignDocument> docuSignDocumentList = docuSignEnvelope.getDocuSignDocumentList();\n+    List<Document> documentList = createDocuments(docuSignDocumentList);\n+    envelopeDefinition.setDocuments(documentList);\n+\n+    List<Signer> signerList = createSigners(docuSignEnvelope.getDocuSignSignerList());\n+    List<InPersonSigner> inPersonSignerList =\n+        createInPersonSigners(docuSignEnvelope.getDocuSignSignerList());\n+    updateSigners(signerList, inPersonSignerList, docuSignDocumentList);\n+    Recipients recipients = new Recipients();\n+    if (CollectionUtils.isNotEmpty(signerList)) {\n+      recipients.setSigners(signerList);\n+    }\n+    if (CollectionUtils.isNotEmpty(inPersonSignerList)) {\n+      recipients.setInPersonSigners(inPersonSignerList);\n+    }\n+    envelopeDefinition.setRecipients(recipients);\n+\n+    if (envelopeSetting.getActiveWebhook()) {\n+      checkEventNotification(envelopeDefinition, envelopeSetting);\n+    }\n+\n+    envelopeDefinition.setStatus(DocuSignEnvelopeRepository.STATUS_SENT);\n+\n+    return envelopeDefinition;\n+  }\n+\n+  private List<Document> createDocuments(List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+    List<Document> documentList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+      documentList = new ArrayList<>();\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (ObjectUtils.notEmpty(docuSignDocument.getUnsignedMetaFile())) {\n+          documentList.add(\n+              createDocument(docuSignDocument, docuSignDocument.getUnsignedMetaFile()));\n+        }\n+      }\n+    }\n+    return documentList;\n+  }\n+\n+  private Document createDocument(DocuSignDocument docuSignDocument, MetaFile metaFile)\n+      throws AxelorException {\n+    Document document = null;\n+\n+    if (ObjectUtils.notEmpty(docuSignDocument) && ObjectUtils.notEmpty(metaFile)) {\n+      try {\n+        document = new Document();\n+        byte[] buffer = Files.readAllBytes(MetaFiles.getPath(metaFile));\n+\n+        String docBase64 = new String(Base64.getEncoder().encode(buffer));\n+        document.setDocumentBase64(docBase64);\n+        document.setName(docuSignDocument.getName());\n+        document.setFileExtension(docuSignDocument.getFileExtension());\n+        document.setDocumentId(docuSignDocument.getDocumentId());\n+        if (ObjectUtils.notEmpty(docuSignDocument.getDocuSignEnvelope())\n+            && docuSignDocument.getDocuSignEnvelope().getIsOrderedDocuments()) {\n+          document.setOrder(String.valueOf(docuSignDocument.getSequence()));\n+        }\n+\n+      } catch (IOException e) {\n+        throw new AxelorException(e, TraceBackRepository.CATEGORY_CONFIGURATION_ERROR);\n+      }\n+    }\n+\n+    return document;\n+  }\n+\n+  private List<Signer> createSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<Signer> signerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      signerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (!docuSignSigner.getIsInPersonSigner()) {\n+          Signer signer = new Signer();\n+          signer.setRecipientId(recipientId);\n+          signer.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            signer.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            signer.setEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          signer.setName(signerPartner.getSimpleFullName());\n+\n+          signerList.add(signer);\n+        }\n+      }\n+    }\n+\n+    return signerList;\n+  }\n+\n+  private List<InPersonSigner> createInPersonSigners(List<DocuSignSigner> docuSignSignerList)\n+      throws AxelorException {\n+    List<InPersonSigner> inPersonSignerList = null;\n+\n+    if (CollectionUtils.isNotEmpty(docuSignSignerList)) {\n+      inPersonSignerList = new ArrayList<>();\n+\n+      for (DocuSignSigner docuSignSigner : docuSignSignerList) {\n+        Partner signerPartner = docuSignSigner.getSigner();\n+        String recipientId = docuSignSigner.getRecipientId();\n+\n+        if (docuSignSigner.getIsInPersonSigner()) {\n+          InPersonSigner inPersonSigner = new InPersonSigner();\n+          inPersonSigner.setRecipientId(recipientId);\n+          inPersonSigner.setAccessCode(docuSignSigner.getAccessCode());\n+          if (ObjectUtils.notEmpty(\n+                  docuSignSigner.getDocuSignEnvelope().getDocuSignEnvelopeSetting())\n+              && docuSignSigner\n+                  .getDocuSignEnvelope()\n+                  .getDocuSignEnvelopeSetting()\n+                  .getIsOrderedSigners()) {\n+            inPersonSigner.setRoutingOrder(String.valueOf(docuSignSigner.getSequence() + 1));\n+          }\n+          if (ObjectUtils.notEmpty(signerPartner.getEmailAddress())) {\n+            inPersonSigner.setHostEmail(signerPartner.getEmailAddress().getAddress());\n+          } else {\n+            throw new AxelorException(\n+                TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                I18n.get(IExceptionMessage.DOCUSIGN_EMAIL_ADDRESS_EMPTY));\n+          }\n+          inPersonSigner.setHostName(signerPartner.getSimpleFullName());\n+\n+          inPersonSignerList.add(inPersonSigner);\n+        }\n+      }\n+    }\n+\n+    return inPersonSignerList;\n+  }\n+\n+  private void updateSigners(\n+      List<Signer> signerList,\n+      List<InPersonSigner> inPersonSignerList,\n+      List<DocuSignDocument> docuSignDocumentList)\n+      throws AxelorException {\n+\n+    if (CollectionUtils.isNotEmpty(docuSignDocumentList)) {\n+\n+      for (DocuSignDocument docuSignDocument : docuSignDocumentList) {\n+\n+        if (CollectionUtils.isNotEmpty(docuSignDocument.getDocuSignFieldList())) {\n+          for (DocuSignField docuSignField : docuSignDocument.getDocuSignFieldList()) {\n+            String recipientId = docuSignField.getDocuSignSigner().getRecipientId();\n+            if (docuSignField.getDocuSignSigner().getIsInPersonSigner()) {\n+              InPersonSigner inPersonSigner = findInPersonSigner(inPersonSignerList, recipientId);\n+              if (ObjectUtils.notEmpty(inPersonSigner)) {\n+                updateInPersonSigner(inPersonSigner, docuSignField);\n+              } else {\n+                throw new AxelorException(\n+                    TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                    I18n.get(IExceptionMessage.DOCUSIGN_IN_PERSON_SIGNER_NOT_FOUND));\n+              }\n+\n+            } else {\n+              Signer signer = findSigner(signerList, recipientId);\n+              if (ObjectUtils.notEmpty(signer)) {\n+                updateSigner(signer, docuSignField);\n+              } else {\n+                throw new AxelorException(\n+                    TraceBackRepository.CATEGORY_INCONSISTENCY,\n+                    I18n.get(IExceptionMessage.DOCUSIGN_SIGNER_NOT_FOUND));\n+              }\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+\n+  private InPersonSigner findInPersonSigner(\n+      List<InPersonSigner> inPersonSignerList, String recipientId) {\n+    InPersonSigner inPersonSigner = null;\n+\n+    if (CollectionUtils.isNotEmpty(inPersonSignerList) && StringUtils.notEmpty(recipientId)) {\n+      inPersonSigner =\n+          inPersonSignerList.stream()\n+              .filter(signerItem -> recipientId.equals(signerItem.getRecipientId()))\n+              .findAny()\n+              .orElse(null);\n+    }\n+\n+    return inPersonSigner;\n+  }\n+\n+  private InPersonSigner updateInPersonSigner(\n+      InPersonSigner inPersonSigner, DocuSignField docuSignField) throws AxelorException {\n+\n+    if (ObjectUtils.notEmpty(docuSignField.getDocuSignSigner())) {\n+\n+      DocuSignSigner docuSignSigner = docuSignField.getDocuSignSigner();\n+      Partner signerPartner = docuSignSigner.getSigner();\n+      Company company = docuSignSigner.getCompany();\n+      Tabs tabs = inPersonSigner.getTabs();\n+      if (ObjectUtils.isEmpty(tabs)) {\n+        tabs = new Tabs();\n+        inPersonSigner.setTabs(tabs);\n+      }\n+\n+      String documentId = docuSignField.getDocuSignDocument().getDocumentId();\n+      processItem(\n+          tabs, docuSignField, documentId, inPersonSigner.getRecipientId(), signerPartner, company);\n+    }\n+\n+    return inPersonSigner;\n+  }\n+\n+  private Signer findSigner(List<Signer> signerList, String recipientId) {\n+    Signer signer = null;\n+\n+    if (CollectionUtils.isNotEmpty(signerList) && StringUtils.notEmpty(recipientId)) {\n+      signer =\n+          signerList.stream()\n+              .filter(signerItem -> recipientId.equals(signerItem.getRecipientId()))\n+              .findAny()\n+              .orElse(null);\n+    }\n+\n+    return signer;\n+  }\n+\n+  private Signer updateSigner(Signer signer, DocuSignField docuSignField) throws AxelorException {\n+\n+    if (ObjectUtils.notEmpty(docuSignField.getDocuSignSigner())) {\n+      DocuSignSigner docuSignSigner = docuSignField.getDocuSignSigner();\n+      Partner signerPartner = docuSignSigner.getSigner();\n+      Company company = docuSignSigner.getCompany();\n+      Tabs tabs = signer.getTabs();\n+      if (ObjectUtils.isEmpty(tabs)) {\n+        tabs = new Tabs();\n+        signer.setTabs(tabs);\n+      }\n+\n+      String documentId = docuSignField.getDocuSignDocument().getDocumentId();\n+      processItem(tabs, docuSignField, documentId, signer.getRecipientId(), signerPartner, company);\n+    }\n+\n+    return signer;\n+  }\n+\n+  private void processItem(\n+      Tabs tabs,\n+      DocuSignField docuSignField,\n+      String documentId,\n+      String recipientId,\n+      Partner partner,\n+      Company company)\n+      throws AxelorException {\n+\n+    switch (docuSignField.getTypeSelect()) {\n+      case DocuSignFieldSettingRepository.TYPE_SIGN_HERE:\n+        DocuSignUtils.addSignHere(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_FULL_NAME:\n+        DocuSignUtils.addFullName(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_EMAIL:\n+        String email = null;\n+        if (ObjectUtils.notEmpty(partner) && ObjectUtils.notEmpty(partner.getEmailAddress())) {\n+          email = partner.getEmailAddress().getAddress();\n+        }\n+        DocuSignUtils.addEmail(tabs, docuSignField, documentId, recipientId, email);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_COMPANY:\n+        String companyName = null;\n+        if (ObjectUtils.notEmpty(company)) {\n+          companyName = company.getName();\n+        }\n+        DocuSignUtils.addCompany(tabs, docuSignField, documentId, recipientId, companyName);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_CHECKBOX:\n+        DocuSignUtils.addCheckbox(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_RADIO_GROUP:\n+        DocuSignUtils.addRadioGroup(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_LIST:\n+        DocuSignUtils.addList(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_APPROVE:\n+        DocuSignUtils.addApprove(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_DECLINE:\n+        DocuSignUtils.addDecline(tabs, docuSignField, documentId, recipientId);\n+        break;\n+      default:\n+        throw new AxelorException(\n+            TraceBackRepository.CATEGORY_INCONSISTENCY,\n+            I18n.get(IExceptionMessage.DOCUSIGN_PARAM_ITEM_UNKNOWN_TYPE));\n+    }\n+  }\n+\n+  private EnvelopesApi getEnvelopesApi(DocuSignAccount docuSignAccount) throws AxelorException {\n+\n+    EnvelopesApi envelopesApi = null;\n+    if (ObjectUtils.notEmpty(docuSignAccount)) {\n+      ApiClient apiClient = new ApiClient();\n+      apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + docuSignAccount.getAccessToken());\n+      apiClient.setBasePath(docuSignAccount.getBasePath());\n+      envelopesApi = new EnvelopesApi(apiClient);\n+    } else {\n+      throw new AxelorException(\n+          TraceBackRepository.CATEGORY_INCONSISTENCY, IExceptionMessage.DOCUSIGN_ACCOUNT_EMPTY);\n+    }\n+\n+    return envelopesApi;\n+  }\n+\n+  @Transactional\n+  @Override\n+  public DocuSignEnvelope synchroniseEnvelopeStatus(DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+    DocuSignEnvelopeSetting envelopeSetting = docuSignEnvelope.getDocuSignEnvelopeSetting();\n+    if (ObjectUtils.notEmpty(envelopeSetting)) {\n+      EnvelopesApi envelopesApi = getEnvelopesApi(envelopeSetting.getDocuSignAccount());\n+\n+      String envelopeId = docuSignEnvelope.getEnvelopeId();\n+      if (StringUtils.notEmpty(envelopeId)) {\n+        try {\n+          Envelope envelope =\n+              envelopesApi.getEnvelope(\n+                  envelopeSetting.getDocuSignAccount().getAccountId(), envelopeId);\n+          String envelopeStatus = envelope.getStatus();\n+          docuSignEnvelope.setStatusSelect(envelopeStatus);\n+          LOG.debug(\"Envelope id : \" + envelopeId + \" / status : \" + envelopeStatus);\n+\n+          updateFields(envelopesApi, docuSignEnvelope);\n+          if (DocuSignEnvelopeRepository.STATUS_COMPLETED.equals(envelopeStatus)) {\n+            downloadDocumentsFile(envelopesApi, docuSignEnvelope);\n+            if (StringUtils.notEmpty(envelope.getCompletedDateTime())) {\n+              docuSignEnvelope.setCompletedDateTime(\n+                  Instant.parse(envelope.getCompletedDateTime())\n+                      .atZone(ZoneId.systemDefault())\n+                      .toLocalDateTime());\n+            }\n+          } else if (DocuSignEnvelopeRepository.STATUS_DECLINED.equals(envelopeStatus)) {\n+            if (StringUtils.notEmpty(envelope.getDeclinedDateTime())) {\n+              docuSignEnvelope.setDeclinedDateTime(\n+                  Instant.parse(envelope.getDeclinedDateTime())\n+                      .atZone(ZoneId.systemDefault())\n+                      .toLocalDateTime());\n+            }\n+          }\n+          docuSignEnvelopeRepo.save(docuSignEnvelope);\n+\n+        } catch (ApiException e) {\n+          throw new AxelorException(e, TraceBackRepository.CATEGORY_INCONSISTENCY);\n+        }\n+      }\n+\n+    } else {\n+      throw new AxelorException(\n+          TraceBackRepository.CATEGORY_INCONSISTENCY,\n+          I18n.get(IExceptionMessage.DOCUSIGN_ENVELOPE_SETTING_EMPTY));\n+    }\n+    return docuSignEnvelope;\n+  }\n+\n+  private void updateFields(EnvelopesApi envelopesApi, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+    try {\n+      List<DocuSignSigner> docuSignSigners = docuSignEnvelope.getDocuSignSignerList();\n+      if (CollectionUtils.isNotEmpty(docuSignSigners)) {\n+        for (DocuSignSigner docuSignSigner : docuSignSigners) {\n+\n+          String recipientId = docuSignSigner.getRecipientId();\n+          Tabs tabs =\n+              envelopesApi.listTabs(\n+                  docuSignEnvelope.getDocuSignEnvelopeSetting().getDocuSignAccount().getAccountId(),\n+                  docuSignEnvelope.getEnvelopeId(),\n+                  recipientId);\n+\n+          if (ObjectUtils.notEmpty(tabs)) {\n+            LOG.debug(tabs.toString());\n+          }\n+          if (CollectionUtils.isNotEmpty(docuSignSigner.getDocuSignFieldList())) {\n+            for (DocuSignField field : docuSignSigner.getDocuSignFieldList()) {\n+              updateField(field, tabs);\n+            }\n+          }\n+        }\n+      }\n+    } catch (ApiException e) {\n+      throw new AxelorException(e, TraceBackRepository.CATEGORY_INCONSISTENCY);\n+    }\n+  }\n+\n+  private void updateField(DocuSignField field, Tabs tabs) throws AxelorException {\n+    int typeSelect = field.getTypeSelect();\n+    switch (typeSelect) {\n+      case DocuSignFieldSettingRepository.TYPE_SIGN_HERE:\n+        DocuSignUtils.updateSignHereField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_FULL_NAME:\n+        DocuSignUtils.updateFullNameField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_EMAIL:\n+        DocuSignUtils.updateEmailField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_COMPANY:\n+        DocuSignUtils.updateCompanyField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_CHECKBOX:\n+        DocuSignUtils.updateCheckboxField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_RADIO_GROUP:\n+        DocuSignUtils.updateRadioGroupField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_LIST:\n+        DocuSignUtils.updateListField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_APPROVE:\n+        DocuSignUtils.updateApproveField(field, tabs);\n+        break;\n+      case DocuSignFieldSettingRepository.TYPE_DECLINE:\n+        DocuSignUtils.updateDeclineField(field, tabs);\n+        break;\n+      default:\n+        throw new AxelorException(\n+            TraceBackRepository.CATEGORY_INCONSISTENCY,\n+            I18n.get(IExceptionMessage.DOCUSIGN_PARAM_ITEM_UNKNOWN_TYPE));\n+    }\n+  }\n+\n+  private void downloadDocumentsFile(EnvelopesApi envelopesApi, DocuSignEnvelope docuSignEnvelope)\n+      throws AxelorException {\n+    try {\n+      EnvelopeDocumentsResult result =\n+          envelopesApi.listDocuments(\n+              docuSignEnvelope.getDocuSignEnvelopeSetting().getDocuSignAccount().getAccountId(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 842}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjcyNjU5OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTowNjo0OVrOHVw4tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTowNjo0OVrOHVw4tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4MzA5Mw==", "bodyText": "does this commented code need to be used ? If not please remove it.", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492583093", "createdAt": "2020-09-22T09:06:49Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignUtils.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package com.axelor.apps.docusign.service;\n+\n+import com.axelor.apps.docusign.db.DocuSignField;\n+import com.axelor.common.ObjectUtils;\n+import com.axelor.common.StringUtils;\n+import com.docusign.esign.model.Approve;\n+import com.docusign.esign.model.Checkbox;\n+import com.docusign.esign.model.Company;\n+import com.docusign.esign.model.Decline;\n+import com.docusign.esign.model.Email;\n+import com.docusign.esign.model.FullName;\n+import com.docusign.esign.model.List;\n+import com.docusign.esign.model.ListItem;\n+import com.docusign.esign.model.Radio;\n+import com.docusign.esign.model.RadioGroup;\n+import com.docusign.esign.model.SignHere;\n+import com.docusign.esign.model.Tabs;\n+import java.util.ArrayList;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+public class DocuSignUtils {\n+\n+  public static void addSignHere(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    SignHere signHere = new SignHere();\n+    signHere.setName(docuSignField.getName());\n+    signHere.setDocumentId(documentId);\n+    signHere.setPageNumber(docuSignField.getPageNumber());\n+    signHere.setRecipientId(recipientId);\n+    signHere.setTabLabel(docuSignField.getTabLabel());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      signHere.setAnchorString(docuSignField.getAnchor());\n+      signHere.setAnchorUnits(docuSignField.getAnchorUnits());\n+      signHere.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      signHere.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      signHere.setXPosition(docuSignField.getxPosition());\n+      signHere.setYPosition(docuSignField.getyPosition());\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getSignHereTabs())) {\n+      tabs.setSignHereTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getSignHereTabs().add(signHere);\n+  }\n+\n+  public static void addFullName(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    FullName fullName = new FullName();\n+    fullName.setName(docuSignField.getName());\n+    fullName.setDocumentId(documentId);\n+    fullName.setRecipientId(recipientId);\n+    fullName.setPageNumber(docuSignField.getPageNumber());\n+    fullName.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      fullName.setBold(\"true\");\n+    }\n+    fullName.setFontColor(docuSignField.getFontColor());\n+    fullName.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      fullName.setAnchorString(docuSignField.getAnchor());\n+      fullName.setAnchorUnits(docuSignField.getAnchorUnits());\n+      fullName.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      fullName.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      fullName.setXPosition(docuSignField.getxPosition());\n+      fullName.setYPosition(docuSignField.getyPosition());\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getFullNameTabs())) {\n+      tabs.setFullNameTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getFullNameTabs().add(fullName);\n+  }\n+\n+  public static void addEmail(\n+      Tabs tabs,\n+      DocuSignField docuSignField,\n+      String documentId,\n+      String recipientId,\n+      String emailValue) {\n+    Email email = new Email();\n+    email.setName(docuSignField.getName());\n+    email.setValue(emailValue);\n+    email.setDocumentId(documentId);\n+    email.setRecipientId(recipientId);\n+    email.setPageNumber(docuSignField.getPageNumber());\n+    email.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      email.setBold(\"true\");\n+    }\n+    email.setFontColor(docuSignField.getFontColor());\n+    email.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      email.setAnchorString(docuSignField.getAnchor());\n+      email.setAnchorUnits(docuSignField.getAnchorUnits());\n+      email.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      email.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      email.setXPosition(docuSignField.getxPosition());\n+      email.setYPosition(docuSignField.getyPosition());\n+    }\n+    if (docuSignField.getIsRequired()) {\n+      email.setRequired(\"true\");\n+    } else {\n+      email.setRequired(\"false\");\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getEmailTabs())) {\n+      tabs.setEmailTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getEmailTabs().add(email);\n+  }\n+\n+  public static void addCompany(\n+      Tabs tabs,\n+      DocuSignField docuSignField,\n+      String documentId,\n+      String recipientId,\n+      String companyName) {\n+    Company company = new Company();\n+    company.setName(docuSignField.getName());\n+    company.setValue(companyName);\n+    company.setDocumentId(documentId);\n+    company.setRecipientId(recipientId);\n+    company.setPageNumber(docuSignField.getPageNumber());\n+    company.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      company.setBold(\"true\");\n+    }\n+    company.setFontColor(docuSignField.getFontColor());\n+    company.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      company.setAnchorString(docuSignField.getAnchor());\n+      company.setAnchorUnits(docuSignField.getAnchorUnits());\n+      company.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      company.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      company.setXPosition(docuSignField.getxPosition());\n+      company.setYPosition(docuSignField.getyPosition());\n+    }\n+    if (docuSignField.getIsRequired()) {\n+      company.setRequired(\"true\");\n+    } else {\n+      company.setRequired(\"false\");\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getCompanyTabs())) {\n+      tabs.setCompanyTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getCompanyTabs().add(company);\n+  }\n+\n+  public static void addList(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    List list = new List();\n+    list.setDocumentId(documentId);\n+    list.setRecipientId(recipientId);\n+    list.setPageNumber(docuSignField.getPageNumber());\n+    list.setTabLabel(docuSignField.getTabLabel());\n+    list.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      list.setBold(\"true\");\n+    }\n+    list.setFontColor(docuSignField.getFontColor());\n+    list.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      list.setAnchorString(docuSignField.getAnchor());\n+      list.setAnchorUnits(docuSignField.getAnchorUnits());\n+      list.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      list.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      list.setXPosition(docuSignField.getxPosition());\n+      list.setYPosition(docuSignField.getyPosition());\n+    }\n+    if (docuSignField.getIsRequired()) {\n+      list.setRequired(\"true\");\n+    } else {\n+      list.setRequired(\"false\");\n+    }\n+\n+    if (CollectionUtils.isNotEmpty(docuSignField.getDocuSignFieldList())) {\n+      java.util.List<ListItem> listItemList = new ArrayList<>();\n+      for (DocuSignField fieldChild : docuSignField.getDocuSignFieldList()) {\n+        ListItem item = new ListItem();\n+        item.setText(fieldChild.getName());\n+        item.setValue(fieldChild.getValue());\n+\n+        listItemList.add(item);\n+      }\n+      list.setListItems(listItemList);\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getListTabs())) {\n+      tabs.setListTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getListTabs().add(list);\n+  }\n+\n+  public static void addCheckbox(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    Checkbox checkbox = new Checkbox();\n+    checkbox.setName(docuSignField.getName());\n+    checkbox.setDocumentId(documentId);\n+    checkbox.setRecipientId(recipientId);\n+    checkbox.setPageNumber(docuSignField.getPageNumber());\n+    /*checkbox.setFont(fieldSetting.getFont());\n+    if (fieldSetting.getIsBold()) {\n+      checkbox.setBold(\"true\");\n+    }\n+    checkbox.setFontColor(fieldSetting.getFontColor());\n+    checkbox.setFontSize(fieldSetting.getFontSize());*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjgyMjU0OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTozMDo0NlrOHVxyFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTozMDo0NlrOHVxyFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU5Nzc4Mg==", "bodyText": "if documentId is nullable, we will have a NPE here.", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492597782", "createdAt": "2020-09-22T09:30:46Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/service/DocuSignUtils.java", "diffHunk": "@@ -0,0 +1,497 @@\n+package com.axelor.apps.docusign.service;\n+\n+import com.axelor.apps.docusign.db.DocuSignField;\n+import com.axelor.common.ObjectUtils;\n+import com.axelor.common.StringUtils;\n+import com.docusign.esign.model.Approve;\n+import com.docusign.esign.model.Checkbox;\n+import com.docusign.esign.model.Company;\n+import com.docusign.esign.model.Decline;\n+import com.docusign.esign.model.Email;\n+import com.docusign.esign.model.FullName;\n+import com.docusign.esign.model.List;\n+import com.docusign.esign.model.ListItem;\n+import com.docusign.esign.model.Radio;\n+import com.docusign.esign.model.RadioGroup;\n+import com.docusign.esign.model.SignHere;\n+import com.docusign.esign.model.Tabs;\n+import java.util.ArrayList;\n+import org.apache.commons.collections.CollectionUtils;\n+\n+public class DocuSignUtils {\n+\n+  public static void addSignHere(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    SignHere signHere = new SignHere();\n+    signHere.setName(docuSignField.getName());\n+    signHere.setDocumentId(documentId);\n+    signHere.setPageNumber(docuSignField.getPageNumber());\n+    signHere.setRecipientId(recipientId);\n+    signHere.setTabLabel(docuSignField.getTabLabel());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      signHere.setAnchorString(docuSignField.getAnchor());\n+      signHere.setAnchorUnits(docuSignField.getAnchorUnits());\n+      signHere.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      signHere.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      signHere.setXPosition(docuSignField.getxPosition());\n+      signHere.setYPosition(docuSignField.getyPosition());\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getSignHereTabs())) {\n+      tabs.setSignHereTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getSignHereTabs().add(signHere);\n+  }\n+\n+  public static void addFullName(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    FullName fullName = new FullName();\n+    fullName.setName(docuSignField.getName());\n+    fullName.setDocumentId(documentId);\n+    fullName.setRecipientId(recipientId);\n+    fullName.setPageNumber(docuSignField.getPageNumber());\n+    fullName.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      fullName.setBold(\"true\");\n+    }\n+    fullName.setFontColor(docuSignField.getFontColor());\n+    fullName.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      fullName.setAnchorString(docuSignField.getAnchor());\n+      fullName.setAnchorUnits(docuSignField.getAnchorUnits());\n+      fullName.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      fullName.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      fullName.setXPosition(docuSignField.getxPosition());\n+      fullName.setYPosition(docuSignField.getyPosition());\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getFullNameTabs())) {\n+      tabs.setFullNameTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getFullNameTabs().add(fullName);\n+  }\n+\n+  public static void addEmail(\n+      Tabs tabs,\n+      DocuSignField docuSignField,\n+      String documentId,\n+      String recipientId,\n+      String emailValue) {\n+    Email email = new Email();\n+    email.setName(docuSignField.getName());\n+    email.setValue(emailValue);\n+    email.setDocumentId(documentId);\n+    email.setRecipientId(recipientId);\n+    email.setPageNumber(docuSignField.getPageNumber());\n+    email.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      email.setBold(\"true\");\n+    }\n+    email.setFontColor(docuSignField.getFontColor());\n+    email.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      email.setAnchorString(docuSignField.getAnchor());\n+      email.setAnchorUnits(docuSignField.getAnchorUnits());\n+      email.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      email.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      email.setXPosition(docuSignField.getxPosition());\n+      email.setYPosition(docuSignField.getyPosition());\n+    }\n+    if (docuSignField.getIsRequired()) {\n+      email.setRequired(\"true\");\n+    } else {\n+      email.setRequired(\"false\");\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getEmailTabs())) {\n+      tabs.setEmailTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getEmailTabs().add(email);\n+  }\n+\n+  public static void addCompany(\n+      Tabs tabs,\n+      DocuSignField docuSignField,\n+      String documentId,\n+      String recipientId,\n+      String companyName) {\n+    Company company = new Company();\n+    company.setName(docuSignField.getName());\n+    company.setValue(companyName);\n+    company.setDocumentId(documentId);\n+    company.setRecipientId(recipientId);\n+    company.setPageNumber(docuSignField.getPageNumber());\n+    company.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      company.setBold(\"true\");\n+    }\n+    company.setFontColor(docuSignField.getFontColor());\n+    company.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      company.setAnchorString(docuSignField.getAnchor());\n+      company.setAnchorUnits(docuSignField.getAnchorUnits());\n+      company.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      company.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      company.setXPosition(docuSignField.getxPosition());\n+      company.setYPosition(docuSignField.getyPosition());\n+    }\n+    if (docuSignField.getIsRequired()) {\n+      company.setRequired(\"true\");\n+    } else {\n+      company.setRequired(\"false\");\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getCompanyTabs())) {\n+      tabs.setCompanyTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getCompanyTabs().add(company);\n+  }\n+\n+  public static void addList(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    List list = new List();\n+    list.setDocumentId(documentId);\n+    list.setRecipientId(recipientId);\n+    list.setPageNumber(docuSignField.getPageNumber());\n+    list.setTabLabel(docuSignField.getTabLabel());\n+    list.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      list.setBold(\"true\");\n+    }\n+    list.setFontColor(docuSignField.getFontColor());\n+    list.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      list.setAnchorString(docuSignField.getAnchor());\n+      list.setAnchorUnits(docuSignField.getAnchorUnits());\n+      list.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      list.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      list.setXPosition(docuSignField.getxPosition());\n+      list.setYPosition(docuSignField.getyPosition());\n+    }\n+    if (docuSignField.getIsRequired()) {\n+      list.setRequired(\"true\");\n+    } else {\n+      list.setRequired(\"false\");\n+    }\n+\n+    if (CollectionUtils.isNotEmpty(docuSignField.getDocuSignFieldList())) {\n+      java.util.List<ListItem> listItemList = new ArrayList<>();\n+      for (DocuSignField fieldChild : docuSignField.getDocuSignFieldList()) {\n+        ListItem item = new ListItem();\n+        item.setText(fieldChild.getName());\n+        item.setValue(fieldChild.getValue());\n+\n+        listItemList.add(item);\n+      }\n+      list.setListItems(listItemList);\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getListTabs())) {\n+      tabs.setListTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getListTabs().add(list);\n+  }\n+\n+  public static void addCheckbox(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    Checkbox checkbox = new Checkbox();\n+    checkbox.setName(docuSignField.getName());\n+    checkbox.setDocumentId(documentId);\n+    checkbox.setRecipientId(recipientId);\n+    checkbox.setPageNumber(docuSignField.getPageNumber());\n+    /*checkbox.setFont(fieldSetting.getFont());\n+    if (fieldSetting.getIsBold()) {\n+      checkbox.setBold(\"true\");\n+    }\n+    checkbox.setFontColor(fieldSetting.getFontColor());\n+    checkbox.setFontSize(fieldSetting.getFontSize());*/\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      checkbox.setAnchorString(docuSignField.getAnchor());\n+      checkbox.setAnchorUnits(docuSignField.getAnchorUnits());\n+      checkbox.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      checkbox.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      checkbox.setXPosition(docuSignField.getxPosition());\n+      checkbox.setYPosition(docuSignField.getyPosition());\n+    }\n+    if (docuSignField.getIsRequired()) {\n+      checkbox.setRequired(\"true\");\n+    } else {\n+      checkbox.setRequired(\"false\");\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getCheckboxTabs())) {\n+      tabs.setCheckboxTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getCheckboxTabs().add(checkbox);\n+  }\n+\n+  public static void addRadioGroup(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    RadioGroup radioGroup = new RadioGroup();\n+    radioGroup.setDocumentId(documentId);\n+    radioGroup.setRecipientId(recipientId);\n+    radioGroup.setGroupName(docuSignField.getName());\n+\n+    if (CollectionUtils.isNotEmpty(docuSignField.getDocuSignFieldList())) {\n+      java.util.List<Radio> radioList = new ArrayList<>();\n+      for (DocuSignField docuSignFieldChild : docuSignField.getDocuSignFieldList()) {\n+        Radio radio = new Radio();\n+        radio.setPageNumber(docuSignFieldChild.getPageNumber());\n+        radio.setValue(docuSignFieldChild.getValue());\n+        if (StringUtils.notEmpty(docuSignFieldChild.getAnchor())) {\n+          radio.setAnchorString(docuSignFieldChild.getAnchor());\n+          radio.setAnchorUnits(docuSignField.getAnchorUnits());\n+          radio.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+          radio.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+        } else {\n+          radio.setXPosition(docuSignFieldChild.getxPosition());\n+          radio.setYPosition(docuSignFieldChild.getyPosition());\n+        }\n+        if (docuSignFieldChild.getIsRequired()) {\n+          radio.setRequired(\"true\");\n+        } else {\n+          radio.setRequired(\"false\");\n+        }\n+\n+        radioList.add(radio);\n+      }\n+      radioGroup.setRadios(radioList);\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getRadioGroupTabs())) {\n+      tabs.setRadioGroupTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getRadioGroupTabs().add(radioGroup);\n+  }\n+\n+  public static void addApprove(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    Approve approve = new Approve();\n+    approve.setButtonText(docuSignField.getName());\n+    approve.setDocumentId(documentId);\n+    approve.setRecipientId(recipientId);\n+    approve.setPageNumber(docuSignField.getPageNumber());\n+    approve.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      approve.setBold(\"true\");\n+    }\n+    approve.setFontColor(docuSignField.getFontColor());\n+    approve.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      approve.setAnchorString(docuSignField.getAnchor());\n+      approve.setAnchorUnits(docuSignField.getAnchorUnits());\n+      approve.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      approve.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      approve.setXPosition(docuSignField.getxPosition());\n+      approve.setYPosition(docuSignField.getyPosition());\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getApproveTabs())) {\n+      tabs.setApproveTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getApproveTabs().add(approve);\n+  }\n+\n+  public static void addDecline(\n+      Tabs tabs, DocuSignField docuSignField, String documentId, String recipientId) {\n+    Decline decline = new Decline();\n+    decline.setButtonText(docuSignField.getName());\n+    decline.setDocumentId(documentId);\n+    decline.setRecipientId(recipientId);\n+    decline.setPageNumber(docuSignField.getPageNumber());\n+    decline.setFont(docuSignField.getFont());\n+    if (docuSignField.getIsBold()) {\n+      decline.setBold(\"true\");\n+    }\n+    decline.setFontColor(docuSignField.getFontColor());\n+    decline.setFontSize(docuSignField.getFontSize());\n+    if (StringUtils.notEmpty(docuSignField.getAnchor())) {\n+      decline.setAnchorString(docuSignField.getAnchor());\n+      decline.setAnchorUnits(docuSignField.getAnchorUnits());\n+      decline.setAnchorYOffset(docuSignField.getAnchorYOffset());\n+      decline.setAnchorXOffset(docuSignField.getAnchorXOffset());\n+    } else {\n+      decline.setXPosition(docuSignField.getxPosition());\n+      decline.setYPosition(docuSignField.getyPosition());\n+    }\n+\n+    if (CollectionUtils.isEmpty(tabs.getDeclineTabs())) {\n+      tabs.setDeclineTabs(new ArrayList<>());\n+    }\n+\n+    tabs.getDeclineTabs().add(decline);\n+  }\n+\n+  public static void updateSignHereField(DocuSignField field, Tabs tabs) {\n+    if (CollectionUtils.isNotEmpty(tabs.getSignHereTabs())) {\n+      SignHere signHere =\n+          tabs.getSignHereTabs().stream()\n+              .filter(\n+                  x ->\n+                      x.getDocumentId().equals(field.getDocuSignDocument().getDocumentId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mjg1NzA5OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/web/DocuSignEnvelopeController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTo0MDoxNlrOHVyHyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTo0MDoxNlrOHVyHyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYwMzMzOQ==", "bodyText": "You can call TraceBackService.trace(response, e, ResponseMessageType.ERROR); instead to avoid having multiple popup", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492603339", "createdAt": "2020-09-22T09:40:16Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/web/DocuSignEnvelopeController.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.axelor.apps.docusign.web;\n+\n+import com.axelor.apps.base.db.Wizard;\n+import com.axelor.apps.docusign.db.DocuSignEnvelope;\n+import com.axelor.apps.docusign.db.DocuSignEnvelopeSetting;\n+import com.axelor.apps.docusign.db.repo.DocuSignEnvelopeRepository;\n+import com.axelor.apps.docusign.db.repo.DocuSignEnvelopeSettingRepository;\n+import com.axelor.apps.docusign.service.DocuSignEnvelopeService;\n+import com.axelor.db.Model;\n+import com.axelor.db.Query;\n+import com.axelor.exception.service.TraceBackService;\n+import com.axelor.i18n.I18n;\n+import com.axelor.inject.Beans;\n+import com.axelor.meta.schema.actions.ActionView;\n+import com.axelor.rpc.ActionRequest;\n+import com.axelor.rpc.ActionResponse;\n+import com.axelor.rpc.Context;\n+import java.util.Map;\n+import org.apache.commons.collections.MapUtils;\n+\n+public class DocuSignEnvelopeController {\n+\n+  public void createEnvelope(ActionRequest request, ActionResponse response) {\n+    Model context = request.getContext().asType(Model.class);\n+    String model = request.getModel();\n+\n+    String simpleModel = model.substring(model.lastIndexOf(\".\") + 1);\n+\n+    Query<DocuSignEnvelopeSetting> envelopeSettingQuery =\n+        Beans.get(DocuSignEnvelopeSettingRepository.class)\n+            .all()\n+            .filter(\"self.metaModel.fullName = ?\", model);\n+\n+    try {\n+      long settingsCount = envelopeSettingQuery.count();\n+\n+      if (settingsCount == 0) {\n+        response.setView(\n+            ActionView.define(I18n.get(\"Create envelope\"))\n+                .model(DocuSignEnvelope.class.getName())\n+                .add(\"form\", \"docusign-envelope-form\")\n+                .param(\"forceEdit\", \"true\")\n+                .context(\"_templateContextModel\", model)\n+                .context(\"_objectId\", context.getId().toString())\n+                .map());\n+      } else if (settingsCount == 1) {\n+        response.setView(\n+            Beans.get(DocuSignEnvelopeService.class)\n+                .generateEnvelope(envelopeSettingQuery.fetchOne(), context.getId()));\n+      } else if (settingsCount >= 2) {\n+        response.setView(\n+            ActionView.define(I18n.get(\"Select envelope setting\"))\n+                .model(Wizard.class.getName())\n+                .add(\"form\", \"docusign-select-envelope-setting-wizard-form\")\n+                .param(\"show-confirm\", \"false\")\n+                .context(\"_objectId\", context.getId().toString())\n+                .context(\"_templateContextModel\", model)\n+                .context(\"_simpleModel\", simpleModel)\n+                .map());\n+      }\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n+    }\n+  }\n+\n+  public void createEnvelopeFromWizard(ActionRequest request, ActionResponse response) {\n+    Context context = request.getContext();\n+\n+    Map envelopeSettingContext = (Map) context.get(\"envelopeSetting\");\n+    DocuSignEnvelopeSetting envelopeSetting;\n+    if (MapUtils.isNotEmpty(envelopeSettingContext)) {\n+      envelopeSetting =\n+          Beans.get(DocuSignEnvelopeSettingRepository.class)\n+              .find(Long.parseLong(envelopeSettingContext.get(\"id\").toString()));\n+\n+      Long objectId = Long.parseLong(context.get(\"_objectId\").toString());\n+      String model = (String) context.get(\"_templateContextModel\");\n+      String simpleModel = (String) context.get(\"_simpleModel\");\n+\n+      try {\n+        response.setView(\n+            Beans.get(DocuSignEnvelopeService.class).generateEnvelope(envelopeSetting, objectId));\n+      } catch (Exception e) {\n+        TraceBackService.trace(response, e);\n+      }\n+    }\n+  }\n+\n+  public void sendEnvelope(ActionRequest request, ActionResponse response) {\n+    try {\n+      DocuSignEnvelope envelope = request.getContext().asType(DocuSignEnvelope.class);\n+      envelope = Beans.get(DocuSignEnvelopeRepository.class).find(envelope.getId());\n+      Beans.get(DocuSignEnvelopeService.class).sendEnvelope(envelope);\n+      response.setReload(true);\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n+      response.setError(I18n.get(e.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4Mjg3NjA5OnYy", "diffSide": "RIGHT", "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/web/DocuSignEnvelopeSettingController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTo0NTo0M1rOHVyTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOTo0NTo0M1rOHVyTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjYwNjM3MQ==", "bodyText": "Please add a try catch to trace exception", "url": "https://github.com/axelor/axelor-open-suite/pull/5868#discussion_r492606371", "createdAt": "2020-09-22T09:45:43Z", "author": {"login": "ale-axelor"}, "path": "axelor-docusign/src/main/java/com/axelor/apps/docusign/web/DocuSignEnvelopeSettingController.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package com.axelor.apps.docusign.web;\n+\n+import com.axelor.apps.docusign.service.DocuSignEnvelopeSettingService;\n+import com.axelor.inject.Beans;\n+import com.axelor.meta.db.MetaModel;\n+import com.axelor.meta.db.repo.MetaModelRepository;\n+import com.axelor.rpc.ActionRequest;\n+import com.axelor.rpc.ActionResponse;\n+\n+public class DocuSignEnvelopeSettingController {\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public void addItemToReferenceSelection(ActionRequest request, ActionResponse response) {\n+    MetaModel metaModel = (MetaModel) request.getContext().get(\"metaModel\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1eb989ef3a7fbef485f97ff95a21349bad3b1ab"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3565, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}