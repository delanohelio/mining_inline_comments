{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMDUyNzY3", "number": 5515, "title": "#28254: Init work with ManufOrder", "bodyText": "", "createdAt": "2020-06-11T12:47:38Z", "url": "https://github.com/axelor/axelor-open-suite/pull/5515", "merged": true, "mergeCommit": {"oid": "0473d9ee2c8d95cf9ec5c99998f92fbe92a634f3"}, "closed": true, "closedAt": "2020-06-16T11:55:10Z", "author": {"login": "fpr-axelor"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcic4kLAH2gAyNDMzMDUyNzY3OjY1NjUzZDI4ZTdkNjQyZjMxZDJlOTZjZWNmMmUwNGQ0NDhlNjgyMzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrycfgAH2gAyNDMzMDUyNzY3OjY0YThiMmViNmRiMmM2MmY0NzAyMzhhZTBhZmM1ODZhMzU2ZjIxMDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "65653d28e7d642f31d2e96cecf2e04d448e68232", "author": {"user": {"login": "fpr-axelor", "name": null}}, "url": "https://github.com/axelor/axelor-open-suite/commit/65653d28e7d642f31d2e96cecf2e04d448e68232", "committedDate": "2020-05-18T09:58:38Z", "message": "#28254: Init work with ManufOrder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20206546168db055bd31f4ff754db3380f8c6eb6", "author": {"user": {"login": "fpr-axelor", "name": null}}, "url": "https://github.com/axelor/axelor-open-suite/commit/20206546168db055bd31f4ff754db3380f8c6eb6", "committedDate": "2020-06-11T12:58:14Z", "message": "Merge branch 'wip-6.1-kb' into wip-28254"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc31cae15cce9a88ee0f53564ec835284c9b12cb", "author": {"user": {"login": "fpr-axelor", "name": null}}, "url": "https://github.com/axelor/axelor-open-suite/commit/bc31cae15cce9a88ee0f53564ec835284c9b12cb", "committedDate": "2020-06-12T15:23:39Z", "message": "#28254: Fix merge of manuf orders + add changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0", "author": {"user": {"login": "fpr-axelor", "name": null}}, "url": "https://github.com/axelor/axelor-open-suite/commit/7e3091116dec896a81d2d2af68802f2d303c54d0", "committedDate": "2020-06-15T08:08:05Z", "message": "Remove useless log"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzMxNzcz", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#pullrequestreview-430731773", "createdAt": "2020-06-15T15:03:15Z", "commit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNTowMzoxNVrOGj2PlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo0NTowMFrOGj6U8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0MjA2OQ==", "bodyText": "will --> with ?\nNo translation ?", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440242069", "createdAt": "2020-06-15T15:03:15Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/exceptions/IExceptionMessage.java", "diffHunk": "@@ -133,6 +133,9 @@\n   /** Operation Order Workflow Service */\n   String WORKCENTER_NO_MACHINE = /*$$(*/ \"Please fill the machine in the workcenter %s.\" /*)*/;\n \n+  String NO_WORK_CENTER_GROUP = /*$$(*/\n+      \"Please fill the work center group will at least one work center.\" /*)*/;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0Mjg2Mw==", "bodyText": "it is not recommended to leave commented lines of code (especially not without any further explanation as to why). Better to remove it.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440242863", "createdAt": "2020-06-15T15:04:29Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -161,7 +167,7 @@ public ManufOrder plan(ManufOrder manufOrder) throws AxelorException {\n     }\n \n     for (ManufOrder manufOrder : manufOrderList) {\n-      //    \tmanufOrder.setPlannedStartDateT(this.computePlannedStartDateT(manufOrder));\n+      // manufOrder.setPlannedStartDateT(this.computePlannedStartDateT(manufOrder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NDA3NQ==", "bodyText": "Important : it is necessary to handle the case where the optional doesn't have a value. is there really no possible case of figure where there is not a single billOfMaterial with versionNumber == 1 ?", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440244075", "createdAt": "2020-06-15T15:06:13Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0Njg4Nw==", "bodyText": "Doc comments should not be positioned inside a method or constructor definition block.\nUse regular block comments :\n/*\n*\n*/", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440246887", "createdAt": "2020-06-15T15:10:15Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0OTkwMQ==", "bodyText": "There should be a config in app base indicating the number of digits for quantity fields throughout the app.\nMaybe it should be used here instead ?", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440249901", "createdAt": "2020-06-15T15:14:22Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MDMyNQ==", "bodyText": "The comment thing again.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440250325", "createdAt": "2020-06-15T15:15:00Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MDUyOA==", "bodyText": "The comment thing again.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440250528", "createdAt": "2020-06-15T15:15:12Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MTk0MQ==", "bodyText": "ManufOrderWorkflowService is injecting itself in one of its methods ?\nGenerally speaking, there are a lot of Beans.get in this big method. Make sure to check if some of them should not be @Inject-ed instead. Either for performance or to handle possible circular dependencies.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440251941", "createdAt": "2020-06-15T15:16:58Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1Mzk4OQ==", "bodyText": "ManufOrderRepository is already injected in the constructor. No need to use Beans.get.\nAlso, the msitake had already been made at other places in this file (at the very least, a few lines above this one), might as well fix them since we're at it.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440253989", "createdAt": "2020-06-15T15:19:55Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NDM3NA==", "bodyText": "It's already injected in the constructor.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440254374", "createdAt": "2020-06-15T15:20:25Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);\n+    } else {\n+      ManufOrderService moService = Beans.get(ManufOrderService.class);\n+      moService.preFillOperations(mergedManufOrder);\n+    }\n+\n+    Beans.get(ManufOrderRepository.class).save(mergedManufOrder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NDY1OA==", "bodyText": "It's already injected in the constructor", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440254658", "createdAt": "2020-06-15T15:20:49Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);\n+    } else {\n+      ManufOrderService moService = Beans.get(ManufOrderService.class);\n+      moService.preFillOperations(mergedManufOrder);\n+    }\n+\n+    Beans.get(ManufOrderRepository.class).save(mergedManufOrder);\n+  }\n+\n+  public boolean canMerge(List<Long> ids) {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1NTUyMQ==", "bodyText": "probably not an issue here, but it's generally better to do (ManufOrderRepository.STATUS_DRAFT).equals(x.getStatusSelect()) to avoid potential NPEs", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440255521", "createdAt": "2020-06-15T15:22:05Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/service/manuforder/ManufOrderWorkflowService.java", "diffHunk": "@@ -650,4 +656,155 @@ public void createPurchaseOrder(ManufOrder manufOrder) throws AxelorException {\n \n     Beans.get(ManufOrderRepository.class).save(manufOrder);\n   }\n+\n+  @Transactional(rollbackOn = {Exception.class})\n+  public void merge(List<Long> ids) throws AxelorException {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    /** Init all the necessary values to create the new Manuf Order */\n+    Product product = manufOrderList.get(0).getProduct();\n+    StockLocation stockLocation = manufOrderList.get(0).getWorkshopStockLocation();\n+    Company company = manufOrderList.get(0).getCompany();\n+    BillOfMaterial billOfMaterial =\n+        manufOrderList.stream()\n+            .filter(x -> x.getBillOfMaterial().getVersionNumber() == 1)\n+            .findFirst()\n+            .get()\n+            .getBillOfMaterial();\n+    int priority = manufOrderList.stream().mapToInt(mo -> mo.getPrioritySelect()).max().getAsInt();\n+    Unit unit = billOfMaterial.getUnit();\n+    BigDecimal qty = BigDecimal.ZERO;\n+    String note = \"\";\n+\n+    ManufOrder mergedManufOrder = new ManufOrder();\n+\n+    for (ManufOrder manufOrder : manufOrderList) {\n+      manufOrder.setStatusSelect(ManufOrderRepository.STATUS_FUSIONNED);\n+\n+      manufOrder.setManufOrderMergeResult(mergedManufOrder);\n+      for (ProductionOrder productionOrder : manufOrder.getProductionOrderSet()) {\n+        mergedManufOrder.addProductionOrderSetItem(productionOrder);\n+      }\n+      for (SaleOrder saleOrder : manufOrder.getSaleOrderSet()) {\n+        mergedManufOrder.addSaleOrderSetItem(saleOrder);\n+      }\n+      /**\n+       * If unit are the same, then add the qty If not, convert the unit and get the converted qty\n+       */\n+      if (manufOrder.getUnit().equals(unit)) {\n+        qty = qty.add(manufOrder.getQty());\n+      } else {\n+        BigDecimal qtyConverted =\n+            Beans.get(UnitConversionService.class)\n+                .convert(\n+                    manufOrder.getUnit(),\n+                    unit,\n+                    manufOrder.getQty(),\n+                    AppBaseService.DEFAULT_NB_DECIMAL_DIGITS,\n+                    null);\n+        qty = qty.add(qtyConverted);\n+      }\n+      if (manufOrder.getNote() != null && manufOrder.getNote() != \"\") {\n+        note += manufOrder.getManufOrderSeq() + \" : \" + manufOrder.getNote() + \"\\n\";\n+      }\n+    }\n+\n+    /** Update the created manuf order */\n+    mergedManufOrder.setStatusSelect(ManufOrderRepository.STATUS_DRAFT);\n+    mergedManufOrder.setProduct(product);\n+    mergedManufOrder.setUnit(unit);\n+    mergedManufOrder.setWorkshopStockLocation(stockLocation);\n+    mergedManufOrder.setQty(qty);\n+    mergedManufOrder.setBillOfMaterial(billOfMaterial);\n+    mergedManufOrder.setCompany(company);\n+    mergedManufOrder.setPrioritySelect(priority);\n+    mergedManufOrder.setProdProcess(billOfMaterial.getProdProcess());\n+    mergedManufOrder.setNote(note);\n+\n+    AppProductionService appProductionService = Beans.get(AppProductionService.class);\n+\n+    /**\n+     * Check the config to see if you directly plan the created manuf order or just prefill the\n+     * opertations\n+     */\n+    if (appProductionService.isApp(\"production\")\n+        && appProductionService.getAppProduction().getIsAutomaticallyPlanified()) {\n+      Beans.get(ManufOrderWorkflowService.class).plan(mergedManufOrder);\n+    } else {\n+      ManufOrderService moService = Beans.get(ManufOrderService.class);\n+      moService.preFillOperations(mergedManufOrder);\n+    }\n+\n+    Beans.get(ManufOrderRepository.class).save(mergedManufOrder);\n+  }\n+\n+  public boolean canMerge(List<Long> ids) {\n+    List<ManufOrder> manufOrderList =\n+        Beans.get(ManufOrderRepository.class)\n+            .all()\n+            .filter(\"self.id in (\" + Joiner.on(\",\").join(ids) + \")\")\n+            .fetch();\n+\n+    // I check if all the status of the manuf order in the list are Draft or\n+    // Planned. If not i can return false\n+    boolean allStatusDraftOrPlanned =\n+        manufOrderList.stream()\n+            .allMatch(\n+                x ->\n+                    x.getStatusSelect().equals(ManufOrderRepository.STATUS_DRAFT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5Njk1Nw==", "bodyText": "Error messages should be defined in static variables in a separate interface.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440296957", "createdAt": "2020-06-15T16:24:20Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5NzA4OQ==", "bodyText": "Error messages should be defined in static variables in a separate interface.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440297089", "createdAt": "2020-06-15T16:24:34Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTA4Nw==", "bodyText": "\"fusionner ces ordres\"... de fabrication ?", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440299087", "createdAt": "2020-06-15T16:27:51Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/resources/i18n/messages_fr.csv", "diffHunk": "@@ -19,8 +19,10 @@\n \"App production\",,,\n \"Applicable\",,,\n \"Approval\",\"Homologation\",,\n+\"Are you sur you want to merge those manuf orders?\",\"\u202fEtes-vous certain de vouloir fusionner ces ordres\u202f?\",,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI5OTkzNA==", "bodyText": "typo : sur --> sure\nTry not to abbreviate \"manufacturing\" into \"manuf\" or at least put a dot : \"manuf.\"\nError messages should be defined in static variables in a separate interface.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440299934", "createdAt": "2020-06-15T16:29:19Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDQ1NQ==", "bodyText": "concerns --> concern (no s), \"and will\" --> with\nError messages should be defined in static variables in a separate interface.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440300455", "createdAt": "2020-06-15T16:30:10Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));\n+            } else {\n+              response.setError(\n+                  I18n.get(\n+                      \"The merge must concerns only manuf order with Draft or Planned status, with the same products and same workshop stock location and will all bill of material compatibles.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMDU1Mg==", "bodyText": "Error messages should be defined in static variables in a separate interface.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440300552", "createdAt": "2020-06-15T16:30:19Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));\n+            } else {\n+              response.setError(\n+                  I18n.get(\n+                      \"The merge must concerns only manuf order with Draft or Planned status, with the same products and same workshop stock location and will all bill of material compatibles.\"));\n+            }\n+          }\n+        } else {\n+          response.setError(I18n.get(\"Please select something to validate\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMjE2OQ==", "bodyText": "Is the case where no line is selected handled ? Either here or in the \"merge\" method, I don't see it when looking rapidly.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440302169", "createdAt": "2020-06-15T16:33:09Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/java/com/axelor/apps/production/web/ManufOrderController.java", "diffHunk": "@@ -459,4 +460,45 @@ public void computeCostPrice(ActionRequest request, ActionResponse response) {\n       TraceBackService.trace(response, e);\n     }\n   }\n+\n+  public void checkMergeValues(ActionRequest request, ActionResponse response) {\n+    try {\n+      if (request.getContext().get(\"id\") != null) {\n+        response.setError(I18n.get(\"Please select more than one OF\"));\n+      } else {\n+        Object _ids = request.getContext().get(\"_ids\");\n+        if (!ObjectUtils.isEmpty(_ids)) {\n+          List<Long> ids = (List<Long>) _ids;\n+          if (ids.size() < 2) {\n+            response.setError(I18n.get(\"Please select more than one OF\"));\n+          } else {\n+            boolean canMerge = Beans.get(ManufOrderWorkflowService.class).canMerge(ids);\n+            if (canMerge) {\n+              response.setAlert(I18n.get(\"Are you sur you want to merge those manuf orders?\"));\n+            } else {\n+              response.setError(\n+                  I18n.get(\n+                      \"The merge must concerns only manuf order with Draft or Planned status, with the same products and same workshop stock location and will all bill of material compatibles.\"));\n+            }\n+          }\n+        } else {\n+          response.setError(I18n.get(\"Please select something to validate\"));\n+        }\n+      }\n+\n+    } catch (Exception e) {\n+      TraceBackService.trace(response, e);\n+    }\n+  }\n+\n+  public void generateMergeManufOrder(ActionRequest request, ActionResponse response) {\n+    try {\n+      Object _ids = request.getContext().get(\"_ids\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwMjk1Nw==", "bodyText": "I know it's a detail, but proper practice is to end the tags with /> instead of > when there is no content.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440302957", "createdAt": "2020-06-15T16:34:29Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/resources/domains/AppProduction.xml", "diffHunk": "@@ -34,6 +34,8 @@\n \t\t<boolean name=\"manageOutsourcing\" title=\"Manage outsourcing\"/>\n \t\t<boolean name=\"manageMpsCharge\" title=\"Manage Master Production Scheduling Charge\"/>\n \t\t<boolean name=\"enableToolManagement\" title=\"Enable Tool Management\"/>\n+\t\t\n+\t\t<boolean name=\"isAutomaticallyPlanified\" title=\"Automatically planified after fusion\"></boolean>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNDgxNw==", "bodyText": "\"planified\" is... somewhat a valid word. But hardly ever used. Probably better to use \"planned\" instead.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440304817", "createdAt": "2020-06-15T16:37:47Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/resources/i18n/messages_fr.csv", "diffHunk": "@@ -19,8 +19,10 @@\n \"App production\",,,\n \"Applicable\",,,\n \"Approval\",\"Homologation\",,\n+\"Are you sur you want to merge those manuf orders?\",\"\u202fEtes-vous certain de vouloir fusionner ces ordres\u202f?\",,\n \"Automatic email was not sent because no default email account and/or no valid email account was found : please create one.\",\"Le mail automatique n'a pas pu \u00eatre envoy\u00e9 car le compte SMTP par d\u00e9faut n'a \u00e9t\u00e9 trouv\u00e9 et/ou celui-ci n'est pas valide : veuillez le configurer\",,\n \"Automatically plan the manuf. orders generated from sale order\",,,\n+\"Automatically planified after fusion\",\"Planifier automatiquement apr\u00e8s fusion\",,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNjMyNg==", "bodyText": "Fusionned ? Couldn't it me \"merged\" instead ? Fusionned hardly even exists. If really no better word can be found, write it with a single n : fusioned.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440306326", "createdAt": "2020-06-15T16:40:21Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/resources/i18n/messages_fr.csv", "diffHunk": "@@ -243,6 +245,7 @@\n \"Friday hours\",\"Heures Vendredi\",,\n \"From\",\"De\",,\n \"From Date\",\"Date de d\u00e9but\",,\n+\"Fusionned\",\"Fusionn\u00e9\",,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwNjc5OQ==", "bodyText": "Is there a reason to write manuf instead of manufacturing ? Otherwise manuf. with a . would be better.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440306799", "createdAt": "2020-06-15T16:41:10Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/resources/i18n/messages_fr.csv", "diffHunk": "@@ -279,6 +282,8 @@\n \"Level\",\"Niveau\",,\n \"List of Wastes Per Product\",\"Liste de Rebuts par produit\",,\n \"Low\",\"Faible\",,\n+\"Manuf order merge result\",\"Ordre de fabrication apr\u00e8s fusion\",,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwODYxMQ==", "bodyText": "I cannot accept 700 lines of re-indentation.\nThere are probably things you actually changed in there, but I have no idea why and it also causes merge conflicts afterwards.\nIf the code needs to be adapted to a specific code standard, it should be done in a separate commit.", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440308611", "createdAt": "2020-06-15T16:44:21Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/resources/views/ManufOrder.xml", "diffHunk": "@@ -3,9 +3,13 @@\n \txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n \txsi:schemaLocation=\"http://axelor.com/xml/ns/object-views http://axelor.com/xml/ns/object-views/object-views_5.2.xsd\">\n \n-  <grid name=\"manuf-order-grid\" title=\"Manufacturing orders\" model=\"com.axelor.apps.production.db.ManufOrder\" orderBy=\"-manufOrderSeq\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMwODk3Nw==", "bodyText": "Same as above : couldn't it be merged instead ?", "url": "https://github.com/axelor/axelor-open-suite/pull/5515#discussion_r440308977", "createdAt": "2020-06-15T16:45:00Z", "author": {"login": "wde-axelor"}, "path": "axelor-production/src/main/resources/views/Selects.xml", "diffHunk": "@@ -13,6 +13,7 @@\n \t\t<option value=\"4\">In progress</option>\n \t\t<option value=\"5\">Standby</option>\n \t\t<option value=\"6\">Finished</option>\t\n+\t\t<option value=\"7\">Fusionned</option>\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3091116dec896a81d2d2af68802f2d303c54d0"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ddcc5b9ed62e12893c1c82448acf540c9761566", "author": {"user": {"login": "fpr-axelor", "name": null}}, "url": "https://github.com/axelor/axelor-open-suite/commit/2ddcc5b9ed62e12893c1c82448acf540c9761566", "committedDate": "2020-06-16T09:50:36Z", "message": "Fix merge request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a8b2eb6db2c62f470238ae0afc586a356f2101", "author": {"user": {"login": "fpr-axelor", "name": null}}, "url": "https://github.com/axelor/axelor-open-suite/commit/64a8b2eb6db2c62f470238ae0afc586a356f2101", "committedDate": "2020-06-16T10:11:12Z", "message": "Fix indentation issue"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1930, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}