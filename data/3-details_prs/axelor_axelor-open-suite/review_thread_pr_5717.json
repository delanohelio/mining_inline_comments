{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3OTU5NTA4", "number": 5717, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxODo1OFrOEvnWLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0OTozMFrOEwKn4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MzYzMTgwOnYy", "diffSide": "LEFT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/invoice/generator/InvoiceLineGeneratorSupplyChain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxODo1OFrOHksOOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNjoxODo1OFrOHksOOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIzNTMyMg==", "bodyText": "The second condition is removed", "url": "https://github.com/axelor/axelor-open-suite/pull/5717#discussion_r508235322", "createdAt": "2020-10-20T06:18:58Z", "author": {"login": "vbh-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/invoice/generator/InvoiceLineGeneratorSupplyChain.java", "diffHunk": "@@ -196,22 +197,33 @@ protected InvoiceLine createInvoiceLine() throws AxelorException {\n \n     if (saleOrderLine != null) {\n \n-      if (saleOrderLine.getAnalyticDistributionTemplate() != null\n-          || !ObjectUtils.isEmpty(saleOrderLine.getAnalyticMoveLineList())) {\n-        invoiceLine.setAnalyticDistributionTemplate(\n-            saleOrderLine.getAnalyticDistributionTemplate());\n-        this.copyAnalyticMoveLines(saleOrderLine.getAnalyticMoveLineList(), invoiceLine);\n-        analyticMoveLineList = invoiceLineService.computeAnalyticDistribution(invoiceLine);\n-      } else {\n-        analyticMoveLineList =\n-            invoiceLineService.getAndComputeAnalyticDistribution(invoiceLine, invoice);\n-        analyticMoveLineList.stream().forEach(invoiceLine::addAnalyticMoveLineListItem);\n+      switch (saleOrderLine.getTypeSelect()) {\n+        case SaleOrderLineRepository.TYPE_END_OF_PACK:\n+          invoiceLine.setIsHideUnitAmounts(saleOrderLine.getIsHideUnitAmounts());\n+          invoiceLine.setIsShowTotal(saleOrderLine.getIsShowTotal());\n+          break;\n+\n+        case SaleOrderLineRepository.TYPE_NORMAL:\n+          if (saleOrderLine.getAnalyticDistributionTemplate() != null\n+              || !ObjectUtils.isEmpty(saleOrderLine.getAnalyticMoveLineList())) {\n+            invoiceLine.setAnalyticDistributionTemplate(\n+                saleOrderLine.getAnalyticDistributionTemplate());\n+            this.copyAnalyticMoveLines(saleOrderLine.getAnalyticMoveLineList(), invoiceLine);\n+            analyticMoveLineList = invoiceLineService.computeAnalyticDistribution(invoiceLine);\n+          } else {\n+            analyticMoveLineList =\n+                invoiceLineService.getAndComputeAnalyticDistribution(invoiceLine, invoice);\n+            analyticMoveLineList.stream().forEach(invoiceLine::addAnalyticMoveLineListItem);\n+          }\n+          break;\n+\n+        default:\n+          return invoiceLine;\n       }\n \n     } else if (purchaseOrderLine != null) {\n \n-      if (purchaseOrderLine.getAnalyticDistributionTemplate() != null\n-          || !ObjectUtils.isEmpty(purchaseOrderLine.getAnalyticMoveLineList())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f908a1f3f232af471b6ee62324a8de484e4ab11c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTM5OTcxOnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/service/invoice/InvoiceLineServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0NjozM1rOHljhcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0NjozM1rOHljhcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MTM2Mw==", "bodyText": "This condition seems to be incorrect. analyticMoveLineList is not updated when user change qty.", "url": "https://github.com/axelor/axelor-open-suite/pull/5717#discussion_r509141363", "createdAt": "2020-10-21T09:46:33Z", "author": {"login": "vbh-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/service/invoice/InvoiceLineServiceImpl.java", "diffHunk": "@@ -452,4 +458,82 @@ public Unit getUnit(Product product, boolean isPurchase) {\n \n     return productInformation;\n   }\n+\n+  @Override\n+  public boolean hasEndOfPackTypeLine(List<InvoiceLine> invoiceLineList) {\n+    return ObjectUtils.isEmpty(invoiceLineList)\n+        ? Boolean.FALSE\n+        : invoiceLineList.stream()\n+            .anyMatch(\n+                invoiceLine ->\n+                    invoiceLine.getTypeSelect() == InvoiceLineRepository.TYPE_END_OF_PACK);\n+  }\n+\n+  @Override\n+  public boolean isStartOfPackTypeLineQtyChanged(List<InvoiceLine> invoiceLineList) {\n+\n+    if (ObjectUtils.isEmpty(invoiceLineList)) {\n+      return false;\n+    }\n+    for (InvoiceLine invoiceLine : invoiceLineList) {\n+      if (invoiceLine.getTypeSelect() == InvoiceLineRepository.TYPE_START_OF_PACK\n+          && invoiceLine.getId() != null) {\n+        InvoiceLine oldInvoiceLine = invoiceLineRepo.find(invoiceLine.getId());\n+        if (oldInvoiceLine.getTypeSelect() == InvoiceLineRepository.TYPE_START_OF_PACK\n+            && invoiceLine.getQty().compareTo(oldInvoiceLine.getQty()) != 0) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public InvoiceLine updateProductQty(\n+      InvoiceLine invoiceLine, Invoice invoice, BigDecimal oldQty, BigDecimal newQty, int scale) {\n+    BigDecimal qty =\n+        invoiceLine\n+            .getQty()\n+            .divide(oldQty, scale, RoundingMode.HALF_EVEN)\n+            .multiply(newQty)\n+            .setScale(scale, RoundingMode.HALF_EVEN);\n+    invoiceLine.setQty(qty);\n+    if (invoiceLine.getTypeSelect() != InvoiceLineRepository.TYPE_NORMAL\n+        || invoiceLine.getProduct() == null) {\n+      return invoiceLine;\n+    }\n+    try {\n+      BigDecimal exTaxTotal;\n+      BigDecimal inTaxTotal;\n+      BigDecimal taxRate = BigDecimal.ZERO;\n+      BigDecimal priceDiscounted = this.computeDiscount(invoiceLine, invoice.getInAti());\n+      if (invoiceLine.getTaxLine() != null) {\n+        taxRate = invoiceLine.getTaxLine().getValue();\n+      }\n+      if (Boolean.FALSE.equals(invoice.getInAti())) {\n+        exTaxTotal = InvoiceLineManagement.computeAmount(qty, priceDiscounted);\n+        inTaxTotal = exTaxTotal.add(exTaxTotal.multiply(taxRate));\n+      } else {\n+        inTaxTotal = InvoiceLineManagement.computeAmount(qty, priceDiscounted);\n+        exTaxTotal = inTaxTotal.divide(taxRate.add(BigDecimal.ONE), 2, BigDecimal.ROUND_HALF_UP);\n+      }\n+      invoiceLine.setExTaxTotal(exTaxTotal);\n+      invoiceLine.setCompanyExTaxTotal(this.getCompanyExTaxTotal(exTaxTotal, invoice));\n+      invoiceLine.setInTaxTotal(inTaxTotal);\n+      invoiceLine.setCompanyInTaxTotal(this.getCompanyExTaxTotal(inTaxTotal, invoice));\n+      invoiceLine.setPriceDiscounted(priceDiscounted);\n+      invoiceLine.setTaxRate(taxRate);\n+    } catch (Exception e) {\n+      TraceBackService.trace(e);\n+    }\n+    return this.computeAnalyticDistributionWithUpdatedQty(invoiceLine);\n+  }\n+\n+  private InvoiceLine computeAnalyticDistributionWithUpdatedQty(InvoiceLine invoiceLine) {\n+\n+    if (Boolean.FALSE.equals(appAccountService.getAppAccount().getManageAnalyticAccounting())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b696acf9a256cb1fa8caa62a14132c2efa470b"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTQxMTUyOnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/service/invoice/InvoiceLineServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0OTozMFrOHljo0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo0OTozMFrOHljo0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0MzI0OQ==", "bodyText": "I think it would be better to remove scale from method argument and declare variable for it inside method.", "url": "https://github.com/axelor/axelor-open-suite/pull/5717#discussion_r509143249", "createdAt": "2020-10-21T09:49:30Z", "author": {"login": "vbh-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/service/invoice/InvoiceLineServiceImpl.java", "diffHunk": "@@ -452,4 +458,82 @@ public Unit getUnit(Product product, boolean isPurchase) {\n \n     return productInformation;\n   }\n+\n+  @Override\n+  public boolean hasEndOfPackTypeLine(List<InvoiceLine> invoiceLineList) {\n+    return ObjectUtils.isEmpty(invoiceLineList)\n+        ? Boolean.FALSE\n+        : invoiceLineList.stream()\n+            .anyMatch(\n+                invoiceLine ->\n+                    invoiceLine.getTypeSelect() == InvoiceLineRepository.TYPE_END_OF_PACK);\n+  }\n+\n+  @Override\n+  public boolean isStartOfPackTypeLineQtyChanged(List<InvoiceLine> invoiceLineList) {\n+\n+    if (ObjectUtils.isEmpty(invoiceLineList)) {\n+      return false;\n+    }\n+    for (InvoiceLine invoiceLine : invoiceLineList) {\n+      if (invoiceLine.getTypeSelect() == InvoiceLineRepository.TYPE_START_OF_PACK\n+          && invoiceLine.getId() != null) {\n+        InvoiceLine oldInvoiceLine = invoiceLineRepo.find(invoiceLine.getId());\n+        if (oldInvoiceLine.getTypeSelect() == InvoiceLineRepository.TYPE_START_OF_PACK\n+            && invoiceLine.getQty().compareTo(oldInvoiceLine.getQty()) != 0) {\n+          return true;\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public InvoiceLine updateProductQty(\n+      InvoiceLine invoiceLine, Invoice invoice, BigDecimal oldQty, BigDecimal newQty, int scale) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44b696acf9a256cb1fa8caa62a14132c2efa470b"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3573, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}