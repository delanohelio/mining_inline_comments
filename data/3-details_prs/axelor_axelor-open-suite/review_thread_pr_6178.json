{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTI2ODg3", "number": 6178, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNzo1N1rOFEDh0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyMTo1N1rOFED6TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzk2NDM0OnYy", "diffSide": "RIGHT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/PurchaseOrderServiceSupplychainImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNzo1N1rOID_bow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowNzo1N1rOID_bow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NTkwNw==", "bodyText": "Please inject this service in the constructor", "url": "https://github.com/axelor/axelor-open-suite/pull/6178#discussion_r541055907", "createdAt": "2020-12-11T16:07:57Z", "author": {"login": "ale-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/PurchaseOrderServiceSupplychainImpl.java", "diffHunk": "@@ -365,4 +374,95 @@ public void updateToValidatedStatus(PurchaseOrder purchaseOrder) {\n     purchaseOrder.setStatusSelect(PurchaseOrderRepository.STATUS_VALIDATED);\n     purchaseOrderRepo.save(purchaseOrder);\n   }\n+\n+  @Override\n+  public String createShipmentCostLine(PurchaseOrder purchaseOrder) throws AxelorException {\n+    PurchaseOrderService purchaseOrderService = Beans.get(PurchaseOrderService.class);\n+    List<PurchaseOrderLine> purchaseOrderLines = purchaseOrder.getPurchaseOrderLineList();\n+    ShipmentMode shipmentMode = purchaseOrder.getShipmentMode();\n+    if (shipmentMode == null) {\n+      return null;\n+    }\n+    Product shippingCostProduct = shipmentMode.getShippingCostsProduct();\n+    if (shipmentMode.getHasCarriagePaidPossibility()) {\n+      BigDecimal carriagePaidThreshold = shipmentMode.getCarriagePaidThreshold();\n+      if (computeExTaxTotalWithoutShippingLines(purchaseOrder).compareTo(carriagePaidThreshold)\n+          >= 0) {\n+        String message = removeShipmentCostLine(purchaseOrder);\n+        purchaseOrderService.computePurchaseOrder(purchaseOrder);\n+        return message;\n+      }\n+    }\n+    if (alreadyHasShippingCostLine(purchaseOrder, shippingCostProduct)) {\n+      return null;\n+    }\n+    PurchaseOrderLine shippingCostLine = createShippingCostLine(purchaseOrder, shippingCostProduct);\n+    purchaseOrderLines.add(shippingCostLine);\n+    purchaseOrderService.computePurchaseOrder(purchaseOrder);\n+    return null;\n+  }\n+\n+  private PurchaseOrderLine createShippingCostLine(\n+      PurchaseOrder purchaseOrder, Product shippingCostProduct) throws AxelorException {\n+    PurchaseOrderLine shippingCostLine = new PurchaseOrderLine();\n+    shippingCostLine.setPurchaseOrder(purchaseOrder);\n+    shippingCostLine.setProduct(shippingCostProduct);\n+    PurchaseOrderLineService purchaseOrderLineService = Beans.get(PurchaseOrderLineService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf9fde53133187ab448ced3991c3b7507465fc6"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Nzk3Mjc3OnYy", "diffSide": "RIGHT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/PurchaseOrderServiceSupplychainImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowOTo0OFrOID_gkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjowOTo0OFrOID_gkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA1NzE3MA==", "bodyText": "Change all private methods to protected, as the use of private is preventing any override from customer module", "url": "https://github.com/axelor/axelor-open-suite/pull/6178#discussion_r541057170", "createdAt": "2020-12-11T16:09:48Z", "author": {"login": "ale-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/PurchaseOrderServiceSupplychainImpl.java", "diffHunk": "@@ -365,4 +374,95 @@ public void updateToValidatedStatus(PurchaseOrder purchaseOrder) {\n     purchaseOrder.setStatusSelect(PurchaseOrderRepository.STATUS_VALIDATED);\n     purchaseOrderRepo.save(purchaseOrder);\n   }\n+\n+  @Override\n+  public String createShipmentCostLine(PurchaseOrder purchaseOrder) throws AxelorException {\n+    PurchaseOrderService purchaseOrderService = Beans.get(PurchaseOrderService.class);\n+    List<PurchaseOrderLine> purchaseOrderLines = purchaseOrder.getPurchaseOrderLineList();\n+    ShipmentMode shipmentMode = purchaseOrder.getShipmentMode();\n+    if (shipmentMode == null) {\n+      return null;\n+    }\n+    Product shippingCostProduct = shipmentMode.getShippingCostsProduct();\n+    if (shipmentMode.getHasCarriagePaidPossibility()) {\n+      BigDecimal carriagePaidThreshold = shipmentMode.getCarriagePaidThreshold();\n+      if (computeExTaxTotalWithoutShippingLines(purchaseOrder).compareTo(carriagePaidThreshold)\n+          >= 0) {\n+        String message = removeShipmentCostLine(purchaseOrder);\n+        purchaseOrderService.computePurchaseOrder(purchaseOrder);\n+        return message;\n+      }\n+    }\n+    if (alreadyHasShippingCostLine(purchaseOrder, shippingCostProduct)) {\n+      return null;\n+    }\n+    PurchaseOrderLine shippingCostLine = createShippingCostLine(purchaseOrder, shippingCostProduct);\n+    purchaseOrderLines.add(shippingCostLine);\n+    purchaseOrderService.computePurchaseOrder(purchaseOrder);\n+    return null;\n+  }\n+\n+  private PurchaseOrderLine createShippingCostLine(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf9fde53133187ab448ced3991c3b7507465fc6"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODAwOTY2OnYy", "diffSide": "RIGHT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/SaleOrderServiceSupplychainImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoxODowNFrOID_2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoxODowNFrOID_2DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2MjY2OA==", "bodyText": "Change all private methods to protected, as the use of private is preventing any override from customer module", "url": "https://github.com/axelor/axelor-open-suite/pull/6178#discussion_r541062668", "createdAt": "2020-12-11T16:18:04Z", "author": {"login": "ale-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/SaleOrderServiceSupplychainImpl.java", "diffHunk": "@@ -234,4 +246,114 @@ public void updateToConfirmedStatus(SaleOrder saleOrder) {\n     saleOrder.setStatusSelect(SaleOrderRepository.STATUS_ORDER_CONFIRMED);\n     saleOrderRepo.save(saleOrder);\n   }\n+\n+  @Override\n+  public String createShipmentCostLine(SaleOrder saleOrder) throws AxelorException {\n+    SaleOrderComputeService saleOrderComputeService = Beans.get(SaleOrderComputeService.class);\n+    SaleOrderMarginService saleOrderMarginService = Beans.get(SaleOrderMarginService.class);\n+    List<SaleOrderLine> saleOrderLines = saleOrder.getSaleOrderLineList();\n+    Partner client = saleOrder.getClientPartner();\n+    ShipmentMode shipmentMode = saleOrder.getShipmentMode();\n+\n+    if (shipmentMode == null) {\n+      return null;\n+    }\n+    Product shippingCostProduct = shipmentMode.getShippingCostsProduct();\n+    if (shippingCostProduct == null) {\n+      return null;\n+    }\n+    BigDecimal carriagePaidThreshold = shipmentMode.getCarriagePaidThreshold();\n+    if (client != null) {\n+      List<CustomerShippingCarriagePaid> carriagePaids =\n+          client.getCustomerShippingCarriagePaidList();\n+      for (CustomerShippingCarriagePaid customerShippingCarriagePaid : carriagePaids) {\n+        if (shipmentMode.getId() == customerShippingCarriagePaid.getShipmentMode().getId()) {\n+          if (customerShippingCarriagePaid.getShippingCostsProduct() != null) {\n+            shippingCostProduct = customerShippingCarriagePaid.getShippingCostsProduct();\n+          }\n+          carriagePaidThreshold = customerShippingCarriagePaid.getCarriagePaidThreshold();\n+          break;\n+        }\n+      }\n+    }\n+    if (carriagePaidThreshold != null && shipmentMode.getHasCarriagePaidPossibility()) {\n+      if (computeExTaxTotalWithoutShippingLines(saleOrder).compareTo(carriagePaidThreshold) >= 0) {\n+        String message = removeShipmentCostLine(saleOrder);\n+        saleOrderComputeService.computeSaleOrder(saleOrder);\n+        saleOrderMarginService.computeMarginSaleOrder(saleOrder);\n+        return message;\n+      }\n+    }\n+    if (alreadyHasShippingCostLine(saleOrder, shippingCostProduct)) {\n+      return null;\n+    }\n+    SaleOrderLine shippingCostLine = createShippingCostLine(saleOrder, shippingCostProduct);\n+    saleOrderLines.add(shippingCostLine);\n+    saleOrderComputeService.computeSaleOrder(saleOrder);\n+    saleOrderMarginService.computeMarginSaleOrder(saleOrder);\n+    return null;\n+  }\n+\n+  private boolean alreadyHasShippingCostLine(SaleOrder saleOrder, Product shippingCostProduct) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf9fde53133187ab448ced3991c3b7507465fc6"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODAxMDk0OnYy", "diffSide": "RIGHT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/SaleOrderServiceSupplychainImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoxODoyNFrOID_2zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoxODoyNFrOID_2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2Mjg2Mg==", "bodyText": "Please inject these services in the constructor", "url": "https://github.com/axelor/axelor-open-suite/pull/6178#discussion_r541062862", "createdAt": "2020-12-11T16:18:24Z", "author": {"login": "ale-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/SaleOrderServiceSupplychainImpl.java", "diffHunk": "@@ -234,4 +246,114 @@ public void updateToConfirmedStatus(SaleOrder saleOrder) {\n     saleOrder.setStatusSelect(SaleOrderRepository.STATUS_ORDER_CONFIRMED);\n     saleOrderRepo.save(saleOrder);\n   }\n+\n+  @Override\n+  public String createShipmentCostLine(SaleOrder saleOrder) throws AxelorException {\n+    SaleOrderComputeService saleOrderComputeService = Beans.get(SaleOrderComputeService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf9fde53133187ab448ced3991c3b7507465fc6"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODAyNzAxOnYy", "diffSide": "RIGHT", "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/PurchaseOrderServiceSupplychainImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyMTo1N1rOIEAAGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjoyMTo1N1rOIEAAGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA2NTI0Mg==", "bodyText": "I think you can use this instead of injecting purchase order service here since a refactor", "url": "https://github.com/axelor/axelor-open-suite/pull/6178#discussion_r541065242", "createdAt": "2020-12-11T16:21:57Z", "author": {"login": "ale-axelor"}, "path": "axelor-supplychain/src/main/java/com/axelor/apps/supplychain/service/PurchaseOrderServiceSupplychainImpl.java", "diffHunk": "@@ -365,4 +374,95 @@ public void updateToValidatedStatus(PurchaseOrder purchaseOrder) {\n     purchaseOrder.setStatusSelect(PurchaseOrderRepository.STATUS_VALIDATED);\n     purchaseOrderRepo.save(purchaseOrder);\n   }\n+\n+  @Override\n+  public String createShipmentCostLine(PurchaseOrder purchaseOrder) throws AxelorException {\n+    PurchaseOrderService purchaseOrderService = Beans.get(PurchaseOrderService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf9fde53133187ab448ced3991c3b7507465fc6"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3371, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}