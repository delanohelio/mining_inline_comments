{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjE2OTQx", "number": 5196, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NjoxOFrODqxm6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo1NDowM1rODqxx1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTc5NTYxOnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/service/FixedAssetServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NjoxOFrOF6ujfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NjoxOFrOF6ujfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNDQ3Nw==", "bodyText": "you have to set a rounding method to avoid an exception", "url": "https://github.com/axelor/axelor-open-suite/pull/5196#discussion_r397124477", "createdAt": "2020-03-24T12:46:18Z", "author": {"login": "ale-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/service/FixedAssetServiceImpl.java", "diffHunk": "@@ -359,14 +406,17 @@ private FixedAssetLine generateProrataDepreciationLine(\n     FixedAssetLine fixedAssetLine = new FixedAssetLine();\n     fixedAssetLine.setDepreciationDate(disposalDate);\n     BigDecimal prorataTemporis =\n-        new BigDecimal(monthsBetweenDates / fixedAsset.getPeriodicityInMonth().floatValue());\n+        BigDecimal.valueOf(monthsBetweenDates)\n+            .divide(BigDecimal.valueOf(fixedAsset.getPeriodicityInMonth()))\n+            .setScale(6);\n \n     int scale = Beans.get(AppBaseService.class).getNbDecimalDigitForUnitPrice();\n     int numberOfDepreciation =\n         fixedAsset.getFixedAssetCategory().getIsProrataTemporis()\n             ? fixedAsset.getNumberOfDepreciation() - 1\n             : fixedAsset.getNumberOfDepreciation();\n-    float depreciationRate = 1f / numberOfDepreciation * 100f;\n+    BigDecimal depreciationRate =\n+        BigDecimal.ONE.divide(BigDecimal.valueOf(numberOfDepreciation * 100));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d41de6002db0a437b63c3f72ef7f2a3242c792"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTgwMDAzOnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/service/FixedAssetServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NzozMVrOF6umQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NzozMVrOF6umQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNTE4NA==", "bodyText": "put 6 in a static variable in the class, since this is used multiple times", "url": "https://github.com/axelor/axelor-open-suite/pull/5196#discussion_r397125184", "createdAt": "2020-03-24T12:47:31Z", "author": {"login": "ale-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/service/FixedAssetServiceImpl.java", "diffHunk": "@@ -359,14 +406,17 @@ private FixedAssetLine generateProrataDepreciationLine(\n     FixedAssetLine fixedAssetLine = new FixedAssetLine();\n     fixedAssetLine.setDepreciationDate(disposalDate);\n     BigDecimal prorataTemporis =\n-        new BigDecimal(monthsBetweenDates / fixedAsset.getPeriodicityInMonth().floatValue());\n+        BigDecimal.valueOf(monthsBetweenDates)\n+            .divide(BigDecimal.valueOf(fixedAsset.getPeriodicityInMonth()))\n+            .setScale(6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d41de6002db0a437b63c3f72ef7f2a3242c792"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTgyMzU2OnYy", "diffSide": "RIGHT", "path": "axelor-account/src/main/java/com/axelor/apps/account/service/FixedAssetServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo1NDowM1rOF6u1MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo1NDowM1rOF6u1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyOTAwOQ==", "bodyText": "Use the Month enum instead of int.", "url": "https://github.com/axelor/axelor-open-suite/pull/5196#discussion_r397129009", "createdAt": "2020-03-24T12:54:03Z", "author": {"login": "ale-axelor"}, "path": "axelor-account/src/main/java/com/axelor/apps/account/service/FixedAssetServiceImpl.java", "diffHunk": "@@ -168,44 +169,90 @@ private LocalDate addPeriodicity(\n     return depreciationDate;\n   }\n \n-  private BigDecimal computeDepreciationValue(FixedAsset fixedAsset, boolean isLinear) {\n+  protected BigDecimal computeDepreciationValue(FixedAsset fixedAsset, boolean isLinear) {\n     BigDecimal depreciationValue = BigDecimal.ZERO;\n     depreciationValue =\n         this.computeDepreciation(fixedAsset, fixedAsset.getGrossValue(), true, isLinear);\n     return depreciationValue;\n   }\n \n-  private BigDecimal computeProrataTemporis(FixedAsset fixedAsset, boolean isFirstYear) {\n-    float prorataTemporis = 1;\n+  protected BigDecimal computeProrataTemporis(FixedAsset fixedAsset, boolean isFirstYear) {\n+    BigDecimal prorataTemporis = BigDecimal.ONE;\n     if (isFirstYear\n         && fixedAsset.getFixedAssetCategory().getIsProrataTemporis()\n         && !fixedAsset.getAcquisitionDate().equals(fixedAsset.getFirstDepreciationDate())) {\n \n       LocalDate acquisitionDate = fixedAsset.getAcquisitionDate();\n       LocalDate depreciationDate = fixedAsset.getFirstDepreciationDate();\n \n-      long nbDaysOfPeriod =\n-          DateTool.daysBetween(\n-              DateTool.minusMonths(depreciationDate, fixedAsset.getPeriodicityInMonth()),\n-              depreciationDate,\n-              false);\n-      long nbDaysBetweenAcqAndFirstDepDate =\n-          DateTool.daysBetween(acquisitionDate, depreciationDate, false) + 1;\n+      int acquisitionYear = acquisitionDate.getYear();\n+      int acquisitionMonth = acquisitionDate.getMonthValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d41de6002db0a437b63c3f72ef7f2a3242c792"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3461, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}