{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTI4MTk0", "number": 1790, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyMzowN1rODu4zJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMjo0N1rOD0wSmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDkxNjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyMzowN1rOGBA5rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyMzowN1rOGBA5rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjUyNg==", "bodyText": "Keeping a hardcoded list for this is not really the best idea.\nI get that this will save a lot of performance though...\nBy using a switch case here with the values SMOKER, LECTERN, etc... you will be breaking 1.13 compatibility though since those constants do not exist then.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403716526", "createdAt": "2020-04-05T15:23:07Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        switch (block.getType()) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+            case SHULKER_BOX:\n+            case WHITE_SHULKER_BOX:\n+            case ORANGE_SHULKER_BOX:\n+            case MAGENTA_SHULKER_BOX:\n+            case LIGHT_BLUE_SHULKER_BOX:\n+            case YELLOW_SHULKER_BOX:\n+            case LIME_SHULKER_BOX:\n+            case PINK_SHULKER_BOX:\n+            case GRAY_SHULKER_BOX:\n+            case LIGHT_GRAY_SHULKER_BOX:\n+            case CYAN_SHULKER_BOX:\n+            case PURPLE_SHULKER_BOX:\n+            case BLUE_SHULKER_BOX:\n+            case BROWN_SHULKER_BOX:\n+            case GREEN_SHULKER_BOX:\n+            case RED_SHULKER_BOX:\n+            case BLACK_SHULKER_BOX:\n+            case ENDER_CHEST:\n+            case BARREL:\n+            case BLAST_FURNACE:\n+            case LECTERN:\n+            case SMOKER:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDkxNzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyMzozOVrOGBA6AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyMzozOVrOGBA6AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjYwOQ==", "bodyText": "Please create a private empty constructor here to prevent instantiation.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403716609", "createdAt": "2020-04-05T15:23:39Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    public static boolean hasInventory(Block block) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDkxOTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyNToyNFrOGBA69w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyNToyNFrOGBA69w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjg1NQ==", "bodyText": "Never use wildcard imports...", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403716855", "createdAt": "2020-04-05T15:25:24Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -14,6 +15,8 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import com.google.gson.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDkyMDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyNjo1NlrOGBA7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyNjo1NlrOGBA7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzAzNw==", "bodyText": "An AssertionError is completely inappropriate here.\nNo Assertion was made and catching an exception just to throw another one serves no benefit here.\nYou hsould instead properly log the exception rather than creating a new one that makes no real sense here.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717037", "createdAt": "2020-04-05T15:26:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -378,14 +376,21 @@ private static BlockInfoConfig parseBlockInfo(Location l, String json) {\n         }\n     }\n \n-    private static String serializeBlockInfo(Config cfg) {\n-        JsonObject json = new JsonObject();\n \n-        for (String key : cfg.getKeys()) {\n-            json.add(key, new JsonPrimitive(cfg.getString(key)));\n+    private static String serializeBlockInfo(Config cfg) {\n+        try {\n+            StringWriter stringWriter = new StringWriter();\n+            JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+            jsonWriter.setLenient(true);\n+            jsonWriter.beginObject();\n+            for (String key : cfg.getKeys()) {\n+                jsonWriter.name(key).value(cfg.getString(key));\n+            }\n+            jsonWriter.endObject();\n+            return stringWriter.toString();\n+        } catch (IOException e) {\n+            throw new AssertionError(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDkyMDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyNzoxNFrOGBA7yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNzoyNjozMFrOGBB2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzA2NA==", "bodyText": "What exactly is the advantage of using this right here?", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717064", "createdAt": "2020-04-05T15:27:14Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -378,14 +376,21 @@ private static BlockInfoConfig parseBlockInfo(Location l, String json) {\n         }\n     }\n \n-    private static String serializeBlockInfo(Config cfg) {\n-        JsonObject json = new JsonObject();\n \n-        for (String key : cfg.getKeys()) {\n-            json.add(key, new JsonPrimitive(cfg.getString(key)));\n+    private static String serializeBlockInfo(Config cfg) {\n+        try {\n+            StringWriter stringWriter = new StringWriter();\n+            JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+            jsonWriter.setLenient(true);\n+            jsonWriter.beginObject();\n+            for (String key : cfg.getKeys()) {\n+                jsonWriter.name(key).value(cfg.getString(key));\n+            }\n+            jsonWriter.endObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczMTc5OQ==", "bodyText": "It's same as JsonObject#toString(), but because we don't need the object, we can use JsonWriter directly without creating a new JsonObject.\nThis part of code is get called pretty often and keep showing on profiler. I need to measure it more to see if it could help with performance.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403731799", "createdAt": "2020-04-05T17:23:41Z", "author": {"login": "DNx5"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -378,14 +376,21 @@ private static BlockInfoConfig parseBlockInfo(Location l, String json) {\n         }\n     }\n \n-    private static String serializeBlockInfo(Config cfg) {\n-        JsonObject json = new JsonObject();\n \n-        for (String key : cfg.getKeys()) {\n-            json.add(key, new JsonPrimitive(cfg.getString(key)));\n+    private static String serializeBlockInfo(Config cfg) {\n+        try {\n+            StringWriter stringWriter = new StringWriter();\n+            JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+            jsonWriter.setLenient(true);\n+            jsonWriter.beginObject();\n+            for (String key : cfg.getKeys()) {\n+                jsonWriter.name(key).value(cfg.getString(key));\n+            }\n+            jsonWriter.endObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzA2NA=="}, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczMjE3NA==", "bodyText": "Alright, I see. Some actual performance figures would be cool but I will mark this one as resolved nonetheless. \ud83d\udc4d", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403732174", "createdAt": "2020-04-05T17:26:30Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -378,14 +376,21 @@ private static BlockInfoConfig parseBlockInfo(Location l, String json) {\n         }\n     }\n \n-    private static String serializeBlockInfo(Config cfg) {\n-        JsonObject json = new JsonObject();\n \n-        for (String key : cfg.getKeys()) {\n-            json.add(key, new JsonPrimitive(cfg.getString(key)));\n+    private static String serializeBlockInfo(Config cfg) {\n+        try {\n+            StringWriter stringWriter = new StringWriter();\n+            JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+            jsonWriter.setLenient(true);\n+            jsonWriter.beginObject();\n+            for (String key : cfg.getKeys()) {\n+                jsonWriter.name(key).value(cfg.getString(key));\n+            }\n+            jsonWriter.endObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzA2NA=="}, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDkyMjExOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyODozMVrOGBA8Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyODozMVrOGBA8Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzIxNQ==", "bodyText": "All of that could be reduced to one if-statement. other than having 17 cases here.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717215", "createdAt": "2020-04-05T15:28:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        switch (block.getType()) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+            case SHULKER_BOX:\n+            case WHITE_SHULKER_BOX:\n+            case ORANGE_SHULKER_BOX:\n+            case MAGENTA_SHULKER_BOX:\n+            case LIGHT_BLUE_SHULKER_BOX:\n+            case YELLOW_SHULKER_BOX:\n+            case LIME_SHULKER_BOX:\n+            case PINK_SHULKER_BOX:\n+            case GRAY_SHULKER_BOX:\n+            case LIGHT_GRAY_SHULKER_BOX:\n+            case CYAN_SHULKER_BOX:\n+            case PURPLE_SHULKER_BOX:\n+            case BLUE_SHULKER_BOX:\n+            case BROWN_SHULKER_BOX:\n+            case GREEN_SHULKER_BOX:\n+            case RED_SHULKER_BOX:\n+            case BLACK_SHULKER_BOX:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNDkyMzEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyOToxNVrOGBA81g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjowNDowMVrOGDq_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzMzNA==", "bodyText": "Is this of any use to non-cargo related classes? If no, then it may be moved to the cargo package.\nOtherwise it is fine to stay here.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717334", "createdAt": "2020-04-05T15:29:15Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwMzM0Mw==", "bodyText": "It looks like only cargo needed this, I think I will move it.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406503343", "createdAt": "2020-04-09T22:04:01Z", "author": {"login": "DNx5"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzMzNA=="}, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTAwMDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNjo0NTowNFrOGBBjAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwMTo0NDo0MlrOGBFfIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcyNzEwNw==", "bodyText": "I'd just do name().endsWith(\"SHULKER_BOX\") saves a lot of code", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403727107", "createdAt": "2020-04-05T16:45:04Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -15,32 +16,26 @@ public static boolean hasInventory(Block block) {\n             case DROPPER:\n             case HOPPER:\n             case BREWING_STAND:\n-            case SHULKER_BOX:\n-            case WHITE_SHULKER_BOX:\n-            case ORANGE_SHULKER_BOX:\n-            case MAGENTA_SHULKER_BOX:\n-            case LIGHT_BLUE_SHULKER_BOX:\n-            case YELLOW_SHULKER_BOX:\n-            case LIME_SHULKER_BOX:\n-            case PINK_SHULKER_BOX:\n-            case GRAY_SHULKER_BOX:\n-            case LIGHT_GRAY_SHULKER_BOX:\n-            case CYAN_SHULKER_BOX:\n-            case PURPLE_SHULKER_BOX:\n-            case BLUE_SHULKER_BOX:\n-            case BROWN_SHULKER_BOX:\n-            case GREEN_SHULKER_BOX:\n-            case RED_SHULKER_BOX:\n-            case BLACK_SHULKER_BOX:\n             case ENDER_CHEST:\n             case BARREL:\n             case BLAST_FURNACE:\n             case LECTERN:\n             case SMOKER:\n                 return true;\n             default:\n-                return false;\n+                return isShulkerBox(block);\n         }\n     }\n \n+    public static boolean isShulkerBox(Block block) {\n+        Material type = block.getType();\n+        return type == Material.SHULKER_BOX || type == Material.WHITE_SHULKER_BOX || type == Material.ORANGE_SHULKER_BOX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcyNzQ3NQ==", "bodyText": "Should I remove the method?", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403727475", "createdAt": "2020-04-05T16:47:38Z", "author": {"login": "DNx5"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -15,32 +16,26 @@ public static boolean hasInventory(Block block) {\n             case DROPPER:\n             case HOPPER:\n             case BREWING_STAND:\n-            case SHULKER_BOX:\n-            case WHITE_SHULKER_BOX:\n-            case ORANGE_SHULKER_BOX:\n-            case MAGENTA_SHULKER_BOX:\n-            case LIGHT_BLUE_SHULKER_BOX:\n-            case YELLOW_SHULKER_BOX:\n-            case LIME_SHULKER_BOX:\n-            case PINK_SHULKER_BOX:\n-            case GRAY_SHULKER_BOX:\n-            case LIGHT_GRAY_SHULKER_BOX:\n-            case CYAN_SHULKER_BOX:\n-            case PURPLE_SHULKER_BOX:\n-            case BLUE_SHULKER_BOX:\n-            case BROWN_SHULKER_BOX:\n-            case GREEN_SHULKER_BOX:\n-            case RED_SHULKER_BOX:\n-            case BLACK_SHULKER_BOX:\n             case ENDER_CHEST:\n             case BARREL:\n             case BLAST_FURNACE:\n             case LECTERN:\n             case SMOKER:\n                 return true;\n             default:\n-                return false;\n+                return isShulkerBox(block);\n         }\n     }\n \n+    public static boolean isShulkerBox(Block block) {\n+        Material type = block.getType();\n+        return type == Material.SHULKER_BOX || type == Material.WHITE_SHULKER_BOX || type == Material.ORANGE_SHULKER_BOX", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcyNzEwNw=="}, "originalCommit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc5MTY0OQ==", "bodyText": "I agree, this all can be reduced to the simple .endsWith statement which would be much simpler. I don't think we need an entire method for this.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403791649", "createdAt": "2020-04-06T01:44:42Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -15,32 +16,26 @@ public static boolean hasInventory(Block block) {\n             case DROPPER:\n             case HOPPER:\n             case BREWING_STAND:\n-            case SHULKER_BOX:\n-            case WHITE_SHULKER_BOX:\n-            case ORANGE_SHULKER_BOX:\n-            case MAGENTA_SHULKER_BOX:\n-            case LIGHT_BLUE_SHULKER_BOX:\n-            case YELLOW_SHULKER_BOX:\n-            case LIME_SHULKER_BOX:\n-            case PINK_SHULKER_BOX:\n-            case GRAY_SHULKER_BOX:\n-            case LIGHT_GRAY_SHULKER_BOX:\n-            case CYAN_SHULKER_BOX:\n-            case PURPLE_SHULKER_BOX:\n-            case BLUE_SHULKER_BOX:\n-            case BROWN_SHULKER_BOX:\n-            case GREEN_SHULKER_BOX:\n-            case RED_SHULKER_BOX:\n-            case BLACK_SHULKER_BOX:\n             case ENDER_CHEST:\n             case BARREL:\n             case BLAST_FURNACE:\n             case LECTERN:\n             case SMOKER:\n                 return true;\n             default:\n-                return false;\n+                return isShulkerBox(block);\n         }\n     }\n \n+    public static boolean isShulkerBox(Block block) {\n+        Material type = block.getType();\n+        return type == Material.SHULKER_BOX || type == Material.WHITE_SHULKER_BOX || type == Material.ORANGE_SHULKER_BOX", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcyNzEwNw=="}, "originalCommit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODI2NzczOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoyNTowM1rOGBf1rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoyNTowM1rOGBf1rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMzQwNg==", "bodyText": "This could be reduced in size to just Math.min(amount, getMaxStackSize", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r404223406", "createdAt": "2020-04-06T16:25:03Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -204,26 +208,28 @@ else if (stack.getType() == Material.BLAZE_POWDER) {\n         }\n \n         for (int slot = minSlot; slot < maxSlot; slot++) {\n-            ItemStack is = inv.getContents()[slot];\n+            ItemStack is = contents[slot];\n \n             if (is == null) {\n                 inv.setItem(slot, stack.clone());\n                 return null;\n             } \n-            else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), new CustomItem(stack, 1), true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                int amount = is.getAmount() + stack.getAmount();\n-                \n-                if (amount > is.getType().getMaxStackSize()) {\n-                    is.setAmount(is.getType().getMaxStackSize());\n-                    stack.setAmount(amount - is.getType().getMaxStackSize());\n-                } \n-                else {\n-                    is.setAmount(amount);\n-                    stack = null;\n-                }\n+            else {\n+                if (SlimefunUtils.isItemSimilar(is, stack, true, false)\n+                        && is.getAmount() < is.getType().getMaxStackSize()) {\n+                    int amount = is.getAmount() + stack.getAmount();\n \n-                inv.setItem(slot, is);\n-                return stack;\n+                    if (amount > is.getType().getMaxStackSize()) {\n+                        is.setAmount(is.getType().getMaxStackSize());\n+                        stack.setAmount(amount - is.getType().getMaxStackSize());\n+                    } else {\n+                        is.setAmount(amount);\n+                        stack = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjY5MzU2OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjowNjozN1rOGDrDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwOToyMDowMFrOGD1rcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNDI2Nw==", "bodyText": "I don't know why, but 0.13 just didn't work. Seems like the repo is not up to date", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406504267", "createdAt": "2020-04-09T22:06:37Z", "author": {"login": "DNx5"}, "path": "pom.xml", "diffHunk": "@@ -216,7 +216,7 @@\n         <dependency>\n             <groupId>com.github.thebusybiscuit</groupId>\n             <artifactId>CS-CoreLib2</artifactId>\n-            <version>0.12</version>\n+            <version>0b974b0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8c07884cbddcb09552731f7e09cc99265a83f5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNTM5MQ==", "bodyText": "0.13 works fine for me and also for our GitHub CI. Maybe delete your .m2 maven cache and try to build it again.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406525391", "createdAt": "2020-04-09T23:10:35Z", "author": {"login": "TheBusyBiscuit"}, "path": "pom.xml", "diffHunk": "@@ -216,7 +216,7 @@\n         <dependency>\n             <groupId>com.github.thebusybiscuit</groupId>\n             <artifactId>CS-CoreLib2</artifactId>\n-            <version>0.12</version>\n+            <version>0b974b0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNDI2Nw=="}, "originalCommit": {"oid": "fa8c07884cbddcb09552731f7e09cc99265a83f5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MzM3MA==", "bodyText": "I mean, its not compatible with minecraft version 1.13.2\nI did clear the maven cache. It download the same library version", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406543370", "createdAt": "2020-04-10T00:16:46Z", "author": {"login": "DNx5"}, "path": "pom.xml", "diffHunk": "@@ -216,7 +216,7 @@\n         <dependency>\n             <groupId>com.github.thebusybiscuit</groupId>\n             <artifactId>CS-CoreLib2</artifactId>\n-            <version>0.12</version>\n+            <version>0b974b0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNDI2Nw=="}, "originalCommit": {"oid": "fa8c07884cbddcb09552731f7e09cc99265a83f5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjY3ODM4NQ==", "bodyText": "Oh that is fine.\nBackwards compatibility with 1.13 is a bit broken in current versions, that will be fixed.\nYou don't have to worry about that right now though, since it is a different project.\nSimply build against the latest version.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406678385", "createdAt": "2020-04-10T09:20:00Z", "author": {"login": "TheBusyBiscuit"}, "path": "pom.xml", "diffHunk": "@@ -216,7 +216,7 @@\n         <dependency>\n             <groupId>com.github.thebusybiscuit</groupId>\n             <artifactId>CS-CoreLib2</artifactId>\n-            <version>0.12</version>\n+            <version>0b974b0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNDI2Nw=="}, "originalCommit": {"oid": "fa8c07884cbddcb09552731f7e09cc99265a83f5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjgzODU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzowMVrOGDsYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzowMVrOGDsYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjA0Nw==", "bodyText": "Slimefun has a built-in method for that. And there is no need for making that a field here.\nYou can do SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14) instead.\nYour method would break for all 1.15 servers since you check for the exact version, not the minimum.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406526047", "createdAt": "2020-04-09T23:13:01Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import io.github.thebusybiscuit.cscorelib2.reflection.ReflectionUtils;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    private static final boolean is_1_14 = ReflectionUtils.isVersion(\"v1_14_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjg0MDcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzoyOVrOGDsZYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzoyOVrOGDsZYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjMwNw==", "bodyText": "I don't think Ender Chests have Inventories that you can interact with...\nSince those are per-player not per-block.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406526307", "createdAt": "2020-04-09T23:13:29Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import io.github.thebusybiscuit.cscorelib2.reflection.ReflectionUtils;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    private static final boolean is_1_14 = ReflectionUtils.isVersion(\"v1_14_\");\n+\n+    private BlockUtils() {}\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        Material type = block.getType();\n+        switch (type) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+            case ENDER_CHEST:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjg0MjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/OreCrusher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxNDowOVrOGDsabQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxNDo1OVrOGDsbUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjU3Mw==", "bodyText": "Never override the .register() method.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406526573", "createdAt": "2020-04-09T23:14:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/OreCrusher.java", "diffHunk": "@@ -38,18 +39,21 @@ public OreCrusher() {\n \t\t\t\t},\n \t\t\t\tBlockFace.SELF\n \t\t);\n-\t\t\n \t\taddItemSetting(doubleOres);\n-\t\t\n+\t}\n+\n+\t@Override\n+\tpublic void register(SlimefunAddon addon) {\n+\t\tsuper.register(addon);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjgwMQ==", "bodyText": "You should use the .postRegister() method instead for this.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406526801", "createdAt": "2020-04-09T23:14:59Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/OreCrusher.java", "diffHunk": "@@ -38,18 +39,21 @@ public OreCrusher() {\n \t\t\t\t},\n \t\t\t\tBlockFace.SELF\n \t\t);\n-\t\t\n \t\taddItemSetting(doubleOres);\n-\t\t\n+\t}\n+\n+\t@Override\n+\tpublic void register(SlimefunAddon addon) {\n+\t\tsuper.register(addon);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjU3Mw=="}, "originalCommit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDM2MTUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzoxNDo1OFrOGEttKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzoxNDo1OFrOGEttKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjMzMQ==", "bodyText": "Space between package and imports", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r407596331", "createdAt": "2020-04-13T17:14:58Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f505d6f7405f377e11e73430bef2f965c6ec6aad"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDM2MzE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzoxNToyOVrOGEtuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzoxNToyOVrOGEtuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjYwNw==", "bodyText": "Space between imports and class.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r407596607", "createdAt": "2020-04-13T17:15:29Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+final class BlockUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f505d6f7405f377e11e73430bef2f965c6ec6aad"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIyMDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1Mzo1NVrOGJG_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMjozMjoxMVrOGJbOog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDgzNQ==", "bodyText": "There is no sense in storing this as a class member for each instance of CargoNet, things like that rather belong into the NetworkManager with an appropriate getter and javadocs comments.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412204835", "createdAt": "2020-04-21T13:53:55Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -32,6 +32,8 @@\n     private final Set<Location> outputNodes = new HashSet<>();\n \n     private final Map<Location, Integer> roundRobin = new HashMap<>();\n+    private final int tickDelay = SlimefunPlugin.getCfg().getInt(\"URID.cargo-network-tick-delay\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUyMzIyMA==", "bodyText": "This is specifically made only for Cargo network. I don't think NetworkManager class should contain this, or should I made it for all types of Network?\nHow about moving it into:\nif (tickDelayThreshold < SlimefunPlugin.getCfg().getInt(\"URID.cargo-network-tick-delay\")) {\nI see this kind of usage in some place", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412523220", "createdAt": "2020-04-21T22:04:02Z", "author": {"login": "DNx5"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -32,6 +32,8 @@\n     private final Set<Location> outputNodes = new HashSet<>();\n \n     private final Map<Location, Integer> roundRobin = new HashMap<>();\n+    private final int tickDelay = SlimefunPlugin.getCfg().getInt(\"URID.cargo-network-tick-delay\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDgzNQ=="}, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjUzNjQ4Mg==", "bodyText": "Retrieving the value directly from the config should definitely be avoided, that would just contradict the prupose of optimizing that method anyway.\nEven if the value is only for cargo nets, the NetworkManager may still be an appropriate place for that, if you simply call it \"cargoTickDelay\" accordingly.\nTo elaborate: The NetworkManager is just a singleton that holds references to all Networks and some config values.\nAlternatively, if you really think it should stay in the CargoNet you should definitely make that field static, as it is not cargo network specific but rather a static constant.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412536482", "createdAt": "2020-04-21T22:32:11Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -32,6 +32,8 @@\n     private final Set<Location> outputNodes = new HashSet<>();\n \n     private final Map<Location, Integer> roundRobin = new HashMap<>();\n+    private final int tickDelay = SlimefunPlugin.getCfg().getInt(\"URID.cargo-network-tick-delay\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDgzNQ=="}, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIyMTg1OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NDoxMFrOGJHAEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NDoxMFrOGJHAEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNTA3NQ==", "bodyText": "This should still just be left at the most recent version...", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412205075", "createdAt": "2020-04-21T13:54:10Z", "author": {"login": "TheBusyBiscuit"}, "path": "pom.xml", "diffHunk": "@@ -216,7 +216,7 @@\n         <dependency>\n             <groupId>com.github.thebusybiscuit</groupId>\n             <artifactId>CS-CoreLib2</artifactId>\n-            <version>0.13</version>\n+            <version>0b974b0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTIyOTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NTozN1rOGJHEvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1NTozN1rOGJHEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjI2OA==", "bodyText": "This could probably use some comments explaining what it does.\nI know that this delays cargo ticks to only be actually run every X time but it isn't immediately clear, so there should better be a comment for that.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412206268", "createdAt": "2020-04-21T13:55:37Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -175,6 +177,12 @@ private void run(Block b, Set<Location> destinations, Map<Integer, List<Location\n             display();\n         }\n \n+        if (tickDelayThreshold < tickDelay) {\n+            tickDelayThreshold++;\n+            return;\n+        }\n+        tickDelayThreshold = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI0OTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1OToxOVrOGJHRDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1OToxOVrOGJHRDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwOTQyMA==", "bodyText": "This statement would probably always return true if Im not mistaken since you removed these default values and added a continue; there.\nSo this condition could maybe be removed if Im not mistaken.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412209420", "createdAt": "2020-04-21T13:59:19Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -198,72 +206,67 @@ else if (frequency >= 0 && frequency < 16) {\n         // (Apart from ChestTerminal Buses)\n         for (Map.Entry<Location, Integer> entry : inputs.entrySet()) {\n             Location input = entry.getKey();\n-            Optional<Block> inputTarget = getAttachedBlock(input.getBlock());\n-\n-            if (inputTarget.isPresent()) {\n-                int previousSlot = -1;\n-\n-                Config cfg = BlockStorage.getLocationInfo(input);\n-                boolean roundrobin = \"true\".equals(cfg.getString(\"round-robin\"));\n+            Optional<Block> attachedBlock = getAttachedBlock(input.getBlock());\n+            if (!attachedBlock.isPresent()) {\n+                continue;\n+            }\n \n-                ItemStackAndInteger slot = CargoUtils.withdraw(input.getBlock(), inputTarget.get(), Integer.parseInt(cfg.getString(\"index\")));\n-                ItemStack stack = null;\n+            Block inputTarget = attachedBlock.get();\n+            Config cfg = BlockStorage.getLocationInfo(input);\n+            boolean roundrobin = \"true\".equals(cfg.getString(\"round-robin\"));\n \n-                if (slot != null) {\n-                    stack = slot.getItem();\n-                    previousSlot = slot.getInt();\n-                }\n+            ItemStackAndInteger slot = CargoUtils.withdraw(input.getBlock(), inputTarget, Integer.parseInt(cfg.getString(\"index\")));\n+            if (slot == null) {\n+                continue;\n+            }\n \n-                if (stack != null) {\n-                    List<Location> outputs = output.get(entry.getValue());\n+            ItemStack stack = slot.getItem();\n+            int previousSlot = slot.getInt();\n+            List<Location> outputs = output.get(entry.getValue());\n \n-                    if (outputs != null) {\n-                        List<Location> outputlist = new LinkedList<>(outputs);\n+            if (outputs != null) {\n+                List<Location> outputlist = new LinkedList<>(outputs);\n \n-                        if (roundrobin) {\n-                            int index = roundRobin.getOrDefault(input, 0);\n+                if (roundrobin) {\n+                    int index = roundRobin.getOrDefault(input, 0);\n \n                             if (index < outputlist.size()) {\n                                 for (int i = 0; i < index; i++) {\n                                     Location temp = outputlist.remove(0);\n                                     outputlist.add(temp);\n                                 }\n \n-                                index++;\n-                            }\n-                            else {\n-                                index = 1;\n-                            }\n+                        index++;\n+                    }\n+                    else {\n+                        index = 1;\n+                    }\n \n-                            roundRobin.put(input, index);\n-                        }\n+                    roundRobin.put(input, index);\n+                }\n \n-                        for (Location out : outputlist) {\n-                            Optional<Block> target = getAttachedBlock(out.getBlock());\n+                for (Location out : outputlist) {\n+                    Optional<Block> target = getAttachedBlock(out.getBlock());\n \n-                            if (target.isPresent()) {\n-                                stack = CargoUtils.insert(out.getBlock(), target.get(), stack, -1);\n-                                if (stack == null) break;\n-                            }\n-                        }\n+                    if (target.isPresent()) {\n+                        stack = CargoUtils.insert(out.getBlock(), target.get(), stack, -1);\n+                        if (stack == null) break;\n                     }\n+                }\n+            }\n+\n+            if (stack != null && previousSlot > -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI2MzY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMTo1NFrOGJHZow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMTo1NFrOGJHZow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTYxOQ==", "bodyText": "maxSize would probably be a more sensible name for this variable here. \"inSlotMaxSize\" is rather unpleasant to read.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412211619", "createdAt": "2020-04-21T14:01:54Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI2NDgyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMjowOVrOGJHaXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMjowOVrOGJHaXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTgwNA==", "bodyText": "currentAmount  would probably be a more sensible name for this variable here. \"inSlotAmount\" is rather unpleasant to read.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412211804", "createdAt": "2020-04-21T14:02:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();\n+            int inSlotAmount = itemInSlot.getAmount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 174}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI3NDUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMzo1MFrOGJHgGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowMzo1MFrOGJHgGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMzI3NA==", "bodyText": "This should me Math.min, not Math.max\nsince now you are taking the maximum of the two which will make the amount potentially exceed the max size.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412213274", "createdAt": "2020-04-21T14:03:50Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();\n+            int inSlotAmount = itemInSlot.getAmount();\n+            if (SlimefunUtils.isItemSimilar(itemInSlot, wrapper, true, false) && inSlotAmount < inSlotMaxSize) {\n+                int amount = inSlotAmount + stack.getAmount();\n \n-                    menu.replaceExistingItem(slot, is);\n-                    return stack;\n+                itemInSlot.setAmount(Math.max(amount, inSlotMaxSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MTI3NjA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowNDowOFrOGJHhBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowNDowOFrOGJHhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMzUxMA==", "bodyText": "Looks like you are missing a space there.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412213510", "createdAt": "2020-04-21T14:04:08Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();\n+            int inSlotAmount = itemInSlot.getAmount();\n+            if (SlimefunUtils.isItemSimilar(itemInSlot, wrapper, true, false) && inSlotAmount < inSlotMaxSize) {\n+                int amount = inSlotAmount + stack.getAmount();\n \n-                    menu.replaceExistingItem(slot, is);\n-                    return stack;\n+                itemInSlot.setAmount(Math.max(amount, inSlotMaxSize));\n+                if (amount > inSlotMaxSize) {\n+                    stack.setAmount(amount - inSlotMaxSize);\n+                }\n+                else {\n+                    stack = null;\n                 }\n-            }\n-        }\n-        else {\n-            BlockState state = target.getState();\n \n-            if (state instanceof InventoryHolder) {\n-                return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                menu.replaceExistingItem(slot, itemInSlot);\n+                return stack;\n             }\n         }\n \n         return stack;\n     }\n \n     private static ItemStack insertIntoVanillaInventory(ItemStack stack, Inventory inv) {\n-        int minSlot = 0;\n-        int maxSlot = inv.getContents().length;\n+        ItemStack[] contents = inv.getContents();\n+    \tint minSlot = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzYzNjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzo0NDoyNlrOGJdEyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzo0NDoyNlrOGJdEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NjczMA==", "bodyText": "I just told you to NOT do that...", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412566730", "createdAt": "2020-04-21T23:44:26Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -175,6 +176,14 @@ private void run(Block b, Set<Location> destinations, Map<Integer, List<Location\n             display();\n         }\n \n+        // Skip ticking if the threshold is not reached. The delay is not same as minecraft tick,\n+        // but it's based on 'custom-ticker-delay' config.\n+        if (tickDelayThreshold < SlimefunPlugin.getCfg().getInt(\"URID.cargo-network-tick-delay\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034ff1948a51d7392d8ad40e45bd2fe058e2ca4d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NjQzNzM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMjo0N1rOGJ2JXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMjo0N1rOGJ2JXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3NzUwMg==", "bodyText": "Check if it's a normal SHULKER_BOX and then ends with _SHULKER_BOX. Slight performance improvement for the basic shulker.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412977502", "createdAt": "2020-04-22T13:22:47Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+\n+final class BlockUtils {\n+\n+    private BlockUtils() {}\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        Material type = block.getType();\n+        switch (type) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+                return true;\n+            default:\n+                if (type.name().endsWith(\"SHULKER_BOX\")) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf0487cb7a4c880fa2d5777cc584e9ebb0ceb37"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 475, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}