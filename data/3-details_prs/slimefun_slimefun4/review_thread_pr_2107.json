{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNTI5NDQw", "number": 2107, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTozN1rOEQOy6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTozNToyMFrOERYAIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDU1MDgxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTozN1rOG0RXRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTozN1rOG0RXRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2MzYyMw==", "bodyText": "You should add your name here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r457463623", "createdAt": "2020-07-20T14:55:37Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,223 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d252e5a2b507b2898b21cc16f010fcff61f606e8"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDU1MjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/commands/subcommands/VersionsCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTo1MlrOG0RYLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo1NTo1MlrOG0RYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ2Mzg1NQ==", "bodyText": "I'd rather display this on a seperate line (if != null)", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r457463855", "createdAt": "2020-07-20T14:55:52Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/commands/subcommands/VersionsCommand.java", "diffHunk": "@@ -36,7 +35,11 @@ public void onExecute(CommandSender sender, String[] args) {\n             sender.sendMessage(ChatColors.color(\"&a\" + Bukkit.getName() + \" &2\" + ReflectionUtils.getVersion()));\n             sender.sendMessage(\"\");\n             sender.sendMessage(ChatColors.color(\"&aCS-CoreLib &2v\" + SlimefunPlugin.getCSCoreLibVersion()));\n-            sender.sendMessage(ChatColors.color(\"&aSlimefun &2v\" + SlimefunPlugin.getVersion()));\n+            sender.sendMessage(ChatColors.color(\"&aSlimefun &2v\" + SlimefunPlugin.getVersion())\n+                + (SlimefunPlugin.getMetricsService().getVersion() != null\n+                ? \" (Metrics build: #\" + SlimefunPlugin.getMetricsService().getVersion() + ')'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d252e5a2b507b2898b21cc16f010fcff61f606e8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjI5ODQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/commands/subcommands/VersionsCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0Njo1NlrOG0h3Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0Njo1NlrOG0h3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczMzk4Ng==", "bodyText": "With \"seperate line\" I meant an actual seperate line in chat. I think it should be it's own line.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r457733986", "createdAt": "2020-07-20T22:46:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/commands/subcommands/VersionsCommand.java", "diffHunk": "@@ -36,7 +35,12 @@ public void onExecute(CommandSender sender, String[] args) {\n             sender.sendMessage(ChatColors.color(\"&a\" + Bukkit.getName() + \" &2\" + ReflectionUtils.getVersion()));\n             sender.sendMessage(\"\");\n             sender.sendMessage(ChatColors.color(\"&aCS-CoreLib &2v\" + SlimefunPlugin.getCSCoreLibVersion()));\n-            sender.sendMessage(ChatColors.color(\"&aSlimefun &2v\" + SlimefunPlugin.getVersion()));\n+\n+            String version = \"&aSlimefun &2v\" + SlimefunPlugin.getVersion();\n+            if (SlimefunPlugin.getMetricsService().getVersion() != null)\n+                version += \"&7 (Metrics build: &2#\" + SlimefunPlugin.getMetricsService().getVersion() + ')';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31a293486b99779ccfea8f02e2abf382848d7a4"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMwNjk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/github/GitHubConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0OTo1NlrOG0h7-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo0OTo1NlrOG0h7-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTE2Mw==", "bodyText": "You write to the cache but never read from it?", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r457735163", "createdAt": "2020-07-20T22:49:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/github/GitHubConnector.java", "diffHunk": "@@ -48,58 +41,30 @@ public void pullFile() {\n         }\n \n         try {\n-            URL website = new URL(\"https://api.github.com/repos/\" + repository + getURLSuffix());\n-\n-            URLConnection connection = website.openConnection();\n-            connection.setConnectTimeout(8000);\n-            connection.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n-            connection.addRequestProperty(\"User-Agent\", \"Slimefun 4 GitHub Agent (by TheBusyBiscuit)\");\n-            connection.setDoOutput(true);\n-\n-            try (ReadableByteChannel channel = Channels.newChannel(connection.getInputStream())) {\n-                try (FileOutputStream stream = new FileOutputStream(file)) {\n-                    stream.getChannel().transferFrom(channel, 0, Long.MAX_VALUE);\n-                    parseData();\n-                }\n-            }\n-        }\n-        catch (IOException e) {\n+            HttpResponse<JsonNode> resp = Unirest\n+                .get(\"https://api.github.com/repos/\" + repository + getURLSuffix())\n+                .header(\"User-Agent\", \"Slimefun4 (https://github.com/Slimefun)\")\n+                .asJson();\n+\n+            if (resp.isSuccess()) {\n+                onSuccess(resp.getBody());\n+                writeCacheFile(resp.getBody());\n+            } else\n+                Slimefun.getLogger().log(Level.WARNING, \"Failed to fetch {0}\",\n+                    repository + getURLSuffix());\n+        } catch (UnirestException e) {\n             if (github.isLoggingEnabled()) {\n                 Slimefun.getLogger().log(Level.WARNING, \"Could not connect to GitHub in time.\");\n             }\n-\n-            if (hasData()) {\n-                parseData();\n-            }\n-            else {\n-                onFailure();\n-            }\n+            onFailure();\n         }\n     }\n \n-    public boolean hasData() {\n-        return getFile().exists();\n-    }\n-\n-    public File getFile() {\n-        return file;\n-    }\n-\n-    public void parseData() {\n-        try (BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(getFile()), StandardCharsets.UTF_8))) {\n-            StringBuilder builder = new StringBuilder();\n-\n-            String line;\n-            while ((line = reader.readLine()) != null) {\n-                builder.append(line);\n-            }\n-\n-            JsonElement element = new JsonParser().parse(builder.toString());\n-            onSuccess(element);\n-        }\n-        catch (IOException x) {\n-            Slimefun.getLogger().log(Level.SEVERE, x, () -> \"An Error occurred while parsing GitHub-Data for Slimefun \" + SlimefunPlugin.getVersion());\n-            onFailure();\n+    private void writeCacheFile(JsonNode node) {\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            fos.write(node.toString().getBytes(StandardCharsets.UTF_8));\n+        } catch (IOException e) {\n+            Slimefun.getLogger().log(Level.WARNING, \"Failed to populate GitHub cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31a293486b99779ccfea8f02e2abf382848d7a4"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMxMzA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/github/GitHubIssuesTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1MTo1MVrOG0h_Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1MTo1MVrOG0h_Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNTk3NA==", "bodyText": "ewwww, Iterable, I think you should rather do it like you did in the other class:\nhttps://github.com/TheBusyBiscuit/Slimefun4/pull/2107/files#diff-3e7b2257540224b37738ee5d7874df07R89-R90", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r457735974", "createdAt": "2020-07-20T22:51:51Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/github/GitHubIssuesTracker.java", "diffHunk": "@@ -25,15 +29,16 @@\n     }\n \n     @Override\n-    public void onSuccess(JsonElement element) {\n-        if (element.isJsonArray()) {\n-            JsonArray array = element.getAsJsonArray();\n+    public void onSuccess(JsonNode element) {\n+        if (element.isArray()) {\n+            JSONArray array = element.getArray();\n \n             int issues = 0;\n             int pullRequests = 0;\n \n-            for (JsonElement elem : array) {\n-                JsonObject obj = elem.getAsJsonObject();\n+            // Don't even question why this is an Iterable<Object>\n+            for (Object elem : array) {\n+                JSONObject obj = (JSONObject) elem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31a293486b99779ccfea8f02e2abf382848d7a4"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMxODA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1Mzo1MFrOG0iCAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1Mzo1MFrOG0iCAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjcwNQ==", "bodyText": "I think we should have a failsafe to not lose metrics data.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r457736705", "createdAt": "2020-07-20T22:53:50Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            download(getLatestVersion());\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && plugin.getConfig().getBoolean(\"metrics.auto-update\")\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    info(\"Metrics v\" + s + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }\n+\n+    /**\n+     * Checks for a new update and compares it against the current version.\n+     * If there is a new version available then this returns true.\n+     *\n+     * @param currentVersion The current version which is being used.\n+     * @return True if there is an update available.\n+     */\n+    public boolean checkForUpdate(String currentVersion) {\n+        if (currentVersion == null || currentVersion.equals(\"UNOFFICIAL\")) return false;\n+\n+        int latest = getLatestVersion();\n+        if (latest > Integer.parseInt(currentVersion)) {\n+            download(latest);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets the latest version available as an int.\n+     * This is an internal method used by {@link #checkForUpdate(String)}.\n+     * If it cannot get the version for whatever reason this will return 0, effectively always\n+     * being behind.\n+     *\n+     * @return The latest version as an integer or -1 if it failed to fetch.\n+     */\n+    private int getLatestVersion() {\n+        try {\n+            HttpResponse<JsonNode> response = Unirest.get(GH_API + \"/releases/latest\")\n+                .asJson();\n+            if (!response.isSuccess()) return -1;\n+\n+            JsonNode node = response.getBody();\n+\n+            if (node == null) return -1;\n+\n+            return node.getObject().getInt(\"tag_name\");\n+        } catch (UnirestException e) {\n+            plugin.getLogger().log(Level.SEVERE, \"Failed to fetch latest builds for SFMetrics\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * Downloads the version specified to Slimefun's data folder.\n+     *\n+     * @param version The version to download.\n+     */\n+    private void download(int version) {\n+        try {\n+            if (metricFile.exists())\n+                metricFile.delete();\n+\n+            info(\"# Starting download of MetricsModule build: #\" + version);\n+            AtomicInteger lastPercentPosted = new AtomicInteger();\n+            HttpResponse<File> response = Unirest.get(GH_REPO_RELEASES + \"/\" + version\n+                + \"/\" + REPO_NAME + \".jar\")\n+                .downloadMonitor((b, fileName, bytesWritten, totalBytes) -> {\n+                    int percent = (int) (20 * (Math.round((((double) bytesWritten / totalBytes) * 100) / 20)));\n+\n+                    if (percent != 0 && percent != lastPercentPosted.get()) {\n+                        info(\"# Downloading... \" + percent + \"% \" +\n+                            \"(\" + bytesWritten + \"/\" + totalBytes + \" bytes)\");\n+                        lastPercentPosted.set(percent);\n+                    }\n+                })\n+                .asFile(metricFile.getPath());\n+            if (response.isSuccess()) {\n+                info(\"Successfully downloaded \" + REPO_NAME + \" build: \" + version);\n+                metricVersion = String.valueOf(version);\n+            } else\n+                // If it failed we don't want this to be like a file containing \"404 not found\"\n+                metricFile.delete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31a293486b99779ccfea8f02e2abf382848d7a4"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NjMxOTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NDo0NlrOG0iDJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjo1NDo0NlrOG0iDJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzczNjk5Ng==", "bodyText": "You made a method for this, so use it :LUL:\nhasAutoUpdates()", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r457736996", "createdAt": "2020-07-20T22:54:46Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,224 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            download(getLatestVersion());\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && plugin.getConfig().getBoolean(\"metrics.auto-update\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d31a293486b99779ccfea8f02e2abf382848d7a4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDQyMzM0OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MjoyN1rOG1vegw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0MjoyN1rOG1vegw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNTU3MQ==", "bodyText": "a loose bracket on the run :o", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459005571", "createdAt": "2020-07-22T18:42:27Z", "author": {"login": "TheBusyBiscuit"}, "path": "pom.xml", "diffHunk": "@@ -327,6 +327,18 @@\n             <version>1.7</version>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.konghq</groupId>\n+            <artifactId>unirest-java</artifactId>\n+            <version>3.8.06</version>\n+            <exclusions\n+            >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646eba615f131bccb2ff9496f5905376104b412"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDU3Nzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/github/GitHubConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOToyNjoxOFrOG1w_hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOToyNjoxOFrOG1w_hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzMDQwNw==", "bodyText": "You should probably specify the Reader to use StandardCharsets.UTF_8 here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459030407", "createdAt": "2020-07-22T19:26:18Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/github/GitHubConnector.java", "diffHunk": "@@ -48,58 +46,51 @@ public void pullFile() {\n         }\n \n         try {\n-            URL website = new URL(\"https://api.github.com/repos/\" + repository + getURLSuffix());\n-\n-            URLConnection connection = website.openConnection();\n-            connection.setConnectTimeout(8000);\n-            connection.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n-            connection.addRequestProperty(\"User-Agent\", \"Slimefun 4 GitHub Agent (by TheBusyBiscuit)\");\n-            connection.setDoOutput(true);\n-\n-            try (ReadableByteChannel channel = Channels.newChannel(connection.getInputStream())) {\n-                try (FileOutputStream stream = new FileOutputStream(file)) {\n-                    stream.getChannel().transferFrom(channel, 0, Long.MAX_VALUE);\n-                    parseData();\n-                }\n-            }\n-        }\n-        catch (IOException e) {\n+            HttpResponse<JsonNode> resp = Unirest\n+                .get(\"https://api.github.com/repos/\" + repository + getURLSuffix())\n+                .header(\"User-Agent\", \"Slimefun4 (https://github.com/Slimefun)\")\n+                .asJson();\n+\n+            if (resp.isSuccess()) {\n+                onSuccess(resp.getBody());\n+                writeCacheFile(resp.getBody());\n+            } else\n+                Slimefun.getLogger().log(Level.WARNING, \"Failed to fetch {0}\",\n+                    repository + getURLSuffix());\n+        } catch (UnirestException e) {\n             if (github.isLoggingEnabled()) {\n                 Slimefun.getLogger().log(Level.WARNING, \"Could not connect to GitHub in time.\");\n             }\n \n-            if (hasData()) {\n-                parseData();\n-            }\n-            else {\n-                onFailure();\n+            // It has the cached file, let's just read that then\n+            if (file.exists()) {\n+                JsonNode cache = readCacheFile();\n+                if (cache != null) {\n+                    onSuccess(cache);\n+                    return;\n+                }\n             }\n-        }\n-    }\n \n-    public boolean hasData() {\n-        return getFile().exists();\n+            // If the request failed and it failed to read the cache then call onFailure.\n+            onFailure();\n+        }\n     }\n \n-    public File getFile() {\n-        return file;\n+    private JsonNode readCacheFile() {\n+        try (BufferedReader br = new BufferedReader(new FileReader(file))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDU4MDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOToyNzoxMFrOG1xBQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozNzoyNVrOG1xWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzMDg1MQ==", "bodyText": "Is this method really really necessary here?", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459030851", "createdAt": "2020-07-22T19:27:10Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    info(\"Metrics build \" + s + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }\n+\n+    /**\n+     * Checks for a new update and compares it against the current version.\n+     * If there is a new version available then this returns true.\n+     *\n+     * @param currentVersion The current version which is being used.\n+     * @return True if there is an update available.\n+     */\n+    public boolean checkForUpdate(String currentVersion) {\n+        if (currentVersion == null || currentVersion.equals(\"UNOFFICIAL\")) return false;\n+\n+        int latest = getLatestVersion();\n+        if (latest > Integer.parseInt(currentVersion)) {\n+            return download(latest);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets the latest version available as an int.\n+     * This is an internal method used by {@link #checkForUpdate(String)}.\n+     * If it cannot get the version for whatever reason this will return 0, effectively always\n+     * being behind.\n+     *\n+     * @return The latest version as an integer or -1 if it failed to fetch.\n+     */\n+    private int getLatestVersion() {\n+        try {\n+            HttpResponse<JsonNode> response = Unirest.get(GH_API + \"/releases/latest\")\n+                .asJson();\n+            if (!response.isSuccess()) return -1;\n+\n+            JsonNode node = response.getBody();\n+\n+            if (node == null) return -1;\n+\n+            return node.getObject().getInt(\"tag_name\");\n+        } catch (UnirestException e) {\n+            plugin.getLogger().log(Level.SEVERE, \"Failed to fetch latest builds for SFMetrics\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * Downloads the version specified to Slimefun's data folder.\n+     *\n+     * @param version The version to download.\n+     */\n+    private boolean download(int version) {\n+        File f = new File(plugin.getDataFolder(), \"Metrics-\" + version + \".jar\");\n+\n+        try {\n+            info(\"# Starting download of MetricsModule build: #\" + version);\n+            AtomicInteger lastPercentPosted = new AtomicInteger();\n+            HttpResponse<File> response = Unirest.get(GH_REPO_RELEASES + \"/\" + version\n+                + \"/\" + REPO_NAME + \".jar\")\n+                .downloadMonitor((b, fileName, bytesWritten, totalBytes) -> {\n+                    int percent = (int) (20 * (Math.round((((double) bytesWritten / totalBytes) * 100) / 20)));\n+\n+                    if (percent != 0 && percent != lastPercentPosted.get()) {\n+                        info(\"# Downloading... \" + percent + \"% \" +\n+                            \"(\" + bytesWritten + \"/\" + totalBytes + \" bytes)\");\n+                        lastPercentPosted.set(percent);\n+                    }\n+                })\n+                .asFile(f.getPath());\n+            if (response.isSuccess()) {\n+                info(\"Successfully downloaded \" + REPO_NAME + \" build: \" + version);\n+\n+                // Replace the metric file with the new one\n+                Files.move(f.toPath(), metricFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+\n+                metricVersion = String.valueOf(version);\n+                return true;\n+            }\n+        } catch (UnirestException e) {\n+            plugin.getLogger().log(Level.WARNING, \"Failed to fetch the latest jar file from the\" +\n+                \" builds page. Perhaps GitHub is down.\");\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING, \"Failed to replace the old metric file with the \" +\n+                \"new one. Please do this manually! Error: {0}\", e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private void info(String str) {\n+        plugin.getLogger().info(str);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNjI5MQ==", "bodyText": "Necessary? No but useful? yes. This code has changed a lot, it saved a lot of code.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459036291", "createdAt": "2020-07-22T19:37:25Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    info(\"Metrics build \" + s + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }\n+\n+    /**\n+     * Checks for a new update and compares it against the current version.\n+     * If there is a new version available then this returns true.\n+     *\n+     * @param currentVersion The current version which is being used.\n+     * @return True if there is an update available.\n+     */\n+    public boolean checkForUpdate(String currentVersion) {\n+        if (currentVersion == null || currentVersion.equals(\"UNOFFICIAL\")) return false;\n+\n+        int latest = getLatestVersion();\n+        if (latest > Integer.parseInt(currentVersion)) {\n+            return download(latest);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets the latest version available as an int.\n+     * This is an internal method used by {@link #checkForUpdate(String)}.\n+     * If it cannot get the version for whatever reason this will return 0, effectively always\n+     * being behind.\n+     *\n+     * @return The latest version as an integer or -1 if it failed to fetch.\n+     */\n+    private int getLatestVersion() {\n+        try {\n+            HttpResponse<JsonNode> response = Unirest.get(GH_API + \"/releases/latest\")\n+                .asJson();\n+            if (!response.isSuccess()) return -1;\n+\n+            JsonNode node = response.getBody();\n+\n+            if (node == null) return -1;\n+\n+            return node.getObject().getInt(\"tag_name\");\n+        } catch (UnirestException e) {\n+            plugin.getLogger().log(Level.SEVERE, \"Failed to fetch latest builds for SFMetrics\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * Downloads the version specified to Slimefun's data folder.\n+     *\n+     * @param version The version to download.\n+     */\n+    private boolean download(int version) {\n+        File f = new File(plugin.getDataFolder(), \"Metrics-\" + version + \".jar\");\n+\n+        try {\n+            info(\"# Starting download of MetricsModule build: #\" + version);\n+            AtomicInteger lastPercentPosted = new AtomicInteger();\n+            HttpResponse<File> response = Unirest.get(GH_REPO_RELEASES + \"/\" + version\n+                + \"/\" + REPO_NAME + \".jar\")\n+                .downloadMonitor((b, fileName, bytesWritten, totalBytes) -> {\n+                    int percent = (int) (20 * (Math.round((((double) bytesWritten / totalBytes) * 100) / 20)));\n+\n+                    if (percent != 0 && percent != lastPercentPosted.get()) {\n+                        info(\"# Downloading... \" + percent + \"% \" +\n+                            \"(\" + bytesWritten + \"/\" + totalBytes + \" bytes)\");\n+                        lastPercentPosted.set(percent);\n+                    }\n+                })\n+                .asFile(f.getPath());\n+            if (response.isSuccess()) {\n+                info(\"Successfully downloaded \" + REPO_NAME + \" build: \" + version);\n+\n+                // Replace the metric file with the new one\n+                Files.move(f.toPath(), metricFile.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+\n+                metricVersion = String.valueOf(version);\n+                return true;\n+            }\n+        } catch (UnirestException e) {\n+            plugin.getLogger().log(Level.WARNING, \"Failed to fetch the latest jar file from the\" +\n+                \" builds page. Perhaps GitHub is down.\");\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING, \"Failed to replace the old metric file with the \" +\n+                \"new one. Please do this manually! Error: {0}\", e.getMessage());\n+        }\n+        return false;\n+    }\n+\n+    private void info(String str) {\n+        plugin.getLogger().info(str);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzMDg1MQ=="}, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDU5MDE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozMDowNFrOG1xHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozMDowNFrOG1xHLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzMjM2Ng==", "bodyText": "We have a numeric pattern in PatternUtils, would be best to use that here to avoid formatting issues.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459032366", "createdAt": "2020-07-22T19:30:04Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    info(\"Metrics build \" + s + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }\n+\n+    /**\n+     * Checks for a new update and compares it against the current version.\n+     * If there is a new version available then this returns true.\n+     *\n+     * @param currentVersion The current version which is being used.\n+     * @return True if there is an update available.\n+     */\n+    public boolean checkForUpdate(String currentVersion) {\n+        if (currentVersion == null || currentVersion.equals(\"UNOFFICIAL\")) return false;\n+\n+        int latest = getLatestVersion();\n+        if (latest > Integer.parseInt(currentVersion)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDYwMzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozNDowMlrOG1xPnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozODoxOFrOG1xYcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNDUyNA==", "bodyText": "Is this method even needed here? Or is it for when someone uses /reload?", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459034524", "createdAt": "2020-07-22T19:34:02Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    info(\"Metrics build \" + s + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNjc4Nw==", "bodyText": "It's to cleanup the class loader, if we didn't close it and a reload happened (or an update to the module) then we may leak classes and these class resources.\nThis is ran when re-starting (on new version) and onDisable", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459036787", "createdAt": "2020-07-22T19:38:18Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    info(\"Metrics build \" + s + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNDUyNA=="}, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NDYwODI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozNToyMlrOG1xSVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxOTozOToyNlrOG1xa4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTIyMA==", "bodyText": "Also isnt this gonna check for updates twice if it finds one? Since it will re-run that method? Should probably set newlyDownloaded true inside download() to prevent that.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459035220", "createdAt": "2020-07-22T19:35:22Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNzQxMQ==", "bodyText": "Err, yeah could save a call.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459037411", "createdAt": "2020-07-22T19:39:26Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,234 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        boolean newlyDownloaded = false;\n+        if (!metricFile.exists()) {\n+            info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAzNTIyMA=="}, "originalCommit": {"oid": "d139ba1fa572fbf3645ccb36ab9086338540dac4"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTE1MzAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozMzoyN1rOG12igA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozMzoyN1rOG12igA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyMTI4MA==", "bodyText": "This line has now become redundant.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459121280", "createdAt": "2020-07-22T22:33:27Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+    private boolean newlyDownloaded = false;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        if (!metricFile.exists()) {\n+            plugin.getLogger().info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d547d611513da1e61c45d4596847571f926763b0"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTE1ODAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozNToyNVrOG12lpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozNToyNVrOG12lpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyMjA4Nw==", "bodyText": "Minor thing, but I'd add a # here before the version \ud83e\udd13", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459122087", "createdAt": "2020-07-22T22:35:25Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+    private boolean newlyDownloaded = false;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        if (!metricFile.exists()) {\n+            plugin.getLogger().info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                plugin.getLogger().info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    plugin.getLogger().info(\"Metrics build \" + s + \" started.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d547d611513da1e61c45d4596847571f926763b0"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTE1OTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozNjowNFrOG12mYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozNjowNFrOG12mYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyMjI3NQ==", "bodyText": "With the regex this UNOFFICIAL comparison is actually also redundant now", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459122275", "createdAt": "2020-07-22T22:36:04Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+    private boolean newlyDownloaded = false;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        if (!metricFile.exists()) {\n+            plugin.getLogger().info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+            newlyDownloaded = true;\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                plugin.getLogger().info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String s = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    plugin.getLogger().info(\"Metrics build \" + s + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }\n+\n+    /**\n+     * Checks for a new update and compares it against the current version.\n+     * If there is a new version available then this returns true.\n+     *\n+     * @param currentVersion The current version which is being used.\n+     * @return True if there is an update available.\n+     */\n+    public boolean checkForUpdate(String currentVersion) {\n+        if (currentVersion == null\n+            || currentVersion.equals(\"UNOFFICIAL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d547d611513da1e61c45d4596847571f926763b0"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTE2Mjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozNzo0NFrOG12ong==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjozNzo0NFrOG12ong==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEyMjg0Ng==", "bodyText": "Also about this location, we have a cache subfolder in the data folder for all the github files, should we move it there? Then they wont be bothered with this jar sitting inbetween their configs?", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459122846", "createdAt": "2020-07-22T22:37:44Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,237 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+    private boolean newlyDownloaded = false;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+        this.metricFile = new File(plugin.getDataFolder(), REPO_NAME + \".jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d547d611513da1e61c45d4596847571f926763b0"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjU0Mjk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTozNDo0OFrOG2DG_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTozNDo0OFrOG2DG_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyNzIzMQ==", "bodyText": "spacing issue", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459327231", "createdAt": "2020-07-23T09:34:48Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,238 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+    private boolean newlyDownloaded = false;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+\n+        File parentFile = new File(plugin.getDataFolder(), \"cache\" + File.separatorChar + \"modules\");\n+        if (!parentFile.exists())\n+            parentFile.mkdirs();\n+\n+        this.metricFile = new File(parentFile   , REPO_NAME + \".jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f92bd6c28f44be33accf49dfb9d9e890b971315"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjU0NDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTozNToyMFrOG2DIKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTozNToyMFrOG2DIKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMyNzUyOA==", "bodyText": "Should probably also be in the cache/modules folder.", "url": "https://github.com/Slimefun/Slimefun4/pull/2107#discussion_r459327528", "createdAt": "2020-07-23T09:35:20Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/MetricsService.java", "diffHunk": "@@ -0,0 +1,238 @@\n+package io.github.thebusybiscuit.slimefun4.core.services;\n+\n+import javax.annotation.Nullable;\n+import java.io.File;\n+import java.io.IOException;\n+import java.lang.reflect.Method;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.StandardCopyOption;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import kong.unirest.HttpResponse;\n+import kong.unirest.JsonNode;\n+import kong.unirest.Unirest;\n+import kong.unirest.UnirestException;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import org.bukkit.plugin.Plugin;\n+\n+/**\n+ * This Class represents a Metrics Service that sends data to https://bstats.org/\n+ * This data is used to analyse the usage of this {@link Plugin}.\n+ * <p>\n+ * You can find more info in the README file of this Project on GitHub. <br>\n+ * <b>Note:</b> To start the metrics you will need to be calling {@link #start()}\n+ *\n+ * @author TheBusyBiscuit\n+ * @author WalshyDev\n+ */\n+public class MetricsService {\n+\n+    private static final String REPO_NAME = \"MetricsModule\";\n+    private static final String GH_API = \"https://api.github.com/repos/Slimefun/\" + REPO_NAME;\n+    private static final String GH_REPO_RELEASES = \"https://github.com/Slimefun/\" + REPO_NAME\n+        + \"/releases/download\";\n+\n+    private final SlimefunPlugin plugin;\n+    private final File metricFile;\n+\n+    private URLClassLoader moduleClassLoader;\n+    private String metricVersion = null;\n+    private boolean newlyDownloaded = false;\n+\n+    static {\n+        Unirest.config()\n+            .concurrency(2, 1)\n+            .setDefaultHeader(\"User-Agent\", \"MetricsModule Auto-Updater\")\n+            .setDefaultHeader(\"Accept\", \"application/vnd.github.v3+json\")\n+            .enableCookieManagement(false)\n+            .cookieSpec(\"ignoreCookies\");\n+    }\n+\n+    public MetricsService(SlimefunPlugin plugin) {\n+        this.plugin = plugin;\n+\n+        File parentFile = new File(plugin.getDataFolder(), \"cache\" + File.separatorChar + \"modules\");\n+        if (!parentFile.exists())\n+            parentFile.mkdirs();\n+\n+        this.metricFile = new File(parentFile   , REPO_NAME + \".jar\");\n+    }\n+\n+    /**\n+     * This method loads the metric module and starts the metrics collection.\n+     */\n+    public void start() {\n+        if (!metricFile.exists()) {\n+            plugin.getLogger().info(REPO_NAME + \" does not exist, downloading...\");\n+            if (!download(getLatestVersion())) {\n+                plugin.getLogger().warning(\"Failed to start metrics as the file could not be downloaded.\");\n+                return;\n+            }\n+        }\n+\n+        try {\n+            // Load the jar file into a child class loader using the SF PluginClassLoader\n+            // as a parent.\n+            moduleClassLoader = URLClassLoader.newInstance(new URL[] { metricFile.toURI().toURL() },\n+                plugin.getClass().getClassLoader());\n+            Class<?> cl = moduleClassLoader.loadClass(\"dev.walshy.sfmetrics.MetricsModule\");\n+\n+            metricVersion = cl.getPackage().getImplementationVersion();\n+\n+            // If it has not been newly downloaded, auto-updates are on AND there's a new version\n+            // then cleanup, download and start\n+            if (!newlyDownloaded\n+                && hasAutoUpdates()\n+                && checkForUpdate(metricVersion)\n+            ) {\n+                plugin.getLogger().info(\"Cleaning up and re-loading Metrics.\");\n+                cleanUp();\n+                start();\n+                return;\n+            }\n+\n+            // Finally, we're good to start this.\n+            Method start = cl.getDeclaredMethod(\"start\");\n+            String version = cl.getPackage().getImplementationVersion();\n+\n+            // This is required to be sync due to bStats.\n+            Slimefun.runSync(() -> {\n+                try {\n+                    start.invoke(null);\n+                    plugin.getLogger().info(\"Metrics build #\" + version + \" started.\");\n+                } catch (Exception e) {\n+                    plugin.getLogger().log(Level.WARNING, \"Failed to start metrics.\", e);\n+                }\n+            });\n+        } catch (Exception e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Failed to load the metrics module. Maybe the jar is corrupt?\", e);\n+        }\n+    }\n+\n+    /**\n+     * This will close the child classloader and mark all the resources held under this no longer\n+     * in use, they will be cleaned up the next GC run.\n+     */\n+    public void cleanUp() {\n+        try {\n+            if (this.moduleClassLoader != null)\n+                this.moduleClassLoader.close();\n+        } catch (IOException e) {\n+            plugin.getLogger().log(Level.WARNING,\n+                \"Could not clean up module class loader. Some memory may have been leaked.\");\n+        }\n+    }\n+\n+    /**\n+     * Checks for a new update and compares it against the current version.\n+     * If there is a new version available then this returns true.\n+     *\n+     * @param currentVersion The current version which is being used.\n+     * @return True if there is an update available.\n+     */\n+    public boolean checkForUpdate(String currentVersion) {\n+        if (currentVersion == null || !PatternUtils.NUMERIC.matcher(currentVersion).matches()) {\n+            return false;\n+        }\n+\n+        int latest = getLatestVersion();\n+        if (latest > Integer.parseInt(currentVersion)) {\n+            return download(latest);\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Gets the latest version available as an int.\n+     * This is an internal method used by {@link #checkForUpdate(String)}.\n+     * If it cannot get the version for whatever reason this will return 0, effectively always\n+     * being behind.\n+     *\n+     * @return The latest version as an integer or -1 if it failed to fetch.\n+     */\n+    private int getLatestVersion() {\n+        try {\n+            HttpResponse<JsonNode> response = Unirest.get(GH_API + \"/releases/latest\")\n+                .asJson();\n+            if (!response.isSuccess()) return -1;\n+\n+            JsonNode node = response.getBody();\n+\n+            if (node == null) return -1;\n+\n+            return node.getObject().getInt(\"tag_name\");\n+        } catch (UnirestException e) {\n+            plugin.getLogger().log(Level.SEVERE, \"Failed to fetch latest builds for SFMetrics\");\n+            return -1;\n+        }\n+    }\n+\n+    /**\n+     * Downloads the version specified to Slimefun's data folder.\n+     *\n+     * @param version The version to download.\n+     */\n+    private boolean download(int version) {\n+        File f = new File(plugin.getDataFolder(), \"Metrics-\" + version + \".jar\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f92bd6c28f44be33accf49dfb9d9e890b971315"}, "originalPosition": 182}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 419, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}