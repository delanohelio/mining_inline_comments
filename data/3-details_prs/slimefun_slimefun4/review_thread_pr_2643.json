{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0MTczMzQ3", "number": 2643, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoyNzowMFrOFISqsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMToxNjoyNVrOFO2wQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjM4NzY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/localization/SlimefunLocalization.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDoyNzowMFrOIKIQsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzowNzozMFrOIKkOmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5MjAxOA==", "bodyText": "Its weird because the variable name recipient for some reason sounds wrong in this context (same for all the other uses in this file), and I would then suggest something like \"endUser\" but it literally means the same thing, guess my mind is just acting weird xD", "url": "https://github.com/Slimefun/Slimefun4/pull/2643#discussion_r547492018", "createdAt": "2020-12-22T20:27:00Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/localization/SlimefunLocalization.java", "diffHunk": "@@ -215,76 +215,76 @@ public ItemStack getRecipeTypeItem(Player p, RecipeType recipeType) {\n     }\n \n     @Override\n-    public void sendMessage(CommandSender sender, String key, boolean addPrefix) {\n+    public void sendMessage(CommandSender recipient, String key, boolean addPrefix) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd06d0daecda82b441857ddec7bb534b664bb3ea"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MDIzNA==", "bodyText": "Yeah, it sounds weird and it is more accurate. sender had different implications, so despite this sounding weird it is more accurate.", "url": "https://github.com/Slimefun/Slimefun4/pull/2643#discussion_r547950234", "createdAt": "2020-12-23T13:07:30Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/services/localization/SlimefunLocalization.java", "diffHunk": "@@ -215,76 +215,76 @@ public ItemStack getRecipeTypeItem(Player p, RecipeType recipeType) {\n     }\n \n     @Override\n-    public void sendMessage(CommandSender sender, String key, boolean addPrefix) {\n+    public void sendMessage(CommandSender recipient, String key, boolean addPrefix) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5MjAxOA=="}, "originalCommit": {"oid": "bd06d0daecda82b441857ddec7bb534b664bb3ea"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MjM5ODU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/runes/SoulboundRune.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQyMDozMTo1MFrOIKIXcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzowODoxNFrOIKkPdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5Mzc0Ng==", "bodyText": "No need for Validate.notNull here?\nOr is it checked upon in the methods which it calls later on?", "url": "https://github.com/Slimefun/Slimefun4/pull/2643#discussion_r547493746", "createdAt": "2020-12-22T20:31:50Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/runes/SoulboundRune.java", "diffHunk": "@@ -59,7 +60,7 @@ public ItemDropHandler getItemHandler() {\n         };\n     }\n \n-    private void activate(Player p, Item rune) {\n+    private void activate(@Nonnull Player p, @Nonnull Item rune) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd06d0daecda82b441857ddec7bb534b664bb3ea"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MDQ1Mg==", "bodyText": "It's a private method anyway.\nOnly we can call it, so there isn't really any need for param validation since we have full control over what goes into this method.", "url": "https://github.com/Slimefun/Slimefun4/pull/2643#discussion_r547950452", "createdAt": "2020-12-23T13:08:14Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/runes/SoulboundRune.java", "diffHunk": "@@ -59,7 +60,7 @@ public ItemDropHandler getItemHandler() {\n         };\n     }\n \n-    private void activate(Player p, Item rune) {\n+    private void activate(@Nonnull Player p, @Nonnull Item rune) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzQ5Mzc0Ng=="}, "originalCommit": {"oid": "bd06d0daecda82b441857ddec7bb534b664bb3ea"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTIxNDcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/SlimefunItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMToxNjoyNVrOIT3i6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMToyMjo1N1rOIT3vuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzkxNQ==", "bodyText": "Are these comments under the if statements necessary everywhere? They seem pretty self-explanatory to me", "url": "https://github.com/Slimefun/Slimefun4/pull/2643#discussion_r557703915", "createdAt": "2021-01-14T21:16:25Z", "author": {"login": "svr333"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/SlimefunItem.java", "diffHunk": "@@ -1012,6 +1015,90 @@ public void error(@Nonnull String message, @Nonnull Throwable throwable) {\n         }\n     }\n \n+    /**\n+     * This method checks if the given {@link Player} is able to use this {@link SlimefunItem}.\n+     * A {@link Player} can use it if the following conditions apply:\n+     * \n+     * <p>\n+     * <ul>\n+     * <li>The {@link SlimefunItem} is not disabled\n+     * <li>The {@link SlimefunItem} was not disabled for that {@link Player}'s {@link World}.\n+     * <li>The {@link Player} has the required {@link Permission} (if present)\n+     * <li>The {@link Player} has unlocked the required {@link Research} (if present)\n+     * </ul>\n+     * <p>\n+     * \n+     * If any of these conditions evaluate to <code>false</code>, then an optional message will be\n+     * sent to the {@link Player}.\n+     * \n+     * @param p\n+     *            The {@link Player} to check\n+     * @param sendMessage\n+     *            Whether to send that {@link Player} a message response.\n+     * \n+     * @return Whether this {@link Player} is able to use this {@link SlimefunItem}.\n+     */\n+    public boolean canUse(@Nonnull Player p, boolean sendMessage) {\n+        Validate.notNull(p, \"The Player cannot be null!\");\n+\n+        if (getState() == ItemState.VANILLA_FALLBACK) {\n+            // Vanilla items (which fell back) can always be used.\n+            return true;\n+        } else if (isDisabled()) {\n+            // The Item has been disabled in the config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e7a7a9a99a8d7a110a48eedf782b129aa4a5c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwNzE5Mw==", "bodyText": "Better too many comments than too few tbh", "url": "https://github.com/Slimefun/Slimefun4/pull/2643#discussion_r557707193", "createdAt": "2021-01-14T21:22:57Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/Objects/SlimefunItem/SlimefunItem.java", "diffHunk": "@@ -1012,6 +1015,90 @@ public void error(@Nonnull String message, @Nonnull Throwable throwable) {\n         }\n     }\n \n+    /**\n+     * This method checks if the given {@link Player} is able to use this {@link SlimefunItem}.\n+     * A {@link Player} can use it if the following conditions apply:\n+     * \n+     * <p>\n+     * <ul>\n+     * <li>The {@link SlimefunItem} is not disabled\n+     * <li>The {@link SlimefunItem} was not disabled for that {@link Player}'s {@link World}.\n+     * <li>The {@link Player} has the required {@link Permission} (if present)\n+     * <li>The {@link Player} has unlocked the required {@link Research} (if present)\n+     * </ul>\n+     * <p>\n+     * \n+     * If any of these conditions evaluate to <code>false</code>, then an optional message will be\n+     * sent to the {@link Player}.\n+     * \n+     * @param p\n+     *            The {@link Player} to check\n+     * @param sendMessage\n+     *            Whether to send that {@link Player} a message response.\n+     * \n+     * @return Whether this {@link Player} is able to use this {@link SlimefunItem}.\n+     */\n+    public boolean canUse(@Nonnull Player p, boolean sendMessage) {\n+        Validate.notNull(p, \"The Player cannot be null!\");\n+\n+        if (getState() == ItemState.VANILLA_FALLBACK) {\n+            // Vanilla items (which fell back) can always be used.\n+            return true;\n+        } else if (isDisabled()) {\n+            // The Item has been disabled in the config", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzcwMzkxNQ=="}, "originalCommit": {"oid": "739e7a7a9a99a8d7a110a48eedf782b129aa4a5c"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 166, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}