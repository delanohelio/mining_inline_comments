{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTI4MTk0", "number": 1790, "title": "Cargo Network - optimization", "bodyText": "Description\nThis PR add performance improvements in some part of cargo network.\nChanges\n\nReduced calls for Inventory#getContents(), avoiding creating the clone of the inventory's item stacks on each iteration\nAdded utilities to check if a block has inventory, avoiding unnecessary calls to Block#getState() at cost for maintaining the list of inventory blocks\nAdded tick delay option for Cargo Network.\n\nRelated Issues\n\n\nChecklist\n\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.\n I followed the existing code standards and didn't mess up the formatting.\n I did my best to add documentation to any public classes or methods I added.", "createdAt": "2020-04-05T15:18:47Z", "url": "https://github.com/Slimefun/Slimefun4/pull/1790", "merged": true, "mergeCommit": {"oid": "dfb47ddfbbd6269e305f6ef7d5ef200e7e5f0f94"}, "closed": true, "closedAt": "2020-04-23T09:28:44Z", "author": {"login": "DNx5"}, "timelineItems": {"totalCount": 37, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUOigsAH2gAyMzk5MTI4MTk0OjZkOWJkMmNjZjIyMWJkMDUwNWMwZmEyMGM4ZGZkZTgxNDhjMmM0NGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaZcIaAFqTM5ODE4NDQ0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6d9bd2ccf221bd0505c0fa20c8dfde8148c2c44b", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/6d9bd2ccf221bd0505c0fa20c8dfde8148c2c44b", "committedDate": "2020-04-04T05:20:56Z", "message": "Cargo - small performance improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07c2f5263b8411477f59c7262bc6fadd0799247", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/e07c2f5263b8411477f59c7262bc6fadd0799247", "committedDate": "2020-04-05T02:12:07Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/ab41129d6b0eb261018f9ae48dce5af8e414de82", "committedDate": "2020-04-05T02:26:46Z", "message": "Cargo - small performance improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODMwMjUw", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-387830250", "createdAt": "2020-04-05T15:23:07Z", "commit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyMzowN1rOGBA5rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNToyOToxNVrOGBA81g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjUyNg==", "bodyText": "Keeping a hardcoded list for this is not really the best idea.\nI get that this will save a lot of performance though...\nBy using a switch case here with the values SMOKER, LECTERN, etc... you will be breaking 1.13 compatibility though since those constants do not exist then.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403716526", "createdAt": "2020-04-05T15:23:07Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        switch (block.getType()) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+            case SHULKER_BOX:\n+            case WHITE_SHULKER_BOX:\n+            case ORANGE_SHULKER_BOX:\n+            case MAGENTA_SHULKER_BOX:\n+            case LIGHT_BLUE_SHULKER_BOX:\n+            case YELLOW_SHULKER_BOX:\n+            case LIME_SHULKER_BOX:\n+            case PINK_SHULKER_BOX:\n+            case GRAY_SHULKER_BOX:\n+            case LIGHT_GRAY_SHULKER_BOX:\n+            case CYAN_SHULKER_BOX:\n+            case PURPLE_SHULKER_BOX:\n+            case BLUE_SHULKER_BOX:\n+            case BROWN_SHULKER_BOX:\n+            case GREEN_SHULKER_BOX:\n+            case RED_SHULKER_BOX:\n+            case BLACK_SHULKER_BOX:\n+            case ENDER_CHEST:\n+            case BARREL:\n+            case BLAST_FURNACE:\n+            case LECTERN:\n+            case SMOKER:\n+                return true;\n+            default:\n+                return false;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjYwOQ==", "bodyText": "Please create a private empty constructor here to prevent instantiation.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403716609", "createdAt": "2020-04-05T15:23:39Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    public static boolean hasInventory(Block block) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNjg1NQ==", "bodyText": "Never use wildcard imports...", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403716855", "createdAt": "2020-04-05T15:25:24Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -14,6 +15,8 @@\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n+import com.google.gson.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzAzNw==", "bodyText": "An AssertionError is completely inappropriate here.\nNo Assertion was made and catching an exception just to throw another one serves no benefit here.\nYou hsould instead properly log the exception rather than creating a new one that makes no real sense here.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717037", "createdAt": "2020-04-05T15:26:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -378,14 +376,21 @@ private static BlockInfoConfig parseBlockInfo(Location l, String json) {\n         }\n     }\n \n-    private static String serializeBlockInfo(Config cfg) {\n-        JsonObject json = new JsonObject();\n \n-        for (String key : cfg.getKeys()) {\n-            json.add(key, new JsonPrimitive(cfg.getString(key)));\n+    private static String serializeBlockInfo(Config cfg) {\n+        try {\n+            StringWriter stringWriter = new StringWriter();\n+            JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+            jsonWriter.setLenient(true);\n+            jsonWriter.beginObject();\n+            for (String key : cfg.getKeys()) {\n+                jsonWriter.name(key).value(cfg.getString(key));\n+            }\n+            jsonWriter.endObject();\n+            return stringWriter.toString();\n+        } catch (IOException e) {\n+            throw new AssertionError(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzA2NA==", "bodyText": "What exactly is the advantage of using this right here?", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717064", "createdAt": "2020-04-05T15:27:14Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -378,14 +376,21 @@ private static BlockInfoConfig parseBlockInfo(Location l, String json) {\n         }\n     }\n \n-    private static String serializeBlockInfo(Config cfg) {\n-        JsonObject json = new JsonObject();\n \n-        for (String key : cfg.getKeys()) {\n-            json.add(key, new JsonPrimitive(cfg.getString(key)));\n+    private static String serializeBlockInfo(Config cfg) {\n+        try {\n+            StringWriter stringWriter = new StringWriter();\n+            JsonWriter jsonWriter = new JsonWriter(stringWriter);\n+            jsonWriter.setLenient(true);\n+            jsonWriter.beginObject();\n+            for (String key : cfg.getKeys()) {\n+                jsonWriter.name(key).value(cfg.getString(key));\n+            }\n+            jsonWriter.endObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzIxNQ==", "bodyText": "All of that could be reduced to one if-statement. other than having 17 cases here.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717215", "createdAt": "2020-04-05T15:28:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        switch (block.getType()) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+            case SHULKER_BOX:\n+            case WHITE_SHULKER_BOX:\n+            case ORANGE_SHULKER_BOX:\n+            case MAGENTA_SHULKER_BOX:\n+            case LIGHT_BLUE_SHULKER_BOX:\n+            case YELLOW_SHULKER_BOX:\n+            case LIME_SHULKER_BOX:\n+            case PINK_SHULKER_BOX:\n+            case GRAY_SHULKER_BOX:\n+            case LIGHT_GRAY_SHULKER_BOX:\n+            case CYAN_SHULKER_BOX:\n+            case PURPLE_SHULKER_BOX:\n+            case BLUE_SHULKER_BOX:\n+            case BROWN_SHULKER_BOX:\n+            case GREEN_SHULKER_BOX:\n+            case RED_SHULKER_BOX:\n+            case BLACK_SHULKER_BOX:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcxNzMzNA==", "bodyText": "Is this of any use to non-cargo related classes? If no, then it may be moved to the cargo package.\nOtherwise it is fine to stay here.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403717334", "createdAt": "2020-04-05T15:29:15Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+package io.github.thebusybiscuit.slimefun4.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab41129d6b0eb261018f9ae48dce5af8e414de82"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2396db25ad795d9694c6c71f393611f31034b1c4", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/2396db25ad795d9694c6c71f393611f31034b1c4", "committedDate": "2020-04-05T16:25:10Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94614474101c9db20fbe24311783d64244ed7622", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/94614474101c9db20fbe24311783d64244ed7622", "committedDate": "2020-04-05T16:30:19Z", "message": "split shulker boxes check"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3ODM3NzAw", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-387837700", "createdAt": "2020-04-05T16:45:03Z", "commit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNjo0NTowNFrOGBBjAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNjo0NTowNFrOGBBjAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzcyNzEwNw==", "bodyText": "I'd just do name().endsWith(\"SHULKER_BOX\") saves a lot of code", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r403727107", "createdAt": "2020-04-05T16:45:04Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -15,32 +16,26 @@ public static boolean hasInventory(Block block) {\n             case DROPPER:\n             case HOPPER:\n             case BREWING_STAND:\n-            case SHULKER_BOX:\n-            case WHITE_SHULKER_BOX:\n-            case ORANGE_SHULKER_BOX:\n-            case MAGENTA_SHULKER_BOX:\n-            case LIGHT_BLUE_SHULKER_BOX:\n-            case YELLOW_SHULKER_BOX:\n-            case LIME_SHULKER_BOX:\n-            case PINK_SHULKER_BOX:\n-            case GRAY_SHULKER_BOX:\n-            case LIGHT_GRAY_SHULKER_BOX:\n-            case CYAN_SHULKER_BOX:\n-            case PURPLE_SHULKER_BOX:\n-            case BLUE_SHULKER_BOX:\n-            case BROWN_SHULKER_BOX:\n-            case GREEN_SHULKER_BOX:\n-            case RED_SHULKER_BOX:\n-            case BLACK_SHULKER_BOX:\n             case ENDER_CHEST:\n             case BARREL:\n             case BLAST_FURNACE:\n             case LECTERN:\n             case SMOKER:\n                 return true;\n             default:\n-                return false;\n+                return isShulkerBox(block);\n         }\n     }\n \n+    public static boolean isShulkerBox(Block block) {\n+        Material type = block.getType();\n+        return type == Material.SHULKER_BOX || type == Material.WHITE_SHULKER_BOX || type == Material.ORANGE_SHULKER_BOX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDE1NDIz", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-388415423", "createdAt": "2020-04-06T16:25:02Z", "commit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoyNTowM1rOGBf1rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoyNTowM1rOGBf1rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyMzQwNg==", "bodyText": "This could be reduced in size to just Math.min(amount, getMaxStackSize", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r404223406", "createdAt": "2020-04-06T16:25:03Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -204,26 +208,28 @@ else if (stack.getType() == Material.BLAZE_POWDER) {\n         }\n \n         for (int slot = minSlot; slot < maxSlot; slot++) {\n-            ItemStack is = inv.getContents()[slot];\n+            ItemStack is = contents[slot];\n \n             if (is == null) {\n                 inv.setItem(slot, stack.clone());\n                 return null;\n             } \n-            else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), new CustomItem(stack, 1), true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                int amount = is.getAmount() + stack.getAmount();\n-                \n-                if (amount > is.getType().getMaxStackSize()) {\n-                    is.setAmount(is.getType().getMaxStackSize());\n-                    stack.setAmount(amount - is.getType().getMaxStackSize());\n-                } \n-                else {\n-                    is.setAmount(amount);\n-                    stack = null;\n-                }\n+            else {\n+                if (SlimefunUtils.isItemSimilar(is, stack, true, false)\n+                        && is.getAmount() < is.getType().getMaxStackSize()) {\n+                    int amount = is.getAmount() + stack.getAmount();\n \n-                inv.setItem(slot, is);\n-                return stack;\n+                    if (amount > is.getType().getMaxStackSize()) {\n+                        is.setAmount(is.getType().getMaxStackSize());\n+                        stack.setAmount(amount - is.getType().getMaxStackSize());\n+                    } else {\n+                        is.setAmount(amount);\n+                        stack = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94614474101c9db20fbe24311783d64244ed7622"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeab78b174b04e0d6c37bea0564fc1dd52fda3bc", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/aeab78b174b04e0d6c37bea0564fc1dd52fda3bc", "committedDate": "2020-04-09T19:20:54Z", "message": "simplify the shulker boxes check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eb3ee2d53023de10da78932b942c2430c0eb73d", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/9eb3ee2d53023de10da78932b942c2430c0eb73d", "committedDate": "2020-04-09T20:12:30Z", "message": "Simplify and optimize the Cargo insertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa8c07884cbddcb09552731f7e09cc99265a83f5", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/fa8c07884cbddcb09552731f7e09cc99265a83f5", "committedDate": "2020-04-09T21:40:38Z", "message": "fix 1.13 compatibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/75564fc7f1b76949f355de3fddc7421d25c1b13a", "committedDate": "2020-04-09T21:41:10Z", "message": "fix OreCrusher item registration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTYzODYx", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-391163861", "createdAt": "2020-04-09T22:06:37Z", "commit": {"oid": "fa8c07884cbddcb09552731f7e09cc99265a83f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjowNjozN1rOGDrDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjowNjozN1rOGDrDSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUwNDI2Nw==", "bodyText": "I don't know why, but 0.13 just didn't work. Seems like the repo is not up to date", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406504267", "createdAt": "2020-04-09T22:06:37Z", "author": {"login": "DNx5"}, "path": "pom.xml", "diffHunk": "@@ -216,7 +216,7 @@\n         <dependency>\n             <groupId>com.github.thebusybiscuit</groupId>\n             <artifactId>CS-CoreLib2</artifactId>\n-            <version>0.12</version>\n+            <version>0b974b0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa8c07884cbddcb09552731f7e09cc99265a83f5"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTg4Mzkz", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-391188393", "createdAt": "2020-04-09T23:13:01Z", "commit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzowMVrOGDsYXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzowMVrOGDsYXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjA0Nw==", "bodyText": "Slimefun has a built-in method for that. And there is no need for making that a field here.\nYou can do SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14) instead.\nYour method would break for all 1.15 servers since you check for the exact version, not the minimum.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406526047", "createdAt": "2020-04-09T23:13:01Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import io.github.thebusybiscuit.cscorelib2.reflection.ReflectionUtils;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    private static final boolean is_1_14 = ReflectionUtils.isVersion(\"v1_14_\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTg4NTQ5", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-391188549", "createdAt": "2020-04-09T23:13:28Z", "commit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzoyOVrOGDsZYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxMzoyOVrOGDsZYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjMwNw==", "bodyText": "I don't think Ender Chests have Inventories that you can interact with...\nSince those are per-player not per-block.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406526307", "createdAt": "2020-04-09T23:13:29Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/utils/BlockUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.utils;\n+import io.github.thebusybiscuit.cscorelib2.reflection.ReflectionUtils;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+public final class BlockUtils {\n+\n+    private static final boolean is_1_14 = ReflectionUtils.isVersion(\"v1_14_\");\n+\n+    private BlockUtils() {}\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        Material type = block.getType();\n+        switch (type) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+            case ENDER_CHEST:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTg4NzY0", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-391188764", "createdAt": "2020-04-09T23:14:08Z", "commit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxNDowOVrOGDsabQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMzoxNDowOVrOGDsabQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUyNjU3Mw==", "bodyText": "Never override the .register() method.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r406526573", "createdAt": "2020-04-09T23:14:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/OreCrusher.java", "diffHunk": "@@ -38,18 +39,21 @@ public OreCrusher() {\n \t\t\t\t},\n \t\t\t\tBlockFace.SELF\n \t\t);\n-\t\t\n \t\taddItemSetting(doubleOres);\n-\t\t\n+\t}\n+\n+\t@Override\n+\tpublic void register(SlimefunAddon addon) {\n+\t\tsuper.register(addon);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75564fc7f1b76949f355de3fddc7421d25c1b13a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cc2e8c4d2be967d77b0fe9cbe17ad62e84d0fc2", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/4cc2e8c4d2be967d77b0fe9cbe17ad62e84d0fc2", "committedDate": "2020-04-10T00:04:24Z", "message": "Fix OreCrusher, add recipes on post-register"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a5129b1af3c54fb47f5fc4e63c380a6a401e66", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/88a5129b1af3c54fb47f5fc4e63c380a6a401e66", "committedDate": "2020-04-10T00:22:32Z", "message": "Move BlockUtils into cargo package. removed ender chest from the list. use slimefun's method to check minecraft version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c00fb1dc1b78f971dde3717b67950f26e381578b", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/c00fb1dc1b78f971dde3717b67950f26e381578b", "committedDate": "2020-04-10T01:05:17Z", "message": "simplify cargo withdraw methods.\ntrying to reduce unnecessary item clone as much as possible."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4a5e78cc6929a95a7ca6a2bf9a20732b7fcf922", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/e4a5e78cc6929a95a7ca6a2bf9a20732b7fcf922", "committedDate": "2020-04-10T01:08:27Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4\n\n\u0001 Conflicts:\n\u0001\tpom.xml\n\u0001\tsrc/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/OreCrusher.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2233a0314dab1c991452e14f564698a9ff642ced", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/2233a0314dab1c991452e14f564698a9ff642ced", "committedDate": "2020-04-10T06:59:50Z", "message": "added leftover changes, and bug fixes.\nwith possibility of bringing more bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebd89741553183c0c56e65b03e65f8e102a2ee42", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/ebd89741553183c0c56e65b03e65f8e102a2ee42", "committedDate": "2020-04-10T21:18:27Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec6698602c9033b339ed34f056909227ec4acc19", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/ec6698602c9033b339ed34f056909227ec4acc19", "committedDate": "2020-04-10T22:32:18Z", "message": "optimize Cargo Node's filter index saving."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e985698f9f933ff1dcecd64808dcd60ce2796348", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/e985698f9f933ff1dcecd64808dcd60ce2796348", "committedDate": "2020-04-13T13:19:41Z", "message": "Implement cargo network tick delay"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f505d6f7405f377e11e73430bef2f965c6ec6aad", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/f505d6f7405f377e11e73430bef2f965c6ec6aad", "committedDate": "2020-04-13T13:22:15Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/multiblocks/OreCrusher.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjg4NTQ4", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-392288548", "createdAt": "2020-04-13T17:14:57Z", "commit": {"oid": "f505d6f7405f377e11e73430bef2f965c6ec6aad"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzoxNDo1OFrOGEttKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzoxNToyOVrOGEtuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjMzMQ==", "bodyText": "Space between package and imports", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r407596331", "createdAt": "2020-04-13T17:14:58Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f505d6f7405f377e11e73430bef2f965c6ec6aad"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU5NjYwNw==", "bodyText": "Space between imports and class.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r407596607", "createdAt": "2020-04-13T17:15:29Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+final class BlockUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f505d6f7405f377e11e73430bef2f965c6ec6aad"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "078407782165d31530b7afc999c08fefe5e8903e", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/078407782165d31530b7afc999c08fefe5e8903e", "committedDate": "2020-04-20T08:32:45Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java\n\u0001\tsrc/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/70b5a5a9d188e5055026d29682591c3dfcc7d152", "committedDate": "2020-04-20T08:49:17Z", "message": "code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MzUzMDIz", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-397353023", "createdAt": "2020-04-21T13:53:55Z", "commit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMzo1Mzo1NVrOGJG_Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNDowNDowOFrOGJHhBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNDgzNQ==", "bodyText": "There is no sense in storing this as a class member for each instance of CargoNet, things like that rather belong into the NetworkManager with an appropriate getter and javadocs comments.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412204835", "createdAt": "2020-04-21T13:53:55Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -32,6 +32,8 @@\n     private final Set<Location> outputNodes = new HashSet<>();\n \n     private final Map<Location, Integer> roundRobin = new HashMap<>();\n+    private final int tickDelay = SlimefunPlugin.getCfg().getInt(\"URID.cargo-network-tick-delay\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNTA3NQ==", "bodyText": "This should still just be left at the most recent version...", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412205075", "createdAt": "2020-04-21T13:54:10Z", "author": {"login": "TheBusyBiscuit"}, "path": "pom.xml", "diffHunk": "@@ -216,7 +216,7 @@\n         <dependency>\n             <groupId>com.github.thebusybiscuit</groupId>\n             <artifactId>CS-CoreLib2</artifactId>\n-            <version>0.13</version>\n+            <version>0b974b0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwNjI2OA==", "bodyText": "This could probably use some comments explaining what it does.\nI know that this delays cargo ticks to only be actually run every X time but it isn't immediately clear, so there should better be a comment for that.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412206268", "createdAt": "2020-04-21T13:55:37Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -175,6 +177,12 @@ private void run(Block b, Set<Location> destinations, Map<Integer, List<Location\n             display();\n         }\n \n+        if (tickDelayThreshold < tickDelay) {\n+            tickDelayThreshold++;\n+            return;\n+        }\n+        tickDelayThreshold = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIwOTQyMA==", "bodyText": "This statement would probably always return true if Im not mistaken since you removed these default values and added a continue; there.\nSo this condition could maybe be removed if Im not mistaken.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412209420", "createdAt": "2020-04-21T13:59:19Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -198,72 +206,67 @@ else if (frequency >= 0 && frequency < 16) {\n         // (Apart from ChestTerminal Buses)\n         for (Map.Entry<Location, Integer> entry : inputs.entrySet()) {\n             Location input = entry.getKey();\n-            Optional<Block> inputTarget = getAttachedBlock(input.getBlock());\n-\n-            if (inputTarget.isPresent()) {\n-                int previousSlot = -1;\n-\n-                Config cfg = BlockStorage.getLocationInfo(input);\n-                boolean roundrobin = \"true\".equals(cfg.getString(\"round-robin\"));\n+            Optional<Block> attachedBlock = getAttachedBlock(input.getBlock());\n+            if (!attachedBlock.isPresent()) {\n+                continue;\n+            }\n \n-                ItemStackAndInteger slot = CargoUtils.withdraw(input.getBlock(), inputTarget.get(), Integer.parseInt(cfg.getString(\"index\")));\n-                ItemStack stack = null;\n+            Block inputTarget = attachedBlock.get();\n+            Config cfg = BlockStorage.getLocationInfo(input);\n+            boolean roundrobin = \"true\".equals(cfg.getString(\"round-robin\"));\n \n-                if (slot != null) {\n-                    stack = slot.getItem();\n-                    previousSlot = slot.getInt();\n-                }\n+            ItemStackAndInteger slot = CargoUtils.withdraw(input.getBlock(), inputTarget, Integer.parseInt(cfg.getString(\"index\")));\n+            if (slot == null) {\n+                continue;\n+            }\n \n-                if (stack != null) {\n-                    List<Location> outputs = output.get(entry.getValue());\n+            ItemStack stack = slot.getItem();\n+            int previousSlot = slot.getInt();\n+            List<Location> outputs = output.get(entry.getValue());\n \n-                    if (outputs != null) {\n-                        List<Location> outputlist = new LinkedList<>(outputs);\n+            if (outputs != null) {\n+                List<Location> outputlist = new LinkedList<>(outputs);\n \n-                        if (roundrobin) {\n-                            int index = roundRobin.getOrDefault(input, 0);\n+                if (roundrobin) {\n+                    int index = roundRobin.getOrDefault(input, 0);\n \n                             if (index < outputlist.size()) {\n                                 for (int i = 0; i < index; i++) {\n                                     Location temp = outputlist.remove(0);\n                                     outputlist.add(temp);\n                                 }\n \n-                                index++;\n-                            }\n-                            else {\n-                                index = 1;\n-                            }\n+                        index++;\n+                    }\n+                    else {\n+                        index = 1;\n+                    }\n \n-                            roundRobin.put(input, index);\n-                        }\n+                    roundRobin.put(input, index);\n+                }\n \n-                        for (Location out : outputlist) {\n-                            Optional<Block> target = getAttachedBlock(out.getBlock());\n+                for (Location out : outputlist) {\n+                    Optional<Block> target = getAttachedBlock(out.getBlock());\n \n-                            if (target.isPresent()) {\n-                                stack = CargoUtils.insert(out.getBlock(), target.get(), stack, -1);\n-                                if (stack == null) break;\n-                            }\n-                        }\n+                    if (target.isPresent()) {\n+                        stack = CargoUtils.insert(out.getBlock(), target.get(), stack, -1);\n+                        if (stack == null) break;\n                     }\n+                }\n+            }\n+\n+            if (stack != null && previousSlot > -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTYxOQ==", "bodyText": "maxSize would probably be a more sensible name for this variable here. \"inSlotMaxSize\" is rather unpleasant to read.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412211619", "createdAt": "2020-04-21T14:01:54Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMTgwNA==", "bodyText": "currentAmount  would probably be a more sensible name for this variable here. \"inSlotAmount\" is rather unpleasant to read.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412211804", "createdAt": "2020-04-21T14:02:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();\n+            int inSlotAmount = itemInSlot.getAmount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 174}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMzI3NA==", "bodyText": "This should me Math.min, not Math.max\nsince now you are taking the maximum of the two which will make the amount potentially exceed the max size.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412213274", "createdAt": "2020-04-21T14:03:50Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();\n+            int inSlotAmount = itemInSlot.getAmount();\n+            if (SlimefunUtils.isItemSimilar(itemInSlot, wrapper, true, false) && inSlotAmount < inSlotMaxSize) {\n+                int amount = inSlotAmount + stack.getAmount();\n \n-                    menu.replaceExistingItem(slot, is);\n-                    return stack;\n+                itemInSlot.setAmount(Math.max(amount, inSlotMaxSize));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjIxMzUxMA==", "bodyText": "Looks like you are missing a space there.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412213510", "createdAt": "2020-04-21T14:04:08Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoUtils.java", "diffHunk": "@@ -139,48 +141,50 @@ public static ItemStack insert(Block node, Block target, ItemStack stack, int in\n         if (!matchesFilter(node, stack, index)) return stack;\n \n         DirtyChestMenu menu = getChestMenu(target);\n+        if (menu == null) {\n+            if (BlockUtils.hasInventory(target)) {\n+                BlockState state = target.getState();\n+                if (state instanceof InventoryHolder) {\n+                    return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                }\n+            }\n+            return stack;\n+        }\n \n-        if (menu != null) {\n-            ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n-\n-            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+        ItemStackWrapper wrapper = new ItemStackWrapper(stack);\n \n-                if (is == null) {\n-                    menu.replaceExistingItem(slot, stack.clone());\n-                    return null;\n-                }\n-                else if (SlimefunUtils.isItemSimilar(new CustomItem(is, 1), wrapper, true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-                    int amount = is.getAmount() + stack.getAmount();\n+        for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+            ItemStack itemInSlot = menu.getItemInSlot(slot);\n+            if (itemInSlot == null) {\n+                menu.replaceExistingItem(slot, stack);\n+                return null;\n+            }\n \n-                    if (amount > is.getType().getMaxStackSize()) {\n-                        is.setAmount(is.getType().getMaxStackSize());\n-                        stack.setAmount(amount - is.getType().getMaxStackSize());\n-                    }\n-                    else {\n-                        is.setAmount(amount);\n-                        stack = null;\n-                    }\n+            int inSlotMaxSize = itemInSlot.getType().getMaxStackSize();\n+            int inSlotAmount = itemInSlot.getAmount();\n+            if (SlimefunUtils.isItemSimilar(itemInSlot, wrapper, true, false) && inSlotAmount < inSlotMaxSize) {\n+                int amount = inSlotAmount + stack.getAmount();\n \n-                    menu.replaceExistingItem(slot, is);\n-                    return stack;\n+                itemInSlot.setAmount(Math.max(amount, inSlotMaxSize));\n+                if (amount > inSlotMaxSize) {\n+                    stack.setAmount(amount - inSlotMaxSize);\n+                }\n+                else {\n+                    stack = null;\n                 }\n-            }\n-        }\n-        else {\n-            BlockState state = target.getState();\n \n-            if (state instanceof InventoryHolder) {\n-                return insertIntoVanillaInventory(stack, ((InventoryHolder) state).getInventory());\n+                menu.replaceExistingItem(slot, itemInSlot);\n+                return stack;\n             }\n         }\n \n         return stack;\n     }\n \n     private static ItemStack insertIntoVanillaInventory(ItemStack stack, Inventory inv) {\n-        int minSlot = 0;\n-        int maxSlot = inv.getContents().length;\n+        ItemStack[] contents = inv.getContents();\n+    \tint minSlot = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70b5a5a9d188e5055026d29682591c3dfcc7d152"}, "originalPosition": 206}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92e8aa955b456ade85da1a5a090d9c7476373ff0", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/92e8aa955b456ade85da1a5a090d9c7476373ff0", "committedDate": "2020-04-21T23:16:03Z", "message": "- Get the tick delay value directly in method\n- Added comment to explain how the skipping ticks work"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a22eebd8ae7d304fd2d3d0efe1d03e6a9a91623", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/2a22eebd8ae7d304fd2d3d0efe1d03e6a9a91623", "committedDate": "2020-04-21T23:16:35Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4\n\n\u0001 Conflicts:\n\u0001\tpom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81add1caa2466eb3978b1290417de94a3ef5cdc7", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/81add1caa2466eb3978b1290417de94a3ef5cdc7", "committedDate": "2020-04-21T23:18:42Z", "message": "code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "034ff1948a51d7392d8ad40e45bd2fe058e2ca4d", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/034ff1948a51d7392d8ad40e45bd2fe058e2ca4d", "committedDate": "2020-04-21T23:32:53Z", "message": "missed a spot"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NzQ5OTY5", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-397749969", "createdAt": "2020-04-21T23:44:26Z", "commit": {"oid": "034ff1948a51d7392d8ad40e45bd2fe058e2ca4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzo0NDoyNlrOGJdEyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzo0NDoyNlrOGJdEyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NjczMA==", "bodyText": "I just told you to NOT do that...", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412566730", "createdAt": "2020-04-21T23:44:26Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/CargoNet.java", "diffHunk": "@@ -175,6 +176,14 @@ private void run(Block b, Set<Location> destinations, Map<Integer, List<Location\n             display();\n         }\n \n+        // Skip ticking if the threshold is not reached. The delay is not same as minecraft tick,\n+        // but it's based on 'custom-ticker-delay' config.\n+        if (tickDelayThreshold < SlimefunPlugin.getCfg().getInt(\"URID.cargo-network-tick-delay\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "034ff1948a51d7392d8ad40e45bd2fe058e2ca4d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf0487cb7a4c880fa2d5777cc584e9ebb0ceb37", "author": {"user": {"login": "DNx5", "name": "D No.5"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/5cf0487cb7a4c880fa2d5777cc584e9ebb0ceb37", "committedDate": "2020-04-22T00:54:34Z", "message": "Moved the tick delay value into static constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4OTE1MzUz", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-398915353", "createdAt": "2020-04-23T09:20:47Z", "commit": {"oid": "5cf0487cb7a4c880fa2d5777cc584e9ebb0ceb37"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MTg0NDQ3", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#pullrequestreview-398184447", "createdAt": "2020-04-22T13:22:47Z", "commit": {"oid": "5cf0487cb7a4c880fa2d5777cc584e9ebb0ceb37"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMjo0N1rOGJ2JXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMzoyMjo0N1rOGJ2JXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjk3NzUwMg==", "bodyText": "Check if it's a normal SHULKER_BOX and then ends with _SHULKER_BOX. Slight performance improvement for the basic shulker.", "url": "https://github.com/Slimefun/Slimefun4/pull/1790#discussion_r412977502", "createdAt": "2020-04-22T13:22:47Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/cargo/BlockUtils.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.core.networks.cargo;\n+\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+\n+final class BlockUtils {\n+\n+    private BlockUtils() {}\n+\n+    public static boolean hasInventory(Block block) {\n+        if (block == null) return false;\n+\n+        Material type = block.getType();\n+        switch (type) {\n+            case CHEST:\n+            case TRAPPED_CHEST:\n+            case FURNACE:\n+            case DISPENSER:\n+            case DROPPER:\n+            case HOPPER:\n+            case BREWING_STAND:\n+                return true;\n+            default:\n+                if (type.name().endsWith(\"SHULKER_BOX\")) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf0487cb7a4c880fa2d5777cc584e9ebb0ceb37"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2552, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}