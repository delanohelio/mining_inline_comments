{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTcwOTIz", "number": 1387, "title": "Added support for furnaces and brewing stands to cargo nets.", "bodyText": "Description\n\nAdded support for Furnaces and Brewing Stands to cargo nets.\nChanges\n\nAdded code to check the inventory to the insert and withdraw methods CargoManager.java (Intellij is still acting up and showing weird change files, all changes are at lines 47-68, 92-109, 148-197)\nRelated Issues\n\n\nResolves #114\nTestability\n\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.", "createdAt": "2020-01-26T01:04:31Z", "url": "https://github.com/Slimefun/Slimefun4/pull/1387", "merged": true, "mergeCommit": {"oid": "20af3fc8ed240052ab9b32783548f05a069b6c02"}, "closed": true, "closedAt": "2020-01-26T02:08:25Z", "author": {"login": "BigBadE"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9-EtXAFqTM0ODM1NDQzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb-AFS2gH2gAyMzY3MTcwOTIzOjgzYjk3Mzg0YjcxYTljODMwNzVjZjNjNWJjNmQzMzI2ZmMzNTkxZWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MzU0NDMy", "url": "https://github.com/Slimefun/Slimefun4/pull/1387#pullrequestreview-348354432", "createdAt": "2020-01-26T01:43:31Z", "commit": {"oid": "f5e6a4fcadf1c25e01f5ce673c72bcdb21a98279"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMTo0MzozMVrOFhyFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwMTo0MzozMVrOFhyFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2NzgzOQ==", "bodyText": "Why did you not return null there?", "url": "https://github.com/Slimefun/Slimefun4/pull/1387#discussion_r370967839", "createdAt": "2020-01-26T01:43:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/item_transport/CargoManager.java", "diffHunk": "@@ -1,228 +1,259 @@\n package me.mrCookieSlime.Slimefun.api.item_transport;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import org.bukkit.block.Block;\n-import org.bukkit.block.BlockState;\n-import org.bukkit.inventory.Inventory;\n-import org.bukkit.inventory.InventoryHolder;\n-import org.bukkit.inventory.ItemStack;\n-\n import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n import me.mrCookieSlime.CSCoreLibPlugin.Configuration.Config;\n import me.mrCookieSlime.Slimefun.Setup.SlimefunManager;\n import me.mrCookieSlime.Slimefun.api.BlockStorage;\n import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n import me.mrCookieSlime.Slimefun.api.inventory.DirtyChestMenu;\n-import me.mrCookieSlime.Slimefun.api.inventory.UniversalBlockMenu;\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.block.BlockState;\n+import org.bukkit.inventory.*;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n \n public final class CargoManager {\n-\t\n-\t//Whitelist or blacklist slots\n-\tprivate static final int[] SLOTS = new int[] {19, 20, 21, 28, 29, 30, 37, 38, 39};\n-\t\n-\tprivate CargoManager() {}\n-\t\n-\tpublic static ItemStack withdraw(Block node, Block target, ItemStack template) {\n-\t\tDirtyChestMenu menu = getChestMenu(target);\n-\t\t\n-\t\tif (menu != null) {\n-\t\t\tfor (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.WITHDRAW, null)) {\n-\t\t\t\tItemStack is = menu.getItemInSlot(slot);\n-\t\t\t\t\n-\t\t\t\tif (SlimefunManager.isItemSimilar(is, template, true) && matchesFilter(node, is, -1)) {\n-\t\t\t\t\tif (is.getAmount() > template.getAmount()) {\n-\t\t\t\t\t\tmenu.replaceExistingItem(slot, new CustomItem(is, is.getAmount() - template.getAmount()));\n-\t\t\t\t\t\treturn template;\n-\t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\tmenu.replaceExistingItem(slot, null);\n-\t\t\t\t\t\treturn is.clone();\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tBlockState state = target.getState();\n-\t\t\t\n-\t\t\tif (state instanceof InventoryHolder) {\n-\t\t\t\tInventory inv = ((InventoryHolder) state).getInventory();\n-\t\t\t\tfor (int slot = 0; slot < inv.getContents().length; slot++) {\n-\t\t\t\t\tItemStack is = inv.getContents()[slot];\n-\t\t\t\t\t\n-\t\t\t\t\tif (SlimefunManager.isItemSimilar(is, template, true) && matchesFilter(node, is, -1)) {\n-\t\t\t\t\t\tif (is.getAmount() > template.getAmount()) {\n-\t\t\t\t\t\t\tinv.setItem(slot, ChestManipulator.trigger(target, slot, is, new CustomItem(is, is.getAmount() - template.getAmount())));\n-\t\t\t\t\t\t\treturn template;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\tinv.setItem(slot, ChestManipulator.trigger(target, slot, is, new CustomItem(is, is.getAmount() - template.getAmount())));\n-\t\t\t\t\t\t\treturn is.clone();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\t\n-\tpublic static ItemSlot withdraw(Block node, Block target, int index) {\n-\t\tDirtyChestMenu menu = getChestMenu(target);\n-\t\t\n-\t\tif (menu != null) {\n-\t\t\tfor (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.WITHDRAW, null)) {\n-\t\t\t\tItemStack is = menu.getItemInSlot(slot);\n-\t\t\t\t\n-\t\t\t\tif (matchesFilter(node, is, index)) {\n-\t\t\t\t\tmenu.replaceExistingItem(slot, null);\n-\t\t\t\t\treturn new ItemSlot(is.clone(), slot);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tBlockState state = target.getState();\n-\t\t\t\n-\t\t\tif (state instanceof InventoryHolder) {\n-\t\t\t\tInventory inv = ((InventoryHolder) state).getInventory();\n-\t\t\t\t\n-\t\t\t\tfor (int slot = 0; slot < inv.getContents().length; slot++) {\n-\t\t\t\t\tItemStack is = inv.getContents()[slot];\n-\t\t\t\t\t\n-\t\t\t\t\tif (matchesFilter(node, is, index)) {\n-\t\t\t\t\t\tinv.setItem(slot, ChestManipulator.trigger(target, slot, is, null));\n-\t\t\t\t\t\treturn new ItemSlot(is.clone(), slot);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\t\n-\tpublic static ItemStack insert(Block node, Block target, ItemStack stack, int index) {\n-\t\tif (!matchesFilter(node, stack, index)) return stack;\n-\t\t\n-\t\tDirtyChestMenu menu = getChestMenu(target);\n-\t\t\n-\t\tif (menu != null) {\n-\t\t\tfor (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n-\t\t\t\tItemStack is = menu.getItemInSlot(slot) == null ? null: menu.getItemInSlot(slot).clone();\n-\t\t\t\t\n-\t\t\t\tif (is == null) {\n-\t\t\t\t\tmenu.replaceExistingItem(slot, stack.clone());\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\telse if (SlimefunManager.isItemSimilar(new CustomItem(is, 1), new CustomItem(stack, 1), true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-\t\t\t\t\tint amount = is.getAmount() + stack.getAmount();\n-\t\t\t\t\t\n-\t\t\t\t\tif (amount > is.getType().getMaxStackSize()) {\n-\t\t\t\t\t\tis.setAmount(is.getType().getMaxStackSize());\n-\t\t\t\t\t\tstack.setAmount(amount - is.getType().getMaxStackSize());\n-\t\t\t\t\t}\n-\t\t\t\t\telse {\n-\t\t\t\t\t\tis.setAmount(amount);\n-\t\t\t\t\t\tstack = null;\n-\t\t\t\t\t}\n-\t\t\t\t\t\n-\t\t\t\t\tmenu.replaceExistingItem(slot, is);\n-\t\t\t\t\treturn stack;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tBlockState state = target.getState();\n-\t\t\t\n-\t\t\tif (state instanceof InventoryHolder) {\n-\t\t\t\tInventory inv = ((InventoryHolder) state).getInventory();\n-\t\t\t\t\n-\t\t\t\tfor (int slot = 0; slot < inv.getContents().length; slot++) {\n-\t\t\t\t\tItemStack is = inv.getContents()[slot];\n-\t\t\t\t\t\n-\t\t\t\t\tif (is == null) {\n-\t\t\t\t\t\tinv.setItem(slot, ChestManipulator.trigger(target, slot, null, stack.clone()));\n-\t\t\t\t\t\treturn null;\n-\t\t\t\t\t}\n-\t\t\t\t\telse if (SlimefunManager.isItemSimilar(new CustomItem(is, 1), new CustomItem(stack, 1), true) && is.getAmount() < is.getType().getMaxStackSize()) {\n-\t\t\t\t\t\tint amount = is.getAmount() + stack.getAmount();\n-\t\t\t\t\t\tItemStack prev = is.clone();\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tif (amount > is.getType().getMaxStackSize()) {\n-\t\t\t\t\t\t\tis.setAmount(is.getType().getMaxStackSize());\n-\t\t\t\t\t\t\tstack.setAmount(amount - is.getType().getMaxStackSize());\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\telse {\n-\t\t\t\t\t\t\tis.setAmount(amount);\n-\t\t\t\t\t\t\tstack = null;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\t\n-\t\t\t\t\t\tinv.setItem(slot, ChestManipulator.trigger(target, slot, prev, is));\n-\t\t\t\t\t\treturn stack;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\t\n-\t\treturn stack;\n-\t}\n-\n-\tpublic static DirtyChestMenu getChestMenu(Block block) {\n-\t\tif (BlockStorage.hasInventory(block)) {\n-\t\t\treturn BlockStorage.getInventory(block);\n-\t\t}\n-\t\t\n-\t\tUniversalBlockMenu universalMenu = BlockStorage.getUniversalInventory(block);\n-\t\tif (universalMenu != null) return universalMenu;\n-\t\t\n-\t\treturn null;\n-\t}\n-\n-\tpublic static boolean matchesFilter(Block block, ItemStack item, int index) {\n-\t\tif (item == null) return false;\n-\n-\t\tString id = BlockStorage.checkID(block);\n-\t\tif (id.equals(\"CARGO_NODE_OUTPUT\")) return true;\n-\n-\t\t// Store the returned Config instance to avoid heavy calls\n-\t\tConfig blockInfo = BlockStorage.getLocationInfo(block.getLocation());\n-\n-\t\tBlockMenu menu = BlockStorage.getInventory(block.getLocation());\n-\t\tboolean lore = \"true\".equals(blockInfo.getString(\"filter-lore\"));\n-\t\t\n-\t\tif (\"whitelist\".equals(blockInfo.getString(\"filter-type\"))) {\n-\t\t\tList<ItemStack> items = new ArrayList<>();\n-\t\t\t\n-\t\t\tfor (int slot : SLOTS) {\n-\t\t\t\tItemStack template = menu.getItemInSlot(slot);\n-\t\t\t\tif (template != null) items.add(new CustomItem(template, 1));\n-\t\t\t}\n-\n-\t\t\tif (items.isEmpty()) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\t\n-\t\t\tif (index >= 0) {\n-\t\t\t\tindex++;\n-\t\t\t\tif (index > (items.size() - 1)) index = 0;\n-\t\t\t\t\n-\t\t\t\tBlockStorage.addBlockInfo(block, \"index\", String.valueOf(index));\n-\t\t\t\t\n-\t\t\t\treturn SlimefunManager.isItemSimilar(item, items.get(index), lore);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\tfor (ItemStack stack : items) {\n-\t\t\t\t\tif (SlimefunManager.isItemSimilar(item, stack, lore)) return true;\n-\t\t\t\t}\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\telse {\n-\t\t\tfor (int slot : SLOTS) {\n-\t\t\t\tif (menu.getItemInSlot(slot) != null && SlimefunManager.isItemSimilar(item, new CustomItem(menu.getItemInSlot(slot), 1), lore)) {\n-\t\t\t\t\treturn false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn true;\n-\t\t}\n-\t}\n+\n+    //Whitelist or blacklist slots\n+    private static final int[] SLOTS = new int[]{19, 20, 21, 28, 29, 30, 37, 38, 39};\n+\n+    private CargoManager() {\n+    }\n+\n+    public static ItemStack withdraw(Block node, Block target, ItemStack template) {\n+        DirtyChestMenu menu = getChestMenu(target);\n+\n+        if (menu != null) {\n+            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.WITHDRAW, null)) {\n+                ItemStack is = menu.getItemInSlot(slot);\n+\n+                if (SlimefunManager.isItemSimilar(is, template, true) && matchesFilter(node, is, -1)) {\n+                    if (is.getAmount() > template.getAmount()) {\n+                        menu.replaceExistingItem(slot, new CustomItem(is, is.getAmount() - template.getAmount()));\n+                        return template;\n+                    } else {\n+                        menu.replaceExistingItem(slot, null);\n+                        return is.clone();\n+                    }\n+                }\n+            }\n+        } else {\n+            BlockState state = target.getState();\n+\n+            if (state instanceof InventoryHolder) {\n+                Inventory inv = ((InventoryHolder) state).getInventory();\n+                int minSlot = 0;\n+                int maxSlot = inv.getContents().length;\n+\n+                if (inv instanceof FurnaceInventory) {\n+                    minSlot = 2;\n+                    maxSlot = 3;\n+                } else if (inv instanceof BrewerInventory) {\n+                    maxSlot = 3;\n+                }\n+                for (int slot = minSlot; slot < maxSlot; slot++) {\n+                    ItemStack is = inv.getContents()[slot];\n+\n+                    if (SlimefunManager.isItemSimilar(is, template, true) && matchesFilter(node, is, -1)) {\n+                        if (is.getAmount() > template.getAmount()) {\n+                            inv.setItem(slot, ChestManipulator.trigger(target, slot, is, new CustomItem(is, is.getAmount() - template.getAmount())));\n+                            return template;\n+                        } else {\n+                            inv.setItem(slot, ChestManipulator.trigger(target, slot, is, new CustomItem(is, is.getAmount() - template.getAmount())));\n+                            return is.clone();\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static ItemSlot withdraw(Block node, Block target, int index) {\n+        DirtyChestMenu menu = getChestMenu(target);\n+\n+        if (menu != null) {\n+            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.WITHDRAW, null)) {\n+                ItemStack is = menu.getItemInSlot(slot);\n+\n+                if (matchesFilter(node, is, index)) {\n+                    menu.replaceExistingItem(slot, null);\n+                    return new ItemSlot(is.clone(), slot);\n+                }\n+            }\n+        } else {\n+            BlockState state = target.getState();\n+\n+            if (state instanceof InventoryHolder) {\n+                Inventory inv = ((InventoryHolder) state).getInventory();\n+\n+                int minSlot = 0;\n+                int maxSlot = inv.getContents().length;\n+\n+                if (inv instanceof FurnaceInventory) {\n+                    minSlot = 2;\n+                    maxSlot = 3;\n+                } else if (inv instanceof BrewerInventory) {\n+                    maxSlot = 3;\n+                }\n+\n+                for (int slot = minSlot; slot < maxSlot; slot++) {\n+                    ItemStack is = inv.getContents()[slot];\n+\n+                    if (matchesFilter(node, is, index)) {\n+                        inv.setItem(slot, ChestManipulator.trigger(target, slot, is, null));\n+                        return new ItemSlot(is.clone(), slot);\n+                    }\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    public static ItemStack insert(Block node, Block target, ItemStack stack, int index) {\n+        if (!matchesFilter(node, stack, index)) return stack;\n+\n+        DirtyChestMenu menu = getChestMenu(target);\n+\n+        if (menu != null) {\n+            for (int slot : menu.getPreset().getSlotsAccessedByItemTransport(menu, ItemTransportFlow.INSERT, stack)) {\n+                ItemStack is = menu.getItemInSlot(slot) == null ? null : menu.getItemInSlot(slot).clone();\n+\n+                if (is == null) {\n+                    menu.replaceExistingItem(slot, stack.clone());\n+                    return null;\n+                } else if (SlimefunManager.isItemSimilar(new CustomItem(is, 1), new CustomItem(stack, 1), true) && is.getAmount() < is.getType().getMaxStackSize()) {\n+                    int amount = is.getAmount() + stack.getAmount();\n+\n+                    if (amount > is.getType().getMaxStackSize()) {\n+                        is.setAmount(is.getType().getMaxStackSize());\n+                        stack.setAmount(amount - is.getType().getMaxStackSize());\n+                    } else {\n+                        is.setAmount(amount);\n+                        stack = null;\n+                    }\n+\n+                    menu.replaceExistingItem(slot, is);\n+                    return stack;\n+                }\n+            }\n+        } else {\n+            BlockState state = target.getState();\n+\n+            if (state instanceof InventoryHolder) {\n+                Inventory inv = ((InventoryHolder) state).getInventory();\n+\n+                int minSlot = 0;\n+                int maxSlot = inv.getContents().length;\n+\n+                //Check if it is a normal furnace\n+                if (inv instanceof FurnaceInventory) {\n+                    //Check if it is fuel or not\n+                    if (stack.getType().isFuel()) {\n+                        minSlot = 1;\n+                        maxSlot = 2;\n+                    } else {\n+                        maxSlot = 1;\n+                    }\n+                } else if (inv instanceof BrewerInventory) {\n+                    //Check if it goes in the potion slot,\n+                    if (stack.getType() == Material.POTION || stack.getType() == Material.LINGERING_POTION || stack.getType() == Material.SPLASH_POTION) {\n+                        maxSlot = 3;\n+                        //The blaze powder slot,\n+                    } else if (stack.getType() == Material.BLAZE_POWDER) {\n+                        minSlot = 4;\n+                        maxSlot = 5;\n+                    } else {\n+                        //Or the input\n+                        minSlot = 3;\n+                        maxSlot = 4;\n+                    }\n+                }\n+\n+                for (int slot = minSlot; slot < maxSlot; slot++) {\n+                    ItemStack is = inv.getContents()[slot];\n+\n+                    if (is == null) {\n+                        inv.setItem(slot, ChestManipulator.trigger(target, slot, null, stack.clone()));\n+                        stack.setAmount(0);\n+                        return stack;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5e6a4fcadf1c25e01f5ce673c72bcdb21a98279"}, "originalPosition": 398}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c8d65d654beb129976d80c51b0f39206c37ab9c", "author": {"user": null}, "url": "https://github.com/Slimefun/Slimefun4/commit/9c8d65d654beb129976d80c51b0f39206c37ab9c", "committedDate": "2020-01-26T02:40:01Z", "message": "Added support for furnaces and brewing stands to cargo nets."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38b2bab35ba67d7194b548f15c7b310d407e8f02", "author": {"user": null}, "url": "https://github.com/Slimefun/Slimefun4/commit/38b2bab35ba67d7194b548f15c7b310d407e8f02", "committedDate": "2020-01-26T02:44:31Z", "message": "Removed debug statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5e6a4fcadf1c25e01f5ce673c72bcdb21a98279", "author": {"user": null}, "url": "https://github.com/Slimefun/Slimefun4/commit/f5e6a4fcadf1c25e01f5ce673c72bcdb21a98279", "committedDate": "2020-01-26T03:04:00Z", "message": "Removed random import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83b97384b71a9c83075cf3c5bc6d3326fc3591ef", "author": {"user": null}, "url": "https://github.com/Slimefun/Slimefun4/commit/83b97384b71a9c83075cf3c5bc6d3326fc3591ef", "committedDate": "2020-01-26T04:04:01Z", "message": "Fixed bad return"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2573, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}