{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjE4ODk5", "number": 2046, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODozODoxNVrOEJDUVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMDowOTo1NlrOEJmsBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTI2OTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODozODoxNVrOGpYodw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDoxNzo1MlrOGpbppg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0ODM3NQ==", "bodyText": "This is a rather bad approach to this. It would be much better to loop through all Enchantments and split them based on the .canEnchant() method or so to sort it based on items.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446048375", "createdAt": "2020-06-26T08:38:15Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+\n+    private static final Enchantment[] helmEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.OXYGEN, Enchantment.WATER_WORKER, Enchantment.THORNS, Enchantment.PROTECTION_PROJECTILE, Enchantment.PROTECTION_FIRE, Enchantment.PROTECTION_ENVIRONMENTAL, Enchantment.PROTECTION_EXPLOSIONS};\n+    private static final Enchantment[] chestLeggingsEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.THORNS, Enchantment.PROTECTION_PROJECTILE, Enchantment.PROTECTION_FIRE, Enchantment.PROTECTION_ENVIRONMENTAL, Enchantment.PROTECTION_EXPLOSIONS};\n+    private static final Enchantment[] bootsEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.FROST_WALKER, Enchantment.PROTECTION_FALL, Enchantment.DEPTH_STRIDER, Enchantment.THORNS, Enchantment.PROTECTION_PROJECTILE, Enchantment.PROTECTION_FIRE, Enchantment.PROTECTION_ENVIRONMENTAL, Enchantment.PROTECTION_EXPLOSIONS};\n+\n+    private static final Enchantment[] swordEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.FIRE_ASPECT, Enchantment.LOOT_BONUS_MOBS, Enchantment.KNOCKBACK, Enchantment.SWEEPING_EDGE, Enchantment.DAMAGE_ALL, Enchantment.DAMAGE_ARTHROPODS, Enchantment.DAMAGE_UNDEAD};\n+    private static final Enchantment[] tridentEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.IMPALING, Enchantment.CHANNELING, Enchantment.LOYALTY, Enchantment.RIPTIDE};\n+    private static Enchantment[] crossbowEnch;\n+    private static final Enchantment[] bowEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.ARROW_DAMAGE, Enchantment.ARROW_FIRE, Enchantment.ARROW_INFINITE, Enchantment.ARROW_KNOCKBACK};\n+\n+    private static final Enchantment[] axeEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.DIG_SPEED, Enchantment.LOOT_BONUS_BLOCKS, Enchantment.SILK_TOUCH, Enchantment.DAMAGE_ALL, Enchantment.DAMAGE_UNDEAD, Enchantment.DAMAGE_ARTHROPODS};\n+    private static final Enchantment[] toolEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.DIG_SPEED, Enchantment.LOOT_BONUS_BLOCKS, Enchantment.SILK_TOUCH};\n+    private static final Enchantment[] shearEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.DIG_SPEED};\n+    private static final Enchantment[] fishRodEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.LURE, Enchantment.LUCK};\n+    private static final Enchantment[] otherItemsEnch = {Enchantment.MENDING, Enchantment.DURABILITY};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f54b2771110a7aa5ff36463a293130060f6f169c"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5NzgzMA==", "bodyText": "oh I forgot about that method lol", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446097830", "createdAt": "2020-06-26T10:17:52Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,171 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+\n+    private static final Enchantment[] helmEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.OXYGEN, Enchantment.WATER_WORKER, Enchantment.THORNS, Enchantment.PROTECTION_PROJECTILE, Enchantment.PROTECTION_FIRE, Enchantment.PROTECTION_ENVIRONMENTAL, Enchantment.PROTECTION_EXPLOSIONS};\n+    private static final Enchantment[] chestLeggingsEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.THORNS, Enchantment.PROTECTION_PROJECTILE, Enchantment.PROTECTION_FIRE, Enchantment.PROTECTION_ENVIRONMENTAL, Enchantment.PROTECTION_EXPLOSIONS};\n+    private static final Enchantment[] bootsEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.FROST_WALKER, Enchantment.PROTECTION_FALL, Enchantment.DEPTH_STRIDER, Enchantment.THORNS, Enchantment.PROTECTION_PROJECTILE, Enchantment.PROTECTION_FIRE, Enchantment.PROTECTION_ENVIRONMENTAL, Enchantment.PROTECTION_EXPLOSIONS};\n+\n+    private static final Enchantment[] swordEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.FIRE_ASPECT, Enchantment.LOOT_BONUS_MOBS, Enchantment.KNOCKBACK, Enchantment.SWEEPING_EDGE, Enchantment.DAMAGE_ALL, Enchantment.DAMAGE_ARTHROPODS, Enchantment.DAMAGE_UNDEAD};\n+    private static final Enchantment[] tridentEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.IMPALING, Enchantment.CHANNELING, Enchantment.LOYALTY, Enchantment.RIPTIDE};\n+    private static Enchantment[] crossbowEnch;\n+    private static final Enchantment[] bowEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.ARROW_DAMAGE, Enchantment.ARROW_FIRE, Enchantment.ARROW_INFINITE, Enchantment.ARROW_KNOCKBACK};\n+\n+    private static final Enchantment[] axeEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.DIG_SPEED, Enchantment.LOOT_BONUS_BLOCKS, Enchantment.SILK_TOUCH, Enchantment.DAMAGE_ALL, Enchantment.DAMAGE_UNDEAD, Enchantment.DAMAGE_ARTHROPODS};\n+    private static final Enchantment[] toolEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.DIG_SPEED, Enchantment.LOOT_BONUS_BLOCKS, Enchantment.SILK_TOUCH};\n+    private static final Enchantment[] shearEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.DIG_SPEED};\n+    private static final Enchantment[] fishRodEnch = {Enchantment.MENDING, Enchantment.DURABILITY, Enchantment.LURE, Enchantment.LUCK};\n+    private static final Enchantment[] otherItemsEnch = {Enchantment.MENDING, Enchantment.DURABILITY};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA0ODM3NQ=="}, "originalCommit": {"oid": "f54b2771110a7aa5ff36463a293130060f6f169c"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0MzUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1NTo0NlrOGp_JVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowODoxOVrOGp_NmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTM4MA==", "bodyText": "I wouldn't really have a seperate research for this, these two can easily share the same research.\nBesides... why glass anyway?", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679380", "createdAt": "2020-06-28T17:55:46Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java", "diffHunk": "@@ -267,6 +267,8 @@ public static void setupResearches() {\n         register(\"advanced_industrial_miner\", 98, \"Better Mining\", 36, SlimefunItems.ADVANCED_INDUSTRIAL_MINER);\n         register(\"magical_zombie_pills\", 257, \"De-Zombification\", 22, SlimefunItems.MAGICAL_ZOMBIE_PILLS);\n         register(\"auto_brewer\", 258, \"Industrial Brewery\", 30, SlimefunItems.AUTO_BREWER);\n+        register(\"enchantment_rune\", 259, \"Ancient Enchanting\", 24, SlimefunItems.ENCHANTMENT_RUNE);\n+        register(\"magical_glass\", 260, \"Magical See-Through\", 5, SlimefunItems.MAGICAL_GLASS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4MDQ3Mw==", "bodyText": "I wanted players to spend some xp using flask of knowledges but even 9 wouldn't be enough so I added this.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446680473", "createdAt": "2020-06-28T18:08:19Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/ResearchSetup.java", "diffHunk": "@@ -267,6 +267,8 @@ public static void setupResearches() {\n         register(\"advanced_industrial_miner\", 98, \"Better Mining\", 36, SlimefunItems.ADVANCED_INDUSTRIAL_MINER);\n         register(\"magical_zombie_pills\", 257, \"De-Zombification\", 22, SlimefunItems.MAGICAL_ZOMBIE_PILLS);\n         register(\"auto_brewer\", 258, \"Industrial Brewery\", 30, SlimefunItems.AUTO_BREWER);\n+        register(\"enchantment_rune\", 259, \"Ancient Enchanting\", 24, SlimefunItems.ENCHANTMENT_RUNE);\n+        register(\"magical_glass\", 260, \"Magical See-Through\", 5, SlimefunItems.MAGICAL_GLASS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTM4MA=="}, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1NzowNlrOGp_JyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1NzowNlrOGp_JyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTQ5Ng==", "bodyText": "Please do not use abbreviations like this.\nThis is a nightmare maintenance-wise. Name your methods accordingly, like getApplicableEnchantments.\nAnd not findEnchArr...", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679496", "createdAt": "2020-06-28T17:57:06Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchs.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            Enchantment[] enchArr = findEnchArr(target.getType());\n+            if (enchArr.length == 0) return;\n+            int enchIndex = ThreadLocalRandom.current().nextInt(enchArr.length);\n+            Enchantment ench = enchArr[enchIndex];\n+\n+            int level = 1;\n+            if (ench.getMaxLevel() != 1) level = ThreadLocalRandom.current().nextInt(ench.getMaxLevel() + 1);\n+\n+            target.addEnchantment(ench, level);\n+\n+            if (target.getAmount() == 1) {\n+                e.setCancelled(true);\n+\n+                // This lightning is just an effect, it deals no damage.\n+                l.getWorld().strikeLightningEffect(l);\n+\n+                Slimefun.runSync(() -> {\n+                    // Being sure entities are still valid and not picked up or whatsoever.\n+                    if (item.isValid() && entity.isValid() && target.getAmount() == 1) {\n+\n+                        l.getWorld().createExplosion(l, 0);\n+                        l.getWorld().playSound(l, Sound.ENTITY_GENERIC_EXPLODE, 0.3F, 1);\n+\n+                        entity.remove();\n+                        item.remove();\n+                        l.getWorld().dropItemNaturally(l, target);\n+\n+                        SlimefunPlugin.getLocal().sendMessage(p, \"messages.enchantment-rune.success\", true);\n+                    }\n+                }, 10L);\n+            }\n+            else {\n+                SlimefunPlugin.getLocal().sendMessage(p, \"messages.enchantment-rune.fail\", true);\n+            }\n+        }\n+    }\n+\n+    private Enchantment[] findEnchArr(Material type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1NzozNlrOGp_J7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1NzozNlrOGp_J7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTUzMw==", "bodyText": "This can (and probably should) be done using a ternary operator.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679533", "createdAt": "2020-06-28T17:57:36Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchs.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            Enchantment[] enchArr = findEnchArr(target.getType());\n+            if (enchArr.length == 0) return;\n+            int enchIndex = ThreadLocalRandom.current().nextInt(enchArr.length);\n+            Enchantment ench = enchArr[enchIndex];\n+\n+            int level = 1;\n+            if (ench.getMaxLevel() != 1) level = ThreadLocalRandom.current().nextInt(ench.getMaxLevel() + 1);\n+\n+            target.addEnchantment(ench, level);\n+\n+            if (target.getAmount() == 1) {\n+                e.setCancelled(true);\n+\n+                // This lightning is just an effect, it deals no damage.\n+                l.getWorld().strikeLightningEffect(l);\n+\n+                Slimefun.runSync(() -> {\n+                    // Being sure entities are still valid and not picked up or whatsoever.\n+                    if (item.isValid() && entity.isValid() && target.getAmount() == 1) {\n+\n+                        l.getWorld().createExplosion(l, 0);\n+                        l.getWorld().playSound(l, Sound.ENTITY_GENERIC_EXPLODE, 0.3F, 1);\n+\n+                        entity.remove();\n+                        item.remove();\n+                        l.getWorld().dropItemNaturally(l, target);\n+\n+                        SlimefunPlugin.getLocal().sendMessage(p, \"messages.enchantment-rune.success\", true);\n+                    }\n+                }, 10L);\n+            }\n+            else {\n+                SlimefunPlugin.getLocal().sendMessage(p, \"messages.enchantment-rune.fail\", true);\n+            }\n+        }\n+    }\n+\n+    private Enchantment[] findEnchArr(Material type) {\n+        Enchantment[] enchArr = applicableEnchs.get(type);\n+        if (enchArr == null) enchArr = new Enchantment[0];\n+        return enchArr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1ODowOVrOGp_KJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1ODowOVrOGp_KJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTU5MQ==", "bodyText": "Please write out your variable names...\nAbbreviations make it hard to maintain later down the line.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679591", "createdAt": "2020-06-28T17:58:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1ODozMVrOGp_KQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1ODozMVrOGp_KQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTYxNw==", "bodyText": "This should be an EnumMap, not a HashMap.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679617", "createdAt": "2020-06-28T17:58:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NTQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1ODo0N1rOGp_KSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzo1ODo0N1rOGp_KSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTYyNw==", "bodyText": "All of this can be reduced to a single line:\ngetOrDefault", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679627", "createdAt": "2020-06-28T17:58:47Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchs.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            Enchantment[] enchArr = findEnchArr(target.getType());\n+            if (enchArr.length == 0) return;\n+            int enchIndex = ThreadLocalRandom.current().nextInt(enchArr.length);\n+            Enchantment ench = enchArr[enchIndex];\n+\n+            int level = 1;\n+            if (ench.getMaxLevel() != 1) level = ThreadLocalRandom.current().nextInt(ench.getMaxLevel() + 1);\n+\n+            target.addEnchantment(ench, level);\n+\n+            if (target.getAmount() == 1) {\n+                e.setCancelled(true);\n+\n+                // This lightning is just an effect, it deals no damage.\n+                l.getWorld().strikeLightningEffect(l);\n+\n+                Slimefun.runSync(() -> {\n+                    // Being sure entities are still valid and not picked up or whatsoever.\n+                    if (item.isValid() && entity.isValid() && target.getAmount() == 1) {\n+\n+                        l.getWorld().createExplosion(l, 0);\n+                        l.getWorld().playSound(l, Sound.ENTITY_GENERIC_EXPLODE, 0.3F, 1);\n+\n+                        entity.remove();\n+                        item.remove();\n+                        l.getWorld().dropItemNaturally(l, target);\n+\n+                        SlimefunPlugin.getLocal().sendMessage(p, \"messages.enchantment-rune.success\", true);\n+                    }\n+                }, 10L);\n+            }\n+            else {\n+                SlimefunPlugin.getLocal().sendMessage(p, \"messages.enchantment-rune.fail\", true);\n+            }\n+        }\n+    }\n+\n+    private Enchantment[] findEnchArr(Material type) {\n+        Enchantment[] enchArr = applicableEnchs.get(type);\n+        if (enchArr == null) enchArr = new Enchantment[0];\n+        return enchArr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NjU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMDowOVrOGp_K1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMDowOVrOGp_K1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTc2NQ==", "bodyText": "Why are you storing this as a variable here? I don't see this index used anywhere else.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679765", "createdAt": "2020-06-28T18:00:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchs.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            Enchantment[] enchArr = findEnchArr(target.getType());\n+            if (enchArr.length == 0) return;\n+            int enchIndex = ThreadLocalRandom.current().nextInt(enchArr.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMDo1N1rOGp_LJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMDo1N1rOGp_LJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTg0NA==", "bodyText": "Should probably choose a little more magical sound effect and visual than a quote: GENERIC_SPLODE...", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679844", "createdAt": "2020-06-28T18:00:57Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchs.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            Enchantment[] enchArr = findEnchArr(target.getType());\n+            if (enchArr.length == 0) return;\n+            int enchIndex = ThreadLocalRandom.current().nextInt(enchArr.length);\n+            Enchantment ench = enchArr[enchIndex];\n+\n+            int level = 1;\n+            if (ench.getMaxLevel() != 1) level = ThreadLocalRandom.current().nextInt(ench.getMaxLevel() + 1);\n+\n+            target.addEnchantment(ench, level);\n+\n+            if (target.getAmount() == 1) {\n+                e.setCancelled(true);\n+\n+                // This lightning is just an effect, it deals no damage.\n+                l.getWorld().strikeLightningEffect(l);\n+\n+                Slimefun.runSync(() -> {\n+                    // Being sure entities are still valid and not picked up or whatsoever.\n+                    if (item.isValid() && entity.isValid() && target.getAmount() == 1) {\n+\n+                        l.getWorld().createExplosion(l, 0);\n+                        l.getWorld().playSound(l, Sound.ENTITY_GENERIC_EXPLODE, 0.3F, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0NzkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMTo0OVrOGp_LeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMTo0OVrOGp_LeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTkyOA==", "bodyText": "Should also check for conflicts, since you wouldn't want to enchant a Silk Touch with Fortune.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679928", "createdAt": "2020-06-28T18:01:49Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchs.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            Enchantment[] enchArr = findEnchArr(target.getType());\n+            if (enchArr.length == 0) return;\n+            int enchIndex = ThreadLocalRandom.current().nextInt(enchArr.length);\n+            Enchantment ench = enchArr[enchIndex];\n+\n+            int level = 1;\n+            if (ench.getMaxLevel() != 1) level = ThreadLocalRandom.current().nextInt(ench.getMaxLevel() + 1);\n+\n+            target.addEnchantment(ench, level);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzY0ODEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMjoxM1rOGp_Ljw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxODowMjoxM1rOGp_Ljw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3OTk1MQ==", "bodyText": "Also always declare with base types, Map.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446679951", "createdAt": "2020-06-28T18:02:13Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final HashMap<Material, Enchantment[]> applicableEnchs = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb2bbae0c986691229fd0fcb069af8f3737d4151"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzcxODUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMDowNlrOGp_t5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMDowNlrOGp_t5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODc0MQ==", "bodyText": "No need for the rather unncessary and expensive call with the ItemStack here, you can just use this here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446688741", "createdAt": "2020-06-28T19:30:06Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, Enchantment[]> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchantments.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ba744fe5ce0d42aa5f42ab4cdebdcb7e8a587e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzcxOTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMTozNVrOGp_uhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMTozNVrOGp_uhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODkwMw==", "bodyText": "You could save yourself this Array to ArrayList conversion if you directly stored a List in your Map", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446688903", "createdAt": "2020-06-28T19:31:35Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, Enchantment[]> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchantments.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentSet = Arrays.asList(applicableEnchantments.getOrDefault(target.getType(), new Enchantment[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ba744fe5ce0d42aa5f42ab4cdebdcb7e8a587e"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzcyMDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMTo1N1rOGp_uqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMTo1N1rOGp_uqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4ODkzNw==", "bodyText": "You should use .isEmpty() here", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446688937", "createdAt": "2020-06-28T19:31:57Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, Enchantment[]> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchantments.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentSet = Arrays.asList(applicableEnchantments.getOrDefault(target.getType(), new Enchantment[0]));\n+            if (enchantmentSet.size() == 0) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ba744fe5ce0d42aa5f42ab4cdebdcb7e8a587e"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzcyMTIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMzoxNFrOGp_vKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozMzoxNFrOGp_vKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTA2NA==", "bodyText": "This would result in concurrent modification. Use an Iterator instead.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446689064", "createdAt": "2020-06-28T19:33:14Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, Enchantment[]> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchantments.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentSet = Arrays.asList(applicableEnchantments.getOrDefault(target.getType(), new Enchantment[0]));\n+            if (enchantmentSet.size() == 0) return;\n+\n+            //Removing the enchantments that the item already has from enchantmentSet\n+            for (Enchantment enchantment : enchantmentSet) {\n+                for (Enchantment itemEnchantment : target.getEnchantments().keySet()) {\n+                    if (enchantment == itemEnchantment) enchantmentSet.remove(enchantment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ba744fe5ce0d42aa5f42ab4cdebdcb7e8a587e"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzcyMjIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozNDoyOVrOGp_vpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTozNDoyOVrOGp_vpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY4OTE4OA==", "bodyText": "Also you are missing conflicting enchantments", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446689188", "createdAt": "2020-06-28T19:34:29Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, Enchantment[]> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            Set<Enchantment> enchSet = new HashSet<>();\n+            for (Enchantment ench : Enchantment.values()) {\n+                if (ench.canEnchantItem(new ItemStack(mat))) enchSet.add(ench);\n+            }\n+            applicableEnchantments.put(mat, enchSet.toArray(new Enchantment[0]));\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, SlimefunItems.ENCHANTMENT_RUNE, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentSet = Arrays.asList(applicableEnchantments.getOrDefault(target.getType(), new Enchantment[0]));\n+            if (enchantmentSet.size() == 0) return;\n+\n+            //Removing the enchantments that the item already has from enchantmentSet\n+            for (Enchantment enchantment : enchantmentSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ba744fe5ce0d42aa5f42ab4cdebdcb7e8a587e"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc4MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDo0OTozNlrOGqAMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDo0OTozNlrOGqAMew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NjU3MQ==", "bodyText": "This will remove it from the actual List stored inside your Map, so you should copy the List before modifying it in any way.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446696571", "createdAt": "2020-06-28T20:49:36Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, List<Enchantment>> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            List<Enchantment> enchantments = new ArrayList<>();\n+            for (Enchantment enchantment : Enchantment.values()) {\n+                if (enchantment == Enchantment.BINDING_CURSE || enchantment == Enchantment.VANISHING_CURSE) continue;\n+                if (enchantment.canEnchantItem(new ItemStack(mat))) enchantments.add(enchantment);\n+            }\n+            applicableEnchantments.put(mat, enchantments);\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, this, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentList = applicableEnchantments.getOrDefault(target.getType(), new ArrayList<>());\n+            if (enchantmentList.isEmpty()) return;\n+\n+            //Removing the enchantments that the item already has from enchantmentSet\n+            enchantmentList.removeIf(enchantment -> target.getEnchantments().containsKey(enchantment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7accbbe8a4d3377ae9bada48de126e189d2202"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc4MjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDo1MDozMlrOGqAM4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDo1MDozMlrOGqAM4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5NjY3Mg==", "bodyText": "Hmmm, well you are returning anyway when the list is empty...\nSo you could just do a simple get and do a null check instead of creating a new ArrayList and then immediately discarding it.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446696672", "createdAt": "2020-06-28T20:50:32Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, List<Enchantment>> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            List<Enchantment> enchantments = new ArrayList<>();\n+            for (Enchantment enchantment : Enchantment.values()) {\n+                if (enchantment == Enchantment.BINDING_CURSE || enchantment == Enchantment.VANISHING_CURSE) continue;\n+                if (enchantment.canEnchantItem(new ItemStack(mat))) enchantments.add(enchantment);\n+            }\n+            applicableEnchantments.put(mat, enchantments);\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, this, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentList = applicableEnchantments.getOrDefault(target.getType(), new ArrayList<>());\n+            if (enchantmentList.isEmpty()) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7accbbe8a4d3377ae9bada48de126e189d2202"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc4MzA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDo1MToxOVrOGqANMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDo1MToxOVrOGqANMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5Njc1NA==", "bodyText": "Should probably also send a failure message if no enchantment was applicable.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446696754", "createdAt": "2020-06-28T20:51:19Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, List<Enchantment>> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            List<Enchantment> enchantments = new ArrayList<>();\n+            for (Enchantment enchantment : Enchantment.values()) {\n+                if (enchantment == Enchantment.BINDING_CURSE || enchantment == Enchantment.VANISHING_CURSE) continue;\n+                if (enchantment.canEnchantItem(new ItemStack(mat))) enchantments.add(enchantment);\n+            }\n+            applicableEnchantments.put(mat, enchantments);\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, this, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentList = applicableEnchantments.getOrDefault(target.getType(), new ArrayList<>());\n+            if (enchantmentList.isEmpty()) return;\n+\n+            //Removing the enchantments that the item already has from enchantmentSet\n+            enchantmentList.removeIf(enchantment -> target.getEnchantments().containsKey(enchantment));\n+            if (enchantmentList.isEmpty()) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7accbbe8a4d3377ae9bada48de126e189d2202"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc4MzI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDo1MTozOFrOGqANTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMzowNzoyMVrOGqBAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5Njc4MA==", "bodyText": "Also still missing the conflict check.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446696780", "createdAt": "2020-06-28T20:51:38Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, List<Enchantment>> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            List<Enchantment> enchantments = new ArrayList<>();\n+            for (Enchantment enchantment : Enchantment.values()) {\n+                if (enchantment == Enchantment.BINDING_CURSE || enchantment == Enchantment.VANISHING_CURSE) continue;\n+                if (enchantment.canEnchantItem(new ItemStack(mat))) enchantments.add(enchantment);\n+            }\n+            applicableEnchantments.put(mat, enchantments);\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, this, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentList = applicableEnchantments.getOrDefault(target.getType(), new ArrayList<>());\n+            if (enchantmentList.isEmpty()) return;\n+\n+            //Removing the enchantments that the item already has from enchantmentSet\n+            enchantmentList.removeIf(enchantment -> target.getEnchantments().containsKey(enchantment));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c7accbbe8a4d3377ae9bada48de126e189d2202"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwMzk2OQ==", "bodyText": "I don't understand ehat you mean by conflict check.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446703969", "createdAt": "2020-06-28T22:05:41Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, List<Enchantment>> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            List<Enchantment> enchantments = new ArrayList<>();\n+            for (Enchantment enchantment : Enchantment.values()) {\n+                if (enchantment == Enchantment.BINDING_CURSE || enchantment == Enchantment.VANISHING_CURSE) continue;\n+                if (enchantment.canEnchantItem(new ItemStack(mat))) enchantments.add(enchantment);\n+            }\n+            applicableEnchantments.put(mat, enchantments);\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, this, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentList = applicableEnchantments.getOrDefault(target.getType(), new ArrayList<>());\n+            if (enchantmentList.isEmpty()) return;\n+\n+            //Removing the enchantments that the item already has from enchantmentSet\n+            enchantmentList.removeIf(enchantment -> target.getEnchantments().containsKey(enchantment));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5Njc4MA=="}, "originalCommit": {"oid": "5c7accbbe8a4d3377ae9bada48de126e189d2202"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjcwOTgyNA==", "bodyText": "Enchantments can have conflicts, like I explained earlier.\nSilk Touch and Fortune are incompatible for example, there is also a method to check for this: Enchantment#conflictsWith(...)", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446709824", "createdAt": "2020-06-28T23:07:21Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, List<Enchantment>> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            List<Enchantment> enchantments = new ArrayList<>();\n+            for (Enchantment enchantment : Enchantment.values()) {\n+                if (enchantment == Enchantment.BINDING_CURSE || enchantment == Enchantment.VANISHING_CURSE) continue;\n+                if (enchantment.canEnchantItem(new ItemStack(mat))) enchantments.add(enchantment);\n+            }\n+            applicableEnchantments.put(mat, enchantments);\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, this, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> enchantmentList = applicableEnchantments.getOrDefault(target.getType(), new ArrayList<>());\n+            if (enchantmentList.isEmpty()) return;\n+\n+            //Removing the enchantments that the item already has from enchantmentSet\n+            enchantmentList.removeIf(enchantment -> target.getEnchantments().containsKey(enchantment));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5Njc4MA=="}, "originalCommit": {"oid": "5c7accbbe8a4d3377ae9bada48de126e189d2202"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTA2NTAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMDowOTo1NlrOGqLksg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMDowOTo1NlrOGqLksg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4Mjk5NA==", "bodyText": "You are creating two new ArrayLists here.\nPlease only use .get(), do a null check and then copy. Otherwise you are just creating a wasteful List, which you then copy and then discard both. This is really inefficient.", "url": "https://github.com/Slimefun/Slimefun4/pull/2046#discussion_r446882994", "createdAt": "2020-06-29T10:09:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/EnchantmentRune.java", "diffHunk": "@@ -0,0 +1,154 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.EnumMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.bukkit.Location;\n+import org.bukkit.Material;\n+import org.bukkit.Particle;\n+import org.bukkit.Sound;\n+import org.bukkit.enchantments.Enchantment;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.Item;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.player.PlayerDropItemEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SimpleSlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.Objects.handlers.ItemDropHandler;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.Slimefun;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * This {@link SlimefunItem} allows you to enchant any enchantable {@link ItemStack} with a random\n+ * {@link Enchantment}. It is also one of the very few utilisations of {@link ItemDropHandler}.\n+ *\n+ * @author Linox\n+ *\n+ * @see ItemDropHandler\n+ * @see Enchantment\n+ *\n+ */\n+public class EnchantmentRune extends SimpleSlimefunItem<ItemDropHandler> {\n+\n+    private static final double RANGE = 1.5;\n+    private final Map<Material, List<Enchantment>> applicableEnchantments = new EnumMap<>(Material.class);\n+\n+    public EnchantmentRune(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+\n+        for (Material mat : Material.values()) {\n+            List<Enchantment> enchantments = new ArrayList<>();\n+            for (Enchantment enchantment : Enchantment.values()) {\n+                if (enchantment == Enchantment.BINDING_CURSE || enchantment == Enchantment.VANISHING_CURSE) continue;\n+                if (enchantment.canEnchantItem(new ItemStack(mat))) enchantments.add(enchantment);\n+            }\n+            applicableEnchantments.put(mat, enchantments);\n+        }\n+    }\n+\n+    @Override\n+    public ItemDropHandler getItemHandler() {\n+        return (e, p, item) -> {\n+            if (isItem(item.getItemStack())) {\n+\n+                if (!Slimefun.hasUnlocked(p, this, true)) {\n+                    return true;\n+                }\n+\n+                Slimefun.runSync(() -> activate(p, e, item), 20L);\n+\n+                return true;\n+            }\n+            return false;\n+        };\n+    }\n+\n+    private void activate(Player p, PlayerDropItemEvent e, Item item) {\n+        // Being sure the entity is still valid and not picked up or whatsoever.\n+        if (!item.isValid()) {\n+            return;\n+        }\n+\n+        Location l = item.getLocation();\n+        Collection<Entity> entites = l.getWorld().getNearbyEntities(l, RANGE, RANGE, RANGE, this::findCompatibleItem);\n+        Optional<Entity> optional = entites.stream().findFirst();\n+\n+        if (optional.isPresent()) {\n+            Item entity = (Item) optional.get();\n+            ItemStack target = entity.getItemStack();\n+\n+            List<Enchantment> applicableEnchantmentList = new ArrayList<>(applicableEnchantments.getOrDefault(target.getType(), new ArrayList<>()));\n+            if (applicableEnchantmentList.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "942bf436bbbb934a7975eb923b604286f9458499"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 390, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}