{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NDA5NzQz", "number": 2020, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyNzo1N1rOEIf78w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyODoyMFrOEIf8ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ3MzE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/AutoBrewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyNzo1N1rOGogDSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyNzo1N1rOGogDSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTM1Mw==", "bodyText": "You should probably create an \"isPotion(ItemStack)\" method for this instead of doing this multiple times, also", "url": "https://github.com/Slimefun/Slimefun4/pull/2020#discussion_r445121353", "createdAt": "2020-06-24T19:27:57Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/AutoBrewer.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines;\n+\n+import java.util.HashMap;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.PotionMeta;\n+import org.bukkit.potion.PotionData;\n+import org.bukkit.potion.PotionType;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import me.mrCookieSlime.Slimefun.api.energy.ChargableBlock;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ *\n+ * The Auto Brewer machine with most if not all potion recipes.\n+ *\n+ * @author Linox\n+ *\n+ * @see AContainer\n+ *\n+ */\n+public class AutoBrewer extends AContainer {\n+\n+    private static final HashMap<Material, PotionType> potionRecipes = new HashMap<>();\n+    private static final HashMap<PotionType, PotionType> fermSpiderEye = new HashMap<>();\n+\n+    static {\n+        potionRecipes.put(Material.SUGAR, PotionType.SPEED);\n+        potionRecipes.put(Material.RABBIT_FOOT, PotionType.JUMP);\n+        potionRecipes.put(Material.BLAZE_POWDER, PotionType.STRENGTH);\n+        potionRecipes.put(Material.GLISTERING_MELON_SLICE, PotionType.INSTANT_HEAL);\n+        potionRecipes.put(Material.SPIDER_EYE, PotionType.POISON);\n+        potionRecipes.put(Material.GHAST_TEAR, PotionType.REGEN);\n+        potionRecipes.put(Material.MAGMA_CREAM, PotionType.FIRE_RESISTANCE);\n+        potionRecipes.put(Material.PUFFERFISH, PotionType.WATER_BREATHING);\n+        potionRecipes.put(Material.GOLDEN_CARROT, PotionType.NIGHT_VISION);\n+        potionRecipes.put(Material.TURTLE_HELMET, PotionType.TURTLE_MASTER);\n+        potionRecipes.put(Material.PHANTOM_MEMBRANE, PotionType.SLOW_FALLING);\n+\n+        fermSpiderEye.put(PotionType.SPEED, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.JUMP, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.INSTANT_HEAL, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.POISON, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.NIGHT_VISION, PotionType.INVISIBILITY);\n+    }\n+\n+    public AutoBrewer(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    protected void tick(Block b) {\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (isProcessing(b)) {\n+            int timeleft = progress.get(b);\n+\n+            if (timeleft > 0) {\n+                ChestMenuUtils.updateProgressbar(menu, 22, timeleft, processing.get(b).getTicks(), getProgressBar());\n+\n+                if (ChargableBlock.isChargable(b)) {\n+                    if (ChargableBlock.getCharge(b) < getEnergyConsumption()) {\n+                        return;\n+                    }\n+\n+                    ChargableBlock.addCharge(b, -getEnergyConsumption());\n+                    progress.put(b, timeleft - 1);\n+                }\n+                else {\n+                    progress.put(b, timeleft - 1);\n+                }\n+            }\n+            else {\n+                menu.replaceExistingItem(22, new CustomItem(new ItemStack(Material.BLACK_STAINED_GLASS_PANE), \" \"));\n+\n+                for (ItemStack item : processing.get(b).getOutput()) {\n+                    menu.pushItem(item, getOutputSlots());\n+                }\n+\n+                progress.remove(b);\n+                processing.remove(b);\n+            }\n+        }\n+        else {\n+            MachineRecipe recipe = findRecipe(menu);\n+\n+            if (recipe != null) {\n+                if (!InvUtils.fitAll(menu.toInventory(), recipe.getOutput(), getOutputSlots())) {\n+                    return;\n+                }\n+\n+                for (int slot : getInputSlots()) {\n+                    menu.consumeItem(slot);\n+                }\n+\n+                processing.put(b, recipe);\n+                progress.put(b, recipe.getTicks());\n+            }\n+        }\n+    }\n+\n+    private MachineRecipe findRecipe(BlockMenu menu) {\n+        ItemStack input1 = menu.getItemInSlot(getInputSlots()[0]);\n+        ItemStack input2 = menu.getItemInSlot(getInputSlots()[1]);\n+\n+        if (input1 == null || input2 == null) return null;\n+\n+        if (input1.getType().name().endsWith(\"POTION\") || input2.getType().name().endsWith(\"POTION\")) {\n+            boolean slot = input1.getType().name().endsWith(\"POTION\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776dc2a302c2d6c7608e3ed4e98edb58158e0515"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzQ3NDUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/AutoBrewer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToyODoyMFrOGogEIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozMzoxOFrOGogNkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTU2OQ==", "bodyText": "Why a carrot on a stick?", "url": "https://github.com/Slimefun/Slimefun4/pull/2020#discussion_r445121569", "createdAt": "2020-06-24T19:28:20Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/AutoBrewer.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines;\n+\n+import java.util.HashMap;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.PotionMeta;\n+import org.bukkit.potion.PotionData;\n+import org.bukkit.potion.PotionType;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import me.mrCookieSlime.Slimefun.api.energy.ChargableBlock;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ *\n+ * The Auto Brewer machine with most if not all potion recipes.\n+ *\n+ * @author Linox\n+ *\n+ * @see AContainer\n+ *\n+ */\n+public class AutoBrewer extends AContainer {\n+\n+    private static final HashMap<Material, PotionType> potionRecipes = new HashMap<>();\n+    private static final HashMap<PotionType, PotionType> fermSpiderEye = new HashMap<>();\n+\n+    static {\n+        potionRecipes.put(Material.SUGAR, PotionType.SPEED);\n+        potionRecipes.put(Material.RABBIT_FOOT, PotionType.JUMP);\n+        potionRecipes.put(Material.BLAZE_POWDER, PotionType.STRENGTH);\n+        potionRecipes.put(Material.GLISTERING_MELON_SLICE, PotionType.INSTANT_HEAL);\n+        potionRecipes.put(Material.SPIDER_EYE, PotionType.POISON);\n+        potionRecipes.put(Material.GHAST_TEAR, PotionType.REGEN);\n+        potionRecipes.put(Material.MAGMA_CREAM, PotionType.FIRE_RESISTANCE);\n+        potionRecipes.put(Material.PUFFERFISH, PotionType.WATER_BREATHING);\n+        potionRecipes.put(Material.GOLDEN_CARROT, PotionType.NIGHT_VISION);\n+        potionRecipes.put(Material.TURTLE_HELMET, PotionType.TURTLE_MASTER);\n+        potionRecipes.put(Material.PHANTOM_MEMBRANE, PotionType.SLOW_FALLING);\n+\n+        fermSpiderEye.put(PotionType.SPEED, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.JUMP, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.INSTANT_HEAL, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.POISON, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.NIGHT_VISION, PotionType.INVISIBILITY);\n+    }\n+\n+    public AutoBrewer(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    protected void tick(Block b) {\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (isProcessing(b)) {\n+            int timeleft = progress.get(b);\n+\n+            if (timeleft > 0) {\n+                ChestMenuUtils.updateProgressbar(menu, 22, timeleft, processing.get(b).getTicks(), getProgressBar());\n+\n+                if (ChargableBlock.isChargable(b)) {\n+                    if (ChargableBlock.getCharge(b) < getEnergyConsumption()) {\n+                        return;\n+                    }\n+\n+                    ChargableBlock.addCharge(b, -getEnergyConsumption());\n+                    progress.put(b, timeleft - 1);\n+                }\n+                else {\n+                    progress.put(b, timeleft - 1);\n+                }\n+            }\n+            else {\n+                menu.replaceExistingItem(22, new CustomItem(new ItemStack(Material.BLACK_STAINED_GLASS_PANE), \" \"));\n+\n+                for (ItemStack item : processing.get(b).getOutput()) {\n+                    menu.pushItem(item, getOutputSlots());\n+                }\n+\n+                progress.remove(b);\n+                processing.remove(b);\n+            }\n+        }\n+        else {\n+            MachineRecipe recipe = findRecipe(menu);\n+\n+            if (recipe != null) {\n+                if (!InvUtils.fitAll(menu.toInventory(), recipe.getOutput(), getOutputSlots())) {\n+                    return;\n+                }\n+\n+                for (int slot : getInputSlots()) {\n+                    menu.consumeItem(slot);\n+                }\n+\n+                processing.put(b, recipe);\n+                progress.put(b, recipe.getTicks());\n+            }\n+        }\n+    }\n+\n+    private MachineRecipe findRecipe(BlockMenu menu) {\n+        ItemStack input1 = menu.getItemInSlot(getInputSlots()[0]);\n+        ItemStack input2 = menu.getItemInSlot(getInputSlots()[1]);\n+\n+        if (input1 == null || input2 == null) return null;\n+\n+        if (input1.getType().name().endsWith(\"POTION\") || input2.getType().name().endsWith(\"POTION\")) {\n+            boolean slot = input1.getType().name().endsWith(\"POTION\");\n+            ItemStack pItem = slot ? input1 : input2;\n+            ItemStack iItem = slot ? input2 : input1;\n+\n+            PotionMeta potion = (PotionMeta) pItem.getItemMeta();\n+            if (potion == null) return null;\n+            PotionData potionData = potion.getBasePotionData();\n+\n+            ItemStack output;\n+            if (potionData.getType() == PotionType.WATER) {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(PotionType.WEAKNESS, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.NETHER_WART) {\n+                    potion.setBasePotionData(new PotionData(PotionType.AWKWARD, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (pItem.getType() == Material.POTION && iItem.getType() == Material.GUNPOWDER) {\n+                    output = new ItemStack(Material.SPLASH_POTION);\n+\n+                } else if (pItem.getType() == Material.SPLASH_POTION && iItem.getType() == Material.DRAGON_BREATH) {\n+                    output = new ItemStack(Material.LINGERING_POTION);\n+\n+                } else return null;\n+\n+            } else {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(fermSpiderEye.get(potionData.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.REDSTONE) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), true, potionData.isUpgraded()));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.GLOWSTONE_DUST) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), potionData.isExtended(), true));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (potionData.getType() == PotionType.AWKWARD && potionRecipes.containsKey(iItem.getType())) {\n+                    potion.setBasePotionData(new PotionData(potionRecipes.get(iItem.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else return null;\n+            }\n+\n+            output.setItemMeta(potion);\n+\n+            return new MachineRecipe(30, new ItemStack[]{input1, input2}, new ItemStack[]{output});\n+        } else return null;\n+    }\n+\n+    @Override\n+    public String getInventoryTitle() {\n+        return \"&6Auto-Brewer\";\n+    }\n+\n+    @Override\n+    public ItemStack getProgressBar() {\n+        return new ItemStack(Material.CARROT_ON_A_STICK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776dc2a302c2d6c7608e3ed4e98edb58158e0515"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTk5Mw==", "bodyText": "because I thought it looks similar to brewing stand. any better idea?", "url": "https://github.com/Slimefun/Slimefun4/pull/2020#discussion_r445121993", "createdAt": "2020-06-24T19:29:16Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/AutoBrewer.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines;\n+\n+import java.util.HashMap;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.PotionMeta;\n+import org.bukkit.potion.PotionData;\n+import org.bukkit.potion.PotionType;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import me.mrCookieSlime.Slimefun.api.energy.ChargableBlock;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ *\n+ * The Auto Brewer machine with most if not all potion recipes.\n+ *\n+ * @author Linox\n+ *\n+ * @see AContainer\n+ *\n+ */\n+public class AutoBrewer extends AContainer {\n+\n+    private static final HashMap<Material, PotionType> potionRecipes = new HashMap<>();\n+    private static final HashMap<PotionType, PotionType> fermSpiderEye = new HashMap<>();\n+\n+    static {\n+        potionRecipes.put(Material.SUGAR, PotionType.SPEED);\n+        potionRecipes.put(Material.RABBIT_FOOT, PotionType.JUMP);\n+        potionRecipes.put(Material.BLAZE_POWDER, PotionType.STRENGTH);\n+        potionRecipes.put(Material.GLISTERING_MELON_SLICE, PotionType.INSTANT_HEAL);\n+        potionRecipes.put(Material.SPIDER_EYE, PotionType.POISON);\n+        potionRecipes.put(Material.GHAST_TEAR, PotionType.REGEN);\n+        potionRecipes.put(Material.MAGMA_CREAM, PotionType.FIRE_RESISTANCE);\n+        potionRecipes.put(Material.PUFFERFISH, PotionType.WATER_BREATHING);\n+        potionRecipes.put(Material.GOLDEN_CARROT, PotionType.NIGHT_VISION);\n+        potionRecipes.put(Material.TURTLE_HELMET, PotionType.TURTLE_MASTER);\n+        potionRecipes.put(Material.PHANTOM_MEMBRANE, PotionType.SLOW_FALLING);\n+\n+        fermSpiderEye.put(PotionType.SPEED, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.JUMP, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.INSTANT_HEAL, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.POISON, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.NIGHT_VISION, PotionType.INVISIBILITY);\n+    }\n+\n+    public AutoBrewer(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    protected void tick(Block b) {\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (isProcessing(b)) {\n+            int timeleft = progress.get(b);\n+\n+            if (timeleft > 0) {\n+                ChestMenuUtils.updateProgressbar(menu, 22, timeleft, processing.get(b).getTicks(), getProgressBar());\n+\n+                if (ChargableBlock.isChargable(b)) {\n+                    if (ChargableBlock.getCharge(b) < getEnergyConsumption()) {\n+                        return;\n+                    }\n+\n+                    ChargableBlock.addCharge(b, -getEnergyConsumption());\n+                    progress.put(b, timeleft - 1);\n+                }\n+                else {\n+                    progress.put(b, timeleft - 1);\n+                }\n+            }\n+            else {\n+                menu.replaceExistingItem(22, new CustomItem(new ItemStack(Material.BLACK_STAINED_GLASS_PANE), \" \"));\n+\n+                for (ItemStack item : processing.get(b).getOutput()) {\n+                    menu.pushItem(item, getOutputSlots());\n+                }\n+\n+                progress.remove(b);\n+                processing.remove(b);\n+            }\n+        }\n+        else {\n+            MachineRecipe recipe = findRecipe(menu);\n+\n+            if (recipe != null) {\n+                if (!InvUtils.fitAll(menu.toInventory(), recipe.getOutput(), getOutputSlots())) {\n+                    return;\n+                }\n+\n+                for (int slot : getInputSlots()) {\n+                    menu.consumeItem(slot);\n+                }\n+\n+                processing.put(b, recipe);\n+                progress.put(b, recipe.getTicks());\n+            }\n+        }\n+    }\n+\n+    private MachineRecipe findRecipe(BlockMenu menu) {\n+        ItemStack input1 = menu.getItemInSlot(getInputSlots()[0]);\n+        ItemStack input2 = menu.getItemInSlot(getInputSlots()[1]);\n+\n+        if (input1 == null || input2 == null) return null;\n+\n+        if (input1.getType().name().endsWith(\"POTION\") || input2.getType().name().endsWith(\"POTION\")) {\n+            boolean slot = input1.getType().name().endsWith(\"POTION\");\n+            ItemStack pItem = slot ? input1 : input2;\n+            ItemStack iItem = slot ? input2 : input1;\n+\n+            PotionMeta potion = (PotionMeta) pItem.getItemMeta();\n+            if (potion == null) return null;\n+            PotionData potionData = potion.getBasePotionData();\n+\n+            ItemStack output;\n+            if (potionData.getType() == PotionType.WATER) {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(PotionType.WEAKNESS, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.NETHER_WART) {\n+                    potion.setBasePotionData(new PotionData(PotionType.AWKWARD, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (pItem.getType() == Material.POTION && iItem.getType() == Material.GUNPOWDER) {\n+                    output = new ItemStack(Material.SPLASH_POTION);\n+\n+                } else if (pItem.getType() == Material.SPLASH_POTION && iItem.getType() == Material.DRAGON_BREATH) {\n+                    output = new ItemStack(Material.LINGERING_POTION);\n+\n+                } else return null;\n+\n+            } else {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(fermSpiderEye.get(potionData.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.REDSTONE) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), true, potionData.isUpgraded()));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.GLOWSTONE_DUST) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), potionData.isExtended(), true));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (potionData.getType() == PotionType.AWKWARD && potionRecipes.containsKey(iItem.getType())) {\n+                    potion.setBasePotionData(new PotionData(potionRecipes.get(iItem.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else return null;\n+            }\n+\n+            output.setItemMeta(potion);\n+\n+            return new MachineRecipe(30, new ItemStack[]{input1, input2}, new ItemStack[]{output});\n+        } else return null;\n+    }\n+\n+    @Override\n+    public String getInventoryTitle() {\n+        return \"&6Auto-Brewer\";\n+    }\n+\n+    @Override\n+    public ItemStack getProgressBar() {\n+        return new ItemStack(Material.CARROT_ON_A_STICK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTU2OQ=="}, "originalCommit": {"oid": "776dc2a302c2d6c7608e3ed4e98edb58158e0515"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMzA4MQ==", "bodyText": "Nah, not really :/", "url": "https://github.com/Slimefun/Slimefun4/pull/2020#discussion_r445123081", "createdAt": "2020-06-24T19:31:25Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/AutoBrewer.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines;\n+\n+import java.util.HashMap;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.PotionMeta;\n+import org.bukkit.potion.PotionData;\n+import org.bukkit.potion.PotionType;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import me.mrCookieSlime.Slimefun.api.energy.ChargableBlock;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ *\n+ * The Auto Brewer machine with most if not all potion recipes.\n+ *\n+ * @author Linox\n+ *\n+ * @see AContainer\n+ *\n+ */\n+public class AutoBrewer extends AContainer {\n+\n+    private static final HashMap<Material, PotionType> potionRecipes = new HashMap<>();\n+    private static final HashMap<PotionType, PotionType> fermSpiderEye = new HashMap<>();\n+\n+    static {\n+        potionRecipes.put(Material.SUGAR, PotionType.SPEED);\n+        potionRecipes.put(Material.RABBIT_FOOT, PotionType.JUMP);\n+        potionRecipes.put(Material.BLAZE_POWDER, PotionType.STRENGTH);\n+        potionRecipes.put(Material.GLISTERING_MELON_SLICE, PotionType.INSTANT_HEAL);\n+        potionRecipes.put(Material.SPIDER_EYE, PotionType.POISON);\n+        potionRecipes.put(Material.GHAST_TEAR, PotionType.REGEN);\n+        potionRecipes.put(Material.MAGMA_CREAM, PotionType.FIRE_RESISTANCE);\n+        potionRecipes.put(Material.PUFFERFISH, PotionType.WATER_BREATHING);\n+        potionRecipes.put(Material.GOLDEN_CARROT, PotionType.NIGHT_VISION);\n+        potionRecipes.put(Material.TURTLE_HELMET, PotionType.TURTLE_MASTER);\n+        potionRecipes.put(Material.PHANTOM_MEMBRANE, PotionType.SLOW_FALLING);\n+\n+        fermSpiderEye.put(PotionType.SPEED, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.JUMP, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.INSTANT_HEAL, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.POISON, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.NIGHT_VISION, PotionType.INVISIBILITY);\n+    }\n+\n+    public AutoBrewer(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    protected void tick(Block b) {\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (isProcessing(b)) {\n+            int timeleft = progress.get(b);\n+\n+            if (timeleft > 0) {\n+                ChestMenuUtils.updateProgressbar(menu, 22, timeleft, processing.get(b).getTicks(), getProgressBar());\n+\n+                if (ChargableBlock.isChargable(b)) {\n+                    if (ChargableBlock.getCharge(b) < getEnergyConsumption()) {\n+                        return;\n+                    }\n+\n+                    ChargableBlock.addCharge(b, -getEnergyConsumption());\n+                    progress.put(b, timeleft - 1);\n+                }\n+                else {\n+                    progress.put(b, timeleft - 1);\n+                }\n+            }\n+            else {\n+                menu.replaceExistingItem(22, new CustomItem(new ItemStack(Material.BLACK_STAINED_GLASS_PANE), \" \"));\n+\n+                for (ItemStack item : processing.get(b).getOutput()) {\n+                    menu.pushItem(item, getOutputSlots());\n+                }\n+\n+                progress.remove(b);\n+                processing.remove(b);\n+            }\n+        }\n+        else {\n+            MachineRecipe recipe = findRecipe(menu);\n+\n+            if (recipe != null) {\n+                if (!InvUtils.fitAll(menu.toInventory(), recipe.getOutput(), getOutputSlots())) {\n+                    return;\n+                }\n+\n+                for (int slot : getInputSlots()) {\n+                    menu.consumeItem(slot);\n+                }\n+\n+                processing.put(b, recipe);\n+                progress.put(b, recipe.getTicks());\n+            }\n+        }\n+    }\n+\n+    private MachineRecipe findRecipe(BlockMenu menu) {\n+        ItemStack input1 = menu.getItemInSlot(getInputSlots()[0]);\n+        ItemStack input2 = menu.getItemInSlot(getInputSlots()[1]);\n+\n+        if (input1 == null || input2 == null) return null;\n+\n+        if (input1.getType().name().endsWith(\"POTION\") || input2.getType().name().endsWith(\"POTION\")) {\n+            boolean slot = input1.getType().name().endsWith(\"POTION\");\n+            ItemStack pItem = slot ? input1 : input2;\n+            ItemStack iItem = slot ? input2 : input1;\n+\n+            PotionMeta potion = (PotionMeta) pItem.getItemMeta();\n+            if (potion == null) return null;\n+            PotionData potionData = potion.getBasePotionData();\n+\n+            ItemStack output;\n+            if (potionData.getType() == PotionType.WATER) {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(PotionType.WEAKNESS, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.NETHER_WART) {\n+                    potion.setBasePotionData(new PotionData(PotionType.AWKWARD, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (pItem.getType() == Material.POTION && iItem.getType() == Material.GUNPOWDER) {\n+                    output = new ItemStack(Material.SPLASH_POTION);\n+\n+                } else if (pItem.getType() == Material.SPLASH_POTION && iItem.getType() == Material.DRAGON_BREATH) {\n+                    output = new ItemStack(Material.LINGERING_POTION);\n+\n+                } else return null;\n+\n+            } else {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(fermSpiderEye.get(potionData.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.REDSTONE) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), true, potionData.isUpgraded()));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.GLOWSTONE_DUST) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), potionData.isExtended(), true));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (potionData.getType() == PotionType.AWKWARD && potionRecipes.containsKey(iItem.getType())) {\n+                    potion.setBasePotionData(new PotionData(potionRecipes.get(iItem.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else return null;\n+            }\n+\n+            output.setItemMeta(potion);\n+\n+            return new MachineRecipe(30, new ItemStack[]{input1, input2}, new ItemStack[]{output});\n+        } else return null;\n+    }\n+\n+    @Override\n+    public String getInventoryTitle() {\n+        return \"&6Auto-Brewer\";\n+    }\n+\n+    @Override\n+    public ItemStack getProgressBar() {\n+        return new ItemStack(Material.CARROT_ON_A_STICK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTU2OQ=="}, "originalCommit": {"oid": "776dc2a302c2d6c7608e3ed4e98edb58158e0515"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMzk4Ng==", "bodyText": "if you don't have a better idea why not keep it?", "url": "https://github.com/Slimefun/Slimefun4/pull/2020#discussion_r445123986", "createdAt": "2020-06-24T19:33:18Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/electric/machines/AutoBrewer.java", "diffHunk": "@@ -0,0 +1,201 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines;\n+\n+import java.util.HashMap;\n+\n+import org.bukkit.Material;\n+import org.bukkit.block.Block;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.PotionMeta;\n+import org.bukkit.potion.PotionData;\n+import org.bukkit.potion.PotionType;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.InvUtils;\n+import io.github.thebusybiscuit.cscorelib2.item.CustomItem;\n+import io.github.thebusybiscuit.slimefun4.utils.ChestMenuUtils;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.AContainer;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.abstractItems.MachineRecipe;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import me.mrCookieSlime.Slimefun.api.energy.ChargableBlock;\n+import me.mrCookieSlime.Slimefun.api.inventory.BlockMenu;\n+\n+/**\n+ *\n+ * The Auto Brewer machine with most if not all potion recipes.\n+ *\n+ * @author Linox\n+ *\n+ * @see AContainer\n+ *\n+ */\n+public class AutoBrewer extends AContainer {\n+\n+    private static final HashMap<Material, PotionType> potionRecipes = new HashMap<>();\n+    private static final HashMap<PotionType, PotionType> fermSpiderEye = new HashMap<>();\n+\n+    static {\n+        potionRecipes.put(Material.SUGAR, PotionType.SPEED);\n+        potionRecipes.put(Material.RABBIT_FOOT, PotionType.JUMP);\n+        potionRecipes.put(Material.BLAZE_POWDER, PotionType.STRENGTH);\n+        potionRecipes.put(Material.GLISTERING_MELON_SLICE, PotionType.INSTANT_HEAL);\n+        potionRecipes.put(Material.SPIDER_EYE, PotionType.POISON);\n+        potionRecipes.put(Material.GHAST_TEAR, PotionType.REGEN);\n+        potionRecipes.put(Material.MAGMA_CREAM, PotionType.FIRE_RESISTANCE);\n+        potionRecipes.put(Material.PUFFERFISH, PotionType.WATER_BREATHING);\n+        potionRecipes.put(Material.GOLDEN_CARROT, PotionType.NIGHT_VISION);\n+        potionRecipes.put(Material.TURTLE_HELMET, PotionType.TURTLE_MASTER);\n+        potionRecipes.put(Material.PHANTOM_MEMBRANE, PotionType.SLOW_FALLING);\n+\n+        fermSpiderEye.put(PotionType.SPEED, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.JUMP, PotionType.SLOWNESS);\n+        fermSpiderEye.put(PotionType.INSTANT_HEAL, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.POISON, PotionType.INSTANT_DAMAGE);\n+        fermSpiderEye.put(PotionType.NIGHT_VISION, PotionType.INVISIBILITY);\n+    }\n+\n+    public AutoBrewer(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe) {\n+        super(category, item, recipeType, recipe);\n+    }\n+\n+    @Override\n+    protected void tick(Block b) {\n+        BlockMenu menu = BlockStorage.getInventory(b.getLocation());\n+\n+        if (isProcessing(b)) {\n+            int timeleft = progress.get(b);\n+\n+            if (timeleft > 0) {\n+                ChestMenuUtils.updateProgressbar(menu, 22, timeleft, processing.get(b).getTicks(), getProgressBar());\n+\n+                if (ChargableBlock.isChargable(b)) {\n+                    if (ChargableBlock.getCharge(b) < getEnergyConsumption()) {\n+                        return;\n+                    }\n+\n+                    ChargableBlock.addCharge(b, -getEnergyConsumption());\n+                    progress.put(b, timeleft - 1);\n+                }\n+                else {\n+                    progress.put(b, timeleft - 1);\n+                }\n+            }\n+            else {\n+                menu.replaceExistingItem(22, new CustomItem(new ItemStack(Material.BLACK_STAINED_GLASS_PANE), \" \"));\n+\n+                for (ItemStack item : processing.get(b).getOutput()) {\n+                    menu.pushItem(item, getOutputSlots());\n+                }\n+\n+                progress.remove(b);\n+                processing.remove(b);\n+            }\n+        }\n+        else {\n+            MachineRecipe recipe = findRecipe(menu);\n+\n+            if (recipe != null) {\n+                if (!InvUtils.fitAll(menu.toInventory(), recipe.getOutput(), getOutputSlots())) {\n+                    return;\n+                }\n+\n+                for (int slot : getInputSlots()) {\n+                    menu.consumeItem(slot);\n+                }\n+\n+                processing.put(b, recipe);\n+                progress.put(b, recipe.getTicks());\n+            }\n+        }\n+    }\n+\n+    private MachineRecipe findRecipe(BlockMenu menu) {\n+        ItemStack input1 = menu.getItemInSlot(getInputSlots()[0]);\n+        ItemStack input2 = menu.getItemInSlot(getInputSlots()[1]);\n+\n+        if (input1 == null || input2 == null) return null;\n+\n+        if (input1.getType().name().endsWith(\"POTION\") || input2.getType().name().endsWith(\"POTION\")) {\n+            boolean slot = input1.getType().name().endsWith(\"POTION\");\n+            ItemStack pItem = slot ? input1 : input2;\n+            ItemStack iItem = slot ? input2 : input1;\n+\n+            PotionMeta potion = (PotionMeta) pItem.getItemMeta();\n+            if (potion == null) return null;\n+            PotionData potionData = potion.getBasePotionData();\n+\n+            ItemStack output;\n+            if (potionData.getType() == PotionType.WATER) {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(PotionType.WEAKNESS, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.NETHER_WART) {\n+                    potion.setBasePotionData(new PotionData(PotionType.AWKWARD, false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (pItem.getType() == Material.POTION && iItem.getType() == Material.GUNPOWDER) {\n+                    output = new ItemStack(Material.SPLASH_POTION);\n+\n+                } else if (pItem.getType() == Material.SPLASH_POTION && iItem.getType() == Material.DRAGON_BREATH) {\n+                    output = new ItemStack(Material.LINGERING_POTION);\n+\n+                } else return null;\n+\n+            } else {\n+                if (iItem.getType() == Material.FERMENTED_SPIDER_EYE) {\n+                    potion.setBasePotionData(new PotionData(fermSpiderEye.get(potionData.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.REDSTONE) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), true, potionData.isUpgraded()));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (iItem.getType() == Material.GLOWSTONE_DUST) {\n+                    potion.setBasePotionData(new PotionData(potionData.getType(), potionData.isExtended(), true));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else if (potionData.getType() == PotionType.AWKWARD && potionRecipes.containsKey(iItem.getType())) {\n+                    potion.setBasePotionData(new PotionData(potionRecipes.get(iItem.getType()), false, false));\n+                    output = new ItemStack(pItem.getType());\n+\n+                } else return null;\n+            }\n+\n+            output.setItemMeta(potion);\n+\n+            return new MachineRecipe(30, new ItemStack[]{input1, input2}, new ItemStack[]{output});\n+        } else return null;\n+    }\n+\n+    @Override\n+    public String getInventoryTitle() {\n+        return \"&6Auto-Brewer\";\n+    }\n+\n+    @Override\n+    public ItemStack getProgressBar() {\n+        return new ItemStack(Material.CARROT_ON_A_STICK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTU2OQ=="}, "originalCommit": {"oid": "776dc2a302c2d6c7608e3ed4e98edb58158e0515"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 377, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}