{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MzI2Njk4", "number": 2309, "title": "Charge command", "bodyText": "Description\nAdds /sf charge, a command which charges any Rechargeable item to max charge.\nChanges\n\nChargeCommand subcommand class\nAdded ChargeCommand to SlimefunSubCommands\nAdded slimefun.command.charge to plugin.yml\nAdded success and error messages to messages_en.yml\n\nRelated Issues\nN/A\nChecklist\n\n\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.\n I followed the existing code standards and didn't mess up the formatting.\n I did my best to add documentation to any public classes or methods I added.\n I have added Nonnull and Nullable annotations to my methods to indicate their behaviour for null values\n I added sufficient Unit Tests to cover my code.", "createdAt": "2020-09-10T21:03:10Z", "url": "https://github.com/Slimefun/Slimefun4/pull/2309", "merged": true, "mergeCommit": {"oid": "05fd47a1707be7d07360146473227e687ab9f65d"}, "closed": true, "closedAt": "2020-09-11T08:31:46Z", "author": {"login": "NCBPFluffyBear"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHnEOWgH2gAyNDg0MzI2Njk4OmUxYjkyMzhjZjEzNmFiYzI5NjQ4ZTY0OGYxODA0Y2MzNjc3NGM1NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHxGc5AFqTQ4NjU4MTM5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e1b9238cf136abc29648e648f1804cc36774c560", "author": {"user": {"login": "NCBPFluffyBear", "name": "FluffyBear"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/e1b9238cf136abc29648e648f1804cc36774c560", "committedDate": "2020-09-10T20:45:37Z", "message": "Merge pull request #2 from Slimefun/master\n\nUpdate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b95ed02936f0d6dbbb9ee53b34f8c5378573bed", "author": {"user": {"login": "NCBPFluffyBear", "name": "FluffyBear"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/6b95ed02936f0d6dbbb9ee53b34f8c5378573bed", "committedDate": "2020-09-10T21:02:03Z", "message": "Added Charge Command"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzEyODEw", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486312810", "createdAt": "2020-09-10T21:10:17Z", "commit": {"oid": "6b95ed02936f0d6dbbb9ee53b34f8c5378573bed"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxMDoxOFrOHQF3ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxNDoyOFrOHQF_GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNTM3MA==", "bodyText": "*/sf charge", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#discussion_r486635370", "createdAt": "2020-09-10T21:10:18Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/commands/TestChargeCommand.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.commands;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+class TestChargeCommand {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Test\n+    @DisplayName(\"Test if /charge charges the item the player is holding\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b95ed02936f0d6dbbb9ee53b34f8c5378573bed"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNjI1NA==", "bodyText": "You should also assert the ground condition, that the charge was 0 before executing the command.\nThis way we can be certain that this did actually update.", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#discussion_r486636254", "createdAt": "2020-09-10T21:12:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/commands/TestChargeCommand.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.commands;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+class TestChargeCommand {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Test\n+    @DisplayName(\"Test if /charge charges the item the player is holding\")\n+    void testCommand() {\n+        Category category = TestUtilities.getCategory(plugin, \"rechargeable\");\n+        final SlimefunItemStack RECHARGEABLE_ITEM = new SlimefunItemStack(\"RECHARGEABLE_ITEM\", Material.REDSTONE_BLOCK, \"Rechargeable Item\", \"This isn't real\", LoreBuilder.powerCharged(0, 100));\n+        new RechargeableMock(category, RECHARGEABLE_ITEM, RecipeType.NULL, new ItemStack[9]).register(plugin);\n+\n+        Player player = server.addPlayer();\n+        player.setOp(true);\n+        player.getInventory().setItemInMainHand(RECHARGEABLE_ITEM.clone());\n+        server.execute(\"slimefun\", player, \"charge\");\n+\n+        ItemStack chargedItemStack = player.getInventory().getItemInMainHand();\n+        Rechargeable chargedItem = (Rechargeable) SlimefunItem.getByItem(chargedItemStack);\n+\n+        Assertions.assertEquals(chargedItem.getItemCharge(chargedItemStack), chargedItem.getMaxItemCharge(chargedItemStack));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b95ed02936f0d6dbbb9ee53b34f8c5378573bed"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNjYwMg==", "bodyText": "Also you should pick a more unique id to prevent overlaps with future or existing unit tests, \"SF_CHARGE_TEST_ITEM\" for example.", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#discussion_r486636602", "createdAt": "2020-09-10T21:12:53Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/commands/TestChargeCommand.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.commands;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+class TestChargeCommand {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Test\n+    @DisplayName(\"Test if /charge charges the item the player is holding\")\n+    void testCommand() {\n+        Category category = TestUtilities.getCategory(plugin, \"rechargeable\");\n+        final SlimefunItemStack RECHARGEABLE_ITEM = new SlimefunItemStack(\"RECHARGEABLE_ITEM\", Material.REDSTONE_BLOCK, \"Rechargeable Item\", \"This isn't real\", LoreBuilder.powerCharged(0, 100));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b95ed02936f0d6dbbb9ee53b34f8c5378573bed"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNjk5NQ==", "bodyText": "This test alone is pretty good and sufficient.\nIn theory you could add more tests to achieve better coverage but I think this is enough", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#discussion_r486636995", "createdAt": "2020-09-10T21:13:43Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/commands/TestChargeCommand.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.commands;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+class TestChargeCommand {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b95ed02936f0d6dbbb9ee53b34f8c5378573bed"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNzMzNg==", "bodyText": "You could be more specific here *\"to the maximum value as defined by Rechargeable#getMax...\"", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#discussion_r486637336", "createdAt": "2020-09-10T21:14:28Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/commands/subcommands/ChargeCommand.java", "diffHunk": "@@ -0,0 +1,54 @@\n+package io.github.thebusybiscuit.slimefun4.core.commands.subcommands;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;\n+import io.github.thebusybiscuit.slimefun4.core.commands.SlimefunCommand;\n+import io.github.thebusybiscuit.slimefun4.core.commands.SubCommand;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.bukkit.command.CommandSender;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+\n+/**\n+ * {@link ChargeCommand} adds an in game command which charges any {@link Rechargeable}\n+ * item to max.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b95ed02936f0d6dbbb9ee53b34f8c5378573bed"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f52f62c6ab9de0328f3255b3b70020fc020138", "author": {"user": {"login": "NCBPFluffyBear", "name": "FluffyBear"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/57f52f62c6ab9de0328f3255b3b70020fc020138", "committedDate": "2020-09-10T21:27:50Z", "message": "Did requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzI3MDQ3", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486327047", "createdAt": "2020-09-10T21:35:10Z", "commit": {"oid": "57f52f62c6ab9de0328f3255b3b70020fc020138"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozNToxMFrOHQGkag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozNToxMFrOHQGkag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Njg5MA==", "bodyText": "No need to mark this as final here, especially not in a Unit Test.", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#discussion_r486646890", "createdAt": "2020-09-10T21:35:10Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/commands/TestChargeCommand.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.commands;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+class TestChargeCommand {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Test\n+    @DisplayName(\"Test if /sf charge charges the item the player is holding\")\n+    void testCommand() {\n+        Category category = TestUtilities.getCategory(plugin, \"rechargeable\");\n+        final SlimefunItemStack RECHARGEABLE_ITEM = new SlimefunItemStack(\"SF_CHARGE_TEST_ITEM\", Material.REDSTONE_BLOCK, \"Rechargeable Item\", \"This isn't real\", LoreBuilder.powerCharged(0, 100));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f52f62c6ab9de0328f3255b3b70020fc020138"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzI3MzUx", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486327351", "createdAt": "2020-09-10T21:35:41Z", "commit": {"oid": "57f52f62c6ab9de0328f3255b3b70020fc020138"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozNTo0MlrOHQGlaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozNTo0MlrOHQGlaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NzE0NQ==", "bodyText": "\"RechargeableItem\" was probably a more appropriate class name, my previous comment was only in regard to the id, not the class name.", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#discussion_r486647145", "createdAt": "2020-09-10T21:35:42Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/commands/TestChargeCommand.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package io.github.thebusybiscuit.slimefun4.testing.tests.commands;\n+\n+import be.seeseemelk.mockbukkit.MockBukkit;\n+import be.seeseemelk.mockbukkit.ServerMock;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.Rechargeable;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.testing.TestUtilities;\n+import io.github.thebusybiscuit.slimefun4.utils.LoreBuilder;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Material;\n+import org.bukkit.entity.Player;\n+import org.bukkit.inventory.ItemStack;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.DisplayName;\n+import org.junit.jupiter.api.Test;\n+\n+class TestChargeCommand {\n+\n+    private static ServerMock server;\n+    private static SlimefunPlugin plugin;\n+\n+    @BeforeAll\n+    public static void load() {\n+        server = MockBukkit.mock();\n+        plugin = MockBukkit.load(SlimefunPlugin.class);\n+    }\n+\n+    @AfterAll\n+    public static void unload() {\n+        MockBukkit.unmock();\n+    }\n+\n+    @Test\n+    @DisplayName(\"Test if /sf charge charges the item the player is holding\")\n+    void testCommand() {\n+        Category category = TestUtilities.getCategory(plugin, \"rechargeable\");\n+        final SlimefunItemStack RECHARGEABLE_ITEM = new SlimefunItemStack(\"SF_CHARGE_TEST_ITEM\", Material.REDSTONE_BLOCK, \"Rechargeable Item\", \"This isn't real\", LoreBuilder.powerCharged(0, 100));\n+        new SlimefunChargeTest(category, RECHARGEABLE_ITEM, RecipeType.NULL, new ItemStack[9]).register(plugin);\n+\n+        Player player = server.addPlayer();\n+        player.setOp(true);\n+        player.getInventory().setItemInMainHand(RECHARGEABLE_ITEM.clone());\n+\n+        ItemStack chargedItemStack = player.getInventory().getItemInMainHand();\n+        Rechargeable chargedItem = (Rechargeable) SlimefunItem.getByItem(chargedItemStack);\n+\n+        Assertions.assertEquals(chargedItem.getItemCharge(chargedItemStack), 0);\n+        server.execute(\"slimefun\", player, \"charge\");\n+\n+        chargedItemStack = player.getInventory().getItemInMainHand();\n+        chargedItem = (Rechargeable) SlimefunItem.getByItem(chargedItemStack);\n+\n+        Assertions.assertEquals(chargedItem.getItemCharge(chargedItemStack), chargedItem.getMaxItemCharge(chargedItemStack));\n+    }\n+\n+\n+    private class SlimefunChargeTest extends SlimefunItem implements Rechargeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f52f62c6ab9de0328f3255b3b70020fc020138"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "128bc65417a8ce77fd26c6476d04c299d9c88ab9", "author": {"user": {"login": "NCBPFluffyBear", "name": "FluffyBear"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/128bc65417a8ce77fd26c6476d04c299d9c88ab9", "committedDate": "2020-09-10T21:36:52Z", "message": "Did requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzI5MDQx", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486329041", "createdAt": "2020-09-10T21:38:43Z", "commit": {"oid": "128bc65417a8ce77fd26c6476d04c299d9c88ab9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzU2NDQ3", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486356447", "createdAt": "2020-09-10T22:33:43Z", "commit": {"oid": "128bc65417a8ce77fd26c6476d04c299d9c88ab9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c0ce4ce01fad82d98c4c1a0275f49ceb5b34d1", "author": {"user": {"login": "NCBPFluffyBear", "name": "FluffyBear"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/37c0ce4ce01fad82d98c4c1a0275f49ceb5b34d1", "committedDate": "2020-09-11T04:52:19Z", "message": "Organized imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTUyOTU1", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486552955", "createdAt": "2020-09-11T07:51:44Z", "commit": {"oid": "37c0ce4ce01fad82d98c4c1a0275f49ceb5b34d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTY5NDQz", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486569443", "createdAt": "2020-09-11T08:15:44Z", "commit": {"oid": "37c0ce4ce01fad82d98c4c1a0275f49ceb5b34d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTc5Mzk0", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486579394", "createdAt": "2020-09-11T08:25:52Z", "commit": {"oid": "37c0ce4ce01fad82d98c4c1a0275f49ceb5b34d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTgxMzkx", "url": "https://github.com/Slimefun/Slimefun4/pull/2309#pullrequestreview-486581391", "createdAt": "2020-09-11T08:27:06Z", "commit": {"oid": "37c0ce4ce01fad82d98c4c1a0275f49ceb5b34d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2461, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}