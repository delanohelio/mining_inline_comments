{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNzgzODE2", "number": 2191, "title": "Refactored Block Energy API", "bodyText": "Description\n\nSimilar to PR #2055 this refactores the energy system.\nThis time it's the turn of the old class \"ChargableBlock\" (finally getting rid of that typo...).\nIn a similar fashion to the Rechargeable interface, the methods were moved to the interface EnergyNetComponent.\nThis removes the need of an id lookup and speeds up performance, the EnergyNet has been rewritten accordingly.\nThe old system should still work, it's just deprecated.\n@WalshyDev requesting your review.\nChecklist\n\n\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.\n I followed the existing code standards and didn't mess up the formatting.\n I did my best to add documentation to any public classes or methods I added.\n I added sufficient Unit Tests to cover my code.", "createdAt": "2020-08-04T13:57:12Z", "url": "https://github.com/Slimefun/Slimefun4/pull/2191", "merged": true, "mergeCommit": {"oid": "bf4f8d1388e0cc8ea0a31a1261f968ce946598c7"}, "closed": true, "closedAt": "2020-08-30T14:47:24Z", "author": {"login": "TheBusyBiscuit"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7k8BCgH2gAyNDYyNzgzODE2OjM2OGQyZjU3OThmOGRhZjlmNTQxMjk2NTE4ZTk3N2FmYWEzNTczNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDopgmgH2gAyNDYyNzgzODE2OjZiNGY5MTQ3ODQyYWJiMTQxOTdhNmZmYTJiZTViMDAzZjZhNmRmODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "368d2f5798f8daf9f541296518e977afaa357361", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/368d2f5798f8daf9f541296518e977afaa357361", "committedDate": "2020-08-04T11:29:45Z", "message": "Move block energy code to EnergyNetComponent"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc387ee47ad984357c836de7f46a1561ed283666", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/bc387ee47ad984357c836de7f46a1561ed283666", "committedDate": "2020-08-04T11:50:22Z", "message": "Updated EnergyNet code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6ba6ce754f0ed9e0eeae7c5323da9027205143a", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/b6ba6ce754f0ed9e0eeae7c5323da9027205143a", "committedDate": "2020-08-04T13:43:00Z", "message": "Updated all electric machines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d80fdac23bc5e6482f05cc79c7b57882b484cd8a", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/d80fdac23bc5e6482f05cc79c7b57882b484cd8a", "committedDate": "2020-08-04T13:49:58Z", "message": "Fixed debug fish"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32849ca5631f05df6662fed9129bbf2f4a6b4d70", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/32849ca5631f05df6662fed9129bbf2f4a6b4d70", "committedDate": "2020-08-05T14:45:34Z", "message": "Merge branch 'master' into refactoring/block-energy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxNzU0ODAw", "url": "https://github.com/Slimefun/Slimefun4/pull/2191#pullrequestreview-461754800", "createdAt": "2020-08-05T15:04:13Z", "commit": {"oid": "32849ca5631f05df6662fed9129bbf2f4a6b4d70"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTowNDoxM1rOG8N3GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxNjozNlrOG8OZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NDg0MQ==", "bodyText": "isChargeable should be used here", "url": "https://github.com/Slimefun/Slimefun4/pull/2191#discussion_r465794841", "createdAt": "2020-08-05T15:04:13Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/EnergyNetComponent.java", "diffHunk": "@@ -36,4 +43,104 @@\n      */\n     int getCapacity();\n \n+    /**\n+     * This returns whether this {@link EnergyNetComponent} can hold energy charges.\n+     * It returns true if {@link #getCapacity()} returns a number greater than zero.\n+     * \n+     * @return Whether this {@link EnergyNetComponent} can store energy.\n+     */\n+    default boolean isChargeable() {\n+        return getCapacity() > 0;\n+    }\n+\n+    /**\n+     * This returns the currently stored charge at a given {@link Location}.\n+     * \n+     * @param l\n+     *            The target {@link Location}\n+     * \n+     * @return The charge stored at that {@link Location}\n+     */\n+    default int getCharge(Location l) {\n+        String charge = BlockStorage.getLocationInfo(l, \"energy-charge\");\n+\n+        if (charge != null) {\n+            return Integer.parseInt(charge);\n+        }\n+        else {\n+            return 0;\n+        }\n+    }\n+\n+    /**\n+     * This method sets the charge which is stored at a given {@link Location}\n+     * If this {@link EnergyNetComponent} is of type {@code EnergyNetComponentType.CAPACITOR}, then\n+     * this method will automatically update the texture of this {@link Capacitor} as well.\n+     * \n+     * @param l\n+     *            The target {@link Location}\n+     * @param charge\n+     *            The new charge\n+     */\n+    default void setCharge(Location l, int charge) {\n+        int capacity = getCapacity();\n+\n+        // This method only makes sense if we can actually store energy\n+        if (capacity > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32849ca5631f05df6662fed9129bbf2f4a6b4d70"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NTQwNA==", "bodyText": "Again, isChargeable", "url": "https://github.com/Slimefun/Slimefun4/pull/2191#discussion_r465795404", "createdAt": "2020-08-05T15:05:02Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/EnergyNetComponent.java", "diffHunk": "@@ -36,4 +43,104 @@\n      */\n     int getCapacity();\n \n+    /**\n+     * This returns whether this {@link EnergyNetComponent} can hold energy charges.\n+     * It returns true if {@link #getCapacity()} returns a number greater than zero.\n+     * \n+     * @return Whether this {@link EnergyNetComponent} can store energy.\n+     */\n+    default boolean isChargeable() {\n+        return getCapacity() > 0;\n+    }\n+\n+    /**\n+     * This returns the currently stored charge at a given {@link Location}.\n+     * \n+     * @param l\n+     *            The target {@link Location}\n+     * \n+     * @return The charge stored at that {@link Location}\n+     */\n+    default int getCharge(Location l) {\n+        String charge = BlockStorage.getLocationInfo(l, \"energy-charge\");\n+\n+        if (charge != null) {\n+            return Integer.parseInt(charge);\n+        }\n+        else {\n+            return 0;\n+        }\n+    }\n+\n+    /**\n+     * This method sets the charge which is stored at a given {@link Location}\n+     * If this {@link EnergyNetComponent} is of type {@code EnergyNetComponentType.CAPACITOR}, then\n+     * this method will automatically update the texture of this {@link Capacitor} as well.\n+     * \n+     * @param l\n+     *            The target {@link Location}\n+     * @param charge\n+     *            The new charge\n+     */\n+    default void setCharge(Location l, int charge) {\n+        int capacity = getCapacity();\n+\n+        // This method only makes sense if we can actually store energy\n+        if (capacity > 0) {\n+            charge = NumberUtils.clamp(0, charge, capacity);\n+\n+            // Do we even need to update the value?\n+            if (charge != getCharge(l)) {\n+                BlockStorage.addBlockInfo(l, \"energy-charge\", String.valueOf(charge), false);\n+\n+                // Update the capacitor texture\n+                if (getEnergyComponentType() == EnergyNetComponentType.CAPACITOR) {\n+                    SlimefunUtils.updateCapacitorTexture(l, charge, capacity);\n+                }\n+            }\n+        }\n+    }\n+\n+    default void addCharge(Location l, int charge) {\n+        Validate.isTrue(charge > 0, \"You can only add a positive charge!\");\n+        int capacity = getCapacity();\n+\n+        // This method only makes sense if we can actually store energy\n+        if (capacity > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32849ca5631f05df6662fed9129bbf2f4a6b4d70"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NjM2NQ==", "bodyText": "isChargeable", "url": "https://github.com/Slimefun/Slimefun4/pull/2191#discussion_r465796365", "createdAt": "2020-08-05T15:06:23Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/EnergyNetComponent.java", "diffHunk": "@@ -36,4 +43,104 @@\n      */\n     int getCapacity();\n \n+    /**\n+     * This returns whether this {@link EnergyNetComponent} can hold energy charges.\n+     * It returns true if {@link #getCapacity()} returns a number greater than zero.\n+     * \n+     * @return Whether this {@link EnergyNetComponent} can store energy.\n+     */\n+    default boolean isChargeable() {\n+        return getCapacity() > 0;\n+    }\n+\n+    /**\n+     * This returns the currently stored charge at a given {@link Location}.\n+     * \n+     * @param l\n+     *            The target {@link Location}\n+     * \n+     * @return The charge stored at that {@link Location}\n+     */\n+    default int getCharge(Location l) {\n+        String charge = BlockStorage.getLocationInfo(l, \"energy-charge\");\n+\n+        if (charge != null) {\n+            return Integer.parseInt(charge);\n+        }\n+        else {\n+            return 0;\n+        }\n+    }\n+\n+    /**\n+     * This method sets the charge which is stored at a given {@link Location}\n+     * If this {@link EnergyNetComponent} is of type {@code EnergyNetComponentType.CAPACITOR}, then\n+     * this method will automatically update the texture of this {@link Capacitor} as well.\n+     * \n+     * @param l\n+     *            The target {@link Location}\n+     * @param charge\n+     *            The new charge\n+     */\n+    default void setCharge(Location l, int charge) {\n+        int capacity = getCapacity();\n+\n+        // This method only makes sense if we can actually store energy\n+        if (capacity > 0) {\n+            charge = NumberUtils.clamp(0, charge, capacity);\n+\n+            // Do we even need to update the value?\n+            if (charge != getCharge(l)) {\n+                BlockStorage.addBlockInfo(l, \"energy-charge\", String.valueOf(charge), false);\n+\n+                // Update the capacitor texture\n+                if (getEnergyComponentType() == EnergyNetComponentType.CAPACITOR) {\n+                    SlimefunUtils.updateCapacitorTexture(l, charge, capacity);\n+                }\n+            }\n+        }\n+    }\n+\n+    default void addCharge(Location l, int charge) {\n+        Validate.isTrue(charge > 0, \"You can only add a positive charge!\");\n+        int capacity = getCapacity();\n+\n+        // This method only makes sense if we can actually store energy\n+        if (capacity > 0) {\n+            int currentCharge = getCharge(l);\n+\n+            // Check if there is even space for new energy\n+            if (currentCharge < capacity) {\n+                int newCharge = Math.min(capacity, currentCharge + charge);\n+                BlockStorage.addBlockInfo(l, \"energy-charge\", String.valueOf(newCharge), false);\n+\n+                // Update the capacitor texture\n+                if (getEnergyComponentType() == EnergyNetComponentType.CAPACITOR) {\n+                    SlimefunUtils.updateCapacitorTexture(l, charge, capacity);\n+                }\n+            }\n+        }\n+    }\n+\n+    default void removeCharge(Location l, int charge) {\n+        Validate.isTrue(charge > 0, \"The charge to remove must be greater than zero!\");\n+        int capacity = getCapacity();\n+\n+        // This method only makes sense if we can actually store energy\n+        if (capacity > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32849ca5631f05df6662fed9129bbf2f4a6b4d70"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5NzYwNw==", "bodyText": "Global variables... not at the top... NotLikeThis", "url": "https://github.com/Slimefun/Slimefun4/pull/2191#discussion_r465797607", "createdAt": "2020-08-05T15:08:16Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/energy/EnergyNet.java", "diffHunk": "@@ -73,9 +72,9 @@ public static EnergyNet getNetworkFromLocationOrCreate(Location l) {\n         }\n     }\n \n-    private final Set<Location> generators = new HashSet<>();\n-    private final Set<Location> storage = new HashSet<>();\n-    private final Set<Location> consumers = new HashSet<>();\n+    private final Map<Location, EnergyNetComponent> generators = new HashMap<>();\n+    private final Map<Location, EnergyNetComponent> capacitors = new HashMap<>();\n+    private final Map<Location, EnergyNetComponent> consumers = new HashMap<>();\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32849ca5631f05df6662fed9129bbf2f4a6b4d70"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMzczNw==", "bodyText": "Make a variable name less verbose, that's not like you Cookie", "url": "https://github.com/Slimefun/Slimefun4/pull/2191#discussion_r465803737", "createdAt": "2020-08-05T15:16:36Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/networks/energy/EnergyNet.java", "diffHunk": "@@ -139,138 +149,141 @@ public void tick(Block b) {\n             SimpleHologram.update(b, \"&4No Energy Network found\");\n         }\n         else {\n-            Map<Location, Integer> generatorsWithCapacity = new HashMap<>();\n-            int supply = tickAllGenerators(generatorsWithCapacity, timestamp::getAndAdd) + tickAllCapacitors();\n+            int supply = tickAllGenerators(timestamp::getAndAdd) + tickAllCapacitors();\n             int remainingEnergy = supply;\n             int demand = 0;\n \n-            for (Location machine : consumers) {\n-                int capacity = ChargableBlock.getMaxCharge(machine);\n-                int charge = ChargableBlock.getCharge(machine);\n+            for (Map.Entry<Location, EnergyNetComponent> entry : consumers.entrySet()) {\n+                Location l = entry.getKey();\n+                EnergyNetComponent component = entry.getValue();\n+                int capacity = component.getCapacity();\n+                int charge = component.getCharge(l);\n \n                 if (charge < capacity) {\n                     int availableSpace = capacity - charge;\n                     demand += availableSpace;\n \n                     if (remainingEnergy > 0) {\n                         if (remainingEnergy > availableSpace) {\n-                            ChargableBlock.setUnsafeCharge(machine, capacity, false);\n+                            component.setCharge(l, capacity);\n                             remainingEnergy -= availableSpace;\n                         }\n                         else {\n-                            ChargableBlock.setUnsafeCharge(machine, charge + remainingEnergy, false);\n+                            component.setCharge(l, charge + remainingEnergy);\n                             remainingEnergy = 0;\n                         }\n                     }\n                 }\n             }\n \n-            storeExcessEnergy(generatorsWithCapacity, remainingEnergy);\n+            storeRemainingEnergy(remainingEnergy);\n             updateHologram(b, supply, demand);\n         }\n \n         // We have subtracted the timings from Generators, so they do not show up twice.\n         SlimefunPlugin.getProfiler().closeEntry(b.getLocation(), SlimefunItems.ENERGY_REGULATOR.getItem(), timestamp.get());\n     }\n \n-    private void storeExcessEnergy(Map<Location, Integer> generators, int available) {\n-        for (Location capacitor : storage) {\n-            if (available > 0) {\n-                int capacity = ChargableBlock.getMaxCharge(capacitor);\n+    private void storeRemainingEnergy(int remainingEnergy) {\n+        for (Map.Entry<Location, EnergyNetComponent> entry : capacitors.entrySet()) {\n+            Location l = entry.getKey();\n+            EnergyNetComponent component = entry.getValue();\n+\n+            if (remainingEnergy > 0) {\n+                int capacity = component.getCapacity();\n \n-                if (available > capacity) {\n-                    ChargableBlock.setUnsafeCharge(capacitor, capacity, true);\n-                    available -= capacity;\n+                if (remainingEnergy > capacity) {\n+                    component.setCharge(l, capacity);\n+                    remainingEnergy -= capacity;\n                 }\n                 else {\n-                    ChargableBlock.setUnsafeCharge(capacitor, available, true);\n-                    available = 0;\n+                    component.setCharge(l, remainingEnergy);\n+                    remainingEnergy = 0;\n                 }\n             }\n             else {\n-                ChargableBlock.setUnsafeCharge(capacitor, 0, true);\n+                component.setCharge(l, 0);\n             }\n         }\n \n-        for (Map.Entry<Location, Integer> entry : generators.entrySet()) {\n-            Location generator = entry.getKey();\n-            int capacity = entry.getValue();\n+        for (Map.Entry<Location, EnergyNetComponent> entry : generators.entrySet()) {\n+            Location l = entry.getKey();\n+            EnergyNetComponent component = entry.getValue();\n+            int capacity = component.getCapacity();\n \n-            if (available > 0) {\n-                if (available > capacity) {\n-                    ChargableBlock.setUnsafeCharge(generator, capacity, false);\n-                    available -= capacity;\n+            if (remainingEnergy > 0) {\n+                if (remainingEnergy > capacity) {\n+                    component.setCharge(l, capacity);\n+                    remainingEnergy -= capacity;\n                 }\n                 else {\n-                    ChargableBlock.setUnsafeCharge(generator, available, false);\n-                    available = 0;\n+                    component.setCharge(l, remainingEnergy);\n+                    remainingEnergy = 0;\n                 }\n             }\n             else {\n-                ChargableBlock.setUnsafeCharge(generator, 0, false);\n+                component.setCharge(l, 0);\n             }\n         }\n     }\n \n-    private int tickAllGenerators(Map<Location, Integer> generatorsWithCapacity, LongConsumer timeCallback) {\n+    private int tickAllGenerators(LongConsumer timings) {\n         Set<Location> exploded = new HashSet<>();\n         int supply = 0;\n \n-        for (Location source : generators) {\n+        for (Map.Entry<Location, EnergyNetComponent> entry : generators.entrySet()) {\n             long timestamp = SlimefunPlugin.getProfiler().newEntry();\n-            Config config = BlockStorage.getLocationInfo(source);\n-            SlimefunItem item = SlimefunItem.getByID(config.getString(\"id\"));\n+            Location l = entry.getKey();\n+            EnergyNetComponent component = entry.getValue();\n \n-            if (item instanceof EnergyNetProvider) {\n+            if (component instanceof EnergyNetProvider) {\n+                SlimefunItem item = (SlimefunItem) component;\n                 try {\n-                    EnergyNetProvider provider = (EnergyNetProvider) item;\n-                    int energy = provider.getGeneratedOutput(source, config);\n+                    EnergyNetProvider provider = (EnergyNetProvider) component;\n+                    Config config = BlockStorage.getLocationInfo(l);\n+                    int energy = provider.getGeneratedOutput(l, config);\n \n-                    if (provider.getCapacity() > 0) {\n-                        generatorsWithCapacity.put(source, provider.getCapacity());\n-                        String charge = config.getString(\"energy-charge\");\n-\n-                        if (charge != null) {\n-                            energy += Integer.parseInt(charge);\n-                        }\n+                    if (provider.isChargeable()) {\n+                        energy += provider.getCharge(l);\n                     }\n \n-                    if (provider.willExplode(source, config)) {\n-                        exploded.add(source);\n-                        BlockStorage.clearBlockInfo(source);\n+                    if (provider.willExplode(l, config)) {\n+                        exploded.add(l);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32849ca5631f05df6662fed9129bbf2f4a6b4d70"}, "originalPosition": 259}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef01c8588877da556798632ff7849a6a9b10354a", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/ef01c8588877da556798632ff7849a6a9b10354a", "committedDate": "2020-08-05T22:30:33Z", "message": "Some refactoring, requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d7d157503b78b4e87e29ca588c329e54e74c1f6", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/8d7d157503b78b4e87e29ca588c329e54e74c1f6", "committedDate": "2020-08-05T22:54:49Z", "message": "Improved documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5065b8d63d04e75b8f3e1888d1b077b04d0bc5e", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/d5065b8d63d04e75b8f3e1888d1b077b04d0bc5e", "committedDate": "2020-08-14T13:44:00Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into refactoring/block-energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88be3e79ff406fd6321f30a0902f99d20a327f3c", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/88be3e79ff406fd6321f30a0902f99d20a327f3c", "committedDate": "2020-08-20T14:55:35Z", "message": "Merge branch 'master' into refactoring/block-energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d998f3ec8c40b76dbbddc2391b2feb30f94503d3", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/d998f3ec8c40b76dbbddc2391b2feb30f94503d3", "committedDate": "2020-08-24T00:11:59Z", "message": "Merge branch 'master' into refactoring/block-energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2b24783947c3c8583b27faa042d7334cc42402d", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/a2b24783947c3c8583b27faa042d7334cc42402d", "committedDate": "2020-08-24T00:18:32Z", "message": "Update EnergyNet.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd67ccc28a6beb9b066e1138f7f2d690f8869466", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/dd67ccc28a6beb9b066e1138f7f2d690f8869466", "committedDate": "2020-08-26T15:51:22Z", "message": "Merge branch 'refactoring/block-energy' of https://github.com/TheBusyBiscuit/Slimefun4 into refactoring/block-energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dab0c5b47659d6ba4fef9b1578421e4d6087b36", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/4dab0c5b47659d6ba4fef9b1578421e4d6087b36", "committedDate": "2020-08-26T15:51:43Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into refactoring/block-energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc233997aeb3a5a83aeb1dcb72a10303a60b6cfe", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/dc233997aeb3a5a83aeb1dcb72a10303a60b6cfe", "committedDate": "2020-08-29T10:47:50Z", "message": "Merge branch 'master' into refactoring/block-energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ac218632036c06253c524a6a9d20461bf8464a", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/02ac218632036c06253c524a6a9d20461bf8464a", "committedDate": "2020-08-29T12:05:51Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into refactoring/block-energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3f7e68468254242afff5cb47379719bd19e15e4", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/e3f7e68468254242afff5cb47379719bd19e15e4", "committedDate": "2020-08-29T12:09:41Z", "message": "Fixed a merging issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1807bc39f698018a8c625ab5ca64c6151a83938", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/d1807bc39f698018a8c625ab5ca64c6151a83938", "committedDate": "2020-08-29T12:11:08Z", "message": "Updated changelog"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b4f9147842abb14197a6ffa2be5b003f6a6df80", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/6b4f9147842abb14197a6ffa2be5b003f6a6df80", "committedDate": "2020-08-29T12:20:33Z", "message": "Some more refactoring"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2429, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}