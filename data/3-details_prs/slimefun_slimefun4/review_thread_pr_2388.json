{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NDc5MzAx", "number": 2388, "reviewThreads": {"totalCount": 55, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MDozMVrOEqHR0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMzowOFrOEwKN4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk0ODk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MDozMVrOHcJbzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MzoxMVrOHcJcqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Njc0OQ==", "bodyText": "Please no star imports.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499276749", "createdAt": "2020-10-04T18:50:31Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -31,13 +32,14 @@\n import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.event.entity.EntityDamageEvent.DamageCause;\n import org.bukkit.event.entity.EntityDeathEvent;\n-import org.bukkit.event.player.PlayerItemBreakEvent;\n-import org.bukkit.event.player.PlayerToggleSprintEvent;\n+import org.bukkit.event.entity.PlayerDeathEvent;\n+import org.bukkit.event.player.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d5d474fcc86c57409b702f9b9761bcfa745b89"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Njk2OA==", "bodyText": "I think my IDE did that, Ill get rid of it", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499276968", "createdAt": "2020-10-04T18:53:11Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -31,13 +32,14 @@\n import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.event.entity.EntityDamageEvent.DamageCause;\n import org.bukkit.event.entity.EntityDeathEvent;\n-import org.bukkit.event.player.PlayerItemBreakEvent;\n-import org.bukkit.event.player.PlayerToggleSprintEvent;\n+import org.bukkit.event.entity.PlayerDeathEvent;\n+import org.bukkit.event.player.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Njc0OQ=="}, "originalCommit": {"oid": "a1d5d474fcc86c57409b702f9b9761bcfa745b89"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk0OTQ4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/languages/messages_en.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MToxM1rOHcJcDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MToxM1rOHcJcDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NjgxNA==", "bodyText": "Lowercase t", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499276814", "createdAt": "2020-10-04T18:51:13Z", "author": {"login": "LinoxGH"}, "path": "src/main/resources/languages/messages_en.yml", "diffHunk": "@@ -152,6 +152,8 @@ messages:\n     whirlwind: '&a&oYour Talisman reflected the Projectile'\n     wizard: '&a&oYour Talisman has given you a better Fortune Level but maybe also lowered some other Enchantment Levels'\n     caveman: '&a&oYour Talisman gave you haste'\n+    wise: '&a&oYour Talisman doubled your experience drops'\n+    resurrected: '&a&oYour talisman a-voided your death'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d5d474fcc86c57409b702f9b9761bcfa745b89"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk1MDAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MjowOVrOHcJcVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MjowOVrOHcJcVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Njg4Nw==", "bodyText": "fall into the void*", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499276887", "createdAt": "2020-10-04T18:52:09Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -547,6 +547,9 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack TALISMAN_WHIRLWIND = new SlimefunItemStack(\"WHIRLWIND_TALISMAN\", Material.EMERALD, \"&aTalisman of the Whirlwind\", \"\", \"&fHaving this Talisman\", \"&fin your Inventory will reflect\", \"&f60% of any projectiles fired at you.\", \"&e&oOnly a thrown Trident can pierce\", \"&e&othrough this layer of protection\");\n     public static final SlimefunItemStack TALISMAN_WIZARD = new SlimefunItemStack(\"WIZARD_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wizard\", \"\", \"&fWhile you have this Talisman\", \"&fin your Inventory it allows you to\", \"&fobtain Fortune Level 4/5 however\", \"&fit also has a chance to lower the\", \"&fLevel of some Enchantments on your Item\");\n     public static final SlimefunItemStack TALISMAN_CAVEMAN = new SlimefunItemStack(\"CAVEMAN_TALISMAN\", Material.EMERALD, \"&aTalisman of the Caveman\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 50% chance for a decent\", \"&fHaste buff when you mine any ore\");\n+    public static final SlimefunItemStack TALISMAN_WISE = new SlimefunItemStack(\"WISE_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wise\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 20% chance of doubling\", \"&fall experience you obtain\");\n+    public static final SlimefunItemStack TALISMAN_RESURRECTED = new SlimefunItemStack(\"RESURRECTED_TALISMAN\", Material.EMERALD, \"&aTalisman of the Resurrected\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it will\", \"&fteleport you back safely when\", \"&fyou fall in the void\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d5d474fcc86c57409b702f9b9761bcfa745b89"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk1MDU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MzoxMFrOHcJcow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1MzoxMFrOHcJcow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3Njk2Mw==", "bodyText": "Mssing curvy brackets.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499276963", "createdAt": "2020-10-04T18:53:10Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +294,33 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE))\n+            return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d5d474fcc86c57409b702f9b9761bcfa745b89"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTk1MTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1NDowMFrOHcJc6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQxODo1NDowMFrOHcJc6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI3NzAzNQ==", "bodyText": "Missing curvy brackets.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499277035", "createdAt": "2020-10-04T18:54:00Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +294,33 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE))\n+            return;\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED))\n+           return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d5d474fcc86c57409b702f9b9761bcfa745b89"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA2Nzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0Njo1OFrOHcKYSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0Njo1OFrOHcKYSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjIzMg==", "bodyText": "getPlayer() is redundant here getEntity() already returns a Player and getPlayer() literally just does return this; for players.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292232", "createdAt": "2020-10-04T21:46:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -219,7 +220,10 @@ private static void consumeItem(Inventory inv, Talisman talisman) {\n     }\n \n     private static Player getPlayerByEventType(Event e) {\n-        if (e instanceof EntityDeathEvent) {\n+        if (e instanceof PlayerDeathEvent) {\n+            return ((PlayerDeathEvent) e).getEntity().getPlayer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA2ODg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0ODozMFrOHcKYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoxMTo0N1rOHcWYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjM1OQ==", "bodyText": "I think the return; here really serves no point other than double-negation.\nI reckon it would be more understandable if you just did\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n          \n          \n            \n                        return;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    e.setAmount(e.getAmount() * 2);\n          \n          \n            \n                    if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n          \n          \n            \n                        e.setAmount(e.getAmount() * 2);\n          \n          \n            \n                    }", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292359", "createdAt": "2020-10-04T21:48:30Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4NzE3OA==", "bodyText": "Im used to this kind of style (check if everything is correct, if not return - used to do this to avoid nesting a lot), so I did it out of habit", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499487178", "createdAt": "2020-10-05T10:08:45Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjM1OQ=="}, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4ODg2OQ==", "bodyText": "If used excessively this can get worse than nesting, especially since this would just be a one-level nesting.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499488869", "createdAt": "2020-10-05T10:11:47Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjM1OQ=="}, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA2OTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0ODo0NlrOHcKY5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0ODo0NlrOHcKY5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjM4OQ==", "bodyText": "Again getPlayer() is redundant here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292389", "createdAt": "2020-10-04T21:48:46Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA2OTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0OTozMVrOHcKZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNTo0M1rOHcW19Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjQ0Mg==", "bodyText": "Please add brackets here or preferabbly even a method getSafeLocation() with docs and annotations.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292442", "createdAt": "2020-10-04T21:49:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            return;\n+        }\n+\n+        Location loc = e.getEntity().getPlayer().getBedSpawnLocation();\n+        if (loc == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5MzI4NA==", "bodyText": "Regarding this method, @TheBusyBiscuit, do I just make it inside of TalismanListener? Or somewhere in the api?", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499493284", "createdAt": "2020-10-05T10:20:23Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            return;\n+        }\n+\n+        Location loc = e.getEntity().getPlayer().getBedSpawnLocation();\n+        if (loc == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjQ0Mg=="}, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5NjQzNw==", "bodyText": "I'd just put it in this file yeah.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499496437", "createdAt": "2020-10-05T10:25:43Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            return;\n+        }\n+\n+        Location loc = e.getEntity().getPlayer().getBedSpawnLocation();\n+        if (loc == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjQ0Mg=="}, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA2OTcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0OTo1NFrOHcKZNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo0OTo1NFrOHcKZNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjQ2OQ==", "bodyText": "Just like above, this is rather confusing, just use a normal if-statement.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292469", "createdAt": "2020-10-04T21:49:54Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA3MDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1MDoxM1rOHcKZYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1MDoxM1rOHcKZYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjUxMg==", "bodyText": "If you make a method like said above, this line would become redundant too ;)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292512", "createdAt": "2020-10-04T21:50:13Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            return;\n+        }\n+\n+        Location loc = e.getEntity().getPlayer().getBedSpawnLocation();\n+        if (loc == null)\n+            loc = player.getLocation().getWorld().getSpawnLocation();\n+\n+        final Location respawnLocation = loc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA3MDM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1MDozOFrOHcKZhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1MDozOFrOHcKZhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjU1MA==", "bodyText": "Use SlimefunPlugin.runSync\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Bukkit.getScheduler().runTaskLater(SlimefunPlugin.instance(), () -> {\n          \n          \n            \n                        player.teleport(respawnLocation);\n          \n          \n            \n                    }, 2);\n          \n          \n            \n                    SlimefunPlugin.runSync(() -> {\n          \n          \n            \n                        player.teleport(respawnLocation);\n          \n          \n            \n                    }, 2);", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292550", "createdAt": "2020-10-04T21:50:38Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,35 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() <= 0 || !Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            return;\n+        }\n+\n+        e.setAmount(e.getAmount() * 2);\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity().getPlayer();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            return;\n+        }\n+\n+        Location loc = e.getEntity().getPlayer().getBedSpawnLocation();\n+        if (loc == null)\n+            loc = player.getLocation().getWorld().getSpawnLocation();\n+\n+        final Location respawnLocation = loc;\n+\n+        Bukkit.getScheduler().runTaskLater(SlimefunPlugin.instance(), () -> {\n+            player.teleport(respawnLocation);\n+        }, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA3MDk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1MTozNVrOHcKZzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1MTozNVrOHcKZzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjYyMg==", "bodyText": "Don't use the tome of knowledge sharing here, many servers disable this item.\nyou could use the new magic glass here?", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292622", "createdAt": "2020-10-04T21:51:35Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -877,6 +877,16 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         false, false, \"caveman\", 50, new PotionEffect(PotionEffectType.FAST_DIGGING, 800, 2))\n         .register(plugin);\n \n+        new Talisman(SlimefunItems.TALISMAN_WISE,\n+        new ItemStack[] { SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.TOME_OF_KNOWLEDGE_SHARING, SlimefunItems.TALISMAN_MAGICIAN, SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjA3MTM4OnYy", "diffSide": "RIGHT", "path": "src/main/resources/languages/messages_en.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQyMTo1MTo1OFrOHcKaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoxMzoyNlrOHcWbsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjY3Mw==", "bodyText": "puns  \ud83d\udc4d But this is consumable right? So you may wanna add to it that the talisman was consumed", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499292673", "createdAt": "2020-10-04T21:51:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/resources/languages/messages_en.yml", "diffHunk": "@@ -152,6 +152,8 @@ messages:\n     whirlwind: '&a&oYour Talisman reflected the Projectile'\n     wizard: '&a&oYour Talisman has given you a better Fortune Level but maybe also lowered some other Enchantment Levels'\n     caveman: '&a&oYour Talisman gave you haste'\n+    wise: '&a&oYour Talisman doubled your experience drops'\n+    resurrected: '&a&oYour Talisman a-voided your death'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4OTcxMw==", "bodyText": "Ill make another PR somewhat soon to fix the other talisman messages, they have capitals all over the place and no mentions of being consumable", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499489713", "createdAt": "2020-10-05T10:13:26Z", "author": {"login": "svr333"}, "path": "src/main/resources/languages/messages_en.yml", "diffHunk": "@@ -152,6 +152,8 @@ messages:\n     whirlwind: '&a&oYour Talisman reflected the Projectile'\n     wizard: '&a&oYour Talisman has given you a better Fortune Level but maybe also lowered some other Enchantment Levels'\n     caveman: '&a&oYour Talisman gave you haste'\n+    wise: '&a&oYour Talisman doubled your experience drops'\n+    resurrected: '&a&oYour Talisman a-voided your death'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTI5MjY3Mw=="}, "originalCommit": {"oid": "d5d7960a569fcb5b612dd714b2f9f0a7661078f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzM5MTk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoxMjoyNVrOHcWZyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoxMjoyNVrOHcWZyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ4OTIyNQ==", "bodyText": "Also you should use PaperLib's teleportAsync here :)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499489225", "createdAt": "2020-10-05T10:12:25Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +296,33 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause != DamageCause.VOID || !Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            return;\n+        }\n+\n+        Location loc = e.getEntity().getPlayer().getBedSpawnLocation();\n+        if (loc == null)\n+            loc = player.getLocation().getWorld().getSpawnLocation();\n+\n+        final Location respawnLocation = loc;\n+\n+        SlimefunPlugin.runSync(() -> {\n+            player.teleport(respawnLocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "133705e287b96dbd1c7c265e4f8f0ba32e2965b4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTI0NjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODoxMjoyM1rOHcoSDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQyMTowMzoyNFrOHctuEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4MjE1Ng==", "bodyText": "Redundant new line here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499782156", "createdAt": "2020-10-05T18:12:23Z", "author": {"login": "LinoxGH"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -547,6 +547,9 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack TALISMAN_WHIRLWIND = new SlimefunItemStack(\"WHIRLWIND_TALISMAN\", Material.EMERALD, \"&aTalisman of the Whirlwind\", \"\", \"&fHaving this Talisman\", \"&fin your Inventory will reflect\", \"&f60% of any projectiles fired at you.\", \"&e&oOnly a thrown Trident can pierce\", \"&e&othrough this layer of protection\");\n     public static final SlimefunItemStack TALISMAN_WIZARD = new SlimefunItemStack(\"WIZARD_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wizard\", \"\", \"&fWhile you have this Talisman\", \"&fin your Inventory it allows you to\", \"&fobtain Fortune Level 4/5 however\", \"&fit also has a chance to lower the\", \"&fLevel of some Enchantments on your Item\");\n     public static final SlimefunItemStack TALISMAN_CAVEMAN = new SlimefunItemStack(\"CAVEMAN_TALISMAN\", Material.EMERALD, \"&aTalisman of the Caveman\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 50% chance for a decent\", \"&fHaste buff when you mine any ore\");\n+    public static final SlimefunItemStack TALISMAN_WISE = new SlimefunItemStack(\"WISE_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wise\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 20% chance of doubling\", \"&fall experience you obtain\");\n+    public static final SlimefunItemStack TALISMAN_RESURRECTED = new SlimefunItemStack(\"RESURRECTED_TALISMAN\", Material.EMERALD, \"&aTalisman of the Resurrected\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it will\", \"&fteleport you back safely when\", \"&fyou fall into the void\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d64fe94b504523b866df35436d6001154b9706fc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTg3MTI0OQ==", "bodyText": "taken care of, Im also implementing your suggested feature about the right click to set location, but thats gonna take a bit more", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r499871249", "createdAt": "2020-10-05T21:03:24Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -547,6 +547,9 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack TALISMAN_WHIRLWIND = new SlimefunItemStack(\"WHIRLWIND_TALISMAN\", Material.EMERALD, \"&aTalisman of the Whirlwind\", \"\", \"&fHaving this Talisman\", \"&fin your Inventory will reflect\", \"&f60% of any projectiles fired at you.\", \"&e&oOnly a thrown Trident can pierce\", \"&e&othrough this layer of protection\");\n     public static final SlimefunItemStack TALISMAN_WIZARD = new SlimefunItemStack(\"WIZARD_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wizard\", \"\", \"&fWhile you have this Talisman\", \"&fin your Inventory it allows you to\", \"&fobtain Fortune Level 4/5 however\", \"&fit also has a chance to lower the\", \"&fLevel of some Enchantments on your Item\");\n     public static final SlimefunItemStack TALISMAN_CAVEMAN = new SlimefunItemStack(\"CAVEMAN_TALISMAN\", Material.EMERALD, \"&aTalisman of the Caveman\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 50% chance for a decent\", \"&fHaste buff when you mine any ore\");\n+    public static final SlimefunItemStack TALISMAN_WISE = new SlimefunItemStack(\"WISE_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wise\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 20% chance of doubling\", \"&fall experience you obtain\");\n+    public static final SlimefunItemStack TALISMAN_RESURRECTED = new SlimefunItemStack(\"RESURRECTED_TALISMAN\", Material.EMERALD, \"&aTalisman of the Resurrected\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it will\", \"&fteleport you back safely when\", \"&fyou fall into the void\");\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc4MjE1Ng=="}, "originalCommit": {"oid": "d64fe94b504523b866df35436d6001154b9706fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1MDI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODoxMVrOHdTisw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODoxMVrOHdTisw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MDkzMQ==", "bodyText": "Missing asterics *", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500490931", "createdAt": "2020-10-06T17:58:11Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1MTA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODoyM1rOHdTjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODoyM1rOHdTjNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MTA2MA==", "bodyText": "No need for this many empty lines here", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500491060", "createdAt": "2020-10-06T17:58:23Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1MTU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODozMVrOHdTjkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODozMVrOHdTjkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MTE1Mg==", "bodyText": "Empty line before this please.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500491152", "createdAt": "2020-10-06T17:58:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1Mjg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODo1NVrOHdTkdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1ODo1NVrOHdTkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MTM4MQ==", "bodyText": "This field is not necessary since the location is per-ItemStack not per-SlimefunItem.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500491381", "createdAt": "2020-10-06T17:58:55Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+    private Location respawnLocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1NTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1OTozNlrOHdTmIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo1OTozNlrOHdTmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MTgxMQ==", "bodyText": "Use e.getItem(), this is a fatal bug because item here refers to the ItemStack displayed in the guide.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500491811", "createdAt": "2020-10-06T17:59:36Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+    private Location respawnLocation;\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1ODQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMDoyMVrOHdToDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMDoyMVrOHdToDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjMwMA==", "bodyText": "world is nullable here, so you should do a check for this.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500492300", "createdAt": "2020-10-06T18:00:21Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+    private Location respawnLocation;\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());\n+\n+            //SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"\", true);\n+            e.getPlayer().sendMessage(\"Successfully saved current location. You will teleport here when you fall in the void.\");\n+        };\n+    }\n+\n+    @Nullable\n+    public Location getSavedLocation(boolean isEnderTalisman) {\n+        PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();\n+        String data = pdc.get(locationKey, PersistentDataType.STRING);\n+\n+        if (data != null) {\n+            return parseLocationFromJson(data);\n+        }\n+        else {\n+            return null;\n+        }\n+    }\n+\n+    private JsonObject createJsonFromLocation(@Nonnull Location loc) {\n+        JsonObject json = new JsonObject();\n+\n+        json.addProperty(\"world\", loc.getWorld().getUID().toString());\n+        json.addProperty(\"x\", loc.getX());\n+        json.addProperty(\"y\", loc.getY());\n+        json.addProperty(\"z\", loc.getZ());\n+\n+        return json;\n+    }\n+\n+    private Location parseLocationFromJson(@Nonnull String rawData) {\n+        JsonObject json = new JsonParser().parse(rawData).getAsJsonObject();\n+\n+        UUID uuid = UUID.fromString(json.get(\"world\").getAsString());\n+\n+        World world = Bukkit.getWorld(uuid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc1OTEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMDozMlrOHdTodQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMDozMlrOHdTodQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjQwNQ==", "bodyText": "Nonnull for this method please.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500492405", "createdAt": "2020-10-06T18:00:32Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+    private Location respawnLocation;\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());\n+\n+            //SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"\", true);\n+            e.getPlayer().sendMessage(\"Successfully saved current location. You will teleport here when you fall in the void.\");\n+        };\n+    }\n+\n+    @Nullable\n+    public Location getSavedLocation(boolean isEnderTalisman) {\n+        PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();\n+        String data = pdc.get(locationKey, PersistentDataType.STRING);\n+\n+        if (data != null) {\n+            return parseLocationFromJson(data);\n+        }\n+        else {\n+            return null;\n+        }\n+    }\n+\n+    private JsonObject createJsonFromLocation(@Nonnull Location loc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc2MDcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMDo1NlrOHdTpZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMDo1NlrOHdTpZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjY0NQ==", "bodyText": "Again item here refers to the item in the Slimefun Guide.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500492645", "createdAt": "2020-10-06T18:00:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+    private Location respawnLocation;\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());\n+\n+            //SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"\", true);\n+            e.getPlayer().sendMessage(\"Successfully saved current location. You will teleport here when you fall in the void.\");\n+        };\n+    }\n+\n+    @Nullable\n+    public Location getSavedLocation(boolean isEnderTalisman) {\n+        PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc2MTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMTowNlrOHdTptg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyNDozOVrOHdWqYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjcyNg==", "bodyText": "localization \ud83d\udc40", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500492726", "createdAt": "2020-10-06T18:01:06Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+    private Location respawnLocation;\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());\n+\n+            //SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"\", true);\n+            e.getPlayer().sendMessage(\"Successfully saved current location. You will teleport here when you fall in the void.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MjA1MA==", "bodyText": "Yeah I commented it out for a while so I could do do quick test with a preset messsage\nWill definitely change", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500542050", "createdAt": "2020-10-06T19:24:39Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,91 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/*\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ *\n+ * @author svr333\n+ *\n+ *\n+ */\n+public class ResurrectedTalisman extends Talisman {\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+    private Location respawnLocation;\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = item.getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());\n+\n+            //SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"\", true);\n+            e.getPlayer().sendMessage(\"Successfully saved current location. You will teleport here when you fall in the void.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MjcyNg=="}, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc2MzM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMTo0N1rOHdTq-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTo1Nzo0MVrOHdbZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MzA1MQ==", "bodyText": "Why the delay here?", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500493051", "createdAt": "2020-10-06T18:01:47Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +300,45 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        Location respawnLocation = getSafeRespawnLocation(player);\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, respawnLocation);\n+            }, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MTQ5NQ==", "bodyText": "If the player is dead, teleporting will fail, so I need to do a little delay so the teleport happens after the death event is cancelled", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500541495", "createdAt": "2020-10-06T19:23:34Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +300,45 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        Location respawnLocation = getSafeRespawnLocation(player);\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, respawnLocation);\n+            }, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MzA1MQ=="}, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MjY5Mg==", "bodyText": "But why not put the Player's UUID into a Set and then set the spawn location on the PlayerRespawnEvent?", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500542692", "createdAt": "2020-10-06T19:25:39Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +300,45 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        Location respawnLocation = getSafeRespawnLocation(player);\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, respawnLocation);\n+            }, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MzA1MQ=="}, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxOTUzNA==", "bodyText": "Because the player never actually respawns, the DeathEvent is cancelled, so they need to be teleported", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500619534", "createdAt": "2020-10-06T21:57:41Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +300,45 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        Location respawnLocation = getSafeRespawnLocation(player);\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, respawnLocation);\n+            }, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MzA1MQ=="}, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc2NTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMjoyM1rOHdTsWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMjoyM1rOHdTsWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5MzQwMQ==", "bodyText": "Nullability annotation please", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500493401", "createdAt": "2020-10-06T18:02:23Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +300,45 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        Location respawnLocation = getSafeRespawnLocation(player);\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, respawnLocation);\n+            }, 2);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzc3MDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMzozOFrOHdTvaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODowMzozOFrOHdTvaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ5NDE4NA==", "bodyText": "To obtain the itemstack you would need to create a method very similar to Talisman.checkFor.\nPerhaps you could even copy it exactly and return the ItemStack rather than a boolean.\nThen you could override the original Talisman.checkFor to just call your method and do a null check :)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r500494184", "createdAt": "2020-10-06T18:03:38Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +300,45 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        Location respawnLocation = getSafeRespawnLocation(player);\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, respawnLocation);\n+            }, 2);\n+        }\n+    }\n+\n+    private Location getSafeRespawnLocation(@Nonnull Player player) {\n+        Location savedLoc = null;\n+        /* Obtain Talisman here */\n+\n+        if (SlimefunUtils.containsSimilarItem(player.getInventory(), talisman.getItem(), true)) {\n+            savedLoc = talisman.getSavedLocation(false);\n+        }\n+        else if (SlimefunUtils.containsSimilarItem(player.getEnderChest(), talisman.getEnderVariant(), true)) {\n+            savedLoc = talisman.getSavedLocation(true);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9ce3c1f3e6049988326087d93dc1b1c92f4e67c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQwMzkyOnYy", "diffSide": "RIGHT", "path": ".vscode/settings.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNjowNFrOHd2E9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNjowNFrOHd2E9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1Njc1OA==", "bodyText": "Yeah, add the .vscode folder to the .gitignore please.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501056758", "createdAt": "2020-10-07T14:26:04Z", "author": {"login": "TheBusyBiscuit"}, "path": ".vscode/settings.json", "diffHunk": "@@ -0,0 +1,3 @@\n+{\n+    \"java.configuration.updateBuildConfiguration\": \"automatic\"\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQwNzIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNjo0MVrOHd2G_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNjo0MVrOHd2G_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NzI3OA==", "bodyText": "Please add an empty line before this.\nAnd there is no point in making it static here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501057278", "createdAt": "2020-10-07T14:26:41Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQwOTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNzowM1rOHd2IPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNzowM1rOHd2IPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NzU5OA==", "bodyText": "There is no need for this to be static (it probably shouldn't be anyway)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501057598", "createdAt": "2020-10-07T14:27:03Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = e.getItem().getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());\n+\n+            SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"messages.talisman.resurrected-location\", true);\n+        };\n+    }\n+\n+    @Nullable\n+    public static Location getSavedLocation(ItemStack item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQxMDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNzoyMFrOHd2JFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyNzoyMFrOHd2JFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1NzgxNQ==", "bodyText": "Also please add an annotation for the \"item\" parameter.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501057815", "createdAt": "2020-10-07T14:27:20Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = e.getItem().getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());\n+\n+            SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"messages.talisman.resurrected-location\", true);\n+        };\n+    }\n+\n+    @Nullable\n+    public static Location getSavedLocation(ItemStack item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQxODE1OnYy", "diffSide": "RIGHT", "path": ".vscode/settings.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyODo1NVrOHd2OEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo0MDowMFrOHd2wlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1OTA4OA==", "bodyText": ".", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501059088", "createdAt": "2020-10-07T14:28:55Z", "author": {"login": "LinoxGH"}, "path": ".vscode/settings.json", "diffHunk": "@@ -0,0 +1,3 @@\n+{\n+    \"java.configuration.updateBuildConfiguration\": \"automatic\"\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2NzkyNA==", "bodyText": "This is like the third time that I upload unwanted files lol", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501067924", "createdAt": "2020-10-07T14:40:00Z", "author": {"login": "svr333"}, "path": ".vscode/settings.json", "diffHunk": "@@ -0,0 +1,3 @@\n+{\n+    \"java.configuration.updateBuildConfiguration\": \"automatic\"\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1OTA4OA=="}, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQxODUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyODo1OVrOHd2OTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo1NDo1NVrOHd3flQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1OTE1MA==", "bodyText": ".getItemMeta() creates a copy of the original item meta, you will need to save the ItemMeta as a variable, modify it and then set the Itemmeta back to the ItemStack using setItemMeta, otherwise your changes won't be applied to the item.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501059150", "createdAt": "2020-10-07T14:28:59Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = e.getItem().getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3ODk1Mw==", "bodyText": "I found the itemMeta part really complicated overall, but understand it better now.\nIs it okay if I add a new page to the developer guide on the wiki on how to do this?", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501078953", "createdAt": "2020-10-07T14:53:42Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = e.getItem().getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1OTE1MA=="}, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3OTk1Nw==", "bodyText": "I mean sure, although I am not quite sure on how to generalize this but feel free to!", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501079957", "createdAt": "2020-10-07T14:54:55Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = e.getItem().getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1OTE1MA=="}, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzQyMjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoyOTo0NlrOHd2Q2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo0MTowOVrOHd20AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1OTgwMQ==", "bodyText": "Also there's PersistentJsonDataType.JSON_OBJECT in Slimefun too, no need to manually do the string serialization.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501059801", "createdAt": "2020-10-07T14:29:46Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = e.getItem().getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2ODgwMQ==", "bodyText": "Oh this is handy, I missed that", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501068801", "createdAt": "2020-10-07T14:41:09Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+    private static final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+\n+            PersistentDataContainer pdc = e.getItem().getItemMeta().getPersistentDataContainer();\n+            pdc.set(locationKey, PersistentDataType.STRING, json.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA1OTgwMQ=="}, "originalCommit": {"oid": "085ad2cd6b1d66e179badb7f193c6fb4de08b509"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzcwODg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNToyODozM1rOHd5FUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjozODoyOFrOHd8Gnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNjAwMQ==", "bodyText": "This basically does the same as checkFor other than having a different return type right?\nIf so, then one of these is redundant, you could also just rewrite checkFor to basically run this method and do an != null check on the returned ItemStack.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501106001", "createdAt": "2020-10-07T15:28:33Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -179,6 +183,53 @@ public static boolean checkFor(Event e, SlimefunItem item) {\n         }\n     }\n \n+    @Nullable\n+    public static ItemStack checkForAndGet(@Nonnull SlimefunItemStack stack, @Nonnull Player player) {\n+        return checkForAndGet(stack.getItem(), player);\n+    }\n+\n+    @Nullable\n+    public static ItemStack checkForAndGet(@Nonnull SlimefunItem sfItem, @Nonnull Player player) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d17d21b7ed4d23e7449699cdcb9a78ae27d3c9d7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1NTQ4Nw==", "bodyText": "Its actually quite different, checkFor also consumes the item, adds potion effects and all that, checkForAndGet just checks for the talisman and returns it", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501155487", "createdAt": "2020-10-07T16:38:28Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -179,6 +183,53 @@ public static boolean checkFor(Event e, SlimefunItem item) {\n         }\n     }\n \n+    @Nullable\n+    public static ItemStack checkForAndGet(@Nonnull SlimefunItemStack stack, @Nonnull Player player) {\n+        return checkForAndGet(stack.getItem(), player);\n+    }\n+\n+    @Nullable\n+    public static ItemStack checkForAndGet(@Nonnull SlimefunItem sfItem, @Nonnull Player player) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwNjAwMQ=="}, "originalCommit": {"oid": "d17d21b7ed4d23e7449699cdcb9a78ae27d3c9d7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODg0NjMyOnYy", "diffSide": "RIGHT", "path": ".gitignore", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMDoyMjo1OFrOHeEHjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTozNzoxNlrOHeGbGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4Njc5OA==", "bodyText": "...", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501286798", "createdAt": "2020-10-07T20:22:58Z", "author": {"login": "LinoxGH"}, "path": ".gitignore", "diffHunk": "@@ -4,10 +4,12 @@\n /sonar/\n /.settings/\n /.idea/\n+/.vscode/\n \n dependency-reduced-pom.xml\n \n .classpath\n+.factorypath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d17d21b7ed4d23e7449699cdcb9a78ae27d3c9d7"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyNDU2OA==", "bodyText": "If you make a comment, please give it a constructive description.\nNot even I can infer a meaning from this.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501324568", "createdAt": "2020-10-07T21:37:16Z", "author": {"login": "TheBusyBiscuit"}, "path": ".gitignore", "diffHunk": "@@ -4,10 +4,12 @@\n /sonar/\n /.settings/\n /.idea/\n+/.vscode/\n \n dependency-reduced-pom.xml\n \n .classpath\n+.factorypath", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI4Njc5OA=="}, "originalCommit": {"oid": "d17d21b7ed4d23e7449699cdcb9a78ae27d3c9d7"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTI4Nzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1MzoxNlrOHeISjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzo1NjoxN1rOHeJgZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NTE0OA==", "bodyText": "I think replacing the two currently empty slots with magical glass and requiring two filled flasks in the middle would be a good improvement.\nWe don't wanna make it too cheap ;)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501355148", "createdAt": "2020-10-07T22:53:16Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -878,6 +879,15 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         false, false, \"caveman\", 50, new PotionEffect(PotionEffectType.FAST_DIGGING, 800, 2))\n         .register(plugin);\n \n+        new Talisman(SlimefunItems.TALISMAN_WISE,\n+        new ItemStack[] { SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_GLASS, SlimefunItems.TALISMAN_MAGICIAN, SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3NTA3Nw==", "bodyText": "Sure", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501375077", "createdAt": "2020-10-07T23:56:17Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -878,6 +879,15 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         false, false, \"caveman\", 50, new PotionEffect(PotionEffectType.FAST_DIGGING, 800, 2))\n         .register(plugin);\n \n+        new Talisman(SlimefunItems.TALISMAN_WISE,\n+        new ItemStack[] { SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_GLASS, SlimefunItems.TALISMAN_MAGICIAN, SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NTE0OA=="}, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTI4OTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1Mzo1MVrOHeITRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMzo1NzoxNFrOHeJhdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NTMzMw==", "bodyText": "One Essence of afterlife in the middle top and two elytra scales on the sides in the middle?", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501355333", "createdAt": "2020-10-07T22:53:51Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -878,6 +879,15 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         false, false, \"caveman\", 50, new PotionEffect(PotionEffectType.FAST_DIGGING, 800, 2))\n         .register(plugin);\n \n+        new Talisman(SlimefunItems.TALISMAN_WISE,\n+        new ItemStack[] { SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_GLASS, SlimefunItems.TALISMAN_MAGICIAN, SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3},\n+        false, false, \"wise\", 20)\n+        .register(plugin);\n+\n+        new ResurrectedTalisman(SlimefunItems.TALISMAN_RESURRECTED,\n+        new ItemStack[] { SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.ESSENCE_OF_AFTERLIFE, SlimefunItems.TALISMAN_ANGEL, SlimefunItems.ELYTRA_SCALE, SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3 })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3NTM1MQ==", "bodyText": "Sure, the Essense of afterlife is the hardest peace to craft here so I dont think itll matter too much, but its a little exta effort they need to put in for this item", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501375351", "createdAt": "2020-10-07T23:57:14Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -878,6 +879,15 @@ public static void setup(@Nonnull SlimefunPlugin plugin) {\n         false, false, \"caveman\", 50, new PotionEffect(PotionEffectType.FAST_DIGGING, 800, 2))\n         .register(plugin);\n \n+        new Talisman(SlimefunItems.TALISMAN_WISE,\n+        new ItemStack[] { SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.MAGICAL_GLASS, SlimefunItems.TALISMAN_MAGICIAN, SlimefunItems.FILLED_FLASK_OF_KNOWLEDGE, SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3},\n+        false, false, \"wise\", 20)\n+        .register(plugin);\n+\n+        new ResurrectedTalisman(SlimefunItems.TALISMAN_RESURRECTED,\n+        new ItemStack[] { SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3, SlimefunItems.ESSENCE_OF_AFTERLIFE, SlimefunItems.TALISMAN_ANGEL, SlimefunItems.ELYTRA_SCALE, SlimefunItems.MAGIC_LUMP_3, null, SlimefunItems.MAGIC_LUMP_3 })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NTMzMw=="}, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTI5MDQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1NDozMlrOHeIUDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1NDozMlrOHeIUDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NTUzMw==", "bodyText": "The last line of this lore has no color.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501355533", "createdAt": "2020-10-07T22:54:32Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -548,6 +548,8 @@ private SlimefunItems() {}\n     public static final SlimefunItemStack TALISMAN_WHIRLWIND = new SlimefunItemStack(\"WHIRLWIND_TALISMAN\", Material.EMERALD, \"&aTalisman of the Whirlwind\", \"\", \"&fHaving this Talisman\", \"&fin your Inventory will reflect\", \"&f60% of any projectiles fired at you.\", \"&e&oOnly a thrown Trident can pierce\", \"&e&othrough this layer of protection\");\n     public static final SlimefunItemStack TALISMAN_WIZARD = new SlimefunItemStack(\"WIZARD_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wizard\", \"\", \"&fWhile you have this Talisman\", \"&fin your Inventory it allows you to\", \"&fobtain Fortune Level 4/5 however\", \"&fit also has a chance to lower the\", \"&fLevel of some Enchantments on your Item\");\n     public static final SlimefunItemStack TALISMAN_CAVEMAN = new SlimefunItemStack(\"CAVEMAN_TALISMAN\", Material.EMERALD, \"&aTalisman of the Caveman\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 50% chance for a decent\", \"&fHaste buff when you mine any ore\");\n+    public static final SlimefunItemStack TALISMAN_WISE = new SlimefunItemStack(\"WISE_TALISMAN\", Material.EMERALD, \"&aTalisman of the Wise\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it gives\", \"&fyou a 20% chance of doubling\", \"&fall experience you obtain\");\n+    public static final SlimefunItemStack TALISMAN_RESURRECTED = new SlimefunItemStack(\"RESURRECTED_TALISMAN\", Material.EMERALD, \"&aTalisman of the Resurrected\", \"\", \"&fWhile you have this Talisman\", \"&fin your inventory it will\", \"&fteleport you back safely when\", \"&fyou fall into the void\", \"&e&oRight click while holding this\", \"&e&otalisman to set a custom\", \"respawn location!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTI5NDQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1NjoxNFrOHeIWeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTozOTo1NVrOHett_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NjE1Mg==", "bodyText": "I still think PlayerRespawnEvent#setRespawnLocation(...) would be much much more reliable here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501356152", "createdAt": "2020-10-07T22:56:14Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));\n+            }, 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM3NTUzNQ==", "bodyText": "I cant use the respawnLocation, because they never actually die", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501375535", "createdAt": "2020-10-07T23:57:51Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));\n+            }, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NjE1Mg=="}, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgyNzgwNQ==", "bodyText": "Where does that happen? In Talisman.checkFor?\nIf so then you should definitely add a lot of  comments in this method because that isn't apparent from a single look.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501827805", "createdAt": "2020-10-08T15:49:46Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));\n+            }, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NjE1Mg=="}, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2ODM4Mw==", "bodyText": "Where does what happen?\n@TheBusyBiscuit\nBasically how it flows right now is:\n\nPlayerDeathEvent gets fired (The player dies after all event handlers are done handling it)\nI do checks to see if the talisman is there and whatnot, potion effects get added, ...\nI teleport the user to a safe location\nThen the event is cancelled, causing the user not to die (see image)\n\nuser keeps doing its thing", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501968383", "createdAt": "2020-10-08T19:39:55Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));\n+            }, 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NjE1Mg=="}, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTI5NTE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1NjozMFrOHeIW4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1NjozMFrOHeIW4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1NjI1OA==", "bodyText": "SlimefunItem.getByItem(...)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501356258", "createdAt": "2020-10-07T22:56:30Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));\n+            }, 2);\n+        }\n+    }\n+\n+    @Nonnull\n+    private Location getSafeRespawnLocation(@Nonnull Player player) {\n+        ItemStack item = Talisman.checkForAndGet(SlimefunItems.TALISMAN_RESURRECTED, player);\n+        SlimefunItem sfItem = ResurrectedTalisman.getByItem(item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTI5ODUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1ODowMFrOHeIYyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjo1ODowMFrOHeIYyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM1Njc0NQ==", "bodyText": "This null check should happen way earlier, before the SlimefunItem is assigned.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501356745", "createdAt": "2020-10-07T22:58:00Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));\n+            }, 2);\n+        }\n+    }\n+\n+    @Nonnull\n+    private Location getSafeRespawnLocation(@Nonnull Player player) {\n+        ItemStack item = Talisman.checkForAndGet(SlimefunItems.TALISMAN_RESURRECTED, player);\n+        SlimefunItem sfItem = ResurrectedTalisman.getByItem(item);\n+\n+        if (sfItem instanceof ResurrectedTalisman) {\n+            ResurrectedTalisman talisman = (ResurrectedTalisman) sfItem;\n+\n+            if (item != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b722dc2a002b202acfc8f159b645b8804482b421"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQyMTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjowNTo1NVrOHel0Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTo1Mjo0NFrOHeuHPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzODg5MA==", "bodyText": "I would definitely add a canBuild check here before the location is saved. (e.g. to prevent saving a location in other players' regions.)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501838890", "createdAt": "2020-10-08T16:05:55Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+import io.github.thebusybiscuit.cscorelib2.data.PersistentJsonDataType;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+            ItemMeta itemMeta = e.getItem().getItemMeta();\n+\n+            itemMeta.getPersistentDataContainer().set(locationKey, PersistentJsonDataType.JSON_OBJECT, json);\n+\n+            e.getItem().setItemMeta(itemMeta);\n+\n+            SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"messages.talisman.resurrected-location\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82716dd808d6607e698b01d68d058d49509d2f5c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2ODUzOQ==", "bodyText": "didnt know this was a thing, will definitely add that", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501968539", "createdAt": "2020-10-08T19:40:13Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+import io.github.thebusybiscuit.cscorelib2.data.PersistentJsonDataType;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+            ItemMeta itemMeta = e.getItem().getItemMeta();\n+\n+            itemMeta.getPersistentDataContainer().set(locationKey, PersistentJsonDataType.JSON_OBJECT, json);\n+\n+            e.getItem().setItemMeta(itemMeta);\n+\n+            SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"messages.talisman.resurrected-location\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzODg5MA=="}, "originalCommit": {"oid": "82716dd808d6607e698b01d68d058d49509d2f5c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NDg0Ng==", "bodyText": "Hint: SlimefunPlugin.getProtectionManager().hasPermission(p, currentLoc, ProtectableAction.PLACE_BLOCK);", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501974846", "createdAt": "2020-10-08T19:52:44Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+\n+import io.github.thebusybiscuit.cscorelib2.data.PersistentJsonDataType;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.entity.Item;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import org.bukkit.potion.PotionEffectType;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+            ItemMeta itemMeta = e.getItem().getItemMeta();\n+\n+            itemMeta.getPersistentDataContainer().set(locationKey, PersistentJsonDataType.JSON_OBJECT, json);\n+\n+            e.getItem().setItemMeta(itemMeta);\n+\n+            SlimefunPlugin.getLocalization().sendMessage(e.getPlayer(), \"messages.talisman.resurrected-location\", true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgzODg5MA=="}, "originalCommit": {"oid": "82716dd808d6607e698b01d68d058d49509d2f5c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjQyODg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjowNzozMVrOHel4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTo1NzowMlrOHeuP0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDAzMw==", "bodyText": "Also, is this \"safe location\" really a safe location? I mean if someone fills that saved location with blocks, then the player will be teleported to that unsafe location anyway, right? If so, we should consider doing some checks before this teleport.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501840033", "createdAt": "2020-10-08T16:07:31Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82716dd808d6607e698b01d68d058d49509d2f5c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk2OTIxNQ==", "bodyText": "Thats a good point, but the player can always choose not to set one, and hell then end up at his bedspawn.\nAnd he can always change the respawn point of his talisman. I dont think we should do extra checks to ensure a safe respawn location.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501969215", "createdAt": "2020-10-08T19:41:36Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDAzMw=="}, "originalCommit": {"oid": "82716dd808d6607e698b01d68d058d49509d2f5c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3MjE0Nw==", "bodyText": "And if you do think it's a necessity, it might be better to make this a public method somewhere so it can be reused for other teleport ocassions", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501972147", "createdAt": "2020-10-08T19:47:21Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDAzMw=="}, "originalCommit": {"oid": "82716dd808d6607e698b01d68d058d49509d2f5c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk3NzA0MQ==", "bodyText": "Thats a good point, but the player can always choose not to set one, and hell then end up at his bedspawn.\nAnd he can always change the respawn point of his talisman. I dont think we should do extra checks to ensure a safe respawn location.\n\nFair enough though. This makes the talisman a little unsafe, but that's the cost I guess :lul:", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r501977041", "createdAt": "2020-10-08T19:57:02Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -292,6 +303,46 @@ public void onBlockBreak(BlockBreakEvent e) {\n         }\n     }\n \n+    @EventHandler\n+    public void onExperienceReceive(PlayerExpChangeEvent e) {\n+        if (e.getAmount() > 0 && Talisman.checkFor(e, SlimefunItems.TALISMAN_WISE)) {\n+            e.setAmount(e.getAmount() * 2);\n+        }\n+    }\n+\n+    @EventHandler\n+    public void onPlayerDeath(PlayerDeathEvent e) {\n+        Player player = e.getEntity();\n+        DamageCause dmgCause = player.getLastDamageCause().getCause();\n+\n+        if (dmgCause == DamageCause.VOID && Talisman.checkFor(e, SlimefunItems.TALISMAN_RESURRECTED)) {\n+            SlimefunPlugin.runSync(() -> {\n+                PaperLib.teleportAsync(player, getSafeRespawnLocation(player));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0MDAzMw=="}, "originalCommit": {"oid": "82716dd808d6607e698b01d68d058d49509d2f5c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTY5OTA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzowMlrOHfErqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzowMlrOHfErqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0NDYxNg==", "bodyText": "This variable should not be declared before it's relevant (inside the first if-block)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r502344616", "createdAt": "2020-10-09T10:47:02Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.cscorelib2.data.PersistentJsonDataType;\n+import io.github.thebusybiscuit.cscorelib2.protection.ProtectableAction;\n+\n+import org.bukkit.potion.PotionEffectType;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import javax.annotation.Nonnull;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.entity.*;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import javax.annotation.Nullable;\n+import java.lang.Runnable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bb974ce96770db9f3381204ac73c95b82b7b195"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTcwMDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzozMVrOHfEsdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMDo0NzozMVrOHfEsdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM0NDgyMA==", "bodyText": "You should also move this into the if-block and do .hasItemMeta() before-hand.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r502344820", "createdAt": "2020-10-09T10:47:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/ResurrectedTalisman.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.magical.talismans;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParser;\n+import io.github.thebusybiscuit.cscorelib2.data.PersistentJsonDataType;\n+import io.github.thebusybiscuit.cscorelib2.protection.ProtectableAction;\n+\n+import org.bukkit.potion.PotionEffectType;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.ItemUseHandler;\n+import org.bukkit.persistence.PersistentDataContainer;\n+import org.bukkit.persistence.PersistentDataType;\n+import org.bukkit.potion.PotionEffect;\n+import javax.annotation.Nonnull;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+import org.bukkit.Bukkit;\n+import org.bukkit.Location;\n+import org.bukkit.entity.*;\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.World;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import javax.annotation.Nullable;\n+import java.lang.Runnable;\n+import java.util.UUID;\n+\n+/**\n+ * This {@link SlimefunItem} is a special variant of the {@Link Talisman}. This specific {@Link Talisman} saves you\n+ * from a death caused by the void.\n+ *\n+ * @author svr333\n+ *\n+ */\n+\n+public class ResurrectedTalisman extends Talisman {\n+\n+    private final NamespacedKey locationKey = new NamespacedKey(SlimefunPlugin.instance(), \"resurrected_location\");\n+\n+    public ResurrectedTalisman(SlimefunItemStack item, ItemStack[] recipe) {\n+        super(item, recipe, true, true, \"resurrected\", new PotionEffect(PotionEffectType.GLOWING, 400, 0), new PotionEffect(PotionEffectType.ABSORPTION, 400, 4), new PotionEffect(PotionEffectType.DAMAGE_RESISTANCE, 200, 20));\n+\n+        addItemHandler(getItemHandler());\n+    }\n+\n+    public ItemUseHandler getItemHandler() {\n+        return e -> {\n+            Location currentLoc = e.getPlayer().getLocation();\n+            JsonObject json = createJsonFromLocation(currentLoc);\n+            ItemMeta itemMeta = e.getItem().getItemMeta();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bb974ce96770db9f3381204ac73c95b82b7b195"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDE2MzQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMToyNDoyNFrOHfqtow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMjoxMDo1MFrOHfq_3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2NzcxNQ==", "bodyText": "First off, I would have still left the existing method. And I think these methods can use a bit renaming too.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static ItemStack checkFor(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n          \n          \n            \n                    return checkFor(e, stack.getItem());\n          \n          \n            \n                }\n          \n          \n            \n                public static boolean activate(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n          \n          \n            \n                    return activateAndGet(e, stack) != null;\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                public static ItemStack activateAndGet(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n          \n          \n            \n                    return activateAndGet(e, stack.getItem());\n          \n          \n            \n                }", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r502967715", "createdAt": "2020-10-11T21:24:24Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,61 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n+    public static ItemStack checkFor(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n         return checkFor(e, stack.getItem());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf5236bd6e0c46fa4c7eb17a791d3b1880a1499"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk3MjM4Mw==", "bodyText": "Im going to call the first one tryActivate since it returns a boolean and that makes more sense when reading", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r502972383", "createdAt": "2020-10-11T22:10:50Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,61 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n+    public static ItemStack checkFor(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n         return checkFor(e, stack.getItem());\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2NzcxNQ=="}, "originalCommit": {"oid": "bbf5236bd6e0c46fa4c7eb17a791d3b1880a1499"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDE2NTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMToyNjoxNVrOHfqudQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMToyNjoxNVrOHfqudQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2NzkyNQ==", "bodyText": "Doing containsSimilarItem() and then looping through the inventory again to get the item is quite resource intense.\nOnly use your retrieve method and then just return that.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r502967925", "createdAt": "2020-10-11T21:26:15Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,61 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n+    public static ItemStack checkFor(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n         return checkFor(e, stack.getItem());\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItem item) {\n+    @Nullable\n+    public static ItemStack checkFor(@Nonnull Event e, @Nonnull SlimefunItem item) {\n         if (!(item instanceof Talisman)) {\n-            return false;\n+            return null;\n         }\n \n         Talisman talisman = (Talisman) item;\n         if (ThreadLocalRandom.current().nextInt(100) > talisman.getChance()) {\n-            return false;\n+            return null;\n         }\n \n         Player p = getPlayerByEventType(e);\n         if (p == null || !pass(p, talisman)) {\n-            return false;\n+            return null;\n         }\n \n         ItemStack talismanItem = talisman.getItem();\n+        ItemStack enderTalisman = talisman.getEnderVariant();\n+\n+        if (!Slimefun.hasUnlocked(p, talisman, true)) {\n+            return null;\n+        }\n \n         if (SlimefunUtils.containsSimilarItem(p.getInventory(), talismanItem, true)) {\n-            if (Slimefun.hasUnlocked(p, talisman, true)) {\n-                activateTalisman(e, p, p.getInventory(), talisman);\n-                return true;\n-            } else {\n-                return false;\n-            }\n-        } else {\n-            ItemStack enderTalisman = talisman.getEnderVariant();\n-\n-            if (SlimefunUtils.containsSimilarItem(p.getEnderChest(), enderTalisman, true)) {\n-                if (Slimefun.hasUnlocked(p, talisman, true)) {\n-                    activateTalisman(e, p, p.getEnderChest(), talisman);\n-                    return true;\n-                } else {\n-                    return false;\n-                }\n-            } else {\n-                return false;\n+            activateTalisman(e, p, p.getInventory(), talisman);\n+            return retrieveTalismanFromInventory(p.getInventory(), talisman);\n+        }\n+        else if (SlimefunUtils.containsSimilarItem(p.getEnderChest(), enderTalisman, true)) { \n+            activateTalisman(e, p, p.getEnderChest(), talisman);\n+            return retrieveTalismanFromInventory(p.getEnderChest(), talisman);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf5236bd6e0c46fa4c7eb17a791d3b1880a1499"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDE2NTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMToyNjo0NVrOHfquow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQyMToyNjo0NVrOHfquow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk2Nzk3MQ==", "bodyText": "Also can just do this...\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (SlimefunUtils.isItemSimilar(item, talisman.getItem(), true, false)) {\n          \n          \n            \n                        if (talisman.isItem(item)) {", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r502967971", "createdAt": "2020-10-11T21:26:45Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,61 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n+    public static ItemStack checkFor(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n         return checkFor(e, stack.getItem());\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItem item) {\n+    @Nullable\n+    public static ItemStack checkFor(@Nonnull Event e, @Nonnull SlimefunItem item) {\n         if (!(item instanceof Talisman)) {\n-            return false;\n+            return null;\n         }\n \n         Talisman talisman = (Talisman) item;\n         if (ThreadLocalRandom.current().nextInt(100) > talisman.getChance()) {\n-            return false;\n+            return null;\n         }\n \n         Player p = getPlayerByEventType(e);\n         if (p == null || !pass(p, talisman)) {\n-            return false;\n+            return null;\n         }\n \n         ItemStack talismanItem = talisman.getItem();\n+        ItemStack enderTalisman = talisman.getEnderVariant();\n+\n+        if (!Slimefun.hasUnlocked(p, talisman, true)) {\n+            return null;\n+        }\n \n         if (SlimefunUtils.containsSimilarItem(p.getInventory(), talismanItem, true)) {\n-            if (Slimefun.hasUnlocked(p, talisman, true)) {\n-                activateTalisman(e, p, p.getInventory(), talisman);\n-                return true;\n-            } else {\n-                return false;\n-            }\n-        } else {\n-            ItemStack enderTalisman = talisman.getEnderVariant();\n-\n-            if (SlimefunUtils.containsSimilarItem(p.getEnderChest(), enderTalisman, true)) {\n-                if (Slimefun.hasUnlocked(p, talisman, true)) {\n-                    activateTalisman(e, p, p.getEnderChest(), talisman);\n-                    return true;\n-                } else {\n-                    return false;\n-                }\n-            } else {\n-                return false;\n+            activateTalisman(e, p, p.getInventory(), talisman);\n+            return retrieveTalismanFromInventory(p.getInventory(), talisman);\n+        }\n+        else if (SlimefunUtils.containsSimilarItem(p.getEnderChest(), enderTalisman, true)) { \n+            activateTalisman(e, p, p.getEnderChest(), talisman);\n+            return retrieveTalismanFromInventory(p.getEnderChest(), talisman);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Nullable\n+    private static ItemStack retrieveTalismanFromInventory(@Nonnull Inventory inv, @Nonnull Talisman talisman) {\n+        ItemStack[] contents = inv.getContents();\n+        for (int i = 0; i < contents.length; i++) {\n+            ItemStack item = contents[i];\n+\n+            if (SlimefunUtils.isItemSimilar(item, talisman.getItem(), true, false)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf5236bd6e0c46fa4c7eb17a791d3b1880a1499"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTMzMDYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOToyOTozNlrOHli2NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDowODoxOVrOHmCMjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDI5Mg==", "bodyText": "CAVEMAN = WISE?", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r509130292", "createdAt": "2020-10-21T09:29:36Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -289,10 +302,48 @@ public void onBlockDropItems(BlockDropItemEvent e) {\n     @EventHandler\n     public void onBlockBreak(BlockBreakEvent e) {\n         if (SlimefunTag.CAVEMAN_TALISMAN_TRIGGERS.isTagged(e.getBlock().getType())) {\n-            Talisman.checkFor(e, SlimefunItems.TALISMAN_CAVEMAN);\n+            Talisman.tryActivate(e, SlimefunItems.TALISMAN_WISE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db95cca3fbcc4eb3709ee74c0015522be0e987dd"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY0MzkxNg==", "bodyText": "copy & paste error :)", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r509643916", "createdAt": "2020-10-21T20:08:19Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/TalismanListener.java", "diffHunk": "@@ -289,10 +302,48 @@ public void onBlockDropItems(BlockDropItemEvent e) {\n     @EventHandler\n     public void onBlockBreak(BlockBreakEvent e) {\n         if (SlimefunTag.CAVEMAN_TALISMAN_TRIGGERS.isTagged(e.getBlock().getType())) {\n-            Talisman.checkFor(e, SlimefunItems.TALISMAN_CAVEMAN);\n+            Talisman.tryActivate(e, SlimefunItems.TALISMAN_WISE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDI5Mg=="}, "originalCommit": {"oid": "db95cca3fbcc4eb3709ee74c0015522be0e987dd"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTMzNzYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMToxMlrOHli6dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMToxMlrOHli6dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTM4MQ==", "bodyText": "Redundant brackets\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (tryActivateAndGet(e, stack.getItem()) != null);\n          \n          \n            \n                    return tryActivateAndGet(e, stack.getItem()) != null;", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r509131381", "createdAt": "2020-10-21T09:31:12Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,71 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n-        return checkFor(e, stack.getItem());\n+    public static boolean tryActivate(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n+        return (tryActivateAndGet(e, stack.getItem()) != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db95cca3fbcc4eb3709ee74c0015522be0e987dd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTMzODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMToyMVrOHli66w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMToyMVrOHli66w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTQ5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (tryActivateAndGet(e, item) != null);\n          \n          \n            \n                    return tryActivateAndGet(e, item) != null;", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r509131499", "createdAt": "2020-10-21T09:31:21Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,71 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n-        return checkFor(e, stack.getItem());\n+    public static boolean tryActivate(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n+        return (tryActivateAndGet(e, stack.getItem()) != null);\n+    }\n+\n+    public static boolean tryActivate(@Nonnull Event e, @Nonnull SlimefunItem item) {\n+        return (tryActivateAndGet(e, item) != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db95cca3fbcc4eb3709ee74c0015522be0e987dd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTM0MTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMjowN1rOHli8yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMjowN1rOHli8yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTk3Nw==", "bodyText": "This will send a message to the player, we don't want this if the Player isn't even carrying the talisman.", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r509131977", "createdAt": "2020-10-21T09:32:07Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,71 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n-        return checkFor(e, stack.getItem());\n+    public static boolean tryActivate(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n+        return (tryActivateAndGet(e, stack.getItem()) != null);\n+    }\n+\n+    public static boolean tryActivate(@Nonnull Event e, @Nonnull SlimefunItem item) {\n+        return (tryActivateAndGet(e, item) != null);\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItem item) {\n+    public static ItemStack tryActivateAndGet(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n+        return tryActivateAndGet(e, stack.getItem());\n+    }\n+\n+    @Nullable\n+    public static ItemStack tryActivateAndGet(@Nonnull Event e, @Nonnull SlimefunItem item) {\n         if (!(item instanceof Talisman)) {\n-            return false;\n+            return null;\n         }\n \n         Talisman talisman = (Talisman) item;\n         if (ThreadLocalRandom.current().nextInt(100) > talisman.getChance()) {\n-            return false;\n+            return null;\n         }\n \n         Player p = getPlayerByEventType(e);\n         if (p == null || !pass(p, talisman)) {\n-            return false;\n+            return null;\n+        }\n+\n+        if (!Slimefun.hasUnlocked(p, talisman, true)) {\n+            return null;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db95cca3fbcc4eb3709ee74c0015522be0e987dd"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTM0NDk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMzowOFrOHli_Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMzowOFrOHli_Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMjU4Nw==", "bodyText": "This comment no longer applies", "url": "https://github.com/Slimefun/Slimefun4/pull/2388#discussion_r509132587", "createdAt": "2020-10-21T09:33:08Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/magical/talismans/Talisman.java", "diffHunk": "@@ -130,48 +134,71 @@ private static boolean hasMessage(Talisman talisman) {\n         return talisman.getMessageSuffix() != null;\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItemStack stack) {\n-        return checkFor(e, stack.getItem());\n+    public static boolean tryActivate(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n+        return (tryActivateAndGet(e, stack.getItem()) != null);\n+    }\n+\n+    public static boolean tryActivate(@Nonnull Event e, @Nonnull SlimefunItem item) {\n+        return (tryActivateAndGet(e, item) != null);\n     }\n \n-    public static boolean checkFor(Event e, SlimefunItem item) {\n+    public static ItemStack tryActivateAndGet(@Nonnull Event e, @Nonnull SlimefunItemStack stack) {\n+        return tryActivateAndGet(e, stack.getItem());\n+    }\n+\n+    @Nullable\n+    public static ItemStack tryActivateAndGet(@Nonnull Event e, @Nonnull SlimefunItem item) {\n         if (!(item instanceof Talisman)) {\n-            return false;\n+            return null;\n         }\n \n         Talisman talisman = (Talisman) item;\n         if (ThreadLocalRandom.current().nextInt(100) > talisman.getChance()) {\n-            return false;\n+            return null;\n         }\n \n         Player p = getPlayerByEventType(e);\n         if (p == null || !pass(p, talisman)) {\n-            return false;\n+            return null;\n+        }\n+\n+        if (!Slimefun.hasUnlocked(p, talisman, true)) {\n+            return null;\n         }\n \n-        ItemStack talismanItem = talisman.getItem();\n+        ItemStack possibleTalisman = retrieveTalismanFromInventory(p.getInventory(), talisman);\n \n-        if (SlimefunUtils.containsSimilarItem(p.getInventory(), talismanItem, true)) {\n-            if (Slimefun.hasUnlocked(p, talisman, true)) {\n-                activateTalisman(e, p, p.getInventory(), talisman);\n-                return true;\n-            } else {\n-                return false;\n-            }\n-        } else {\n-            ItemStack enderTalisman = talisman.getEnderVariant();\n-\n-            if (SlimefunUtils.containsSimilarItem(p.getEnderChest(), enderTalisman, true)) {\n-                if (Slimefun.hasUnlocked(p, talisman, true)) {\n-                    activateTalisman(e, p, p.getEnderChest(), talisman);\n-                    return true;\n-                } else {\n-                    return false;\n-                }\n-            } else {\n-                return false;\n+        if (possibleTalisman != null) {\n+            activateTalisman(e, p, p.getInventory(), talisman);\n+            return possibleTalisman;\n+        }\n+\n+        possibleTalisman = retrieveTalismanFromInventory(p.getEnderChest(), talisman);\n+\n+        if (possibleTalisman != null) {\n+            activateTalisman(e, p, p.getEnderChest(), talisman);\n+            return possibleTalisman;\n+        }\n+\n+        return possibleTalisman;\n+    }\n+\n+    @Nullable\n+    private static ItemStack retrieveTalismanFromInventory(@Nonnull Inventory inv, @Nonnull Talisman talisman) {\n+        ItemStack[] contents = inv.getContents();\n+        for (int i = 0; i < contents.length; i++) {\n+            ItemStack item = contents[i];\n+\n+            if (talisman.isItem(item)) {\n+                return item;\n             }\n         }\n+\n+        /* The point of this method is that it only gets called when youre sure there is \n+        *  a talisman in the inventory, so that it never returns null.\n+        *  However, this method will be nullable since there is an if statement and it needs\n+        *  to return something */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db95cca3fbcc4eb3709ee74c0015522be0e987dd"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 221, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}