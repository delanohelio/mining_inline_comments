{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTkwMTgz", "number": 2055, "title": "Lots of refactoring and rewriting of Item Energy", "bodyText": "Description\n\nItem Energy uses lore to store energy which is really not good.\nSo I switched over to Persistent Data and updated all associated classes using this old system to use the new.\nNext step would be to add Unit Tests for this.\n@WalshyDev requesting your review.\nChanges\n\n\nItem Energy uses Persistent Data now\nAdded a proper \"Rechargeable\" interface which can be added to items to safely define what is chargeable and what isn't\nFixed the long-time going on typo of \"Chargable\" with this\nFully deprecated the classes ChargableItem and ItemEnergy now.\n\nChecklist\n\n\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.\n I followed the existing code standards and didn't mess up the formatting.\n I did my best to add documentation to any public classes or methods I added.\n I added sufficient Unit Tests to cover my code.", "createdAt": "2020-06-26T13:35:17Z", "url": "https://github.com/Slimefun/Slimefun4/pull/2055", "merged": true, "mergeCommit": {"oid": "ca36271a79e34623cbfcb38c04037766b0722bae"}, "closed": true, "closedAt": "2020-06-27T01:43:56Z", "author": {"login": "TheBusyBiscuit"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvDUyygH2gAyNDQwNTkwMTgzOjZmZmE1YWI5YTdkNDJlMWNiNDBiMmQ1NjcyMGY0MTU2NDE5OGJjNTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvNu1vgH2gAyNDQwNTkwMTgzOjZkMzY2NTUwODE3NTYwMGY1OTJiZTJiNjhkZTA2ZWEzMjE1ZTdmYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/6ffa5ab9a7d42e1cb40b2d56720f41564198bc58", "committedDate": "2020-06-26T13:32:57Z", "message": "Lots of refactoring and rewriting of Item Energy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d0c816ed2fe1bc767dbd0c5779467ed450e68b9", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/8d0c816ed2fe1bc767dbd0c5779467ed450e68b9", "committedDate": "2020-06-26T14:27:16Z", "message": "Some performance improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e5b57c5d91fe62f79953ffe5186281cc77e0f6", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/28e5b57c5d91fe62f79953ffe5186281cc77e0f6", "committedDate": "2020-06-26T15:36:57Z", "message": "Some better exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed85a9a051e3f63b9e3b903d194c5b815f01c538", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/ed85a9a051e3f63b9e3b903d194c5b815f01c538", "committedDate": "2020-06-26T15:58:54Z", "message": "Added Unit tests for rechargeable items"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f99c7275831980f0564553278764f3dd2b644425", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/f99c7275831980f0564553278764f3dd2b644425", "committedDate": "2020-06-26T18:37:53Z", "message": "Added another Unit Test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80fc0a173e1d389873cdca0033539694e9e620d1", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/80fc0a173e1d389873cdca0033539694e9e620d1", "committedDate": "2020-06-26T18:58:23Z", "message": "Added lore addition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e081d15c6d6643d40d46c1adb4275df80ac69d9c", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/e081d15c6d6643d40d46c1adb4275df80ac69d9c", "committedDate": "2020-06-26T23:46:20Z", "message": "Fixed a slight mistake with the lore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2833b3ce85782ea07f2513cbc44904026f43f89", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/b2833b3ce85782ea07f2513cbc44904026f43f89", "committedDate": "2020-06-27T00:18:49Z", "message": "Removed unused parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6f09d2e2eef4d34c2cff586e6b477899301a1dd", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/f6f09d2e2eef4d34c2cff586e6b477899301a1dd", "committedDate": "2020-06-27T00:28:01Z", "message": "Some more refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0dfd40e4079448db5e6d48910566084f3b7cfe14", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/0dfd40e4079448db5e6d48910566084f3b7cfe14", "committedDate": "2020-06-27T00:35:29Z", "message": "Fixed a few more color codes for 1.16 (Sorry Walshy :P )"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44c0029587805a0721655ce52149c5af0bfa5993", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/44c0029587805a0721655ce52149c5af0bfa5993", "committedDate": "2020-06-27T00:47:53Z", "message": "Fixed a rare concurrency issue with world saving"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzA4MDk0", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#pullrequestreview-438308094", "createdAt": "2020-06-26T13:45:16Z", "commit": {"oid": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0NToxNlrOGphe_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDo1NDoxMVrOGpx_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MzQwNA==", "bodyText": "I make an API to make this smaller but you do this :PepeHands:", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446193404", "createdAt": "2020-06-26T13:45:16Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.List;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataType;\n+\n+import io.github.thebusybiscuit.cscorelib2.chat.ChatColors;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * This is just a simple helper class to provide static methods to the {@link Rechargeable}\n+ * interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see Rechargeable\n+ *\n+ */\n+final class RechargeableHelper {\n+\n+    private static final NamespacedKey CHARGE_KEY = new NamespacedKey(SlimefunPlugin.instance, \"item_charge\");\n+    private static final String LORE_PREFIX = ChatColors.color(\"&c&o&8\\u21E8 &e\\u26A1 &7\");\n+\n+    private RechargeableHelper() {}\n+\n+    static void setCharge(ItemMeta meta, float charge, float capacity) {\n+        BigDecimal decimal = BigDecimal.valueOf(charge).setScale(2, RoundingMode.HALF_UP);\n+        float value = decimal.floatValue();\n+\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            meta.getPersistentDataContainer().set(CHARGE_KEY, PersistentDataType.FLOAT, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIwMTIyMw==", "bodyText": "Still into this pattern eh? Implementing abstract method here...\nPlease just accept a param and pass it. It's really quite ugly and unneeded having these methods implemented in here", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446201223", "createdAt": "2020-06-26T13:58:31Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/setup/SlimefunItemSetup.java", "diffHunk": "@@ -1975,15 +1975,22 @@ public int getCapacity() {\n \t\t\tnew AutoDrier(categories.electricity, SlimefunItems.AUTO_DRIER, RecipeType.ENHANCED_CRAFTING_TABLE,\n \t\t\tnew ItemStack[]{null, null, null, SlimefunItems.HEATING_COIL, new ItemStack(Material.SMOKER), SlimefunItems.HEATING_COIL, null, new ItemStack(Material.CAMPFIRE), null})\n \t\t\t.register(plugin);\n-\t\t} else {\n+\t\t} \n+\t\telse {\n \t\t\tnew AutoDrier(categories.electricity, SlimefunItems.AUTO_DRIER, RecipeType.ENHANCED_CRAFTING_TABLE,\n \t\t\tnew ItemStack[]{null, null, null, SlimefunItems.HEATING_COIL, new ItemStack(Material.FURNACE), SlimefunItems.HEATING_COIL, null, new ItemStack(Material.TORCH), null})\n \t\t\t.register(plugin);\n \t\t}\n \n \t\tnew AutoBrewer(categories.electricity, SlimefunItems.AUTO_BREWER, RecipeType.ENHANCED_CRAFTING_TABLE,\n-\t\tnew ItemStack[] {null, SlimefunItems.HEATING_COIL, null, SlimefunItems.REINFORCED_PLATE, new ItemStack(Material.BREWING_STAND), SlimefunItems.REINFORCED_PLATE, null, SlimefunItems.ELECTRIC_MOTOR, null})\n-\t\t.register(plugin);\n+\t\tnew ItemStack[] {null, SlimefunItems.HEATING_COIL, null, SlimefunItems.REINFORCED_PLATE, new ItemStack(Material.BREWING_STAND), SlimefunItems.REINFORCED_PLATE, null, SlimefunItems.ELECTRIC_MOTOR, null}) {\n+\n+            @Override\n+            public int getSpeed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ffa5ab9a7d42e1cb40b2d56720f41564198bc58"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1OTk1Nw==", "bodyText": "Should we just make these SlimefunItemStacks? I don't see a world where this would ever be on a normal item and that way we're also enforcing ID (so performance improvements) to be there.", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446459957", "createdAt": "2020-06-27T00:24:58Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/Rechargeable.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.Material;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+\n+import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNet;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.Jetpack;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.MultiTool;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ChargingBench;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * A {@link Rechargeable} {@link SlimefunItem} can hold energy and is able to\n+ * be recharged using a {@link ChargingBench}.\n+ * Any {@link SlimefunItem} which is supposed to be chargeable <b>must</b> implement this interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see ChargingBench\n+ * @see EnergyNet\n+ * @see Jetpack\n+ * @see MultiTool\n+ *\n+ */\n+@FunctionalInterface\n+public interface Rechargeable extends ItemAttribute {\n+\n+    /**\n+     * This method returns the maximum charge the given {@link ItemStack} is capable of holding.\n+     * \n+     * @param item\n+     *            The {@link ItemStack} for which to determine the maximum charge\n+     * \n+     * @return The maximum energy charge for this {@link ItemStack}\n+     */\n+    float getMaxItemCharge(ItemStack item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e081d15c6d6643d40d46c1adb4275df80ac69d9c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MDM3OQ==", "bodyText": "How come you never just use Preconditions for these? Bit nicer to look at and generally more consistent with Bukkit internals which I like.", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446460379", "createdAt": "2020-06-27T00:27:38Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/Rechargeable.java", "diffHunk": "@@ -0,0 +1,145 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.Material;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.inventory.meta.ItemMeta;\n+\n+import io.github.thebusybiscuit.slimefun4.core.networks.energy.EnergyNet;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.Jetpack;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.gadgets.MultiTool;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.electric.machines.ChargingBench;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+\n+/**\n+ * A {@link Rechargeable} {@link SlimefunItem} can hold energy and is able to\n+ * be recharged using a {@link ChargingBench}.\n+ * Any {@link SlimefunItem} which is supposed to be chargeable <b>must</b> implement this interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see ChargingBench\n+ * @see EnergyNet\n+ * @see Jetpack\n+ * @see MultiTool\n+ *\n+ */\n+@FunctionalInterface\n+public interface Rechargeable extends ItemAttribute {\n+\n+    /**\n+     * This method returns the maximum charge the given {@link ItemStack} is capable of holding.\n+     * \n+     * @param item\n+     *            The {@link ItemStack} for which to determine the maximum charge\n+     * \n+     * @return The maximum energy charge for this {@link ItemStack}\n+     */\n+    float getMaxItemCharge(ItemStack item);\n+\n+    /**\n+     * This method sets the stored energy charge for a given {@link ItemStack}.\n+     * The charge must be at least zero and at most {@link #getMaxItemCharge(ItemStack)}.\n+     * \n+     * @param item\n+     *            The {@link ItemStack} to charge\n+     * @param charge\n+     *            The amount of charge to store\n+     */\n+    default void setItemCharge(ItemStack item, float charge) {\n+        if (item == null || item.getType() == Material.AIR) {\n+            throw new IllegalArgumentException(\"Cannot set Item charge for null or AIR\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e081d15c6d6643d40d46c1adb4275df80ac69d9c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTU5Ng==", "bodyText": "This comment is a little misleading. It makes it seem like the data doesn't exist here and will fall back to the lore. Yes you can see the code and tell but, should still be better.\nI'd simply say \"There's persistent data luckily so we return it rather than parsing the lore\"", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446461596", "createdAt": "2020-06-27T00:35:27Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataType;\n+\n+import io.github.thebusybiscuit.cscorelib2.chat.ChatColors;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * This is just a simple helper class to provide static methods to the {@link Rechargeable}\n+ * interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see Rechargeable\n+ *\n+ */\n+final class RechargeableHelper {\n+\n+    private static final NamespacedKey CHARGE_KEY = new NamespacedKey(SlimefunPlugin.instance, \"item_charge\");\n+    private static final String LORE_PREFIX = ChatColors.color(\"&c&o&8\\u21E8 &e\\u26A1 &7\");\n+\n+    private RechargeableHelper() {}\n+\n+    static void setCharge(ItemMeta meta, float charge, float capacity) {\n+        BigDecimal decimal = BigDecimal.valueOf(charge).setScale(2, RoundingMode.HALF_UP);\n+        float value = decimal.floatValue();\n+\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            meta.getPersistentDataContainer().set(CHARGE_KEY, PersistentDataType.FLOAT, value);\n+        }\n+\n+        List<String> lore = meta.hasLore() ? meta.getLore() : new ArrayList<>();\n+        for (int i = 0; i < lore.size(); i++) {\n+            String line = lore.get(i);\n+\n+            if (line.startsWith(LORE_PREFIX)) {\n+                lore.set(i, LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+                meta.setLore(lore);\n+                return;\n+            }\n+        }\n+\n+        lore.add(LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+        meta.setLore(lore);\n+    }\n+\n+    static float getCharge(ItemMeta meta) {\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            Float value = meta.getPersistentDataContainer().get(CHARGE_KEY, PersistentDataType.FLOAT);\n+\n+            // If no persistent data exists, we will just fall back to the lore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6f09d2e2eef4d34c2cff586e6b477899301a1dd"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MTk1NA==", "bodyText": "Not a fan this doesn't set the meta. It will for sure lead to human error of not setting it after calling.", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446461954", "createdAt": "2020-06-27T00:38:47Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/RechargeableHelper.java", "diffHunk": "@@ -0,0 +1,77 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import java.math.BigDecimal;\n+import java.math.RoundingMode;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.meta.ItemMeta;\n+import org.bukkit.persistence.PersistentDataType;\n+\n+import io.github.thebusybiscuit.cscorelib2.chat.ChatColors;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import io.github.thebusybiscuit.slimefun4.utils.PatternUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * This is just a simple helper class to provide static methods to the {@link Rechargeable}\n+ * interface.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see Rechargeable\n+ *\n+ */\n+final class RechargeableHelper {\n+\n+    private static final NamespacedKey CHARGE_KEY = new NamespacedKey(SlimefunPlugin.instance, \"item_charge\");\n+    private static final String LORE_PREFIX = ChatColors.color(\"&c&o&8\\u21E8 &e\\u26A1 &7\");\n+\n+    private RechargeableHelper() {}\n+\n+    static void setCharge(ItemMeta meta, float charge, float capacity) {\n+        BigDecimal decimal = BigDecimal.valueOf(charge).setScale(2, RoundingMode.HALF_UP);\n+        float value = decimal.floatValue();\n+\n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_14)) {\n+            meta.getPersistentDataContainer().set(CHARGE_KEY, PersistentDataType.FLOAT, value);\n+        }\n+\n+        List<String> lore = meta.hasLore() ? meta.getLore() : new ArrayList<>();\n+        for (int i = 0; i < lore.size(); i++) {\n+            String line = lore.get(i);\n+\n+            if (line.startsWith(LORE_PREFIX)) {\n+                lore.set(i, LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+                meta.setLore(lore);\n+                return;\n+            }\n+        }\n+\n+        lore.add(LORE_PREFIX + value + \" / \" + capacity + \" J\");\n+        meta.setLore(lore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfd40e4079448db5e6d48910566084f3b7cfe14"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mjk3Ng==", "bodyText": "I'd probably check if env is end (or check the default world) and return 0 (also, could return true in nether, not sunlight but it's supposed to be a \"hell\" thing. I like to do it this way but dealers choice).\nThis will be quicker than the block initialisation which is done below.", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446462976", "createdAt": "2020-06-27T00:46:06Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -89,25 +93,28 @@ private void handleSlimefunArmor(Player p, ItemStack[] armor, HashedArmorpiece[]\n     }\n \n     private void checkForSolarHelmet(Player p) {\n-        // Temporary performance improvement\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SOLAR_HELMET, true)) {\n+        ItemStack helmet = p.getInventory().getHelmet();\n+\n+        if (SlimefunPlugin.getRegistry().isBackwardsCompatible() && !SlimefunUtils.isItemSimilar(helmet, SlimefunItems.SOLAR_HELMET, true, false)) {\n+            // Performance saver for slow backwards-compatible versions of Slimefun\n             return;\n         }\n \n-        SlimefunItem item = SlimefunItem.getByItem(p.getInventory().getHelmet());\n+        SlimefunItem item = SlimefunItem.getByItem(helmet);\n \n-        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true) && hasSunlight(p)) {\n-            ItemEnergy.chargeInventory(p, (float) ((SolarHelmet) item).getChargeAmount());\n+        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true)) {\n+            ((SolarHelmet) item).rechargeItems(p);\n         }\n     }\n \n     private boolean hasSunlight(Player p) {\n-        return (p.getWorld().getTime() < 12300 || p.getWorld().getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n+        World world = p.getWorld();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfd40e4079448db5e6d48910566084f3b7cfe14"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MzI1Mw==", "bodyText": ":LULW:", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446463253", "createdAt": "2020-06-27T00:48:05Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -89,25 +93,28 @@ private void handleSlimefunArmor(Player p, ItemStack[] armor, HashedArmorpiece[]\n     }\n \n     private void checkForSolarHelmet(Player p) {\n-        // Temporary performance improvement\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SOLAR_HELMET, true)) {\n+        ItemStack helmet = p.getInventory().getHelmet();\n+\n+        if (SlimefunPlugin.getRegistry().isBackwardsCompatible() && !SlimefunUtils.isItemSimilar(helmet, SlimefunItems.SOLAR_HELMET, true, false)) {\n+            // Performance saver for slow backwards-compatible versions of Slimefun\n             return;\n         }\n \n-        SlimefunItem item = SlimefunItem.getByItem(p.getInventory().getHelmet());\n+        SlimefunItem item = SlimefunItem.getByItem(helmet);\n \n-        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true) && hasSunlight(p)) {\n-            ItemEnergy.chargeInventory(p, (float) ((SolarHelmet) item).getChargeAmount());\n+        if (item instanceof SolarHelmet && Slimefun.hasUnlocked(p, item, true)) {\n+            ((SolarHelmet) item).rechargeItems(p);\n         }\n     }\n \n     private boolean hasSunlight(Player p) {\n-        return (p.getWorld().getTime() < 12300 || p.getWorld().getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n+        World world = p.getWorld();\n+        return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n     private void checkForRadiation(Player p) {\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) || !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) || !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) || !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n+        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0dfd40e4079448db5e6d48910566084f3b7cfe14"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2Mzk5Mg==", "bodyText": "I would also check a space. Spaces can mess up quite a bit on different systems. We've had someone in the past who downloaded a world and it messed up on the shared Linux server due to that", "url": "https://github.com/Slimefun/Slimefun4/pull/2055#discussion_r446463992", "createdAt": "2020-06-27T00:54:11Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/BlockStorage.java", "diffHunk": "@@ -97,6 +97,10 @@ private static Location deserializeLocation(String l) {\n     public BlockStorage(World w) {\n         this.world = w;\n \n+        if (world.getName().indexOf('.') != -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44c0029587805a0721655ce52149c5af0bfa5993"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "468617d9a2a81221488050c32b4986d5854269a7", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/468617d9a2a81221488050c32b4986d5854269a7", "committedDate": "2020-06-27T01:13:43Z", "message": "Changed a comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd2f4b196d6a3c265ea8945bcbd4d1ac853b4afc", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/bd2f4b196d6a3c265ea8945bcbd4d1ac853b4afc", "committedDate": "2020-06-27T01:29:10Z", "message": "Minor optimization for Solar Helmet checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d3665508175600f592be2b68de06ea3215e7fa0", "author": {"user": {"login": "TheBusyBiscuit", "name": "TheBusyBiscuit"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/6d3665508175600f592be2b68de06ea3215e7fa0", "committedDate": "2020-06-27T01:40:27Z", "message": "Another optimization for Solar Generators"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2496, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}