{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNzEwNjUx", "number": 2462, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1MToxN1rOEsubcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoxNjowMlrOE0ZUGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzMzNDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1MToxN1rOHgH9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1MToxN1rOHgH9jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NjkyNw==", "bodyText": "This should be placed right before the class declaration.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503446927", "createdAt": "2020-10-12T17:51:17Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;\n+\n+    private final Player player;\n+    private final Research research;\n+    private final PlayerProfile profile;\n+    private final SlimefunItem slimefunItem;\n+    private final Category category;\n+\n+    /**\n+     * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+     * This is called called before {@link Research#canUnlock(Player)}\n+     * The event is not called for the cheat sheet\n+     *\n+     * @author uiytt\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     *\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzMzOTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1Mjo1OVrOHgIAjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1Mjo1OVrOHgIAjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NzY5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public PreCanUnlockResearchEvent(@Nonnull Player p, @Nonnull Research research, @Nonnull PlayerProfile profile, @Nonnull SlimefunItem slimefunItem, @Nonnull Category category) {\n          \n          \n            \n                @ParametersAreNonnullByDefault\n          \n          \n            \n                public PreCanUnlockResearchEvent(Player p, Research research, PlayerProfile profile, SlimefunItem slimefunItem, Category category) {\n          \n      \n    \n    \n  \n\nMake sure to import javax.annotation.ParametersAreNonnullByDefault if doing so.\nAlso, I think it would be enough to store only the Player, Research and SlimefunItem instance in this event.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503447695", "createdAt": "2020-10-12T17:52:59Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;\n+\n+    private final Player player;\n+    private final Research research;\n+    private final PlayerProfile profile;\n+    private final SlimefunItem slimefunItem;\n+    private final Category category;\n+\n+    /**\n+     * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+     * This is called called before {@link Research#canUnlock(Player)}\n+     * The event is not called for the cheat sheet\n+     *\n+     * @author uiytt\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     *\n+     */\n+    public PreCanUnlockResearchEvent(@Nonnull Player p, @Nonnull Research research, @Nonnull PlayerProfile profile, @Nonnull SlimefunItem slimefunItem, @Nonnull Category category) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzM0NDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1NDozNlrOHgIDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1NDozNlrOHgIDOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0ODM3Ng==", "bodyText": "Please add an empty line between these methods.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503448376", "createdAt": "2020-10-12T17:54:36Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;\n+\n+    private final Player player;\n+    private final Research research;\n+    private final PlayerProfile profile;\n+    private final SlimefunItem slimefunItem;\n+    private final Category category;\n+\n+    /**\n+     * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+     * This is called called before {@link Research#canUnlock(Player)}\n+     * The event is not called for the cheat sheet\n+     *\n+     * @author uiytt\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     *\n+     */\n+    public PreCanUnlockResearchEvent(@Nonnull Player p, @Nonnull Research research, @Nonnull PlayerProfile profile, @Nonnull SlimefunItem slimefunItem, @Nonnull Category category) {\n+        Validate.notNull(p, \"The Player cannot be null\");\n+        Validate.notNull(research, \"Research cannot be null\");\n+        Validate.notNull(profile, \"PlayerProfile cannot be null\");\n+        Validate.notNull(slimefunItem, \"SlimefunItem cannot be null\");\n+        Validate.notNull(category, \"Category cannot be null\");\n+\n+        this.player = p;\n+        this.research = research;\n+        this.profile = profile;\n+        this.slimefunItem = slimefunItem;\n+        this.category = category;\n+    }\n+\n+    @Nonnull\n+    public Player getPlayer() {\n+        return this.player;\n+    }\n+    @Nonnull\n+    public Research getResearch() {\n+        return this.research;\n+    }\n+    @Nonnull\n+    public PlayerProfile getProfile() {\n+        return this.profile;\n+    }\n+    @Nonnull\n+    public SlimefunItem getSlimefunItem() {\n+        return this.slimefunItem;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzM0NDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1NDo0OVrOHgIDlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1NDo0OVrOHgIDlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0ODQ3MQ==", "bodyText": "Remove this empty line.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503448471", "createdAt": "2020-10-12T17:54:49Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;\n+\n+    private final Player player;\n+    private final Research research;\n+    private final PlayerProfile profile;\n+    private final SlimefunItem slimefunItem;\n+    private final Category category;\n+\n+    /**\n+     * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+     * This is called called before {@link Research#canUnlock(Player)}\n+     * The event is not called for the cheat sheet\n+     *\n+     * @author uiytt\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     *\n+     */\n+    public PreCanUnlockResearchEvent(@Nonnull Player p, @Nonnull Research research, @Nonnull PlayerProfile profile, @Nonnull SlimefunItem slimefunItem, @Nonnull Category category) {\n+        Validate.notNull(p, \"The Player cannot be null\");\n+        Validate.notNull(research, \"Research cannot be null\");\n+        Validate.notNull(profile, \"PlayerProfile cannot be null\");\n+        Validate.notNull(slimefunItem, \"SlimefunItem cannot be null\");\n+        Validate.notNull(category, \"Category cannot be null\");\n+\n+        this.player = p;\n+        this.research = research;\n+        this.profile = profile;\n+        this.slimefunItem = slimefunItem;\n+        this.category = category;\n+    }\n+\n+    @Nonnull\n+    public Player getPlayer() {\n+        return this.player;\n+    }\n+    @Nonnull\n+    public Research getResearch() {\n+        return this.research;\n+    }\n+    @Nonnull\n+    public PlayerProfile getProfile() {\n+        return this.profile;\n+    }\n+    @Nonnull\n+    public SlimefunItem getSlimefunItem() {\n+        return this.slimefunItem;\n+    }\n+    @Nonnull\n+    public Category getCategory() {\n+        return this.category;\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzM1NDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1ODowMlrOHgIJZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo1ODowMlrOHgIJZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0OTk1OA==", "bodyText": "Formatting\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,item,category);\n          \n          \n            \n                                Bukkit.getPluginManager().callEvent(event);\n          \n          \n            \n                                if(!event.isCancelled()) {\n          \n          \n            \n                                PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p, research, profile, item, category);\n          \n          \n            \n                                Bukkit.getPluginManager().callEvent(event);\n          \n          \n            \n                                if (!event.isCancelled()) {", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503449958", "createdAt": "2020-10-12T17:58:02Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "diffHunk": "@@ -237,15 +239,20 @@ private void addSlimefunItem(Category category, int page, Player p, PlayerProfil\n     private void research(Player p, PlayerProfile profile, SlimefunItem item, Research research, Category category, int page) {\n         SlimefunPlugin.runSync(() -> {\n             if (!SlimefunPlugin.getRegistry().getCurrentlyResearchingPlayers().contains(p.getUniqueId())) {\n-                if (research.canUnlock(p)) {\n-                    if (profile.hasUnlocked(research)) {\n-                        openCategory(profile, category, page);\n-                    } else {\n-                        unlockItem(p, item, pl -> openCategory(profile, category, page));\n-                    }\n+                if (profile.hasUnlocked(research)) {\n+                    openCategory(profile, category, page);\n                 } else {\n-                    SlimefunPlugin.getLocalization().sendMessage(p, \"messages.not-enough-xp\", true);\n+                    PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,item,category);\n+                    Bukkit.getPluginManager().callEvent(event);\n+                    if(!event.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzM5NjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/ChestSlimefunGuide.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODowOTo0NVrOHgIiSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODowOTo0NVrOHgIiSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NjMzMA==", "bodyText": "Formatting\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,sfitem,category);\n          \n          \n            \n                                    Bukkit.getPluginManager().callEvent(event);\n          \n          \n            \n                                    if(!event.isCancelled()) {\n          \n          \n            \n                                    PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p, research, profile, sfitem, category);\n          \n          \n            \n                                    Bukkit.getPluginManager().callEvent(event);\n          \n          \n            \n                                    if (!event.isCancelled()) {", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503456330", "createdAt": "2020-10-12T18:09:45Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/ChestSlimefunGuide.java", "diffHunk": "@@ -284,15 +286,20 @@ private void displaySlimefunItem(ChestMenu menu, Category category, Player p, Pl\n             menu.addItem(index, new CustomItem(Material.BARRIER, ChatColor.WHITE + ItemUtils.getItemName(sfitem.getItem()), \"&4&l\" + SlimefunPlugin.getLocalization().getMessage(p, \"guide.locked\"), \"\", \"&a> Click to unlock\", \"\", \"&7Cost: &b\" + research.getCost() + \" Level(s)\"));\n             menu.addMenuClickHandler(index, (pl, slot, item, action) -> {\n                 if (!SlimefunPlugin.getRegistry().getCurrentlyResearchingPlayers().contains(pl.getUniqueId())) {\n-                    if (research.canUnlock(pl)) {\n-                        if (profile.hasUnlocked(research)) {\n-                            openCategory(profile, category, page);\n-                        } else {\n-                            unlockItem(pl, sfitem, player -> openCategory(profile, category, page));\n-                        }\n+                    if (profile.hasUnlocked(research)) {\n+                        openCategory(profile, category, page);\n                     } else {\n-                        SlimefunPlugin.getLocalization().sendMessage(pl, \"messages.not-enough-xp\", true);\n+                        PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,sfitem,category);\n+                        Bukkit.getPluginManager().callEvent(event);\n+                        if(!event.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQwNDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/ChestSlimefunGuide.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxMjowOFrOHgInWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxMjowOFrOHgInWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NzYyNQ==", "bodyText": "There could be an empty line before this statement.\n                        PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p, research, profile, sfitem, category);\n                        Bukkit.getPluginManager().callEvent(event);\n                        \n                        if (!event.isCancelled()) {", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503457625", "createdAt": "2020-10-12T18:12:08Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/ChestSlimefunGuide.java", "diffHunk": "@@ -284,15 +286,20 @@ private void displaySlimefunItem(ChestMenu menu, Category category, Player p, Pl\n             menu.addItem(index, new CustomItem(Material.BARRIER, ChatColor.WHITE + ItemUtils.getItemName(sfitem.getItem()), \"&4&l\" + SlimefunPlugin.getLocalization().getMessage(p, \"guide.locked\"), \"\", \"&a> Click to unlock\", \"\", \"&7Cost: &b\" + research.getCost() + \" Level(s)\"));\n             menu.addMenuClickHandler(index, (pl, slot, item, action) -> {\n                 if (!SlimefunPlugin.getRegistry().getCurrentlyResearchingPlayers().contains(pl.getUniqueId())) {\n-                    if (research.canUnlock(pl)) {\n-                        if (profile.hasUnlocked(research)) {\n-                            openCategory(profile, category, page);\n-                        } else {\n-                            unlockItem(pl, sfitem, player -> openCategory(profile, category, page));\n-                        }\n+                    if (profile.hasUnlocked(research)) {\n+                        openCategory(profile, category, page);\n                     } else {\n-                        SlimefunPlugin.getLocalization().sendMessage(pl, \"messages.not-enough-xp\", true);\n+                        PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,sfitem,category);\n+                        Bukkit.getPluginManager().callEvent(event);\n+                        if(!event.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQwNzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxMjozNVrOHgIpEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxMjozNVrOHgIpEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1ODA2NQ==", "bodyText": "There could be an empty line before this statement.\n                        PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p, research, profile, sfitem, category);\n                        Bukkit.getPluginManager().callEvent(event);\n                        \n                        if (!event.isCancelled()) {", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503458065", "createdAt": "2020-10-12T18:12:35Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "diffHunk": "@@ -237,15 +239,20 @@ private void addSlimefunItem(Category category, int page, Player p, PlayerProfil\n     private void research(Player p, PlayerProfile profile, SlimefunItem item, Research research, Category category, int page) {\n         SlimefunPlugin.runSync(() -> {\n             if (!SlimefunPlugin.getRegistry().getCurrentlyResearchingPlayers().contains(p.getUniqueId())) {\n-                if (research.canUnlock(p)) {\n-                    if (profile.hasUnlocked(research)) {\n-                        openCategory(profile, category, page);\n-                    } else {\n-                        unlockItem(p, item, pl -> openCategory(profile, category, page));\n-                    }\n+                if (profile.hasUnlocked(research)) {\n+                    openCategory(profile, category, page);\n                 } else {\n-                    SlimefunPlugin.getLocalization().sendMessage(p, \"messages.not-enough-xp\", true);\n+                    PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,item,category);\n+                    Bukkit.getPluginManager().callEvent(event);\n+                    if(!event.isCancelled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQzMzM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyMDozOVrOHgI5Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoyMDozOVrOHgI5Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2MjE1OQ==", "bodyText": "No need to initialize this variable. Also, could be moved right below the category variable.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503462159", "createdAt": "2020-10-12T18:20:39Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQ2NjQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozMjo0M1rOHgJNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyMjozMVrOHgMFfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NzI2OQ==", "bodyText": "No need to use this. in these methods.\nCould also add some javadocs to these methods.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503467269", "createdAt": "2020-10-12T18:32:43Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;\n+\n+    private final Player player;\n+    private final Research research;\n+    private final PlayerProfile profile;\n+    private final SlimefunItem slimefunItem;\n+    private final Category category;\n+\n+    /**\n+     * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+     * This is called called before {@link Research#canUnlock(Player)}\n+     * The event is not called for the cheat sheet\n+     *\n+     * @author uiytt\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     *\n+     */\n+    public PreCanUnlockResearchEvent(@Nonnull Player p, @Nonnull Research research, @Nonnull PlayerProfile profile, @Nonnull SlimefunItem slimefunItem, @Nonnull Category category) {\n+        Validate.notNull(p, \"The Player cannot be null\");\n+        Validate.notNull(research, \"Research cannot be null\");\n+        Validate.notNull(profile, \"PlayerProfile cannot be null\");\n+        Validate.notNull(slimefunItem, \"SlimefunItem cannot be null\");\n+        Validate.notNull(category, \"Category cannot be null\");\n+\n+        this.player = p;\n+        this.research = research;\n+        this.profile = profile;\n+        this.slimefunItem = slimefunItem;\n+        this.category = category;\n+    }\n+\n+    @Nonnull\n+    public Player getPlayer() {\n+        return this.player;\n+    }\n+    @Nonnull\n+    public Research getResearch() {\n+        return this.research;\n+    }\n+    @Nonnull\n+    public PlayerProfile getProfile() {\n+        return this.profile;\n+    }\n+    @Nonnull\n+    public SlimefunItem getSlimefunItem() {\n+        return this.slimefunItem;\n+    }\n+    @Nonnull\n+    public Category getCategory() {\n+        return this.category;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMjUzMg==", "bodyText": "I really don't think this need javadocs, I can if you really want but  I think this is really quite explanatory by itself.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503512532", "createdAt": "2020-10-12T20:17:36Z", "author": {"login": "uiytt"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;\n+\n+    private final Player player;\n+    private final Research research;\n+    private final PlayerProfile profile;\n+    private final SlimefunItem slimefunItem;\n+    private final Category category;\n+\n+    /**\n+     * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+     * This is called called before {@link Research#canUnlock(Player)}\n+     * The event is not called for the cheat sheet\n+     *\n+     * @author uiytt\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     *\n+     */\n+    public PreCanUnlockResearchEvent(@Nonnull Player p, @Nonnull Research research, @Nonnull PlayerProfile profile, @Nonnull SlimefunItem slimefunItem, @Nonnull Category category) {\n+        Validate.notNull(p, \"The Player cannot be null\");\n+        Validate.notNull(research, \"Research cannot be null\");\n+        Validate.notNull(profile, \"PlayerProfile cannot be null\");\n+        Validate.notNull(slimefunItem, \"SlimefunItem cannot be null\");\n+        Validate.notNull(category, \"Category cannot be null\");\n+\n+        this.player = p;\n+        this.research = research;\n+        this.profile = profile;\n+        this.slimefunItem = slimefunItem;\n+        this.category = category;\n+    }\n+\n+    @Nonnull\n+    public Player getPlayer() {\n+        return this.player;\n+    }\n+    @Nonnull\n+    public Research getResearch() {\n+        return this.research;\n+    }\n+    @Nonnull\n+    public PlayerProfile getProfile() {\n+        return this.profile;\n+    }\n+    @Nonnull\n+    public SlimefunItem getSlimefunItem() {\n+        return this.slimefunItem;\n+    }\n+    @Nonnull\n+    public Category getCategory() {\n+        return this.category;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NzI2OQ=="}, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNDQ5NQ==", "bodyText": "Fair enough.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503514495", "createdAt": "2020-10-12T20:22:31Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+    private boolean cancelled = false;\n+\n+    private final Player player;\n+    private final Research research;\n+    private final PlayerProfile profile;\n+    private final SlimefunItem slimefunItem;\n+    private final Category category;\n+\n+    /**\n+     * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+     * This is called called before {@link Research#canUnlock(Player)}\n+     * The event is not called for the cheat sheet\n+     *\n+     * @author uiytt\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     *\n+     */\n+    public PreCanUnlockResearchEvent(@Nonnull Player p, @Nonnull Research research, @Nonnull PlayerProfile profile, @Nonnull SlimefunItem slimefunItem, @Nonnull Category category) {\n+        Validate.notNull(p, \"The Player cannot be null\");\n+        Validate.notNull(research, \"Research cannot be null\");\n+        Validate.notNull(profile, \"PlayerProfile cannot be null\");\n+        Validate.notNull(slimefunItem, \"SlimefunItem cannot be null\");\n+        Validate.notNull(category, \"Category cannot be null\");\n+\n+        this.player = p;\n+        this.research = research;\n+        this.profile = profile;\n+        this.slimefunItem = slimefunItem;\n+        this.category = category;\n+    }\n+\n+    @Nonnull\n+    public Player getPlayer() {\n+        return this.player;\n+    }\n+    @Nonnull\n+    public Research getResearch() {\n+        return this.research;\n+    }\n+    @Nonnull\n+    public PlayerProfile getProfile() {\n+        return this.profile;\n+    }\n+    @Nonnull\n+    public SlimefunItem getSlimefunItem() {\n+        return this.slimefunItem;\n+    }\n+    @Nonnull\n+    public Category getCategory() {\n+        return this.category;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2NzI2OQ=="}, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQ4MzU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozODozOFrOHgJW4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozODozOFrOHgJW4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2OTc5NA==", "bodyText": "Remove this empty line.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503469794", "createdAt": "2020-10-12T18:38:38Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "diffHunk": "@@ -237,15 +239,20 @@ private void addSlimefunItem(Category category, int page, Player p, PlayerProfil\n     private void research(Player p, PlayerProfile profile, SlimefunItem item, Research research, Category category, int page) {\n         SlimefunPlugin.runSync(() -> {\n             if (!SlimefunPlugin.getRegistry().getCurrentlyResearchingPlayers().contains(p.getUniqueId())) {\n-                if (research.canUnlock(p)) {\n-                    if (profile.hasUnlocked(research)) {\n-                        openCategory(profile, category, page);\n-                    } else {\n-                        unlockItem(p, item, pl -> openCategory(profile, category, page));\n-                    }\n+                if (profile.hasUnlocked(research)) {\n+                    openCategory(profile, category, page);\n                 } else {\n-                    SlimefunPlugin.getLocalization().sendMessage(p, \"messages.not-enough-xp\", true);\n+                    PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,item,category);\n+                    Bukkit.getPluginManager().callEvent(event);\n+                    if(!event.isCancelled()) {\n+                        if (research.canUnlock(p)) {\n+                            unlockItem(p, item, pl -> openCategory(profile, category, page));\n+                        } else {\n+                            SlimefunPlugin.getLocalization().sendMessage(p, \"messages.not-enough-xp\", true);\n+                        }\n+                    }\n                 }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzQ4Mzc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/ChestSlimefunGuide.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozODo0MlrOHgJW_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODozODo0MlrOHgJW_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2OTgyMg==", "bodyText": "Remove this empty line.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r503469822", "createdAt": "2020-10-12T18:38:42Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/ChestSlimefunGuide.java", "diffHunk": "@@ -284,15 +286,20 @@ private void displaySlimefunItem(ChestMenu menu, Category category, Player p, Pl\n             menu.addItem(index, new CustomItem(Material.BARRIER, ChatColor.WHITE + ItemUtils.getItemName(sfitem.getItem()), \"&4&l\" + SlimefunPlugin.getLocalization().getMessage(p, \"guide.locked\"), \"\", \"&a> Click to unlock\", \"\", \"&7Cost: &b\" + research.getCost() + \" Level(s)\"));\n             menu.addMenuClickHandler(index, (pl, slot, item, action) -> {\n                 if (!SlimefunPlugin.getRegistry().getCurrentlyResearchingPlayers().contains(pl.getUniqueId())) {\n-                    if (research.canUnlock(pl)) {\n-                        if (profile.hasUnlocked(research)) {\n-                            openCategory(profile, category, page);\n-                        } else {\n-                            unlockItem(pl, sfitem, player -> openCategory(profile, category, page));\n-                        }\n+                    if (profile.hasUnlocked(research)) {\n+                        openCategory(profile, category, page);\n                     } else {\n-                        SlimefunPlugin.getLocalization().sendMessage(pl, \"messages.not-enough-xp\", true);\n+                        PreCanUnlockResearchEvent event = new PreCanUnlockResearchEvent(p,research,profile,sfitem,category);\n+                        Bukkit.getPluginManager().callEvent(event);\n+                        if(!event.isCancelled()) {\n+                            if (research.canUnlock(pl)) {\n+                                unlockItem(pl, sfitem, player -> openCategory(profile, category, page));\n+                            } else {\n+                                SlimefunPlugin.getLocalization().sendMessage(pl, \"messages.not-enough-xp\", true);\n+                            }\n+                        }\n                     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ded6d1ac410484d8c671d0094f736c6eeaa3037"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDYxNzcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDozMjowNFrOHhMpaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTo0MDoyOFrOHiOJSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n          \n          \n            \n             * This is called called before {@link Research#canUnlock(Player)}\n          \n          \n            \n             * This {@link Event} is called whenever a {@link Player} clicks to unlock a research.\n          \n          \n            \n             * This is called before {@link Research#canUnlock(Player)}.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r504572267", "createdAt": "2020-10-14T10:32:04Z", "author": {"login": "svr333"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+ * This is called called before {@link Research#canUnlock(Player)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "916d2bf4ba807a95e7b66af45128a8d2eb3a95de"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU5MzA5Mw==", "bodyText": "Will fix the typo\nAs for the same code; yes I will add a method in research like Research#clickInteraction(SlimefunGuideImplementation,Player,Item)\n(Looking for a better name)", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r504593093", "createdAt": "2020-10-14T11:10:34Z", "author": {"login": "uiytt"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+ * This is called called before {@link Research#canUnlock(Player)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjI2Nw=="}, "originalCommit": {"oid": "916d2bf4ba807a95e7b66af45128a8d2eb3a95de"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NTM4NA==", "bodyText": "Fixed typo and created : guideClickInteraction method in research", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r505645384", "createdAt": "2020-10-15T15:40:28Z", "author": {"login": "uiytt"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} click to unlock a research.\n+ * This is called called before {@link Research#canUnlock(Player)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjI2Nw=="}, "originalCommit": {"oid": "916d2bf4ba807a95e7b66af45128a8d2eb3a95de"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTQ3NTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1NDozNlrOHk95xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzo1NDozNlrOHk95xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUyNDk5OA==", "bodyText": "I'd rather put @author uiytt to a new line below Cookie's in the javadoc of the constructor.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r508524998", "createdAt": "2020-10-20T13:54:36Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "diffHunk": "@@ -189,6 +195,42 @@ public Research addItems(ItemStack... items) {\n         return items;\n     }\n \n+    /**\n+     * Handle what to do when a {@link Player} clicks on an un-researched item in\n+     * a {@link SlimefunGuideImplementation}.\n+     *\n+     * @author TheBusyBiscuit, uiytt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a18c3089092aeeefc65521198c4695266b703f8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTU3NjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoxMDoyNlrOHk-6Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDoxMDoyNlrOHk-6Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU0MTUxOA==", "bodyText": "Remove this empty line please :(((", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r508541518", "createdAt": "2020-10-20T14:10:26Z", "author": {"login": "poma123"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} clicks to unlock a research.\n+ * This is called before {@link Research#canUnlock(Player)}.\n+ * The event is not called for the cheat sheet.\n+ *\n+ * @author uiytt\n+ *\n+ * @see ChestSlimefunGuide\n+ * @see BookSlimefunGuide\n+ *\n+ */\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private final Player player;\n+    private final Research research;\n+    private final SlimefunItem slimefunItem;\n+\n+    private boolean cancelled;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a18c3089092aeeefc65521198c4695266b703f8"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTcwNzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNTowNlrOHlAO4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNTowNlrOHlAO4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2MzE2OQ==", "bodyText": "should this not be on top", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r508563169", "createdAt": "2020-10-20T14:35:06Z", "author": {"login": "J3fftw1"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a18c3089092aeeefc65521198c4695266b703f8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTcwODYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNToxN1rOHlAPfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNToxN1rOHlAPfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2MzMyNQ==", "bodyText": "then this", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r508563325", "createdAt": "2020-10-20T14:35:17Z", "author": {"login": "J3fftw1"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a18c3089092aeeefc65521198c4695266b703f8"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTcwOTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNToyN1rOHlAQCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNToyN1rOHlAQCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2MzQ2Ng==", "bodyText": "third this", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r508563466", "createdAt": "2020-10-20T14:35:27Z", "author": {"login": "J3fftw1"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import org.apache.commons.lang.Validate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a18c3089092aeeefc65521198c4695266b703f8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTcxMTQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDozNTo1M1rOHlARWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowNzo0MFrOHmjm8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2MzgwMQ==", "bodyText": "this as last", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r508563801", "createdAt": "2020-10-20T14:35:53Z", "author": {"login": "J3fftw1"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a18c3089092aeeefc65521198c4695266b703f8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MTM0Nw==", "bodyText": "I think I've done what you wanted (not sure), although I'm not convinced of the utility of sorting imports...", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510191347", "createdAt": "2020-10-22T14:07:40Z", "author": {"login": "uiytt"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODU2MzgwMQ=="}, "originalCommit": {"oid": "0a18c3089092aeeefc65521198c4695266b703f8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkwOTA1OnYy", "diffSide": "RIGHT", "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/researches/TestResearches.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDowOToxNlrOHmjr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyMDozOVrOHnScdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MjYzNg==", "bodyText": "Formatting.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    research.guideClickInteraction(guide,player,profile,sfItem,sfItem.getCategory(),0);\n          \n          \n            \n                    research.guideClickInteraction(guide, player, profile, sfItem, sfItem.getCategory(), 0);", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510192636", "createdAt": "2020-10-22T14:09:16Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/researches/TestResearches.java", "diffHunk": "@@ -182,4 +187,29 @@ void testUnlockableResearch() {\n         Assertions.assertTrue(research.canUnlock(player));\n     }\n \n+    @Test\n+    @DisplayName(\"Test PreCanUnlockResearchEvent\")\n+    void testPreCanUnlockResearchEvent() throws InterruptedException {\n+        SlimefunPlugin.getRegistry().setResearchingEnabled(true);\n+\n+        NamespacedKey key = new NamespacedKey(plugin, \"simple_research\");\n+        Research research = new Research(key, 250, \"Test\", 10);\n+        research.register();\n+\n+        SlimefunGuideImplementation guide = Mockito.mock(SlimefunGuideImplementation.class);\n+        Player player = server.addPlayer();\n+        PlayerProfile profile = TestUtilities.awaitProfile(player);\n+        SlimefunItem sfItem = TestUtilities.mockSlimefunItem(plugin, \"RESEARCH_TEST\", new CustomItem(Material.TORCH, \"&bResearch Test\"));\n+\n+        research.guideClickInteraction(guide,player,profile,sfItem,sfItem.getCategory(),0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1ODcwOA==", "bodyText": "Yeah, I should have seen that", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510958708", "createdAt": "2020-10-23T15:20:39Z", "author": {"login": "uiytt"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/researches/TestResearches.java", "diffHunk": "@@ -182,4 +187,29 @@ void testUnlockableResearch() {\n         Assertions.assertTrue(research.canUnlock(player));\n     }\n \n+    @Test\n+    @DisplayName(\"Test PreCanUnlockResearchEvent\")\n+    void testPreCanUnlockResearchEvent() throws InterruptedException {\n+        SlimefunPlugin.getRegistry().setResearchingEnabled(true);\n+\n+        NamespacedKey key = new NamespacedKey(plugin, \"simple_research\");\n+        Research research = new Research(key, 250, \"Test\", 10);\n+        research.register();\n+\n+        SlimefunGuideImplementation guide = Mockito.mock(SlimefunGuideImplementation.class);\n+        Player player = server.addPlayer();\n+        PlayerProfile profile = TestUtilities.awaitProfile(player);\n+        SlimefunItem sfItem = TestUtilities.mockSlimefunItem(plugin, \"RESEARCH_TEST\", new CustomItem(Material.TORCH, \"&bResearch Test\"));\n+\n+        research.guideClickInteraction(guide,player,profile,sfItem,sfItem.getCategory(),0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MjYzNg=="}, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkxNTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMDozNFrOHmjwHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMDozNFrOHmjwHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5MzY5Mw==", "bodyText": "Having brackets on a one-liner would be redundant.\nAlso why don't you just do runSync() inside your interaction method?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                SlimefunPlugin.runSync(() -> {\n          \n          \n            \n                                    research.guideClickInteraction(this, player, profile, item, category, page);\n          \n          \n            \n                                })\n          \n          \n            \n                                SlimefunPlugin.runSync(() -> \n          \n          \n            \n                                    research.guideClickInteraction(this, player, profile, item, category, page);\n          \n          \n            \n                                )", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510193693", "createdAt": "2020-10-22T14:10:34Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/guide/BookSlimefunGuide.java", "diffHunk": "@@ -215,7 +217,11 @@ private void addSlimefunItem(Category category, int page, Player p, PlayerProfil\n \n             ChatComponent component = new ChatComponent(ChatUtils.crop(ChatColor.RED, item.getItemName()) + \"\\n\");\n             component.setHoverEvent(new HoverEvent(ChatColor.RESET + item.getItemName(), ChatColor.DARK_RED.toString() + ChatColor.BOLD + SlimefunPlugin.getLocalization().getMessage(p, \"guide.locked\"), \"\", ChatColor.GREEN + \"> Click to unlock\", \"\", ChatColor.GRAY + \"Cost: \" + ChatColor.AQUA.toString() + research.getCost() + \" Level(s)\"));\n-            component.setClickEvent(new ClickEvent(key, player -> research(player, profile, item, research, category, page)));\n+            component.setClickEvent(new ClickEvent(key, player ->\n+                    SlimefunPlugin.runSync(() -> {\n+                        research.guideClickInteraction(this, player, profile, item, category, page);\n+                    })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkyMDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMTozNlrOHmjzbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyMjo0MVrOHnShcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NDU0Mw==", "bodyText": "This method name is absolutely horrible...\nPlease choose a better name, like onPlayerResearch or unlockFromGuide. But not this :NotLikeThis:", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510194543", "createdAt": "2020-10-22T14:11:36Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "diffHunk": "@@ -189,6 +195,43 @@ public Research addItems(ItemStack... items) {\n         return items;\n     }\n \n+    /**\n+     * Handle what to do when a {@link Player} clicks on an un-researched item in\n+     * a {@link SlimefunGuideImplementation}.\n+     *\n+     * @author TheBusyBiscuit\n+     * @author uiytt\n+     *\n+     * @param guide The {@link SlimefunGuideImplementation} used.\n+     * @param player The {@link Player} who clicked on the item.\n+     * @param profile The {@link PlayerProfile} of that {@link Player}.\n+     * @param sfItem The {@link SlimefunItem} on which the {@link Player} clicked.\n+     * @param category The {@link Category} where the {@link Player} was.\n+     * @param page The page number of where the {@link Player} was in the {@link Category};\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     */\n+    @ParametersAreNonnullByDefault\n+    public void guideClickInteraction(SlimefunGuideImplementation guide, Player player, PlayerProfile profile, SlimefunItem sfItem, Category category, int page) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk1OTk4Nw==", "bodyText": "I didn't know how to name it \ud83d\ude2d I asked on the discord several time but nobody answered :(\nAnyway, will change this", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510959987", "createdAt": "2020-10-23T15:22:41Z", "author": {"login": "uiytt"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "diffHunk": "@@ -189,6 +195,43 @@ public Research addItems(ItemStack... items) {\n         return items;\n     }\n \n+    /**\n+     * Handle what to do when a {@link Player} clicks on an un-researched item in\n+     * a {@link SlimefunGuideImplementation}.\n+     *\n+     * @author TheBusyBiscuit\n+     * @author uiytt\n+     *\n+     * @param guide The {@link SlimefunGuideImplementation} used.\n+     * @param player The {@link Player} who clicked on the item.\n+     * @param profile The {@link PlayerProfile} of that {@link Player}.\n+     * @param sfItem The {@link SlimefunItem} on which the {@link Player} clicked.\n+     * @param category The {@link Category} where the {@link Player} was.\n+     * @param page The page number of where the {@link Player} was in the {@link Category};\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide\n+     */\n+    @ParametersAreNonnullByDefault\n+    public void guideClickInteraction(SlimefunGuideImplementation guide, Player player, PlayerProfile profile, SlimefunItem sfItem, Category category, int page) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NDU0Mw=="}, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkyMjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMTo1MlrOHmj0PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyODoyNlrOHnS1AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NDc0OQ==", "bodyText": "No see tags on methods please.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510194749", "createdAt": "2020-10-22T14:11:52Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "diffHunk": "@@ -189,6 +195,43 @@ public Research addItems(ItemStack... items) {\n         return items;\n     }\n \n+    /**\n+     * Handle what to do when a {@link Player} clicks on an un-researched item in\n+     * a {@link SlimefunGuideImplementation}.\n+     *\n+     * @author TheBusyBiscuit\n+     * @author uiytt\n+     *\n+     * @param guide The {@link SlimefunGuideImplementation} used.\n+     * @param player The {@link Player} who clicked on the item.\n+     * @param profile The {@link PlayerProfile} of that {@link Player}.\n+     * @param sfItem The {@link SlimefunItem} on which the {@link Player} clicked.\n+     * @param category The {@link Category} where the {@link Player} was.\n+     * @param page The page number of where the {@link Player} was in the {@link Category};\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2NDk5Mw==", "bodyText": "Why ? but ok will remove this", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510964993", "createdAt": "2020-10-23T15:28:26Z", "author": {"login": "uiytt"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "diffHunk": "@@ -189,6 +195,43 @@ public Research addItems(ItemStack... items) {\n         return items;\n     }\n \n+    /**\n+     * Handle what to do when a {@link Player} clicks on an un-researched item in\n+     * a {@link SlimefunGuideImplementation}.\n+     *\n+     * @author TheBusyBiscuit\n+     * @author uiytt\n+     *\n+     * @param guide The {@link SlimefunGuideImplementation} used.\n+     * @param player The {@link Player} who clicked on the item.\n+     * @param profile The {@link PlayerProfile} of that {@link Player}.\n+     * @param sfItem The {@link SlimefunItem} on which the {@link Player} clicked.\n+     * @param category The {@link Category} where the {@link Player} was.\n+     * @param page The page number of where the {@link Player} was in the {@link Category};\n+     *\n+     * @see ChestSlimefunGuide\n+     * @see BookSlimefunGuide", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NDc0OQ=="}, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkyMjc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMjowMFrOHmj0pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMjowMFrOHmj0pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NDg1Mg==", "bodyText": "No author tags on methods please.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510194852", "createdAt": "2020-10-22T14:12:00Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/researching/Research.java", "diffHunk": "@@ -189,6 +195,43 @@ public Research addItems(ItemStack... items) {\n         return items;\n     }\n \n+    /**\n+     * Handle what to do when a {@link Player} clicks on an un-researched item in\n+     * a {@link SlimefunGuideImplementation}.\n+     *\n+     * @author TheBusyBiscuit\n+     * @author uiytt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkyNzA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMjo1OFrOHmj3fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNToyNTo1NVrOHnSqoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NTU4MQ==", "bodyText": "This class name doesn't really follow any conventions here...\nPerhaps just  PlayerPreResearchEvent?", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510195581", "createdAt": "2020-10-22T14:12:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.apache.commons.lang.Validate;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} clicks to unlock a research.\n+ * This is called before {@link Research#canUnlock(Player)}.\n+ * The event is not called for the cheat sheet.\n+ *\n+ * @author uiytt\n+ *\n+ * @see ChestSlimefunGuide\n+ * @see BookSlimefunGuide\n+ *\n+ */\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk2MjMzNw==", "bodyText": "Thanks,  I'm terrible at naming things", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510962337", "createdAt": "2020-10-23T15:25:55Z", "author": {"login": "uiytt"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.apache.commons.lang.Validate;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} clicks to unlock a research.\n+ * This is called before {@link Research#canUnlock(Player)}.\n+ * The event is not called for the cheat sheet.\n+ *\n+ * @author uiytt\n+ *\n+ * @see ChestSlimefunGuide\n+ * @see BookSlimefunGuide\n+ *\n+ */\n+public class PreCanUnlockResearchEvent extends Event implements Cancellable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NTU4MQ=="}, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkyODg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMzoxNlrOHmj4gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMzoxNlrOHmj4gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NTg0MA==", "bodyText": "Event could be a link \ud83d\udc40", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510195840", "createdAt": "2020-10-22T14:13:16Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.apache.commons.lang.Validate;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} clicks to unlock a research.\n+ * This is called before {@link Research#canUnlock(Player)}.\n+ * The event is not called for the cheat sheet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkyOTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMzoyOVrOHmj5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMzoyOVrOHmj5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NjAxOA==", "bodyText": "You could also link to the Cheet Sheet class here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510196018", "createdAt": "2020-10-22T14:13:29Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.apache.commons.lang.Validate;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} clicks to unlock a research.\n+ * This is called before {@link Research#canUnlock(Player)}.\n+ * The event is not called for the cheat sheet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NTkzMDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMzo0MFrOHmj5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNDoxMzo0MFrOHmj5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE5NjEyMA==", "bodyText": "Research could be a link too", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r510196120", "createdAt": "2020-10-22T14:13:40Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PreCanUnlockResearchEvent.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.apache.commons.lang.Validate;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} clicks to unlock a research.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95a2dc08d46c9e7d8d9b961da8887df075b5adfc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzc2MDA1OnYy", "diffSide": "RIGHT", "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/researches/TestResearches.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoxNTo0MFrOHsGHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoxNTo0MFrOHsGHoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5OTY0OA==", "bodyText": "Missing space\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Assertions.assertEquals(sfItem,event.getSlimefunItem());\n          \n          \n            \n                        Assertions.assertEquals(sfItem, event.getSlimefunItem());", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r515999648", "createdAt": "2020-11-02T14:15:40Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/test/java/io/github/thebusybiscuit/slimefun4/testing/tests/researches/TestResearches.java", "diffHunk": "@@ -182,4 +186,29 @@ void testUnlockableResearch() {\n         Assertions.assertTrue(research.canUnlock(player));\n     }\n \n+    @Test\n+    @DisplayName(\"Test PlayerPreResearchEvent\")\n+    void testPreCanUnlockResearchEvent() throws InterruptedException {\n+        SlimefunPlugin.getRegistry().setResearchingEnabled(true);\n+\n+        NamespacedKey key = new NamespacedKey(plugin, \"simple_research\");\n+        Research research = new Research(key, 250, \"Test\", 10);\n+        research.register();\n+\n+        SlimefunGuideImplementation guide = Mockito.mock(SlimefunGuideImplementation.class);\n+        Player player = server.addPlayer();\n+        PlayerProfile profile = TestUtilities.awaitProfile(player);\n+        SlimefunItem sfItem = TestUtilities.mockSlimefunItem(plugin, \"RESEARCH_TEST\", new CustomItem(Material.TORCH, \"&bResearch Test\"));\n+\n+        research.unlockFromGuide(guide, player, profile, sfItem, sfItem.getCategory(), 0);\n+\n+        server.getPluginManager().assertEventFired(PlayerPreResearchEvent.class, event -> {\n+            Assertions.assertEquals(player, event.getPlayer());\n+            Assertions.assertEquals(research, event.getResearch());\n+            Assertions.assertEquals(sfItem,event.getSlimefunItem());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13694c063a60806e3be0eba3f05f656373cc7b2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzc2MTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PlayerPreResearchEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoxNjowMlrOHsGIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDoxNjowMlrOHsGIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTk5OTg4MQ==", "bodyText": "One of these empty lines is enough.", "url": "https://github.com/Slimefun/Slimefun4/pull/2462#discussion_r515999881", "createdAt": "2020-11-02T14:16:02Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/events/PlayerPreResearchEvent.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package io.github.thebusybiscuit.slimefun4.api.events;\n+\n+import javax.annotation.Nonnull;\n+import javax.annotation.ParametersAreNonnullByDefault;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.Cancellable;\n+import org.bukkit.event.Event;\n+import org.bukkit.event.HandlerList;\n+import org.apache.commons.lang.Validate;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import io.github.thebusybiscuit.slimefun4.core.researching.Research;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.BookSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.ChestSlimefunGuide;\n+import io.github.thebusybiscuit.slimefun4.implementation.guide.CheatSheetSlimefunGuide;\n+\n+/**\n+ * This {@link Event} is called whenever a {@link Player} clicks to unlock a {@link Research}.\n+ * This is called before {@link Research#canUnlock(Player)}.\n+ * The {@link Event} is not called for {@link CheatSheetSlimefunGuide}.\n+ *\n+ * @author uiytt\n+ *\n+ * @see ChestSlimefunGuide\n+ * @see BookSlimefunGuide\n+ *\n+ */\n+public class PlayerPreResearchEvent extends Event implements Cancellable {\n+\n+    private static final HandlerList handlers = new HandlerList();\n+\n+    private final Player player;\n+    private final Research research;\n+    private final SlimefunItem slimefunItem;\n+    private boolean cancelled;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13694c063a60806e3be0eba3f05f656373cc7b2"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 256, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}