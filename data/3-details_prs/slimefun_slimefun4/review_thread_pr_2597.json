{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDg5MDkx", "number": 2597, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1MToxMlrOFDJ9lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoyNDoyOFrOFGKndw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODUzMjcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MiningAndroidListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMTo1MToxMlrOICrI3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyMjowMFrOICuCwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3NDg0Ng==", "bodyText": "Miners using dynamite :p", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r539674846", "createdAt": "2020-12-09T21:51:12Z", "author": {"login": "Sfiguz7"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MiningAndroidListener.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+\n+import io.github.thebusybiscuit.slimefun4.api.events.AndroidMineEvent;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+public class MiningAndroidListener implements Listener {\n+\n+    public MiningAndroidListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler(ignoreCancelled = true)\n+    public void onEntityExplode(AndroidMineEvent e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "080bc42130cb4f6387d87e8123964a287382a321"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMjQzMg==", "bodyText": "whooooops XD", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r539722432", "createdAt": "2020-12-09T23:22:00Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/MiningAndroidListener.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+\n+import io.github.thebusybiscuit.slimefun4.api.events.AndroidMineEvent;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.api.BlockStorage;\n+\n+public class MiningAndroidListener implements Listener {\n+\n+    public MiningAndroidListener(@Nonnull SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler(ignoreCancelled = true)\n+    public void onEntityExplode(AndroidMineEvent e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY3NDg0Ng=="}, "originalCommit": {"oid": "080bc42130cb4f6387d87e8123964a287382a321"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDA1OTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/blocks/HologramProjector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxNTo1MFrOIHCdxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxNTo1MFrOIHCdxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MTMzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return new BlockBreakHandler(true, true) {\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {\n          \n          \n            \n                            remove(e.getBlock());\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onExplode(Block b, List<ItemStack> drops) {\n          \n          \n            \n                            remove(b);\n          \n          \n            \n                        }\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onAndroidBreak(AndroidMineEvent e) {\n          \n          \n            \n                            remove(e.getBlock());\n          \n          \n            \n                        }\n          \n          \n            \n                    };\n          \n          \n            \n                    return new SimpleBlockBreakHandler() {\n          \n          \n            \n            \n          \n          \n            \n                        @Override\n          \n          \n            \n                        public void onBlockBreaking(@Nonnull Block b) {\n          \n          \n            \n                            remove(b);\n          \n          \n            \n                        }\n          \n          \n            \n                    };", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r544251335", "createdAt": "2020-12-16T12:15:50Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/blocks/HologramProjector.java", "diffHunk": "@@ -51,13 +60,28 @@ public void onPlayerPlace(BlockPlaceEvent e) {\n         };\n     }\n \n+    @Nonnull\n     private BlockBreakHandler onBreak() {\n-        return (e, item, fortune, drops) -> {\n-            remove(e.getBlock());\n-            return true;\n+        return new BlockBreakHandler(true, true) {\n+\n+            @Override\n+            public void onPlayerBreak(BlockBreakEvent e, ItemStack item, List<ItemStack> drops) {\n+                remove(e.getBlock());\n+            }\n+\n+            @Override\n+            public void onExplode(Block b, List<ItemStack> drops) {\n+                remove(b);\n+            }\n+\n+            @Override\n+            public void onAndroidBreak(AndroidMineEvent e) {\n+                remove(e.getBlock());\n+            }\n         };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c72abad7b363d7de9bbe314afcbf927a99957b2"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDA2MjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/handlers/SimpleBlockBreakHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxNjozMlrOIHCfZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxNjozMlrOIHCfZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MTc0OQ==", "bodyText": "should be called onBlockBreak", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r544251749", "createdAt": "2020-12-16T12:16:32Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/handlers/SimpleBlockBreakHandler.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.handlers;\n+\n+import java.util.List;\n+\n+import javax.annotation.Nonnull;\n+\n+import org.bukkit.block.Block;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.block.BlockBreakEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.slimefun4.api.events.AndroidMineEvent;\n+import io.github.thebusybiscuit.slimefun4.core.handlers.BlockBreakHandler;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.androids.MinerAndroid;\n+\n+/**\n+ * This simple implementation of {@link BlockBreakHandler} will execute the same code\n+ * for when the {@link Block} is broken by a {@link Player}, by a {@link MinerAndroid} or an explosion.\n+ * By default, both androids and explosions are allowed.\n+ * \n+ * @author TheBusyBiscuit\n+ * \n+ * @see BlockBreakHandler\n+ *\n+ */\n+public abstract class SimpleBlockBreakHandler extends BlockBreakHandler {\n+\n+    /**\n+     * This constructs a new {@link SimpleBlockBreakHandler}.\n+     */\n+    public SimpleBlockBreakHandler() {\n+        super(true, true);\n+    }\n+\n+    /**\n+     * This method is called when a {@link Block} of this type is broken by a {@link Player},\n+     * by a {@link MinerAndroid} or through an explosion.\n+     * \n+     * @param b\n+     *            The broken {@link Block}\n+     */\n+    public abstract void onBlockBreaking(@Nonnull Block b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c72abad7b363d7de9bbe314afcbf927a99957b2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDA2MzczOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/blocks/HologramProjector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxNjo0MFrOIHCf2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoxNjo0MFrOIHCf2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1MTg2NQ==", "bodyText": "Can just use SimpleBlockBreakHandler here", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r544251865", "createdAt": "2020-12-16T12:16:40Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/blocks/HologramProjector.java", "diffHunk": "@@ -51,13 +60,28 @@ public void onPlayerPlace(BlockPlaceEvent e) {\n         };\n     }\n \n+    @Nonnull\n     private BlockBreakHandler onBreak() {\n-        return (e, item, fortune, drops) -> {\n-            remove(e.getBlock());\n-            return true;\n+        return new BlockBreakHandler(true, true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c72abad7b363d7de9bbe314afcbf927a99957b2"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDA4NDAwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ExplosionsListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoyMToxNlrOIHCrYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoyMToxNlrOIHCrYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1NDgxOQ==", "bodyText": "should use isAir, if we're doing an air check may as well make it future proof. Who knows what MC, Spigot or other plugins will do", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r544254819", "createdAt": "2020-12-16T12:21:16Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ExplosionsListener.java", "diffHunk": "@@ -41,6 +64,24 @@ public void onEntityExplode(EntityExplodeEvent e) {\n \n                     if (blockHandler != null) {\n                         success = blockHandler.onBreak(null, block, item, UnregisterReason.EXPLODE);\n+                    } else {\n+                        item.callItemHandler(BlockBreakHandler.class, handler -> {\n+                            if (handler.isExplosionAllowed()) {\n+                                BlockStorage.clearBlockInfo(block);\n+                                block.setType(Material.AIR);\n+\n+                                List<ItemStack> drops = new ArrayList<>();\n+                                handler.onExplode(block, drops);\n+\n+                                for (ItemStack drop : drops) {\n+                                    if (drop != null && drop.getType() != Material.AIR) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c72abad7b363d7de9bbe314afcbf927a99957b2"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDA5NzE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ExplosionsListener.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjoyNDoyOFrOIHCzHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQyMDoxMDowOVrOIPUsOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1Njc5Ng==", "bodyText": "would be great if we could cancel without disabling all explosions. If we had the event we could cancel and then check if cancelled above.\nWould be nice for cases like, block durability (for like factions), allows explosion if out of electricity, etc.", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r544256796", "createdAt": "2020-12-16T12:24:28Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ExplosionsListener.java", "diffHunk": "@@ -41,6 +64,24 @@ public void onEntityExplode(EntityExplodeEvent e) {\n \n                     if (blockHandler != null) {\n                         success = blockHandler.onBreak(null, block, item, UnregisterReason.EXPLODE);\n+                    } else {\n+                        item.callItemHandler(BlockBreakHandler.class, handler -> {\n+                            if (handler.isExplosionAllowed()) {\n+                                BlockStorage.clearBlockInfo(block);\n+                                block.setType(Material.AIR);\n+\n+                                List<ItemStack> drops = new ArrayList<>();\n+                                handler.onExplode(block, drops);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c72abad7b363d7de9bbe314afcbf927a99957b2"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjkzODU1NA==", "bodyText": "I added a Block param to the isExplosionAllowed method, it will be ignored by default but if you were to implement sth like that, you could override the method and handle durability there.", "url": "https://github.com/Slimefun/Slimefun4/pull/2597#discussion_r552938554", "createdAt": "2021-01-06T20:10:09Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/ExplosionsListener.java", "diffHunk": "@@ -41,6 +64,24 @@ public void onEntityExplode(EntityExplodeEvent e) {\n \n                     if (blockHandler != null) {\n                         success = blockHandler.onBreak(null, block, item, UnregisterReason.EXPLODE);\n+                    } else {\n+                        item.callItemHandler(BlockBreakHandler.class, handler -> {\n+                            if (handler.isExplosionAllowed()) {\n+                                BlockStorage.clearBlockInfo(block);\n+                                block.setType(Material.AIR);\n+\n+                                List<ItemStack> drops = new ArrayList<>();\n+                                handler.onExplode(block, drops);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI1Njc5Ng=="}, "originalCommit": {"oid": "3c72abad7b363d7de9bbe314afcbf927a99957b2"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 154, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}