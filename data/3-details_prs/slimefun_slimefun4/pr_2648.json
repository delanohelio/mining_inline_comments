{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0ODQ2NTg1", "number": 2648, "title": "Fixes #2647", "bodyText": "Description\nAdd some more checks in order to make this more valid. This will resolve a lot of conflicts with other plugins. This has been confirmed fix with Citizens\nChanges\nCheck #isCollidable and #hasGravity\nRelated Issues\nResolves #2647\nChecklist\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.\n I followed the existing code standards and didn't mess up the formatting.\n I did my best to add documentation to any public classes or methods I added.\n I have added Nonnull and Nullable annotations to my methods to indicate their behaviour for null values\n I added sufficient Unit Tests to cover my code.", "createdAt": "2020-12-23T14:19:47Z", "url": "https://github.com/Slimefun/Slimefun4/pull/2648", "merged": true, "mergeCommit": {"oid": "d048f7f8d4002a8c8926543ec2cd08493bdfa18f"}, "closed": true, "closedAt": "2020-12-24T01:27:50Z", "author": {"login": "WalshyDev"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdo_2WBgH2gAyNTQ0ODQ2NTg1OjI4NzJjZjhhMmU4MzIyNjdmNmE3ZjFkZWVkMWM1ODA5NDBhZjc5MGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpJbVeAFqTU1ODI5NDY0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2872cf8a2e832267f6a7f1deed1c580940af790b", "author": {"user": {"login": "WalshyDev", "name": "Daniel Walsh"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/2872cf8a2e832267f6a7f1deed1c580940af790b", "committedDate": "2020-12-23T14:17:35Z", "message": "Fixed #2647"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3ODk3MTY2", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#pullrequestreview-557897166", "createdAt": "2020-12-23T14:21:51Z", "commit": {"oid": "2872cf8a2e832267f6a7f1deed1c580940af790b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDoyMTo1MlrOIKmJow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDoyMTo1MlrOIKmJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4MTczMQ==", "bodyText": "I think this unholy abomination of new lines justifies to have its own dedicated method.", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547981731", "createdAt": "2020-12-23T14:21:52Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -47,7 +47,12 @@ public void stomp(EntityDamageEvent fallDamageEvent) {\n         p.setVelocity(new Vector(0, 0.7, 0));\n \n         for (Entity n : p.getNearbyEntities(4, 4, 4)) {\n-            if (n instanceof LivingEntity && n.isValid() && !n.getUniqueId().equals(p.getUniqueId())) {\n+            if (n instanceof LivingEntity\n+                && n.isValid()\n+                && !n.getUniqueId().equals(p.getUniqueId())\n+                && ((LivingEntity) n).isCollidable()\n+                && n.hasGravity()\n+            ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2872cf8a2e832267f6a7f1deed1c580940af790b"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00c233dee59d1160e60513bea50439502eeb7818", "author": {"user": {"login": "WalshyDev", "name": "Daniel Walsh"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/00c233dee59d1160e60513bea50439502eeb7818", "committedDate": "2020-12-23T14:32:47Z", "message": "Move to a method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3OTA1MjA4", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#pullrequestreview-557905208", "createdAt": "2020-12-23T14:35:28Z", "commit": {"oid": "00c233dee59d1160e60513bea50439502eeb7818"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNToyOFrOIKmiNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNDozNToyOFrOIKmiNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk4ODAyMg==", "bodyText": "changes p to player but b not to block?", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r547988022", "createdAt": "2020-12-23T14:35:28Z", "author": {"login": "J3fftw1"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -37,54 +39,49 @@ public StomperBoots(Category category, SlimefunItemStack item, RecipeType recipe\n \n     /**\n      * This will apply the \"stomp\" effect to the given {@link EntityDamageEvent}.\n-     * \n+     *\n      * @param fallDamageEvent\n      *            The {@link EntityDamageEvent} in which the {@link Player} has taken fall damage\n      */\n     public void stomp(EntityDamageEvent fallDamageEvent) {\n-        Player p = (Player) fallDamageEvent.getEntity();\n-        p.getWorld().playSound(p.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n-        p.setVelocity(new Vector(0, 0.7, 0));\n+        Player player = (Player) fallDamageEvent.getEntity();\n+        player.getWorld().playSound(player.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n+        player.setVelocity(new Vector(0, 0.7, 0));\n \n-        for (Entity n : p.getNearbyEntities(4, 4, 4)) {\n-            if (n instanceof LivingEntity\n-                && n.isValid()\n-                && !n.getUniqueId().equals(p.getUniqueId())\n-                && ((LivingEntity) n).isCollidable()\n-                && n.hasGravity()\n-            ) {\n-                Vector velocity = getShockwave(p.getLocation(), n.getLocation());\n-                n.setVelocity(velocity);\n+        for (Entity entity : player.getNearbyEntities(4, 4, 4)) {\n+            if (entity instanceof LivingEntity && canMoveEntity((LivingEntity) entity, player)) {\n+                Vector velocity = getShockwave(player.getLocation(), entity.getLocation());\n+                entity.setVelocity(velocity);\n \n                 // Check if it's not a Player or if PvP is enabled\n-                if (!(n instanceof Player) || (p.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(p, n.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n-                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(p, n, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n+                if (!(entity instanceof Player) || (player.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(player, entity.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n+                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(player, entity, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n                     Bukkit.getPluginManager().callEvent(event);\n \n                     if (!event.isCancelled()) {\n-                        ((LivingEntity) n).damage(event.getDamage());\n+                        ((LivingEntity) entity).damage(event.getDamage());\n                     }\n                 }\n             }\n         }\n \n         for (BlockFace face : BlockFace.values()) {\n-            Block b = p.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n-            p.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, b.getType());\n+            Block b = player.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00c233dee59d1160e60513bea50439502eeb7818"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331", "author": {"user": {"login": "WalshyDev", "name": "Daniel Walsh"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/6cf2051e604499c78e8f40c0be1bea463f8b4331", "committedDate": "2020-12-23T14:56:51Z", "message": "Panda smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MDQ0NjA5", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#pullrequestreview-558044609", "createdAt": "2020-12-23T16:19:39Z", "commit": {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MTQ2MzI3", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#pullrequestreview-558146327", "createdAt": "2020-12-23T17:51:52Z", "commit": {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo1MTo1M1rOIKssng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzo1NjoyMFrOIKs7pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA4ODk5MA==", "bodyText": "Why are you using @code instead of @link here?", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548088990", "createdAt": "2020-12-23T17:51:53Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -89,4 +91,20 @@ private Vector getShockwave(Location origin, Location target) {\n         }\n     }\n \n+    /**\n+     * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n+     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n+     * collision with {@code LivingEntity#setCollidable(false)} or\n+     * gravity with {@code LivingEntity#setGravity(false)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MDgxMA==", "bodyText": "I would suggest to swap the order of parameters here and rename the method.\nThe current order is unintuitive in my opinion or at least in a grammatical sense. If the method was called \"canBePushedBy\" then the current order would make more sense. So I am in favour of swapping these here.\nAlso if you want this to be overridden, then it should be at least protected.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean canMoveEntity(@Nonnull LivingEntity entity, @Nonnull Player player) {\n          \n          \n            \n                protected boolean canPush(@Nonnull Player player, @Nonnull LivingEntity entity) {", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548090810", "createdAt": "2020-12-23T17:54:03Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -89,4 +91,20 @@ private Vector getShockwave(Location origin, Location target) {\n         }\n     }\n \n+    /**\n+     * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n+     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying\n+     * collision with {@code LivingEntity#setCollidable(false)} or\n+     * gravity with {@code LivingEntity#setGravity(false)}.\n+     *\n+     * @param entity\n+     *            The {@link LivingEntity} to check.\n+     * @param player\n+     *            The {@link Player} using the {@link StomperBoots}.\n+     * @return If the entity can move.\n+     */\n+    private boolean canMoveEntity(@Nonnull LivingEntity entity, @Nonnull Player player) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MTU3MA==", "bodyText": "According to the javadocs convention <br> should not be used. Instead <p> should be used to start a new paragraph.\nAlthough you will see the line break quite often in this codebase already because I didn't know that until recently either.", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548091570", "createdAt": "2020-12-23T17:54:54Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -89,4 +91,20 @@ private Vector getShockwave(Location origin, Location target) {\n         }\n     }\n \n+    /**\n+     * Checks if the stomper boots can move an entity and is not the player who is using the boots.\n+     * <br><b>For developers:</b> If you're spawning an immovable NPC, you should be denying", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA5MjgzOA==", "bodyText": "I don't really see much of a problem with the naming of p, n and b but sure.", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#discussion_r548092838", "createdAt": "2020-12-23T17:56:20Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/StomperBoots.java", "diffHunk": "@@ -37,49 +39,49 @@ public StomperBoots(Category category, SlimefunItemStack item, RecipeType recipe\n \n     /**\n      * This will apply the \"stomp\" effect to the given {@link EntityDamageEvent}.\n-     * \n+     *\n      * @param fallDamageEvent\n      *            The {@link EntityDamageEvent} in which the {@link Player} has taken fall damage\n      */\n     public void stomp(EntityDamageEvent fallDamageEvent) {\n-        Player p = (Player) fallDamageEvent.getEntity();\n-        p.getWorld().playSound(p.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n-        p.setVelocity(new Vector(0, 0.7, 0));\n+        Player player = (Player) fallDamageEvent.getEntity();\n+        player.getWorld().playSound(player.getLocation(), Sound.ENTITY_ZOMBIE_BREAK_WOODEN_DOOR, 1F, 2F);\n+        player.setVelocity(new Vector(0, 0.7, 0));\n \n-        for (Entity n : p.getNearbyEntities(4, 4, 4)) {\n-            if (n instanceof LivingEntity && n.isValid() && !n.getUniqueId().equals(p.getUniqueId())) {\n-                Vector velocity = getShockwave(p.getLocation(), n.getLocation());\n-                n.setVelocity(velocity);\n+        for (Entity entity : player.getNearbyEntities(4, 4, 4)) {\n+            if (entity instanceof LivingEntity && canMoveEntity((LivingEntity) entity, player)) {\n+                Vector velocity = getShockwave(player.getLocation(), entity.getLocation());\n+                entity.setVelocity(velocity);\n \n                 // Check if it's not a Player or if PvP is enabled\n-                if (!(n instanceof Player) || (p.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(p, n.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n-                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(p, n, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n+                if (!(entity instanceof Player) || (player.getWorld().getPVP() && SlimefunPlugin.getProtectionManager().hasPermission(player, entity.getLocation(), ProtectableAction.ATTACK_PLAYER))) {\n+                    EntityDamageByEntityEvent event = new EntityDamageByEntityEvent(player, entity, DamageCause.ENTITY_ATTACK, fallDamageEvent.getDamage() / 2);\n                     Bukkit.getPluginManager().callEvent(event);\n \n                     if (!event.isCancelled()) {\n-                        ((LivingEntity) n).damage(event.getDamage());\n+                        ((LivingEntity) entity).damage(event.getDamage());\n                     }\n                 }\n             }\n         }\n \n         for (BlockFace face : BlockFace.values()) {\n-            Block b = p.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n-            p.getWorld().playEffect(b.getLocation(), Effect.STEP_SOUND, b.getType());\n+            Block block = player.getLocation().getBlock().getRelative(BlockFace.DOWN).getRelative(face);\n+            player.getWorld().playEffect(block.getLocation(), Effect.STEP_SOUND, block.getType());\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cf2051e604499c78e8f40c0be1bea463f8b4331"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c31c746dd61da13303ad08fc41559fa22a4cebe", "author": {"user": {"login": "WalshyDev", "name": "Daniel Walsh"}}, "url": "https://github.com/Slimefun/Slimefun4/commit/9c31c746dd61da13303ad08fc41559fa22a4cebe", "committedDate": "2020-12-23T22:16:45Z", "message": "Requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4MjYzMjc0", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#pullrequestreview-558263274", "createdAt": "2020-12-23T22:58:36Z", "commit": {"oid": "9c31c746dd61da13303ad08fc41559fa22a4cebe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Mjk0NjQ5", "url": "https://github.com/Slimefun/Slimefun4/pull/2648#pullrequestreview-558294649", "createdAt": "2020-12-24T01:27:09Z", "commit": {"oid": "9c31c746dd61da13303ad08fc41559fa22a4cebe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2580, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}