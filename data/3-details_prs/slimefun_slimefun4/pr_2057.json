{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzcwMTIz", "number": 2057, "title": "Added Bee Protection to Hazmat Suit.", "bodyText": "Description\n\nNow bees cannot harm you while wearing the full hazmat suit.\nChanges\n\nAdded BeeListener.\nAdded CustomProtection ItemAttribute.\nAdded ProtectionType enum.\nAdded HazmatArmorPiece.\nImproved ArmorTask.\nNow full hazmat suit prevents from bee damage.\nRelated Issues\n\n\nN/A\nChecklist\n\n\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.\n I followed the existing code standards and didn't mess up the formatting.\n I did my best to add documentation to any public classes or methods I added.\n I added sufficient Unit Tests to cover my code.", "createdAt": "2020-06-26T20:19:54Z", "url": "https://github.com/Slimefun/Slimefun4/pull/2057", "merged": true, "mergeCommit": {"oid": "c63f4bf8afde102d6780ce8e273f82f0f03fa888"}, "closed": true, "closedAt": "2020-06-28T15:12:11Z", "author": {"login": "LinoxGH"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvJICjgH2gAyNDQwNzcwMTIzOmNkNGEzNmM1MTk3MDJmMjFlN2FlMGFmZmM4NTM2OTU1NTdjYmI4MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcvrjOdgFqTQzODc3NTY2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "cd4a36c519702f21e7ae0affc853695557cbb821", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/cd4a36c519702f21e7ae0affc853695557cbb821", "committedDate": "2020-06-26T20:18:27Z", "message": "Added Bee Protection to Hazmat Suit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/29fe88176873b8eb7cf791d0caab0ab53644a6a4", "committedDate": "2020-06-26T20:31:15Z", "message": "Added a new lore to Hazmat Suit for 1.15+"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjEwMDkx", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438610091", "createdAt": "2020-06-26T21:37:58Z", "commit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTozNzo1OFrOGpvb5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMTo0MzozMFrOGpvjbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMTk4OA==", "bodyText": "The see attribute shouldn't really be used for external classes, please only use it for Slimefun classes.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446421988", "createdAt": "2020-06-26T21:37:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMjI3Mw==", "bodyText": "Should probably rename this to BeeListener, since it only checks for Bees and has rather few to do with the actual mechanics of the HazmatSuit.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446422273", "createdAt": "2020-06-26T21:38:51Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee\n+ *\n+ */\n+public class HazmatSuitListener implements Listener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMjg3NQ==", "bodyText": "Performance-wise this is a rather careless design choice. You should put this if-statement in front of initializing this Listener in the first place (in SlimefunPlugin.java), otherwise you are registering a completely unnecessary Listener.\nAnd let's be honest... the Minecraft version won't change from one minute to another.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446422875", "createdAt": "2020-06-26T21:40:32Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee\n+ *\n+ */\n+public class HazmatSuitListener implements Listener {\n+\n+    public HazmatSuitListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzEyOQ==", "bodyText": "This is a really expensive check and should not be done this way.\nCheck the ArmorTask class, there are already optimizations for the Hazmat Suit in place.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423129", "createdAt": "2020-06-26T21:41:15Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/HazmatSuitListener.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.MinecraftVersion;\n+import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ * @see Bee\n+ *\n+ */\n+public class HazmatSuitListener implements Listener {\n+\n+    public HazmatSuitListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (!SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) return;\n+\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+\n+                int hazmatCount = 0;\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    SlimefunItem sfItem = SlimefunItem.getByItem(armor);\n+                    if (sfItem == null) return;\n+\n+                    String id = sfItem.getID();\n+                    if (id.equals(\"SCUBA_HELMET\")) hazmatCount++;\n+                    if (id.equals(\"HAZMAT_CHESTPLATE\")) hazmatCount++;\n+                    if (id.equals(\"HAZMAT_LEGGINGS\")) hazmatCount++;\n+                    if (id.equals(\"RUBBER_BOOTS\")) hazmatCount++;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzMwMg==", "bodyText": "This should be renamed and gated behind an if statement (see my review comments on this Listener class)", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423302", "createdAt": "2020-06-26T21:41:42Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java", "diffHunk": "@@ -237,6 +238,7 @@ else if (getServer().getPluginManager().isPluginEnabled(\"CS-CoreLib\")) {\n             new WitherListener(this);\n             new IronGolemListener(this);\n             new PlayerInteractEntityListener(this);\n+            new HazmatSuitListener(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzM5NA==", "bodyText": "ItemMeta cannot be null.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423394", "createdAt": "2020-06-26T21:41:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {\n+        ItemMeta meta = getItemMeta();\n+        if (meta == null) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzUxOQ==", "bodyText": "You should check .hasItemMeta() before this, otherwise you are computing wasteful objects.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423519", "createdAt": "2020-06-26T21:42:21Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {\n+        ItemMeta meta = getItemMeta();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzYwMg==", "bodyText": "This is not good. Use .hasLore() instead.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423602", "createdAt": "2020-06-26T21:42:36Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {\n+        ItemMeta meta = getItemMeta();\n+        if (meta == null) return;\n+        List<String> oldLore = meta.getLore();\n+        if (oldLore == null) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQyMzkxOQ==", "bodyText": "I don't really think this method is useful here, I'd argue this should be removed and just done manually or via the Consumer in the constructor.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446423919", "createdAt": "2020-06-26T21:43:30Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -245,4 +246,20 @@ else if (PatternUtils.ALPHANUMERIC.matcher(texture).matches()) {\n         }\n     }\n \n+    /**\n+     * Adds additional lores for the {@link ItemStack}.\n+     *\n+     * @param newLore\n+     *                New lores to be added to the {@link ItemStack}\n+     */\n+    public void addLore(String... newLore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29fe88176873b8eb7cf791d0caab0ab53644a6a4"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/ffd57ec760cd2fb977a67bb8d84b9190dd2485ac", "committedDate": "2020-06-26T22:51:38Z", "message": "Did the requested Changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjU2MDky", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438656092", "createdAt": "2020-06-27T00:39:21Z", "commit": {"oid": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDozOToyMVrOGpx4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMDo0MDowMVrOGpx4zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjA0NQ==", "bodyText": "This statement is the wrong way around, you are checking for the opposite, so remove the negations here.\nAlso the armor item and the SlimefunItem need to be swapped too.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446462045", "createdAt": "2020-06-27T00:39:21Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjA5NQ==", "bodyText": "Why are you doing this instead of cancelling the event?", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446462095", "createdAt": "2020-06-27T00:39:37Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,47 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunItems;\n+import io.github.thebusybiscuit.slimefun4.utils.SlimefunUtils;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+\n+                // Check for a Hazmat Suit\n+                if (!SlimefunUtils.isItemSimilar(SlimefunItems.SCUBA_HELMET, p.getInventory().getHelmet(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_CHESTPLATE, p.getInventory().getChestplate(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.HAZMAT_LEGGINGS, p.getInventory().getLeggings(), true) &&\n+                        !SlimefunUtils.isItemSimilar(SlimefunItems.RUBBER_BOOTS, p.getInventory().getBoots(), true)) {\n+                    e.setDamage(0D);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ2MjE1OA==", "bodyText": "Random unused import", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446462158", "createdAt": "2020-06-27T00:40:01Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/me/mrCookieSlime/Slimefun/api/SlimefunItemStack.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd57ec760cd2fb977a67bb8d84b9190dd2485ac"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52dc7585fcf3b368e46f35e704b8770b2d59ab38", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/52dc7585fcf3b368e46f35e704b8770b2d59ab38", "committedDate": "2020-06-27T05:09:09Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into HazmatSuitBees\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/73973a00b722b897449a91a9bdf2fd246eb94c53", "committedDate": "2020-06-27T09:26:15Z", "message": "Did the requested changes and some fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njg3NzYy", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438687762", "createdAt": "2020-06-27T10:12:41Z", "commit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDoxMjo0MVrOGp0wxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDoyMjoxNVrOGp0zvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTI1Mg==", "bodyText": "Just pass the Player as an argument, this will perform a lengthy UUID lookup.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509252", "createdAt": "2020-06-27T10:12:41Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTMyNg==", "bodyText": "I very much like the transition of the Hazmat suit to the SlimefunArmorPiece system!\nBut I am not the greatest fan of id-comparison.\nBest would be to create a new ItemAttribute, like \"HazmatProtection\" and then create a HazmatSuit class which extends SlimefunArmorpiece and implements that attribute.\nThis way we don't have to rely on hardcoded ids and are flexible in terms of adding more hazmat suits in the future.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509326", "createdAt": "2020-06-27T10:13:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();\n+\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+        boolean hasHazmat = false;\n+        for (HashedArmorpiece armorPiece : armor) {\n+\n+            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n+            if (!sfArmor.isPresent()) continue;\n+\n+            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hasHazmat = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTM4Mw==", "bodyText": "Also since you are only checking for ANY hazmat piece, you can break the loop here.\nOr even better, make a seperate method with a boolean return type for this.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509383", "createdAt": "2020-06-27T10:14:30Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();\n+\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+        boolean hasHazmat = false;\n+        for (HashedArmorpiece armorPiece : armor) {\n+\n+            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n+            if (!sfArmor.isPresent()) continue;\n+\n+            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hasHazmat = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTQxMA==", "bodyText": "Same as below, in regards to the hardcoded ids.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509410", "createdAt": "2020-06-27T10:14:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n+\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    private boolean hasFullHazmat(HashedArmorpiece[] armors) {\n+        int hazmatCount = 0;\n+\n+        // Check for a Hazmat Suit\n+        for (HashedArmorpiece armor : armors) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    armorPiece.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    armorPiece.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hazmatCount++;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDAxMg==", "bodyText": "This is an asynchronous operation, so you should NOT do e.setDamage() here, as it will have no effect when this is delayed.\nYou need to the following instead:\nOptional<PlayerProfile> optional = PlayerProfile.find(p);\nif (!optional .isPresent()) {\n  PlayerProfile.request(p);\n  return;\n}\n\nPlayerProfile profile = optional.get();\n// Do stuff...\nThis will ensure that we don't access the PlayerProfile asynchronously, which will lead to problems.\nAnd only execute the code if it's synced.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446510012", "createdAt": "2020-06-27T10:22:15Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n+\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);\n+                    }\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njg4MTQy", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438688142", "createdAt": "2020-06-27T10:20:19Z", "commit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDoyMDoxOVrOGp0zNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMDoyMjo0NlrOGp0z7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTg3OA==", "bodyText": "This is in an async operation, this will happen AFTER the event has fired and therefore have no change.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509878", "createdAt": "2020-06-27T10:20:19Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {\n+                Player p = (Player) e.getEntity();\n+                PlayerProfile.get(p, profile -> {\n+\n+                    HashedArmorpiece[] armors = profile.getArmor();\n+                    if (hasFullHazmat(armors)) {\n+                        for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                            ItemUtils.damageItem(armor, 1, false);\n+                        }\n+                        e.setDamage(0D);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUwOTkwNg==", "bodyText": "Useless nested if. &&", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446509906", "createdAt": "2020-06-27T10:20:41Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+import me.mrCookieSlime.Slimefun.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee) {\n+            if (e.getEntity() instanceof Player) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUxMDA2MQ==", "bodyText": "This should only be true if all items are hazmat gear. Right now, this is not the case.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446510061", "createdAt": "2020-06-27T10:22:46Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,9 +120,26 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n+    private void checkForRadiation(PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+        Player p = profile.getPlayer();\n+\n         // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+        boolean hasHazmat = false;\n+        for (HashedArmorpiece armorPiece : armor) {\n+\n+            Optional<SlimefunArmorPiece> sfArmor = armorPiece.getItem();\n+            if (!sfArmor.isPresent()) continue;\n+\n+            if (sfArmor.get().getID().equals(\"SCUBA_HELMET\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_CHESTPLATE\") ||\n+                    sfArmor.get().getID().equals(\"HAZMAT_LEGGINGS\") ||\n+                    sfArmor.get().getID().equals(\"RUBBER_BOOTS\")) {\n+                hasHazmat = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73973a00b722b897449a91a9bdf2fd246eb94c53"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/b5ef8ff019f0af88e96cb03330dfb9d4ba12ac0d", "committedDate": "2020-06-27T12:58:36Z", "message": "Did the requested changes + improvements."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/ba0c3b30ddabdb5325c5aab1dc6fc35f61db7329", "committedDate": "2020-06-27T13:01:36Z", "message": "Merge branch 'master' of https://github.com/TheBusyBiscuit/Slimefun4 into HazmatSuitBees\n\n\u0001 Conflicts:\n\u0001\tsrc/main/java/me/mrCookieSlime/Slimefun/SlimefunPlugin.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/a456034005cc99cd89aacd91c5842609dce50ba8", "committedDate": "2020-06-27T13:07:22Z", "message": "Fixed merge conflicts."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njk3NDg4", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438697488", "createdAt": "2020-06-27T13:09:42Z", "commit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzowOTo0MlrOGp1vUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzoxMzo1MFrOGp1wpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTI2NQ==", "bodyText": "Please don't declare an enum inside the interface. Make a seperate file for this...", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525265", "createdAt": "2020-06-27T13:09:42Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    ProtectionType[] getProtectionTypes();\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    boolean requireFullSet();\n+\n+    enum ProtectionType {\n+\n+        RADIATION,\n+\n+        BEES;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTMyMQ==", "bodyText": "This is a bit misleading, should probably be \"isFullSetRequired()\".", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525321", "createdAt": "2020-06-27T13:10:06Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    ProtectionType[] getProtectionTypes();\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    boolean requireFullSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTQ0OQ==", "bodyText": "Please use a NamespacedKey for this rather than a String, otherwise you could run into ID conflicts.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525449", "createdAt": "2020-06-27T13:11:39Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -29,4 +36,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         return effects;\n     }\n \n+    /**\n+     * This returns the armor set ID of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set ID, <code>null</code> if no set ID is found.\n+     */\n+    public String getSetID() {\n+        return setID;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTQ2Mw==", "bodyText": "Also: \"Id\", not \"ID\".", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525463", "createdAt": "2020-06-27T13:11:50Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -29,4 +36,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         return effects;\n     }\n \n+    /**\n+     * This returns the armor set ID of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set ID, <code>null</code> if no set ID is found.\n+     */\n+    public String getSetID() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTQ4OQ==", "bodyText": "\"isProtected\" sounds more appropriate.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525489", "createdAt": "2020-06-27T13:12:11Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,85 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.items.HashedArmorpiece;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n+\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+            PlayerProfile profile = optional.get();\n+\n+            HashedArmorpiece[] armors = profile.getArmor();\n+            if (shouldProtect(armors)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);\n+            }\n+        }\n+    }\n+\n+    private boolean shouldProtect(HashedArmorpiece[] armors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTUzNQ==", "bodyText": "*Radiation, not Radioactive.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525535", "createdAt": "2020-06-27T13:12:41Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -119,18 +121,19 @@ private boolean hasSunlight(Player p) {\n         return (world.getTime() < 12300 || world.getTime() > 23850) && p.getEyeLocation().getBlock().getLightFromSky() == 15;\n     }\n \n-    private void checkForRadiation(Player p) {\n-        // Check for a Hazmat Suit\n-        if (!SlimefunUtils.isItemSimilar(p.getInventory().getHelmet(), SlimefunItems.SCUBA_HELMET, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getChestplate(), SlimefunItems.HAZMAT_CHESTPLATE, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getLeggings(), SlimefunItems.HAZMAT_LEGGINGS, true) || !SlimefunUtils.isItemSimilar(p.getInventory().getBoots(), SlimefunItems.RUBBER_BOOTS, true)) {\n+    private void checkForRadiation(Player p, PlayerProfile profile) {\n+        HashedArmorpiece[] armor = profile.getArmor();\n+\n+        if (!shouldProtect(armor)) {\n             for (ItemStack item : p.getInventory()) {\n-                if (isRadioactive(p, item)) {\n+                if (checkAndApplyRadioactive(p, item)) {\n                     break;\n                 }\n             }\n         }\n     }\n \n-    private boolean isRadioactive(Player p, ItemStack item) {\n+    private boolean checkAndApplyRadioactive(Player p, ItemStack item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTU2OQ==", "bodyText": "\"isProtected\" sounds better here.\nAlso since you are reusing this method twice... It may make sense to make a more general method for this inside PlayerProfile.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525569", "createdAt": "2020-06-27T13:13:16Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -148,4 +151,35 @@ private boolean isRadioactive(Player p, ItemStack item) {\n         return false;\n     }\n \n+    private boolean shouldProtect(HashedArmorpiece[] armors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTYwNw==", "bodyText": "Is the id even required in the first place?\nI think it would make more sense to have a \"ProtectionType\" argument for this method and check if all 4 protect against this.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446525607", "createdAt": "2020-06-27T13:13:50Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/tasks/ArmorTask.java", "diffHunk": "@@ -148,4 +151,35 @@ private boolean isRadioactive(Player p, ItemStack item) {\n         return false;\n     }\n \n+    private boolean shouldProtect(HashedArmorpiece[] armors) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        String setID = null;\n+        for (HashedArmorpiece armor : armors) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.requireFullSet()) setID = armorPiece.get().getSetID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a456034005cc99cd89aacd91c5842609dce50ba8"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a1b247b4518577a32006ce1692218a5399af52", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/64a1b247b4518577a32006ce1692218a5399af52", "committedDate": "2020-06-27T14:30:28Z", "message": "Did the requested changes + fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzI2Mzk5", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438726399", "createdAt": "2020-06-27T21:41:58Z", "commit": {"oid": "64a1b247b4518577a32006ce1692218a5399af52"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMTo0MTo1OFrOGp4ejQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QyMTo0MzozN1rOGp4e6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDEyNQ==", "bodyText": "Some documentation here would be nice.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570125", "createdAt": "2020-06-27T21:41:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+public enum ProtectionType {\n+\n+    RADIATION,\n+    BEES;\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a1b247b4518577a32006ce1692218a5399af52"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDE4MQ==", "bodyText": "Is the setID here really required? shouldn't it be slimefun:hazmat by default for this class?", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570181", "createdAt": "2020-06-27T21:42:53Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n+\n+    private final ProtectionType[] types;\n+\n+    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setID) {\n+        super(category, item, recipeType, recipe, effects, setID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a1b247b4518577a32006ce1692218a5399af52"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDE4NA==", "bodyText": "Missing documentation.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570184", "createdAt": "2020-06-27T21:42:59Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a1b247b4518577a32006ce1692218a5399af52"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDIwNg==", "bodyText": "Please use a NamespacedKey instead of a String for the setId...", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570206", "createdAt": "2020-06-27T21:43:19Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -19,6 +22,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n+    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a1b247b4518577a32006ce1692218a5399af52"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU3MDIxOQ==", "bodyText": "Using Slimefun's instance here defeats the entire purpose of a NamespacedKey...", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446570219", "createdAt": "2020-06-27T21:43:37Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -19,6 +22,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         this.effects = effects == null ? new PotionEffect[0] : effects;\n     }\n \n+    public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects, String setId) {\n+        this(category, item, recipeType, recipe, effects);\n+\n+        this.id = new NamespacedKey(SlimefunPlugin.instance, setId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a1b247b4518577a32006ce1692218a5399af52"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07d837299ff3feae12eeeb6f37b4891f661a50f6", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/07d837299ff3feae12eeeb6f37b4891f661a50f6", "committedDate": "2020-06-27T22:07:37Z", "message": "Did the requested changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/a935951c229dc1c04646dcd9e72b03b30b81fc6d", "committedDate": "2020-06-27T22:14:37Z", "message": "Oops forgot to change these."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzM0MDgx", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438734081", "createdAt": "2020-06-28T00:55:57Z", "commit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1NTo1OFrOGp5YGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMDo1NzoyNFrOGp5YeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDg1OA==", "bodyText": "This method should probably be moved to your CustomProtection interface and then implemented in the Hazmat class.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446584858", "createdAt": "2020-06-28T00:55:58Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -29,4 +37,12 @@ public SlimefunArmorPiece(Category category, SlimefunItemStack item, RecipeType\n         return effects;\n     }\n \n+    /**\n+     * This returns the armor set {@link NamespacedKey} of this {@link SlimefunArmorPiece}.\n+     *\n+     * @return The set {@link NamespacedKey}, <code>null</code> if none is found.\n+     */\n+    public NamespacedKey getSetId() {\n+        return id;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NDk1Mg==", "bodyText": "This being null here isn't really the best ideas.\nI mean, we only use this key for the CustomProtection armor, so it might make sense to just have the getter in that interface and force the developer to implement this field in their implementation class instead.\nThis way we avoid unnecessary null fields, since those aren't needed in this class here.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446584952", "createdAt": "2020-06-28T00:57:24Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/SlimefunArmorPiece.java", "diffHunk": "@@ -1,16 +1,19 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n \n+import org.bukkit.NamespacedKey;\n import org.bukkit.entity.Player;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.potion.PotionEffect;\n \n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.SlimefunItem.SlimefunItem;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n public class SlimefunArmorPiece extends SlimefunItem {\n \n+    private NamespacedKey id = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzM0NzQ2", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438734746", "createdAt": "2020-06-28T01:14:34Z", "commit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMToxNDozNVrOGp5c1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMToyNTowNlrOGp5fvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjA3MA==", "bodyText": "You made a variable for the armour, use it. Also, if you're gonna do a one line if, it's generally only for a short return. This is bad.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586070", "createdAt": "2020-06-28T01:14:35Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java", "diffHunk": "@@ -448,6 +453,39 @@ public static void getBackpack(ItemStack item, Consumer<PlayerBackpack> callback\n         }\n     }\n \n+    public boolean isProtected(ProtectionType type) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        NamespacedKey setId = null;\n+        for (HashedArmorpiece armor : armor) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjE0MQ==", "bodyText": "Instead of a first variable you could literally just check if the ID is null and set it.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586141", "createdAt": "2020-06-28T01:15:23Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java", "diffHunk": "@@ -448,6 +453,39 @@ public static void getBackpack(ItemStack item, Consumer<PlayerBackpack> callback\n         }\n     }\n \n+    public boolean isProtected(ProtectionType type) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        NamespacedKey setId = null;\n+        for (HashedArmorpiece armor : armor) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();\n+                    first = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjE5Mw==", "bodyText": "Again, there's a variable. I don't like all these get()s", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586193", "createdAt": "2020-06-28T01:16:17Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/api/player/PlayerProfile.java", "diffHunk": "@@ -448,6 +453,39 @@ public static void getBackpack(ItemStack item, Consumer<PlayerBackpack> callback\n         }\n     }\n \n+    public boolean isProtected(ProtectionType type) {\n+        int armorCount = 0;\n+        boolean first = true;\n+\n+        NamespacedKey setId = null;\n+        for (HashedArmorpiece armor : armor) {\n+            Optional<SlimefunArmorPiece> armorPiece = armor.getItem();\n+            if (!armorPiece.isPresent()) return false;\n+\n+            if (armorPiece.get() instanceof CustomProtection) {\n+                CustomProtection protectedArmor = (CustomProtection) armorPiece.get();\n+\n+                if (first) {\n+                    if (protectedArmor.isFullSetRequired()) setId = armorPiece.get().getSetId();\n+                    first = false;\n+                }\n+\n+                for (ProtectionType protectionType : protectedArmor.getProtectionTypes()) {\n+                    if (protectionType == type) {\n+                        if (setId == null) {\n+                            return true;\n+                        } else if (setId.equals(armorPiece.get().getSetId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjMyNQ==", "bodyText": "I don't understand what this class does at all from this comment. It doesn't let people put on this armour? But also (?) stops \"applying protection\", what does that mean?\nThis really needs to be reworded.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586325", "createdAt": "2020-06-28T01:18:02Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjQwNA==", "bodyText": "Does this just stop the armour from being damaged or the player too?", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586404", "createdAt": "2020-06-28T01:19:12Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjQyNQ==", "bodyText": "Copied comment. Wasn't changed.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586425", "createdAt": "2020-06-28T01:19:33Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/CustomProtection.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.entity.EntityDamageEvent;\n+\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.HazmatArmorPiece;\n+import io.github.thebusybiscuit.slimefun4.implementation.items.armor.SlimefunArmorPiece;\n+\n+/**\n+ * Implement this interface for any {@link SlimefunArmorPiece} to prevent\n+ * the {@link Player} wearing that {@link SlimefunArmorPiece}\n+ *\n+ * <b>Important</b>: This will not cancel any {@link EntityDamageEvent}.\n+ * It will simply prevent Slimefun from ever applying {@link ProtectionType}\n+ * to this {@link SlimefunArmorPiece}'s wearer.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see HazmatArmorPiece\n+ * @see ItemAttribute\n+ *\n+ */\n+public interface CustomProtection extends ItemAttribute {\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s\n+     */\n+    ProtectionType[] getProtectionTypes();\n+\n+    /**\n+     * This returns the {@link ProtectionType}s this {@link ItemAttribute}\n+     * prevents the assigned {@link SlimefunArmorPiece} to be damaged by.\n+     *\n+     * @return The {@link ProtectionType}s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYxNQ==", "bodyText": "Not sure I'm a fan of this being an enum. I'd rather addons be able to add their own as they wish. This could be a Predicate with the damage event (or such object) and then it's tested.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586615", "createdAt": "2020-06-28T01:21:58Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/core/attributes/ProtectionType.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.github.thebusybiscuit.slimefun4.core.attributes;\n+\n+/**\n+ * Represents the {@link ProtectionType} that a {@link CustomProtection}\n+ * prevents the damage from.\n+ *\n+ * @author Linox\n+ *\n+ * @see CustomProtection\n+ *\n+ */\n+public enum ProtectionType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjYzMQ==", "bodyText": "Empty line", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586631", "createdAt": "2020-06-28T01:22:18Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -295,6 +298,41 @@ private SlimefunItems() {}\n         REINFORCED_ALLOY_LEGGINGS.addUnsafeEnchantments(reinforced);\n         REINFORCED_ALLOY_BOOTS.addUnsafeEnchantments(reinforced);\n \n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjY0OA==", "bodyText": "ChatColors.color", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586648", "createdAt": "2020-06-28T01:22:34Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/SlimefunItems.java", "diffHunk": "@@ -295,6 +298,41 @@ private SlimefunItems() {}\n         REINFORCED_ALLOY_LEGGINGS.addUnsafeEnchantments(reinforced);\n         REINFORCED_ALLOY_BOOTS.addUnsafeEnchantments(reinforced);\n \n+        if (SlimefunPlugin.getMinecraftVersion().isAtLeast(MinecraftVersion.MINECRAFT_1_15)) {\n+\n+            ItemMeta scubaHelmetMeta = SCUBA_HELMET.getItemMeta();\n+            List<String> scubaHelmetMetaLore = scubaHelmetMeta.getLore();\n+            scubaHelmetMetaLore.addAll(Arrays.asList(\"\",\n+                    ChatColor.translateAlternateColorCodes('&', \"&7Equip the full set for:\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjcyMQ==", "bodyText": "Just initialise right away", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586721", "createdAt": "2020-06-28T01:23:54Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/armor/HazmatArmorPiece.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.items.armor;\n+\n+import org.bukkit.NamespacedKey;\n+import org.bukkit.inventory.ItemStack;\n+import org.bukkit.potion.PotionEffect;\n+\n+import io.github.thebusybiscuit.slimefun4.core.attributes.CustomProtection;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+import me.mrCookieSlime.Slimefun.Lists.RecipeType;\n+import me.mrCookieSlime.Slimefun.Objects.Category;\n+import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n+\n+/**\n+ * Represents 1 {@link SlimefunArmorPiece} of the Hazmat armor set.\n+ * One of the very few utilisations of {@link CustomProtection}.\n+ *\n+ * @author Linox\n+ *\n+ * @see SlimefunArmorPiece\n+ * @see CustomProtection\n+ *\n+ */\n+public class HazmatArmorPiece extends SlimefunArmorPiece implements CustomProtection {\n+\n+    private final ProtectionType[] types;\n+\n+    public HazmatArmorPiece(Category category, SlimefunItemStack item, RecipeType recipeType, ItemStack[] recipe, PotionEffect[] effects) {\n+        super(category, item, recipeType, recipe, effects, new NamespacedKey(SlimefunPlugin.instance, \"hazmat_suit\"));\n+\n+        types = new ProtectionType[] {ProtectionType.BEES, ProtectionType.RADIATION};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NjgxNQ==", "bodyText": "Should cancel. This will mess with other plugins.", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#discussion_r446586815", "createdAt": "2020-06-28T01:25:06Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/BeeListener.java", "diffHunk": "@@ -0,0 +1,51 @@\n+package io.github.thebusybiscuit.slimefun4.implementation.listeners;\n+\n+import java.util.Optional;\n+\n+import org.bukkit.entity.Bee;\n+import org.bukkit.entity.Player;\n+import org.bukkit.event.EventHandler;\n+import org.bukkit.event.Listener;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.inventory.ItemStack;\n+\n+import io.github.thebusybiscuit.cscorelib2.inventory.ItemUtils;\n+import io.github.thebusybiscuit.slimefun4.api.player.PlayerProfile;\n+import io.github.thebusybiscuit.slimefun4.core.attributes.ProtectionType;\n+import io.github.thebusybiscuit.slimefun4.implementation.SlimefunPlugin;\n+\n+/**\n+ * The listener for Hazmat Suit's {@link Bee} sting protection.\n+ * Only applied if the whole set is worn.\n+ *\n+ * @author Linox\n+ *\n+ */\n+public class BeeListener implements Listener {\n+\n+    public BeeListener(SlimefunPlugin plugin) {\n+        plugin.getServer().getPluginManager().registerEvents(this, plugin);\n+    }\n+\n+    @EventHandler\n+    public void onDamage(EntityDamageByEntityEvent e) {\n+        if (e.getDamager() instanceof Bee && e.getEntity() instanceof Player) {\n+\n+            Player p = (Player) e.getEntity();\n+            Optional<PlayerProfile> optional = PlayerProfile.find(p);\n+            if (!optional.isPresent()) {\n+                PlayerProfile.request(p);\n+                return;\n+            }\n+\n+            PlayerProfile profile = optional.get();\n+            if (profile.isProtected(ProtectionType.BEES)) {\n+                for (ItemStack armor : p.getInventory().getArmorContents()) {\n+                    ItemUtils.damageItem(armor, 1, false);\n+                }\n+                e.setDamage(0D);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a935951c229dc1c04646dcd9e72b03b30b81fc6d"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e271ac78631bd975f95c18a34da7ab3e1de9c75", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/3e271ac78631bd975f95c18a34da7ab3e1de9c75", "committedDate": "2020-06-28T02:29:51Z", "message": "Did more requested changes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzYwNzcz", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438760773", "createdAt": "2020-06-28T09:08:32Z", "commit": {"oid": "3e271ac78631bd975f95c18a34da7ab3e1de9c75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Nzc1NjY0", "url": "https://github.com/Slimefun/Slimefun4/pull/2057#pullrequestreview-438775664", "createdAt": "2020-06-28T12:24:55Z", "commit": {"oid": "3e271ac78631bd975f95c18a34da7ab3e1de9c75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2501, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}