{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMjExMDQ2", "number": 2045, "title": "Explosive Bow Area of Effect", "bodyText": "Description\n\nAdded Area of Effect functionality to Explosive Bow.\nChanges\n\nBetter knockback and damage calculation for Explosive Bow and area of effect.\nRelated Issues\n\n\nN/A\nChecklist\n\n\n\n I have fully tested the proposed changes and promise that they will not break everything into chaos.\n I have also tested the proposed changes in combination with various popular addons and can confirm my changes do not break them.\n I followed the existing code standards and didn't mess up the formatting.\n I did my best to add documentation to any public classes or methods I added.\n I added sufficient Unit Tests to cover my code.", "createdAt": "2020-06-25T19:19:53Z", "url": "https://github.com/Slimefun/Slimefun4/pull/2045", "merged": true, "mergeCommit": {"oid": "acd8278889518124797c56c615678f4a51cfdb92"}, "closed": true, "closedAt": "2020-06-29T09:46:45Z", "author": {"login": "LinoxGH"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuzmICAH2gAyNDQwMjExMDQ2OmUwMTZlYTExODAzMjc0ZTRlYmUzMDcyN2I1ZDhkZjAyNmM3M2FhYTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcv4eFaAFqTQzODg2NDc4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e016ea11803274e4ebe30727b5d8df026c73aaa1", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/e016ea11803274e4ebe30727b5d8df026c73aaa1", "committedDate": "2020-06-25T19:13:24Z", "message": "Explosive Bow Functionality Changed.\n\nExplosive Bow now deals an area of effect."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/1a8ff9c5111994036ba82884af831b6d4613b0e9", "committedDate": "2020-06-25T19:16:49Z", "message": "Merge branch 'master' of https://github.com/LinoxGH/Slimefun4 into ExplosiveBowChange"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njk0NTM3", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#pullrequestreview-438694537", "createdAt": "2020-06-27T12:35:04Z", "commit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMjozNTowNFrOGp1cGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMjozOTo1M1rOGp1giQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMDM0NA==", "bodyText": "You should just negate it and include this in the if-statement above.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446520344", "createdAt": "2020-06-27T12:35:04Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/listeners/SlimefunBowListener.java", "diffHunk": "@@ -69,6 +70,7 @@ public void onArrowHit(ProjectileHitEvent e) {\n     @EventHandler\n     public void onArrowSuccessfulHit(EntityDamageByEntityEvent e) {\n         if (e.getDamager() instanceof Arrow && e.getEntity() instanceof LivingEntity) {\n+            if (e.getCause() == EntityDamageEvent.DamageCause.ENTITY_EXPLOSION) return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMDQyOA==", "bodyText": "Never use == when comparing doubles, due to floating point errors, this is a very unreliable operation.\nYou should instead do sth like distance <= 0.05 or so.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446520428", "createdAt": "2020-06-27T12:35:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {\n+                    LivingEntity entityL = (LivingEntity) entity;\n+\n+                    double distance = entityL.getLocation().distance(n.getLocation());\n+                    double damage = calculateDamage(distance, e.getDamage());\n+\n+                    Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                    distanceVector.setY(distanceVector.getY() + 0.6D);\n+                    Vector entityVelocity = entityL.getVelocity();\n+                    Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / Math.round(damage))));\n+                    entityL.setVelocity(knockback);\n+\n+                    entityL.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, entityL.getLocation(), 1);\n+                    entityL.getWorld().playSound(entityL.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+\n+                    if (!entityL.getUniqueId().equals(n.getUniqueId())) {\n+                        entityL.damage(damage);\n+                        EntityDamageByEntityEvent damageEvent = new EntityDamageByEntityEvent(e.getDamager(), entityL, EntityDamageEvent.DamageCause.ENTITY_EXPLOSION, damage);\n+                        Bukkit.getPluginManager().callEvent(damageEvent);\n+                    }\n+                }\n+            }\n         };\n     }\n \n+    private double calculateDamage(double distance, double ogDamage) {\n+\n+        if (distance == 0D) return ogDamage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMDQzNw==", "bodyText": "The name \"ogDamage\" seems rather un-intuitive.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446520437", "createdAt": "2020-06-27T12:36:13Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {\n+                    LivingEntity entityL = (LivingEntity) entity;\n+\n+                    double distance = entityL.getLocation().distance(n.getLocation());\n+                    double damage = calculateDamage(distance, e.getDamage());\n+\n+                    Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                    distanceVector.setY(distanceVector.getY() + 0.6D);\n+                    Vector entityVelocity = entityL.getVelocity();\n+                    Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / Math.round(damage))));\n+                    entityL.setVelocity(knockback);\n+\n+                    entityL.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, entityL.getLocation(), 1);\n+                    entityL.getWorld().playSound(entityL.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+\n+                    if (!entityL.getUniqueId().equals(n.getUniqueId())) {\n+                        entityL.damage(damage);\n+                        EntityDamageByEntityEvent damageEvent = new EntityDamageByEntityEvent(e.getDamager(), entityL, EntityDamageEvent.DamageCause.ENTITY_EXPLOSION, damage);\n+                        Bukkit.getPluginManager().callEvent(damageEvent);\n+                    }\n+                }\n+            }\n         };\n     }\n \n+    private double calculateDamage(double distance, double ogDamage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMDUzNw==", "bodyText": "Why are you doing this?\nAlso seems quite wasteful to round it and then compare it with ==, should instead use a threshold.\nOr since you seem to want to always have at least a damage of 1 you can just use Math.max(1, damage) instead.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446520537", "createdAt": "2020-06-27T12:37:31Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {\n+                    LivingEntity entityL = (LivingEntity) entity;\n+\n+                    double distance = entityL.getLocation().distance(n.getLocation());\n+                    double damage = calculateDamage(distance, e.getDamage());\n+\n+                    Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                    distanceVector.setY(distanceVector.getY() + 0.6D);\n+                    Vector entityVelocity = entityL.getVelocity();\n+                    Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / Math.round(damage))));\n+                    entityL.setVelocity(knockback);\n+\n+                    entityL.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, entityL.getLocation(), 1);\n+                    entityL.getWorld().playSound(entityL.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+\n+                    if (!entityL.getUniqueId().equals(n.getUniqueId())) {\n+                        entityL.damage(damage);\n+                        EntityDamageByEntityEvent damageEvent = new EntityDamageByEntityEvent(e.getDamager(), entityL, EntityDamageEvent.DamageCause.ENTITY_EXPLOSION, damage);\n+                        Bukkit.getPluginManager().callEvent(damageEvent);\n+                    }\n+                }\n+            }\n         };\n     }\n \n+    private double calculateDamage(double distance, double ogDamage) {\n+\n+        if (distance == 0D) return ogDamage;\n+        double damage = ogDamage - Math.pow((distance / range.getValue()), 2.5);\n+        if (Math.round(damage) == 0D) damage += 1D;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMDY2Mw==", "bodyText": "This \"instanceof LivingEntity\" check is redundant, you are already doing this in the Predicate above.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446520663", "createdAt": "2020-06-27T12:37:57Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMDgyMw==", "bodyText": "Also this .IsValid() method should be moved to the Predicate", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446520823", "createdAt": "2020-06-27T12:38:22Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMTA1Mw==", "bodyText": ".distance() is a rather expensive operation and not really needed for this purpose, should rather use .distanceSquared() and then calculate the damage based on that.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446521053", "createdAt": "2020-06-27T12:38:56Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {\n+                    LivingEntity entityL = (LivingEntity) entity;\n+\n+                    double distance = entityL.getLocation().distance(n.getLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMTI1MQ==", "bodyText": "Why are you rounding the damage here?", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446521251", "createdAt": "2020-06-27T12:39:24Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {\n+                    LivingEntity entityL = (LivingEntity) entity;\n+\n+                    double distance = entityL.getLocation().distance(n.getLocation());\n+                    double damage = calculateDamage(distance, e.getDamage());\n+\n+                    Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                    distanceVector.setY(distanceVector.getY() + 0.6D);\n+                    Vector entityVelocity = entityL.getVelocity();\n+                    Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / Math.round(damage))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyMTQ4MQ==", "bodyText": "This check should probably happen wayyyyyyyy earlier. Best would be in the Predicate itself.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446521481", "createdAt": "2020-06-27T12:39:53Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity);\n+            for (Entity entity : entites) {\n+                if (entity.isValid() && entity instanceof LivingEntity) {\n+                    LivingEntity entityL = (LivingEntity) entity;\n+\n+                    double distance = entityL.getLocation().distance(n.getLocation());\n+                    double damage = calculateDamage(distance, e.getDamage());\n+\n+                    Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                    distanceVector.setY(distanceVector.getY() + 0.6D);\n+                    Vector entityVelocity = entityL.getVelocity();\n+                    Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / Math.round(damage))));\n+                    entityL.setVelocity(knockback);\n+\n+                    entityL.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, entityL.getLocation(), 1);\n+                    entityL.getWorld().playSound(entityL.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+\n+                    if (!entityL.getUniqueId().equals(n.getUniqueId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Njk3Nzg0", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#pullrequestreview-438697784", "createdAt": "2020-06-27T13:15:40Z", "commit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzoxNTo0MVrOGp1xTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxMzoxNTo0MVrOGp1xTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUyNTc3NA==", "bodyText": "Also should probably override the validation method for this, since we don't want negative or zero ranges.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446525774", "createdAt": "2020-06-27T13:15:41Z", "author": {"login": "TheBusyBiscuit"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,67 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<>(\"explosion-range\", 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8ff9c5111994036ba82884af831b6d4613b0e9"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "558d069a331793cc226901b8230eb2e6a95c853b", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/558d069a331793cc226901b8230eb2e6a95c853b", "committedDate": "2020-06-27T14:45:39Z", "message": "Did the requested changes + improvements."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NzM0Mjk5", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#pullrequestreview-438734299", "createdAt": "2020-06-28T01:02:11Z", "commit": {"oid": "558d069a331793cc226901b8230eb2e6a95c853b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowMjoxMVrOGp5Zsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTowOTowOVrOGp5bSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTI2Nw==", "bodyText": "This is a boxed int, null check needed.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446585267", "createdAt": "2020-06-28T01:02:11Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,70 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<Integer>(\"explosion-range\", 3) {\n+        @Override\n+        public boolean validateInput(Integer input) {\n+            return input > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d069a331793cc226901b8230eb2e6a95c853b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTM2Mw==", "bodyText": "Explosion particle for every entity in the AOE? Surely this should just be in the actual centre.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446585363", "createdAt": "2020-06-28T01:04:04Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,70 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<Integer>(\"explosion-range\", 3) {\n+        @Override\n+        public boolean validateInput(Integer input) {\n+            return input > 0;\n+        }\n+    };\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity && entity.isValid());\n+            for (Entity entity : entites) {\n+                LivingEntity entityL = (LivingEntity) entity;\n+\n+                Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                distanceVector.setY(distanceVector.getY() + 0.6D);\n+                Vector entityVelocity = entityL.getVelocity();\n+\n+                double distanceSquared = distanceVector.lengthSquared();\n+                double damage = calculateDamage(distanceSquared, e.getDamage());\n+\n+                Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / damage)));\n+                entityL.setVelocity(knockback);\n+\n+                entityL.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, entityL.getLocation(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d069a331793cc226901b8230eb2e6a95c853b"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTU3MA==", "bodyText": "Can you rename this \"n\" variable. It's very nondescript.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446585570", "createdAt": "2020-06-28T01:07:06Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,70 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<Integer>(\"explosion-range\", 3) {\n+        @Override\n+        public boolean validateInput(Integer input) {\n+            return input > 0;\n+        }\n+    };\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d069a331793cc226901b8230eb2e6a95c853b"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTY2Mg==", "bodyText": "This is a cancellable event. Also, like most events, this is a pre-damage event not post. So, move the damage down, make sure it isn't cancelled and then make sure the damage is actually correct.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446585662", "createdAt": "2020-06-28T01:08:59Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,70 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<Integer>(\"explosion-range\", 3) {\n+        @Override\n+        public boolean validateInput(Integer input) {\n+            return input > 0;\n+        }\n+    };\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity && entity.isValid());\n+            for (Entity entity : entites) {\n+                LivingEntity entityL = (LivingEntity) entity;\n+\n+                Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                distanceVector.setY(distanceVector.getY() + 0.6D);\n+                Vector entityVelocity = entityL.getVelocity();\n+\n+                double distanceSquared = distanceVector.lengthSquared();\n+                double damage = calculateDamage(distanceSquared, e.getDamage());\n+\n+                Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / damage)));\n+                entityL.setVelocity(knockback);\n+\n+                entityL.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, entityL.getLocation(), 1);\n+                entityL.getWorld().playSound(entityL.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+\n+                if (!entityL.getUniqueId().equals(n.getUniqueId())) {\n+                    entityL.damage(damage);\n+                    EntityDamageByEntityEvent damageEvent = new EntityDamageByEntityEvent(e.getDamager(), entityL, EntityDamageEvent.DamageCause.ENTITY_EXPLOSION, damage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d069a331793cc226901b8230eb2e6a95c853b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NTY3Mw==", "bodyText": "Empty line.", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#discussion_r446585673", "createdAt": "2020-06-28T01:09:09Z", "author": {"login": "WalshyDev"}, "path": "src/main/java/io/github/thebusybiscuit/slimefun4/implementation/items/weapons/ExplosiveBow.java", "diffHunk": "@@ -1,28 +1,70 @@\n package io.github.thebusybiscuit.slimefun4.implementation.items.weapons;\n \n+import org.bukkit.Bukkit;\n+import org.bukkit.Particle;\n import org.bukkit.Sound;\n+import org.bukkit.entity.Entity;\n+import org.bukkit.entity.LivingEntity;\n+import org.bukkit.event.entity.EntityDamageByEntityEvent;\n+import org.bukkit.event.entity.EntityDamageEvent;\n import org.bukkit.inventory.ItemStack;\n import org.bukkit.util.Vector;\n \n+import io.github.thebusybiscuit.slimefun4.api.items.ItemSetting;\n import me.mrCookieSlime.Slimefun.Objects.Category;\n import me.mrCookieSlime.Slimefun.Objects.handlers.BowShootHandler;\n import me.mrCookieSlime.Slimefun.api.SlimefunItemStack;\n \n+import java.util.Collection;\n+\n public class ExplosiveBow extends SlimefunBow {\n \n+    private final ItemSetting<Integer> range = new ItemSetting<Integer>(\"explosion-range\", 3) {\n+        @Override\n+        public boolean validateInput(Integer input) {\n+            return input > 0;\n+        }\n+    };\n+\n     public ExplosiveBow(Category category, SlimefunItemStack item, ItemStack[] recipe) {\n         super(category, item, recipe);\n+        addItemSetting(range);\n     }\n \n     @Override\n     public BowShootHandler onShoot() {\n         return (e, n) -> {\n-            Vector vector = n.getVelocity();\n-            vector.setY(0.6);\n-            n.setVelocity(vector);\n-            n.getWorld().createExplosion(n.getLocation(), 0F);\n-            n.getWorld().playSound(n.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+            Collection<Entity> entites = n.getWorld().getNearbyEntities(n.getLocation(), range.getValue(), range.getValue(), range.getValue(), entity -> entity instanceof LivingEntity && entity.isValid());\n+            for (Entity entity : entites) {\n+                LivingEntity entityL = (LivingEntity) entity;\n+\n+                Vector distanceVector = entityL.getLocation().toVector().subtract(n.getLocation().toVector());\n+                distanceVector.setY(distanceVector.getY() + 0.6D);\n+                Vector entityVelocity = entityL.getVelocity();\n+\n+                double distanceSquared = distanceVector.lengthSquared();\n+                double damage = calculateDamage(distanceSquared, e.getDamage());\n+\n+                Vector knockback = entityVelocity.add(distanceVector.normalize().multiply((int) (e.getDamage() / damage)));\n+                entityL.setVelocity(knockback);\n+\n+                entityL.getWorld().spawnParticle(Particle.EXPLOSION_LARGE, entityL.getLocation(), 1);\n+                entityL.getWorld().playSound(entityL.getLocation(), Sound.ENTITY_GENERIC_EXPLODE, 1F, 1F);\n+\n+                if (!entityL.getUniqueId().equals(n.getUniqueId())) {\n+                    entityL.damage(damage);\n+                    EntityDamageByEntityEvent damageEvent = new EntityDamageByEntityEvent(e.getDamager(), entityL, EntityDamageEvent.DamageCause.ENTITY_EXPLOSION, damage);\n+                    Bukkit.getPluginManager().callEvent(damageEvent);\n+                }\n+            }\n         };\n     }\n \n+    private double calculateDamage(double distanceSquared, double originalDamage) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "558d069a331793cc226901b8230eb2e6a95c853b"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3d21daf6a65703812ada0b082a5a02e36f906f9", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/f3d21daf6a65703812ada0b082a5a02e36f906f9", "committedDate": "2020-06-28T02:38:49Z", "message": "Did the requested changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7ba054befffd980a495d262120f12f3c3d9516c", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/d7ba054befffd980a495d262120f12f3c3d9516c", "committedDate": "2020-06-28T02:39:32Z", "message": "Removed unused imports."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "911ee2340f5c782f0022b6a37b3ae66e45e630d5", "author": {"user": {"login": "LinoxGH", "name": null}}, "url": "https://github.com/Slimefun/Slimefun4/commit/911ee2340f5c782f0022b6a37b3ae66e45e630d5", "committedDate": "2020-06-28T11:22:15Z", "message": "Did a requested change."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODIzMTMz", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#pullrequestreview-438823133", "createdAt": "2020-06-28T23:29:08Z", "commit": {"oid": "911ee2340f5c782f0022b6a37b3ae66e45e630d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4ODY0Nzg2", "url": "https://github.com/Slimefun/Slimefun4/pull/2045#pullrequestreview-438864786", "createdAt": "2020-06-29T03:28:04Z", "commit": {"oid": "911ee2340f5c782f0022b6a37b3ae66e45e630d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2491, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}