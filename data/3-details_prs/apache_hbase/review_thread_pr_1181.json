{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NDQ5ODUz", "number": 1181, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzowNDozN1rODglVAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTo0NDoyN1rODhSs2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDkyNjEwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzowNDozOFrOFq3PoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwNzowNDozOFrOFq3PoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQ4OTYzMw==", "bodyText": "UTIL.waitFor(30000, () -> !master.getSnapshotManager().isTakingAnySnapshot());?", "url": "https://github.com/apache/hbase/pull/1181#discussion_r380489633", "createdAt": "2020-02-18T07:04:38Z", "author": {"login": "infraio"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java", "diffHunk": "@@ -530,8 +530,11 @@ public boolean evaluate() throws Exception {\n         return UTIL.getHBaseAdmin().listSnapshots(Pattern.compile(snapshotName)).size() == 1;\n       }\n     });\n-    assertTrue(master.getSnapshotManager().isTakingAnySnapshot());\n-    Thread.sleep(11 * 1000L);\n-    assertFalse(master.getSnapshotManager().isTakingAnySnapshot());\n+    UTIL.waitFor(30000, new Predicate<Exception>() {\n+      @Override\n+      public boolean evaluate() throws Exception {\n+        return UTIL.getHBaseAdmin().listSnapshots(Pattern.compile(snapshotName)).size() == 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb45e0e9c45271c4c2824b24514bf1b5c2c6d36"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjM1OTkyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMTo0NDoyN1rOFr-bHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwMzoyMDowMFrOFsBigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY1NTgzOA==", "bodyText": "Should add a \"!\" here? It is assertFalse before.", "url": "https://github.com/apache/hbase/pull/1181#discussion_r381655838", "createdAt": "2020-02-20T01:44:27Z", "author": {"login": "infraio"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java", "diffHunk": "@@ -530,8 +530,11 @@ public boolean evaluate() throws Exception {\n         return UTIL.getHBaseAdmin().listSnapshots(Pattern.compile(snapshotName)).size() == 1;\n       }\n     });\n-    assertTrue(master.getSnapshotManager().isTakingAnySnapshot());\n-    Thread.sleep(11 * 1000L);\n-    assertFalse(master.getSnapshotManager().isTakingAnySnapshot());\n+    UTIL.waitFor(30000, new Predicate<Exception>() {\n+      @Override\n+      public boolean evaluate() throws Exception {\n+        return master.getSnapshotManager().isTakingAnySnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b39ec33dcb8da8df5e305bbece4fc8eaa47dfeb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY3MTg0Ng==", "bodyText": "Oh right! My bad. Overlooked the condition.", "url": "https://github.com/apache/hbase/pull/1181#discussion_r381671846", "createdAt": "2020-02-20T02:13:11Z", "author": {"login": "jatsakthi"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java", "diffHunk": "@@ -530,8 +530,11 @@ public boolean evaluate() throws Exception {\n         return UTIL.getHBaseAdmin().listSnapshots(Pattern.compile(snapshotName)).size() == 1;\n       }\n     });\n-    assertTrue(master.getSnapshotManager().isTakingAnySnapshot());\n-    Thread.sleep(11 * 1000L);\n-    assertFalse(master.getSnapshotManager().isTakingAnySnapshot());\n+    UTIL.waitFor(30000, new Predicate<Exception>() {\n+      @Override\n+      public boolean evaluate() throws Exception {\n+        return master.getSnapshotManager().isTakingAnySnapshot();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY1NTgzOA=="}, "originalCommit": {"oid": "9b39ec33dcb8da8df5e305bbece4fc8eaa47dfeb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTcwNjg4MA==", "bodyText": "Corrected.", "url": "https://github.com/apache/hbase/pull/1181#discussion_r381706880", "createdAt": "2020-02-20T03:20:00Z", "author": {"login": "jatsakthi"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/cleaner/TestSnapshotFromMaster.java", "diffHunk": "@@ -530,8 +530,11 @@ public boolean evaluate() throws Exception {\n         return UTIL.getHBaseAdmin().listSnapshots(Pattern.compile(snapshotName)).size() == 1;\n       }\n     });\n-    assertTrue(master.getSnapshotManager().isTakingAnySnapshot());\n-    Thread.sleep(11 * 1000L);\n-    assertFalse(master.getSnapshotManager().isTakingAnySnapshot());\n+    UTIL.waitFor(30000, new Predicate<Exception>() {\n+      @Override\n+      public boolean evaluate() throws Exception {\n+        return master.getSnapshotManager().isTakingAnySnapshot();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTY1NTgzOA=="}, "originalCommit": {"oid": "9b39ec33dcb8da8df5e305bbece4fc8eaa47dfeb"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2082, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}