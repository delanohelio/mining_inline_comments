{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTk0OTk3", "number": 1141, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxNjo0MVrODd5q8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozMzo1MVrODfC6jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgwMTc5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxNjo0MVrOFmxOAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxNjo0MVrOFmxOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NjYwOA==", "bodyText": "nit: Can probably be simplified to masterThreads != null && masterThreads.size() >=3...\nbecause the second check automatically means isNotEmpty().", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376196608", "createdAt": "2020-02-07T03:16:41Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      StartMiniClusterOption option = StartMiniClusterOption.builder()\n+        .numMasters(NUM_MASTERS)\n+        .numRegionServers(NUM_RS)\n+        .numDataNodes(NUM_RS)\n+        .build();\n+      final MiniHBaseCluster cluster = htu.startMiniCluster(option);\n+\n+      // wait for all master thread to spawn and start their run loop.\n+      final long thirtySeconds = TimeUnit.SECONDS.toMillis(30);\n+      final long oneSecond = TimeUnit.SECONDS.toMillis(1);\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond, () -> {\n+        final List<MasterThread> masterThreads = cluster.getMasterThreads();\n+        return CollectionUtils.isNotEmpty(masterThreads)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgxOTk4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoyOToxN1rOFmxYgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxNTo1MVrOFoRv-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTI5OA==", "bodyText": "nit: You could just use shutdownMiniCluster(). It appears null safe on underlying minicluster", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376199298", "createdAt": "2020-02-07T03:29:17Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();\n+          } catch (Exception e) {\n+            LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+          }\n+          LOG.info(\"After call to shutdown master\");\n+          finalCluster.waitOnMaster(MASTER_INDEX);\n         }\n-        LOG.info(\"After call to shutdown master\");\n-        cluster.waitOnMaster(MASTER_INDEX);\n+      };\n+      shutdownThread.start();\n+      LOG.info(\"Called master join on \" + master.getName());\n+      master.join();\n+      shutdownThread.join();\n+\n+      List<MasterThread> masterThreads = cluster.getMasters();\n+      // make sure all the masters properly shutdown\n+      assertEquals(0, masterThreads.size());\n+    } finally {\n+      if (cluster != null) {\n+        cluster.shutdown();\n+      }\n+      if (htu != null) {\n+        htu.shutdownMiniZKCluster();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3ODE2OQ==", "bodyText": "nod", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377778169", "createdAt": "2020-02-11T17:15:51Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();\n+          } catch (Exception e) {\n+            LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+          }\n+          LOG.info(\"After call to shutdown master\");\n+          finalCluster.waitOnMaster(MASTER_INDEX);\n         }\n-        LOG.info(\"After call to shutdown master\");\n-        cluster.waitOnMaster(MASTER_INDEX);\n+      };\n+      shutdownThread.start();\n+      LOG.info(\"Called master join on \" + master.getName());\n+      master.join();\n+      shutdownThread.join();\n+\n+      List<MasterThread> masterThreads = cluster.getMasters();\n+      // make sure all the masters properly shutdown\n+      assertEquals(0, masterThreads.size());\n+    } finally {\n+      if (cluster != null) {\n+        cluster.shutdown();\n+      }\n+      if (htu != null) {\n+        htu.shutdownMiniZKCluster();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTI5OA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjgyMDc5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzozMDowN1rOFmxZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoyMzoyOFrOFn6VcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTQzOA==", "bodyText": "This is the place that the master registry exposed a race ..(shutdown goes missing..). Rebase will not be clean now :'(", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376199438", "createdAt": "2020-02-07T03:30:07Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MTkxMg==", "bodyText": "I think this is the source of the instability I've seen in this test, but I cannot reproduce it reliably.\nYou see this test failing reliably on your branch?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376481912", "createdAt": "2020-02-07T16:23:34Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTQzOA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNjkwOA==", "bodyText": "No, not after adding this check \n  \n    \n      hbase/hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java\n    \n    \n         Line 141\n      in\n      d110c08\n    \n    \n    \n    \n\n        \n          \n           // Switching to master registry exposed a race in the master bootstrap that can result in a \n        \n    \n  \n\n\nThis check basically works around the actual problem without fixing it. Ideally you could do the same because that check is anyway applied in the master after the branch merge.\nFwiw, I think this race is exposed after committing HBASE-23764, because that speeds up the connections.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376536908", "createdAt": "2020-02-07T18:22:58Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTQzOA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5NDU0NA==", "bodyText": "I re-read your changes on the branch. Let me try to merge those with the general cleanup I'm attempting here. Hopefully when it's done, you can just drop the change to this test from the feature branch.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377394544", "createdAt": "2020-02-11T00:23:28Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTQzOA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTUzNzA4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo1NDo0MFrOFnLaFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMDoxMzoxMVrOFn6KmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNTY4NA==", "bodyText": "For sure? Maybe medium when you run it standalone but under load, maybe it goes over the 50s upper-bound (only saying because did a pass on these recently).", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376625684", "createdAt": "2020-02-07T21:54:40Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -33,23 +34,34 @@\n import org.apache.hadoop.hbase.client.Admin;\n import org.apache.hadoop.hbase.client.Connection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n-import org.apache.hadoop.hbase.testclassification.LargeTests;\n import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.MasterThread;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.hbase.thirdparty.org.apache.commons.collections4.CollectionUtils;\n \n-@Category({MasterTests.class, LargeTests.class})\n+@Category({MasterTests.class, MediumTests.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MTc2OA==", "bodyText": "Seems to be snappy for me... What's the idea behind these annotations? They're supposed to indicate the local dev experience, or the overworked Jenkins experience?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377391768", "createdAt": "2020-02-11T00:13:11Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -33,23 +34,34 @@\n import org.apache.hadoop.hbase.client.Admin;\n import org.apache.hadoop.hbase.client.Connection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n-import org.apache.hadoop.hbase.testclassification.LargeTests;\n import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.MasterThread;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.hbase.thirdparty.org.apache.commons.collections4.CollectionUtils;\n \n-@Category({MasterTests.class, LargeTests.class})\n+@Category({MasterTests.class, MediumTests.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNTY4NA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzYwOTYxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1NjozNFrOFnv1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0Njo1MFrOFo9_-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMjQzOA==", "bodyText": "You don't want to get a new conf to go w/ the new htu?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377222438", "createdAt": "2020-02-10T17:56:34Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM5MTkwNg==", "bodyText": "This is a new conf, created above... Let me move them in here after htu is created but before cluster start. I'm not clear on why hbase.ipc.client.failed.servers.expiry is set so aggressively.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377391906", "createdAt": "2020-02-11T00:13:37Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMjQzOA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjI3OA==", "bodyText": "On hbase.ipc.client.failed.servers.expiry being aggressive... remove the config?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378036278", "createdAt": "2020-02-12T04:32:35Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMjQzOA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMzE2Mg==", "bodyText": "yeah, removed.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378503162", "createdAt": "2020-02-12T20:46:50Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMjQzOA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODQ4ODYzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1OToxNFrOFoek2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1OToxNFrOFoek2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODMxNA==", "bodyText": "Bah. need to delete this commented code.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377988314", "createdAt": "2020-02-12T00:59:14Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,103 +82,172 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      StartMiniClusterOption option = StartMiniClusterOption.builder()\n+        .numMasters(NUM_MASTERS)\n+        .numRegionServers(NUM_RS)\n+        .numDataNodes(NUM_RS)\n+        .build();\n+      final MiniHBaseCluster cluster = htu.startMiniCluster(option);\n+\n+      // wait for all master thread to spawn and start their run loop.\n+      final long thirtySeconds = TimeUnit.SECONDS.toMillis(30);\n+      final long oneSecond = TimeUnit.SECONDS.toMillis(1);\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond, () -> {\n+        final List<MasterThread> masterThreads = cluster.getMasterThreads();\n+        return masterThreads != null\n+          && masterThreads.size() >= 3\n+          && masterThreads.stream().allMatch(Thread::isAlive);\n+      }));\n+\n+      // find the active master\n+      final HMaster active = cluster.getMaster();\n+      assertNotNull(active);\n+\n+      // make sure the other two are backup masters\n+      ClusterMetrics status = active.getClusterMetrics();\n+      assertEquals(2, status.getBackupMasterNames().size());\n+\n+      // tell the active master to shutdown the cluster\n+      active.shutdown();\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveMasterThreads())));\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveRegionServerThreads())));\n+    } finally {\n+      if (htu != null) {\n+        htu.shutdownMiniCluster();\n+        htu = null;\n       }\n     }\n-    assertNotNull(active);\n-    // make sure the other two are backup masters\n-    ClusterMetrics status = active.getClusterMetrics();\n-    assertEquals(2, status.getBackupMasterNames().size());\n-\n-    // tell the active master to shutdown the cluster\n-    active.shutdown();\n-\n-    for (int i = NUM_MASTERS - 1; i >= 0 ;--i) {\n-      cluster.waitOnMaster(i);\n-    }\n-    // make sure all the masters properly shutdown\n-    assertEquals(0, masterThreads.size());\n-\n-    htu.shutdownMiniCluster();\n   }\n \n-  private Connection createConnection(HBaseTestingUtility util) throws InterruptedException {\n-    // the cluster may have not been initialized yet which means we can not get the cluster id thus\n-    // an exception will be thrown. So here we need to retry.\n-    for (;;) {\n-      try {\n-        return ConnectionFactory.createConnection(util.getConfiguration());\n-      } catch (Exception e) {\n-        Thread.sleep(10);\n+  /**\n+   * This test appears to be an intentional race between a thread that issues a shutdown RPC to the\n+   * master, while the master is concurrently realizing it cannot initialize because there are no\n+   * region servers available to it. The expected behavior is that master initialization is\n+   * interruptable via said shutdown RPC.\n+   */\n+  @Test\n+  public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n+    LocalHBaseCluster hbaseCluster = null;\n+    try {\n+      htu =  new HBaseTestingUtility(\n+        createMasterShutdownBeforeStartingAnyRegionServerConfiguration());\n+\n+      // configure a cluster with\n+      final StartMiniClusterOption options = StartMiniClusterOption.builder()\n+        .numDataNodes(1)\n+        .numMasters(1)\n+        .numRegionServers(0)\n+        .masterClass(HMaster.class)\n+        .rsClass(MiniHBaseCluster.MiniHBaseClusterRegionServer.class)\n+        .createRootDir(true)\n+        .build();\n+\n+      // Can't simply `htu.startMiniCluster(options)` because that method waits for the master to\n+      // start completely. However, this test's premise is that a partially started master should\n+      // still respond to a shutdown RPC. So instead, we manage each component lifecycle\n+      // independently.\n+      // I think it's not worth refactoring HTU's helper methods just for this class.\n+      htu.startMiniDFSCluster(options.getNumDataNodes());\n+      htu.startMiniZKCluster(options.getNumZkServers());\n+      htu.createRootDir();\n+      hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n+        options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n+      final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422). The race is essentially because the server\n+        // manager in HMaster is not initialized by the time shutdown() RPC (below) is made to the\n+        // master. The suspected reason as to why it was uncommon before HBASE-18095 is because the\n+        // connection creation with ZK registry is so slow that by then the server manager is\n+        // usually init'ed in time for the RPC to be made. For now, adding an explicit wait() in\n+        // the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+//        assertNotEquals(\"timeout waiting for server manager to become available.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODUyMTY1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToyMDoyMFrOFoe5ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTowMTo1MFrOFo-bUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzYxMA==", "bodyText": "I think another reasonable alternative here is to reject the RPC back to the client with some form of DoNotRetryIOException and a message about cannot shutdown from an inactive master.\nWhat do you think?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377993610", "createdAt": "2020-02-12T01:20:20Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -2804,9 +2804,15 @@ public MemoryBoundedLogMessageBuffer getRegionServerFatalLogBuffer() {\n    * Master runs a coordinated stop of all RegionServers and then itself.\n    */\n   public void shutdown() throws IOException {\n+    if (!isInitialized()) {\n+      LOG.info(\"Shutdown requested but we're not the active master. Proceeding as a stop.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAxODQzNQ==", "bodyText": "Well, I'm not entirely sure if this is the intended way to stop stand-by masters. Reading the code.. it looks like the active master coordinates a proper cluster shutdown. In that process, it removes the /hbase/running znode that the standb-bys keep a watch on. See the following code in ActiveMasterManager..\n@Override\n  public void nodeDeleted(String path) {\n\n    // We need to keep track of the cluster's shutdown status while\n    // we wait on the current master. We consider that, if the cluster\n    // was already in a \"shutdown\" state when we started, that this master\n    // is part of a new cluster that was started shortly after the old cluster\n    // shut down, so that state is now irrelevant. This means that the shutdown\n    // state must be set while we wait on the active master in order\n    // to shutdown this master. See HBASE-8519.\n    if(path.equals(watcher.getZNodePaths().clusterStateZNode) && !master.isStopped()) {\n      clusterShutDown.set(true);\n    }\n\n\nIdeally they should shut themselves down if the ZK event notifications happen as expected. Is that not the case?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378018435", "createdAt": "2020-02-12T03:04:12Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -2804,9 +2804,15 @@ public MemoryBoundedLogMessageBuffer getRegionServerFatalLogBuffer() {\n    * Master runs a coordinated stop of all RegionServers and then itself.\n    */\n   public void shutdown() throws IOException {\n+    if (!isInitialized()) {\n+      LOG.info(\"Shutdown requested but we're not the active master. Proceeding as a stop.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzYxMA=="}, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTEyOQ==", "bodyText": "Yeah, this stuff is tricky and there be dragons if you disturb the current order.\nThe standbys don't go down currently?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378035129", "createdAt": "2020-02-12T04:26:10Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -2804,9 +2804,15 @@ public MemoryBoundedLogMessageBuffer getRegionServerFatalLogBuffer() {\n    * Master runs a coordinated stop of all RegionServers and then itself.\n    */\n   public void shutdown() throws IOException {\n+    if (!isInitialized()) {\n+      LOG.info(\"Shutdown requested but we're not the active master. Proceeding as a stop.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzYxMA=="}, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMDE2Mw==", "bodyText": "@bharathv has the gist of it. At the point of this race condition -- all four of these fields are null at the time the rpc is received -- the master will simply do nothing. However, any master (active or backup) can currently receive the rpc and if it's clusterStatusTracker is non-null, it will delete this ZK node. From there, in the case of a backup master, the ActiveMasterManager will notice and stop itself.\nRelated, looks like there's an early-out in ServerManager#shutdown that can result in a master stopping without properly shutting down its procedure store.\n    if (onlineServers.isEmpty()) {\n      // we do not synchronize here so this may cause a double stop, but not a big deal\n      master.stop(\"OnlineServer=0 right after cluster shutdown set\");\n    }", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378510163", "createdAt": "2020-02-12T21:01:50Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -2804,9 +2804,15 @@ public MemoryBoundedLogMessageBuffer getRegionServerFatalLogBuffer() {\n    * Master runs a coordinated stop of all RegionServers and then itself.\n    */\n   public void shutdown() throws IOException {\n+    if (!isInitialized()) {\n+      LOG.info(\"Shutdown requested but we're not the active master. Proceeding as a stop.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzYxMA=="}, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODc5NTA3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDoyNzo0OFrOFohc3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo0NjowMlrOFpfW2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTQyMg==", "bodyText": "We can skip an @after ? i.e. should the shutdown of cluster be in @after if not there already.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378035422", "createdAt": "2020-02-12T04:27:48Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -30,26 +34,38 @@\n import org.apache.hadoop.hbase.LocalHBaseCluster;\n import org.apache.hadoop.hbase.MiniHBaseCluster;\n import org.apache.hadoop.hbase.StartMiniClusterOption;\n-import org.apache.hadoop.hbase.client.Admin;\n-import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.Waiter;\n+import org.apache.hadoop.hbase.client.AsyncConnection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n import org.apache.hadoop.hbase.testclassification.LargeTests;\n import org.apache.hadoop.hbase.testclassification.MasterTests;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.MasterThread;\n+import org.apache.hadoop.hbase.zookeeper.ReadOnlyZKClient;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.hbase.thirdparty.org.apache.commons.collections4.CollectionUtils;\n \n @Category({MasterTests.class, LargeTests.class})\n public class TestMasterShutdown {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n \n   @ClassRule\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestMasterShutdown.class);\n \n-  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n+  private HBaseTestingUtility htu;\n+\n+  @Before\n+  public void shutdownCluster() throws IOException {\n+    if (htu != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMDgwMg==", "bodyText": "I'm not exactly sure what the junit contract is on executing finally clauses and after method in the face of timeouts, as implemented with our classifier rule. I was being extra-special redundant with this cleanup. Probably one or the other is fine. Let me see if i can understand what junit does.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378500802", "createdAt": "2020-02-12T20:41:51Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -30,26 +34,38 @@\n import org.apache.hadoop.hbase.LocalHBaseCluster;\n import org.apache.hadoop.hbase.MiniHBaseCluster;\n import org.apache.hadoop.hbase.StartMiniClusterOption;\n-import org.apache.hadoop.hbase.client.Admin;\n-import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.Waiter;\n+import org.apache.hadoop.hbase.client.AsyncConnection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n import org.apache.hadoop.hbase.testclassification.LargeTests;\n import org.apache.hadoop.hbase.testclassification.MasterTests;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.MasterThread;\n+import org.apache.hadoop.hbase.zookeeper.ReadOnlyZKClient;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.hbase.thirdparty.org.apache.commons.collections4.CollectionUtils;\n \n @Category({MasterTests.class, LargeTests.class})\n public class TestMasterShutdown {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n \n   @ClassRule\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestMasterShutdown.class);\n \n-  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n+  private HBaseTestingUtility htu;\n+\n+  @Before\n+  public void shutdownCluster() throws IOException {\n+    if (htu != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTQyMg=="}, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA0OTY4OA==", "bodyText": "I tried writing a test for HBaseClassTestRule  and the Timeout class it uses to assert the behavior of a miniCluster in the face of the interrupt, but that took me round in circles. Going to pass on that for the time being.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r379049688", "createdAt": "2020-02-13T18:46:02Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -30,26 +34,38 @@\n import org.apache.hadoop.hbase.LocalHBaseCluster;\n import org.apache.hadoop.hbase.MiniHBaseCluster;\n import org.apache.hadoop.hbase.StartMiniClusterOption;\n-import org.apache.hadoop.hbase.client.Admin;\n-import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.Waiter;\n+import org.apache.hadoop.hbase.client.AsyncConnection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n import org.apache.hadoop.hbase.testclassification.LargeTests;\n import org.apache.hadoop.hbase.testclassification.MasterTests;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.MasterThread;\n+import org.apache.hadoop.hbase.zookeeper.ReadOnlyZKClient;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.hbase.thirdparty.org.apache.commons.collections4.CollectionUtils;\n \n @Category({MasterTests.class, LargeTests.class})\n public class TestMasterShutdown {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n \n   @ClassRule\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestMasterShutdown.class);\n \n-  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n+  private HBaseTestingUtility htu;\n+\n+  @Before\n+  public void shutdownCluster() throws IOException {\n+    if (htu != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTQyMg=="}, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODgwMjA3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozMzo1MVrOFohhEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozMzo1MVrOFohhEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjQ5Ng==", "bodyText": "Somehow we are skipping this? Odd. Move to an @after?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378036496", "createdAt": "2020-02-12T04:33:51Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,103 +82,172 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      StartMiniClusterOption option = StartMiniClusterOption.builder()\n+        .numMasters(NUM_MASTERS)\n+        .numRegionServers(NUM_RS)\n+        .numDataNodes(NUM_RS)\n+        .build();\n+      final MiniHBaseCluster cluster = htu.startMiniCluster(option);\n+\n+      // wait for all master thread to spawn and start their run loop.\n+      final long thirtySeconds = TimeUnit.SECONDS.toMillis(30);\n+      final long oneSecond = TimeUnit.SECONDS.toMillis(1);\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond, () -> {\n+        final List<MasterThread> masterThreads = cluster.getMasterThreads();\n+        return masterThreads != null\n+          && masterThreads.size() >= 3\n+          && masterThreads.stream().allMatch(Thread::isAlive);\n+      }));\n+\n+      // find the active master\n+      final HMaster active = cluster.getMaster();\n+      assertNotNull(active);\n+\n+      // make sure the other two are backup masters\n+      ClusterMetrics status = active.getClusterMetrics();\n+      assertEquals(2, status.getBackupMasterNames().size());\n+\n+      // tell the active master to shutdown the cluster\n+      active.shutdown();\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveMasterThreads())));\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveRegionServerThreads())));\n+    } finally {\n+      if (htu != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2064, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}