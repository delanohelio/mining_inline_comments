{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzMzMzEy", "number": 1062, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzozNzowNlrODZDv6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyODoyMVrODZJRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAyNDA5OnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzozNzowNlrOFfP2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo0OTo1OVrOFgDIoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTg0NQ==", "bodyText": "Is there already a Jira for this?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368309845", "createdAt": "2020-01-19T17:37:06Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -377,6 +378,27 @@ private static int compareRows(byte[] left, int loffset, int llength, byte[] rig\n       return result;\n     }\n \n+    @Override\n+    public int compareRows(ByteBuffer row, Cell cell) {\n+      byte [] array;\n+      int offset;\n+      int len = row.remaining();\n+      if (row.hasArray()) {\n+        array = row.array();\n+        offset = row.position() + row.arrayOffset();\n+      } else {\n+        // This is awful, we copy the row array if offheap just so we can do a compare.\n+        // We do this elsewhere too when Cell is backed by an offheap ByteBuffer.\n+        // Needs fixing. TODO.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyMzkxNw==", "bodyText": "No.\nSince making this comment, I see that we do this whenever the BB is offheap.  Let me make an issue. This issue adds a method to CellComparator that takes a row held in a ByteBuffer. We need more of this with methods in Comparator that can stride through a BB by index so we don't have to copy on heap to compare. The hard part is an implementation that does not insist on two compare methods -- one for array and another for BB.   Would be good if could have one compare only.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368323917", "createdAt": "2020-01-19T21:23:26Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -377,6 +378,27 @@ private static int compareRows(byte[] left, int loffset, int llength, byte[] rig\n       return result;\n     }\n \n+    @Override\n+    public int compareRows(ByteBuffer row, Cell cell) {\n+      byte [] array;\n+      int offset;\n+      int len = row.remaining();\n+      if (row.hasArray()) {\n+        array = row.array();\n+        offset = row.position() + row.arrayOffset();\n+      } else {\n+        // This is awful, we copy the row array if offheap just so we can do a compare.\n+        // We do this elsewhere too when Cell is backed by an offheap ByteBuffer.\n+        // Needs fixing. TODO.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTg0NQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0NTIwNA==", "bodyText": "Are you sure on this STack. All the impl of the BB vs Array (vice versa) or BB vs BB all happens inside the BBUtils method. There we are clearly ensuring that we either call getXXxOffset() or getXXXPosition() so that we avoide copying onheap. Only when a user tries to do getRowArray on a BB backed cell we try to copy the row part and then do the comparsion. In that case he should also be using getRowOfset() only which would be 0/.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368445204", "createdAt": "2020-01-20T09:32:23Z", "author": {"login": "ramkrish86"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -377,6 +378,27 @@ private static int compareRows(byte[] left, int loffset, int llength, byte[] rig\n       return result;\n     }\n \n+    @Override\n+    public int compareRows(ByteBuffer row, Cell cell) {\n+      byte [] array;\n+      int offset;\n+      int len = row.remaining();\n+      if (row.hasArray()) {\n+        array = row.array();\n+        offset = row.position() + row.arrayOffset();\n+      } else {\n+        // This is awful, we copy the row array if offheap just so we can do a compare.\n+        // We do this elsewhere too when Cell is backed by an offheap ByteBuffer.\n+        // Needs fixing. TODO.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTg0NQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxODI1OQ==", "bodyText": "Only when a user tries to do getRowArray on a BB backed cell we try to copy the row part and then do the comparsion. In that case he should also be using getRowOfset() only which would be\n\nI should have been more specific. Lets make it so no need to copy-to-compare ever.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368618259", "createdAt": "2020-01-20T15:53:57Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -377,6 +378,27 @@ private static int compareRows(byte[] left, int loffset, int llength, byte[] rig\n       return result;\n     }\n \n+    @Override\n+    public int compareRows(ByteBuffer row, Cell cell) {\n+      byte [] array;\n+      int offset;\n+      int len = row.remaining();\n+      if (row.hasArray()) {\n+        array = row.array();\n+        offset = row.position() + row.arrayOffset();\n+      } else {\n+        // This is awful, we copy the row array if offheap just so we can do a compare.\n+        // We do this elsewhere too when Cell is backed by an offheap ByteBuffer.\n+        // Needs fixing. TODO.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTg0NQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MDExMw==", "bodyText": "Made the comment more mild. Added pointer to BBUtils, that we do here what it does. Added note to fix ever having to copy on heap.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369150113", "createdAt": "2020-01-21T17:49:59Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -377,6 +378,27 @@ private static int compareRows(byte[] left, int loffset, int llength, byte[] rig\n       return result;\n     }\n \n+    @Override\n+    public int compareRows(ByteBuffer row, Cell cell) {\n+      byte [] array;\n+      int offset;\n+      int len = row.remaining();\n+      if (row.hasArray()) {\n+        array = row.array();\n+        offset = row.position() + row.arrayOffset();\n+      } else {\n+        // This is awful, we copy the row array if offheap just so we can do a compare.\n+        // We do this elsewhere too when Cell is backed by an offheap ByteBuffer.\n+        // Needs fixing. TODO.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTg0NQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAyNDgxOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzozODoyN1rOFfP2qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1MDowOFrOFgDI6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTkzMQ==", "bodyText": "NIT: Use {@code tableName} instead.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368309931", "createdAt": "2020-01-19T17:38:27Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MDE4Nw==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369150187", "createdAt": "2020-01-21T17:50:08Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTkzMQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAyNTI4OnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzozODo1M1rOFfP23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQyMToyMDo0NVrOFfQskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTk4Mg==", "bodyText": "NIT: Use {@code tableName} instead.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368309982", "createdAt": "2020-01-19T17:38:53Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.\n+   */\n+  public static CellComparator getCellComparator(TableName tableName) {\n+    return getCellComparator(tableName.toBytes());\n+  }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyMzcyOA==", "bodyText": "Will do.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368323728", "createdAt": "2020-01-19T21:20:45Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.\n+   */\n+  public static CellComparator getCellComparator(TableName tableName) {\n+    return getCellComparator(tableName.toBytes());\n+  }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTk4Mg=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAyNzA0OnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo0MzowNlrOFfP3wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1MToxN1rOFgDLIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDIwOQ==", "bodyText": "NIT: Whitespace before ? and :.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310209", "createdAt": "2020-01-19T17:43:06Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java", "diffHunk": "@@ -114,6 +118,11 @@ public HFileContext(HFileContext context) {\n     this.hfileName = hfileName;\n     this.columnFamily = columnFamily;\n     this.tableName = tableName;\n+    // If no cellComparator specified, make a guess based off tablename. If hbase:meta, then should\n+    // be the meta table comparator. Comparators are per table.\n+    this.cellComparator = cellComparator != null? cellComparator:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1MDc1Mg==", "bodyText": "Implemented.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369150752", "createdAt": "2020-01-21T17:51:17Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java", "diffHunk": "@@ -114,6 +118,11 @@ public HFileContext(HFileContext context) {\n     this.hfileName = hfileName;\n     this.columnFamily = columnFamily;\n     this.tableName = tableName;\n+    // If no cellComparator specified, make a guess based off tablename. If hbase:meta, then should\n+    // be the meta table comparator. Comparators are per table.\n+    this.cellComparator = cellComparator != null? cellComparator:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDIwOQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAyNzUxOnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo0NDoxOFrOFfP3_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo0NDoxOFrOFfP3_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDI3MA==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310270", "createdAt": "2020-01-19T17:44:18Z", "author": {"login": "HorizonNet"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java", "diffHunk": "@@ -424,15 +423,14 @@ private WriterLength getNewWriter(byte[] tableName, byte[] family, Configuration\n         HFileContext hFileContext = contextBuilder.build();\n         if (null == favoredNodes) {\n           wl.writer =\n-              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs)\n-                  .withOutputDir(familydir).withBloomType(bloomType)\n-                  .withComparator(CellComparator.getInstance()).withFileContext(hFileContext).build();\n+              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs).\n+                withOutputDir(familydir).withBloomType(bloomType).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAyNzU1OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo0NDoyNFrOFfP4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo0NDoyNFrOFfP4BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDI3Ng==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310276", "createdAt": "2020-01-19T17:44:24Z", "author": {"login": "HorizonNet"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java", "diffHunk": "@@ -424,15 +423,14 @@ private WriterLength getNewWriter(byte[] tableName, byte[] family, Configuration\n         HFileContext hFileContext = contextBuilder.build();\n         if (null == favoredNodes) {\n           wl.writer =\n-              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs)\n-                  .withOutputDir(familydir).withBloomType(bloomType)\n-                  .withComparator(CellComparator.getInstance()).withFileContext(hFileContext).build();\n+              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs).\n+                withOutputDir(familydir).withBloomType(bloomType).\n+                withFileContext(hFileContext).build();\n         } else {\n           wl.writer =\n-              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, new HFileSystem(fs))\n-                  .withOutputDir(familydir).withBloomType(bloomType)\n-                  .withComparator(CellComparator.getInstance()).withFileContext(hFileContext)\n-                  .withFavoredNodes(favoredNodes).build();\n+              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, new HFileSystem(fs)).\n+                withOutputDir(familydir).withBloomType(bloomType).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAzMDc0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1MjozMVrOFfP5pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNzo1OTo0N1rOFgDbtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDY5NA==", "bodyText": "NIT: Usually there should be a whitespace before the :. Thought it is already part of the Checkstyle ruleset.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310694", "createdAt": "2020-01-19T17:52:31Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -361,7 +361,7 @@ static HFileBlock createFromBuff(ByteBuff buf, boolean usesHBaseChecksum, final\n     // This constructor is called when we deserialize a block from cache and when we read a block in\n     // from the fs. fileCache is null when deserialized from cache so need to make up one.\n     HFileContextBuilder fileContextBuilder =\n-        fileContext != null ? new HFileContextBuilder(fileContext) : new HFileContextBuilder();\n+        fileContext != null ? new HFileContextBuilder(fileContext): new HFileContextBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyMzcwNQ==", "bodyText": "I can set these back.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368323705", "createdAt": "2020-01-19T21:20:29Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -361,7 +361,7 @@ static HFileBlock createFromBuff(ByteBuff buf, boolean usesHBaseChecksum, final\n     // This constructor is called when we deserialize a block from cache and when we read a block in\n     // from the fs. fileCache is null when deserialized from cache so need to make up one.\n     HFileContextBuilder fileContextBuilder =\n-        fileContext != null ? new HFileContextBuilder(fileContext) : new HFileContextBuilder();\n+        fileContext != null ? new HFileContextBuilder(fileContext): new HFileContextBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDY5NA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NDk5OQ==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369154999", "createdAt": "2020-01-21T17:59:47Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -361,7 +361,7 @@ static HFileBlock createFromBuff(ByteBuff buf, boolean usesHBaseChecksum, final\n     // This constructor is called when we deserialize a block from cache and when we read a block in\n     // from the fs. fileCache is null when deserialized from cache so need to make up one.\n     HFileContextBuilder fileContextBuilder =\n-        fileContext != null ? new HFileContextBuilder(fileContext) : new HFileContextBuilder();\n+        fileContext != null ? new HFileContextBuilder(fileContext): new HFileContextBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDY5NA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAzMTIwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1Mzo0N1rOFfP54g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoyMTo1OVrOFfWRsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDc1NA==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310754", "createdAt": "2020-01-19T17:53:47Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -1827,7 +1827,8 @@ protected HFileBlock readBlockDataInternal(FSDataInputStream is, long offset,\n \n     @Override\n     public void setIncludesMemStoreTS(boolean includesMemstoreTS) {\n-      this.fileContext.setIncludesMvcc(includesMemstoreTS);\n+      this.fileContext = new HFileContextBuilder(this.fileContext).\n+        withIncludesMvcc(includesMemstoreTS).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxNTE1Mg==", "bodyText": "Do we really need to build new HFileContextBuilder and HFileContext to set?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368415152", "createdAt": "2020-01-20T08:21:59Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -1827,7 +1827,8 @@ protected HFileBlock readBlockDataInternal(FSDataInputStream is, long offset,\n \n     @Override\n     public void setIncludesMemStoreTS(boolean includesMemstoreTS) {\n-      this.fileContext.setIncludesMvcc(includesMemstoreTS);\n+      this.fileContext = new HFileContextBuilder(this.fileContext).\n+        withIncludesMvcc(includesMemstoreTS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDc1NA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAzMjQ1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1NzowM1rOFfP6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoxMDowOVrOFgDubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkyMg==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310922", "createdAt": "2020-01-19T17:57:03Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java", "diffHunk": "@@ -276,8 +275,8 @@ private Path writeStoreFile() throws IOException {\n     Path storeFileParentDir = new Path(TEST_UTIL.getDataTestDir(), \"TestHFile\");\n     HFileContext meta = new HFileContextBuilder().withBlockSize(64 * 1024).build();\n     StoreFileWriter sfw =\n-        new StoreFileWriter.Builder(conf, fs).withOutputDir(storeFileParentDir)\n-            .withComparator(CellComparatorImpl.COMPARATOR).withFileContext(meta).build();\n+        new StoreFileWriter.Builder(conf, fs).withOutputDir(storeFileParentDir).\n+          withFileContext(meta).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1OTc5MQ==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369159791", "createdAt": "2020-01-21T18:10:09Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java", "diffHunk": "@@ -276,8 +275,8 @@ private Path writeStoreFile() throws IOException {\n     Path storeFileParentDir = new Path(TEST_UTIL.getDataTestDir(), \"TestHFile\");\n     HFileContext meta = new HFileContextBuilder().withBlockSize(64 * 1024).build();\n     StoreFileWriter sfw =\n-        new StoreFileWriter.Builder(conf, fs).withOutputDir(storeFileParentDir)\n-            .withComparator(CellComparatorImpl.COMPARATOR).withFileContext(meta).build();\n+        new StoreFileWriter.Builder(conf, fs).withOutputDir(storeFileParentDir).\n+          withFileContext(meta).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkyMg=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAzMjU0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileReaderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1NzoxNlrOFfP6lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoxNToyNVrOFgD4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkzNA==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310934", "createdAt": "2020-01-19T17:57:16Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileReaderImpl.java", "diffHunk": "@@ -66,9 +65,8 @@ Path makeNewFile() throws IOException {\n     HFileContext context =\n         new HFileContextBuilder().withBlockSize(blocksize).withIncludesTags(true).build();\n     Configuration conf = TEST_UTIL.getConfiguration();\n-    HFile.Writer writer =\n-        HFile.getWriterFactoryNoCache(conf).withOutputStream(fout).withFileContext(context)\n-            .withComparator(CellComparatorImpl.COMPARATOR).create();\n+    HFile.Writer writer = HFile.getWriterFactoryNoCache(conf).\n+      withOutputStream(fout).withFileContext(context).create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MjI5MA==", "bodyText": "I went through the patch and I made all align w/ your suggestions. Thanks @HorizonNet .", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369162290", "createdAt": "2020-01-21T18:15:25Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileReaderImpl.java", "diffHunk": "@@ -66,9 +65,8 @@ Path makeNewFile() throws IOException {\n     HFileContext context =\n         new HFileContextBuilder().withBlockSize(blocksize).withIncludesTags(true).build();\n     Configuration conf = TEST_UTIL.getConfiguration();\n-    HFile.Writer writer =\n-        HFile.getWriterFactoryNoCache(conf).withOutputStream(fout).withFileContext(context)\n-            .withComparator(CellComparatorImpl.COMPARATOR).create();\n+    HFile.Writer writer = HFile.getWriterFactoryNoCache(conf).\n+      withOutputStream(fout).withFileContext(context).create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkzNA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjAzMzA2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestGetClosestAtOrBefore.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1ODoyOFrOFfP6zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODoxMjoyNVrOFgDymg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDk5MQ==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310991", "createdAt": "2020-01-19T17:58:28Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestGetClosestAtOrBefore.java", "diffHunk": "@@ -85,36 +89,37 @@\n \n   @Test\n   public void testUsingMetaAndBinary() throws IOException {\n-    FileSystem filesystem = FileSystem.get(conf);\n     Path rootdir = UTIL.getDataTestDirOnTestFS();\n     // Up flush size else we bind up when we use default catalog flush of 16k.\n-    TableDescriptorBuilder metaBuilder = UTIL.getMetaTableDescriptorBuilder()\n-            .setMemStoreFlushSize(64 * 1024 * 1024);\n-\n+    TableDescriptors tds = new FSTableDescriptors(UTIL.getConfiguration());\n+    TableDescriptorBuilder metaBuilder = TableDescriptorBuilder.\n+      newBuilder(tds.get(TableName.META_TABLE_NAME)).setMemStoreFlushSize(64 * 1024 * 1024);\n+    TableDescriptor td = metaBuilder.build();\n     HRegion mr = HBaseTestingUtility.createRegionAndWAL(HRegionInfo.FIRST_META_REGIONINFO,\n-        rootdir, this.conf, metaBuilder.build());\n+        rootdir, this.conf, td);\n     try {\n       // Write rows for three tables 'A', 'B', and 'C'.\n       for (char c = 'A'; c < 'D'; c++) {\n         HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(\"\" + c));\n         final int last = 128;\n         final int interval = 2;\n         for (int i = 0; i <= last; i += interval) {\n-          HRegionInfo hri = new HRegionInfo(htd.getTableName(),\n-            i == 0 ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i),\n-            i == last ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i + interval));\n-\n+          RegionInfo hri = RegionInfoBuilder.newBuilder(htd.getTableName()).\n+            setStartKey(i == 0? HConstants.EMPTY_BYTE_ARRAY: Bytes.toBytes((byte)i)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMyMzY2MA==", "bodyText": "Smile. I like the trailing '.'. Makes you keep reading to see what is next. IIRC, I got it from the effective java book. I should see what is in our coding template.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368323660", "createdAt": "2020-01-19T21:19:40Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestGetClosestAtOrBefore.java", "diffHunk": "@@ -85,36 +89,37 @@\n \n   @Test\n   public void testUsingMetaAndBinary() throws IOException {\n-    FileSystem filesystem = FileSystem.get(conf);\n     Path rootdir = UTIL.getDataTestDirOnTestFS();\n     // Up flush size else we bind up when we use default catalog flush of 16k.\n-    TableDescriptorBuilder metaBuilder = UTIL.getMetaTableDescriptorBuilder()\n-            .setMemStoreFlushSize(64 * 1024 * 1024);\n-\n+    TableDescriptors tds = new FSTableDescriptors(UTIL.getConfiguration());\n+    TableDescriptorBuilder metaBuilder = TableDescriptorBuilder.\n+      newBuilder(tds.get(TableName.META_TABLE_NAME)).setMemStoreFlushSize(64 * 1024 * 1024);\n+    TableDescriptor td = metaBuilder.build();\n     HRegion mr = HBaseTestingUtility.createRegionAndWAL(HRegionInfo.FIRST_META_REGIONINFO,\n-        rootdir, this.conf, metaBuilder.build());\n+        rootdir, this.conf, td);\n     try {\n       // Write rows for three tables 'A', 'B', and 'C'.\n       for (char c = 'A'; c < 'D'; c++) {\n         HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(\"\" + c));\n         final int last = 128;\n         final int interval = 2;\n         for (int i = 0; i <= last; i += interval) {\n-          HRegionInfo hri = new HRegionInfo(htd.getTableName(),\n-            i == 0 ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i),\n-            i == last ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i + interval));\n-\n+          RegionInfo hri = RegionInfoBuilder.newBuilder(htd.getTableName()).\n+            setStartKey(i == 0? HConstants.EMPTY_BYTE_ARRAY: Bytes.toBytes((byte)i)).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDk5MQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY0Mzg3Mg==", "bodyText": "Back again...\nLet me do as you suggest both here and above where you state 'Most of the time we use a ...'. Onus is on me to put in place checkstyle rules if I want to go against precedent ('Most of the time...'). Thanks for reviews.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368643872", "createdAt": "2020-01-20T16:45:52Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestGetClosestAtOrBefore.java", "diffHunk": "@@ -85,36 +89,37 @@\n \n   @Test\n   public void testUsingMetaAndBinary() throws IOException {\n-    FileSystem filesystem = FileSystem.get(conf);\n     Path rootdir = UTIL.getDataTestDirOnTestFS();\n     // Up flush size else we bind up when we use default catalog flush of 16k.\n-    TableDescriptorBuilder metaBuilder = UTIL.getMetaTableDescriptorBuilder()\n-            .setMemStoreFlushSize(64 * 1024 * 1024);\n-\n+    TableDescriptors tds = new FSTableDescriptors(UTIL.getConfiguration());\n+    TableDescriptorBuilder metaBuilder = TableDescriptorBuilder.\n+      newBuilder(tds.get(TableName.META_TABLE_NAME)).setMemStoreFlushSize(64 * 1024 * 1024);\n+    TableDescriptor td = metaBuilder.build();\n     HRegion mr = HBaseTestingUtility.createRegionAndWAL(HRegionInfo.FIRST_META_REGIONINFO,\n-        rootdir, this.conf, metaBuilder.build());\n+        rootdir, this.conf, td);\n     try {\n       // Write rows for three tables 'A', 'B', and 'C'.\n       for (char c = 'A'; c < 'D'; c++) {\n         HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(\"\" + c));\n         final int last = 128;\n         final int interval = 2;\n         for (int i = 0; i <= last; i += interval) {\n-          HRegionInfo hri = new HRegionInfo(htd.getTableName(),\n-            i == 0 ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i),\n-            i == last ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i + interval));\n-\n+          RegionInfo hri = RegionInfoBuilder.newBuilder(htd.getTableName()).\n+            setStartKey(i == 0? HConstants.EMPTY_BYTE_ARRAY: Bytes.toBytes((byte)i)).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDk5MQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MDg1OA==", "bodyText": "Implemented.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369160858", "createdAt": "2020-01-21T18:12:25Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestGetClosestAtOrBefore.java", "diffHunk": "@@ -85,36 +89,37 @@\n \n   @Test\n   public void testUsingMetaAndBinary() throws IOException {\n-    FileSystem filesystem = FileSystem.get(conf);\n     Path rootdir = UTIL.getDataTestDirOnTestFS();\n     // Up flush size else we bind up when we use default catalog flush of 16k.\n-    TableDescriptorBuilder metaBuilder = UTIL.getMetaTableDescriptorBuilder()\n-            .setMemStoreFlushSize(64 * 1024 * 1024);\n-\n+    TableDescriptors tds = new FSTableDescriptors(UTIL.getConfiguration());\n+    TableDescriptorBuilder metaBuilder = TableDescriptorBuilder.\n+      newBuilder(tds.get(TableName.META_TABLE_NAME)).setMemStoreFlushSize(64 * 1024 * 1024);\n+    TableDescriptor td = metaBuilder.build();\n     HRegion mr = HBaseTestingUtility.createRegionAndWAL(HRegionInfo.FIRST_META_REGIONINFO,\n-        rootdir, this.conf, metaBuilder.build());\n+        rootdir, this.conf, td);\n     try {\n       // Write rows for three tables 'A', 'B', and 'C'.\n       for (char c = 'A'; c < 'D'; c++) {\n         HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(\"\" + c));\n         final int last = 128;\n         final int interval = 2;\n         for (int i = 0; i <= last; i += interval) {\n-          HRegionInfo hri = new HRegionInfo(htd.getTableName(),\n-            i == 0 ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i),\n-            i == last ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i + interval));\n-\n+          RegionInfo hri = RegionInfoBuilder.newBuilder(htd.getTableName()).\n+            setStartKey(i == 0? HConstants.EMPTY_BYTE_ARRAY: Bytes.toBytes((byte)i)).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDk5MQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjY3NzQzOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNzo1MDo0NVrOFfVqzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNToyNzoyMVrOFfh3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNTE5Ng==", "bodyText": "The BB passed here contain only the row bytes? The BB is sliced for row alone?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368405196", "createdAt": "2020-01-20T07:50:45Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java", "diffHunk": "@@ -80,6 +83,24 @@ static CellComparator getInstance() {\n    */\n   int compareRows(Cell cell, byte[] bytes, int offset, int length);\n \n+  /**\n+   * @param row ByteBuffer that wraps a row; will read from current position and will reading all\n+   *            remaining; will not disturb the ByteBuffer internal state.\n+   * @return greater than 0 if leftCell is bigger, less than 0 if rightCell is bigger, 0 if both\n+   *         cells are equal\n+   */\n+  default int compareRows(ByteBuffer row, Cell cell) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYwNDk5OQ==", "bodyText": "Yes.\nJavadoc tries to make this explicit. Should I add more?\n\"    * @param row ByteBuffer that wraps a row; will read from current position and will reading all\n*            remaining; will not disturb the ByteBuffer internal state.\"", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368604999", "createdAt": "2020-01-20T15:27:21Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java", "diffHunk": "@@ -80,6 +83,24 @@ static CellComparator getInstance() {\n    */\n   int compareRows(Cell cell, byte[] bytes, int offset, int length);\n \n+  /**\n+   * @param row ByteBuffer that wraps a row; will read from current position and will reading all\n+   *            remaining; will not disturb the ByteBuffer internal state.\n+   * @return greater than 0 if leftCell is bigger, less than 0 if rightCell is bigger, 0 if both\n+   *         cells are equal\n+   */\n+  default int compareRows(ByteBuffer row, Cell cell) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNTE5Ng=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjcwNTc3OnYy", "diffSide": "LEFT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODowNTo0OVrOFfV8Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzoxNjoxM1rOFflDFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwOTYxNQ==", "bodyText": "I see. This method is moved to CellComparator. Is that required? This impl here correctly handle things. Within the BBUtils we are handling HBB/DBB. But in this patch, it is trying to handle in CellComparator which is not good IMHO.\nAlso within this context we know the passed row BB is sliced for the rk bytes alone. Within CellComparator we can not have such assumption. So its better to keep it here only.  I believe only this class is having such need for compares. Any other place?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368409615", "createdAt": "2020-01-20T08:05:49Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -154,19 +153,6 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     }\n   }\n \n-  private int compareRows(ByteBuffer row, Cell seekCell) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMDU2Nw==", "bodyText": "We can't have encoders doing their own logic figuring Cell Compare else the issue this patch fixes will perpetually haunt us as encoding implementors make the same mistake of around comparators over and over again; i.e. presuming only one comparator in the system or knowing there are two at least but defaulting to user-space comparator since that is what is used 99.9% of the time.\nCellComparator already has methods that do row compare. This is just adding one that hosts the row in ByteBuffer instead of an array... an override.\nCellComparators need to do more ByteBuffering, not less. CellComparator needs to learn how to do compares w/o making copies of the ByteBuffer content as it currently does in BBUtills if the BB doesn't have an array because  comparators don't know how to stride through a ByteBuffer.\nbq. Also within this context we know the passed row BB is sliced for the rk bytes alone. Within CellComparator we can not have such assumption.\nCellComparator has one method that does this already taking an array.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368610567", "createdAt": "2020-01-20T15:38:31Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -154,19 +153,6 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     }\n   }\n \n-  private int compareRows(ByteBuffer row, Cell seekCell) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwOTYxNQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY1MzQ1MA==", "bodyText": "I understood ur arg now.  Make sense...  The MetaCellComparator was doing on heap copy. So ur impl there is ok as of now. May be we can see whether we can avoid some of those. But can be another jira.  +1 for doing this way boss.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368653450", "createdAt": "2020-01-20T17:06:51Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -154,19 +153,6 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     }\n   }\n \n-  private int compareRows(ByteBuffer row, Cell seekCell) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwOTYxNQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY1NzE3Mw==", "bodyText": "Thanks @anoopsjohn\nWill put up new patch that implements your suggestions and those of @HorizonNet", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368657173", "createdAt": "2020-01-20T17:16:13Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -154,19 +153,6 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     }\n   }\n \n-  private int compareRows(ByteBuffer row, Cell seekCell) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwOTYxNQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjcxMDUyOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODowNzo1OVrOFfV-5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODowNzo1OVrOFfV-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMDM0MQ==", "bodyText": "This I like :-)  Our best effort to make things work.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368410341", "createdAt": "2020-01-20T08:07:59Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java", "diffHunk": "@@ -114,6 +118,11 @@ public HFileContext(HFileContext context) {\n     this.hfileName = hfileName;\n     this.columnFamily = columnFamily;\n     this.tableName = tableName;\n+    // If no cellComparator specified, make a guess based off tablename. If hbase:meta, then should\n+    // be the meta table comparator. Comparators are per table.\n+    this.cellComparator = cellComparator != null? cellComparator:\n+      this.tableName != null? CellComparatorImpl.getCellComparator(this.tableName):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjcxNTUxOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODowOTo0NFrOFfWBiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTo0MDozM1rOFfiQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMTAxOQ==", "bodyText": "Can we just use TableName.isMetaTableName(TableName) here?  Why to have the indirection of toBytes and then compare bytes?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368411019", "createdAt": "2020-01-20T08:09:44Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.\n+   */\n+  public static CellComparator getCellComparator(TableName tableName) {\n+    return getCellComparator(tableName.toBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMTU4Mg==", "bodyText": "Need both. In actual filecontext, it hosts tablename as bytes only -- not as a TableName object. The TableName.toBytes doesn't actually make bytes. TN itself hosts the name in bytes.\nMaybe I should be clearer in a comment that no new arrays are being made in this code?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368611582", "createdAt": "2020-01-20T15:40:33Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.\n+   */\n+  public static CellComparator getCellComparator(TableName tableName) {\n+    return getCellComparator(tableName.toBytes());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMTAxOQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjczMDcyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoxNjoyNlrOFfWJ-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTo0MTo0OVrOFfiTiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMzE3OQ==", "bodyText": "With out this also (with below way of get class based on the name) it will work? U just added a short circuit here? Or u fixing some issue here with below getComparatorClass(comparatorClassName)?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368413179", "createdAt": "2020-01-20T08:16:26Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java", "diffHunk": "@@ -624,19 +624,22 @@ private String getHBase1CompatibleName(final String comparator) {\n     return comparatorKlass;\n   }\n \n-  public static CellComparator createComparator(\n-      String comparatorClassName) throws IOException {\n+  static CellComparator createComparator(String comparatorClassName) throws IOException {\n+    if (comparatorClassName.equals(CellComparatorImpl.COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.COMPARATOR;\n+    } else if (comparatorClassName.equals(\n+        CellComparatorImpl.META_COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.META_COMPARATOR;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MDU0OQ==", "bodyText": "I think it is to avoid the reflections call if possible", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368440549", "createdAt": "2020-01-20T09:23:14Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java", "diffHunk": "@@ -624,19 +624,22 @@ private String getHBase1CompatibleName(final String comparator) {\n     return comparatorKlass;\n   }\n \n-  public static CellComparator createComparator(\n-      String comparatorClassName) throws IOException {\n+  static CellComparator createComparator(String comparatorClassName) throws IOException {\n+    if (comparatorClassName.equals(CellComparatorImpl.COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.COMPARATOR;\n+    } else if (comparatorClassName.equals(\n+        CellComparatorImpl.META_COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.META_COMPARATOR;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMzE3OQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMjIzMg==", "bodyText": "Just to avoid the reflection in near all cases.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368612232", "createdAt": "2020-01-20T15:41:49Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java", "diffHunk": "@@ -624,19 +624,22 @@ private String getHBase1CompatibleName(final String comparator) {\n     return comparatorKlass;\n   }\n \n-  public static CellComparator createComparator(\n-      String comparatorClassName) throws IOException {\n+  static CellComparator createComparator(String comparatorClassName) throws IOException {\n+    if (comparatorClassName.equals(CellComparatorImpl.COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.COMPARATOR;\n+    } else if (comparatorClassName.equals(\n+        CellComparatorImpl.META_COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.META_COMPARATOR;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMzE3OQ=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjczMzEwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoxNzozMVrOFfWLZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTo0NDoxMVrOFfiX-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMzU0Mw==", "bodyText": "So here the comparator class name will be passed within the fileContext from upper layers. Good.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368413543", "createdAt": "2020-01-20T08:17:31Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java", "diffHunk": "@@ -319,7 +312,7 @@ public Writer create() throws IOException {\n           LOG.debug(\"Unable to set drop behind on {}\", path.getName());\n         }\n       }\n-      return new HFileWriterImpl(conf, cacheConf, path, ostream, comparator, fileContext);\n+      return new HFileWriterImpl(conf, cacheConf, path, ostream, fileContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxMzM2OQ==", "bodyText": "Yes sir. Idea is that there is one place to get comparator to use. Before this patch, comparator was passed down most of the time but in encoder context and elsewhere in a few locations, comparator was hardcoded because not passed from above.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368613369", "createdAt": "2020-01-20T15:44:11Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java", "diffHunk": "@@ -319,7 +312,7 @@ public Writer create() throws IOException {\n           LOG.debug(\"Unable to set drop behind on {}\", path.getName());\n         }\n       }\n-      return new HFileWriterImpl(conf, cacheConf, path, ostream, comparator, fileContext);\n+      return new HFileWriterImpl(conf, cacheConf, path, ostream, fileContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMzU0Mw=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njc0Nzg5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoyMzo0MlrOFfWUFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODowNzoxOVrOFgDpdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxNTc2NA==", "bodyText": "Better to have a trailer.getComparator() which internally do this create?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368415764", "createdAt": "2020-01-20T08:23:42Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java", "diffHunk": "@@ -380,7 +386,8 @@ private HFileContext createHFileContext(Path path,\n     HFileContextBuilder builder = new HFileContextBuilder()\n       .withHBaseCheckSum(true)\n       .withHFileName(path.getName())\n-      .withCompression(trailer.getCompressionCodec());\n+      .withCompression(trailer.getCompressionCodec())\n+      .withCellComparator(trailer.createComparator(trailer.getComparatorClassName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNTU2NA==", "bodyText": "I want to keep context immutable so it is safe to use in any context. It is why I removed the setter methods. I think it fine building a new one here rather than reuse. Its once per file reader open. Seems fine.\nLet me add your getCellComparator suggestion.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368615564", "createdAt": "2020-01-20T15:48:41Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java", "diffHunk": "@@ -380,7 +386,8 @@ private HFileContext createHFileContext(Path path,\n     HFileContextBuilder builder = new HFileContextBuilder()\n       .withHBaseCheckSum(true)\n       .withHFileName(path.getName())\n-      .withCompression(trailer.getCompressionCodec());\n+      .withCompression(trailer.getCompressionCodec())\n+      .withCellComparator(trailer.createComparator(trailer.getComparatorClassName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxNTc2NA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1ODUxOA==", "bodyText": "Hmm... Its a static. createComparator is probably right name here...", "url": "https://github.com/apache/hbase/pull/1062#discussion_r369158518", "createdAt": "2020-01-21T18:07:19Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java", "diffHunk": "@@ -380,7 +386,8 @@ private HFileContext createHFileContext(Path path,\n     HFileContextBuilder builder = new HFileContextBuilder()\n       .withHBaseCheckSum(true)\n       .withHFileName(path.getName())\n-      .withCompression(trailer.getCompressionCodec());\n+      .withCompression(trailer.getCompressionCodec())\n+      .withCellComparator(trailer.createComparator(trailer.getComparatorClassName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxNTc2NA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjkwODczOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyMTo1NlrOFfXyrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTo0Nzo0OFrOFfiezg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzOTk4Mg==", "bodyText": "I too agree to @anoopsjohn . Seems we deliberately left this compareRows() here. Is there a similar compareRows in every encoder?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368439982", "createdAt": "2020-01-20T09:21:56Z", "author": {"login": "ramkrish86"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -131,8 +131,7 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     int comp = 0;\n     while (low <= high) {\n       mid = low + ((high - low) >> 1);\n-      ByteBuffer row = getRow(mid);\n-      comp = compareRows(row, seekCell);\n+      comp = this.cellComparator.compareRows(getRow(mid), seekCell);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNTExOA==", "bodyText": "There is a similar array-based compare rows in CellComparator.\nSee above for my argument that encoders should not each have to do their own figuring of cell compare.\nNotice how much cleaner the code in here is now?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368615118", "createdAt": "2020-01-20T15:47:48Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -131,8 +131,7 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     int comp = 0;\n     while (low <= high) {\n       mid = low + ((high - low) >> 1);\n-      ByteBuffer row = getRow(mid);\n-      comp = compareRows(row, seekCell);\n+      comp = this.cellComparator.compareRows(getRow(mid), seekCell);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzOTk4Mg=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjkyOTU2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyODoyMVrOFfX_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTo0ODoxNlrOFfiftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MzE2NA==", "bodyText": "So every where it comes from the context only including for the blooms", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368443164", "createdAt": "2020-01-20T09:28:21Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java", "diffHunk": "@@ -135,14 +132,16 @@ private StoreFileWriter(FileSystem fs, Path path, final Configuration conf, Cach\n       // init bloom context\n       switch (bloomType) {\n         case ROW:\n-          bloomContext = new RowBloomContext(generalBloomFilterWriter, comparator);\n+          bloomContext =\n+            new RowBloomContext(generalBloomFilterWriter, fileContext.getCellComparator());\n           break;\n         case ROWCOL:\n-          bloomContext = new RowColBloomContext(generalBloomFilterWriter, comparator);\n+          bloomContext =\n+            new RowColBloomContext(generalBloomFilterWriter, fileContext.getCellComparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYxNTM1MA==", "bodyText": "Yes sir. One place only instead of hardcodings and guesses at which to use.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368615350", "createdAt": "2020-01-20T15:48:16Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java", "diffHunk": "@@ -135,14 +132,16 @@ private StoreFileWriter(FileSystem fs, Path path, final Configuration conf, Cach\n       // init bloom context\n       switch (bloomType) {\n         case ROW:\n-          bloomContext = new RowBloomContext(generalBloomFilterWriter, comparator);\n+          bloomContext =\n+            new RowBloomContext(generalBloomFilterWriter, fileContext.getCellComparator());\n           break;\n         case ROWCOL:\n-          bloomContext = new RowColBloomContext(generalBloomFilterWriter, comparator);\n+          bloomContext =\n+            new RowColBloomContext(generalBloomFilterWriter, fileContext.getCellComparator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MzE2NA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2161, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}