{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTE5OTMz", "number": 1280, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowNToxMVrODo2dcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyNDo1OFrODo9zbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTYxOTA3OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowNToxMVrOF3qKCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozNToyNFrOF40J2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNjY5Ng==", "bodyText": "What about CPEPs? Will clients now need access to the hbase-shaded-protobuf jar?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r393906696", "createdAt": "2020-03-17T19:05:11Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java", "diffHunk": "@@ -21,11 +21,11 @@\n \n import java.io.IOException;\n import java.util.Collections;\n-\n-import com.google.protobuf.Service;\n import org.apache.yetus.audience.InterfaceAudience;\n import org.apache.yetus.audience.InterfaceStability;\n \n+import org.apache.hbase.thirdparty.com.google.protobuf.Service;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExOTA2NA==", "bodyText": "Yes.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395119064", "createdAt": "2020-03-19T15:35:24Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/Coprocessor.java", "diffHunk": "@@ -21,11 +21,11 @@\n \n import java.io.IOException;\n import java.util.Collections;\n-\n-import com.google.protobuf.Service;\n import org.apache.yetus.audience.InterfaceAudience;\n import org.apache.yetus.audience.InterfaceStability;\n \n+import org.apache.hbase.thirdparty.com.google.protobuf.Service;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNjY5Ng=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTYyNDAzOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowNjo0MFrOF3qNWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozNDo0OVrOF40INQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNzU0NA==", "bodyText": "Was this an oversight on our part? These should have been using the shaded versions all along?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r393907544", "createdAt": "2020-03-17T19:06:40Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java", "diffHunk": "@@ -82,6 +77,12 @@\n import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n import org.apache.hbase.thirdparty.com.google.common.base.Throwables;\n \n+import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.MultiRowMutationProtos.MultiRowMutationService;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.MultiRowMutationProtos.MutateRowsRequest;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.MultiRowMutationProtos.MutateRowsResponse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExODY0NQ==", "bodyText": "We have multiMutate in this class where we need to make use of MultiRowMutationEndpoint, it is a CPEP so we have to make use of com.google.protobuf instead of the shaded protobuf before this patch.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395118645", "createdAt": "2020-03-19T15:34:49Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java", "diffHunk": "@@ -82,6 +77,12 @@\n import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n import org.apache.hbase.thirdparty.com.google.common.base.Throwables;\n \n+import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.MultiRowMutationProtos.MultiRowMutationService;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.MultiRowMutationProtos.MutateRowsRequest;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.MultiRowMutationProtos.MutateRowsResponse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNzU0NA=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTYyNDU4OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AdminOverAsyncAdmin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowNjo1MVrOF3qNqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowNjo1MVrOF3qNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwNzYyNw==", "bodyText": "Ditto", "url": "https://github.com/apache/hbase/pull/1280#discussion_r393907627", "createdAt": "2020-03-17T19:06:51Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AdminOverAsyncAdmin.java", "diffHunk": "@@ -71,6 +65,13 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import org.apache.hbase.thirdparty.com.google.protobuf.Descriptors.MethodDescriptor;\n+import org.apache.hbase.thirdparty.com.google.protobuf.Message;\n+import org.apache.hbase.thirdparty.com.google.protobuf.RpcCallback;\n+import org.apache.hbase.thirdparty.com.google.protobuf.RpcChannel;\n+import org.apache.hbase.thirdparty.com.google.protobuf.RpcController;\n+import org.apache.hbase.thirdparty.com.google.protobuf.ServiceException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTYyOTIyOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTowODoyOFrOF3qQ2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozNjoxNFrOF40MTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwODQ0Mg==", "bodyText": "Yeah, ditto. These are public classes. This stuff is used internally so should be fine just changing it... its just that hbase-shaded-protobuf needs to be on the CLASSPATH? I suppose it was anyways?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r393908442", "createdAt": "2020-03-17T19:08:28Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncTable.java", "diffHunk": "@@ -35,6 +34,7 @@\n import org.apache.yetus.audience.InterfaceAudience;\n \n import org.apache.hbase.thirdparty.com.google.common.base.Preconditions;\n+import org.apache.hbase.thirdparty.com.google.protobuf.RpcChannel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExOTY5NA==", "bodyText": "It has to be on the classpath, for normal read write we will make use of the shaded protobuf.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395119694", "createdAt": "2020-03-19T15:36:14Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncTable.java", "diffHunk": "@@ -35,6 +34,7 @@\n import org.apache.yetus.audience.InterfaceAudience;\n \n import org.apache.hbase.thirdparty.com.google.common.base.Preconditions;\n+import org.apache.hbase.thirdparty.com.google.protobuf.RpcChannel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkwODQ0Mg=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjI5NDkzOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/coprocessor/BigDecimalColumnInterpreter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjo1MjoyNVrOF3w13w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjo1MjoyNVrOF3w13w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAxNjIyMw==", "bodyText": "Good", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394016223", "createdAt": "2020-03-17T22:52:25Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/coprocessor/BigDecimalColumnInterpreter.java", "diffHunk": "@@ -124,7 +125,7 @@ public void initialize(EmptyMsg msg) {\n \n   private BigDecimalMsg getProtoForType(BigDecimal t) {\n     BigDecimalMsg.Builder builder = BigDecimalMsg.newBuilder();\n-    return builder.setBigdecimalMsg(ByteStringer.wrap(Bytes.toBytes(t))).build();\n+    return builder.setBigdecimalMsg(UnsafeByteOperations.unsafeWrap(Bytes.toBytes(t))).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgwNTcyOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/CoprocessorRpcUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxMzowNlrOF31zyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxMzowNlrOF31zyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5NzYxMA==", "bodyText": "Did I write this comment?\nIn CPEP, there was copying from pb2.5 data structures to internal PB3 data structures -- so we could maintain pb2.5 as public interface but this seems to be something different.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394097610", "createdAt": "2020-03-18T04:13:06Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/CoprocessorRpcUtils.java", "diffHunk": "@@ -87,53 +89,47 @@ public static CoprocessorServiceRequest getCoprocessorServiceRequest(\n   }\n \n   public static CoprocessorServiceRequest getCoprocessorServiceRequest(\n-      final Descriptors.MethodDescriptor method, final Message request, final byte [] row,\n-      final byte [] regionName) {\n-    return CoprocessorServiceRequest.newBuilder().setCall(\n-        getCoprocessorServiceCall(method, request, row)).\n-          setRegion(RequestConverter.buildRegionSpecifier(REGION_NAME, regionName)).build();\n+    final Descriptors.MethodDescriptor method, final Message request, final byte[] row,\n+    final byte[] regionName) {\n+    return CoprocessorServiceRequest.newBuilder()\n+      .setCall(getCoprocessorServiceCall(method, request, row))\n+      .setRegion(RequestConverter.buildRegionSpecifier(REGION_NAME, regionName)).build();\n   }\n \n-  private static CoprocessorServiceCall getCoprocessorServiceCall(\n-      final Descriptors.MethodDescriptor method, final Message request, final byte [] row) {\n+  private static CoprocessorServiceCall getCoprocessorServiceCall(final MethodDescriptor method,\n+    final Message request, final byte[] row) {\n     return CoprocessorServiceCall.newBuilder()\n-    .setRow(org.apache.hbase.thirdparty.com.google.protobuf.UnsafeByteOperations.unsafeWrap(row))\n-    .setServiceName(CoprocessorRpcUtils.getServiceName(method.getService()))\n-    .setMethodName(method.getName())\n-    // TODO!!!!! Come back here after!!!!! This is a double copy of the request if I read\n-    // it right copying from non-shaded to shaded version!!!!!! FIXXXXX!!!!!\n-    .setRequest(org.apache.hbase.thirdparty.com.google.protobuf.UnsafeByteOperations.\n-        unsafeWrap(request.toByteArray())).build();\n+      .setRow(org.apache.hbase.thirdparty.com.google.protobuf.UnsafeByteOperations.unsafeWrap(row))\n+      .setServiceName(CoprocessorRpcUtils.getServiceName(method.getService()))\n+      .setMethodName(method.getName())\n+      // TODO!!!!! Come back here after!!!!! This is a double copy of the request if I read\n+      // it right copying from non-shaded to shaded version!!!!!! FIXXXXX!!!!!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgwNzE5OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/security/token/ClientTokenUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNDowOVrOF310vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNDowOVrOF310vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5Nzg1Mg==", "bodyText": "Needed?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394097852", "createdAt": "2020-03-18T04:14:09Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/security/token/ClientTokenUtil.java", "diffHunk": "@@ -69,7 +70,7 @@ private static void injectFault() throws ServiceException {\n       AsyncConnection conn) {\n     CompletableFuture<Token<AuthenticationTokenIdentifier>> future = new CompletableFuture<>();\n     if (injectedException != null) {\n-      future.completeExceptionally(injectedException);\n+      future.completeExceptionally(ProtobufUtil.handleRemoteException(injectedException));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgwOTQxOnYy", "diffSide": "LEFT", "path": "hbase-endpoint/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxNTo0N1rOF312HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozNjo0MVrOF40Ngw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODIwNA==", "bodyText": "It doesn't have pb local anymore?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394098204", "createdAt": "2020-03-18T04:15:47Z", "author": {"login": "saintstack"}, "path": "hbase-endpoint/pom.xml", "diffHunk": "@@ -47,24 +47,6 @@\n           <skipAssembly>true</skipAssembly>\n         </configuration>\n       </plugin>\n-      <plugin>\n-        <groupId>org.xolstice.maven.plugins</groupId>\n-        <artifactId>protobuf-maven-plugin</artifactId>\n-        <executions>\n-          <execution>\n-            <id>compile-protoc</id>\n-            <phase>generate-sources</phase>\n-            <goals>\n-              <goal>compile</goal>\n-            </goals>\n-             <configuration>\n-              <additionalProtoPathElements>\n-                <additionalProtoPathElement>${basedir}/../hbase-protocol/src/main/protobuf</additionalProtoPathElement>\n-              </additionalProtoPathElements>\n-             </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMDAwMw==", "bodyText": "All in hbase-protocol-shaded, as we need to some relocation and replacement in code.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395120003", "createdAt": "2020-03-19T15:36:41Z", "author": {"login": "Apache9"}, "path": "hbase-endpoint/pom.xml", "diffHunk": "@@ -47,24 +47,6 @@\n           <skipAssembly>true</skipAssembly>\n         </configuration>\n       </plugin>\n-      <plugin>\n-        <groupId>org.xolstice.maven.plugins</groupId>\n-        <artifactId>protobuf-maven-plugin</artifactId>\n-        <executions>\n-          <execution>\n-            <id>compile-protoc</id>\n-            <phase>generate-sources</phase>\n-            <goals>\n-              <goal>compile</goal>\n-            </goals>\n-             <configuration>\n-              <additionalProtoPathElements>\n-                <additionalProtoPathElement>${basedir}/../hbase-protocol/src/main/protobuf</additionalProtoPathElement>\n-              </additionalProtoPathElements>\n-             </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODIwNA=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgxNDUyOnYy", "diffSide": "LEFT", "path": "hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionServerCoprocessorEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoxOToxNFrOF315HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozNzo1MVrOF40RDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODk3Mg==", "bodyText": "Yeah, so client now has to have hbase-shaded-protobuf on its side and if we change internal pb version we could break the endpoint?\nRealistically, the pb3 should probably stay on-the-wire compat so should be concern till pb4 or until we decided we want our pbs to be schema v3 compat.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394098972", "createdAt": "2020-03-18T04:19:14Z", "author": {"login": "saintstack"}, "path": "hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionServerCoprocessorEndpoint.java", "diffHunk": "@@ -20,22 +20,14 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-import com.google.protobuf.RpcCallback;\n-import com.google.protobuf.RpcController;\n-import com.google.protobuf.Service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMDkxMA==", "bodyText": "In previous discussion the idea is to keep the protobuf version 'stable' for a whole major release.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395120910", "createdAt": "2020-03-19T15:37:51Z", "author": {"login": "Apache9"}, "path": "hbase-endpoint/src/test/java/org/apache/hadoop/hbase/coprocessor/TestRegionServerCoprocessorEndpoint.java", "diffHunk": "@@ -20,22 +20,14 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-import com.google.protobuf.RpcCallback;\n-import com.google.protobuf.RpcController;\n-import com.google.protobuf.Service;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5ODk3Mg=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgxODcwOnYy", "diffSide": "RIGHT", "path": "hbase-protocol-shaded/src/main/protobuf/AccessControl.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMjoxNFrOF317oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozODoxOVrOF40SZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTYxNg==", "bodyText": "Missing from hbase-protocol-shaded?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394099616", "createdAt": "2020-03-18T04:22:14Z", "author": {"login": "saintstack"}, "path": "hbase-protocol-shaded/src/main/protobuf/AccessControl.proto", "diffHunk": "@@ -128,6 +128,15 @@ message HasUserPermissionsResponse {\n     repeated bool has_user_permission = 1;\n }\n \n+message HasPermissionRequest {\n+  required TablePermission table_permission = 1;\n+  required bytes user_name = 2;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMTI1Mw==", "bodyText": "Yes. This is only used in CPEP in the past.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395121253", "createdAt": "2020-03-19T15:38:19Z", "author": {"login": "Apache9"}, "path": "hbase-protocol-shaded/src/main/protobuf/AccessControl.proto", "diffHunk": "@@ -128,6 +128,15 @@ message HasUserPermissionsResponse {\n     repeated bool has_user_permission = 1;\n }\n \n+message HasPermissionRequest {\n+  required TablePermission table_permission = 1;\n+  required bytes user_name = 2;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTYxNg=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgyMDc5OnYy", "diffSide": "RIGHT", "path": "hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/client/RemoteHTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyMzozNVrOF3181g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTozOTozOFrOF40V7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTkyNg==", "bodyText": "This class should be removed?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394099926", "createdAt": "2020-03-18T04:23:35Z", "author": {"login": "saintstack"}, "path": "hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/client/RemoteHTable.java", "diffHunk": "@@ -77,6 +73,10 @@\n import org.slf4j.LoggerFactory;\n \n import org.apache.hbase.thirdparty.com.google.common.base.Preconditions;\n+import org.apache.hbase.thirdparty.com.google.protobuf.Descriptors;\n+import org.apache.hbase.thirdparty.com.google.protobuf.Message;\n+import org.apache.hbase.thirdparty.com.google.protobuf.Service;\n+import org.apache.hbase.thirdparty.com.google.protobuf.ServiceException;\n \n /**\n  * HTable interface to remote tables accessed via REST gateway", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMjE1OQ==", "bodyText": "No? It is the Table implementation for rest.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395122159", "createdAt": "2020-03-19T15:39:38Z", "author": {"login": "Apache9"}, "path": "hbase-rest/src/main/java/org/apache/hadoop/hbase/rest/client/RemoteHTable.java", "diffHunk": "@@ -77,6 +73,10 @@\n import org.slf4j.LoggerFactory;\n \n import org.apache.hbase.thirdparty.com.google.common.base.Preconditions;\n+import org.apache.hbase.thirdparty.com.google.protobuf.Descriptors;\n+import org.apache.hbase.thirdparty.com.google.protobuf.Message;\n+import org.apache.hbase.thirdparty.com.google.protobuf.Service;\n+import org.apache.hbase.thirdparty.com.google.protobuf.ServiceException;\n \n /**\n  * HTable interface to remote tables accessed via REST gateway", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5OTkyNg=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjgyMjIwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNDoyNDo1OFrOF3192A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTo0MTo1MVrOF40cYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMDE4NA==", "bodyText": "What happens when an old CP impl tries to go against hbase3?", "url": "https://github.com/apache/hbase/pull/1280#discussion_r394100184", "createdAt": "2020-03-18T04:24:58Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java", "diffHunk": "@@ -1985,21 +1985,20 @@ public SecurityCapabilitiesResponse getSecurityCapabilities(RpcController contro\n \n   /**\n    * Determines if there is a MasterCoprocessor deployed which implements\n-   * {@link org.apache.hadoop.hbase.protobuf.generated.AccessControlProtos.AccessControlService.Interface}.\n+   * {@link AccessControlService.Interface}.\n    */\n   boolean hasAccessControlServiceCoprocessor(MasterCoprocessorHost cpHost) {\n-    return checkCoprocessorWithService(\n-        cpHost.findCoprocessors(MasterCoprocessor.class), AccessControlService.Interface.class);\n+    return checkCoprocessorWithService(cpHost.findCoprocessors(MasterCoprocessor.class),\n+      AccessControlService.Interface.class);\n   }\n \n   /**\n    * Determines if there is a MasterCoprocessor deployed which implements\n-   * {@link org.apache.hadoop.hbase.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsService.Interface}.\n+   * {@link VisibilityLabelsService.Interface}.\n    */\n   boolean hasVisibilityLabelsServiceCoprocessor(MasterCoprocessorHost cpHost) {\n-    return checkCoprocessorWithService(\n-        cpHost.findCoprocessors(MasterCoprocessor.class),\n-        VisibilityLabelsService.Interface.class);\n+    return checkCoprocessorWithService(cpHost.findCoprocessors(MasterCoprocessor.class),\n+      VisibilityLabelsService.Interface.class);\n   }\n \n   /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTEyMzgwOQ==", "bodyText": "if you use the CP client to talk to hbase3 then it should be fire, the shaded and non-shaded version are wire compatible, but the CPs at server side should be recompiled to make use of the shaded protobuf version. This maybe a bit difficult for users, we should tell user how to do the replacement on the generated protobuf classes.", "url": "https://github.com/apache/hbase/pull/1280#discussion_r395123809", "createdAt": "2020-03-19T15:41:51Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/MasterRpcServices.java", "diffHunk": "@@ -1985,21 +1985,20 @@ public SecurityCapabilitiesResponse getSecurityCapabilities(RpcController contro\n \n   /**\n    * Determines if there is a MasterCoprocessor deployed which implements\n-   * {@link org.apache.hadoop.hbase.protobuf.generated.AccessControlProtos.AccessControlService.Interface}.\n+   * {@link AccessControlService.Interface}.\n    */\n   boolean hasAccessControlServiceCoprocessor(MasterCoprocessorHost cpHost) {\n-    return checkCoprocessorWithService(\n-        cpHost.findCoprocessors(MasterCoprocessor.class), AccessControlService.Interface.class);\n+    return checkCoprocessorWithService(cpHost.findCoprocessors(MasterCoprocessor.class),\n+      AccessControlService.Interface.class);\n   }\n \n   /**\n    * Determines if there is a MasterCoprocessor deployed which implements\n-   * {@link org.apache.hadoop.hbase.protobuf.generated.VisibilityLabelsProtos.VisibilityLabelsService.Interface}.\n+   * {@link VisibilityLabelsService.Interface}.\n    */\n   boolean hasVisibilityLabelsServiceCoprocessor(MasterCoprocessorHost cpHost) {\n-    return checkCoprocessorWithService(\n-        cpHost.findCoprocessors(MasterCoprocessor.class),\n-        VisibilityLabelsService.Interface.class);\n+    return checkCoprocessorWithService(cpHost.findCoprocessors(MasterCoprocessor.class),\n+      VisibilityLabelsService.Interface.class);\n   }\n \n   /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEwMDE4NA=="}, "originalCommit": {"oid": "5008cbf3bc8fe30916d22c4580506576a8c1b732"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2003, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}