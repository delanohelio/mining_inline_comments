{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjAyNDQ0", "number": 1818, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0MDoxN1rOEBSdpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzo1MzoyOVrOECQsGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg2NTM1OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0MDoxN1rOGdDBMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTo0MzozN1rOGdEs7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTM0Ng==", "bodyText": "Do we really want this to be public?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433111346", "createdAt": "2020-06-01T08:40:17Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExOTk0Mw==", "bodyText": "Hmm, not really, I thought maybe downstreamers can use it but I don't have strong opinion here, let me make it Private? or LimitedPrivate?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433119943", "createdAt": "2020-06-01T08:59:06Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTM0Ng=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzNTA5OA==", "bodyText": "My opinion is to only expose Scan to users, just like Collections.unmodifiableCollection will still return a Collection. For now, the only usecase is in CustomizedScanInfoBuilder, I prefer we do not expose too much, unless in the future we find other usages.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433135098", "createdAt": "2020-06-01T09:34:18Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTM0Ng=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzODkyNw==", "bodyText": "Sure, will keep it Private then.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433138927", "createdAt": "2020-06-01T09:43:37Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTM0Ng=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg2OTQ3OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0MTozOVrOGdDDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozMDowNVrOGdxqCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA==", "bodyText": "Is it necessary to return a ImmutableScan for this method?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433111954", "createdAt": "2020-06-01T08:41:39Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMTY3MA==", "bodyText": "I believe so, well we don't have any usecase yet, but given a cursor, what if user really want to get ImmutableScan similar to Scan. Hence, similar to Scan.createScanFromCursor(), client can use ImmutableScan.createScanFromCursor(). Sounds good?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433121670", "createdAt": "2020-06-01T09:02:59Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIyMTMyOA==", "bodyText": "This ImmutableScan is not exposed and will not be exposed in future also. This is a way for us to make sure the CPs wont try set any thing on the passed Scan object.  So why we need this createScanFromCursor() method at all?   Because of this u have this isObjInit based code in many places. Keep it simple I would say. Just get rid of all these.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433221328", "createdAt": "2020-06-01T13:04:58Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI0MzkwOQ==", "bodyText": "@anoopsjohn isObjInit is for different purpose. When we call parent Scan constructors, they call few setter methods. And ImmutableScan is not supposed to support setter methods, but this time object is getting initialized and hence, we need to allow it.\ne.g.\n  public Scan addFamily(byte[] family) {\n    if (!isObjInit) {\n      return super.addFamily(family);\n    }\n    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to addFamily\");\n  }\n\nHere, addFamily is being called by Scan constructor which is called by ImmutableScan as part of super call. However, when Scan constructor calls addFamily, the control goes to the implementation provided in child class ImmutableScan. Now, ImmutableScan will throw UnsupportedOperationException saying we don't allow setter calls. Hence, I had to introduce isObjInit which is set to true only after super constructor calls, which means setter methods will call corresponding parent setter methods if object is being initialized, and once it is initialized, all setters will throw UnsupportedOperationException.\nPlease check my recent commit: a075e17\nYou will get the idea of what kind of hack I had to do in parent class to avoid calling child class methods :)", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433243909", "createdAt": "2020-06-01T13:47:54Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4NzUyMA==", "bodyText": "can we try making ImmutableScan as a wrapper over actual Scan object.  The setters in the ImmutableScan can throw Exception and getter can just delegate to original Scan object", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433387520", "createdAt": "2020-06-01T17:42:50Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxMDQwNg==", "bodyText": "We can have wrapper but providing Scan object (which is Immutable by nature) to coprocessor hooks sounds better. Even though we provide Scan object to store scanner coproc hooks, it is Immutable as per the use-case and that is something HBase can take care of.\nMoreover, dev adding new method to Scan are more likely to override it in ImmutableScan class because all methods are overridden(they can get IDE hints) but they are less likely to realize usage of each method in some wrapper class and add the method in wrapper.\nHowever, if we have better pros of using wrapper, I am fine with that also.\nThoughts?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433410406", "createdAt": "2020-06-01T18:26:16Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzMTgxMQ==", "bodyText": "It is not just wrapper.  ImmutableScan will have both is-a and has-a relationship.  So what we will pass to CPs will be Scan type only. In reality that will be a wrapper.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433431811", "createdAt": "2020-06-01T19:07:44Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NTQ2NQ==", "bodyText": "@anoopsjohn changes are done. Please take a look.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433875465", "createdAt": "2020-06-02T13:30:05Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMTk1NA=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg3MDMzOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0MTo1NlrOGdDECA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowMzoyMlrOGdDqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMjA3Mg==", "bodyText": "UnsupportedOperationException or IllegalStateException?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433112072", "createdAt": "2020-06-01T08:41:56Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {\n+    Scan scan = new Scan().withStartRow(cursor.getRow());\n+    try {\n+      return new ImmutableScan(scan);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Scan should not throw IOException\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Scan addFamily(byte[] family) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to addFamily\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMTg1OQ==", "bodyText": "Oh, UnsupportedOperationException is better. will update.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433121859", "createdAt": "2020-06-01T09:03:22Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {\n+    Scan scan = new Scan().withStartRow(cursor.getRow());\n+    try {\n+      return new ImmutableScan(scan);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Scan should not throw IOException\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Scan addFamily(byte[] family) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to addFamily\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMjA3Mg=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg3MTgwOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0MjoyNVrOGdDE3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNTowMVrOGdDsvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMjI4NQ==", "bodyText": "Do not need to implement these methods?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433112285", "createdAt": "2020-06-01T08:42:25Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {\n+    Scan scan = new Scan().withStartRow(cursor.getRow());\n+    try {\n+      return new ImmutableScan(scan);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Scan should not throw IOException\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Scan addFamily(byte[] family) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to addFamily\");\n+  }\n+\n+  @Override\n+  public Scan addColumn(byte[] family, byte[] qualifier) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to addColumn\");\n+  }\n+\n+  @Override\n+  public Scan setTimeRange(long minStamp, long maxStamp) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setTimeRange\");\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public Scan setTimeStamp(long timestamp) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setTimeStamp\");\n+  }\n+\n+  @Override\n+  public Scan setTimestamp(long timestamp) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setTimestamp\");\n+  }\n+\n+  @Override\n+  public Scan setColumnFamilyTimeRange(byte[] cf, long minStamp, long maxStamp) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setColumnFamilyTimeRange\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow, boolean inclusive) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow, boolean inclusive) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan setRowPrefixFilter(byte[] rowPrefix) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setRowPrefixFilter\");\n+  }\n+\n+  @Override\n+  public Scan readAllVersions() {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to readAllVersions\");\n+  }\n+\n+  @Override\n+  public Scan readVersions(int versions) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to readVersions\");\n+  }\n+\n+  @Override\n+  public Scan setBatch(int batch) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setBatch\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultsPerColumnFamily(int limit) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setMaxResultsPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setRowOffsetPerColumnFamily(int offset) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setRowOffsetPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setCaching(int caching) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setCaching\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultSize(long maxResultSize) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setMaxResultSize\");\n+  }\n+\n+  @Override\n+  public Scan setFilter(Filter filter) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setFilter\");\n+  }\n+\n+  @Override\n+  public Scan setFamilyMap(Map<byte[], NavigableSet<byte[]>> familyMap) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setFamilyMap\");\n+  }\n+\n+  @Override\n+  public Scan setCacheBlocks(boolean cacheBlocks) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setCacheBlocks\");\n+  }\n+\n+  @Override\n+  public Scan setReversed(boolean reversed) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setReversed\");\n+  }\n+\n+  @Override\n+  public Scan setAllowPartialResults(final boolean allowPartialResults) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setAllowPartialResults\");\n+  }\n+\n+  @Override\n+  public Scan setLoadColumnFamiliesOnDemand(boolean value) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setLoadColumnFamiliesOnDemand\");\n+  }\n+\n+  @Override\n+  public Scan setRaw(boolean raw) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setRaw\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setSmall(boolean small) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setSmall\");\n+  }\n+\n+  @Override\n+  public Scan setAttribute(String name, byte[] value) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setAttribute\");\n+  }\n+\n+  @Override\n+  public Scan setId(String id) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setId\");\n+  }\n+\n+  @Override\n+  public Scan setAuthorizations(Authorizations authorizations) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setAuthorizations\");\n+  }\n+\n+  @Override\n+  public Scan setACL(Map<String, Permission> perms) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setACL(String user, Permission perms) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setConsistency(Consistency consistency) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setConsistency\");\n+  }\n+\n+  @Override\n+  public Scan setReplicaId(int Id) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setReplicaId\");\n+  }\n+\n+  @Override\n+  public Scan setIsolationLevel(IsolationLevel level) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setIsolationLevel\");\n+  }\n+\n+  @Override\n+  public Scan setPriority(int priority) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setPriority\");\n+  }\n+\n+  @Override\n+  public Scan setScanMetricsEnabled(final boolean enabled) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setScanMetricsEnabled\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setAsyncPrefetch(boolean asyncPrefetch) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setAsyncPrefetch\");\n+  }\n+\n+  @Override\n+  public Scan setLimit(int limit) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setLimit\");\n+  }\n+\n+  @Override\n+  public Scan setOneRowLimit() {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setOneRowLimit\");\n+  }\n+\n+  @Override\n+  public Scan setReadType(ReadType readType) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setReadType\");\n+  }\n+\n+  @Override\n+  Scan setMvccReadPoint(long mvccReadPoint) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setMvccReadPoint\");\n+  }\n+\n+  @Override\n+  Scan resetMvccReadPoint() {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to resetMvccReadPoint\");\n+  }\n+\n+  @Override\n+  public Scan setNeedCursorResult(boolean needCursorResult) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setNeedCursorResult\");\n+  }\n+\n+  @Override\n+  public long getMaxResultSize() {\n+    return super.getMaxResultSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMjQ5NQ==", "bodyText": "Yes, not all are required but the reason why I prefer to keep them is because when any dev introduces new public/protected method in Scan, they can realize (with IDE's help) that all other methods are overridden in ImmutableScan and if the return value is Collection or something worth converting to Unmodifiable, they can do it, and always maintain a practice of overriding it in at least ImmutableScan.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433122495", "createdAt": "2020-06-01T09:05:01Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Public\n+public final class ImmutableScan extends Scan {\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    super(scan);\n+    super.setIsolationLevel(scan.getIsolationLevel());\n+    Map<byte[], NavigableSet<byte[]>> familyMap = scan.getFamilyMap();\n+    for (Map.Entry<byte[], NavigableSet<byte[]>> entry : familyMap.entrySet()) {\n+      byte[] family = entry.getKey();\n+      NavigableSet<byte[]> cols = entry.getValue();\n+      if (cols != null && cols.size() > 0) {\n+        for (byte[] col : cols) {\n+          super.addColumn(family, col);\n+        }\n+      } else {\n+        super.addFamily(family);\n+      }\n+    }\n+    for (Map.Entry<String, byte[]> attr : scan.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : scan.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(scan.getPriority());\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    super(get);\n+    super.setIsolationLevel(get.getIsolationLevel());\n+    for (Map.Entry<String, byte[]> attr : get.getAttributesMap().entrySet()) {\n+      super.setAttribute(attr.getKey(), attr.getValue());\n+    }\n+    for (Map.Entry<byte[], TimeRange> entry : get.getColumnFamilyTimeRange().entrySet()) {\n+      TimeRange tr = entry.getValue();\n+      super.setColumnFamilyTimeRange(entry.getKey(), tr.getMin(), tr.getMax());\n+    }\n+    super.setPriority(get.getPriority());\n+  }\n+\n+  /**\n+   * Create a new Scan with a cursor. It only set the position information like start row key.\n+   * The others (like cfs, stop row, limit) should still be filled in by the user.\n+   * {@link Result#isCursor()}\n+   * {@link Result#getCursor()}\n+   * {@link Cursor}\n+   */\n+  public static Scan createScanFromCursor(Cursor cursor) {\n+    Scan scan = new Scan().withStartRow(cursor.getRow());\n+    try {\n+      return new ImmutableScan(scan);\n+    } catch (IOException e) {\n+      throw new RuntimeException(\"Scan should not throw IOException\", e);\n+    }\n+  }\n+\n+  @Override\n+  public Scan addFamily(byte[] family) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to addFamily\");\n+  }\n+\n+  @Override\n+  public Scan addColumn(byte[] family, byte[] qualifier) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to addColumn\");\n+  }\n+\n+  @Override\n+  public Scan setTimeRange(long minStamp, long maxStamp) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setTimeRange\");\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public Scan setTimeStamp(long timestamp) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setTimeStamp\");\n+  }\n+\n+  @Override\n+  public Scan setTimestamp(long timestamp) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setTimestamp\");\n+  }\n+\n+  @Override\n+  public Scan setColumnFamilyTimeRange(byte[] cf, long minStamp, long maxStamp) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setColumnFamilyTimeRange\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow, boolean inclusive) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow, boolean inclusive) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan setRowPrefixFilter(byte[] rowPrefix) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setRowPrefixFilter\");\n+  }\n+\n+  @Override\n+  public Scan readAllVersions() {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to readAllVersions\");\n+  }\n+\n+  @Override\n+  public Scan readVersions(int versions) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to readVersions\");\n+  }\n+\n+  @Override\n+  public Scan setBatch(int batch) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setBatch\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultsPerColumnFamily(int limit) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setMaxResultsPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setRowOffsetPerColumnFamily(int offset) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setRowOffsetPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setCaching(int caching) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setCaching\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultSize(long maxResultSize) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setMaxResultSize\");\n+  }\n+\n+  @Override\n+  public Scan setFilter(Filter filter) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setFilter\");\n+  }\n+\n+  @Override\n+  public Scan setFamilyMap(Map<byte[], NavigableSet<byte[]>> familyMap) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setFamilyMap\");\n+  }\n+\n+  @Override\n+  public Scan setCacheBlocks(boolean cacheBlocks) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setCacheBlocks\");\n+  }\n+\n+  @Override\n+  public Scan setReversed(boolean reversed) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setReversed\");\n+  }\n+\n+  @Override\n+  public Scan setAllowPartialResults(final boolean allowPartialResults) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setAllowPartialResults\");\n+  }\n+\n+  @Override\n+  public Scan setLoadColumnFamiliesOnDemand(boolean value) {\n+    throw new IllegalStateException(\n+      \"ImmutableScan does not allow access to setLoadColumnFamiliesOnDemand\");\n+  }\n+\n+  @Override\n+  public Scan setRaw(boolean raw) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setRaw\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setSmall(boolean small) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setSmall\");\n+  }\n+\n+  @Override\n+  public Scan setAttribute(String name, byte[] value) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setAttribute\");\n+  }\n+\n+  @Override\n+  public Scan setId(String id) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setId\");\n+  }\n+\n+  @Override\n+  public Scan setAuthorizations(Authorizations authorizations) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setAuthorizations\");\n+  }\n+\n+  @Override\n+  public Scan setACL(Map<String, Permission> perms) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setACL(String user, Permission perms) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setConsistency(Consistency consistency) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setConsistency\");\n+  }\n+\n+  @Override\n+  public Scan setReplicaId(int Id) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setReplicaId\");\n+  }\n+\n+  @Override\n+  public Scan setIsolationLevel(IsolationLevel level) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setIsolationLevel\");\n+  }\n+\n+  @Override\n+  public Scan setPriority(int priority) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setPriority\");\n+  }\n+\n+  @Override\n+  public Scan setScanMetricsEnabled(final boolean enabled) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setScanMetricsEnabled\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setAsyncPrefetch(boolean asyncPrefetch) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setAsyncPrefetch\");\n+  }\n+\n+  @Override\n+  public Scan setLimit(int limit) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setLimit\");\n+  }\n+\n+  @Override\n+  public Scan setOneRowLimit() {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setOneRowLimit\");\n+  }\n+\n+  @Override\n+  public Scan setReadType(ReadType readType) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setReadType\");\n+  }\n+\n+  @Override\n+  Scan setMvccReadPoint(long mvccReadPoint) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setMvccReadPoint\");\n+  }\n+\n+  @Override\n+  Scan resetMvccReadPoint() {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to resetMvccReadPoint\");\n+  }\n+\n+  @Override\n+  public Scan setNeedCursorResult(boolean needCursorResult) {\n+    throw new IllegalStateException(\"ImmutableScan does not allow access to setNeedCursorResult\");\n+  }\n+\n+  @Override\n+  public long getMaxResultSize() {\n+    return super.getMaxResultSize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMjI4NQ=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg3Mjk3OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Query.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0Mjo0OVrOGdDFhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNjo1MlrOGdDv-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMjQ1Mw==", "bodyText": "Why?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433112453", "createdAt": "2020-06-01T08:42:49Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Query.java", "diffHunk": "@@ -164,7 +164,11 @@ public int getReplicaId() {\n    * @param level IsolationLevel for this query\n    */\n   public Query setIsolationLevel(IsolationLevel level) {\n-    setAttribute(ISOLATION_LEVEL, level.toBytes());\n+    if (this instanceof ImmutableScan) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzMyMA==", "bodyText": "Because while constructing ImmutableScan(Scan), it calls parent Scan(Scan), which calls super.setIsolationLevel() and here, it calls setAttribute() which is overridden by ImmutableScan and hence, it will fail. I know this is not good check, but we do need to directly call super.setAttribute(), this.setAttribute() goes to ImmutableScan's setAttribute().", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433123320", "createdAt": "2020-06-01T09:06:52Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Query.java", "diffHunk": "@@ -164,7 +164,11 @@ public int getReplicaId() {\n    * @param level IsolationLevel for this query\n    */\n   public Query setIsolationLevel(IsolationLevel level) {\n-    setAttribute(ISOLATION_LEVEL, level.toBytes());\n+    if (this instanceof ImmutableScan) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMjQ1Mw=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg3ODAzOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODo0NDoyNFrOGdDIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowODoyNVrOGdDylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMzIyMg==", "bodyText": "This is not a good practise... Cna we avoid this instanceof for testing a sub class in the parent class?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433113222", "createdAt": "2020-06-01T08:44:24Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java", "diffHunk": "@@ -200,35 +200,37 @@ public Scan(Scan scan) throws IOException {\n     filter = scan.getFilter(); // clone?\n     loadColumnFamiliesOnDemand = scan.getLoadColumnFamiliesOnDemandValue();\n     consistency = scan.getConsistency();\n-    this.setIsolationLevel(scan.getIsolationLevel());\n     reversed = scan.isReversed();\n     asyncPrefetch = scan.isAsyncPrefetch();\n     small = scan.isSmall();\n     allowPartialResults = scan.getAllowPartialResults();\n     tr = scan.getTimeRange(); // TimeRange is immutable\n-    Map<byte[], NavigableSet<byte[]>> fams = scan.getFamilyMap();\n-    for (Map.Entry<byte[],NavigableSet<byte[]>> entry : fams.entrySet()) {\n-      byte [] fam = entry.getKey();\n-      NavigableSet<byte[]> cols = entry.getValue();\n-      if (cols != null && cols.size() > 0) {\n-        for (byte[] col : cols) {\n-          addColumn(fam, col);\n+    if (!(this instanceof ImmutableScan)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzk4OQ==", "bodyText": "I really tried for this but didn't find better solution. For any Immutable child class, it will have to call super constructor, and here in Scan constructor, it calls setter methods, so the control will go to child class's overridden setter methods, which will fail :(", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433123989", "createdAt": "2020-06-01T09:08:25Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Scan.java", "diffHunk": "@@ -200,35 +200,37 @@ public Scan(Scan scan) throws IOException {\n     filter = scan.getFilter(); // clone?\n     loadColumnFamiliesOnDemand = scan.getLoadColumnFamiliesOnDemandValue();\n     consistency = scan.getConsistency();\n-    this.setIsolationLevel(scan.getIsolationLevel());\n     reversed = scan.isReversed();\n     asyncPrefetch = scan.isAsyncPrefetch();\n     small = scan.isSmall();\n     allowPartialResults = scan.getAllowPartialResults();\n     tr = scan.getTimeRange(); // TimeRange is immutable\n-    Map<byte[], NavigableSet<byte[]>> fams = scan.getFamilyMap();\n-    for (Map.Entry<byte[],NavigableSet<byte[]>> entry : fams.entrySet()) {\n-      byte [] fam = entry.getKey();\n-      NavigableSet<byte[]> cols = entry.getValue();\n-      if (cols != null && cols.size() > 0) {\n-        for (byte[] col : cols) {\n-          addColumn(fam, col);\n+    if (!(this instanceof ImmutableScan)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMzIyMg=="}, "originalCommit": {"oid": "bb27ee6b2874f9048c66ae943e05b54080ac9fbb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODU1NDcwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CustomizedScanInfoBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzowMDozOVrOGdJnCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMzozNjo0M1rOGdKu1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTMzNg==", "bodyText": "This is used by tests only ?\nDo u want to create ImmutableScan over a new Scan()?  Or direct new ImmutableScan is enough?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433219336", "createdAt": "2020-06-01T13:00:39Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CustomizedScanInfoBuilder.java", "diffHunk": "@@ -42,13 +43,18 @@\n \n   public CustomizedScanInfoBuilder(ScanInfo scanInfo) {\n     this.scanInfo = scanInfo;\n-    this.scan = new Scan();\n+    try {\n+      this.scan = new ImmutableScan(new Scan());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a075e17f2dcf128e11d05de2630249fc3048de49"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIzNzcxOA==", "bodyText": "I just provided 2 constructors to ImmutableScan:\n\nImmutableScan(Scan scan)\nImmutableScan(Get get)\n\nI believe, given that this is Immutable subclass, providing default constructor might not be much useful. Even if we give, it will internally use this(new Scan()). Hence, I thought of not providing default constructor at all. Because ultimately, we want Immutable class to construct everything during initialization only and after init, no setters should be accessible. Thought?", "url": "https://github.com/apache/hbase/pull/1818#discussion_r433237718", "createdAt": "2020-06-01T13:36:43Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/CustomizedScanInfoBuilder.java", "diffHunk": "@@ -42,13 +43,18 @@\n \n   public CustomizedScanInfoBuilder(ScanInfo scanInfo) {\n     this.scanInfo = scanInfo;\n-    this.scan = new Scan();\n+    try {\n+      this.scan = new ImmutableScan(new Scan());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzIxOTMzNg=="}, "originalCommit": {"oid": "a075e17f2dcf128e11d05de2630249fc3048de49"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY2MTE2OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNToxM1rOGd7w6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNzowNFrOGd71MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTA2Nw==", "bodyText": "When it is delegate model, better get the delegate via constructor arg always. Let the creator pass a new Scan() to this explicitly. Pls avoid this constructor.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434041067", "createdAt": "2020-06-02T17:15:13Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,549 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan\n+   */\n+  public ImmutableScan() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1503b0435cb3a2675f0f85f51a721e7b18d0b2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MjE2MQ==", "bodyText": "Sure, let me handle this.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434042161", "createdAt": "2020-06-02T17:17:04Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,549 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan\n+   */\n+  public ImmutableScan() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTA2Nw=="}, "originalCommit": {"oid": "1a1503b0435cb3a2675f0f85f51a721e7b18d0b2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY2NTAyOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNjoxNVrOGd7zXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNjoxNVrOGd7zXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTY5NQ==", "bodyText": "As we are not exposing the original Scan directly, why to create a new Scan again here? No need", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434041695", "createdAt": "2020-06-02T17:16:15Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,549 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan\n+   */\n+  public ImmutableScan() {\n+    this.delegateScan = new Scan();\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    this.delegateScan = new Scan(scan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1503b0435cb3a2675f0f85f51a721e7b18d0b2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY2ODg2OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNzoyMlrOGd71-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNzoyMlrOGd71-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MjM2MA==", "bodyText": "As of now we dont have this constructor req right? If not better not add now. When there is a need, we can add. At the place where we create this ImmutableScan, already the Get would have been converted to scan", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434042360", "createdAt": "2020-06-02T17:17:22Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,549 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan\n+   */\n+  public ImmutableScan() {\n+    this.delegateScan = new Scan();\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    this.delegateScan = new Scan(scan);\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1503b0435cb3a2675f0f85f51a721e7b18d0b2"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzc0MDEwOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzozNjoyM1rOGd8jlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOToxNzo0MlrOGeAlqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1NDAzOA==", "bodyText": "Just thinking whether we should be cloning this byte[]? Using this getter it is possible to really set a new start row for the scan (by direct changing byte(s) in this byte[]).", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434054038", "createdAt": "2020-06-02T17:36:23Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,549 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan\n+   */\n+  public ImmutableScan() {\n+    this.delegateScan = new Scan();\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    this.delegateScan = new Scan(scan);\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    this.delegateScan = new Scan(get);\n+  }\n+\n+  @Override\n+  public Scan addFamily(byte[] family) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to addFamily\");\n+  }\n+\n+  @Override\n+  public Scan addColumn(byte[] family, byte[] qualifier) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to addColumn\");\n+  }\n+\n+  @Override\n+  public Scan setTimeRange(long minStamp, long maxStamp) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setTimeRange\");\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public Scan setTimeStamp(long timestamp) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setTimeStamp\");\n+  }\n+\n+  @Override\n+  public Scan setTimestamp(long timestamp) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setTimestamp\");\n+  }\n+\n+  @Override\n+  public Scan setColumnFamilyTimeRange(byte[] cf, long minStamp, long maxStamp) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setColumnFamilyTimeRange\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow, boolean inclusive) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow, boolean inclusive) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan setRowPrefixFilter(byte[] rowPrefix) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setRowPrefixFilter\");\n+  }\n+\n+  @Override\n+  public Scan readAllVersions() {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to readAllVersions\");\n+  }\n+\n+  @Override\n+  public Scan readVersions(int versions) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to readVersions\");\n+  }\n+\n+  @Override\n+  public Scan setBatch(int batch) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setBatch\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultsPerColumnFamily(int limit) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setMaxResultsPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setRowOffsetPerColumnFamily(int offset) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setRowOffsetPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setCaching(int caching) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setCaching\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultSize(long maxResultSize) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setMaxResultSize\");\n+  }\n+\n+  @Override\n+  public Scan setFilter(Filter filter) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setFilter\");\n+  }\n+\n+  @Override\n+  public Scan setFamilyMap(Map<byte[], NavigableSet<byte[]>> familyMap) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setFamilyMap\");\n+  }\n+\n+  @Override\n+  public Scan setCacheBlocks(boolean cacheBlocks) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setCacheBlocks\");\n+  }\n+\n+  @Override\n+  public Scan setReversed(boolean reversed) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setReversed\");\n+  }\n+\n+  @Override\n+  public Scan setAllowPartialResults(final boolean allowPartialResults) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setAllowPartialResults\");\n+  }\n+\n+  @Override\n+  public Scan setLoadColumnFamiliesOnDemand(boolean value) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setLoadColumnFamiliesOnDemand\");\n+  }\n+\n+  @Override\n+  public Scan setRaw(boolean raw) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setRaw\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setSmall(boolean small) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setSmall\");\n+  }\n+\n+  @Override\n+  public Scan setAttribute(String name, byte[] value) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setAttribute\");\n+  }\n+\n+  @Override\n+  public Scan setId(String id) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setId\");\n+  }\n+\n+  @Override\n+  public Scan setAuthorizations(Authorizations authorizations) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setAuthorizations\");\n+  }\n+\n+  @Override\n+  public Scan setACL(Map<String, Permission> perms) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setACL(String user, Permission perms) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setConsistency(Consistency consistency) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setConsistency\");\n+  }\n+\n+  @Override\n+  public Scan setReplicaId(int id) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setReplicaId\");\n+  }\n+\n+  @Override\n+  public Scan setIsolationLevel(IsolationLevel level) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setIsolationLevel\");\n+  }\n+\n+  @Override\n+  public Scan setPriority(int priority) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setPriority\");\n+  }\n+\n+  @Override\n+  public Scan setScanMetricsEnabled(final boolean enabled) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setScanMetricsEnabled\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setAsyncPrefetch(boolean asyncPrefetch) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setAsyncPrefetch\");\n+  }\n+\n+  @Override\n+  public Scan setLimit(int limit) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setLimit\");\n+  }\n+\n+  @Override\n+  public Scan setOneRowLimit() {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setOneRowLimit\");\n+  }\n+\n+  @Override\n+  public Scan setReadType(ReadType readType) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setReadType\");\n+  }\n+\n+  @Override\n+  Scan setMvccReadPoint(long mvccReadPoint) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setMvccReadPoint\");\n+  }\n+\n+  @Override\n+  Scan resetMvccReadPoint() {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to resetMvccReadPoint\");\n+  }\n+\n+  @Override\n+  public Scan setNeedCursorResult(boolean needCursorResult) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setNeedCursorResult\");\n+  }\n+\n+  @Override\n+  public long getMaxResultSize() {\n+    return this.delegateScan.getMaxResultSize();\n+  }\n+\n+  @Override\n+  public Map<byte[], NavigableSet<byte[]>> getFamilyMap() {\n+    return Collections.unmodifiableMap(this.delegateScan.getFamilyMap());\n+  }\n+\n+  @Override\n+  public int numFamilies() {\n+    return this.delegateScan.numFamilies();\n+  }\n+\n+  @Override\n+  public boolean hasFamilies() {\n+    return this.delegateScan.hasFamilies();\n+  }\n+\n+  @Override\n+  public byte[][] getFamilies() {\n+    return this.delegateScan.getFamilies();\n+  }\n+\n+  @Override\n+  public byte[] getStartRow() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1503b0435cb3a2675f0f85f51a721e7b18d0b2"}, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMDEwNA==", "bodyText": "Yeah, makes sense. Done", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434120104", "createdAt": "2020-06-02T19:17:42Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,549 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan\n+   */\n+  public ImmutableScan() {\n+    this.delegateScan = new Scan();\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {\n+    this.delegateScan = new Scan(scan);\n+  }\n+\n+  /**\n+   * Create Immutable instance of Scan from given Get object\n+   *\n+   * @param get Get to model Scan after\n+   */\n+  public ImmutableScan(Get get) {\n+    this.delegateScan = new Scan(get);\n+  }\n+\n+  @Override\n+  public Scan addFamily(byte[] family) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to addFamily\");\n+  }\n+\n+  @Override\n+  public Scan addColumn(byte[] family, byte[] qualifier) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to addColumn\");\n+  }\n+\n+  @Override\n+  public Scan setTimeRange(long minStamp, long maxStamp) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setTimeRange\");\n+  }\n+\n+  @Deprecated\n+  @Override\n+  public Scan setTimeStamp(long timestamp) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setTimeStamp\");\n+  }\n+\n+  @Override\n+  public Scan setTimestamp(long timestamp) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setTimestamp\");\n+  }\n+\n+  @Override\n+  public Scan setColumnFamilyTimeRange(byte[] cf, long minStamp, long maxStamp) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setColumnFamilyTimeRange\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStartRow(byte[] startRow, boolean inclusive) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStartRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan withStopRow(byte[] stopRow, boolean inclusive) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to withStopRow\");\n+  }\n+\n+  @Override\n+  public Scan setRowPrefixFilter(byte[] rowPrefix) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setRowPrefixFilter\");\n+  }\n+\n+  @Override\n+  public Scan readAllVersions() {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to readAllVersions\");\n+  }\n+\n+  @Override\n+  public Scan readVersions(int versions) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to readVersions\");\n+  }\n+\n+  @Override\n+  public Scan setBatch(int batch) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setBatch\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultsPerColumnFamily(int limit) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setMaxResultsPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setRowOffsetPerColumnFamily(int offset) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setRowOffsetPerColumnFamily\");\n+  }\n+\n+  @Override\n+  public Scan setCaching(int caching) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setCaching\");\n+  }\n+\n+  @Override\n+  public Scan setMaxResultSize(long maxResultSize) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setMaxResultSize\");\n+  }\n+\n+  @Override\n+  public Scan setFilter(Filter filter) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setFilter\");\n+  }\n+\n+  @Override\n+  public Scan setFamilyMap(Map<byte[], NavigableSet<byte[]>> familyMap) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setFamilyMap\");\n+  }\n+\n+  @Override\n+  public Scan setCacheBlocks(boolean cacheBlocks) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setCacheBlocks\");\n+  }\n+\n+  @Override\n+  public Scan setReversed(boolean reversed) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setReversed\");\n+  }\n+\n+  @Override\n+  public Scan setAllowPartialResults(final boolean allowPartialResults) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setAllowPartialResults\");\n+  }\n+\n+  @Override\n+  public Scan setLoadColumnFamiliesOnDemand(boolean value) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setLoadColumnFamiliesOnDemand\");\n+  }\n+\n+  @Override\n+  public Scan setRaw(boolean raw) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setRaw\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setSmall(boolean small) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setSmall\");\n+  }\n+\n+  @Override\n+  public Scan setAttribute(String name, byte[] value) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setAttribute\");\n+  }\n+\n+  @Override\n+  public Scan setId(String id) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setId\");\n+  }\n+\n+  @Override\n+  public Scan setAuthorizations(Authorizations authorizations) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setAuthorizations\");\n+  }\n+\n+  @Override\n+  public Scan setACL(Map<String, Permission> perms) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setACL(String user, Permission perms) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setACL\");\n+  }\n+\n+  @Override\n+  public Scan setConsistency(Consistency consistency) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setConsistency\");\n+  }\n+\n+  @Override\n+  public Scan setReplicaId(int id) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setReplicaId\");\n+  }\n+\n+  @Override\n+  public Scan setIsolationLevel(IsolationLevel level) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setIsolationLevel\");\n+  }\n+\n+  @Override\n+  public Scan setPriority(int priority) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setPriority\");\n+  }\n+\n+  @Override\n+  public Scan setScanMetricsEnabled(final boolean enabled) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setScanMetricsEnabled\");\n+  }\n+\n+  @Override\n+  @Deprecated\n+  public Scan setAsyncPrefetch(boolean asyncPrefetch) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setAsyncPrefetch\");\n+  }\n+\n+  @Override\n+  public Scan setLimit(int limit) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setLimit\");\n+  }\n+\n+  @Override\n+  public Scan setOneRowLimit() {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setOneRowLimit\");\n+  }\n+\n+  @Override\n+  public Scan setReadType(ReadType readType) {\n+    throw new UnsupportedOperationException(\"ImmutableScan does not allow access to setReadType\");\n+  }\n+\n+  @Override\n+  Scan setMvccReadPoint(long mvccReadPoint) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setMvccReadPoint\");\n+  }\n+\n+  @Override\n+  Scan resetMvccReadPoint() {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to resetMvccReadPoint\");\n+  }\n+\n+  @Override\n+  public Scan setNeedCursorResult(boolean needCursorResult) {\n+    throw new UnsupportedOperationException(\n+      \"ImmutableScan does not allow access to setNeedCursorResult\");\n+  }\n+\n+  @Override\n+  public long getMaxResultSize() {\n+    return this.delegateScan.getMaxResultSize();\n+  }\n+\n+  @Override\n+  public Map<byte[], NavigableSet<byte[]>> getFamilyMap() {\n+    return Collections.unmodifiableMap(this.delegateScan.getFamilyMap());\n+  }\n+\n+  @Override\n+  public int numFamilies() {\n+    return this.delegateScan.numFamilies();\n+  }\n+\n+  @Override\n+  public boolean hasFamilies() {\n+    return this.delegateScan.hasFamilies();\n+  }\n+\n+  @Override\n+  public byte[][] getFamilies() {\n+    return this.delegateScan.getFamilies();\n+  }\n+\n+  @Override\n+  public byte[] getStartRow() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1NDAzOA=="}, "originalCommit": {"oid": "1a1503b0435cb3a2675f0f85f51a721e7b18d0b2"}, "originalPosition": 329}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODA2MDQzOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzo1MzoyOVrOGenDTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODowNzoyNlrOGenjFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDI4NA==", "bodyText": "Now we dont have to keep this throws IOE at this constructor.  So below catch stuff in CustomizedScanInfoBuilder also can be avoided.", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434750284", "createdAt": "2020-06-03T17:53:29Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a45dc146ad10be412b3274c8958326215b0fcd1a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1ODQyMQ==", "bodyText": "Ohh, what a miss :(", "url": "https://github.com/apache/hbase/pull/1818#discussion_r434758421", "createdAt": "2020-06-03T18:07:26Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ImmutableScan.java", "diffHunk": "@@ -0,0 +1,543 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.client;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.NavigableSet;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.filter.Filter;\n+import org.apache.hadoop.hbase.io.TimeRange;\n+import org.apache.hadoop.hbase.security.access.Permission;\n+import org.apache.hadoop.hbase.security.visibility.Authorizations;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Immutable version of Scan\n+ */\n+@InterfaceAudience.Private\n+public final class ImmutableScan extends Scan {\n+\n+  private final Scan delegateScan;\n+\n+  /**\n+   * Create Immutable instance of Scan from given Scan object\n+   *\n+   * @param scan Copy all values from Scan\n+   * @throws IOException From parent constructor\n+   */\n+  public ImmutableScan(Scan scan) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc1MDI4NA=="}, "originalCommit": {"oid": "a45dc146ad10be412b3274c8958326215b0fcd1a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2907, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}