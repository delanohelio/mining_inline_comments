{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2MDIxNjkw", "number": 1690, "title": "HBASE-24327 : Flaky connection in TestMasterShutdown#testMasterShutdo\u2026", "bodyText": "\u2026wnBeforeStartingAnyRegionServer", "createdAt": "2020-05-11T10:43:35Z", "url": "https://github.com/apache/hbase/pull/1690", "merged": true, "mergeCommit": {"oid": "a782531633a70394ec69f40a06eb4b94659386a1"}, "closed": true, "closedAt": "2020-05-12T21:08:48Z", "author": {"login": "virajjasani"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgN-KDgH2gAyNDE2MDIxNjkwOjA0MjYwYjViZjk1NjcwZTk0OTM0MDAyMTRjOWI2ODIyNjdkZjhkZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg5DRIgFqTQxMDkwMzEyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "04260b5bf95670e9493400214c9b682267df8de2", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/04260b5bf95670e9493400214c9b682267df8de2", "committedDate": "2020-05-11T11:28:19Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ce62bd63c467e7acb9e49b7c43b61a3a1a4e385", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/8ce62bd63c467e7acb9e49b7c43b61a3a1a4e385", "committedDate": "2020-05-11T10:41:51Z", "message": "HBASE-24327 : Flaky connection in TestMasterShutdown#testMasterShutdownBeforeStartingAnyRegionServer"}, "afterCommit": {"oid": "04260b5bf95670e9493400214c9b682267df8de2", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/04260b5bf95670e9493400214c9b682267df8de2", "committedDate": "2020-05-11T11:28:19Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5NDc5MjUw", "url": "https://github.com/apache/hbase/pull/1690#pullrequestreview-409479250", "createdAt": "2020-05-11T19:49:13Z", "commit": {"oid": "04260b5bf95670e9493400214c9b682267df8de2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo1NTozN1rOGTrHJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMDozMlrOGTrQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4MjQ3MA==", "bodyText": "IIUC, the problem here is this (in your original patch). Like we discussed, shutdown() is running into flaky ZK issues because the ZK failure happens in the context of the shutdown() rpc. Even when that happens, the shutdown still goes through (though the RPC fails). So, once you enter that state, the subsequent RPCs won't ever return succeed (because the master is already down), so it will just wait until the waitFor() times out (and the test fails).", "url": "https://github.com/apache/hbase/pull/1690#discussion_r423282470", "createdAt": "2020-05-11T19:55:37Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +156,42 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        final long result = htu.waitFor(timeout, 1000, () -> {\n+          LOG.debug(\"Attempting to establish connection.\");\n+          try (final Connection conn = htu.getConnection()) {\n+            conn.getAdmin().shutdown();\n+            LOG.info(\"Shutdown RPC sent.\");\n+            return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04260b5bf95670e9493400214c9b682267df8de2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NDk5MA==", "bodyText": "I think this is a bit hacky, instead, can we just issue one shutdown(), don't worry about the result of it (since we know it is going to succeed even if it runs into ZK issues) and then just join on the master thread? That means the code will look like this..\nmaster.start()\nhtu.waitFor(.... masterThread.getMaster().serverMgr() != null);\nThread.run() {\nconn.getAdmin().shutdown();\n// don't worry about the return value\n}\nmasterThread.join()\nshutdownThread.join()\nThoughts?", "url": "https://github.com/apache/hbase/pull/1690#discussion_r423284990", "createdAt": "2020-05-11T20:00:32Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +156,42 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        final long result = htu.waitFor(timeout, 1000, () -> {\n+          LOG.debug(\"Attempting to establish connection.\");\n+          try (final Connection conn = htu.getConnection()) {\n+            conn.getAdmin().shutdown();\n+            LOG.info(\"Shutdown RPC sent.\");\n+            return true;\n+          } catch (IOException|CompletionException e) {\n+            LOG.error(\"Failed to establish connection.\");\n+            if (connectionFailedWithMaster(e)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04260b5bf95670e9493400214c9b682267df8de2"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3fb12a674324037180d9736eb5c8e5e7f60ce9", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/3b3fb12a674324037180d9736eb5c8e5e7f60ce9", "committedDate": "2020-05-12T08:01:43Z", "message": "review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjUzNzY2", "url": "https://github.com/apache/hbase/pull/1690#pullrequestreview-410253766", "createdAt": "2020-05-12T17:12:55Z", "commit": {"oid": "3b3fb12a674324037180d9736eb5c8e5e7f60ce9"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoxMjo1NVrOGUQwPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNzoxNToyMlrOGUQ2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg5OTE5Ng==", "bodyText": "Add a quick comment about our discussion, with a jira reference? (incase someone else has to touch this code again)...", "url": "https://github.com/apache/hbase/pull/1690#discussion_r423899196", "createdAt": "2020-05-12T17:12:55Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +153,33 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        LOG.debug(\"Attempting to establish connection.\");\n+        try (final Connection conn = htu.getConnection()) {\n+          conn.getAdmin().shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3fb12a674324037180d9736eb5c8e5e7f60ce9"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMDE5NA==", "bodyText": "htu.getConnection() is managed by the mini cluster, remove it from try-with-resources block? Otherwise we might run into weird issues in teardown..", "url": "https://github.com/apache/hbase/pull/1690#discussion_r423900194", "createdAt": "2020-05-12T17:14:37Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +153,33 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        LOG.debug(\"Attempting to establish connection.\");\n+        try (final Connection conn = htu.getConnection()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3fb12a674324037180d9736eb5c8e5e7f60ce9"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzkwMDcyMw==", "bodyText": "nit: remove..", "url": "https://github.com/apache/hbase/pull/1690#discussion_r423900723", "createdAt": "2020-05-12T17:15:22Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -186,21 +202,12 @@ private static Configuration createMasterShutdownBeforeStartingAnyRegionServerCo\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n     // don't need a long write pipeline for this test.\n     conf.setInt(\"dfs.replication\", 1);\n-    return conf;\n-  }\n-\n-  /**\n-   * Create a new {@link Configuration} based on {@code baseConf} that has ZooKeeper connection\n-   * settings tuned very aggressively. The resulting client is used within a retry loop, so there's\n-   * no value in having the client itself do the retries. We want to iterate on the base\n-   * configuration because we're waiting for the mini-cluster to start and set it's ZK client port.\n-   *\n-   * @return a new, configured {@link Configuration} instance.\n-   */\n-  private static Configuration createResponsiveZkConfig(final Configuration baseConf) {\n-    final Configuration conf = HBaseConfiguration.create(baseConf);\n+    // reduce client retries\n+    conf.setInt(\"hbase.client.retries.number\", 3);\n+    // Recoverable ZK configs are tuned more aggressively\n     conf.setInt(ReadOnlyZKClient.RECOVERY_RETRY, 3);\n     conf.setInt(ReadOnlyZKClient.RECOVERY_RETRY_INTERVAL_MILLIS, 100);\n     return conf;\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b3fb12a674324037180d9736eb5c8e5e7f60ce9"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83c052241882534ecec30a36134334e919319256", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/83c052241882534ecec30a36134334e919319256", "committedDate": "2020-05-12T21:05:03Z", "message": "minor changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDkwNjAx", "url": "https://github.com/apache/hbase/pull/1690#pullrequestreview-410490601", "createdAt": "2020-05-12T23:25:33Z", "commit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzoyNTozM1rOGUcYGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozMDo0NFrOGUcekQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4OTYyNg==", "bodyText": "nit: what's the purpose of running this in a separate thread?", "url": "https://github.com/apache/hbase/pull/1690#discussion_r424089626", "createdAt": "2020-05-12T23:25:33Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +152,46 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTI4MQ==", "bodyText": "Your above comment says \"make one shutdown and ignore failures\" but the warning here makes the reader think the shutdown call failed (or, that something failed. the message doesn't say what was attempting to establish a connection, or to what).\nThe IOException is highly generic -- we don't actually know if it was a connection failure, a failure on the server side processing the request, or a failed on the client to interpret the result.", "url": "https://github.com/apache/hbase/pull/1690#discussion_r424091281", "createdAt": "2020-05-12T23:30:44Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +152,46 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        LOG.debug(\"Attempting to establish connection.\");\n+        try {\n+          // HBASE-24327 : (Resolve Flaky connection issues)\n+          // shutdown() RPC can have flaky ZK connection issues.\n+          // e.g\n+          // ERROR [RpcServer.priority.RWQ.Fifo.read.handler=1,queue=1,port=53033]\n+          // master.HMaster(2878): ZooKeeper exception trying to set cluster as down in ZK\n+          // org.apache.zookeeper.KeeperException$SystemErrorException:\n+          // KeeperErrorCode = SystemError\n+          //\n+          // However, even when above flakes happen, shutdown call does get completed even if\n+          // RPC call has failure. Hence, subsequent retries will never succeed as HMaster is\n+          // already shutdown. Hence, it can fail. To resolve it, after making one shutdown()\n+          // call, we are ignoring IOException.\n+          htu.getConnection().getAdmin().shutdown();\n+          LOG.info(\"Shutdown RPC sent.\");\n+        } catch (IOException | CompletionException e) {\n+          LOG.warn(\"Failed to establish connection.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDkzNDgz", "url": "https://github.com/apache/hbase/pull/1690#pullrequestreview-410493483", "createdAt": "2020-05-12T23:33:42Z", "commit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozMzo0MlrOGUch6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzozMzo0MlrOGUch6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjEzOQ==", "bodyText": "Since I wrote this code, I realized that this assertNotEquals wrapper is not necessary. Down inside the call hierarchy of this method, there's a default setting that has timeout throw an exception. If you provide an ExplainingPredicate with an implementation of String explainFailure() you can control the error message. A little more convenient than the outer assertion.", "url": "https://github.com/apache/hbase/pull/1690#discussion_r424092139", "createdAt": "2020-05-12T23:33:42Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +152,46 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTAzMTIz", "url": "https://github.com/apache/hbase/pull/1690#pullrequestreview-410903123", "createdAt": "2020-05-13T13:06:16Z", "commit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzowNjoxNlrOGUwmvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzoxNzo1NlrOGUxGVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyMTA1NA==", "bodyText": "@ndimiduk Are you in favor of checking the root cause like the first commit: 04260b5#diff-144b3c3611227c12067b788b985183f9R182  &&  04260b5#diff-144b3c3611227c12067b788b985183f9R207 ?\ncause message Failed contacting masters after 1 attempts with MasterRegistry being wrapped inside RetriesExhaustedException.", "url": "https://github.com/apache/hbase/pull/1690#discussion_r424421054", "createdAt": "2020-05-13T13:06:16Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +152,46 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        LOG.debug(\"Attempting to establish connection.\");\n+        try {\n+          // HBASE-24327 : (Resolve Flaky connection issues)\n+          // shutdown() RPC can have flaky ZK connection issues.\n+          // e.g\n+          // ERROR [RpcServer.priority.RWQ.Fifo.read.handler=1,queue=1,port=53033]\n+          // master.HMaster(2878): ZooKeeper exception trying to set cluster as down in ZK\n+          // org.apache.zookeeper.KeeperException$SystemErrorException:\n+          // KeeperErrorCode = SystemError\n+          //\n+          // However, even when above flakes happen, shutdown call does get completed even if\n+          // RPC call has failure. Hence, subsequent retries will never succeed as HMaster is\n+          // already shutdown. Hence, it can fail. To resolve it, after making one shutdown()\n+          // call, we are ignoring IOException.\n+          htu.getConnection().getAdmin().shutdown();\n+          LOG.info(\"Shutdown RPC sent.\");\n+        } catch (IOException | CompletionException e) {\n+          LOG.warn(\"Failed to establish connection.\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MTI4MQ=="}, "originalCommit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyMzA0Ng==", "bodyText": "Sure let me check that. I was also following Assertion errors so far on top of waitFor().", "url": "https://github.com/apache/hbase/pull/1690#discussion_r424423046", "createdAt": "2020-05-13T13:09:10Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +152,46 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5MjEzOQ=="}, "originalCommit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyOTE0Mw==", "bodyText": "Oh yes, now I can make the call synchronous. The decision of making it go in separate thread goes to previous PR where Bharath and I thought of keeping this async until fixing HBASE-24070 : #1684 (comment)", "url": "https://github.com/apache/hbase/pull/1690#discussion_r424429143", "createdAt": "2020-05-13T13:17:56Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +152,46 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n       masterThread.start();\n-      // Switching to master registry exacerbated a race in the master bootstrap that can result\n-      // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n-      // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n-      // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n-      // is because the connection creation with ZK registry is so slow that by then the server\n-      // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n-      // wait() in the test, waiting for the server manager to become available.\n-      final long timeout = TimeUnit.MINUTES.toMillis(10);\n-      assertNotEquals(\"Timeout waiting for server manager to become available.\",\n-        -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n-          () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA4OTYyNg=="}, "originalCommit": {"oid": "83c052241882534ecec30a36134334e919319256"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2113, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}