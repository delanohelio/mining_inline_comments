{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNzc4MTAx", "number": 2731, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozMTozOVrOE_uwvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozOTozNFrOE_u-JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjYxODg0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRefreshRecoveredReplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozMTozOVrOH9mQHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo1NDoxNFrOH9nLnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MTkwMg==", "bodyText": "Can NUM_SLAVES1 be made final, and referenced wherever it's presumed to be 2? Maybe rename it if you're in there making that change...", "url": "https://github.com/apache/hbase/pull/2731#discussion_r534351902", "createdAt": "2020-12-02T17:31:39Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRefreshRecoveredReplication.java", "diffHunk": "@@ -75,6 +80,7 @@\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    // NUM_SLAVES1 is presumed 2 in below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9032826617f7dc47ae41ce4e441ffff617c2ad8b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM2NzEzNQ==", "bodyText": "The NUM_SLAVES1 comes from base class.\nThis class and the subclasses need major refactoring. I avoid it in here trying to keep change minimal.", "url": "https://github.com/apache/hbase/pull/2731#discussion_r534367135", "createdAt": "2020-12-02T17:54:14Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRefreshRecoveredReplication.java", "diffHunk": "@@ -75,6 +80,7 @@\n \n   @BeforeClass\n   public static void setUpBeforeClass() throws Exception {\n+    // NUM_SLAVES1 is presumed 2 in below.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1MTkwMg=="}, "originalCommit": {"oid": "9032826617f7dc47ae41ce4e441ffff617c2ad8b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjY1MzE3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRefreshRecoveredReplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzozOTozNFrOH9mlYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo1NDo1NVrOH9nNUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NzM0Ng==", "bodyText": "Instead of waiting on strict equality by count, can you wait for getLiveRegionServerThreads() to contain only otherServer by identity?", "url": "https://github.com/apache/hbase/pull/2731#discussion_r534357346", "createdAt": "2020-12-02T17:39:34Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRefreshRecoveredReplication.java", "diffHunk": "@@ -121,22 +127,25 @@ public void testReplicationRefreshSource() throws Exception {\n       table1.put(new Put(r).addColumn(famName, famName, r));\n     }\n \n-    // kill rs holding table region\n-    Optional<RegionServerThread> server = UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads()\n-        .stream()\n+    // Kill rs holding table region. There are only TWO servers. We depend on it.\n+    List<RegionServerThread> rss = UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads();\n+    assertEquals(2, rss.size());\n+    Optional<RegionServerThread> server = rss.stream()\n         .filter(rst -> CollectionUtils.isNotEmpty(rst.getRegionServer().getRegions(tablename)))\n         .findAny();\n     Assert.assertTrue(server.isPresent());\n+    HRegionServer otherServer = rss.get(0).getRegionServer() == server.get().getRegionServer()?\n+      rss.get(1).getRegionServer(): rss.get(0).getRegionServer();\n     server.get().getRegionServer().abort(\"stopping for test\");\n+    // waiting for recovered peer to appear.\n+    Replication replication = (Replication)otherServer.getReplicationSourceService();\n+    UTIL1.waitFor(60000, () -> !replication.getReplicationManager().getOldSources().isEmpty());\n+    // Wait on only one server being up.\n     UTIL1.waitFor(60000, () ->\n-        UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads().size() == NUM_SLAVES1 - 1);\n+      // Have to go back to source here because getLiveRegionServerThreads makes new array each time\n+      UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads().size() == NUM_SLAVES1 - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9032826617f7dc47ae41ce4e441ffff617c2ad8b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM2NzU3MQ==", "bodyText": "I could but skipping as nit if you don't mind.", "url": "https://github.com/apache/hbase/pull/2731#discussion_r534367571", "createdAt": "2020-12-02T17:54:55Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestRefreshRecoveredReplication.java", "diffHunk": "@@ -121,22 +127,25 @@ public void testReplicationRefreshSource() throws Exception {\n       table1.put(new Put(r).addColumn(famName, famName, r));\n     }\n \n-    // kill rs holding table region\n-    Optional<RegionServerThread> server = UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads()\n-        .stream()\n+    // Kill rs holding table region. There are only TWO servers. We depend on it.\n+    List<RegionServerThread> rss = UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads();\n+    assertEquals(2, rss.size());\n+    Optional<RegionServerThread> server = rss.stream()\n         .filter(rst -> CollectionUtils.isNotEmpty(rst.getRegionServer().getRegions(tablename)))\n         .findAny();\n     Assert.assertTrue(server.isPresent());\n+    HRegionServer otherServer = rss.get(0).getRegionServer() == server.get().getRegionServer()?\n+      rss.get(1).getRegionServer(): rss.get(0).getRegionServer();\n     server.get().getRegionServer().abort(\"stopping for test\");\n+    // waiting for recovered peer to appear.\n+    Replication replication = (Replication)otherServer.getReplicationSourceService();\n+    UTIL1.waitFor(60000, () -> !replication.getReplicationManager().getOldSources().isEmpty());\n+    // Wait on only one server being up.\n     UTIL1.waitFor(60000, () ->\n-        UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads().size() == NUM_SLAVES1 - 1);\n+      // Have to go back to source here because getLiveRegionServerThreads makes new array each time\n+      UTIL1.getMiniHBaseCluster().getLiveRegionServerThreads().size() == NUM_SLAVES1 - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NzM0Ng=="}, "originalCommit": {"oid": "9032826617f7dc47ae41ce4e441ffff617c2ad8b"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2317, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}