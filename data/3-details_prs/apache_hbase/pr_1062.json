{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MzMzMzEy", "number": 1062, "title": "HBASE-23705 Add CellComparator to HFileContext", "bodyText": "Codecs don't have access to what CellComparator to use.  Backfill.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\nAdds a new compareRows with default implementation that takes a ByteBuffer.\nNeeded by the index in a block encoder implementation.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\nAdds implementation for meta of new compareRows method. Adds utility\nmethod for figuring comparator based off tablename.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\nComparator is in context. Remove redundant handling.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\nComparator is in context. Remove redundant handling. Clean javadoc.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\nClean javadoc.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\nCache context so can use it to get comparator to use later.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\nCache cellcomparator to use. Javdoc on diff between HFileContext and\nHFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\nAdd CellComparator\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\nRemove comparator caching. Get from context instead.\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\nSkip a reflection if we can.\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\nJavadoc. Removed unused filed.", "createdAt": "2020-01-17T21:51:21Z", "url": "https://github.com/apache/hbase/pull/1062", "merged": true, "mergeCommit": {"oid": "6cdc4b1f0574cc424480ec2f2e3129f280fa8472"}, "closed": true, "closedAt": "2020-01-23T04:00:21Z", "author": {"login": "saintstack"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7cyiOABqjI5NjAwMzQ0ODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8wbwqgBqjI5Njg5Mjk5NTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d7270894409df42a8333ac9c58484b3cb47a2666", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/d7270894409df42a8333ac9c58484b3cb47a2666", "committedDate": "2020-01-17T21:46:35Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}, "afterCommit": {"oid": "4fc55067006f9946f52547561d5a383b55f2dd42", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/4fc55067006f9946f52547561d5a383b55f2dd42", "committedDate": "2020-01-18T05:48:30Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fc55067006f9946f52547561d5a383b55f2dd42", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/4fc55067006f9946f52547561d5a383b55f2dd42", "committedDate": "2020-01-18T05:48:30Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}, "afterCommit": {"oid": "e8a42ce12911ff76559f7f9c40b80efbc5bd35c3", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/e8a42ce12911ff76559f7f9c40b80efbc5bd35c3", "committedDate": "2020-01-18T15:12:18Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e8a42ce12911ff76559f7f9c40b80efbc5bd35c3", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/e8a42ce12911ff76559f7f9c40b80efbc5bd35c3", "committedDate": "2020-01-18T15:12:18Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}, "afterCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/f45287b27aae2cece0959ba69b9e2ba02dc19982", "committedDate": "2020-01-18T15:35:14Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MDE1NjA1", "url": "https://github.com/apache/hbase/pull/1062#pullrequestreview-345015605", "createdAt": "2020-01-19T17:37:06Z", "commit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzozNzowNlrOFfP2VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOVQxNzo1ODoyOFrOFfP6zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTg0NQ==", "bodyText": "Is there already a Jira for this?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368309845", "createdAt": "2020-01-19T17:37:06Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -377,6 +378,27 @@ private static int compareRows(byte[] left, int loffset, int llength, byte[] rig\n       return result;\n     }\n \n+    @Override\n+    public int compareRows(ByteBuffer row, Cell cell) {\n+      byte [] array;\n+      int offset;\n+      int len = row.remaining();\n+      if (row.hasArray()) {\n+        array = row.array();\n+        offset = row.position() + row.arrayOffset();\n+      } else {\n+        // This is awful, we copy the row array if offheap just so we can do a compare.\n+        // We do this elsewhere too when Cell is backed by an offheap ByteBuffer.\n+        // Needs fixing. TODO.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTkzMQ==", "bodyText": "NIT: Use {@code tableName} instead.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368309931", "createdAt": "2020-01-19T17:38:27Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMwOTk4Mg==", "bodyText": "NIT: Use {@code tableName} instead.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368309982", "createdAt": "2020-01-19T17:38:53Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.\n+   */\n+  public static CellComparator getCellComparator(TableName tableName) {\n+    return getCellComparator(tableName.toBytes());\n+  }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDIwOQ==", "bodyText": "NIT: Whitespace before ? and :.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310209", "createdAt": "2020-01-19T17:43:06Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java", "diffHunk": "@@ -114,6 +118,11 @@ public HFileContext(HFileContext context) {\n     this.hfileName = hfileName;\n     this.columnFamily = columnFamily;\n     this.tableName = tableName;\n+    // If no cellComparator specified, make a guess based off tablename. If hbase:meta, then should\n+    // be the meta table comparator. Comparators are per table.\n+    this.cellComparator = cellComparator != null? cellComparator:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDI3MA==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310270", "createdAt": "2020-01-19T17:44:18Z", "author": {"login": "HorizonNet"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java", "diffHunk": "@@ -424,15 +423,14 @@ private WriterLength getNewWriter(byte[] tableName, byte[] family, Configuration\n         HFileContext hFileContext = contextBuilder.build();\n         if (null == favoredNodes) {\n           wl.writer =\n-              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs)\n-                  .withOutputDir(familydir).withBloomType(bloomType)\n-                  .withComparator(CellComparator.getInstance()).withFileContext(hFileContext).build();\n+              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs).\n+                withOutputDir(familydir).withBloomType(bloomType).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDI3Ng==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310276", "createdAt": "2020-01-19T17:44:24Z", "author": {"login": "HorizonNet"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java", "diffHunk": "@@ -424,15 +423,14 @@ private WriterLength getNewWriter(byte[] tableName, byte[] family, Configuration\n         HFileContext hFileContext = contextBuilder.build();\n         if (null == favoredNodes) {\n           wl.writer =\n-              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs)\n-                  .withOutputDir(familydir).withBloomType(bloomType)\n-                  .withComparator(CellComparator.getInstance()).withFileContext(hFileContext).build();\n+              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, fs).\n+                withOutputDir(familydir).withBloomType(bloomType).\n+                withFileContext(hFileContext).build();\n         } else {\n           wl.writer =\n-              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, new HFileSystem(fs))\n-                  .withOutputDir(familydir).withBloomType(bloomType)\n-                  .withComparator(CellComparator.getInstance()).withFileContext(hFileContext)\n-                  .withFavoredNodes(favoredNodes).build();\n+              new StoreFileWriter.Builder(conf, CacheConfig.DISABLED, new HFileSystem(fs)).\n+                withOutputDir(familydir).withBloomType(bloomType).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDY5NA==", "bodyText": "NIT: Usually there should be a whitespace before the :. Thought it is already part of the Checkstyle ruleset.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310694", "createdAt": "2020-01-19T17:52:31Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -361,7 +361,7 @@ static HFileBlock createFromBuff(ByteBuff buf, boolean usesHBaseChecksum, final\n     // This constructor is called when we deserialize a block from cache and when we read a block in\n     // from the fs. fileCache is null when deserialized from cache so need to make up one.\n     HFileContextBuilder fileContextBuilder =\n-        fileContext != null ? new HFileContextBuilder(fileContext) : new HFileContextBuilder();\n+        fileContext != null ? new HFileContextBuilder(fileContext): new HFileContextBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDc1NA==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310754", "createdAt": "2020-01-19T17:53:47Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -1827,7 +1827,8 @@ protected HFileBlock readBlockDataInternal(FSDataInputStream is, long offset,\n \n     @Override\n     public void setIncludesMemStoreTS(boolean includesMemstoreTS) {\n-      this.fileContext.setIncludesMvcc(includesMemstoreTS);\n+      this.fileContext = new HFileContextBuilder(this.fileContext).\n+        withIncludesMvcc(includesMemstoreTS).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkyMg==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310922", "createdAt": "2020-01-19T17:57:03Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFile.java", "diffHunk": "@@ -276,8 +275,8 @@ private Path writeStoreFile() throws IOException {\n     Path storeFileParentDir = new Path(TEST_UTIL.getDataTestDir(), \"TestHFile\");\n     HFileContext meta = new HFileContextBuilder().withBlockSize(64 * 1024).build();\n     StoreFileWriter sfw =\n-        new StoreFileWriter.Builder(conf, fs).withOutputDir(storeFileParentDir)\n-            .withComparator(CellComparatorImpl.COMPARATOR).withFileContext(meta).build();\n+        new StoreFileWriter.Builder(conf, fs).withOutputDir(storeFileParentDir).\n+          withFileContext(meta).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDkzNA==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310934", "createdAt": "2020-01-19T17:57:16Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/io/hfile/TestHFileReaderImpl.java", "diffHunk": "@@ -66,9 +65,8 @@ Path makeNewFile() throws IOException {\n     HFileContext context =\n         new HFileContextBuilder().withBlockSize(blocksize).withIncludesTags(true).build();\n     Configuration conf = TEST_UTIL.getConfiguration();\n-    HFile.Writer writer =\n-        HFile.getWriterFactoryNoCache(conf).withOutputStream(fout).withFileContext(context)\n-            .withComparator(CellComparatorImpl.COMPARATOR).create();\n+    HFile.Writer writer = HFile.getWriterFactoryNoCache(conf).\n+      withOutputStream(fout).withFileContext(context).create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDk5MQ==", "bodyText": "NIT: Most of the time we use a leading ..", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368310991", "createdAt": "2020-01-19T17:58:28Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestGetClosestAtOrBefore.java", "diffHunk": "@@ -85,36 +89,37 @@\n \n   @Test\n   public void testUsingMetaAndBinary() throws IOException {\n-    FileSystem filesystem = FileSystem.get(conf);\n     Path rootdir = UTIL.getDataTestDirOnTestFS();\n     // Up flush size else we bind up when we use default catalog flush of 16k.\n-    TableDescriptorBuilder metaBuilder = UTIL.getMetaTableDescriptorBuilder()\n-            .setMemStoreFlushSize(64 * 1024 * 1024);\n-\n+    TableDescriptors tds = new FSTableDescriptors(UTIL.getConfiguration());\n+    TableDescriptorBuilder metaBuilder = TableDescriptorBuilder.\n+      newBuilder(tds.get(TableName.META_TABLE_NAME)).setMemStoreFlushSize(64 * 1024 * 1024);\n+    TableDescriptor td = metaBuilder.build();\n     HRegion mr = HBaseTestingUtility.createRegionAndWAL(HRegionInfo.FIRST_META_REGIONINFO,\n-        rootdir, this.conf, metaBuilder.build());\n+        rootdir, this.conf, td);\n     try {\n       // Write rows for three tables 'A', 'B', and 'C'.\n       for (char c = 'A'; c < 'D'; c++) {\n         HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(\"\" + c));\n         final int last = 128;\n         final int interval = 2;\n         for (int i = 0; i <= last; i += interval) {\n-          HRegionInfo hri = new HRegionInfo(htd.getTableName(),\n-            i == 0 ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i),\n-            i == last ? HConstants.EMPTY_BYTE_ARRAY : Bytes.toBytes((byte) i + interval));\n-\n+          RegionInfo hri = RegionInfoBuilder.newBuilder(htd.getTableName()).\n+            setStartKey(i == 0? HConstants.EMPTY_BYTE_ARRAY: Bytes.toBytes((byte)i)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTIzOTk3", "url": "https://github.com/apache/hbase/pull/1062#pullrequestreview-345123997", "createdAt": "2020-01-20T07:50:44Z", "commit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwNzo1MDo0NVrOFfVqzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwODoyMzo0MlrOFfWUFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwNTE5Ng==", "bodyText": "The BB passed here contain only the row bytes? The BB is sliced for row alone?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368405196", "createdAt": "2020-01-20T07:50:45Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java", "diffHunk": "@@ -80,6 +83,24 @@ static CellComparator getInstance() {\n    */\n   int compareRows(Cell cell, byte[] bytes, int offset, int length);\n \n+  /**\n+   * @param row ByteBuffer that wraps a row; will read from current position and will reading all\n+   *            remaining; will not disturb the ByteBuffer internal state.\n+   * @return greater than 0 if leftCell is bigger, less than 0 if rightCell is bigger, 0 if both\n+   *         cells are equal\n+   */\n+  default int compareRows(ByteBuffer row, Cell cell) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQwOTYxNQ==", "bodyText": "I see. This method is moved to CellComparator. Is that required? This impl here correctly handle things. Within the BBUtils we are handling HBB/DBB. But in this patch, it is trying to handle in CellComparator which is not good IMHO.\nAlso within this context we know the passed row BB is sliced for the rk bytes alone. Within CellComparator we can not have such assumption. So its better to keep it here only.  I believe only this class is having such need for compares. Any other place?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368409615", "createdAt": "2020-01-20T08:05:49Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -154,19 +153,6 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     }\n   }\n \n-  private int compareRows(ByteBuffer row, Cell seekCell) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMDM0MQ==", "bodyText": "This I like :-)  Our best effort to make things work.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368410341", "createdAt": "2020-01-20T08:07:59Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java", "diffHunk": "@@ -114,6 +118,11 @@ public HFileContext(HFileContext context) {\n     this.hfileName = hfileName;\n     this.columnFamily = columnFamily;\n     this.tableName = tableName;\n+    // If no cellComparator specified, make a guess based off tablename. If hbase:meta, then should\n+    // be the meta table comparator. Comparators are per table.\n+    this.cellComparator = cellComparator != null? cellComparator:\n+      this.tableName != null? CellComparatorImpl.getCellComparator(this.tableName):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMTAxOQ==", "bodyText": "Can we just use TableName.isMetaTableName(TableName) here?  Why to have the indirection of toBytes and then compare bytes?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368411019", "createdAt": "2020-01-20T08:09:44Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java", "diffHunk": "@@ -387,4 +409,23 @@ public Comparator getSimpleComparator() {\n   public Comparator getSimpleComparator() {\n     return new BBKVComparator(this);\n   }\n+\n+  /**\n+   * Utility method that makes a guess at comparator to use based off passed tableName.\n+   * Use in extreme when no comparator specified.\n+   * @return CellComparator to use going off the <code>tableName</code> passed.\n+   */\n+  public static CellComparator getCellComparator(TableName tableName) {\n+    return getCellComparator(tableName.toBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMzE3OQ==", "bodyText": "With out this also (with below way of get class based on the name) it will work? U just added a short circuit here? Or u fixing some issue here with below getComparatorClass(comparatorClassName)?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368413179", "createdAt": "2020-01-20T08:16:26Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java", "diffHunk": "@@ -624,19 +624,22 @@ private String getHBase1CompatibleName(final String comparator) {\n     return comparatorKlass;\n   }\n \n-  public static CellComparator createComparator(\n-      String comparatorClassName) throws IOException {\n+  static CellComparator createComparator(String comparatorClassName) throws IOException {\n+    if (comparatorClassName.equals(CellComparatorImpl.COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.COMPARATOR;\n+    } else if (comparatorClassName.equals(\n+        CellComparatorImpl.META_COMPARATOR.getClass().getName())) {\n+      return CellComparatorImpl.META_COMPARATOR;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxMzU0Mw==", "bodyText": "So here the comparator class name will be passed within the fileContext from upper layers. Good.", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368413543", "createdAt": "2020-01-20T08:17:31Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java", "diffHunk": "@@ -319,7 +312,7 @@ public Writer create() throws IOException {\n           LOG.debug(\"Unable to set drop behind on {}\", path.getName());\n         }\n       }\n-      return new HFileWriterImpl(conf, cacheConf, path, ostream, comparator, fileContext);\n+      return new HFileWriterImpl(conf, cacheConf, path, ostream, fileContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxNTE1Mg==", "bodyText": "Do we really need to build new HFileContextBuilder and HFileContext to set?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368415152", "createdAt": "2020-01-20T08:21:59Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileBlock.java", "diffHunk": "@@ -1827,7 +1827,8 @@ protected HFileBlock readBlockDataInternal(FSDataInputStream is, long offset,\n \n     @Override\n     public void setIncludesMemStoreTS(boolean includesMemstoreTS) {\n-      this.fileContext.setIncludesMvcc(includesMemstoreTS);\n+      this.fileContext = new HFileContextBuilder(this.fileContext).\n+        withIncludesMvcc(includesMemstoreTS).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODMxMDc1NA=="}, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQxNTc2NA==", "bodyText": "Better to have a trailer.getComparator() which internally do this create?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368415764", "createdAt": "2020-01-20T08:23:42Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java", "diffHunk": "@@ -380,7 +386,8 @@ private HFileContext createHFileContext(Path path,\n     HFileContextBuilder builder = new HFileContextBuilder()\n       .withHBaseCheckSum(true)\n       .withHFileName(path.getName())\n-      .withCompression(trailer.getCompressionCodec());\n+      .withCompression(trailer.getCompressionCodec())\n+      .withCellComparator(trailer.createComparator(trailer.getComparatorClassName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTY5NDAw", "url": "https://github.com/apache/hbase/pull/1062#pullrequestreview-345169400", "createdAt": "2020-01-20T09:21:56Z", "commit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyMTo1NlrOFfXyrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyMTo1NlrOFfXyrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzOTk4Mg==", "bodyText": "I too agree to @anoopsjohn . Seems we deliberately left this compareRows() here. Is there a similar compareRows in every encoder?", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368439982", "createdAt": "2020-01-20T09:21:56Z", "author": {"login": "ramkrish86"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -131,8 +131,7 @@ private int binarySearch(Cell seekCell, boolean seekBefore) {\n     int comp = 0;\n     while (low <= high) {\n       mid = low + ((high - low) >> 1);\n-      ByteBuffer row = getRow(mid);\n-      comp = compareRows(row, seekCell);\n+      comp = this.cellComparator.compareRows(getRow(mid), seekCell);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1MTczNTQ0", "url": "https://github.com/apache/hbase/pull/1062#pullrequestreview-345173544", "createdAt": "2020-01-20T09:28:21Z", "commit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyODoyMVrOFfX_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyODoyMVrOFfX_HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MzE2NA==", "bodyText": "So every where it comes from the context only including for the blooms", "url": "https://github.com/apache/hbase/pull/1062#discussion_r368443164", "createdAt": "2020-01-20T09:28:21Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java", "diffHunk": "@@ -135,14 +132,16 @@ private StoreFileWriter(FileSystem fs, Path path, final Configuration conf, Cach\n       // init bloom context\n       switch (bloomType) {\n         case ROW:\n-          bloomContext = new RowBloomContext(generalBloomFilterWriter, comparator);\n+          bloomContext =\n+            new RowBloomContext(generalBloomFilterWriter, fileContext.getCellComparator());\n           break;\n         case ROWCOL:\n-          bloomContext = new RowColBloomContext(generalBloomFilterWriter, comparator);\n+          bloomContext =\n+            new RowColBloomContext(generalBloomFilterWriter, fileContext.getCellComparator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f45287b27aae2cece0959ba69b9e2ba02dc19982", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/f45287b27aae2cece0959ba69b9e2ba02dc19982", "committedDate": "2020-01-18T15:35:14Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}, "afterCommit": {"oid": "cc691c7b79f1fcc9b7945a0e784abddd72432e98", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/cc691c7b79f1fcc9b7945a0e784abddd72432e98", "committedDate": "2020-01-21T21:01:55Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjA4MDE3", "url": "https://github.com/apache/hbase/pull/1062#pullrequestreview-346208017", "createdAt": "2020-01-21T21:35:57Z", "commit": {"oid": "cc691c7b79f1fcc9b7945a0e784abddd72432e98"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc691c7b79f1fcc9b7945a0e784abddd72432e98", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/cc691c7b79f1fcc9b7945a0e784abddd72432e98", "committedDate": "2020-01-21T21:01:55Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}, "afterCommit": {"oid": "3f229b18dbceb5a6688e1067305477e96368dcdd", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/3f229b18dbceb5a6688e1067305477e96368dcdd", "committedDate": "2020-01-21T23:23:52Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ffef9839fae0fd1c41f16515af67b73ca1d6d52", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/4ffef9839fae0fd1c41f16515af67b73ca1d6d52", "committedDate": "2020-01-22T07:15:17Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f229b18dbceb5a6688e1067305477e96368dcdd", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/3f229b18dbceb5a6688e1067305477e96368dcdd", "committedDate": "2020-01-21T23:23:52Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}, "afterCommit": {"oid": "4ffef9839fae0fd1c41f16515af67b73ca1d6d52", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/4ffef9839fae0fd1c41f16515af67b73ca1d6d52", "committedDate": "2020-01-22T07:15:17Z", "message": "HBASE-23705 Add CellComparator to HFileContext\n\nCodecs don't have access to what CellComparator to use.  Backfill.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparator.java\n Adds a new compareRows with default implementation that takes a ByteBuffer.\n Needed by the index in a block encoder implementation.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/CellComparatorImpl.java\n Adds implementation for meta of new compareRows method. Adds utility\n method for figuring comparator based off tablename.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/AbstractDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/BufferedDataBlockEncoder.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexCodecV1.java\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java\n Comparator is in context. Remove redundant handling.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/DataBlockEncoder.java\n Comparator is in context. Remove redundant handling. Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/HFileBlockDecodingContext.java\n Clean javadoc.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexEncoderV1.java\n Cache context so can use it to get comparator to use later.\n\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContext.java\n Cache cellcomparator to use. Javdoc on diff between HFileContext and\n HFileInfo.\nM hbase-common/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileContextBuilder.java\n Add CellComparator\n\nM hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/HFileOutputFormat2.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFile.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileWriterImpl.java\nM hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFileWriter.java\n Remove comparator caching. Get from context instead.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/FixedFileTrailer.java\n Skip a reflection if we can.\n\nM hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileInfo.java\n Javadoc. Removed unused filed."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2985, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}