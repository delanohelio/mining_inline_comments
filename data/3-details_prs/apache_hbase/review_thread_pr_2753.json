{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NjU3OTk3", "number": 2753, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyMzoxNVrOFClDJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo0MDo1MFrOFDIMkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQ4NDg2OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyMzoxNVrOIB0ifg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNTo0MDoxNFrOIC2anQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MDI4Ng==", "bodyText": "What are we protecting against? Could we be passed a tablename? If so, why can't we have a tablename that is an MD5? Or 32 bytes in size?  Should we check it is all hex at least? I suppose if someone passes a tablename that is an md5, then they are asking for trouble?", "url": "https://github.com/apache/hbase/pull/2753#discussion_r538780286", "createdAt": "2020-12-08T20:23:15Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "diffHunk": "@@ -363,7 +363,23 @@ static TableName getTable(final byte [] regionName) {\n   @InterfaceAudience.Private // For use by internals only.\n   public static boolean isEncodedRegionName(byte[] regionName) {\n     // If not parseable as region name, presume encoded. TODO: add stringency; e.g. if hex.\n-    return parseRegionNameOrReturnNull(regionName) == null && regionName.length <= MD5_HEX_LENGTH;\n+    if (parseRegionNameOrReturnNull(regionName) == null) {\n+      if (regionName.length > MD5_HEX_LENGTH) {\n+        return false;\n+      } else if (regionName.length == MD5_HEX_LENGTH) {\n+        return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NTA1Mw==", "bodyText": "Thanks @saintstack. Two issues are addressed.\nFor compact/flush/split with the tableName,\n`    # Requests a table or region or column family major compaction\ndef major_compact(table_or_region_name, family = nil, type = 'NORMAL')\nfamily_bytes = nil\nfamily_bytes = family.to_java_bytes unless family.nil?\ncompact_type = nil\nif type == 'NORMAL'\ncompact_type = org.apache.hadoop.hbase.client.CompactType::NORMAL\nelsif type == 'MOB'\ncompact_type = org.apache.hadoop.hbase.client.CompactType::MOB\nelse\nraise ArgumentError, 'only NORMAL or MOB accepted for type!'\nend\n  begin\n    if family_bytes.nil?\n      @admin.majorCompactRegion(table_or_region_name.to_java_bytes)\n    else\n      @admin.majorCompactRegion(table_or_region_name.to_java_bytes, family_bytes)\n    end\n  rescue java.lang.IllegalArgumentException, org.apache.hadoop.hbase.UnknownRegionException\n    if family_bytes.nil?\n      @admin.majorCompact(TableName.valueOf(table_or_region_name), compact_type)\n    else\n      @admin.majorCompact(TableName.valueOf(table_or_region_name), family_bytes, compact_type)\n    end\n  end\nend\n\n`\nit first calls majorCompactRegion() with tableName as input. It expects an IllegalArgumentException or UnknownRegionException to call majorCompact().\nThis normally involves a registry query to get this UnknownRegionException, this is an expensive path.\nIf it knows that the input string is not an encodedRegionName or regionName, it can throw out IllegalArgumentException without registry query.\nFor the case that a md5 hex being used as tableName, it has to go through expensive path to find out that this is not an encodedRegionName, it will still work, just optimization wont be applied in this case.\nIt also fixes a bug for a table name length over 32 bytes, currently, compact/flush/split this tableName from shell will fail.", "url": "https://github.com/apache/hbase/pull/2753#discussion_r538795053", "createdAt": "2020-12-08T20:48:38Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "diffHunk": "@@ -363,7 +363,23 @@ static TableName getTable(final byte [] regionName) {\n   @InterfaceAudience.Private // For use by internals only.\n   public static boolean isEncodedRegionName(byte[] regionName) {\n     // If not parseable as region name, presume encoded. TODO: add stringency; e.g. if hex.\n-    return parseRegionNameOrReturnNull(regionName) == null && regionName.length <= MD5_HEX_LENGTH;\n+    if (parseRegionNameOrReturnNull(regionName) == null) {\n+      if (regionName.length > MD5_HEX_LENGTH) {\n+        return false;\n+      } else if (regionName.length == MD5_HEX_LENGTH) {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MDI4Ng=="}, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg1OTYxMw==", "bodyText": "THanks for explanation. Shove this up in the JIRA description? Its good. Thanks.", "url": "https://github.com/apache/hbase/pull/2753#discussion_r539859613", "createdAt": "2020-12-10T05:40:14Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "diffHunk": "@@ -363,7 +363,23 @@ static TableName getTable(final byte [] regionName) {\n   @InterfaceAudience.Private // For use by internals only.\n   public static boolean isEncodedRegionName(byte[] regionName) {\n     // If not parseable as region name, presume encoded. TODO: add stringency; e.g. if hex.\n-    return parseRegionNameOrReturnNull(regionName) == null && regionName.length <= MD5_HEX_LENGTH;\n+    if (parseRegionNameOrReturnNull(regionName) == null) {\n+      if (regionName.length > MD5_HEX_LENGTH) {\n+        return false;\n+      } else if (regionName.length == MD5_HEX_LENGTH) {\n+        return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MDI4Ng=="}, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQ5MTAwOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyNDo0NVrOIB0mPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo1Mzo1NlrOIB1qCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTI0NA==", "bodyText": "We know the hbase:meta int. It does not change. Compare it? When meta splits, it will have md5 for new regions.", "url": "https://github.com/apache/hbase/pull/2753#discussion_r538781244", "createdAt": "2020-12-08T20:24:45Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "diffHunk": "@@ -363,7 +363,23 @@ static TableName getTable(final byte [] regionName) {\n   @InterfaceAudience.Private // For use by internals only.\n   public static boolean isEncodedRegionName(byte[] regionName) {\n     // If not parseable as region name, presume encoded. TODO: add stringency; e.g. if hex.\n-    return parseRegionNameOrReturnNull(regionName) == null && regionName.length <= MD5_HEX_LENGTH;\n+    if (parseRegionNameOrReturnNull(regionName) == null) {\n+      if (regionName.length > MD5_HEX_LENGTH) {\n+        return false;\n+      } else if (regionName.length == MD5_HEX_LENGTH) {\n+        return true;\n+      } else {\n+        String encodedName = Bytes.toString(regionName);\n+        try {\n+          Integer.parseInt(encodedName);\n+          // If this is a valid integer, it could be hbase:meta's encoded region name.\n+          return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5ODYwMg==", "bodyText": "It needs to have meta regionname to compare (another query). This will defeat the purpose of optimization, so instead, it just check if it is an integer. If it is an integer, then this is a possible encoded region name.", "url": "https://github.com/apache/hbase/pull/2753#discussion_r538798602", "createdAt": "2020-12-08T20:53:56Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "diffHunk": "@@ -363,7 +363,23 @@ static TableName getTable(final byte [] regionName) {\n   @InterfaceAudience.Private // For use by internals only.\n   public static boolean isEncodedRegionName(byte[] regionName) {\n     // If not parseable as region name, presume encoded. TODO: add stringency; e.g. if hex.\n-    return parseRegionNameOrReturnNull(regionName) == null && regionName.length <= MD5_HEX_LENGTH;\n+    if (parseRegionNameOrReturnNull(regionName) == null) {\n+      if (regionName.length > MD5_HEX_LENGTH) {\n+        return false;\n+      } else if (regionName.length == MD5_HEX_LENGTH) {\n+        return true;\n+      } else {\n+        String encodedName = Bytes.toString(regionName);\n+        try {\n+          Integer.parseInt(encodedName);\n+          // If this is a valid integer, it could be hbase:meta's encoded region name.\n+          return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTI0NA=="}, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MjQ5MzAyOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDoyNToxOVrOIB0nfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQyMDo1NzozMFrOIB14KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTU2Nw==", "bodyText": "How about some tests for this change in this method?", "url": "https://github.com/apache/hbase/pull/2753#discussion_r538781567", "createdAt": "2020-12-08T20:25:19Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "diffHunk": "@@ -363,7 +363,23 @@ static TableName getTable(final byte [] regionName) {\n   @InterfaceAudience.Private // For use by internals only.\n   public static boolean isEncodedRegionName(byte[] regionName) {\n     // If not parseable as region name, presume encoded. TODO: add stringency; e.g. if hex.\n-    return parseRegionNameOrReturnNull(regionName) == null && regionName.length <= MD5_HEX_LENGTH;\n+    if (parseRegionNameOrReturnNull(regionName) == null) {\n+      if (regionName.length > MD5_HEX_LENGTH) {\n+        return false;\n+      } else if (regionName.length == MD5_HEX_LENGTH) {\n+        return true;\n+      } else {\n+        String encodedName = Bytes.toString(regionName);\n+        try {\n+          Integer.parseInt(encodedName);\n+          // If this is a valid integer, it could be hbase:meta's encoded region name.\n+          return true;\n+        } catch(NumberFormatException er) {\n+          return false;\n+        }\n+      }\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODgwMjIxNw==", "bodyText": "The new test case testCompactATableWithSuperLongTableName() is for this purpose.\nIt calls majorCompactRegion() for tableName with length over 32 bytes and tested a short-length table name, expecting it throw out the expected exception.", "url": "https://github.com/apache/hbase/pull/2753#discussion_r538802217", "createdAt": "2020-12-08T20:57:30Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RegionInfo.java", "diffHunk": "@@ -363,7 +363,23 @@ static TableName getTable(final byte [] regionName) {\n   @InterfaceAudience.Private // For use by internals only.\n   public static boolean isEncodedRegionName(byte[] regionName) {\n     // If not parseable as region name, presume encoded. TODO: add stringency; e.g. if hex.\n-    return parseRegionNameOrReturnNull(regionName) == null && regionName.length <= MD5_HEX_LENGTH;\n+    if (parseRegionNameOrReturnNull(regionName) == null) {\n+      if (regionName.length > MD5_HEX_LENGTH) {\n+        return false;\n+      } else if (regionName.length == MD5_HEX_LENGTH) {\n+        return true;\n+      } else {\n+        String encodedName = Bytes.toString(regionName);\n+        try {\n+          Integer.parseInt(encodedName);\n+          // If this is a valid integer, it could be hbase:meta's encoded region name.\n+          return true;\n+        } catch(NumberFormatException er) {\n+          return false;\n+        }\n+      }\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4MTU2Nw=="}, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODI0MzM2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo0MDo1MFrOICog8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo0MDo1MFrOICog8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTYzMTg1OQ==", "bodyText": "Will remove these two lines, they are used for testing before the new test case.", "url": "https://github.com/apache/hbase/pull/2753#discussion_r539631859", "createdAt": "2020-12-09T20:40:50Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAdmin1.java", "diffHunk": "@@ -116,6 +130,8 @@ public void testCompactionTimestamps() throws Exception {\n     assertEquals(0, ts);\n \n     ADMIN.flush(tableName);\n+    //ADMIN.majorCompactRegion(Bytes.toBytes(\"abcdefghijklmnopqrstuvwxyzabcdedgeghijklmnopqrs\"));\n+    ADMIN.majorCompactRegion(Bytes.toBytes(\"abcd\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4167a7292c7d249056fc7a1b721dca7f92ff12a"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2330, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}