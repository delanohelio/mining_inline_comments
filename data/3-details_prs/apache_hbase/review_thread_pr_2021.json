{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTIxMzg1", "number": 2021, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0ODo1OFrOEMkp9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NzowNFrOERjl-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjE4OTMzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0ODo1OFrOGuwwMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo0ODo1OFrOGuwwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4NjQ0OQ==", "bodyText": "The actual fix is this alone right?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r451686449", "createdAt": "2020-07-08T16:48:58Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -178,14 +177,17 @@ public void run() {\n         for (Iterator<Entry<WAL, Boolean>> iter = walNeedsRoll.entrySet().iterator(); iter\n           .hasNext();) {\n           Entry<WAL, Boolean> entry = iter.next();\n+          if (!periodic && !entry.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ee29ffdfcbdb761f4f038f066fac34ee2ce6c8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjIwMDM4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjo1MTozNFrOGuw2uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwNzowMTowMFrOGvsFAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4ODEyMw==", "bodyText": "Not on this patch directly.\nWe have the periodic WAL roll.. Every WAL should get rolled as per this period.  When one WAL gets rolled, we will change the lastRollTime and so it can happen that some WALs will ever get rolled!\nThis issue will be visible now as we will selectively roll WAL files after this patch.  Actually we need to track the lastRollTime per WAL instance.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r451688123", "createdAt": "2020-07-08T16:51:34Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -148,10 +148,9 @@ private void abort(String reason, Throwable cause) {\n   @Override\n   public void run() {\n     while (running) {\n-      boolean periodic = false;\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      periodic = (now - this.lastRollTime) > this.rollPeriod;\n+      boolean periodic = (now - this.lastRollTime) > this.rollPeriod;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2ee29ffdfcbdb761f4f038f066fac34ee2ce6c8"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY1ODQzMg==", "bodyText": "It's like this, I ignored it. Thanks for reminding", "url": "https://github.com/apache/hbase/pull/2021#discussion_r452658432", "createdAt": "2020-07-10T07:01:00Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -148,10 +148,9 @@ private void abort(String reason, Throwable cause) {\n   @Override\n   public void run() {\n     while (running) {\n-      boolean periodic = false;\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      periodic = (now - this.lastRollTime) > this.rollPeriod;\n+      boolean periodic = (now - this.lastRollTime) > this.rollPeriod;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY4ODEyMw=="}, "originalCommit": {"oid": "d2ee29ffdfcbdb761f4f038f066fac34ee2ce6c8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg4NDkwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjozNjowMlrOGwMlOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjozNjowMlrOGwMlOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5MDk2OQ==", "bodyText": "isRollRequested() can be the better name?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453190969", "createdAt": "2020-07-11T12:36:02Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +248,35 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    boolean isRequestRoll;\n+    long lastRollTime;\n+\n+    RollController() {\n+      this.isRequestRoll = false;\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    void requestRoll() {\n+      this.isRequestRoll = true;\n+    }\n+\n+    void finishRoll() {\n+      this.isRequestRoll = false;\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public boolean isRequestRoll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTg4Njg5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjozOTo1OVrOGwMmMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxMjozOTo1OVrOGwMmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE5MTIxNw==", "bodyText": "This is exposed for test cases only.  This is a private class.. So its ok to change the return type.  The new RollController gives clear idea whether a wal instance needs roll because of periodic roll or being explicitly asked for. So that is better.\nA return type of Map<WAL, RollController>\nAny way then we dont need synchronized block.  Else, if we have to do as what is being done below in patch, we would need synchronized block", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453191217", "createdAt": "2020-07-11T12:39:59Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -66,6 +67,10 @@ protected void scheduleFlush(String encodedRegionName, List<byte[]> families) {\n \n   @VisibleForTesting\n   Map<WAL, Boolean> getWalNeedsRoll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjAyMjAzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTo0NzowMVrOGwNlCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTo0NzowMVrOGwNlCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNzMwNQ==", "bodyText": "We add all WAL instances into this once it is created. We can just call it wals?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453207305", "createdAt": "2020-07-11T15:47:01Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,14 +57,13 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> walNeedsRoll = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjAyNjE4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTo1Mzo1MFrOGwNnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNTo1Mzo1MFrOGwNnFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIwNzgyOA==", "bodyText": "A better name ?  needsPeriodicRoll ?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453207828", "createdAt": "2020-07-11T15:53:50Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +248,35 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    boolean isRequestRoll;\n+    long lastRollTime;\n+\n+    RollController() {\n+      this.isRequestRoll = false;\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    void requestRoll() {\n+      this.isRequestRoll = true;\n+    }\n+\n+    void finishRoll() {\n+      this.isRequestRoll = false;\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public boolean isRequestRoll() {\n+      return isRequestRoll;\n+    }\n+\n+    boolean isPeriodRoll(long now) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjA2MTUwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo0MTozM1rOGwN35g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo0MTozM1rOGwN35g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMjEzNA==", "bodyText": "This name is bit confusing. This is not called once roll is finished. We can just call this resetStatus()? Give proper comment that this resets rollReq status as well as lastRollTime. We can pass the ts as param 'lastRollTime' so that this is clear.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453212134", "createdAt": "2020-07-11T16:41:33Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +248,35 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    boolean isRequestRoll;\n+    long lastRollTime;\n+\n+    RollController() {\n+      this.isRequestRoll = false;\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    void requestRoll() {\n+      this.isRequestRoll = true;\n+    }\n+\n+    void finishRoll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjA2NDk3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo0NjoxNlrOGwN5kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo0NjoxNlrOGwN5kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMjU2Mw==", "bodyText": "We can have a single method in RollController which says this WAL needs roll?     RollController#needsRoll().", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453212563", "createdAt": "2020-07-11T16:46:16Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -174,18 +170,21 @@ public void run() {\n         }\n       }\n       try {\n-        this.lastRollTime = System.currentTimeMillis();\n-        for (Iterator<Entry<WAL, Boolean>> iter = walNeedsRoll.entrySet().iterator(); iter\n-          .hasNext();) {\n-          Entry<WAL, Boolean> entry = iter.next();\n+        for (Iterator<Entry<WAL, RollController>> iter = walNeedsRoll.entrySet().iterator();\n+             iter.hasNext();) {\n+          Entry<WAL, RollController> entry = iter.next();\n+          RollController controller = entry.getValue();\n+          if (!controller.isRequestRoll && !controller.isPeriodRoll(now)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjA3MjU0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo1NjoxOFrOGwN9MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo1NjoxOFrOGwN9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzQ4OQ==", "bodyText": "This log is not much value added now as we dont say for which log(s) need this periodic roll.  We can clearly say WAL roll period {} elapsed for one of the WAL.\nBelow we can make sure we log which wal(s) are getting rolled for what purpose", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453213489", "createdAt": "2020-07-11T16:56:18Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -148,16 +146,14 @@ private void abort(String reason, Throwable cause) {\n   @Override\n   public void run() {\n     while (running) {\n-      boolean periodic = false;\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      periodic = (now - this.lastRollTime) > this.rollPeriod;\n-      if (periodic) {\n+      if (walNeedsRoll.values().stream().anyMatch(rc -> rc.isPeriodRoll(now))) {\n         // Time for periodic roll, fall through\n         LOG.debug(\"WAL roll period {} ms elapsed\", this.rollPeriod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjA3MjYzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo1NjozMFrOGwN9Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo1NjozMFrOGwN9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzUwMg==", "bodyText": "Same as above comment", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453213502", "createdAt": "2020-07-11T16:56:30Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -148,16 +146,14 @@ private void abort(String reason, Throwable cause) {\n   @Override\n   public void run() {\n     while (running) {\n-      boolean periodic = false;\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      periodic = (now - this.lastRollTime) > this.rollPeriod;\n-      if (periodic) {\n+      if (walNeedsRoll.values().stream().anyMatch(rc -> rc.isPeriodRoll(now))) {\n         // Time for periodic roll, fall through\n         LOG.debug(\"WAL roll period {} ms elapsed\", this.rollPeriod);\n       } else {\n         synchronized (this) {\n-          if (walNeedsRoll.values().stream().anyMatch(Boolean::booleanValue)) {\n+          if (walNeedsRoll.values().stream().anyMatch(rc -> rc.isRequestRoll)) {\n             // WAL roll requested, fall through\n             LOG.debug(\"WAL roll requested\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjA3NDMyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo1OTowMVrOGwN-AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNTo1NjoyNVrOGwcXnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzY5Nw==", "bodyText": "Ideally we need this call also within a synchronized block. This is an existing issue.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453213697", "createdAt": "2020-07-11T16:59:01Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -174,18 +170,21 @@ public void run() {\n         }\n       }\n       try {\n-        this.lastRollTime = System.currentTimeMillis();\n-        for (Iterator<Entry<WAL, Boolean>> iter = walNeedsRoll.entrySet().iterator(); iter\n-          .hasNext();) {\n-          Entry<WAL, Boolean> entry = iter.next();\n+        for (Iterator<Entry<WAL, RollController>> iter = walNeedsRoll.entrySet().iterator();\n+             iter.hasNext();) {\n+          Entry<WAL, RollController> entry = iter.next();\n+          RollController controller = entry.getValue();\n+          if (!controller.isRequestRoll && !controller.isPeriodRoll(now)) {\n+            continue;\n+          }\n           WAL wal = entry.getKey();\n           // reset the flag in front to avoid missing roll request before we return from rollWriter.\n-          walNeedsRoll.put(wal, Boolean.FALSE);\n+          controller.finishRoll();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ0OTYzMQ==", "bodyText": "Thank you very much for your tips", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453449631", "createdAt": "2020-07-13T05:56:25Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -174,18 +170,21 @@ public void run() {\n         }\n       }\n       try {\n-        this.lastRollTime = System.currentTimeMillis();\n-        for (Iterator<Entry<WAL, Boolean>> iter = walNeedsRoll.entrySet().iterator(); iter\n-          .hasNext();) {\n-          Entry<WAL, Boolean> entry = iter.next();\n+        for (Iterator<Entry<WAL, RollController>> iter = walNeedsRoll.entrySet().iterator();\n+             iter.hasNext();) {\n+          Entry<WAL, RollController> entry = iter.next();\n+          RollController controller = entry.getValue();\n+          if (!controller.isRequestRoll && !controller.isPeriodRoll(now)) {\n+            continue;\n+          }\n           WAL wal = entry.getKey();\n           // reset the flag in front to avoid missing roll request before we return from rollWriter.\n-          walNeedsRoll.put(wal, Boolean.FALSE);\n+          controller.finishRoll();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzY5Nw=="}, "originalCommit": {"oid": "07afe84ba265901552e2938bdc27a1ba5af8fcff"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzk3NDU3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoxODo1MVrOGwcxBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoxODo1MVrOGwcxBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NjEzMw==", "bodyText": "This is overall coming good now.  Much more clean than what we had before. Thanks\nOne issue here though.  We have rollWal() and requestRoll() under same lock now.. That is not good. The requestRoll should not wait for ongoing roll to be finished. The request call is in hot path.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453456133", "createdAt": "2020-07-13T06:18:51Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +244,42 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private boolean isRequestRoll;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.isRequestRoll = false;\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public synchronized void requestRoll() {\n+      this.isRequestRoll = true;\n+    }\n+\n+    public synchronized Map<byte[], List<byte[]>> rollWal(long lastRollTime) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b427b3be54a59b2cf1ac4bf45f494e0d3f7ad65"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzk3ODk2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMDo0NFrOGwczgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMDo0NFrOGwczgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1Njc3MA==", "bodyText": "Previously, when we are going for a roll because of periodic roll, then also we used to keep the value in Map as TRUE right?  Means here we checked that also.  Because of any reason, the WAL is marked for roll, dont do this check.  So here that is missing now.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r453456770", "createdAt": "2020-07-13T06:20:44Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -115,9 +113,9 @@ protected AbstractWALRoller(String name, Configuration conf, T abortable) {\n    */\n   private void checkLowReplication(long now) {\n     try {\n-      for (Entry<WAL, Boolean> entry : walNeedsRoll.entrySet()) {\n+      for (Entry<WAL, RollController> entry : wals.entrySet()) {\n         WAL wal = entry.getKey();\n-        boolean needRollAlready = entry.getValue();\n+        boolean needRollAlready = entry.getValue().isRollRequested();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b427b3be54a59b2cf1ac4bf45f494e0d3f7ad65"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzMxMTgzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0NDozNlrOGzTlsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMzo0NDozNlrOGzTlsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ1MTUwNg==", "bodyText": "Am not sure whether this way of count based thing also correct. Like say 2 times req roll happened before the actual rolling thread picks up this work. Effectively we need to do roll only once right. Even if 2 or more times being asked. But now as per this change it will try do roll again and again.\nSo a boolean based thing is enough\nWhat we can do is make the requestRoll being synchronized and within rollWal have a synchronized block where you can reset it ad then go ahead with actual roll call.\nOr we just need an AtomicBoolean only?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r456451506", "createdAt": "2020-07-17T13:44:36Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +247,45 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    // avoid missing roll request before we return from rollWriter\n+    private final AtomicInteger rollRequestCounter;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequestCounter = new AtomicInteger(0);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequestCounter.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15cdba79082d52995c1ad69703007207dbffca41"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MzI1ODM0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDo0OTo0MlrOG0FysQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozMzo1NVrOG0wAEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NDAzMw==", "bodyText": "Hey this is where we need to reset it even before we do actual roll work.. We were doing that.  We had a comment also.\n// reset the flag in front to avoid missing roll request before we return from rollWriter.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457274033", "createdAt": "2020-07-20T10:49:42Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +247,43 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public Map<byte[], List<byte[]>> rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      Map<byte[], List<byte[]>> regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c1a4807a3f938d009e5b1326f30db271d68f9d8"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI5MTMzMg==", "bodyText": "thank you very much! I also noticed this, but in order to avoid repeated roll, so fix to that. if use boolean, roll at most once, the impact can be ignored. Thanks for review", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457291332", "createdAt": "2020-07-20T11:18:17Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +247,43 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public Map<byte[], List<byte[]>> rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      Map<byte[], List<byte[]>> regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NDAzMw=="}, "originalCommit": {"oid": "3c1a4807a3f938d009e5b1326f30db271d68f9d8"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzMwNjQwOA==", "bodyText": "Sorry did not get.  How AtomicBoolean is different compared to boolean wrt repeated roll possibility.  In the past we used to keep the Boolean state in a Map.  Now in this object.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457306408", "createdAt": "2020-07-20T11:42:31Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +247,43 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public Map<byte[], List<byte[]>> rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      Map<byte[], List<byte[]>> regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NDAzMw=="}, "originalCommit": {"oid": "3c1a4807a3f938d009e5b1326f30db271d68f9d8"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg1ODU3NA==", "bodyText": "after reset flag, before roll is complete, if have a roll request, that will also cause an extra roll.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457858574", "createdAt": "2020-07-21T06:09:52Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +247,43 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public Map<byte[], List<byte[]>> rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      Map<byte[], List<byte[]>> regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NDAzMw=="}, "originalCommit": {"oid": "3c1a4807a3f938d009e5b1326f30db271d68f9d8"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMDg4Ng==", "bodyText": "Yes. That is happening now also.  We intentionally reset the boolean when we start roll itself.\n// reset the flag in front to avoid missing roll request before we return from rollWriter.\nSo there is no change for that right now.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457920886", "createdAt": "2020-07-21T08:19:33Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +247,43 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public Map<byte[], List<byte[]>> rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      Map<byte[], List<byte[]>> regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NDAzMw=="}, "originalCommit": {"oid": "3c1a4807a3f938d009e5b1326f30db271d68f9d8"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NTU4NA==", "bodyText": "yes, I go it", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457965584", "createdAt": "2020-07-21T09:33:55Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -249,4 +247,43 @@ public void close() {\n     running = false;\n     interrupt();\n   }\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public Map<byte[], List<byte[]>> rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      Map<byte[], List<byte[]>> regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI3NDAzMw=="}, "originalCommit": {"oid": "3c1a4807a3f938d009e5b1326f30db271d68f9d8"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzkzNTM0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDowNjowNVrOG0xHyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDowNjowNVrOG0xHyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4Mzk0Nw==", "bodyText": "Seems this boolean is not needed now. Can u pls delete", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457983947", "createdAt": "2020-07-21T10:06:05Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -148,53 +147,52 @@ private void abort(String reason, Throwable cause) {\n   @Override\n   public void run() {\n     while (running) {\n-      boolean periodic = false;\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      periodic = (now - this.lastRollTime) > this.rollPeriod;\n-      if (periodic) {\n-        // Time for periodic roll, fall through\n-        LOG.debug(\"WAL roll period {} ms elapsed\", this.rollPeriod);\n-      } else {\n-        synchronized (this) {\n-          if (walNeedsRoll.values().stream().anyMatch(Boolean::booleanValue)) {\n-            // WAL roll requested, fall through\n-            LOG.debug(\"WAL roll requested\");\n-          } else {\n-            try {\n-              wait(this.threadWakeFrequency);\n-            } catch (InterruptedException e) {\n-              // restore the interrupt state\n-              Thread.currentThread().interrupt();\n-            }\n-            // goto the beginning to check whether again whether we should fall through to roll\n-            // several WALs, and also check whether we should quit.\n-            continue;\n+      synchronized (this) {\n+        if (wals.values().stream().noneMatch(rc -> rc.needsRoll(now))) {\n+          try {\n+            wait(this.threadWakeFrequency);\n+          } catch (InterruptedException e) {\n+            // restore the interrupt state\n+            Thread.currentThread().interrupt();\n           }\n+          // goto the beginning to check whether again whether we should fall through to roll\n+          // several WALs, and also check whether we should quit.\n+          continue;\n         }\n       }\n       try {\n-        this.lastRollTime = System.currentTimeMillis();\n-        for (Iterator<Entry<WAL, Boolean>> iter = walNeedsRoll.entrySet().iterator(); iter\n-          .hasNext();) {\n-          Entry<WAL, Boolean> entry = iter.next();\n+        for (Iterator<Entry<WAL, RollController>> iter = wals.entrySet().iterator();\n+             iter.hasNext();) {\n+          Entry<WAL, RollController> entry = iter.next();\n           WAL wal = entry.getKey();\n-          // reset the flag in front to avoid missing roll request before we return from rollWriter.\n-          walNeedsRoll.put(wal, Boolean.FALSE);\n-          Map<byte[], List<byte[]>> regionsToFlush = null;\n+          RollController controller = entry.getValue();\n+          boolean isRequestRoll;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e9e134606753f1706c89699a541bbb2a64195d"}, "originalPosition": 138}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzk2MTQyOnYy", "diffSide": "LEFT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoxMzozMlrOG0xX2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoxMzozMlrOG0xX2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4ODA1OA==", "bodyText": "Checking its usage, I think this API impl is already buggy.   This just checks the status of the boolean. Once we start a roll on a WAL, we reset the boolean (Even before this patch).  So it is not clearly telling anything abt the roll status. This can return true even while an active wal roll is going on.  We can keep it as an another jira and fix (if required).. Just add some TODO comments here.\nWe might need another boolean in Controller which clearly tracks whether we are ongoing a roll. So this really need to check that status as well as a requested roll status.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457988058", "createdAt": "2020-07-21T10:13:32Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -232,7 +230,7 @@ private boolean isWaiting() {\n    * @return true if all WAL roll finished\n    */\n   public boolean walRollFinished() {\n-    return walNeedsRoll.values().stream().allMatch(needRoll -> !needRoll) && isWaiting();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e9e134606753f1706c89699a541bbb2a64195d"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzk2NjUzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoxNTowMFrOG0xa-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoxNTowMFrOG0xa-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4ODg1OA==", "bodyText": "Here rather than isRollRequested, we need needsRoll?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457988858", "createdAt": "2020-07-21T10:15:00Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -232,7 +230,7 @@ private boolean isWaiting() {\n    * @return true if all WAL roll finished\n    */\n   public boolean walRollFinished() {\n-    return walNeedsRoll.values().stream().allMatch(needRoll -> !needRoll) && isWaiting();\n+    return wals.values().stream().noneMatch(RollController::isRollRequested) && isWaiting();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e9e134606753f1706c89699a541bbb2a64195d"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzk4MTgwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestLogRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoxOToxOFrOG0xkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyMzoxNlrOG0xszw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTI1NQ==", "bodyText": "We need a 3 sec sleep here? !", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457991255", "createdAt": "2020-07-21T10:19:18Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestLogRoller.java", "diffHunk": "@@ -43,53 +49,104 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestLogRoller.class);\n \n-  private static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n-  private static final int logRollPeriod = 20 * 1000;\n+  private static final int LOG_ROLL_PERIOD = 20 * 1000;\n+  private static final String LOG_DIR = \"WALs\";\n+  private static final String ARCHIVE_DIR = \"archiveWALs\";\n+  private static final String WAL_PREFIX = \"test-log-roller\";\n+  private static Configuration CONF;\n+  private static LogRoller ROLLER;\n+  private static Path ROOT_DIR;\n+  private static FileSystem FS;\n \n   @Before\n   public void setup() throws Exception {\n-    TEST_UTIL.getConfiguration().setInt(\"hbase.regionserver.logroll.period\", logRollPeriod);\n-    TEST_UTIL.startMiniCluster(1);\n-    TableName name = TableName.valueOf(\"Test\");\n-    TEST_UTIL.createTable(name, Bytes.toBytes(\"cf\"));\n-    TEST_UTIL.waitTableAvailable(name);\n+    CONF = TEST_UTIL.getConfiguration();\n+    CONF.setInt(\"hbase.regionserver.logroll.period\", LOG_ROLL_PERIOD);\n+    CONF.setInt(HConstants.THREAD_WAKE_FREQUENCY, 300);\n+    ROOT_DIR = TEST_UTIL.getRandomDir();\n+    FS = FileSystem.get(CONF);\n+    RegionServerServices services = Mockito.mock(RegionServerServices.class);\n+    Mockito.when(services.getConfiguration()).thenReturn(CONF);\n+    ROLLER = new LogRoller(services);\n+    ROLLER.start();\n   }\n \n   @After\n   public void tearDown() throws Exception {\n+    ROLLER.close();\n+    FS.close();\n     TEST_UTIL.shutdownMiniCluster();\n   }\n \n   @Test\n   public void testRemoveClosedWAL() throws Exception {\n-    HRegionServer rs = TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);\n-    Configuration conf = rs.getConfiguration();\n-    LogRoller logRoller = TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getWalRoller();\n-    int originalSize = logRoller.getWalNeedsRoll().size();\n-    FSHLog wal1 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-        AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal1);\n-    FSHLog wal2 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-      AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal2);\n-    FSHLog wal3 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-      AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal3);\n-\n-    assertEquals(originalSize + 3, logRoller.getWalNeedsRoll().size());\n-    assertTrue(logRoller.getWalNeedsRoll().containsKey(wal1));\n-\n-    wal1.close();\n-    Thread.sleep(2 * logRollPeriod);\n-\n-    assertEquals(originalSize + 2, logRoller.getWalNeedsRoll().size());\n-    assertFalse(logRoller.getWalNeedsRoll().containsKey(wal1));\n-\n-    wal2.close();\n-    wal3.close();\n-    Thread.sleep(2 * logRollPeriod);\n-\n-    assertEquals(originalSize, logRoller.getWalNeedsRoll().size());\n+    assertEquals(0, ROLLER.getWalNeedsRoll().size());\n+    for (int i = 1; i <= 3; i++) {\n+      FSHLog wal = new FSHLog(FS, ROOT_DIR, LOG_DIR, ARCHIVE_DIR, CONF, null,\n+        true, WAL_PREFIX, getWALSuffix(i));\n+      ROLLER.addWAL(wal);\n+    }\n+\n+    assertEquals(3, ROLLER.getWalNeedsRoll().size());\n+    Iterator<WAL> it = ROLLER.getWalNeedsRoll().keySet().iterator();\n+    WAL wal = it.next();\n+    assertTrue(ROLLER.getWalNeedsRoll().containsKey(wal));\n+\n+    wal.close();\n+    Thread.sleep(LOG_ROLL_PERIOD + 5000);\n+\n+    assertEquals(2, ROLLER.getWalNeedsRoll().size());\n+    assertFalse(ROLLER.getWalNeedsRoll().containsKey(wal));\n+\n+    wal = it.next();\n+    wal.close();\n+    wal = it.next();\n+    wal.close();\n+    Thread.sleep(LOG_ROLL_PERIOD + 5000);\n+\n+    assertEquals(0, ROLLER.getWalNeedsRoll().size());\n+  }\n+\n+  /**\n+   * verify that each wal roll separately\n+   */\n+  @Test\n+  public void testRequestRollWithMultiWal() throws Exception {\n+    // add multiple wal\n+    Map<FSHLog, Path> wals = new HashMap<>();\n+    for (int i = 1; i <= 3; i++) {\n+      FSHLog wal = new FSHLog(FS, ROOT_DIR, LOG_DIR, ARCHIVE_DIR, CONF, null,\n+        true, WAL_PREFIX, getWALSuffix(i));\n+      wal.init();\n+      wals.put(wal, wal.getCurrentFileName());\n+      ROLLER.addWAL(wal);\n+      Thread.sleep(3000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e9e134606753f1706c89699a541bbb2a64195d"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MzQyMw==", "bodyText": "We want 3 WALs will different periodic roll time period?  Why we need? If so, can we limit the time to be 1 sec or lesser?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457993423", "createdAt": "2020-07-21T10:23:16Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestLogRoller.java", "diffHunk": "@@ -43,53 +49,104 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestLogRoller.class);\n \n-  private static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n-  private static final int logRollPeriod = 20 * 1000;\n+  private static final int LOG_ROLL_PERIOD = 20 * 1000;\n+  private static final String LOG_DIR = \"WALs\";\n+  private static final String ARCHIVE_DIR = \"archiveWALs\";\n+  private static final String WAL_PREFIX = \"test-log-roller\";\n+  private static Configuration CONF;\n+  private static LogRoller ROLLER;\n+  private static Path ROOT_DIR;\n+  private static FileSystem FS;\n \n   @Before\n   public void setup() throws Exception {\n-    TEST_UTIL.getConfiguration().setInt(\"hbase.regionserver.logroll.period\", logRollPeriod);\n-    TEST_UTIL.startMiniCluster(1);\n-    TableName name = TableName.valueOf(\"Test\");\n-    TEST_UTIL.createTable(name, Bytes.toBytes(\"cf\"));\n-    TEST_UTIL.waitTableAvailable(name);\n+    CONF = TEST_UTIL.getConfiguration();\n+    CONF.setInt(\"hbase.regionserver.logroll.period\", LOG_ROLL_PERIOD);\n+    CONF.setInt(HConstants.THREAD_WAKE_FREQUENCY, 300);\n+    ROOT_DIR = TEST_UTIL.getRandomDir();\n+    FS = FileSystem.get(CONF);\n+    RegionServerServices services = Mockito.mock(RegionServerServices.class);\n+    Mockito.when(services.getConfiguration()).thenReturn(CONF);\n+    ROLLER = new LogRoller(services);\n+    ROLLER.start();\n   }\n \n   @After\n   public void tearDown() throws Exception {\n+    ROLLER.close();\n+    FS.close();\n     TEST_UTIL.shutdownMiniCluster();\n   }\n \n   @Test\n   public void testRemoveClosedWAL() throws Exception {\n-    HRegionServer rs = TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);\n-    Configuration conf = rs.getConfiguration();\n-    LogRoller logRoller = TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getWalRoller();\n-    int originalSize = logRoller.getWalNeedsRoll().size();\n-    FSHLog wal1 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-        AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal1);\n-    FSHLog wal2 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-      AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal2);\n-    FSHLog wal3 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-      AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal3);\n-\n-    assertEquals(originalSize + 3, logRoller.getWalNeedsRoll().size());\n-    assertTrue(logRoller.getWalNeedsRoll().containsKey(wal1));\n-\n-    wal1.close();\n-    Thread.sleep(2 * logRollPeriod);\n-\n-    assertEquals(originalSize + 2, logRoller.getWalNeedsRoll().size());\n-    assertFalse(logRoller.getWalNeedsRoll().containsKey(wal1));\n-\n-    wal2.close();\n-    wal3.close();\n-    Thread.sleep(2 * logRollPeriod);\n-\n-    assertEquals(originalSize, logRoller.getWalNeedsRoll().size());\n+    assertEquals(0, ROLLER.getWalNeedsRoll().size());\n+    for (int i = 1; i <= 3; i++) {\n+      FSHLog wal = new FSHLog(FS, ROOT_DIR, LOG_DIR, ARCHIVE_DIR, CONF, null,\n+        true, WAL_PREFIX, getWALSuffix(i));\n+      ROLLER.addWAL(wal);\n+    }\n+\n+    assertEquals(3, ROLLER.getWalNeedsRoll().size());\n+    Iterator<WAL> it = ROLLER.getWalNeedsRoll().keySet().iterator();\n+    WAL wal = it.next();\n+    assertTrue(ROLLER.getWalNeedsRoll().containsKey(wal));\n+\n+    wal.close();\n+    Thread.sleep(LOG_ROLL_PERIOD + 5000);\n+\n+    assertEquals(2, ROLLER.getWalNeedsRoll().size());\n+    assertFalse(ROLLER.getWalNeedsRoll().containsKey(wal));\n+\n+    wal = it.next();\n+    wal.close();\n+    wal = it.next();\n+    wal.close();\n+    Thread.sleep(LOG_ROLL_PERIOD + 5000);\n+\n+    assertEquals(0, ROLLER.getWalNeedsRoll().size());\n+  }\n+\n+  /**\n+   * verify that each wal roll separately\n+   */\n+  @Test\n+  public void testRequestRollWithMultiWal() throws Exception {\n+    // add multiple wal\n+    Map<FSHLog, Path> wals = new HashMap<>();\n+    for (int i = 1; i <= 3; i++) {\n+      FSHLog wal = new FSHLog(FS, ROOT_DIR, LOG_DIR, ARCHIVE_DIR, CONF, null,\n+        true, WAL_PREFIX, getWALSuffix(i));\n+      wal.init();\n+      wals.put(wal, wal.getCurrentFileName());\n+      ROLLER.addWAL(wal);\n+      Thread.sleep(3000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTI1NQ=="}, "originalCommit": {"oid": "11e9e134606753f1706c89699a541bbb2a64195d"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzk4NzczOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestLogRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyMDo1NFrOG0xn0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDoyMDo1NFrOG0xn0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MjE0Ng==", "bodyText": "Good...", "url": "https://github.com/apache/hbase/pull/2021#discussion_r457992146", "createdAt": "2020-07-21T10:20:54Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestLogRoller.java", "diffHunk": "@@ -43,53 +49,104 @@\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestLogRoller.class);\n \n-  private static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n \n-  private static final int logRollPeriod = 20 * 1000;\n+  private static final int LOG_ROLL_PERIOD = 20 * 1000;\n+  private static final String LOG_DIR = \"WALs\";\n+  private static final String ARCHIVE_DIR = \"archiveWALs\";\n+  private static final String WAL_PREFIX = \"test-log-roller\";\n+  private static Configuration CONF;\n+  private static LogRoller ROLLER;\n+  private static Path ROOT_DIR;\n+  private static FileSystem FS;\n \n   @Before\n   public void setup() throws Exception {\n-    TEST_UTIL.getConfiguration().setInt(\"hbase.regionserver.logroll.period\", logRollPeriod);\n-    TEST_UTIL.startMiniCluster(1);\n-    TableName name = TableName.valueOf(\"Test\");\n-    TEST_UTIL.createTable(name, Bytes.toBytes(\"cf\"));\n-    TEST_UTIL.waitTableAvailable(name);\n+    CONF = TEST_UTIL.getConfiguration();\n+    CONF.setInt(\"hbase.regionserver.logroll.period\", LOG_ROLL_PERIOD);\n+    CONF.setInt(HConstants.THREAD_WAKE_FREQUENCY, 300);\n+    ROOT_DIR = TEST_UTIL.getRandomDir();\n+    FS = FileSystem.get(CONF);\n+    RegionServerServices services = Mockito.mock(RegionServerServices.class);\n+    Mockito.when(services.getConfiguration()).thenReturn(CONF);\n+    ROLLER = new LogRoller(services);\n+    ROLLER.start();\n   }\n \n   @After\n   public void tearDown() throws Exception {\n+    ROLLER.close();\n+    FS.close();\n     TEST_UTIL.shutdownMiniCluster();\n   }\n \n   @Test\n   public void testRemoveClosedWAL() throws Exception {\n-    HRegionServer rs = TEST_UTIL.getMiniHBaseCluster().getRegionServer(0);\n-    Configuration conf = rs.getConfiguration();\n-    LogRoller logRoller = TEST_UTIL.getMiniHBaseCluster().getRegionServer(0).getWalRoller();\n-    int originalSize = logRoller.getWalNeedsRoll().size();\n-    FSHLog wal1 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-        AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal1);\n-    FSHLog wal2 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-      AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal2);\n-    FSHLog wal3 = new FSHLog(rs.getWALFileSystem(), rs.getWALRootDir(),\n-      AbstractFSWALProvider.getWALDirectoryName(rs.getServerName().getServerName()), conf);\n-    logRoller.addWAL(wal3);\n-\n-    assertEquals(originalSize + 3, logRoller.getWalNeedsRoll().size());\n-    assertTrue(logRoller.getWalNeedsRoll().containsKey(wal1));\n-\n-    wal1.close();\n-    Thread.sleep(2 * logRollPeriod);\n-\n-    assertEquals(originalSize + 2, logRoller.getWalNeedsRoll().size());\n-    assertFalse(logRoller.getWalNeedsRoll().containsKey(wal1));\n-\n-    wal2.close();\n-    wal3.close();\n-    Thread.sleep(2 * logRollPeriod);\n-\n-    assertEquals(originalSize, logRoller.getWalNeedsRoll().size());\n+    assertEquals(0, ROLLER.getWalNeedsRoll().size());\n+    for (int i = 1; i <= 3; i++) {\n+      FSHLog wal = new FSHLog(FS, ROOT_DIR, LOG_DIR, ARCHIVE_DIR, CONF, null,\n+        true, WAL_PREFIX, getWALSuffix(i));\n+      ROLLER.addWAL(wal);\n+    }\n+\n+    assertEquals(3, ROLLER.getWalNeedsRoll().size());\n+    Iterator<WAL> it = ROLLER.getWalNeedsRoll().keySet().iterator();\n+    WAL wal = it.next();\n+    assertTrue(ROLLER.getWalNeedsRoll().containsKey(wal));\n+\n+    wal.close();\n+    Thread.sleep(LOG_ROLL_PERIOD + 5000);\n+\n+    assertEquals(2, ROLLER.getWalNeedsRoll().size());\n+    assertFalse(ROLLER.getWalNeedsRoll().containsKey(wal));\n+\n+    wal = it.next();\n+    wal.close();\n+    wal = it.next();\n+    wal.close();\n+    Thread.sleep(LOG_ROLL_PERIOD + 5000);\n+\n+    assertEquals(0, ROLLER.getWalNeedsRoll().size());\n+  }\n+\n+  /**\n+   * verify that each wal roll separately\n+   */\n+  @Test\n+  public void testRequestRollWithMultiWal() throws Exception {\n+    // add multiple wal\n+    Map<FSHLog, Path> wals = new HashMap<>();\n+    for (int i = 1; i <= 3; i++) {\n+      FSHLog wal = new FSHLog(FS, ROOT_DIR, LOG_DIR, ARCHIVE_DIR, CONF, null,\n+        true, WAL_PREFIX, getWALSuffix(i));\n+      wal.init();\n+      wals.put(wal, wal.getCurrentFileName());\n+      ROLLER.addWAL(wal);\n+      Thread.sleep(3000);\n+    }\n+\n+    // request roll\n+    Iterator<Map.Entry<FSHLog, Path>> it = wals.entrySet().iterator();\n+    Map.Entry<FSHLog, Path> walEntry = it.next();\n+    walEntry.getKey().requestLogRoll();\n+    Thread.sleep(5000);\n+\n+    assertNotEquals(walEntry.getValue(), walEntry.getKey().getCurrentFileName());\n+    walEntry.setValue(walEntry.getKey().getCurrentFileName());\n+    while (it.hasNext()) {\n+      walEntry = it.next();\n+      assertEquals(walEntry.getValue(), walEntry.getKey().getCurrentFileName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e9e134606753f1706c89699a541bbb2a64195d"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg1OTU5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozNzo1OFrOG18y5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMToxMjowN1rOG2GA1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzc4MA==", "bodyText": "walRolls? instead of wals?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459223780", "createdAt": "2020-07-23T05:37:58Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzNTI4NA==", "bodyText": "rollWals? more suitable\uff1f", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459235284", "createdAt": "2020-07-23T06:20:37Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzc4MA=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1NjM5OA==", "bodyText": "This will have all wal entries once the wal instance is created.  Not just when it needs a roll. So ya these were wals which needed roll at some point.  So wals name also fine IMO.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459256398", "createdAt": "2020-07-23T07:16:52Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzc4MA=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM3NDgwNw==", "bodyText": "Ok", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459374807", "createdAt": "2020-07-23T11:12:07Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMzc4MA=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg2MjI1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTozOTo1MVrOG180fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjoyOTo0OVrOG19shg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNDE4OA==", "bodyText": "Is this talking about what this PR is trying to do?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459224188", "createdAt": "2020-07-23T05:39:51Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();\n   protected final T abortable;\n-  private volatile long lastRollTime = System.currentTimeMillis();\n   // Period to roll log.\n   private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   private volatile boolean running = true;\n \n   public void addWAL(WAL wal) {\n     // check without lock first\n-    if (walNeedsRoll.containsKey(wal)) {\n+    if (wals.containsKey(wal)) {\n       return;\n     }\n     // this is to avoid race between addWAL and requestRollAll.\n     synchronized (this) {\n-      if (walNeedsRoll.putIfAbsent(wal, Boolean.FALSE) == null) {\n+      if (wals.putIfAbsent(wal, new RollController(wal)) == null) {\n         wal.registerWALActionsListener(new WALActionsListener() {\n           @Override\n           public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n             // TODO logs will contend with each other here, replace with e.g. DelayedQueue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzMzUyOA==", "bodyText": "No, the todo is pre-existing.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459233528", "createdAt": "2020-07-23T06:14:50Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();\n   protected final T abortable;\n-  private volatile long lastRollTime = System.currentTimeMillis();\n   // Period to roll log.\n   private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   private volatile boolean running = true;\n \n   public void addWAL(WAL wal) {\n     // check without lock first\n-    if (walNeedsRoll.containsKey(wal)) {\n+    if (wals.containsKey(wal)) {\n       return;\n     }\n     // this is to avoid race between addWAL and requestRollAll.\n     synchronized (this) {\n-      if (walNeedsRoll.putIfAbsent(wal, Boolean.FALSE) == null) {\n+      if (wals.putIfAbsent(wal, new RollController(wal)) == null) {\n         wal.registerWALActionsListener(new WALActionsListener() {\n           @Override\n           public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n             // TODO logs will contend with each other here, replace with e.g. DelayedQueue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNDE4OA=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIzODUzNA==", "bodyText": "@ramkrish86 the purpose of this PR is to make each wal separate roll when using multiwal. thanks review.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459238534", "createdAt": "2020-07-23T06:29:49Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();\n   protected final T abortable;\n-  private volatile long lastRollTime = System.currentTimeMillis();\n   // Period to roll log.\n   private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   private volatile boolean running = true;\n \n   public void addWAL(WAL wal) {\n     // check without lock first\n-    if (walNeedsRoll.containsKey(wal)) {\n+    if (wals.containsKey(wal)) {\n       return;\n     }\n     // this is to avoid race between addWAL and requestRollAll.\n     synchronized (this) {\n-      if (walNeedsRoll.putIfAbsent(wal, Boolean.FALSE) == null) {\n+      if (wals.putIfAbsent(wal, new RollController(wal)) == null) {\n         wal.registerWALActionsListener(new WALActionsListener() {\n           @Override\n           public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n             // TODO logs will contend with each other here, replace with e.g. DelayedQueue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNDE4OA=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjkxMjA2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNDoyOFrOG2GnEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMTozNDoyOFrOG2GnEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM4NDU5NQ==", "bodyText": "This is they key. We ensure we only roll if one of the condition is met (if either size reach caused a log roll ) or the time elapsed. That is also tracked per wal.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459384595", "createdAt": "2020-07-23T11:34:28Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -148,53 +147,49 @@ private void abort(String reason, Throwable cause) {\n   @Override\n   public void run() {\n     while (running) {\n-      boolean periodic = false;\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      periodic = (now - this.lastRollTime) > this.rollPeriod;\n-      if (periodic) {\n-        // Time for periodic roll, fall through\n-        LOG.debug(\"WAL roll period {} ms elapsed\", this.rollPeriod);\n-      } else {\n-        synchronized (this) {\n-          if (walNeedsRoll.values().stream().anyMatch(Boolean::booleanValue)) {\n-            // WAL roll requested, fall through\n-            LOG.debug(\"WAL roll requested\");\n-          } else {\n-            try {\n-              wait(this.threadWakeFrequency);\n-            } catch (InterruptedException e) {\n-              // restore the interrupt state\n-              Thread.currentThread().interrupt();\n-            }\n-            // goto the beginning to check whether again whether we should fall through to roll\n-            // several WALs, and also check whether we should quit.\n-            continue;\n+      synchronized (this) {\n+        if (wals.values().stream().noneMatch(rc -> rc.needsRoll(now))) {\n+          try {\n+            wait(this.threadWakeFrequency);\n+          } catch (InterruptedException e) {\n+            // restore the interrupt state\n+            Thread.currentThread().interrupt();\n           }\n+          // goto the beginning to check whether again whether we should fall through to roll\n+          // several WALs, and also check whether we should quit.\n+          continue;\n         }\n       }\n       try {\n-        this.lastRollTime = System.currentTimeMillis();\n-        for (Iterator<Entry<WAL, Boolean>> iter = walNeedsRoll.entrySet().iterator(); iter\n-          .hasNext();) {\n-          Entry<WAL, Boolean> entry = iter.next();\n+        for (Iterator<Entry<WAL, RollController>> iter = wals.entrySet().iterator();\n+             iter.hasNext();) {\n+          Entry<WAL, RollController> entry = iter.next();\n           WAL wal = entry.getKey();\n-          // reset the flag in front to avoid missing roll request before we return from rollWriter.\n-          walNeedsRoll.put(wal, Boolean.FALSE);\n-          Map<byte[], List<byte[]>> regionsToFlush = null;\n+          RollController controller = entry.getValue();\n+          if (controller.isRollRequested()) {\n+            // WAL roll requested, fall through\n+            LOG.debug(\"WAL {} roll requested\", wal);\n+          } else if (controller.needsPeriodicRoll(now)){\n+            // Time for periodic roll, fall through\n+            LOG.debug(\"WAL {} roll period {} ms elapsed\", wal, this.rollPeriod);\n+          } else {\n+            continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODQ0NDExOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo1NzowNFrOG2Vfgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzoxMDozN1rOG2lOlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyODQxOQ==", "bodyText": "We have already done wals.putIfAbsent(wal, new RollController(wal)) above.\nHence, wals.computeIfAbsent() is needed here? Should we not directly get the value with RollController controller = wals.get(wal) and expect non-null object?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459628419", "createdAt": "2020-07-23T17:57:04Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();\n   protected final T abortable;\n-  private volatile long lastRollTime = System.currentTimeMillis();\n   // Period to roll log.\n   private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   private volatile boolean running = true;\n \n   public void addWAL(WAL wal) {\n     // check without lock first\n-    if (walNeedsRoll.containsKey(wal)) {\n+    if (wals.containsKey(wal)) {\n       return;\n     }\n     // this is to avoid race between addWAL and requestRollAll.\n     synchronized (this) {\n-      if (walNeedsRoll.putIfAbsent(wal, Boolean.FALSE) == null) {\n+      if (wals.putIfAbsent(wal, new RollController(wal)) == null) {\n         wal.registerWALActionsListener(new WALActionsListener() {\n           @Override\n           public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n             // TODO logs will contend with each other here, replace with e.g. DelayedQueue\n             synchronized (AbstractWALRoller.this) {\n-              walNeedsRoll.put(wal, Boolean.TRUE);\n+              RollController controller = wals.computeIfAbsent(wal, rc -> new RollController(wal));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1NzgwOQ==", "bodyText": "Good Q.  In fact I also thought when reviewed this.  Ideally speaking we should get the addWAL call 1st which will add the instance to the Map. When we get call here the wal should be in the map already.  But if u see the cur impl, there is no such contract enforcing.  It just add the WAL with True value.  So  believe while making patch, @WenFeiYi  went with similar lines.\nWe can consider this.. Need to see any chance we get a rollReq before adding.. While RS start, we do some rollReq on WALs.. This introduced some bug in the past.   We need to see that closely..   If we can confirm that we can add that contract enforcing and so what u suggested.  I would say add a TODO here and raise another issue. This went through multiple cycles of changes. :-)  U ok Viraj?", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459857809", "createdAt": "2020-07-24T05:26:56Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();\n   protected final T abortable;\n-  private volatile long lastRollTime = System.currentTimeMillis();\n   // Period to roll log.\n   private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   private volatile boolean running = true;\n \n   public void addWAL(WAL wal) {\n     // check without lock first\n-    if (walNeedsRoll.containsKey(wal)) {\n+    if (wals.containsKey(wal)) {\n       return;\n     }\n     // this is to avoid race between addWAL and requestRollAll.\n     synchronized (this) {\n-      if (walNeedsRoll.putIfAbsent(wal, Boolean.FALSE) == null) {\n+      if (wals.putIfAbsent(wal, new RollController(wal)) == null) {\n         wal.registerWALActionsListener(new WALActionsListener() {\n           @Override\n           public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n             // TODO logs will contend with each other here, replace with e.g. DelayedQueue\n             synchronized (AbstractWALRoller.this) {\n-              walNeedsRoll.put(wal, Boolean.TRUE);\n+              RollController controller = wals.computeIfAbsent(wal, rc -> new RollController(wal));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyODQxOQ=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4MjQ1Ng==", "bodyText": "yes, this is my idea, if there is a change, the impact will be greater, it will be far away from the purpose of the issue.", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459882456", "createdAt": "2020-07-24T06:59:16Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();\n   protected final T abortable;\n-  private volatile long lastRollTime = System.currentTimeMillis();\n   // Period to roll log.\n   private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   private volatile boolean running = true;\n \n   public void addWAL(WAL wal) {\n     // check without lock first\n-    if (walNeedsRoll.containsKey(wal)) {\n+    if (wals.containsKey(wal)) {\n       return;\n     }\n     // this is to avoid race between addWAL and requestRollAll.\n     synchronized (this) {\n-      if (walNeedsRoll.putIfAbsent(wal, Boolean.FALSE) == null) {\n+      if (wals.putIfAbsent(wal, new RollController(wal)) == null) {\n         wal.registerWALActionsListener(new WALActionsListener() {\n           @Override\n           public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n             // TODO logs will contend with each other here, replace with e.g. DelayedQueue\n             synchronized (AbstractWALRoller.this) {\n-              walNeedsRoll.put(wal, Boolean.TRUE);\n+              RollController controller = wals.computeIfAbsent(wal, rc -> new RollController(wal));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyODQxOQ=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg4NjIzMQ==", "bodyText": "Sure, this is critical code anyways, we can live with bit extra atomic calls on Concurrent Map. Sounds good, TODO should make this better :)\nNice work @WenFeiYi .", "url": "https://github.com/apache/hbase/pull/2021#discussion_r459886231", "createdAt": "2020-07-24T07:10:37Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -58,31 +58,31 @@\n \n   protected static final String WAL_ROLL_PERIOD_KEY = \"hbase.regionserver.logroll.period\";\n \n-  protected final ConcurrentMap<WAL, Boolean> walNeedsRoll = new ConcurrentHashMap<>();\n+  protected final ConcurrentMap<WAL, RollController> wals = new ConcurrentHashMap<>();\n   protected final T abortable;\n-  private volatile long lastRollTime = System.currentTimeMillis();\n   // Period to roll log.\n   private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   private volatile boolean running = true;\n \n   public void addWAL(WAL wal) {\n     // check without lock first\n-    if (walNeedsRoll.containsKey(wal)) {\n+    if (wals.containsKey(wal)) {\n       return;\n     }\n     // this is to avoid race between addWAL and requestRollAll.\n     synchronized (this) {\n-      if (walNeedsRoll.putIfAbsent(wal, Boolean.FALSE) == null) {\n+      if (wals.putIfAbsent(wal, new RollController(wal)) == null) {\n         wal.registerWALActionsListener(new WALActionsListener() {\n           @Override\n           public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n             // TODO logs will contend with each other here, replace with e.g. DelayedQueue\n             synchronized (AbstractWALRoller.this) {\n-              walNeedsRoll.put(wal, Boolean.TRUE);\n+              RollController controller = wals.computeIfAbsent(wal, rc -> new RollController(wal));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyODQxOQ=="}, "originalCommit": {"oid": "18bfdf715d063b64b50f3364dee726ffe1d6716a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2763, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}