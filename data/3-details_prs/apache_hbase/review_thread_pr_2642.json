{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTk3MjIz", "number": 2642, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDowMzozNFrOE3owzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDowMzozNFrOE3owzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Nzc0OTg4OnYy", "diffSide": "RIGHT", "path": "hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestRESTServerSSL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDowMzozNFrOHxGZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMDoyMTo1MVrOHxHDRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0NzIwMg==", "bodyText": "Please create a temporary directory and remove it in @AfterClass.", "url": "https://github.com/apache/hbase/pull/2642#discussion_r521247202", "createdAt": "2020-11-11T10:03:34Z", "author": {"login": "meszibalu"}, "path": "hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestRESTServerSSL.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.security.KeyPair;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.http.ssl.KeyStoreTestUtil;\n+import org.apache.hadoop.hbase.rest.client.Client;\n+import org.apache.hadoop.hbase.rest.client.Cluster;\n+import org.apache.hadoop.hbase.rest.client.Response;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.testclassification.RestTests;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ RestTests.class, MediumTests.class})\n+public class TestRESTServerSSL {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestRESTServerSSL.class);\n+\n+  private static final String KEY_STORE_PASSWORD = \"myKSPassword\";\n+  private static final String TRUST_STORE_PASSWORD = \"myTSPassword\";\n+\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+  private static final HBaseRESTTestingUtility REST_TEST_UTIL = new HBaseRESTTestingUtility();\n+  private static Client sslClient;\n+  private static File keyDir;\n+  private Configuration conf;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws Exception {\n+    keyDir = initKeystoreDir();\n+    KeyPair keyPair = KeyStoreTestUtil.generateKeyPair(\"RSA\");\n+    X509Certificate serverCertificate = KeyStoreTestUtil.generateCertificate(\n+      \"CN=localhost, O=server\", keyPair, 30, \"SHA1withRSA\");\n+\n+    generateTrustStore(\"jks\", serverCertificate);\n+    generateTrustStore(\"jceks\", serverCertificate);\n+    generateTrustStore(\"pkcs12\", serverCertificate);\n+\n+    generateKeyStore(\"jks\", keyPair, serverCertificate);\n+    generateKeyStore(\"jceks\", keyPair, serverCertificate);\n+    generateKeyStore(\"pkcs12\", keyPair, serverCertificate);\n+\n+    TEST_UTIL.startMiniCluster();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() throws Exception {\n+    TEST_UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Before\n+  public void beforeEachTest() {\n+    conf = new Configuration(TEST_UTIL.getConfiguration());\n+    conf.set(Constants.REST_SSL_ENABLED, \"true\");\n+    conf.set(Constants.REST_SSL_KEYSTORE_KEYPASSWORD, KEY_STORE_PASSWORD);\n+    conf.set(Constants.REST_SSL_KEYSTORE_PASSWORD, KEY_STORE_PASSWORD);\n+    conf.set(Constants.REST_SSL_TRUSTSTORE_PASSWORD, TRUST_STORE_PASSWORD);\n+  }\n+\n+  @After\n+  public void tearDownAfterTest() {\n+    REST_TEST_UTIL.shutdownServletContainer();\n+  }\n+\n+  @Test\n+  public void testSslConnection() throws Exception {\n+    startRESTServerWithDefaultKeystoreType();\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+  @Test(expected = org.apache.http.client.ClientProtocolException.class)\n+  public void testNonSslClientDenied() throws Exception {\n+    startRESTServerWithDefaultKeystoreType();\n+\n+    Cluster localCluster = new Cluster().add(\"localhost\", REST_TEST_UTIL.getServletPort());\n+    Client nonSslClient = new Client(localCluster, false);\n+\n+    nonSslClient.get(\"/version\");\n+  }\n+\n+  @Test\n+  public void testSslConnectionUsingKeystoreFormatJKS() throws Exception {\n+    startRESTServer(\"jks\");\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+  @Test\n+  public void testSslConnectionUsingKeystoreFormatJCEKS() throws Exception {\n+    startRESTServer(\"jceks\");\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+  @Test\n+  public void testSslConnectionUsingKeystoreFormatPKCS12() throws Exception {\n+    startRESTServer(\"pkcs12\");\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+\n+\n+  private static File initKeystoreDir() {\n+    final File target = new File(System.getProperty(\"user.dir\"), \"target\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65def7ccf1ee800a784cc6027df133bd1825efbd"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI1Nzc5OQ==", "bodyText": "this was a copy-paste leftover, thanks for noticing! I'll remove these two lines.\n(I'm using the TEST_UTIL.getDataTestDir() which get deleted when the minicluster is stopped in the @AfterClass method)", "url": "https://github.com/apache/hbase/pull/2642#discussion_r521257799", "createdAt": "2020-11-11T10:21:51Z", "author": {"login": "symat"}, "path": "hbase-rest/src/test/java/org/apache/hadoop/hbase/rest/TestRESTServerSSL.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.rest;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.File;\n+import java.security.KeyPair;\n+import java.security.cert.X509Certificate;\n+import java.util.Optional;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.http.ssl.KeyStoreTestUtil;\n+import org.apache.hadoop.hbase.rest.client.Client;\n+import org.apache.hadoop.hbase.rest.client.Cluster;\n+import org.apache.hadoop.hbase.rest.client.Response;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.testclassification.RestTests;\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ RestTests.class, MediumTests.class})\n+public class TestRESTServerSSL {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestRESTServerSSL.class);\n+\n+  private static final String KEY_STORE_PASSWORD = \"myKSPassword\";\n+  private static final String TRUST_STORE_PASSWORD = \"myTSPassword\";\n+\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+  private static final HBaseRESTTestingUtility REST_TEST_UTIL = new HBaseRESTTestingUtility();\n+  private static Client sslClient;\n+  private static File keyDir;\n+  private Configuration conf;\n+\n+  @BeforeClass\n+  public static void beforeClass() throws Exception {\n+    keyDir = initKeystoreDir();\n+    KeyPair keyPair = KeyStoreTestUtil.generateKeyPair(\"RSA\");\n+    X509Certificate serverCertificate = KeyStoreTestUtil.generateCertificate(\n+      \"CN=localhost, O=server\", keyPair, 30, \"SHA1withRSA\");\n+\n+    generateTrustStore(\"jks\", serverCertificate);\n+    generateTrustStore(\"jceks\", serverCertificate);\n+    generateTrustStore(\"pkcs12\", serverCertificate);\n+\n+    generateKeyStore(\"jks\", keyPair, serverCertificate);\n+    generateKeyStore(\"jceks\", keyPair, serverCertificate);\n+    generateKeyStore(\"pkcs12\", keyPair, serverCertificate);\n+\n+    TEST_UTIL.startMiniCluster();\n+  }\n+\n+  @AfterClass\n+  public static void afterClass() throws Exception {\n+    TEST_UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Before\n+  public void beforeEachTest() {\n+    conf = new Configuration(TEST_UTIL.getConfiguration());\n+    conf.set(Constants.REST_SSL_ENABLED, \"true\");\n+    conf.set(Constants.REST_SSL_KEYSTORE_KEYPASSWORD, KEY_STORE_PASSWORD);\n+    conf.set(Constants.REST_SSL_KEYSTORE_PASSWORD, KEY_STORE_PASSWORD);\n+    conf.set(Constants.REST_SSL_TRUSTSTORE_PASSWORD, TRUST_STORE_PASSWORD);\n+  }\n+\n+  @After\n+  public void tearDownAfterTest() {\n+    REST_TEST_UTIL.shutdownServletContainer();\n+  }\n+\n+  @Test\n+  public void testSslConnection() throws Exception {\n+    startRESTServerWithDefaultKeystoreType();\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+  @Test(expected = org.apache.http.client.ClientProtocolException.class)\n+  public void testNonSslClientDenied() throws Exception {\n+    startRESTServerWithDefaultKeystoreType();\n+\n+    Cluster localCluster = new Cluster().add(\"localhost\", REST_TEST_UTIL.getServletPort());\n+    Client nonSslClient = new Client(localCluster, false);\n+\n+    nonSslClient.get(\"/version\");\n+  }\n+\n+  @Test\n+  public void testSslConnectionUsingKeystoreFormatJKS() throws Exception {\n+    startRESTServer(\"jks\");\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+  @Test\n+  public void testSslConnectionUsingKeystoreFormatJCEKS() throws Exception {\n+    startRESTServer(\"jceks\");\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+  @Test\n+  public void testSslConnectionUsingKeystoreFormatPKCS12() throws Exception {\n+    startRESTServer(\"pkcs12\");\n+\n+    Response response = sslClient.get(\"/version\", Constants.MIMETYPE_TEXT);\n+    assertEquals(200, response.getCode());\n+  }\n+\n+\n+\n+  private static File initKeystoreDir() {\n+    final File target = new File(System.getProperty(\"user.dir\"), \"target\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTI0NzIwMg=="}, "originalCommit": {"oid": "65def7ccf1ee800a784cc6027df133bd1825efbd"}, "originalPosition": 142}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2373, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}