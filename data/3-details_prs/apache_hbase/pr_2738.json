{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDIwMzY2", "number": 2738, "title": "HBASE-25363 Improve performance of HFileLinkCleaner by using ReadWrit\u2026", "bodyText": "\u2026eLock instead of synchronize", "createdAt": "2020-12-05T13:50:10Z", "url": "https://github.com/apache/hbase/pull/2738", "merged": true, "mergeCommit": {"oid": "56dd3eba81bd5d034aa6fb33e488116573306f9e"}, "closed": true, "closedAt": "2020-12-08T13:09:32Z", "author": {"login": "sunhelly"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjYrktAFqTU0NTY2ODI1Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkGqI7ABqjQwODM3NjUyNzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjY4MjUy", "url": "https://github.com/apache/hbase/pull/2738#pullrequestreview-545668252", "createdAt": "2020-12-06T03:49:54Z", "commit": {"oid": "91b6bcaafde0424b1974f89f033dff2286d55279"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MTk3ODc0", "url": "https://github.com/apache/hbase/pull/2738#pullrequestreview-546197874", "createdAt": "2020-12-07T14:25:44Z", "commit": {"oid": "91b6bcaafde0424b1974f89f033dff2286d55279"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoyNTo0NFrOIApQjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoyNzo0OFrOIApXHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0Njg5Mg==", "bodyText": "Usually we will put this line before the try block.", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537546892", "createdAt": "2020-12-07T14:25:44Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b6bcaafde0424b1974f89f033dff2286d55279"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0ODAxOQ==", "bodyText": "nits: add '{}' to hold the 'return false;' block to fix a checkstyle warning.", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537548019", "createdAt": "2020-12-07T14:27:10Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();\n+      if (this.fs == null) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b6bcaafde0424b1974f89f033dff2286d55279"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0ODIwNw==", "bodyText": "Ditto.", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537548207", "createdAt": "2020-12-07T14:27:19Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();\n+      if (this.fs == null) return false;\n+      Path filePath = fStat.getPath();\n+      // HFile Link is always deletable\n+      if (HFileLink.isHFileLink(filePath)) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b6bcaafde0424b1974f89f033dff2286d55279"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU0ODU3NQ==", "bodyText": "Better move this line before the try block.", "url": "https://github.com/apache/hbase/pull/2738#discussion_r537548575", "createdAt": "2020-12-07T14:27:48Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/cleaner/HFileLinkCleaner.java", "diffHunk": "@@ -44,71 +45,79 @@\n   private static final Logger LOG = LoggerFactory.getLogger(HFileLinkCleaner.class);\n \n   private FileSystem fs = null;\n+  private ReentrantReadWriteLock lock = new ReentrantReadWriteLock();\n \n   @Override\n-  public synchronized boolean isFileDeletable(FileStatus fStat) {\n-    if (this.fs == null) return false;\n-    Path filePath = fStat.getPath();\n-    // HFile Link is always deletable\n-    if (HFileLink.isHFileLink(filePath)) return true;\n+  public boolean isFileDeletable(FileStatus fStat) {\n+    try {\n+      lock.readLock().lock();\n+      if (this.fs == null) return false;\n+      Path filePath = fStat.getPath();\n+      // HFile Link is always deletable\n+      if (HFileLink.isHFileLink(filePath)) return true;\n \n-    // If the file is inside a link references directory, means that it is a back ref link.\n-    // The back ref can be deleted only if the referenced file doesn't exists.\n-    Path parentDir = filePath.getParent();\n-    if (HFileLink.isBackReferencesDir(parentDir)) {\n-      Path hfilePath = null;\n-      try {\n-        // Also check if the HFile is in the HBASE_TEMP_DIRECTORY; this is where the referenced\n-        // file gets created when cloning a snapshot.\n-        hfilePath = HFileLink.getHFileFromBackReference(\n-          new Path(CommonFSUtils.getRootDir(getConf()), HConstants.HBASE_TEMP_DIRECTORY), filePath);\n-        if (fs.exists(hfilePath)) {\n-          return false;\n-        }\n-        // check whether the HFileLink still exists in mob dir.\n-        hfilePath = HFileLink.getHFileFromBackReference(MobUtils.getMobHome(getConf()), filePath);\n-        if (fs.exists(hfilePath)) {\n+      // If the file is inside a link references directory, means that it is a back ref link.\n+      // The back ref can be deleted only if the referenced file doesn't exists.\n+      Path parentDir = filePath.getParent();\n+      if (HFileLink.isBackReferencesDir(parentDir)) {\n+        Path hfilePath = null;\n+        try {\n+          // Also check if the HFile is in the HBASE_TEMP_DIRECTORY; this is where the referenced\n+          // file gets created when cloning a snapshot.\n+          hfilePath = HFileLink.getHFileFromBackReference(new Path(CommonFSUtils.getRootDir(getConf()), HConstants.HBASE_TEMP_DIRECTORY),\n+            filePath);\n+          if (fs.exists(hfilePath)) {\n+            return false;\n+          }\n+          // check whether the HFileLink still exists in mob dir.\n+          hfilePath = HFileLink.getHFileFromBackReference(MobUtils.getMobHome(getConf()), filePath);\n+          if (fs.exists(hfilePath)) {\n+            return false;\n+          }\n+          hfilePath = HFileLink.getHFileFromBackReference(CommonFSUtils.getRootDir(getConf()), filePath);\n+          return !fs.exists(hfilePath);\n+        } catch (IOException e) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Couldn't verify if the referenced file still exists, keep it just in case: \"\n+              + hfilePath);\n+          }\n           return false;\n         }\n-        hfilePath =\n-          HFileLink.getHFileFromBackReference(CommonFSUtils.getRootDir(getConf()), filePath);\n-        return !fs.exists(hfilePath);\n+      }\n+\n+      // HFile is deletable only if has no links\n+      Path backRefDir = null;\n+      try {\n+        backRefDir = HFileLink.getBackReferencesDir(parentDir, filePath.getName());\n+        return CommonFSUtils.listStatus(fs, backRefDir) == null;\n       } catch (IOException e) {\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Couldn't verify if the referenced file still exists, keep it just in case: \" +\n-            hfilePath);\n+          LOG.debug(\n+            \"Couldn't get the references, not deleting file, just in case. filePath=\" + filePath + \", backRefDir=\" + backRefDir);\n         }\n         return false;\n       }\n-    }\n-\n-    // HFile is deletable only if has no links\n-    Path backRefDir = null;\n-    try {\n-      backRefDir = HFileLink.getBackReferencesDir(parentDir, filePath.getName());\n-      return CommonFSUtils.listStatus(fs, backRefDir) == null;\n-    } catch (IOException e) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Couldn't get the references, not deleting file, just in case. filePath=\"\n-            + filePath + \", backRefDir=\" + backRefDir);\n-      }\n-      return false;\n+    } finally {\n+      lock.readLock().unlock();\n     }\n   }\n \n   @Override\n-  public synchronized void setConf(Configuration conf) {\n+  public void setConf(Configuration conf) {\n     super.setConf(conf);\n \n     // setup filesystem\n     try {\n+      lock.writeLock().lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91b6bcaafde0424b1974f89f033dff2286d55279"}, "originalPosition": 115}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f357eaf1ad39853198f726c5b917b3f06f28f001", "author": {"user": {"login": "sunhelly", "name": "Xiaolin Ha"}}, "url": "https://github.com/apache/hbase/commit/f357eaf1ad39853198f726c5b917b3f06f28f001", "committedDate": "2020-12-08T05:35:48Z", "message": "fix according to comments"}, "afterCommit": {"oid": "14e8adbc50c0a14d0815dd8370521ddd98449ed6", "author": {"user": {"login": "sunhelly", "name": "Xiaolin Ha"}}, "url": "https://github.com/apache/hbase/commit/14e8adbc50c0a14d0815dd8370521ddd98449ed6", "committedDate": "2020-12-08T07:01:19Z", "message": "fix according to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9708af7933915b70f7fc7943761b0ac257ba198", "author": {"user": {"login": "sunhelly", "name": "Xiaolin Ha"}}, "url": "https://github.com/apache/hbase/commit/e9708af7933915b70f7fc7943761b0ac257ba198", "committedDate": "2020-12-08T09:21:16Z", "message": "HBASE-25363 Improve performance of HFileLinkCleaner by using ReadWriteLock instead of synchronize"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14e8adbc50c0a14d0815dd8370521ddd98449ed6", "author": {"user": {"login": "sunhelly", "name": "Xiaolin Ha"}}, "url": "https://github.com/apache/hbase/commit/14e8adbc50c0a14d0815dd8370521ddd98449ed6", "committedDate": "2020-12-08T07:01:19Z", "message": "fix according to comments"}, "afterCommit": {"oid": "e9708af7933915b70f7fc7943761b0ac257ba198", "author": {"user": {"login": "sunhelly", "name": "Xiaolin Ha"}}, "url": "https://github.com/apache/hbase/commit/e9708af7933915b70f7fc7943761b0ac257ba198", "committedDate": "2020-12-08T09:21:16Z", "message": "HBASE-25363 Improve performance of HFileLinkCleaner by using ReadWriteLock instead of synchronize"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1791, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}