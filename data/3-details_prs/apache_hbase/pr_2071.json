{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MjczNzQ0", "number": 2071, "title": "HBASE-24743 Reject to add a peer which replicate to itself earlier", "bodyText": "", "createdAt": "2020-07-15T06:28:48Z", "url": "https://github.com/apache/hbase/pull/2071", "merged": true, "mergeCommit": {"oid": "6cf013ddc426a01d3b1e0266b80a6239de630602"}, "closed": true, "closedAt": "2020-07-21T00:37:57Z", "author": {"login": "infraio"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1G0lUAFqTQ0ODc2MTk4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2r8ZmgBqjM1NjQxOTI3MDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzYxOTg3", "url": "https://github.com/apache/hbase/pull/2071#pullrequestreview-448761987", "createdAt": "2020-07-15T08:59:58Z", "commit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODo1OTo1OFrOGx09IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODo1OTo1OFrOGx09IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwMTAyNQ==", "bodyText": "Just a thought while going through this code, not required for the objective of this PR: as mentioned on the code comment, this is specific for HBaseInterClusterReplicationEndpoint, so shouldn't we define a checkClusterKey method on ReplicationEndpoint (with a default implementation), and implement this check specific for HBaseInterClusterReplicationEndpoint in HBaseInterClusterReplicationEndpoint?", "url": "https://github.com/apache/hbase/pull/2071#discussion_r454901025", "createdAt": "2020-07-15T08:59:58Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -337,25 +347,21 @@ public void removeAllQueuesAndHFileRefs(String peerId) throws ReplicationExcepti\n \n   private void checkPeerConfig(ReplicationPeerConfig peerConfig) throws DoNotRetryIOException {\n     String replicationEndpointImpl = peerConfig.getReplicationEndpointImpl();\n-    boolean checkClusterKey = true;\n+    ReplicationEndpoint endpoint = null;\n     if (!StringUtils.isBlank(replicationEndpointImpl)) {\n-      // try creating a instance\n-      ReplicationEndpoint endpoint;\n       try {\n+        // try creating a instance\n         endpoint = Class.forName(replicationEndpointImpl)\n           .asSubclass(ReplicationEndpoint.class).getDeclaredConstructor().newInstance();\n       } catch (Throwable e) {\n         throw new DoNotRetryIOException(\n           \"Can not instantiate configured replication endpoint class=\" + replicationEndpointImpl,\n           e);\n       }\n-      // do not check cluster key if we are not HBaseInterClusterReplicationEndpoint\n-      if (!(endpoint instanceof HBaseInterClusterReplicationEndpoint)) {\n-        checkClusterKey = false;\n-      }\n     }\n-    if (checkClusterKey) {\n-      checkClusterKey(peerConfig.getClusterKey());\n+    // Default is HBaseInterClusterReplicationEndpoint and only it need to check cluster key\n+    if (endpoint == null || endpoint instanceof HBaseInterClusterReplicationEndpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5Mzk1NjU1", "url": "https://github.com/apache/hbase/pull/2071#pullrequestreview-449395655", "createdAt": "2020-07-15T22:49:49Z", "commit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo0OTo0OVrOGyT9rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMjo1MzozNFrOGyUDHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwOTA2OA==", "bodyText": "You are fetching the currentClusterId right? Why name it as peerClusterId? I think the argument to this method is peerClusterKey.", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455409068", "createdAt": "2020-07-15T22:49:49Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -493,12 +499,35 @@ private void checkConfiguredWALEntryFilters(ReplicationPeerConfig peerConfig)\n     }\n   }\n \n-  private void checkClusterKey(String clusterKey) throws DoNotRetryIOException {\n+  private void checkClusterKeyForHBaseInterClusterReplicationEndpoint(String clusterKey)\n+    throws DoNotRetryIOException {\n     try {\n       ZKConfig.validateClusterKey(clusterKey);\n     } catch (IOException e) {\n       throw new DoNotRetryIOException(\"Invalid cluster key: \" + clusterKey, e);\n     }\n+    String peerClusterId = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwOTY2MA==", "bodyText": "ReplicationPeerManager is colocated with master, right? you can use master.getClusterId() without doing all this? (that is cached, so saves a ZK round trip).", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455409660", "createdAt": "2020-07-15T22:51:17Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -493,12 +499,35 @@ private void checkConfiguredWALEntryFilters(ReplicationPeerConfig peerConfig)\n     }\n   }\n \n-  private void checkClusterKey(String clusterKey) throws DoNotRetryIOException {\n+  private void checkClusterKeyForHBaseInterClusterReplicationEndpoint(String clusterKey)\n+    throws DoNotRetryIOException {\n     try {\n       ZKConfig.validateClusterKey(clusterKey);\n     } catch (IOException e) {\n       throw new DoNotRetryIOException(\"Invalid cluster key: \" + clusterKey, e);\n     }\n+    String peerClusterId = \"\";\n+    try {\n+      Configuration otherConf = HBaseConfiguration.createClusterConf(conf, clusterKey);\n+      ZKWatcher zkWatcher =\n+        new ZKWatcher(otherConf, this + \"check-peer-cluster-key\", new Abortable() {\n+          @Override public void abort(String why, Throwable e) {\n+          }\n+\n+          @Override public boolean isAborted() {\n+            return false;\n+          }\n+        });\n+      peerClusterId = ZKClusterId.readClusterIdZNode(zkWatcher);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQxMDQ2Mw==", "bodyText": "Replication#canReplicateToSameCluster() isn't it supposed to do this?", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455410463", "createdAt": "2020-07-15T22:53:34Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -337,25 +347,21 @@ public void removeAllQueuesAndHFileRefs(String peerId) throws ReplicationExcepti\n \n   private void checkPeerConfig(ReplicationPeerConfig peerConfig) throws DoNotRetryIOException {\n     String replicationEndpointImpl = peerConfig.getReplicationEndpointImpl();\n-    boolean checkClusterKey = true;\n+    ReplicationEndpoint endpoint = null;\n     if (!StringUtils.isBlank(replicationEndpointImpl)) {\n-      // try creating a instance\n-      ReplicationEndpoint endpoint;\n       try {\n+        // try creating a instance\n         endpoint = Class.forName(replicationEndpointImpl)\n           .asSubclass(ReplicationEndpoint.class).getDeclaredConstructor().newInstance();\n       } catch (Throwable e) {\n         throw new DoNotRetryIOException(\n           \"Can not instantiate configured replication endpoint class=\" + replicationEndpointImpl,\n           e);\n       }\n-      // do not check cluster key if we are not HBaseInterClusterReplicationEndpoint\n-      if (!(endpoint instanceof HBaseInterClusterReplicationEndpoint)) {\n-        checkClusterKey = false;\n-      }\n     }\n-    if (checkClusterKey) {\n-      checkClusterKey(peerConfig.getClusterKey());\n+    // Default is HBaseInterClusterReplicationEndpoint and only it need to check cluster key\n+    if (endpoint == null || endpoint instanceof HBaseInterClusterReplicationEndpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwMTAyNQ=="}, "originalCommit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ac728deb743f37bff67375db6a5398ecf7336a13", "committedDate": "2020-07-15T06:28:18Z", "message": "HBASE-24743 Reject to add a peer which replicate to itself earlier"}, "afterCommit": {"oid": "129d94a8fa55313de7ba8b227754d880d4a7101e", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/129d94a8fa55313de7ba8b227754d880d4a7101e", "committedDate": "2020-07-16T00:04:37Z", "message": "HBASE-24743 Reject to add a peer which replicate to itself earlier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDE5NzAw", "url": "https://github.com/apache/hbase/pull/2071#pullrequestreview-449419700", "createdAt": "2020-07-15T23:57:01Z", "commit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMzo1NzowMVrOGyVUMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwMTozNjo0MFrOGyW-9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQzMTIxNw==", "bodyText": "oh sorry my bad, I misread the code.", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455431217", "createdAt": "2020-07-15T23:57:01Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -493,12 +499,35 @@ private void checkConfiguredWALEntryFilters(ReplicationPeerConfig peerConfig)\n     }\n   }\n \n-  private void checkClusterKey(String clusterKey) throws DoNotRetryIOException {\n+  private void checkClusterKeyForHBaseInterClusterReplicationEndpoint(String clusterKey)\n+    throws DoNotRetryIOException {\n     try {\n       ZKConfig.validateClusterKey(clusterKey);\n     } catch (IOException e) {\n       throw new DoNotRetryIOException(\"Invalid cluster key: \" + clusterKey, e);\n     }\n+    String peerClusterId = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQwOTA2OA=="}, "originalCommit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NTUzMg==", "bodyText": "nit = null is redundant.", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455455532", "createdAt": "2020-07-16T01:25:40Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -337,26 +347,26 @@ public void removeAllQueuesAndHFileRefs(String peerId) throws ReplicationExcepti\n \n   private void checkPeerConfig(ReplicationPeerConfig peerConfig) throws DoNotRetryIOException {\n     String replicationEndpointImpl = peerConfig.getReplicationEndpointImpl();\n-    boolean checkClusterKey = true;\n+    ReplicationEndpoint endpoint = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129d94a8fa55313de7ba8b227754d880d4a7101e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1Njc4OQ==", "bodyText": "Thanks. Why have endpoint == null check? Ideally it shouldn't be null? (if we are past the try-catch)", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455456789", "createdAt": "2020-07-16T01:30:10Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -337,25 +347,21 @@ public void removeAllQueuesAndHFileRefs(String peerId) throws ReplicationExcepti\n \n   private void checkPeerConfig(ReplicationPeerConfig peerConfig) throws DoNotRetryIOException {\n     String replicationEndpointImpl = peerConfig.getReplicationEndpointImpl();\n-    boolean checkClusterKey = true;\n+    ReplicationEndpoint endpoint = null;\n     if (!StringUtils.isBlank(replicationEndpointImpl)) {\n-      // try creating a instance\n-      ReplicationEndpoint endpoint;\n       try {\n+        // try creating a instance\n         endpoint = Class.forName(replicationEndpointImpl)\n           .asSubclass(ReplicationEndpoint.class).getDeclaredConstructor().newInstance();\n       } catch (Throwable e) {\n         throw new DoNotRetryIOException(\n           \"Can not instantiate configured replication endpoint class=\" + replicationEndpointImpl,\n           e);\n       }\n-      // do not check cluster key if we are not HBaseInterClusterReplicationEndpoint\n-      if (!(endpoint instanceof HBaseInterClusterReplicationEndpoint)) {\n-        checkClusterKey = false;\n-      }\n     }\n-    if (checkClusterKey) {\n-      checkClusterKey(peerConfig.getClusterKey());\n+    // Default is HBaseInterClusterReplicationEndpoint and only it need to check cluster key\n+    if (endpoint == null || endpoint instanceof HBaseInterClusterReplicationEndpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDkwMTAyNQ=="}, "originalCommit": {"oid": "ac728deb743f37bff67375db6a5398ecf7336a13"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1NzM2Ng==", "bodyText": "nit: same question as above..null check on endpoint.", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455457366", "createdAt": "2020-07-16T01:32:11Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -337,26 +347,26 @@ public void removeAllQueuesAndHFileRefs(String peerId) throws ReplicationExcepti\n \n   private void checkPeerConfig(ReplicationPeerConfig peerConfig) throws DoNotRetryIOException {\n     String replicationEndpointImpl = peerConfig.getReplicationEndpointImpl();\n-    boolean checkClusterKey = true;\n+    ReplicationEndpoint endpoint = null;\n     if (!StringUtils.isBlank(replicationEndpointImpl)) {\n-      // try creating a instance\n-      ReplicationEndpoint endpoint;\n       try {\n+        // try creating a instance\n         endpoint = Class.forName(replicationEndpointImpl)\n           .asSubclass(ReplicationEndpoint.class).getDeclaredConstructor().newInstance();\n       } catch (Throwable e) {\n         throw new DoNotRetryIOException(\n           \"Can not instantiate configured replication endpoint class=\" + replicationEndpointImpl,\n           e);\n       }\n-      // do not check cluster key if we are not HBaseInterClusterReplicationEndpoint\n-      if (!(endpoint instanceof HBaseInterClusterReplicationEndpoint)) {\n-        checkClusterKey = false;\n-      }\n     }\n-    if (checkClusterKey) {\n+    // Default is HBaseInterClusterReplicationEndpoint and only it need to check cluster key\n+    if (endpoint == null || endpoint instanceof HBaseInterClusterReplicationEndpoint) {\n       checkClusterKey(peerConfig.getClusterKey());\n     }\n+    // Default is HBaseInterClusterReplicationEndpoint which cannot replicate to same cluster\n+    if (endpoint == null || !endpoint.canReplicateToSameCluster()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129d94a8fa55313de7ba8b227754d880d4a7101e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1Nzc4OQ==", "bodyText": "Looks like ZKWatcher is null-safe with abortable. Since we are not actually relying on it, just pass null?", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455457789", "createdAt": "2020-07-16T01:33:55Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -501,6 +511,32 @@ private void checkClusterKey(String clusterKey) throws DoNotRetryIOException {\n     }\n   }\n \n+  private void checkClusterId(String clusterKey) throws DoNotRetryIOException {\n+    String peerClusterId = \"\";\n+    try {\n+      // Create the peer cluster config for get peer cluster id\n+      Configuration peerConf = HBaseConfiguration.createClusterConf(conf, clusterKey);\n+      ZKWatcher zkWatcher =\n+        new ZKWatcher(peerConf, this + \"check-peer-cluster-key\", new Abortable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129d94a8fa55313de7ba8b227754d880d4a7101e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1Nzk5NA==", "bodyText": "We want to close() the zkWatcher? Otherwise there is a connection leak?", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455457994", "createdAt": "2020-07-16T01:34:46Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -501,6 +511,32 @@ private void checkClusterKey(String clusterKey) throws DoNotRetryIOException {\n     }\n   }\n \n+  private void checkClusterId(String clusterKey) throws DoNotRetryIOException {\n+    String peerClusterId = \"\";\n+    try {\n+      // Create the peer cluster config for get peer cluster id\n+      Configuration peerConf = HBaseConfiguration.createClusterConf(conf, clusterKey);\n+      ZKWatcher zkWatcher =\n+        new ZKWatcher(peerConf, this + \"check-peer-cluster-key\", new Abortable() {\n+          @Override public void abort(String why, Throwable e) {\n+          }\n+\n+          @Override public boolean isAborted() {\n+            return false;\n+          }\n+        });\n+      peerClusterId = ZKClusterId.readClusterIdZNode(zkWatcher);\n+    } catch (IOException | KeeperException e) {\n+      throw new DoNotRetryIOException(\"Can't get peerClusterId for clusterKey=\" + clusterKey, e);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129d94a8fa55313de7ba8b227754d880d4a7101e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTQ1ODU1MA==", "bodyText": "Actually, now that I read the code again, why not use ReplicationEndpoint#getPeerUUID().toString(). That wraps the whole logic?", "url": "https://github.com/apache/hbase/pull/2071#discussion_r455458550", "createdAt": "2020-07-16T01:36:40Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/replication/ReplicationPeerManager.java", "diffHunk": "@@ -501,6 +511,32 @@ private void checkClusterKey(String clusterKey) throws DoNotRetryIOException {\n     }\n   }\n \n+  private void checkClusterId(String clusterKey) throws DoNotRetryIOException {\n+    String peerClusterId = \"\";\n+    try {\n+      // Create the peer cluster config for get peer cluster id\n+      Configuration peerConf = HBaseConfiguration.createClusterConf(conf, clusterKey);\n+      ZKWatcher zkWatcher =\n+        new ZKWatcher(peerConf, this + \"check-peer-cluster-key\", new Abortable() {\n+          @Override public void abort(String why, Throwable e) {\n+          }\n+\n+          @Override public boolean isAborted() {\n+            return false;\n+          }\n+        });\n+      peerClusterId = ZKClusterId.readClusterIdZNode(zkWatcher);\n+    } catch (IOException | KeeperException e) {\n+      throw new DoNotRetryIOException(\"Can't get peerClusterId for clusterKey=\" + clusterKey, e);\n+    }\n+    // In rare case, zookeeper setting may be messed up. That leads to the incorrect\n+    // peerClusterId value, which is the same as the source clusterId\n+    if (clusterId.equals(peerClusterId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "129d94a8fa55313de7ba8b227754d880d4a7101e"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "129d94a8fa55313de7ba8b227754d880d4a7101e", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/129d94a8fa55313de7ba8b227754d880d4a7101e", "committedDate": "2020-07-16T00:04:37Z", "message": "HBASE-24743 Reject to add a peer which replicate to itself earlier"}, "afterCommit": {"oid": "ff7766f638906fe424380769c3115684ce309737", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ff7766f638906fe424380769c3115684ce309737", "committedDate": "2020-07-16T02:03:25Z", "message": "HBASE-24743 Reject to add a peer which replicate to itself earlier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDYwMTM5", "url": "https://github.com/apache/hbase/pull/2071#pullrequestreview-449460139", "createdAt": "2020-07-16T02:11:40Z", "commit": {"oid": "ff7766f638906fe424380769c3115684ce309737"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef5ee55780e5edf5f7d59d9e6d04de9bb5083aba", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ef5ee55780e5edf5f7d59d9e6d04de9bb5083aba", "committedDate": "2020-07-20T06:49:21Z", "message": "HBASE-24743 Reject to add a peer which replicate to itself earlier"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff7766f638906fe424380769c3115684ce309737", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ff7766f638906fe424380769c3115684ce309737", "committedDate": "2020-07-16T02:03:25Z", "message": "HBASE-24743 Reject to add a peer which replicate to itself earlier"}, "afterCommit": {"oid": "ef5ee55780e5edf5f7d59d9e6d04de9bb5083aba", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ef5ee55780e5edf5f7d59d9e6d04de9bb5083aba", "committedDate": "2020-07-20T06:49:21Z", "message": "HBASE-24743 Reject to add a peer which replicate to itself earlier"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4280, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}