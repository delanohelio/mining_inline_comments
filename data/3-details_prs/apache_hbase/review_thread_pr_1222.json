{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzI3NTgy", "number": 1222, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzowNjoxM1rODj-fww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTo0NjozOVrODj_nUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDUwNjkxOnYy", "diffSide": "LEFT", "path": "hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestIncrementalBackup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzowNjoxM1rOFwFRvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNTo1MToxMFrOFwO0VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MjQzMQ==", "bodyText": "Why do you remove the empty lines? Because of the method length? I think they help increase the readability.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385962431", "createdAt": "2020-02-28T23:06:13Z", "author": {"login": "HorizonNet"}, "path": "hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestIncrementalBackup.java", "diffHunk": "@@ -105,15 +107,13 @@ public void TestIncBackupRestore() throws Exception {\n       Assert.assertEquals(HBaseTestingUtility.countRows(t1),\n               NB_ROWS_IN_BATCH + ADD_ROWS + NB_ROWS_FAM3);\n       LOG.debug(\"written \" + ADD_ROWS + \" rows to \" + table1);\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNTUzMQ==", "bodyText": "Oh this is because, checkstyle complained about >150 lines in this method. I didn't want to remove it :)", "url": "https://github.com/apache/hbase/pull/1222#discussion_r386005531", "createdAt": "2020-02-29T06:12:10Z", "author": {"login": "virajjasani"}, "path": "hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestIncrementalBackup.java", "diffHunk": "@@ -105,15 +107,13 @@ public void TestIncBackupRestore() throws Exception {\n       Assert.assertEquals(HBaseTestingUtility.countRows(t1),\n               NB_ROWS_IN_BATCH + ADD_ROWS + NB_ROWS_FAM3);\n       LOG.debug(\"written \" + ADD_ROWS + \" rows to \" + table1);\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MjQzMQ=="}, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExODc0MA==", "bodyText": "Is this fine?", "url": "https://github.com/apache/hbase/pull/1222#discussion_r386118740", "createdAt": "2020-03-01T15:51:10Z", "author": {"login": "virajjasani"}, "path": "hbase-backup/src/test/java/org/apache/hadoop/hbase/backup/TestIncrementalBackup.java", "diffHunk": "@@ -105,15 +107,13 @@ public void TestIncBackupRestore() throws Exception {\n       Assert.assertEquals(HBaseTestingUtility.countRows(t1),\n               NB_ROWS_IN_BATCH + ADD_ROWS + NB_ROWS_FAM3);\n       LOG.debug(\"written \" + ADD_ROWS + \" rows to \" + table1);\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MjQzMQ=="}, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDUxNDU5OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/test/java/org/apache/hadoop/hbase/TestHTableDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzoxMToyOVrOFwFWcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQyMzoxMToyOVrOFwFWcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk2MzYzNQ==", "bodyText": "Better would be to use the fluent API, also for other occurrences in this test class.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385963635", "createdAt": "2020-02-28T23:11:29Z", "author": {"login": "HorizonNet"}, "path": "hbase-client/src/test/java/org/apache/hadoop/hbase/TestHTableDescriptor.java", "diffHunk": "@@ -309,41 +312,52 @@ public void testClassMethodsAreBuilderStyle() {\n \n   @Test\n   public void testModifyFamily() {\n-    HTableDescriptor htd = new HTableDescriptor(TableName.valueOf(name.getMethodName()));\n+    TableDescriptorBuilder.ModifyableTableDescriptor tableDescriptor =\n+      new TableDescriptorBuilder.ModifyableTableDescriptor(\n+        TableName.valueOf(name.getMethodName()));\n     byte[] familyName = Bytes.toBytes(\"cf\");\n-    HColumnDescriptor hcd = new HColumnDescriptor(familyName);\n-    hcd.setBlocksize(1000);\n-    hcd.setDFSReplication((short) 3);\n-    htd.addFamily(hcd);\n-    assertEquals(1000, htd.getFamily(familyName).getBlocksize());\n-    assertEquals(3, htd.getFamily(familyName).getDFSReplication());\n-    hcd = new HColumnDescriptor(familyName);\n-    hcd.setBlocksize(2000);\n-    hcd.setDFSReplication((short) 1);\n-    htd.modifyFamily(hcd);\n-    assertEquals(2000, htd.getFamily(familyName).getBlocksize());\n-    assertEquals(1, htd.getFamily(familyName).getDFSReplication());\n+    ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor familyDescriptor =\n+      new ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor(familyName);\n+    familyDescriptor.setBlocksize(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDYwMzM4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxMjoyM1rOFwGLRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwODo0NDoxNlrOFwXRRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3NzE1OA==", "bodyText": "Use a Javadoc link for TableDescriptorBuilder.ModifyableTableDescriptor.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385977158", "createdAt": "2020-02-29T00:12:23Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "diffHunk": "@@ -203,6 +230,38 @@ public static void add(HTableDescriptor desc,\n     updateLatestPriority(desc, priority);\n   }\n \n+  /**\n+   * Add configuration-less constraints to the table.\n+   * <p>\n+   * This will overwrite any configuration associated with the previous\n+   * constraint of the same class.\n+   * <p>\n+   * Each constraint, when added to the table, will have a specific priority,\n+   * dictating the order in which the {@link Constraint} will be run. A\n+   * {@link Constraint} earlier in the list will be run before those later in\n+   * the list. The same logic applies between two Constraints over time (earlier\n+   * added is run first on the regionserver).\n+   *\n+   * @param tableDescriptor TableDescriptorBuilder.ModifyableTableDescriptor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAwNjA0MQ==", "bodyText": "Unfortunately, it's not working somehow. This is the error I get: warning - Tag @link: reference not found: TableDescriptorBuilder.ModifyableTableDescriptor\nFYI https://builds.apache.org/job/HBase-PreCommit-GitHub-PR/job/PR-1222/1/artifact/out/diff-javadoc-javadoc-hbase-server.txt", "url": "https://github.com/apache/hbase/pull/1222#discussion_r386006041", "createdAt": "2020-02-29T06:22:27Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "diffHunk": "@@ -203,6 +230,38 @@ public static void add(HTableDescriptor desc,\n     updateLatestPriority(desc, priority);\n   }\n \n+  /**\n+   * Add configuration-less constraints to the table.\n+   * <p>\n+   * This will overwrite any configuration associated with the previous\n+   * constraint of the same class.\n+   * <p>\n+   * Each constraint, when added to the table, will have a specific priority,\n+   * dictating the order in which the {@link Constraint} will be run. A\n+   * {@link Constraint} earlier in the list will be run before those later in\n+   * the list. The same logic applies between two Constraints over time (earlier\n+   * added is run first on the regionserver).\n+   *\n+   * @param tableDescriptor TableDescriptorBuilder.ModifyableTableDescriptor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3NzE1OA=="}, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjI1NzIyMQ==", "bodyText": "Ah, then we're running into the Javadoc bug we had a few times already.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r386257221", "createdAt": "2020-03-02T08:44:16Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "diffHunk": "@@ -203,6 +230,38 @@ public static void add(HTableDescriptor desc,\n     updateLatestPriority(desc, priority);\n   }\n \n+  /**\n+   * Add configuration-less constraints to the table.\n+   * <p>\n+   * This will overwrite any configuration associated with the previous\n+   * constraint of the same class.\n+   * <p>\n+   * Each constraint, when added to the table, will have a specific priority,\n+   * dictating the order in which the {@link Constraint} will be run. A\n+   * {@link Constraint} earlier in the list will be run before those later in\n+   * the list. The same logic applies between two Constraints over time (earlier\n+   * added is run first on the regionserver).\n+   *\n+   * @param tableDescriptor TableDescriptorBuilder.ModifyableTableDescriptor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3NzE1OA=="}, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDYwMzg4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxMjo0M1rOFwGLkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxMjo0M1rOFwGLkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3NzIzMg==", "bodyText": "Contains a link to Constraints twice.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385977232", "createdAt": "2020-02-29T00:12:43Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "diffHunk": "@@ -203,6 +230,38 @@ public static void add(HTableDescriptor desc,\n     updateLatestPriority(desc, priority);\n   }\n \n+  /**\n+   * Add configuration-less constraints to the table.\n+   * <p>\n+   * This will overwrite any configuration associated with the previous\n+   * constraint of the same class.\n+   * <p>\n+   * Each constraint, when added to the table, will have a specific priority,\n+   * dictating the order in which the {@link Constraint} will be run. A\n+   * {@link Constraint} earlier in the list will be run before those later in\n+   * the list. The same logic applies between two Constraints over time (earlier\n+   * added is run first on the regionserver).\n+   *\n+   * @param tableDescriptor TableDescriptorBuilder.ModifyableTableDescriptor\n+   *   to add {@link Constraint Constraints}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDYwNDA5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxMjo1MVrOFwGLrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxMjo1MVrOFwGLrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3NzI2MQ==", "bodyText": "Ditto.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385977261", "createdAt": "2020-02-29T00:12:51Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "diffHunk": "@@ -203,6 +230,38 @@ public static void add(HTableDescriptor desc,\n     updateLatestPriority(desc, priority);\n   }\n \n+  /**\n+   * Add configuration-less constraints to the table.\n+   * <p>\n+   * This will overwrite any configuration associated with the previous\n+   * constraint of the same class.\n+   * <p>\n+   * Each constraint, when added to the table, will have a specific priority,\n+   * dictating the order in which the {@link Constraint} will be run. A\n+   * {@link Constraint} earlier in the list will be run before those later in\n+   * the list. The same logic applies between two Constraints over time (earlier\n+   * added is run first on the regionserver).\n+   *\n+   * @param tableDescriptor TableDescriptorBuilder.ModifyableTableDescriptor\n+   *   to add {@link Constraint Constraints}\n+   * @param constraints {@link Constraint Constraints} to add. All constraints are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDYwNDczOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxMzoyN1rOFwGMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDoxMzoyN1rOFwGMFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk3NzM2NA==", "bodyText": "NIT: Should have the same indentation as the line before.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385977364", "createdAt": "2020-02-29T00:13:27Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/constraint/Constraints.java", "diffHunk": "@@ -337,6 +396,13 @@ private static void writeConstraint(HTableDescriptor desc, String key,\n     desc.setValue(key, serializeConfiguration(conf));\n   }\n \n+  private static void writeConstraint(\n+      TableDescriptorBuilder.ModifyableTableDescriptor tableDescriptor, String key,\n+    Configuration conf) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY0MTY4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDo0NzoyMlrOFwGhsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQxNTo1MzowNlrOFwO08g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4Mjg5Nw==", "bodyText": "The comment should be above the line with setting the cache.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385982897", "createdAt": "2020-02-29T00:47:22Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java", "diffHunk": "@@ -210,18 +211,21 @@ public void stop(CoprocessorEnvironment env) throws IOException {\n   public void postStartMaster(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {\n     // Need to create the new system table for labels here\n     if (!MetaTableAccessor.tableExists(ctx.getEnvironment().getConnection(), LABELS_TABLE_NAME)) {\n-      HTableDescriptor labelsTable = new HTableDescriptor(LABELS_TABLE_NAME);\n-      HColumnDescriptor labelsColumn = new HColumnDescriptor(LABELS_TABLE_FAMILY);\n-      labelsColumn.setBloomFilterType(BloomType.NONE);\n-      labelsColumn.setBlockCacheEnabled(false); // We will cache all the labels. No need of normal\n-                                                 // table block cache.\n-      labelsTable.addFamily(labelsColumn);\n+      TableDescriptorBuilder.ModifyableTableDescriptor tableDescriptor =\n+        new TableDescriptorBuilder.ModifyableTableDescriptor(LABELS_TABLE_NAME);\n+      ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor familyDescriptor =\n+        new ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor(LABELS_TABLE_FAMILY);\n+      familyDescriptor.setBloomFilterType(BloomType.NONE);\n+      familyDescriptor.setBlockCacheEnabled(false);\n+      // We will cache all the labels. No need of normal", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjExODg5OA==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/1222#discussion_r386118898", "createdAt": "2020-03-01T15:53:06Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/security/visibility/VisibilityController.java", "diffHunk": "@@ -210,18 +211,21 @@ public void stop(CoprocessorEnvironment env) throws IOException {\n   public void postStartMaster(ObserverContext<MasterCoprocessorEnvironment> ctx) throws IOException {\n     // Need to create the new system table for labels here\n     if (!MetaTableAccessor.tableExists(ctx.getEnvironment().getConnection(), LABELS_TABLE_NAME)) {\n-      HTableDescriptor labelsTable = new HTableDescriptor(LABELS_TABLE_NAME);\n-      HColumnDescriptor labelsColumn = new HColumnDescriptor(LABELS_TABLE_FAMILY);\n-      labelsColumn.setBloomFilterType(BloomType.NONE);\n-      labelsColumn.setBlockCacheEnabled(false); // We will cache all the labels. No need of normal\n-                                                 // table block cache.\n-      labelsTable.addFamily(labelsColumn);\n+      TableDescriptorBuilder.ModifyableTableDescriptor tableDescriptor =\n+        new TableDescriptorBuilder.ModifyableTableDescriptor(LABELS_TABLE_NAME);\n+      ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor familyDescriptor =\n+        new ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor(LABELS_TABLE_FAMILY);\n+      familyDescriptor.setBloomFilterType(BloomType.NONE);\n+      familyDescriptor.setBlockCacheEnabled(false);\n+      // We will cache all the labels. No need of normal", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4Mjg5Nw=="}, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY0MjMyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDo0ODowNFrOFwGiEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMDo0ODowNFrOFwGiEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4Mjk5NA==", "bodyText": "Use a link for createNewHRegion.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385982994", "createdAt": "2020-02-29T00:48:04Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestCase.java", "diffHunk": "@@ -151,23 +154,23 @@ protected Path getUnitTestdir(String testName) {\n   /**\n    * You must call close on the returned region and then close on the log file it created. Do\n    * {@link HBaseTestingUtility#closeRegionAndWAL(HRegion)} to close both the region and the WAL.\n-   * @param desc\n-   * @param startKey\n-   * @param endKey\n+   * @param tableDescriptor TableDescriptor\n+   * @param startKey Start Key\n+   * @param endKey End Key\n    * @return An {@link HRegion}\n-   * @throws IOException\n+   * @throws IOException If thrown by createNewHRegion", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY3NDk3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobCompactionOptRegionBatchMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToyNjowMlrOFwG0gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToyNjowMlrOFwG0gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NzcxNQ==", "bodyText": "Why admin2 as the parameter name?", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385987715", "createdAt": "2020-02-29T01:26:02Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobCompactionOptRegionBatchMode.java", "diffHunk": "@@ -76,6 +76,13 @@ protected void initConf() {\n     conf.setLong(MobConstants.MOB_COMPACTION_MAX_FILE_SIZE_KEY, 1000000);\n   }\n \n+  @Override\n+  protected void mobCompact(Admin admin2, TableDescriptor tableDescriptor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY3NTA4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobCompactionRegularMode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToyNjoxOVrOFwG0mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMToyNjoxOVrOFwG0mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4NzczOA==", "bodyText": "Ditto.", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385987738", "createdAt": "2020-02-29T01:26:19Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/mob/TestMobCompactionRegularMode.java", "diffHunk": "@@ -57,6 +57,13 @@\n   public TestMobCompactionRegularMode() {\n   }\n \n+  @Override\n+  protected void mobCompact(Admin admin2, TableDescriptor tableDescriptor,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDY5MDEwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTo0NjozOVrOFwG8wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwMTo0NjozOVrOFwG8wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTk4OTgyNQ==", "bodyText": "Also remove the commented out lines when already on it?", "url": "https://github.com/apache/hbase/pull/1222#discussion_r385989825", "createdAt": "2020-02-29T01:46:39Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestTags.java", "diffHunk": "@@ -184,14 +186,16 @@ public void testFlushAndCompactionWithoutTags() throws Exception {\n \n       byte[] row2 = Bytes.toBytes(\"rowc\");\n \n-      HTableDescriptor desc = new HTableDescriptor(tableName);\n-      HColumnDescriptor colDesc = new HColumnDescriptor(fam);\n-      colDesc.setBlockCacheEnabled(true);\n+      TableDescriptorBuilder.ModifyableTableDescriptor tableDescriptor =\n+        new TableDescriptorBuilder.ModifyableTableDescriptor(tableName);\n+      ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor familyDescriptor =\n+        new ColumnFamilyDescriptorBuilder.ModifyableColumnFamilyDescriptor(fam);\n+      familyDescriptor.setBlockCacheEnabled(true);\n       // colDesc.setDataBlockEncoding(DataBlockEncoding.NONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45c9e1d6ae69614ffab24384dfe1b20793355ef2"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2111, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}