{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5OTkwNTI3", "number": 1114, "title": "HBASE-23146 Support CheckAndMutate with multiple conditions", "bodyText": "", "createdAt": "2020-02-02T09:19:31Z", "url": "https://github.com/apache/hbase/pull/1114", "merged": true, "mergeCommit": {"oid": "ecbed33092ace031ad260026c7676e6c5886c267"}, "closed": true, "closedAt": "2020-02-25T23:09:05Z", "author": {"login": "brfrn169"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAi0vuAFqTM1MTk4NzgwNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHuMtYAFqTM2Mzk2MDg0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTg3ODA2", "url": "https://github.com/apache/hbase/pull/1114#pullrequestreview-351987806", "createdAt": "2020-02-03T01:34:06Z", "commit": {"oid": "34e71d99233b34df974109dbccd4484f141b43ce"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMTozNDowNlrOFkkvAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwMTozNToxOVrOFkkvag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NDkxNA==", "bodyText": "The API here is a bit strange. We introduce the above family & row method is because that family and row both can not be null, but here since we allow matching multiple qualifiers acrossing different families, we can accept null families as we can pass it through the filter implementation? So here, either we deprecated the old checkAndMutate(family, row) method and introduce a new family method, or we introduce a new checkAndMutate(row, filter)?", "url": "https://github.com/apache/hbase/pull/1114#discussion_r373894914", "createdAt": "2020-02-03T01:34:06Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncTable.java", "diffHunk": "@@ -233,6 +234,28 @@\n    */\n   CheckAndMutateBuilder checkAndMutate(byte[] row, byte[] family);\n \n+  /**\n+   * Atomically checks if a row matches the specified filter. If it does, it adds the\n+   * Put/Delete/RowMutations.\n+   * <p>\n+   * Use the returned {@link CheckAndMutateBuilder} to construct your request and then execute it.\n+   * This is a fluent style API, the code is like:\n+   *\n+   * <pre>\n+   * <code>\n+   * table.checkAndMutate(row).ifMatches(filter).thenPut(put)\n+   *     .thenAccept(succ -> {\n+   *       if (succ) {\n+   *         System.out.println(\"Check and put succeeded\");\n+   *       } else {\n+   *         System.out.println(\"Check and put failed\");\n+   *       }\n+   *     });\n+   * </code>\n+   * </pre>\n+   */\n+  CheckAndMutateBuilder checkAndMutate(byte[] row);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e71d99233b34df974109dbccd4484f141b43ce"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NDk1OQ==", "bodyText": "Just remove all the empty param javadoc?", "url": "https://github.com/apache/hbase/pull/1114#discussion_r373894959", "createdAt": "2020-02-03T01:34:42Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/RequestConverter.java", "diffHunk": "@@ -191,18 +193,18 @@ public static GetRequest buildGetRequest(final byte[] regionName,\n    * @param row\n    * @param family\n    * @param qualifier\n-   * @param comparator\n-   * @param compareType\n+   * @param op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e71d99233b34df974109dbccd4484f141b43ce"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NDk5OQ==", "bodyText": "Ditto.", "url": "https://github.com/apache/hbase/pull/1114#discussion_r373894999", "createdAt": "2020-02-03T01:35:10Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/RequestConverter.java", "diffHunk": "@@ -212,54 +214,55 @@ public static MutateRequest buildMutateRequest(\n    * @param row\n    * @param family\n    * @param qualifier\n-   * @param comparator\n-   * @param compareType\n+   * @param op\n+   * @param value\n    * @param delete\n    * @return a mutate request\n    * @throws IOException\n    */\n   public static MutateRequest buildMutateRequest(\n-      final byte[] regionName, final byte[] row, final byte[] family,\n-      final byte [] qualifier, final ByteArrayComparable comparator,\n-      final CompareType compareType, TimeRange timeRange, final Delete delete) throws IOException {\n-    return buildMutateRequest(regionName, row, family, qualifier, comparator, compareType, timeRange\n-      , delete, MutationType.DELETE);\n+    final byte[] regionName, final byte[] row, final byte[] family,\n+    final byte [] qualifier, final CompareOperator op, final byte[] value, final Filter filter,\n+    final TimeRange timeRange, final Delete delete) throws IOException {\n+    return buildMutateRequest(regionName, row, family, qualifier, op, value, filter, timeRange,\n+      delete, MutationType.DELETE);\n   }\n \n   public static MutateRequest buildMutateRequest(final byte[] regionName, final byte[] row,\n-    final byte[] family, final byte[] qualifier, final ByteArrayComparable comparator,\n-    final CompareType compareType, TimeRange timeRange, final Mutation mutation,\n+    final byte[] family, final byte[] qualifier, final CompareOperator op, final byte[] value,\n+    final Filter filter, final TimeRange timeRange, final Mutation mutation,\n     final MutationType type) throws IOException {\n     return MutateRequest.newBuilder()\n       .setRegion(buildRegionSpecifier(RegionSpecifierType.REGION_NAME, regionName))\n       .setMutation(ProtobufUtil.toMutation(type, mutation))\n-      .setCondition(buildCondition(row, family, qualifier, comparator, compareType, timeRange))\n+      .setCondition(buildCondition(row, family, qualifier, op, value, filter, timeRange))\n       .build();\n   }\n+\n   /**\n    * Create a protocol buffer MutateRequest for conditioned row mutations\n    *\n    * @param regionName\n    * @param row\n    * @param family\n    * @param qualifier\n-   * @param comparator\n-   * @param compareType\n+   * @param op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e71d99233b34df974109dbccd4484f141b43ce"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg5NTAxOA==", "bodyText": "Ditto.", "url": "https://github.com/apache/hbase/pull/1114#discussion_r373895018", "createdAt": "2020-02-03T01:35:19Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/shaded/protobuf/RequestConverter.java", "diffHunk": "@@ -921,22 +924,28 @@ public static RegionSpecifier buildRegionSpecifier(\n    * @param row\n    * @param family\n    * @param qualifier\n-   * @param comparator\n-   * @param compareType\n+   * @param op", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34e71d99233b34df974109dbccd4484f141b43ce"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc738e45ecf7cf1960eaf7ccbbf693c253d68bb8", "author": {"user": {"login": "brfrn169", "name": "Toshihiro Suzuki"}}, "url": "https://github.com/apache/hbase/commit/bc738e45ecf7cf1960eaf7ccbbf693c253d68bb8", "committedDate": "2020-02-18T22:53:24Z", "message": "HBASE-23146 Support CheckAndMutate with multiple conditions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b9c03f78534516a940ceef63cfb495a42a42ecd", "author": {"user": {"login": "brfrn169", "name": "Toshihiro Suzuki"}}, "url": "https://github.com/apache/hbase/commit/1b9c03f78534516a940ceef63cfb495a42a42ecd", "committedDate": "2020-02-03T07:19:22Z", "message": "Fix checkstyle errors"}, "afterCommit": {"oid": "bc738e45ecf7cf1960eaf7ccbbf693c253d68bb8", "author": {"user": {"login": "brfrn169", "name": "Toshihiro Suzuki"}}, "url": "https://github.com/apache/hbase/commit/bc738e45ecf7cf1960eaf7ccbbf693c253d68bb8", "committedDate": "2020-02-18T22:53:24Z", "message": "HBASE-23146 Support CheckAndMutate with multiple conditions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "927d5e093c33d06ec3b640e40519717725d81e87", "author": {"user": {"login": "brfrn169", "name": "Toshihiro Suzuki"}}, "url": "https://github.com/apache/hbase/commit/927d5e093c33d06ec3b640e40519717725d81e87", "committedDate": "2020-02-19T05:40:46Z", "message": "Fix the checkstyle error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzOTYwODQx", "url": "https://github.com/apache/hbase/pull/1114#pullrequestreview-363960841", "createdAt": "2020-02-25T08:52:13Z", "commit": {"oid": "927d5e093c33d06ec3b640e40519717725d81e87"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo1MjoxM1rOFt9R1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo1MjoxM1rOFt9R1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczNDIzMQ==", "bodyText": "I think these 4 methods are also in the CheckAndMutateBuilder? Maybe we could have a CheckAndMutateBuilderBase to palce these methods. Anyway, can be a follow issue as I do not think the change will break compatibility.", "url": "https://github.com/apache/hbase/pull/1114#discussion_r383734231", "createdAt": "2020-02-25T08:52:13Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncTable.java", "diffHunk": "@@ -289,6 +290,60 @@ default CheckAndMutateBuilder ifEquals(byte[] value) {\n     CompletableFuture<Boolean> thenMutate(RowMutations mutation);\n   }\n \n+  /**\n+   * Atomically checks if a row matches the specified filter. If it does, it adds the\n+   * Put/Delete/RowMutations.\n+   * <p>\n+   * Use the returned {@link CheckAndMutateWithFilterBuilder} to construct your request and then\n+   * execute it. This is a fluent style API, the code is like:\n+   *\n+   * <pre>\n+   * <code>\n+   * table.checkAndMutate(row, filter).thenPut(put)\n+   *     .thenAccept(succ -> {\n+   *       if (succ) {\n+   *         System.out.println(\"Check and put succeeded\");\n+   *       } else {\n+   *         System.out.println(\"Check and put failed\");\n+   *       }\n+   *     });\n+   * </code>\n+   * </pre>\n+   */\n+  CheckAndMutateWithFilterBuilder checkAndMutate(byte[] row, Filter filter);\n+\n+  /**\n+   * A helper class for sending checkAndMutate request with a filter.\n+   */\n+  interface CheckAndMutateWithFilterBuilder {\n+\n+    /**\n+     * @param timeRange time range to check.\n+     */\n+    CheckAndMutateWithFilterBuilder timeRange(TimeRange timeRange);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "927d5e093c33d06ec3b640e40519717725d81e87"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3073, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}