{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyOTM1NjQ2", "number": 2197, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo1ODozMlrOEVJdGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo1ODozMlrOEVJdGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjEwNDU5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReaderThread.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxOTo1ODozMlrOG7vaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNjo1MjozNlrOG8SRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjAzNA==", "bodyText": "This is just a safeguard to prevent accumulation of batches right? No other implications of the patch that I can think of.", "url": "https://github.com/apache/hbase/pull/2197#discussion_r465296034", "createdAt": "2020-08-04T19:58:32Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReaderThread.java", "diffHunk": "@@ -132,6 +135,10 @@ public void run() {\n       try (WALEntryStream entryStream =\n           new WALEntryStream(logQueue, fs, conf, lastReadPosition, metrics)) {\n         while (isReaderRunning()) { // loop here to keep reusing stream while we can\n+          if (!source.isPeerEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "407688c26c3826d9c93895fba30e5ca1a6a189b8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTYwMjMxNQ==", "bodyText": "Yeah and the accumulation of batches can lead to major problems, because it's been accounted on overall buffer usage by ReplicationSourceManager. If buffer usage reaches the quota limits, replication becomes stuck. And since we check the buffer usage at ReplicationSourceManager, that means a single buffer for all peers. If one peer is disabled, while other source peers were supposed to continue to get replicated edits, those source would also be stuck because of this, until an RS restart.", "url": "https://github.com/apache/hbase/pull/2197#discussion_r465602315", "createdAt": "2020-08-05T09:40:00Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReaderThread.java", "diffHunk": "@@ -132,6 +135,10 @@ public void run() {\n       try (WALEntryStream entryStream =\n           new WALEntryStream(logQueue, fs, conf, lastReadPosition, metrics)) {\n         while (isReaderRunning()) { // loop here to keep reusing stream while we can\n+          if (!source.isPeerEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjAzNA=="}, "originalCommit": {"oid": "407688c26c3826d9c93895fba30e5ca1a6a189b8"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg2NzE2NA==", "bodyText": "Makes sense. I've been following the jira updates on the issue that Josh created.", "url": "https://github.com/apache/hbase/pull/2197#discussion_r465867164", "createdAt": "2020-08-05T16:52:36Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReaderThread.java", "diffHunk": "@@ -132,6 +135,10 @@ public void run() {\n       try (WALEntryStream entryStream =\n           new WALEntryStream(logQueue, fs, conf, lastReadPosition, metrics)) {\n         while (isReaderRunning()) { // loop here to keep reusing stream while we can\n+          if (!source.isPeerEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI5NjAzNA=="}, "originalCommit": {"oid": "407688c26c3826d9c93895fba30e5ca1a6a189b8"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2744, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}