{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4OTI0MDI2", "number": 1292, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzowNDowMFrODreXGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyNzoyNlrODwf05g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTEyNzk1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzowNDowMFrOF71yqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMTozNDo1MlrOF9Q6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MTYyNQ==", "bodyText": "Avoid using e.printStackTrace directly?", "url": "https://github.com/apache/hbase/pull/1292#discussion_r398291625", "createdAt": "2020-03-26T03:04:00Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -123,6 +127,31 @@\n @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.TOOLS)\n public class CanaryTool implements Tool, Canary {\n \n+\n+  private void putUpWebUI() throws IOException {\n+    if (zookeeperMode) {\n+      LOG.info(\"WebUI is not supported in Zookeeper mode\");\n+    } else if (regionServerMode) {\n+      LOG.info(\"WebUI is not supported in RegionServer mode\");\n+    } else {\n+      Configuration conf = new Configuration();\n+      int port = conf.getInt(HConstants.HBASE_CANARY_INFO_PORT, DEFAULT_CANARY_INFOPORT);\n+      // -1 is for disabling info server\n+      if (port < 0) return;\n+      String addr = conf.get(HBASE_CANARY_INFO_BINDADDRESS, \"0.0.0.0\");\n+      try {\n+        InfoServer infoServer = new InfoServer(\"canary\", addr, port, false, conf);\n+        infoServer.addUnprivilegedServlet(\"canary\", \"/canary-status\", CanaryStatusServlet.class);\n+        infoServer.setAttribute(\"sink\", this.sink);\n+        infoServer.start();\n+        LOG.info(\"Bind Canary http info server to port: \" + port);\n+      } catch (BindException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NDYwNA==", "bodyText": "Avoid using e.printStackTrace directly?\n\nyes, It's a mistake", "url": "https://github.com/apache/hbase/pull/1292#discussion_r399784604", "createdAt": "2020-03-29T11:34:52Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -123,6 +127,31 @@\n @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.TOOLS)\n public class CanaryTool implements Tool, Canary {\n \n+\n+  private void putUpWebUI() throws IOException {\n+    if (zookeeperMode) {\n+      LOG.info(\"WebUI is not supported in Zookeeper mode\");\n+    } else if (regionServerMode) {\n+      LOG.info(\"WebUI is not supported in RegionServer mode\");\n+    } else {\n+      Configuration conf = new Configuration();\n+      int port = conf.getInt(HConstants.HBASE_CANARY_INFO_PORT, DEFAULT_CANARY_INFOPORT);\n+      // -1 is for disabling info server\n+      if (port < 0) return;\n+      String addr = conf.get(HBASE_CANARY_INFO_BINDADDRESS, \"0.0.0.0\");\n+      try {\n+        InfoServer infoServer = new InfoServer(\"canary\", addr, port, false, conf);\n+        infoServer.addUnprivilegedServlet(\"canary\", \"/canary-status\", CanaryStatusServlet.class);\n+        infoServer.setAttribute(\"sink\", this.sink);\n+        infoServer.start();\n+        LOG.info(\"Bind Canary http info server to port: \" + port);\n+      } catch (BindException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MTYyNQ=="}, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTEyOTUxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzowNTowNFrOF71zkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzozNDoxNlrOGDY8Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MTg1OA==", "bodyText": "Declare as ConcurrentMap?", "url": "https://github.com/apache/hbase/pull/1292#discussion_r398291858", "createdAt": "2020-03-26T03:05:04Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -274,16 +303,50 @@ public void publishReadTiming(String znode, String server, long msTime) {\n     private Map<String, LongAdder> perTableReadLatency = new HashMap<>();\n     private LongAdder writeLatency = new LongAdder();\n     private final Map<String, List<RegionTaskResult>> regionMap = new ConcurrentHashMap<>();\n+    private Map<ServerName, LongAdder> perServerFailuresCount = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NDc2NA==", "bodyText": "Declare as ConcurrentMap?\n\nI do this for the following reasons\uff1a\n\nAt the beginning of the sniffing, we will clear the Map\nOnly Failures Server or Failures table will put an element into the map\nThe sniffing process is concurrent with multiple threads\n\nI do n\u2019t know if I \u2019m doing it right. If not, any suggestions?", "url": "https://github.com/apache/hbase/pull/1292#discussion_r399784764", "createdAt": "2020-03-29T11:36:28Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -274,16 +303,50 @@ public void publishReadTiming(String znode, String server, long msTime) {\n     private Map<String, LongAdder> perTableReadLatency = new HashMap<>();\n     private LongAdder writeLatency = new LongAdder();\n     private final Map<String, List<RegionTaskResult>> regionMap = new ConcurrentHashMap<>();\n+    private Map<ServerName, LongAdder> perServerFailuresCount = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MTg1OA=="}, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg5Mjc3Nw==", "bodyText": "I mean change Map<ServerName, LongAddr> to ConcurrentMap<ServerName, LongAddr>, and also for the above regionMap. Not a question why you use ConcurrentHashMap...", "url": "https://github.com/apache/hbase/pull/1292#discussion_r405892777", "createdAt": "2020-04-09T00:39:04Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -274,16 +303,50 @@ public void publishReadTiming(String znode, String server, long msTime) {\n     private Map<String, LongAdder> perTableReadLatency = new HashMap<>();\n     private LongAdder writeLatency = new LongAdder();\n     private final Map<String, List<RegionTaskResult>> regionMap = new ConcurrentHashMap<>();\n+    private Map<ServerName, LongAdder> perServerFailuresCount = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MTg1OA=="}, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIwNzU3MQ==", "bodyText": "I mean change Map<ServerName, LongAddr> to ConcurrentMap<ServerName, LongAddr>, and also for the above regionMap. Not a question why you use ConcurrentHashMap...\n\nOk. It's done", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406207571", "createdAt": "2020-04-09T13:34:16Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -274,16 +303,50 @@ public void publishReadTiming(String znode, String server, long msTime) {\n     private Map<String, LongAdder> perTableReadLatency = new HashMap<>();\n     private LongAdder writeLatency = new LongAdder();\n     private final Map<String, List<RegionTaskResult>> regionMap = new ConcurrentHashMap<>();\n+    private Map<ServerName, LongAdder> perServerFailuresCount = new ConcurrentHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MTg1OA=="}, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTEzMjMyOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwMzowNzowNlrOF711UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxMTozNDoyNFrOF9Q6aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MjMwNA==", "bodyText": "Is it possible to not add these configurations in HConstants? Just put them in the CanaryTool class?", "url": "https://github.com/apache/hbase/pull/1292#discussion_r398292304", "createdAt": "2020-03-26T03:07:06Z", "author": {"login": "Apache9"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1464,6 +1464,12 @@\n \n   public static final String HBASE_CANARY_READ_RAW_SCAN_KEY = \"hbase.canary.read.raw.enabled\";\n \n+  public static final String HBASE_CANARY_INFO_PORT = \"hbase.canary.info.port\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NDU1NQ==", "bodyText": "Is it possible to not add these configurations in HConstants? Just put them in the CanaryTool class?\n\nok, I will modify the code here", "url": "https://github.com/apache/hbase/pull/1292#discussion_r399784555", "createdAt": "2020-03-29T11:34:24Z", "author": {"login": "GeorryHuang"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1464,6 +1464,12 @@\n \n   public static final String HBASE_CANARY_READ_RAW_SCAN_KEY = \"hbase.canary.read.raw.enabled\";\n \n+  public static final String HBASE_CANARY_INFO_PORT = \"hbase.canary.info.port\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODI5MjMwNA=="}, "originalCommit": {"oid": "2e1cf6a2385b6d39b243aee97764d9eae446eea6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTc4Mzk4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyMzo1OFrOGDiNSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNzoxNTowNFrOGDzDSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1OTM3MQ==", "bodyText": "nit: could skip these warnings (and the whole function body) when HBASE_CANARY_INFO_PORT == -1", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406359371", "createdAt": "2020-04-09T17:23:58Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -122,6 +125,35 @@\n  */\n @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.TOOLS)\n public class CanaryTool implements Tool, Canary {\n+  public static final String HBASE_CANARY_INFO_PORT = \"hbase.canary.info.port\";\n+\n+  public static final int DEFAULT_CANARY_INFOPORT = 16050;\n+\n+  public static final String HBASE_CANARY_INFO_BINDADDRESS = \"hbase.canary.info.bindAddress\";\n+\n+\n+  private void putUpWebUI() throws IOException {\n+    if (zookeeperMode) {\n+      LOG.info(\"WebUI is not supported in Zookeeper mode\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYzNTMzOA==", "bodyText": "nit: could skip these warnings (and the whole function body) when HBASE_CANARY_INFO_PORT == -1\n\nwill deal with it later", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406635338", "createdAt": "2020-04-10T07:15:04Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -122,6 +125,35 @@\n  */\n @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.TOOLS)\n public class CanaryTool implements Tool, Canary {\n+  public static final String HBASE_CANARY_INFO_PORT = \"hbase.canary.info.port\";\n+\n+  public static final int DEFAULT_CANARY_INFOPORT = 16050;\n+\n+  public static final String HBASE_CANARY_INFO_BINDADDRESS = \"hbase.canary.info.bindAddress\";\n+\n+\n+  private void putUpWebUI() throws IOException {\n+    if (zookeeperMode) {\n+      LOG.info(\"WebUI is not supported in Zookeeper mode\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1OTM3MQ=="}, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTc4OTQ0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryStatusServlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyNToyMlrOGDiQpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1MDoyM1rOGD7BqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MDIzMQ==", "bodyText": "What happens when sink == null when running without assertions? A nasty NPE? Would be better to handle null properly.", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406360231", "createdAt": "2020-04-09T17:25:22Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryStatusServlet.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.tool;\n+\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.LongAdder;\n+\n+@InterfaceAudience.Private\n+public class CanaryStatusServlet extends HttpServlet {\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+    throws ServletException, IOException {\n+    CanaryTool.RegionStdOutSink sink =\n+      (CanaryTool.RegionStdOutSink) getServletContext().getAttribute(\n+        \"sink\");\n+    assert sink != null : \"No tool in context!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2NTk5Mg==", "bodyText": "What happens when sink == null when running without assertions? A nasty NPE? Would be better to handle null properly.\n\nI changed it to throw a ServletException instead if sink == null.", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406765992", "createdAt": "2020-04-10T13:50:23Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryStatusServlet.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/**\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.tool;\n+\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.LongAdder;\n+\n+@InterfaceAudience.Private\n+public class CanaryStatusServlet extends HttpServlet {\n+  @Override\n+  protected void doGet(HttpServletRequest req, HttpServletResponse resp)\n+    throws ServletException, IOException {\n+    CanaryTool.RegionStdOutSink sink =\n+      (CanaryTool.RegionStdOutSink) getServletContext().getAttribute(\n+        \"sink\");\n+    assert sink != null : \"No tool in context!\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MDIzMQ=="}, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTc5MjM5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyNjowOVrOGDiSeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMzo1MDozOFrOGD7CDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MDY5Nw==", "bodyText": "Might as well print out the full socket address (bind address:port)", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406360697", "createdAt": "2020-04-09T17:26:09Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -122,6 +125,35 @@\n  */\n @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.TOOLS)\n public class CanaryTool implements Tool, Canary {\n+  public static final String HBASE_CANARY_INFO_PORT = \"hbase.canary.info.port\";\n+\n+  public static final int DEFAULT_CANARY_INFOPORT = 16050;\n+\n+  public static final String HBASE_CANARY_INFO_BINDADDRESS = \"hbase.canary.info.bindAddress\";\n+\n+\n+  private void putUpWebUI() throws IOException {\n+    if (zookeeperMode) {\n+      LOG.info(\"WebUI is not supported in Zookeeper mode\");\n+    } else if (regionServerMode) {\n+      LOG.info(\"WebUI is not supported in RegionServer mode\");\n+    } else {\n+      Configuration conf = new Configuration();\n+      int port = conf.getInt(HBASE_CANARY_INFO_PORT, DEFAULT_CANARY_INFOPORT);\n+      // -1 is for disabling info server\n+      if (port < 0) return;\n+      String addr = conf.get(HBASE_CANARY_INFO_BINDADDRESS, \"0.0.0.0\");\n+      try {\n+        InfoServer infoServer = new InfoServer(\"canary\", addr, port, false, conf);\n+        infoServer.addUnprivilegedServlet(\"canary\", \"/canary-status\", CanaryStatusServlet.class);\n+        infoServer.setAttribute(\"sink\", this.sink);\n+        infoServer.start();\n+        LOG.info(\"Bind Canary http info server to port: \" + port);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2NjA5NA==", "bodyText": "Might as well print out the full socket address (bind address:port)\n\nGood iead!", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406766094", "createdAt": "2020-04-10T13:50:38Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -122,6 +125,35 @@\n  */\n @InterfaceAudience.LimitedPrivate(HBaseInterfaceAudience.TOOLS)\n public class CanaryTool implements Tool, Canary {\n+  public static final String HBASE_CANARY_INFO_PORT = \"hbase.canary.info.port\";\n+\n+  public static final int DEFAULT_CANARY_INFOPORT = 16050;\n+\n+  public static final String HBASE_CANARY_INFO_BINDADDRESS = \"hbase.canary.info.bindAddress\";\n+\n+\n+  private void putUpWebUI() throws IOException {\n+    if (zookeeperMode) {\n+      LOG.info(\"WebUI is not supported in Zookeeper mode\");\n+    } else if (regionServerMode) {\n+      LOG.info(\"WebUI is not supported in RegionServer mode\");\n+    } else {\n+      Configuration conf = new Configuration();\n+      int port = conf.getInt(HBASE_CANARY_INFO_PORT, DEFAULT_CANARY_INFOPORT);\n+      // -1 is for disabling info server\n+      if (port < 0) return;\n+      String addr = conf.get(HBASE_CANARY_INFO_BINDADDRESS, \"0.0.0.0\");\n+      try {\n+        InfoServer infoServer = new InfoServer(\"canary\", addr, port, false, conf);\n+        infoServer.addUnprivilegedServlet(\"canary\", \"/canary-status\", CanaryStatusServlet.class);\n+        infoServer.setAttribute(\"sink\", this.sink);\n+        infoServer.start();\n+        LOG.info(\"Bind Canary http info server to port: \" + port);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MDY5Nw=="}, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTc5Njg2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryStatusServlet.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoyNzoyNlrOGDiVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDowODowOFrOGEnmrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTQyMg==", "bodyText": "No assertions at all? Is there nothing to verify within the rendered template output?", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406361422", "createdAt": "2020-04-09T17:27:26Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryStatusServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.tool;\n+\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.testclassification.SmallTests;\n+import org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+@Category({ SmallTests.class })\n+public class TestCanaryStatusServlet {\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestCanaryStatusServlet.class);\n+\n+  @Test\n+  public void testFailures() throws IOException {\n+    CanaryTool.RegionStdOutSink regionStdOutSink = new CanaryTool.RegionStdOutSink();\n+\n+    ServerName serverName1 = ServerName.valueOf(\"staging-st04.server:22600\",\n+      1584180761635L);\n+    TableName fakeTableName1 = TableName.valueOf(\"fakeTableName1\");\n+    RegionInfo regionInfo1 = RegionInfoBuilder.newBuilder(fakeTableName1).build();\n+\n+    ServerName serverName2 = ServerName.valueOf(\"staging-st05.server:22600\",\n+      1584180761636L);\n+    TableName fakeTableName2 = TableName.valueOf(\"fakeTableName2\");\n+    RegionInfo regionInfo2 = RegionInfoBuilder.newBuilder(fakeTableName2).build();\n+\n+    regionStdOutSink.publishReadFailure(serverName1, regionInfo1, new IOException());\n+    regionStdOutSink.publishWriteFailure(serverName2, regionInfo2, new IOException());\n+    CanaryStatusTmpl tmpl = new CanaryStatusTmpl();\n+    tmpl.render(new StringWriter(), regionStdOutSink);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc2NjIzMw==", "bodyText": "No assertions at all? Is there nothing to verify within the rendered template output?\n\nI just refer to the code of TestMasterStatusServlet. TestMasterStatusServlet also has no assertions. I am not sure how to test these html pages, any good suggestions? I can modify it as suggested", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406766233", "createdAt": "2020-04-10T13:50:59Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryStatusServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.tool;\n+\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.testclassification.SmallTests;\n+import org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+@Category({ SmallTests.class })\n+public class TestCanaryStatusServlet {\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestCanaryStatusServlet.class);\n+\n+  @Test\n+  public void testFailures() throws IOException {\n+    CanaryTool.RegionStdOutSink regionStdOutSink = new CanaryTool.RegionStdOutSink();\n+\n+    ServerName serverName1 = ServerName.valueOf(\"staging-st04.server:22600\",\n+      1584180761635L);\n+    TableName fakeTableName1 = TableName.valueOf(\"fakeTableName1\");\n+    RegionInfo regionInfo1 = RegionInfoBuilder.newBuilder(fakeTableName1).build();\n+\n+    ServerName serverName2 = ServerName.valueOf(\"staging-st05.server:22600\",\n+      1584180761636L);\n+    TableName fakeTableName2 = TableName.valueOf(\"fakeTableName2\");\n+    RegionInfo regionInfo2 = RegionInfoBuilder.newBuilder(fakeTableName2).build();\n+\n+    regionStdOutSink.publishReadFailure(serverName1, regionInfo1, new IOException());\n+    regionStdOutSink.publishWriteFailure(serverName2, regionInfo2, new IOException());\n+    CanaryStatusTmpl tmpl = new CanaryStatusTmpl();\n+    tmpl.render(new StringWriter(), regionStdOutSink);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTQyMg=="}, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNDY2NA==", "bodyText": "This is just smoke-testing that the UI works and puts up something close to expected, right? How about a simple string match looking for the values of serverName1,2 and regionInfo1,2 in the rendered template output?", "url": "https://github.com/apache/hbase/pull/1292#discussion_r406904664", "createdAt": "2020-04-10T19:20:23Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryStatusServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.tool;\n+\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.testclassification.SmallTests;\n+import org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+@Category({ SmallTests.class })\n+public class TestCanaryStatusServlet {\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestCanaryStatusServlet.class);\n+\n+  @Test\n+  public void testFailures() throws IOException {\n+    CanaryTool.RegionStdOutSink regionStdOutSink = new CanaryTool.RegionStdOutSink();\n+\n+    ServerName serverName1 = ServerName.valueOf(\"staging-st04.server:22600\",\n+      1584180761635L);\n+    TableName fakeTableName1 = TableName.valueOf(\"fakeTableName1\");\n+    RegionInfo regionInfo1 = RegionInfoBuilder.newBuilder(fakeTableName1).build();\n+\n+    ServerName serverName2 = ServerName.valueOf(\"staging-st05.server:22600\",\n+      1584180761636L);\n+    TableName fakeTableName2 = TableName.valueOf(\"fakeTableName2\");\n+    RegionInfo regionInfo2 = RegionInfoBuilder.newBuilder(fakeTableName2).build();\n+\n+    regionStdOutSink.publishReadFailure(serverName1, regionInfo1, new IOException());\n+    regionStdOutSink.publishWriteFailure(serverName2, regionInfo2, new IOException());\n+    CanaryStatusTmpl tmpl = new CanaryStatusTmpl();\n+    tmpl.render(new StringWriter(), regionStdOutSink);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTQyMg=="}, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ5NjM2Nw==", "bodyText": "This is just smoke-testing that the UI works and puts up something close to expected, right? How about a simple string match looking for the values of serverName1,2 and regionInfo1,2 in the rendered template output?\n\nAssertions have been added to the new commit", "url": "https://github.com/apache/hbase/pull/1292#discussion_r407496367", "createdAt": "2020-04-13T14:08:08Z", "author": {"login": "GeorryHuang"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryStatusServlet.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.tool;\n+\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.testclassification.SmallTests;\n+import org.apache.hadoop.hbase.tmpl.tool.CanaryStatusTmpl;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+\n+@Category({ SmallTests.class })\n+public class TestCanaryStatusServlet {\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestCanaryStatusServlet.class);\n+\n+  @Test\n+  public void testFailures() throws IOException {\n+    CanaryTool.RegionStdOutSink regionStdOutSink = new CanaryTool.RegionStdOutSink();\n+\n+    ServerName serverName1 = ServerName.valueOf(\"staging-st04.server:22600\",\n+      1584180761635L);\n+    TableName fakeTableName1 = TableName.valueOf(\"fakeTableName1\");\n+    RegionInfo regionInfo1 = RegionInfoBuilder.newBuilder(fakeTableName1).build();\n+\n+    ServerName serverName2 = ServerName.valueOf(\"staging-st05.server:22600\",\n+      1584180761636L);\n+    TableName fakeTableName2 = TableName.valueOf(\"fakeTableName2\");\n+    RegionInfo regionInfo2 = RegionInfoBuilder.newBuilder(fakeTableName2).build();\n+\n+    regionStdOutSink.publishReadFailure(serverName1, regionInfo1, new IOException());\n+    regionStdOutSink.publishWriteFailure(serverName2, regionInfo2, new IOException());\n+    CanaryStatusTmpl tmpl = new CanaryStatusTmpl();\n+    tmpl.render(new StringWriter(), regionStdOutSink);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2MTQyMg=="}, "originalCommit": {"oid": "717fb3f54106cabd1d2ef7d5374aca1d10e65bec"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2018, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}