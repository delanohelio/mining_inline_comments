{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzAyMjY3", "number": 2000, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozNToyOVrOENQjMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0OTowNFrOENQzvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzM4MDk3OnYy", "diffSide": "RIGHT", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozNToyOVrOGv1pCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjozNToyOVrOGv1pCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgxNTExNQ==", "bodyText": "nit: redundant", "url": "https://github.com/apache/hbase/pull/2000#discussion_r452815115", "createdAt": "2020-07-10T12:35:29Z", "author": {"login": "virajjasani"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java", "diffHunk": "@@ -38,14 +42,16 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(PolicyBasedChaosMonkey.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0883e6d239eb7bfda6fc29f159a20c43bfcd3154"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMzQyMzM0OnYy", "diffSide": "RIGHT", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMjo0OTowNFrOGv2C1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyMToxMFrOG1CKVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTcxNg==", "bodyText": "Would you prefer using our internal\nThreads.newDaemonThreadFactory(String prefix, UncaughtExceptionHandler handler) ?", "url": "https://github.com/apache/hbase/pull/2000#discussion_r452821716", "createdAt": "2020-07-10T12:49:04Z", "author": {"login": "virajjasani"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java", "diffHunk": "@@ -60,19 +66,30 @@ public PolicyBasedChaosMonkey(IntegrationTestingUtility util, Collection<Policy>\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Policy... policies) {\n-    this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies;\n+    Collection<Policy> policies) {\n+    this(monkeyProps, util, policies.toArray(new Policy[0]));\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Collection<Policy> policies) {\n+    Policy... policies) {\n     this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies.toArray(new Policy[policies.size()]);\n+    this.util = Objects.requireNonNull(util);\n+    this.policies = Objects.requireNonNull(policies);\n+    if (policies.length == 0) {\n+      throw new IllegalArgumentException(\"policies may not be empty\");\n+    }\n+    this.monkeyThreadPool = buildMonkeyThreadPool(policies.length);\n   }\n \n+  private static ExecutorService buildMonkeyThreadPool(final int size) {\n+    return Executors.newFixedThreadPool(size, new ThreadFactoryBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0883e6d239eb7bfda6fc29f159a20c43bfcd3154"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjkzNjQ3NQ==", "bodyText": "This one actually sets daemon to true, we don't want that so maybe we can have separate method for setting daemon to false.\nHowever, this work could be separate Jira and if we have majority, maybe we can make all Executor pool in HBase use our internal ThreadFactory and not from guava.", "url": "https://github.com/apache/hbase/pull/2000#discussion_r452936475", "createdAt": "2020-07-10T16:06:40Z", "author": {"login": "virajjasani"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java", "diffHunk": "@@ -60,19 +66,30 @@ public PolicyBasedChaosMonkey(IntegrationTestingUtility util, Collection<Policy>\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Policy... policies) {\n-    this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies;\n+    Collection<Policy> policies) {\n+    this(monkeyProps, util, policies.toArray(new Policy[0]));\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Collection<Policy> policies) {\n+    Policy... policies) {\n     this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies.toArray(new Policy[policies.size()]);\n+    this.util = Objects.requireNonNull(util);\n+    this.policies = Objects.requireNonNull(policies);\n+    if (policies.length == 0) {\n+      throw new IllegalArgumentException(\"policies may not be empty\");\n+    }\n+    this.monkeyThreadPool = buildMonkeyThreadPool(policies.length);\n   }\n \n+  private static ExecutorService buildMonkeyThreadPool(final int size) {\n+    return Executors.newFixedThreadPool(size, new ThreadFactoryBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTcxNg=="}, "originalCommit": {"oid": "0883e6d239eb7bfda6fc29f159a20c43bfcd3154"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc1NTYzOQ==", "bodyText": "It would be nice if we could either get away from using Guava helpers or get away from providing our own. Having both in the code keeps us guessing :)", "url": "https://github.com/apache/hbase/pull/2000#discussion_r457755639", "createdAt": "2020-07-20T23:54:06Z", "author": {"login": "ndimiduk"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java", "diffHunk": "@@ -60,19 +66,30 @@ public PolicyBasedChaosMonkey(IntegrationTestingUtility util, Collection<Policy>\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Policy... policies) {\n-    this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies;\n+    Collection<Policy> policies) {\n+    this(monkeyProps, util, policies.toArray(new Policy[0]));\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Collection<Policy> policies) {\n+    Policy... policies) {\n     this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies.toArray(new Policy[policies.size()]);\n+    this.util = Objects.requireNonNull(util);\n+    this.policies = Objects.requireNonNull(policies);\n+    if (policies.length == 0) {\n+      throw new IllegalArgumentException(\"policies may not be empty\");\n+    }\n+    this.monkeyThreadPool = buildMonkeyThreadPool(policies.length);\n   }\n \n+  private static ExecutorService buildMonkeyThreadPool(final int size) {\n+    return Executors.newFixedThreadPool(size, new ThreadFactoryBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTcxNg=="}, "originalCommit": {"oid": "0883e6d239eb7bfda6fc29f159a20c43bfcd3154"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2MzEyNA==", "bodyText": "That's true, we should use only one of them, filed: https://issues.apache.org/jira/browse/HBASE-24750", "url": "https://github.com/apache/hbase/pull/2000#discussion_r458263124", "createdAt": "2020-07-21T17:21:10Z", "author": {"login": "virajjasani"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/monkies/PolicyBasedChaosMonkey.java", "diffHunk": "@@ -60,19 +66,30 @@ public PolicyBasedChaosMonkey(IntegrationTestingUtility util, Collection<Policy>\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Policy... policies) {\n-    this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies;\n+    Collection<Policy> policies) {\n+    this(monkeyProps, util, policies.toArray(new Policy[0]));\n   }\n \n   public PolicyBasedChaosMonkey(Properties monkeyProps, IntegrationTestingUtility util,\n-    Collection<Policy> policies) {\n+    Policy... policies) {\n     this.monkeyProps = monkeyProps;\n-    this.util = util;\n-    this.policies = policies.toArray(new Policy[policies.size()]);\n+    this.util = Objects.requireNonNull(util);\n+    this.policies = Objects.requireNonNull(policies);\n+    if (policies.length == 0) {\n+      throw new IllegalArgumentException(\"policies may not be empty\");\n+    }\n+    this.monkeyThreadPool = buildMonkeyThreadPool(policies.length);\n   }\n \n+  private static ExecutorService buildMonkeyThreadPool(final int size) {\n+    return Executors.newFixedThreadPool(size, new ThreadFactoryBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjgyMTcxNg=="}, "originalCommit": {"oid": "0883e6d239eb7bfda6fc29f159a20c43bfcd3154"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2885, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}