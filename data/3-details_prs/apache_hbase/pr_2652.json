{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjYxMTc3", "number": 2652, "title": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConne\u2026", "bodyText": "\u2026ctionRegistry\nUse loop index rather than replicaid offsetting into locations array.", "createdAt": "2020-11-13T01:31:00Z", "url": "https://github.com/apache/hbase/pull/2652", "merged": true, "mergeCommit": {"oid": "6210dafc47a04306c1d90dd3e7395015f442a81e"}, "closed": true, "closedAt": "2020-11-16T16:58:06Z", "author": {"login": "saintstack"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb9aCDAFqTUyOTY1MDcwOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddH6BagBqjQwMDEzMTg2OTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjUwNzA5", "url": "https://github.com/apache/hbase/pull/2652#pullrequestreview-529650709", "createdAt": "2020-11-13T02:05:43Z", "commit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjowNTo0M1rOHyWrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjowNTo0M1rOHyWrEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MjMyMA==", "bodyText": "I do not think use index instead of replicaId is the correct way to fix the problem here.\nYou should use replicaId, and the problem here is the size of the array is incorrect. You should find out the maximum replicaId and create the locs array with maxReplicaId + 1 as its size.", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522562320", "createdAt": "2020-11-13T02:05:43Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -133,13 +133,17 @@ private static void tryComplete(MutableInt remaining, HRegionLocation[] locs,\n       ServerName.valueOf(snProto.getHostName(), snProto.getPort(), snProto.getStartCode()));\n   }\n \n-  private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n+  @VisibleForTesting\n+  void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       List<String> metaReplicaZNodes) {\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n     HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n     MutableInt remaining = new MutableInt(locs.length);\n+    // Do NOT use replicaid as index into locations array. The location set may not be complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/5613f4b5c7c2fa4cf3bcd31faf064f71854b827c", "committedDate": "2020-11-13T01:28:37Z", "message": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConnectionRegistry\n\nUse loop index rather than replicaid offsetting into locations array."}, "afterCommit": {"oid": "cfa0594066b741ddbde13abb393a8a5983540099", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/cfa0594066b741ddbde13abb393a8a5983540099", "committedDate": "2020-11-13T07:03:56Z", "message": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConnectionRegistry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODI4NzE5", "url": "https://github.com/apache/hbase/pull/2652#pullrequestreview-529828719", "createdAt": "2020-11-13T07:35:13Z", "commit": {"oid": "cfa0594066b741ddbde13abb393a8a5983540099"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzozNToxM1rOHyhJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzozNToxM1rOHyhJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjczMzgyNA==", "bodyText": "Better to not expose this method here but write fake znode on zk to simulate discontinuous meta replicas? I do not think it is very difficult to do...", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522733824", "createdAt": "2020-11-13T07:35:13Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "diffHunk": "@@ -125,4 +127,20 @@ public void testNoMetaAvailable() throws InterruptedException {\n       }\n     }\n   }\n+\n+  /**\n+   * Pass discontinuous list of znodes to registry getMetaRegionLocation. Should work fine.\n+   * It used to throw ArrayOutOfBoundsException. See HBASE-25280.\n+   */\n+  @Test\n+  public void testDiscontinuousLocations() throws ExecutionException, InterruptedException {\n+    Configuration conf = new Configuration(TEST_UTIL.getConfiguration());\n+    try (ZKConnectionRegistry registry = new ZKConnectionRegistry(conf)) {\n+      CompletableFuture<RegionLocations> cf = new CompletableFuture<>();\n+      List<String> znodes = Arrays.asList(\n+        new String[] { ZNodePaths.META_ZNODE_PREFIX, ZNodePaths.META_ZNODE_PREFIX + \"_003\" });\n+      registry.getMetaRegionLocation(cf, znodes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa0594066b741ddbde13abb393a8a5983540099"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cfa0594066b741ddbde13abb393a8a5983540099", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/cfa0594066b741ddbde13abb393a8a5983540099", "committedDate": "2020-11-13T07:03:56Z", "message": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConnectionRegistry"}, "afterCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/adbf81c010a5fbfebfcc4aae68e35dbd12da1601", "committedDate": "2020-11-13T19:28:41Z", "message": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConnectionRegistry\n\nSigned-off-by: Duo Zhang <zhangduo@apache.org>\nSigned-off-by: Huaxiang Sun <huaxiangsun@apache.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDkzMDU3", "url": "https://github.com/apache/hbase/pull/2652#pullrequestreview-530493057", "createdAt": "2020-11-14T00:20:47Z", "commit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDoyMDo0N1rOHzDjpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDoyNDoxMlrOHzDmRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NzcwMA==", "bodyText": "This will generate a generic type warning, please use new TreeMap<>()", "url": "https://github.com/apache/hbase/pull/2652#discussion_r523297700", "createdAt": "2020-11-14T00:20:47Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -138,8 +141,15 @@ private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n-    HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n-    MutableInt remaining = new MutableInt(locs.length);\n+    // Note, the list of metaReplicaZNodes may be discontiguous regards replicaId; i.e. we may have\n+    // a znode for the default -- replicaId=0 -- and perhaps replicaId '2' but be could be missing\n+    // znode for replicaId '1'. This is a transient condition. Because of this we are careful\n+    // accumulating locations. We use a Map so retries overwrite rather than aggregate and the\n+    // Map sorts just to be kind to further processing. The Map will retain the discontinuity on\n+    // replicaIds but on completion (of the future), the Map values are passed to the\n+    // RegionLocations constructor which knows how to deal with discontinuities.\n+    final Map<Integer, HRegionLocation> locs = new TreeMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODM3NQ==", "bodyText": "I recall that you mentioned many times that the operator must be at the end of a line so I changed my formatter config to do this, so now you prefer the operator at the start of a line?\nI'm fine with both, just want to know which one do you want, or it is not important?", "url": "https://github.com/apache/hbase/pull/2652#discussion_r523298375", "createdAt": "2020-11-14T00:24:12Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "diffHunk": "@@ -101,8 +116,8 @@ public void testIndependentZKConnections() throws IOException {\n       otherConf.set(HConstants.ZOOKEEPER_QUORUM, MiniZooKeeperCluster.HOST);\n       try (ZKConnectionRegistry otherRegistry = new ZKConnectionRegistry(otherConf)) {\n         ReadOnlyZKClient zk2 = otherRegistry.getZKClient();\n-        assertNotSame(\"Using a different configuration / quorum should result in different \" +\n-          \"backing zk connection.\", zk1, zk2);\n+        assertNotSame(\"Using a different configuration / quorum should result in different \"\n+          + \"backing zk connection.\", zk1, zk2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwODk5MDQ3", "url": "https://github.com/apache/hbase/pull/2652#pullrequestreview-530899047", "createdAt": "2020-11-16T03:28:06Z", "commit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ccd537fc49946e9dc7f1253901a3935e5237074", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/4ccd537fc49946e9dc7f1253901a3935e5237074", "committedDate": "2020-11-16T16:52:57Z", "message": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConnectionRegistry\n\nSigned-off-by: Duo Zhang <zhangduo@apache.org>\nSigned-off-by: Huaxiang Sun <huaxiangsun@apache.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/adbf81c010a5fbfebfcc4aae68e35dbd12da1601", "committedDate": "2020-11-13T19:28:41Z", "message": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConnectionRegistry\n\nSigned-off-by: Duo Zhang <zhangduo@apache.org>\nSigned-off-by: Huaxiang Sun <huaxiangsun@apache.com>"}, "afterCommit": {"oid": "4ccd537fc49946e9dc7f1253901a3935e5237074", "author": {"user": {"login": "saintstack", "name": "Michael Stack"}}, "url": "https://github.com/apache/hbase/commit/4ccd537fc49946e9dc7f1253901a3935e5237074", "committedDate": "2020-11-16T16:52:57Z", "message": "HBASE-25280 [meta replicas] ArrayIndexOutOfBoundsException in ZKConnectionRegistry\n\nSigned-off-by: Duo Zhang <zhangduo@apache.org>\nSigned-off-by: Huaxiang Sun <huaxiangsun@apache.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1944, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}