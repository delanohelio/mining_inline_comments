{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTYyNDAz", "number": 1817, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxMjoyOFrOEBnySg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxNjo1NlrOEBn3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTM1ODgyOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxMjoyOFrOGdk4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxMjoyOFrOGdk4Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NjA5MA==", "bodyText": "hbase.canary.read.all.famliy => hbase.canary.read.all.column.famliy", "url": "https://github.com/apache/hbase/pull/1817#discussion_r433666090", "createdAt": "2020-06-02T07:12:28Z", "author": {"login": "infraio"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1451,6 +1451,7 @@\n \n   public static final String HBASE_CANARY_READ_RAW_SCAN_KEY = \"hbase.canary.read.raw.enabled\";\n \n+  public static final String HBASE_CANARY_READ_ALL_CF = \"hbase.canary.read.all.famliy\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bb6161956cba3e2c676040f3358086f9a10462"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTM2NDQ3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxNDoyNVrOGdk70Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxNDoyNVrOGdk70Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2NzAyNQ==", "bodyText": "Read conf every time? Can this be a global var and only read from conf once?", "url": "https://github.com/apache/hbase/pull/1817#discussion_r433667025", "createdAt": "2020-06-02T07:14:25Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/CanaryTool.java", "diffHunk": "@@ -496,18 +497,75 @@ public ZookeeperTask(Connection connection, String host, String znode, int timeo\n     @Override\n     public Void call() {\n       switch (taskType) {\n-      case READ:\n-        return read();\n-      case WRITE:\n-        return write();\n-      default:\n-        return read();\n+        case READ:\n+          return read();\n+        case WRITE:\n+          return write();\n+        default:\n+          return read();\n       }\n     }\n \n+    private Void readColumnFamily(Table table, ColumnFamilyDescriptor column) {\n+      byte[] startKey = null;\n+      Get get = null;\n+      Scan scan = null;\n+      ResultScanner rs = null;\n+      StopWatch stopWatch = new StopWatch();\n+      startKey = region.getStartKey();\n+      // Can't do a get on empty start row so do a Scan of first element if any instead.\n+      if (startKey.length > 0) {\n+        get = new Get(startKey);\n+        get.setCacheBlocks(false);\n+        get.setFilter(new FirstKeyOnlyFilter());\n+        get.addFamily(column.getName());\n+      } else {\n+        scan = new Scan();\n+        LOG.debug(\"rawScan {} for {}\", rawScanEnabled, region.getTable());\n+        scan.setRaw(rawScanEnabled);\n+        scan.setCaching(1);\n+        scan.setCacheBlocks(false);\n+        scan.setFilter(new FirstKeyOnlyFilter());\n+        scan.addFamily(column.getName());\n+        scan.setMaxResultSize(1L);\n+        scan.setOneRowLimit();\n+      }\n+      LOG.debug(\"Reading from {} {} {} {}\", region.getTable(), region.getRegionNameAsString(),\n+        column.getNameAsString(), Bytes.toStringBinary(startKey));\n+      try {\n+        stopWatch.start();\n+        if (startKey.length > 0) {\n+          table.get(get);\n+        } else {\n+          rs = table.getScanner(scan);\n+          rs.next();\n+        }\n+        stopWatch.stop();\n+        this.readWriteLatency.add(stopWatch.getTime());\n+        sink.publishReadTiming(serverName, region, column, stopWatch.getTime());\n+      } catch (Exception e) {\n+        sink.publishReadFailure(serverName, region, column, e);\n+        sink.updateReadFailures(region.getRegionNameAsString(),\n+          serverName == null ? \"NULL\" : serverName.getHostname());\n+      } finally {\n+        if (rs != null) {\n+          rs.close();\n+        }\n+      }\n+      return null;\n+    }\n+\n+    private ColumnFamilyDescriptor randomPickOneColumnFamily(ColumnFamilyDescriptor[] cfs) {\n+      int size = cfs.length;\n+      return cfs[ThreadLocalRandom.current().nextInt(size)];\n+\n+    }\n+\n     public Void read() {\n       Table table = null;\n       TableDescriptor tableDesc = null;\n+      boolean regionTaskReadAllCF =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bb6161956cba3e2c676040f3358086f9a10462"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTM3MTgyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxNjo1NlrOGdlAew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNzoxNjo1NlrOGdlAew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY2ODIxOQ==", "bodyText": "Add some comment for test? If HBASE_CANARY_READ_ALL_CF config to true, the difference is?", "url": "https://github.com/apache/hbase/pull/1817#discussion_r433668219", "createdAt": "2020-06-02T07:16:56Z", "author": {"login": "infraio"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/tool/TestCanaryTool.java", "diffHunk": "@@ -129,6 +132,56 @@ public void testBasicCanaryWorks() throws Exception {\n       isA(ColumnFamilyDescriptor.class), anyLong());\n   }\n \n+  @Test\n+  public void testCanaryRegionTaskReadAllCF() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    Table table = testingUtility.createTable(tableName,\n+      new byte[][] { Bytes.toBytes(\"f1\"), Bytes.toBytes(\"f2\") });\n+    // insert some test rows\n+    for (int i = 0; i < 1000; i++) {\n+      byte[] iBytes = Bytes.toBytes(i);\n+      Put p = new Put(iBytes);\n+      p.addColumn(Bytes.toBytes(\"f1\"), COLUMN, iBytes);\n+      p.addColumn(Bytes.toBytes(\"f2\"), COLUMN, iBytes);\n+      table.put(p);\n+    }\n+    ExecutorService executor = new ScheduledThreadPoolExecutor(1);\n+    CanaryTool.RegionStdOutSink sink = spy(new CanaryTool.RegionStdOutSink());\n+    CanaryTool canary = new CanaryTool(executor, sink);\n+    String[] args = { \"-t\", \"10000\", \"testCanaryRegionTaskReadAllCF\" };\n+    Configuration configuration = HBaseConfiguration.create(testingUtility.getConfiguration());\n+    configuration.setBoolean(HConstants.HBASE_CANARY_READ_ALL_CF, false);\n+    assertEquals(0, ToolRunner.run(configuration, canary, args));\n+\n+    assertTrue(\"canary should expect to scan at least 1 region\",\n+      sink.getTotalExpectedRegions() > 0);\n+    assertTrue(\"there should be no read failures\", sink.getReadFailureCount() == 0);\n+    assertTrue(\"there should be no write failures\", sink.getWriteFailureCount() == 0);\n+    assertTrue(\"verify read success count > 0\", sink.getReadSuccessCount() > 0);\n+    verify(sink, atLeastOnce()).publishReadTiming(isA(ServerName.class), isA(RegionInfo.class),\n+      isA(ColumnFamilyDescriptor.class), anyLong());\n+\n+    assertEquals(\"canary region success count should equal total expected regions\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6bb6161956cba3e2c676040f3358086f9a10462"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2902, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}