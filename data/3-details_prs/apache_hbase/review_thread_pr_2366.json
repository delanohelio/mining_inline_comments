{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDk0ODEy", "number": 2366, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjozNTo1MVrOEhhtJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjozNTo1MVrOEhhtJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNTkwNjk0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStateStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwNjozNTo1MVrOHO4q1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo0NDozN1rOHPDYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MDU4MQ==", "bodyText": "This comment not used anymore?", "url": "https://github.com/apache/hbase/pull/2366#discussion_r485370581", "createdAt": "2020-09-09T06:35:51Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStateStore.java", "diffHunk": "@@ -490,12 +493,56 @@ static Put addMergeRegions(Put put, Collection<RegionInfo> mergeRegions) throws\n   // ============================================================================================\n   //  Delete Region State helpers\n   // ============================================================================================\n+  /**\n+   * Deletes the specified region.\n+   */\n   public void deleteRegion(final RegionInfo regionInfo) throws IOException {\n     deleteRegions(Collections.singletonList(regionInfo));\n   }\n \n+  /**\n+   * Deletes the specified regions.\n+   */\n   public void deleteRegions(final List<RegionInfo> regions) throws IOException {\n-    MetaTableAccessor.deleteRegionInfos(master.getConnection(), regions);\n+    deleteRegions(regions, EnvironmentEdgeManager.currentTime());\n+  }\n+\n+  private void deleteRegions(List<RegionInfo> regions, long ts) throws IOException {\n+    List<Delete> deletes = new ArrayList<>(regions.size());\n+    for (RegionInfo hri : regions) {\n+      Delete e = new Delete(hri.getRegionName());\n+      e.addFamily(HConstants.CATALOG_FAMILY, ts);\n+      deletes.add(e);\n+    }\n+    try (Table table = getMetaTable()) {\n+      debugLogMutations(deletes);\n+      table.delete(deletes);\n+    }\n+    LOG.info(\"Deleted {} regions from META\", regions.size());\n+    LOG.debug(\"Deleted regions: {}\", regions);\n+  }\n+\n+  /**\n+   * Overwrites the specified regions from hbase:meta. Deletes old rows for the given regions and\n+   * adds new ones. Regions added back have state CLOSED.\n+   * @param connection connection we're using\n+   * @param regionInfos list of regions to be added to META\n+   */\n+  public void overwriteRegions(List<RegionInfo> regionInfos, int regionReplication)\n+    throws IOException {\n+    // use master time for delete marker and the Put\n+    long now = EnvironmentEdgeManager.currentTime();\n+    deleteRegions(regionInfos, now);\n+    // Why sleep? This is the easiest way to ensure that the previous deletes does not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0d2dbcc9fddb777d8db326f5c6f65367b0f8b5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU0NjEzNg==", "bodyText": "I think we'd better leave the comment here? It is the history of why the code becomes like this.", "url": "https://github.com/apache/hbase/pull/2366#discussion_r485546136", "createdAt": "2020-09-09T11:44:37Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/RegionStateStore.java", "diffHunk": "@@ -490,12 +493,56 @@ static Put addMergeRegions(Put put, Collection<RegionInfo> mergeRegions) throws\n   // ============================================================================================\n   //  Delete Region State helpers\n   // ============================================================================================\n+  /**\n+   * Deletes the specified region.\n+   */\n   public void deleteRegion(final RegionInfo regionInfo) throws IOException {\n     deleteRegions(Collections.singletonList(regionInfo));\n   }\n \n+  /**\n+   * Deletes the specified regions.\n+   */\n   public void deleteRegions(final List<RegionInfo> regions) throws IOException {\n-    MetaTableAccessor.deleteRegionInfos(master.getConnection(), regions);\n+    deleteRegions(regions, EnvironmentEdgeManager.currentTime());\n+  }\n+\n+  private void deleteRegions(List<RegionInfo> regions, long ts) throws IOException {\n+    List<Delete> deletes = new ArrayList<>(regions.size());\n+    for (RegionInfo hri : regions) {\n+      Delete e = new Delete(hri.getRegionName());\n+      e.addFamily(HConstants.CATALOG_FAMILY, ts);\n+      deletes.add(e);\n+    }\n+    try (Table table = getMetaTable()) {\n+      debugLogMutations(deletes);\n+      table.delete(deletes);\n+    }\n+    LOG.info(\"Deleted {} regions from META\", regions.size());\n+    LOG.debug(\"Deleted regions: {}\", regions);\n+  }\n+\n+  /**\n+   * Overwrites the specified regions from hbase:meta. Deletes old rows for the given regions and\n+   * adds new ones. Regions added back have state CLOSED.\n+   * @param connection connection we're using\n+   * @param regionInfos list of regions to be added to META\n+   */\n+  public void overwriteRegions(List<RegionInfo> regionInfos, int regionReplication)\n+    throws IOException {\n+    // use master time for delete marker and the Put\n+    long now = EnvironmentEdgeManager.currentTime();\n+    deleteRegions(regionInfos, now);\n+    // Why sleep? This is the easiest way to ensure that the previous deletes does not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM3MDU4MQ=="}, "originalCommit": {"oid": "1b0d2dbcc9fddb777d8db326f5c6f65367b0f8b5"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2606, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}