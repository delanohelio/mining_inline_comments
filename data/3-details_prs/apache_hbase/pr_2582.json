{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4NzM3NTky", "number": 2582, "title": "HBASE-25187 Improve SizeCachedKV variants initialization", "bodyText": "", "createdAt": "2020-10-23T05:57:22Z", "url": "https://github.com/apache/hbase/pull/2582", "merged": true, "mergeCommit": {"oid": "57d9cae48056a4530726b8a84c8640f01147881b"}, "closed": true, "closedAt": "2020-11-11T12:09:40Z", "author": {"login": "ramkrish86"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVPkuWAH2gAyNTA4NzM3NTkyOmE5NWYyMzAzMGJhZjhkM2RlZTVhMzFlMmE0ZmE3YTIxYTcwNjMzZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddcxJqAFqTUzMjU5ODE3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a95f23030baf8d3dee5a31e2a4fa7a21a70633dc", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/a95f23030baf8d3dee5a31e2a4fa7a21a70633dc", "committedDate": "2020-10-23T05:18:20Z", "message": "HBASE-25187 Improve SizeCachedKV variants initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3094a92eff82792aba7564036ee884ef3e0b1940", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/3094a92eff82792aba7564036ee884ef3e0b1940", "committedDate": "2020-10-23T05:56:01Z", "message": "HBASE-25187 Improve SizeCachedKV variants initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cdd9404806a7b1d565d94037d23fe415b0ba1c0", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/4cdd9404806a7b1d565d94037d23fe415b0ba1c0", "committedDate": "2020-10-29T11:18:01Z", "message": "The BBKeyValue also can be optimized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/e8d2002e0d78fbf8239a660624ca97cdc67fbf24", "committedDate": "2020-10-29T13:17:26Z", "message": "Change for SizeCachedKeyValue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMjAzNDMw", "url": "https://github.com/apache/hbase/pull/2582#pullrequestreview-522203430", "createdAt": "2020-11-03T05:54:43Z", "commit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNTo1NDo0M1rOHshAVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwNzo0NDozNVrOHsi70Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0MDE0OA==", "bodyText": "Just call this() the next constructor", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516440148", "createdAt": "2020-11-03T05:54:43Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/SizeCachedKeyValue.java", "diffHunk": "@@ -39,12 +39,22 @@\n   private short rowLen;\n   private int keyLen;\n \n-  public SizeCachedKeyValue(byte[] bytes, int offset, int length, long seqId) {\n+  public SizeCachedKeyValue(byte[] bytes, int offset, int length, long seqId, int keyLen) {\n     super(bytes, offset, length);\n     // We will read all these cached values at least once. Initialize now itself so that we can\n     // avoid uninitialized checks with every time call\n-    rowLen = super.getRowLength();\n-    keyLen = super.getKeyLength();\n+    this.rowLen = super.getRowLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0MDg3Mg==", "bodyText": "nit: many empty rows.", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516440872", "createdAt": "2020-11-03T05:57:56Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/SizeCachedNoTagsByteBufferKeyValue.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * This Cell is an implementation of {@link ByteBufferExtendedCell} where the data resides in\n+ * off heap/ on heap ByteBuffer\n+ */\n+@InterfaceAudience.Private\n+public class SizeCachedNoTagsByteBufferKeyValue extends NoTagsByteBufferKeyValue {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0MTA1NQ==", "bodyText": "Call next constructor this()", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516441055", "createdAt": "2020-11-03T05:58:46Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/SizeCachedNoTagsByteBufferKeyValue.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * This Cell is an implementation of {@link ByteBufferExtendedCell} where the data resides in\n+ * off heap/ on heap ByteBuffer\n+ */\n+@InterfaceAudience.Private\n+public class SizeCachedNoTagsByteBufferKeyValue extends NoTagsByteBufferKeyValue {\n+\n+\n+  private short rowLen;\n+  private int keyLen;\n+\n+  public static final int FIXED_OVERHEAD = Bytes.SIZEOF_SHORT + Bytes.SIZEOF_INT;\n+\n+  public SizeCachedNoTagsByteBufferKeyValue(ByteBuffer buf, int offset, int length, long seqId,\n+      int keyLen) {\n+    super(buf, offset, length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0MTIyNw==", "bodyText": "call next this() constructor", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516441227", "createdAt": "2020-11-03T05:59:31Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/SizeCachedByteBufferKeyValue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * This Cell is an implementation of {@link ByteBufferExtendedCell} where the data resides in\n+ * off heap/ on heap ByteBuffer\n+ */\n+@InterfaceAudience.Private\n+public class SizeCachedByteBufferKeyValue extends ByteBufferKeyValue {\n+\n+  private short rowLen;\n+  private int keyLen;\n+\n+  public static final int FIXED_OVERHEAD = Bytes.SIZEOF_SHORT + Bytes.SIZEOF_INT;\n+\n+  public SizeCachedByteBufferKeyValue(ByteBuffer buf, int offset, int length, long seqId, int keyLen) {\n+    super(buf, offset, length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0MTQxOA==", "bodyText": "nit : Better we keep static fields above the instance members. Check for all new classes", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516441418", "createdAt": "2020-11-03T06:00:13Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/SizeCachedByteBufferKeyValue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * This Cell is an implementation of {@link ByteBufferExtendedCell} where the data resides in\n+ * off heap/ on heap ByteBuffer\n+ */\n+@InterfaceAudience.Private\n+public class SizeCachedByteBufferKeyValue extends ByteBufferKeyValue {\n+\n+  private short rowLen;\n+  private int keyLen;\n+\n+  public static final int FIXED_OVERHEAD = Bytes.SIZEOF_SHORT + Bytes.SIZEOF_INT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MDM2MA==", "bodyText": "Its ok not to get here but leave that to be decoded within SizeCachedKeyValue.  So we can remove this TODO  IMO", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516470360", "createdAt": "2020-11-03T07:40:57Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/io/encoding/RowIndexSeekerV1.java", "diffHunk": "@@ -359,26 +361,30 @@ public Cell toCell() {\n         // TODO : reduce the varieties of KV here. Check if based on a boolean\n         // we can handle the 'no tags' case.\n         if (tagsLength > 0) {\n+          // TODO : getRow len here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MTM0Mw==", "bodyText": "Whats the adv of decode rowLen here than in setKey()?  If the rowLen was already decoded for some other reason ya make sense to pass it than recalc later. But here am not fully sure", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516471343", "createdAt": "2020-11-03T07:43:32Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java", "diffHunk": "@@ -554,8 +559,10 @@ protected int blockSeek(Cell key, boolean seekBefore) {\n               + \" path=\" + reader.getPath());\n         }\n         offsetFromPos += Bytes.SIZEOF_LONG;\n+        rowLen = ((blockBuffer.getByteAfterPosition(offsetFromPos) & 0xff) << 8)\n+            ^ (blockBuffer.getByteAfterPosition(offsetFromPos + 1) & 0xff);\n         blockBuffer.asSubByteBuffer(blockBuffer.position() + offsetFromPos, klen, pair);\n-        bufBackedKeyOnlyKv.setKey(pair.getFirst(), pair.getSecond(), klen);\n+        bufBackedKeyOnlyKv.setKey(pair.getFirst(), pair.getSecond(), klen, (short)rowLen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ3MTc2MQ==", "bodyText": "Ya here also as currKeyLen is already calculated we can pass.. But let rowLen be decoded within SizeCachedKeyValue only.  We can avoid all these changes", "url": "https://github.com/apache/hbase/pull/2582#discussion_r516471761", "createdAt": "2020-11-03T07:44:35Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/hfile/HFileReaderImpl.java", "diffHunk": "@@ -790,23 +797,28 @@ public Cell getCell() {\n         // we can handle the 'no tags' case.\n         if (currTagsLen > 0) {\n           ret = new SizeCachedKeyValue(blockBuffer.array(),\n-              blockBuffer.arrayOffset() + blockBuffer.position(), cellBufSize, seqId);\n+              blockBuffer.arrayOffset() + blockBuffer.position(), cellBufSize, seqId, currKeyLen,\n+              rowLen);\n         } else {\n           ret = new SizeCachedNoTagsKeyValue(blockBuffer.array(),\n-              blockBuffer.arrayOffset() + blockBuffer.position(), cellBufSize, seqId);\n+              blockBuffer.arrayOffset() + blockBuffer.position(), cellBufSize, seqId, currKeyLen,\n+              rowLen);\n         }\n       } else {\n         ByteBuffer buf = blockBuffer.asSubByteBuffer(cellBufSize);\n         if (buf.isDirect()) {\n-          ret = currTagsLen > 0 ? new ByteBufferKeyValue(buf, buf.position(), cellBufSize, seqId)\n-              : new NoTagsByteBufferKeyValue(buf, buf.position(), cellBufSize, seqId);\n+          ret = currTagsLen > 0\n+              ? new SizeCachedByteBufferKeyValue(buf, buf.position(), cellBufSize, seqId,\n+                  currKeyLen, rowLen)\n+              : new SizeCachedNoTagsByteBufferKeyValue(buf, buf.position(), cellBufSize, seqId,\n+                  currKeyLen, rowLen);\n         } else {\n           if (currTagsLen > 0) {\n             ret = new SizeCachedKeyValue(buf.array(), buf.arrayOffset() + buf.position(),\n-                cellBufSize, seqId);\n+                cellBufSize, seqId, currKeyLen, rowLen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e53d93c0362d47d7ac574e550a71b6fbf5d29a", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/e9e53d93c0362d47d7ac574e550a71b6fbf5d29a", "committedDate": "2020-11-09T11:48:52Z", "message": "Addressing revew comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255bcaea83496366d645e39ec0775ecde44df4da", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/255bcaea83496366d645e39ec0775ecde44df4da", "committedDate": "2020-11-09T12:51:21Z", "message": "Fixing checkstyle and spot bugs comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ff38a416655bfded1ea56b5dd0342ada046a0d", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/a1ff38a416655bfded1ea56b5dd0342ada046a0d", "committedDate": "2020-11-09T17:01:39Z", "message": "Spot bug fix for hashCode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "453422eebb8f9d5d5e14acfa0ca09c27edf72959", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/453422eebb8f9d5d5e14acfa0ca09c27edf72959", "committedDate": "2020-11-11T07:06:57Z", "message": "Minor updates make the rowLen as short and some consturctor formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26c192114be33828a4fa9042a7cb5a9f2df957cf", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/26c192114be33828a4fa9042a7cb5a9f2df957cf", "committedDate": "2020-11-11T10:31:05Z", "message": "Change two more places where there was a cast"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1OTg2NTgw", "url": "https://github.com/apache/hbase/pull/2582#pullrequestreview-525986580", "createdAt": "2020-11-09T07:35:33Z", "commit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzozNTozM1rOHviDAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzozNTozM1rOHviDAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMjk0Nw==", "bodyText": "ok", "url": "https://github.com/apache/hbase/pull/2582#discussion_r519602947", "createdAt": "2020-11-09T07:35:33Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/SizeCachedKeyValue.java", "diffHunk": "@@ -39,12 +39,22 @@\n   private short rowLen;\n   private int keyLen;\n \n-  public SizeCachedKeyValue(byte[] bytes, int offset, int length, long seqId) {\n+  public SizeCachedKeyValue(byte[] bytes, int offset, int length, long seqId, int keyLen) {\n     super(bytes, offset, length);\n     // We will read all these cached values at least once. Initialize now itself so that we can\n     // avoid uninitialized checks with every time call\n-    rowLen = super.getRowLength();\n-    keyLen = super.getKeyLength();\n+    this.rowLen = super.getRowLength();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ0MDE0OA=="}, "originalCommit": {"oid": "e8d2002e0d78fbf8239a660624ca97cdc67fbf24"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNTk4MTc0", "url": "https://github.com/apache/hbase/pull/2582#pullrequestreview-532598174", "createdAt": "2020-11-17T17:09:25Z", "commit": {"oid": "26c192114be33828a4fa9042a7cb5a9f2df957cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowOToyNVrOH0_6Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzowOToyNVrOH0_6Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMzNTEwNg==", "bodyText": "double-checking -- no need to consider the instance variables for equals and hashCode ?", "url": "https://github.com/apache/hbase/pull/2582#discussion_r525335106", "createdAt": "2020-11-17T17:09:25Z", "author": {"login": "ndimiduk"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/SizeCachedByteBufferKeyValue.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * This Cell is an implementation of {@link ByteBufferExtendedCell} where the data resides in\n+ * off heap/ on heap ByteBuffer\n+ */\n+@InterfaceAudience.Private\n+public class SizeCachedByteBufferKeyValue extends ByteBufferKeyValue {\n+\n+  public static final int FIXED_OVERHEAD = Bytes.SIZEOF_SHORT + Bytes.SIZEOF_INT;\n+  private short rowLen;\n+  private int keyLen;\n+\n+  public SizeCachedByteBufferKeyValue(ByteBuffer buf, int offset, int length, long seqId,\n+      int keyLen) {\n+    super(buf, offset, length);\n+    // We will read all these cached values at least once. Initialize now itself so that we can\n+    // avoid uninitialized checks with every time call\n+    this.rowLen = super.getRowLength();\n+    this.keyLen = keyLen;\n+    setSequenceId(seqId);\n+  }\n+\n+  public SizeCachedByteBufferKeyValue(ByteBuffer buf, int offset, int length, long seqId,\n+      int keyLen, short rowLen) {\n+    super(buf, offset, length);\n+    // We will read all these cached values at least once. Initialize now itself so that we can\n+    // avoid uninitialized checks with every time call\n+    this.rowLen = rowLen;\n+    this.keyLen = keyLen;\n+    setSequenceId(seqId);\n+  }\n+\n+  @Override\n+  public short getRowLength() {\n+    return rowLen;\n+  }\n+\n+  @Override\n+  public int getKeyLength() {\n+    return this.keyLen;\n+  }\n+\n+  @Override\n+  public long heapSize() {\n+    return super.heapSize() + FIXED_OVERHEAD;\n+  }\n+\n+  /**\n+   * Override by just returning the length for saving cost of method dispatching. If not, it will\n+   * call {@link ExtendedCell#getSerializedSize()} firstly, then forward to\n+   * {@link SizeCachedKeyValue#getSerializedSize(boolean)}. (See HBASE-21657)\n+   */\n+  @Override\n+  public int getSerializedSize() {\n+    return this.length;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    return super.equals(other);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26c192114be33828a4fa9042a7cb5a9f2df957cf"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4455, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}