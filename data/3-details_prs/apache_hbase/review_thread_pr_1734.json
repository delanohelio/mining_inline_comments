{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5Njk0OTE1", "number": 1734, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMzoyMFrOD9jqeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowMzoxNVrOD9kSyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc0MDQwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/AbstractRegionNormalizer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMzoyMFrOGXH86A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMzoyMFrOGXH86A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMDcxMg==", "bodyText": "Duh", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426900712", "createdAt": "2020-05-18T21:23:20Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/AbstractRegionNormalizer.java", "diffHunk": "@@ -170,6 +170,8 @@ private static boolean skipForMerge(final RegionState state) {\n         + \"number of regions: {}\",\n       table, avgRegionSize, table, tableRegions.size());\n \n+    // Sorting based on RegionInfo.COMPARATOR.\n+    tableRegions.sort(RegionInfo.COMPARATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc0MDg4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMToyMzozMFrOGXH9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozMjoxMVrOGXozqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMDc5NQ==", "bodyText": "Great", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426900795", "createdAt": "2020-05-18T21:23:30Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -69,8 +69,11 @@ public String toString() {\n   public void execute(Admin admin) {\n     LOG.info(\"Executing merging normalization plan: \" + this);\n     try {\n+      // Do not use force=true as corner cases can happen, non adjacent regions,\n+      // merge with a merged child region with no GC done yet, it is going to\n+      // cause all different issues.\n       admin.mergeRegionsAsync(firstRegion.getEncodedNameAsBytes(),\n-        secondRegion.getEncodedNameAsBytes(), true);\n+        secondRegion.getEncodedNameAsBytes(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzNTg5MA==", "bodyText": "Wondering if this is the only change required.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r427235890", "createdAt": "2020-05-19T11:41:37Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -69,8 +69,11 @@ public String toString() {\n   public void execute(Admin admin) {\n     LOG.info(\"Executing merging normalization plan: \" + this);\n     try {\n+      // Do not use force=true as corner cases can happen, non adjacent regions,\n+      // merge with a merged child region with no GC done yet, it is going to\n+      // cause all different issues.\n       admin.mergeRegionsAsync(firstRegion.getEncodedNameAsBytes(),\n-        secondRegion.getEncodedNameAsBytes(), true);\n+        secondRegion.getEncodedNameAsBytes(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMDc5NQ=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4MTY1OQ==", "bodyText": "Okk I just saw the conversation on why tableRegions.sort(RegionInfo.COMPARATOR) is required.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r427381659", "createdAt": "2020-05-19T15:12:21Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -69,8 +69,11 @@ public String toString() {\n   public void execute(Admin admin) {\n     LOG.info(\"Executing merging normalization plan: \" + this);\n     try {\n+      // Do not use force=true as corner cases can happen, non adjacent regions,\n+      // merge with a merged child region with no GC done yet, it is going to\n+      // cause all different issues.\n       admin.mergeRegionsAsync(firstRegion.getEncodedNameAsBytes(),\n-        secondRegion.getEncodedNameAsBytes(), true);\n+        secondRegion.getEncodedNameAsBytes(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMDc5NQ=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzOTAxOQ==", "bodyText": "Yeah, I will put up more comments there.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r427439019", "createdAt": "2020-05-19T16:32:11Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -69,8 +69,11 @@ public String toString() {\n   public void execute(Admin admin) {\n     LOG.info(\"Executing merging normalization plan: \" + this);\n     try {\n+      // Do not use force=true as corner cases can happen, non adjacent regions,\n+      // merge with a merged child region with no GC done yet, it is going to\n+      // cause all different issues.\n       admin.mergeRegionsAsync(firstRegion.getEncodedNameAsBytes(),\n-        secondRegion.getEncodedNameAsBytes(), true);\n+        secondRegion.getEncodedNameAsBytes(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwMDc5NQ=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc2NjgzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozMjo0NlrOGXINGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwMDowNzozMFrOGXLaFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDg1OA==", "bodyText": "Can you please add the missing Javadoc?", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426904858", "createdAt": "2020-05-18T21:32:46Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -1519,6 +1519,17 @@ public Table createMultiRegionTable(TableName tableName, byte[][] families) thro\n     return createTable(tableName, families, KEYS_FOR_HBA_CREATE_TABLE);\n   }\n \n+  /**\n+   * Create a table with multiple regions.\n+   * @param tableName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwOTI0MQ==", "bodyText": "Will update the comments.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426909241", "createdAt": "2020-05-18T21:43:01Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -1519,6 +1519,17 @@ public Table createMultiRegionTable(TableName tableName, byte[][] families) thro\n     return createTable(tableName, families, KEYS_FOR_HBA_CREATE_TABLE);\n   }\n \n+  /**\n+   * Create a table with multiple regions.\n+   * @param tableName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDg1OA=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1NzMzMg==", "bodyText": "It is removed in the latest patch.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426957332", "createdAt": "2020-05-19T00:07:30Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -1519,6 +1519,17 @@ public Table createMultiRegionTable(TableName tableName, byte[][] families) thro\n     return createTable(tableName, families, KEYS_FOR_HBA_CREATE_TABLE);\n   }\n \n+  /**\n+   * Create a table with multiple regions.\n+   * @param tableName", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNDg1OA=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODc2ODQzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTozMzoyMFrOGXIOHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjozODoyM1rOGXJuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTExNg==", "bodyText": "What deprecations are needed here?", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426905116", "createdAt": "2020-05-18T21:33:20Z", "author": {"login": "HorizonNet"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwOTA2Nw==", "bodyText": "There is no better way to copy families/values from an existing table descriptor, I tried to use a non-deprecated method, but ModifyableTableDescriptor(tableName, admin.getDescriptor(tableName)) is the best one, which is deprecated. It is important to keep all the parameters to keep previous written data.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426909067", "createdAt": "2020-05-18T21:42:37Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTExNg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxODUxOQ==", "bodyText": "There's a new API you can use instead of this deprecated one. I think you want something like\n    final TableDescriptor td = TableDescriptorBuilder\n      .newBuilder(admin.getDescriptor(TABLENAME))\n      .setNormalizationEnabled(true)\n      .build();\n    admin.modifyTable(td);", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426918519", "createdAt": "2020-05-18T22:06:52Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTExNg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkyOTc0MQ==", "bodyText": "Ha, thank you, that is what I was looking for.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426929741", "createdAt": "2020-05-18T22:38:23Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkwNTExNg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODgzMzgyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/AbstractRegionNormalizer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMTo1OTowN1rOGXI3MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzowNjoxN1rOGXKUTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNTYzMw==", "bodyText": "This should be unnecessary. Why does the AssignmentManager not provide them in sorted order? I guess it doesn't hurt anything to check.. just seems redundant.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426915633", "createdAt": "2020-05-18T21:59:07Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/AbstractRegionNormalizer.java", "diffHunk": "@@ -170,6 +170,8 @@ private static boolean skipForMerge(final RegionState state) {\n         + \"number of regions: {}\",\n       table, avgRegionSize, table, tableRegions.size());\n \n+    // Sorting based on RegionInfo.COMPARATOR.\n+    tableRegions.sort(RegionInfo.COMPARATOR);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMTQzMw==", "bodyText": "It does maintain a sort list, which is based on regionName (not like in branch-1, it is based on RegionInfo.COMPARATOR). With regionName, it will have out of order for STARTKEY. 'aa1' and 'aa1!' will have order of ('aa1!', 'aa1'), as 'aa1''s next byte is delimiter ','. The only place I checked for ordering based on STARTKEY is normalizer.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426931433", "createdAt": "2020-05-18T22:43:28Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/AbstractRegionNormalizer.java", "diffHunk": "@@ -170,6 +170,8 @@ private static boolean skipForMerge(final RegionState state) {\n         + \"number of regions: {}\",\n       table, avgRegionSize, table, tableRegions.size());\n \n+    // Sorting based on RegionInfo.COMPARATOR.\n+    tableRegions.sort(RegionInfo.COMPARATOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNTYzMw=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMzgzMw==", "bodyText": "Looking around branch-2.3, I think the normalizer is the only place where the region order has some assumed meaning.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426933833", "createdAt": "2020-05-18T22:50:30Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/AbstractRegionNormalizer.java", "diffHunk": "@@ -170,6 +170,8 @@ private static boolean skipForMerge(final RegionState state) {\n         + \"number of regions: {}\",\n       table, avgRegionSize, table, tableRegions.size());\n \n+    // Sorting based on RegionInfo.COMPARATOR.\n+    tableRegions.sort(RegionInfo.COMPARATOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNTYzMw=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTQ2OA==", "bodyText": "Yep, it exists in branch-2.2 as well.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426939468", "createdAt": "2020-05-18T23:06:17Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/AbstractRegionNormalizer.java", "diffHunk": "@@ -170,6 +170,8 @@ private static boolean skipForMerge(final RegionState state) {\n         + \"number of regions: {}\",\n       table, avgRegionSize, table, tableRegions.size());\n \n+    // Sorting based on RegionInfo.COMPARATOR.\n+    tableRegions.sort(RegionInfo.COMPARATOR);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNTYzMw=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODgzNzk3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowMDo1M1rOGXI5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMzowNjo0NFrOGXKUxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjMwMw==", "bodyText": "This method does nothing at all. Is it necessary? Does it help code readability so much that it's worth adding?", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426916303", "createdAt": "2020-05-18T22:00:53Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -1519,6 +1519,17 @@ public Table createMultiRegionTable(TableName tableName, byte[][] families) thro\n     return createTable(tableName, families, KEYS_FOR_HBA_CREATE_TABLE);\n   }\n \n+  /**\n+   * Create a table with multiple regions.\n+   * @param tableName\n+   * @param families\n+   * @return A Table instance for the created table.\n+   * @throws IOException\n+   */\n+  public Table createMultiRegionTable(TableName tableName, byte[][] families, final byte[][]  keys) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjE5Nw==", "bodyText": "I need an API which I can pass a set of keys (not predefined ones) so I can use it to test a specific set of split keys.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426932197", "createdAt": "2020-05-18T22:45:49Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -1519,6 +1519,17 @@ public Table createMultiRegionTable(TableName tableName, byte[][] families) thro\n     return createTable(tableName, families, KEYS_FOR_HBA_CREATE_TABLE);\n   }\n \n+  /**\n+   * Create a table with multiple regions.\n+   * @param tableName\n+   * @param families\n+   * @return A Table instance for the created table.\n+   * @throws IOException\n+   */\n+  public Table createMultiRegionTable(TableName tableName, byte[][] families, final byte[][]  keys) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjMwMw=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNDg5Mg==", "bodyText": "The underlying createTable(TableName, byte[][], byte[][]) is public. Why not call it directly, instead of making this wrapper?", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426934892", "createdAt": "2020-05-18T22:53:18Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -1519,6 +1519,17 @@ public Table createMultiRegionTable(TableName tableName, byte[][] families) thro\n     return createTable(tableName, families, KEYS_FOR_HBA_CREATE_TABLE);\n   }\n \n+  /**\n+   * Create a table with multiple regions.\n+   * @param tableName\n+   * @param families\n+   * @return A Table instance for the created table.\n+   * @throws IOException\n+   */\n+  public Table createMultiRegionTable(TableName tableName, byte[][] families, final byte[][]  keys) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjMwMw=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzOTU4OA==", "bodyText": "thanks, will change to use this method.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426939588", "createdAt": "2020-05-18T23:06:44Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -1519,6 +1519,17 @@ public Table createMultiRegionTable(TableName tableName, byte[][] families) thro\n     return createTable(tableName, families, KEYS_FOR_HBA_CREATE_TABLE);\n   }\n \n+  /**\n+   * Create a table with multiple regions.\n+   * @param tableName\n+   * @param families\n+   * @return A Table instance for the created table.\n+   * @throws IOException\n+   */\n+  public Table createMultiRegionTable(TableName tableName, byte[][] families, final byte[][]  keys) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjMwMw=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODg0MjMxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowMjo0MlrOGXI8Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozMTozOVrOGXox5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjk2Mg==", "bodyText": "Is there a condition you can waitFor instead of a fixed sleep? These fixed sleeps lead to slow and flakey tests :(", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426916962", "createdAt": "2020-05-18T22:02:42Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjM4NA==", "bodyText": "Let me check one, it is just copy and paste here from another test.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426932384", "createdAt": "2020-05-18T22:46:25Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjk2Mg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzNTEwOA==", "bodyText": "Understood.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426935108", "createdAt": "2020-05-18T22:54:01Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjk2Mg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjk1ODc0NQ==", "bodyText": "I went through the code. The logic is like this, every 3 seconds (default config), region servers send sever metrics to master and update the copy in master in-memory database, which is used by normalizer to calculate region sizes. We can (not) manually trigger a server metrics update from region server as the method is a protected one for testing in regionserver module. Even if it does a manual server metrics update from region server, it still needs to wait(sleep) until master finishes rpc processing. Will leave as it is unless there is something missing from my code reading, thanks.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426958745", "createdAt": "2020-05-19T00:12:41Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjk2Mg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzNjc1MQ==", "bodyText": "Maybe we can do manual server metrics update followed by sleep and then assert null plan?", "url": "https://github.com/apache/hbase/pull/1734#discussion_r427236751", "createdAt": "2020-05-19T11:43:09Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjk2Mg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzODU2Nw==", "bodyText": "The manual server mtetrics update will need to expose the protected methods out of the module, and after that, there is still no way to guarantee the latest update is processed by master (sleep is still needed). I thought about it and gave up. It is mostly from testRegionNormalizationMergeOnCluster() and it never shows up in flaky test list, so it is ok here.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r427438567", "createdAt": "2020-05-19T16:31:39Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNjk2Mg=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODg0MzYyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjowMzoxNVrOGXI9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMjo0Njo1MVrOGXJ5Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNzE1NA==", "bodyText": "I think this should be wrapped in if admin.exists(tableName), otherwise flakey test.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426917154", "createdAt": "2020-05-18T22:03:15Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update\n+\n+      // Compute the plan, no merge plan returned as they are not adjacent.\n+      final List<NormalizationPlan> plans = m.getRegionNormalizer().computePlanForTable(tableName);\n+      assertNull(plans);\n+    } finally {\n+      admin.disableTable(tableName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkzMjUxOQ==", "bodyText": "Will address it.", "url": "https://github.com/apache/hbase/pull/1734#discussion_r426932519", "createdAt": "2020-05-18T22:46:51Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/normalizer/TestSimpleRegionNormalizerOnCluster.java", "diffHunk": "@@ -179,6 +182,71 @@ void testRegionNormalizationSplitOnCluster(boolean limitedByQuota) throws Except\n     admin.deleteTable(TABLENAME);\n   }\n \n+  // This test is to make sure that normalizer is only going to merge adjacent regions.\n+  @Test\n+  @SuppressWarnings(\"deprecation\")\n+  public void testNormalizerCannotMergeNonAdjacentRegions() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    MiniHBaseCluster cluster = TEST_UTIL.getHBaseCluster();\n+    HMaster m = cluster.getMaster();\n+\n+    // create 5 regions with sizes to trigger merge of small regions\n+    final byte[][] keys = {\n+      Bytes.toBytes(\"aa\"),\n+      Bytes.toBytes(\"aa1\"),\n+      Bytes.toBytes(\"aa1!\"),\n+      Bytes.toBytes(\"aa2\")\n+    };\n+\n+    try (Table ht = TEST_UTIL.createMultiRegionTable(tableName, new byte[][]{FAMILYNAME}, keys)) {\n+      // Need to get sorted list of regions here, the order is\n+      // [, \"aa\"), [\"aa\", \"aa1\"), [\"aa1\", \"aa1!\"), [\"aa1!\", \"aa2\"), [\"aa2\", )\n+      List<HRegion> generatedRegions = TEST_UTIL.getHBaseCluster().getRegions(tableName);\n+      Collections.sort(generatedRegions, Comparator.comparing(HRegion::getRegionInfo, RegionInfo.COMPARATOR));\n+\n+      // Region [\"aa\", \"aa1\") and [\"aa1!\", \"aa2\") are not adjacent, they are not supposed to\n+      // merged.\n+      HRegion region = generatedRegions.get(0);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(1);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(2);\n+      generateTestData(region, 3);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(3);\n+      generateTestData(region, 1);\n+      region.flush(true);\n+\n+      region = generatedRegions.get(4);\n+      generateTestData(region, 5);\n+      region.flush(true);\n+\n+      ModifyableTableDescriptor htd = new ModifyableTableDescriptor(tableName,\n+        admin.getDescriptor(tableName));\n+\n+      htd.setNormalizationEnabled(true);\n+      admin.modifyTable(htd);\n+\n+      admin.flush(tableName);\n+\n+      assertEquals(5, MetaTableAccessor.getRegionCount(TEST_UTIL.getConnection(), tableName));\n+\n+      Thread.sleep(5000); // to let region load to update\n+\n+      // Compute the plan, no merge plan returned as they are not adjacent.\n+      final List<NormalizationPlan> plans = m.getRegionNormalizer().computePlanForTable(tableName);\n+      assertNull(plans);\n+    } finally {\n+      admin.disableTable(tableName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjkxNzE1NA=="}, "originalCommit": {"oid": "2a22c5e7006527ded9269b16e168733643a52f4c"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2998, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}