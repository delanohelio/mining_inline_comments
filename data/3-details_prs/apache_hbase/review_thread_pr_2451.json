{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMTcyOTQ3", "number": 2451, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyMjowMFrOEpK73Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxNTowN1rOEp2g7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjA2MjM3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxOToyMjowMFrOHar-kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODowMzoxMVrOHbVcSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0NTU1Mg==", "bodyText": "Nit: can we have another utility method of\nconf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION)\nas is isUserRegionReplicaReplicationEnabled(***)?\nIt will be easy to read.", "url": "https://github.com/apache/hbase/pull/2451#discussion_r497745552", "createdAt": "2020-09-30T19:22:00Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java", "diffHunk": "@@ -154,47 +162,60 @@ public static StoreFileInfo getStoreFileInfo(Configuration conf, FileSystem fs,\n   }\n \n   /**\n-   * Create replication peer for replicating to region replicas if needed.\n+   * Create replication peer for replicating user-space Region Read Replicas.\n    * @param conf configuration to use\n-   * @throws IOException\n    */\n   public static void setupRegionReplicaReplication(Configuration conf) throws IOException {\n-    if (!isRegionReplicaReplicationEnabled(conf)) {\n+    if (!conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION)) {\n       return;\n     }\n-\n+    String peerId = REGION_REPLICA_REPLICATION_PEER;\n     try (Connection connection = ConnectionFactory.createConnection(conf);\n       Admin admin = connection.getAdmin()) {\n       ReplicationPeerConfig peerConfig = null;\n       try {\n-        peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n+        peerConfig = admin.getReplicationPeerConfig(peerId);\n       } catch (ReplicationPeerNotFoundException e) {\n-        LOG.warn(\n-          \"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER + \" not exist\",\n-          e);\n+        LOG.warn(\"Region replica peer id={} does not exist\", peerId, e);\n       }\n-\n       if (peerConfig == null) {\n-        LOG.info(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n-          + \" not exist. Creating...\");\n-        peerConfig = new ReplicationPeerConfig();\n-        peerConfig.setClusterKey(ZKConfig.getZooKeeperClusterKey(conf));\n-        peerConfig.setReplicationEndpointImpl(RegionReplicaReplicationEndpoint.class.getName());\n-        admin.addReplicationPeer(REGION_REPLICA_REPLICATION_PEER, peerConfig);\n+        LOG.info(\"Region Read Replica peerId={} does not exist; creating...\", peerId);\n+        peerConfig = ReplicationPeerConfig.newBuilder().\n+          setClusterKey(ZKConfig.getZooKeeperClusterKey(conf)).\n+          setReplicationEndpointImpl(RegionReplicaReplicationEndpoint.class.getName()).build();\n+        admin.addReplicationPeer(peerId, peerConfig);\n       }\n     }\n   }\n \n-  public static boolean isRegionReplicaReplicationEnabled(Configuration conf) {\n-    return conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY,\n-      DEFAULT_REGION_REPLICA_REPLICATION);\n+  /**\n+   * @return True if Region Read Replica is enabled for <code>tn</code>.\n+   */\n+  public static boolean isRegionReplicaReplicationEnabled(Configuration conf, TableName tn) {\n+    return isMetaRegionReplicaReplicationEnabled(conf, tn) ||\n+      conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29365417110a57fcaebc10e40ffa1497f93196ae"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQyNDkwNg==", "bodyText": "np. sounds good.", "url": "https://github.com/apache/hbase/pull/2451#discussion_r498424906", "createdAt": "2020-10-01T18:03:11Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/ServerRegionReplicaUtil.java", "diffHunk": "@@ -154,47 +162,60 @@ public static StoreFileInfo getStoreFileInfo(Configuration conf, FileSystem fs,\n   }\n \n   /**\n-   * Create replication peer for replicating to region replicas if needed.\n+   * Create replication peer for replicating user-space Region Read Replicas.\n    * @param conf configuration to use\n-   * @throws IOException\n    */\n   public static void setupRegionReplicaReplication(Configuration conf) throws IOException {\n-    if (!isRegionReplicaReplicationEnabled(conf)) {\n+    if (!conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION)) {\n       return;\n     }\n-\n+    String peerId = REGION_REPLICA_REPLICATION_PEER;\n     try (Connection connection = ConnectionFactory.createConnection(conf);\n       Admin admin = connection.getAdmin()) {\n       ReplicationPeerConfig peerConfig = null;\n       try {\n-        peerConfig = admin.getReplicationPeerConfig(REGION_REPLICA_REPLICATION_PEER);\n+        peerConfig = admin.getReplicationPeerConfig(peerId);\n       } catch (ReplicationPeerNotFoundException e) {\n-        LOG.warn(\n-          \"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER + \" not exist\",\n-          e);\n+        LOG.warn(\"Region replica peer id={} does not exist\", peerId, e);\n       }\n-\n       if (peerConfig == null) {\n-        LOG.info(\"Region replica replication peer id=\" + REGION_REPLICA_REPLICATION_PEER\n-          + \" not exist. Creating...\");\n-        peerConfig = new ReplicationPeerConfig();\n-        peerConfig.setClusterKey(ZKConfig.getZooKeeperClusterKey(conf));\n-        peerConfig.setReplicationEndpointImpl(RegionReplicaReplicationEndpoint.class.getName());\n-        admin.addReplicationPeer(REGION_REPLICA_REPLICATION_PEER, peerConfig);\n+        LOG.info(\"Region Read Replica peerId={} does not exist; creating...\", peerId);\n+        peerConfig = ReplicationPeerConfig.newBuilder().\n+          setClusterKey(ZKConfig.getZooKeeperClusterKey(conf)).\n+          setReplicationEndpointImpl(RegionReplicaReplicationEndpoint.class.getName()).build();\n+        admin.addReplicationPeer(peerId, peerConfig);\n       }\n     }\n   }\n \n-  public static boolean isRegionReplicaReplicationEnabled(Configuration conf) {\n-    return conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY,\n-      DEFAULT_REGION_REPLICA_REPLICATION);\n+  /**\n+   * @return True if Region Read Replica is enabled for <code>tn</code>.\n+   */\n+  public static boolean isRegionReplicaReplicationEnabled(Configuration conf, TableName tn) {\n+    return isMetaRegionReplicaReplicationEnabled(conf, tn) ||\n+      conf.getBoolean(REGION_REPLICA_REPLICATION_CONF_KEY, DEFAULT_REGION_REPLICA_REPLICATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzc0NTU1Mg=="}, "originalCommit": {"oid": "29365417110a57fcaebc10e40ffa1497f93196ae"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzIwMjM4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestMetaRegionReplicaReplicationEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNToxNTowN1rOHbxi0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTo0MjoxOFrOHbyf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NTMyOQ==", "bodyText": "Why FlakeyTests?", "url": "https://github.com/apache/hbase/pull/2451#discussion_r498885329", "createdAt": "2020-10-02T15:15:07Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestMetaRegionReplicaReplicationEndpoint.java", "diffHunk": "@@ -0,0 +1,334 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.replication.regionserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellScanner;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.ClientMetaTableAccessor;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.MiniHBaseCluster;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.Waiter;\n+import org.apache.hadoop.hbase.client.RegionLocator;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.regionserver.HRegion;\n+import org.apache.hadoop.hbase.regionserver.HRegionServer;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.testclassification.FlakeyTests;\n+import org.apache.hadoop.hbase.testclassification.LargeTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.ServerRegionReplicaUtil;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests RegionReplicaReplicationEndpoint class for hbase:meta by setting up region replicas and\n+ * verifying async wal replication replays the edits to the secondary region in various scenarios.\n+ * @see TestRegionReplicaReplicationEndpoint\n+ */\n+@Category({FlakeyTests.class, LargeTests.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9d7dce61233a88beb7f7c734e5db109df0dae7"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwMDk1Nw==", "bodyText": "Copy/Paste. Let me fix. Thanks.", "url": "https://github.com/apache/hbase/pull/2451#discussion_r498900957", "createdAt": "2020-10-02T15:42:18Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/replication/regionserver/TestMetaRegionReplicaReplicationEndpoint.java", "diffHunk": "@@ -0,0 +1,334 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.replication.regionserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellScanner;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.ClientMetaTableAccessor;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.HRegionLocation;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.MiniHBaseCluster;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.Waiter;\n+import org.apache.hadoop.hbase.client.RegionLocator;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.Scan;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.regionserver.HRegion;\n+import org.apache.hadoop.hbase.regionserver.HRegionServer;\n+import org.apache.hadoop.hbase.regionserver.Region;\n+import org.apache.hadoop.hbase.regionserver.RegionScanner;\n+import org.apache.hadoop.hbase.testclassification.FlakeyTests;\n+import org.apache.hadoop.hbase.testclassification.LargeTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.ServerRegionReplicaUtil;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Tests RegionReplicaReplicationEndpoint class for hbase:meta by setting up region replicas and\n+ * verifying async wal replication replays the edits to the secondary region in various scenarios.\n+ * @see TestRegionReplicaReplicationEndpoint\n+ */\n+@Category({FlakeyTests.class, LargeTests.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg4NTMyOQ=="}, "originalCommit": {"oid": "1d9d7dce61233a88beb7f7c734e5db109df0dae7"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2515, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}