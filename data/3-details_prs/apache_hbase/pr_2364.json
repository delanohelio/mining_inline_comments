{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTIwMTU0", "number": 2364, "title": "HBASE-24998 Introduce a ReplicationSourceController interface \u2026", "bodyText": "\u2026and decouple ReplicationSourceManager and ReplicationSource", "createdAt": "2020-09-08T09:46:32Z", "url": "https://github.com/apache/hbase/pull/2364", "merged": true, "mergeCommit": {"oid": "232569664a5576ebfb920e2143f40b888718b547"}, "closed": true, "closedAt": "2020-09-20T01:02:54Z", "author": {"login": "infraio"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdG0d6ZgBqjM3NDAwNzA1NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKU3pxAFqTQ5MTk3Nzk2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "076e2f16b7dfc32e8e01425fef140d77e2c7b46b", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/076e2f16b7dfc32e8e01425fef140d77e2c7b46b", "committedDate": "2020-09-08T09:41:44Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}, "afterCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/860c55f3df65056d4b847ea31e488860d3a10ca7", "committedDate": "2020-09-08T09:48:15Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MzkyNzU2", "url": "https://github.com/apache/hbase/pull/2364#pullrequestreview-484392756", "createdAt": "2020-09-08T18:28:47Z", "commit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyODo0N1rOHOpH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjowN1rOHOpr_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTg3OA==", "bodyText": "Only used in ReplicationSourceManager so define these there?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485115878", "createdAt": "2020-09-08T18:28:47Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -979,6 +979,8 @@\n   /*\n    * cluster replication constants.\n    */\n+  public static final String REPLICATION_OFFLOAD_ENABLE_KEY = \"hbase.replication.offload.enabled\";\n+  public static final boolean REPLICATION_OFFLOAD_ENABLE_DEFAULT = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjMyNA==", "bodyText": "License", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485116324", "createdAt": "2020-09-08T18:29:30Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzE0MQ==", "bodyText": "Can it just be ReplicationSoruceController? Drop the 'Overall'?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485117141", "createdAt": "2020-09-08T18:31:02Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzYzOQ==", "bodyText": "Is this a 'size' rather than a 'limit'? It is count of how many bytes are currently accumulated in replication source memory?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485117639", "createdAt": "2020-09-08T18:32:01Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzg5Mg==", "bodyText": "Maybe the comment is just in the wrong place.. should be on the next data member?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485117892", "createdAt": "2020-09-08T18:32:30Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzYzOQ=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExODE4OQ==", "bodyText": "What sort of 'global' metrics? This is metrics for all replication sources?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485118189", "createdAt": "2020-09-08T18:33:06Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();\n+\n+  AtomicLong getTotalBufferUsed();\n+\n+  MetricsReplicationGlobalSourceSource getGlobalMetrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExODc5Ng==", "bodyText": "Remove '@param src'. s/Called/Call/", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485118796", "createdAt": "2020-09-08T18:34:05Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();\n+\n+  AtomicLong getTotalBufferUsed();\n+\n+  MetricsReplicationGlobalSourceSource getGlobalMetrics();\n+\n+  /**\n+   * Called this when the recovered replication source replicated all WALs.\n+   * @param src", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTMxNg==", "bodyText": "There is only one ReplicationSourceManager instance in a RS? If so, can it carry the Controller rather than as here where it is another param on this init method?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485119316", "createdAt": "2020-09-08T18:35:04Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/RecoveredReplicationSource.java", "diffHunk": "@@ -45,18 +46,15 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(RecoveredReplicationSource.class);\n \n-  private Path walDir;\n-\n   private String actualPeerId;\n \n   @Override\n-  public void init(Configuration conf, FileSystem fs, Path walDir, ReplicationSourceManager manager,\n-    ReplicationQueueStorage queueStorage, ReplicationPeer replicationPeer, Server server,\n-    String peerClusterZnode, UUID clusterId, WALFileLengthProvider walFileLengthProvider,\n-    MetricsSource metrics) throws IOException {\n-    super.init(conf, fs, walDir, manager, queueStorage, replicationPeer, server, peerClusterZnode,\n-      clusterId, walFileLengthProvider, metrics);\n-    this.walDir = walDir;\n+  public void init(Configuration conf, FileSystem fs, Path walDir,\n+    ReplicationSourceOverallController overallController, ReplicationQueueStorage queueStorage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMDQ0NQ==", "bodyText": "Yeah, if this implements Controller, you have to pass it in to ReplicationSource #Init as a distinct arg?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485120445", "createdAt": "2020-09-08T18:37:16Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -92,7 +93,8 @@\n  * </ul>\n  */\n @InterfaceAudience.Private\n-public class ReplicationSourceManager implements ReplicationListener {\n+public class ReplicationSourceManager implements ReplicationListener,\n+  ReplicationSourceOverallController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTA5OA==", "bodyText": "I should go back to the design but we can't just have the offload be a ReplicationSource implementation? Because you need to span all ReplicationSources?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485121098", "createdAt": "2020-09-08T18:38:39Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -186,12 +188,11 @@ public ReplicationSourceManager(ReplicationQueueStorage queueStorage,\n     this.latestPaths = new HashMap<>();\n     this.replicationForBulkLoadDataEnabled = conf.getBoolean(\n       HConstants.REPLICATION_BULKLOAD_ENABLE_KEY, HConstants.REPLICATION_BULKLOAD_ENABLE_DEFAULT);\n-    this.sleepForRetries = this.conf.getLong(\"replication.source.sync.sleepforretries\", 1000);\n-    this.maxRetriesMultiplier =\n-      this.conf.getInt(\"replication.source.sync.maxretriesmultiplier\", 60);\n     this.totalBufferLimit = conf.getLong(HConstants.REPLICATION_SOURCE_TOTAL_BUFFER_KEY,\n         HConstants.REPLICATION_SOURCE_TOTAL_BUFFER_DFAULT);\n     this.globalMetrics = globalMetrics;\n+    this.replicationOffload = conf.getBoolean(HConstants.REPLICATION_OFFLOAD_ENABLE_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzIxNw==", "bodyText": "Funny, I want it to stay public in my current work (meta region replicas). Can move it back in my patch.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485123217", "createdAt": "2020-09-08T18:42:43Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -244,7 +286,7 @@ private void adoptAbandonedQueues() {\n    * </ol>\n    * @param peerId the id of replication peer\n    */\n-  public void addPeer(String peerId) throws IOException {\n+  void addPeer(String peerId) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzI5OQ==", "bodyText": "Ditto", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485123299", "createdAt": "2020-09-08T18:42:51Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -268,7 +310,7 @@ public void addPeer(String peerId) throws IOException {\n    * </ol>\n    * @param peerId the id of the replication peer\n    */\n-  public void removePeer(String peerId) {\n+  void removePeer(String peerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDUxNg==", "bodyText": "I want to call it on Region open. Let me see if I can move where I make the call.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485124516", "createdAt": "2020-09-08T18:45:05Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -244,7 +286,7 @@ private void adoptAbandonedQueues() {\n    * </ol>\n    * @param peerId the id of replication peer\n    */\n-  public void addPeer(String peerId) throws IOException {\n+  void addPeer(String peerId) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzIxNw=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDc0Nw==", "bodyText": "I see, you are just moving existing methods.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485124747", "createdAt": "2020-09-08T18:45:29Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -849,19 +874,6 @@ int getSizeOfLatestPath() {\n     }\n   }\n \n-  @VisibleForTesting\n-  public AtomicLong getTotalBufferUsed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 263}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTExNw==", "bodyText": "Yeah, if the Controller is in the ReplicationSourceManager, then the 'overall' will be redundant?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485125117", "createdAt": "2020-09-08T18:46:07Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReader.java", "diffHunk": "@@ -267,10 +267,11 @@ public Path getCurrentPath() {\n   //returns false if we've already exceeded the global quota\n   private boolean checkQuota() {\n     // try not to go over total quota\n-    if (source.manager.getTotalBufferUsed().get() > source.manager.getTotalBufferLimit()) {\n+    if (source.overallController.getTotalBufferUsed().get() > source.overallController", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/860c55f3df65056d4b847ea31e488860d3a10ca7", "committedDate": "2020-09-08T09:48:15Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}, "afterCommit": {"oid": "ccbd2e8ad0241f9e2ba3f33f9fbca037088f4ef0", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ccbd2e8ad0241f9e2ba3f33f9fbca037088f4ef0", "committedDate": "2020-09-09T03:02:15Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ccbd2e8ad0241f9e2ba3f33f9fbca037088f4ef0", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ccbd2e8ad0241f9e2ba3f33f9fbca037088f4ef0", "committedDate": "2020-09-09T03:02:15Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}, "afterCommit": {"oid": "0c7bcf5484ea444e1c2dca7dc8904feb75d79dee", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/0c7bcf5484ea444e1c2dca7dc8904feb75d79dee", "committedDate": "2020-09-09T04:12:33Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c7bcf5484ea444e1c2dca7dc8904feb75d79dee", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/0c7bcf5484ea444e1c2dca7dc8904feb75d79dee", "committedDate": "2020-09-09T04:12:33Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}, "afterCommit": {"oid": "99503d16a469f75891edf028ce1e214820874ec6", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/99503d16a469f75891edf028ce1e214820874ec6", "committedDate": "2020-09-09T06:59:09Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99503d16a469f75891edf028ce1e214820874ec6", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/99503d16a469f75891edf028ce1e214820874ec6", "committedDate": "2020-09-09T06:59:09Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}, "afterCommit": {"oid": "ac62e966d4b1d91a147e8194bdf9ab0436b8fcf9", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ac62e966d4b1d91a147e8194bdf9ab0436b8fcf9", "committedDate": "2020-09-09T07:01:48Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "069ed71de4d054f1e2d56bf60a6a084c161118d7", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/069ed71de4d054f1e2d56bf60a6a084c161118d7", "committedDate": "2020-09-14T07:05:43Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac62e966d4b1d91a147e8194bdf9ab0436b8fcf9", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/ac62e966d4b1d91a147e8194bdf9ab0436b8fcf9", "committedDate": "2020-09-09T07:01:48Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}, "afterCommit": {"oid": "069ed71de4d054f1e2d56bf60a6a084c161118d7", "author": {"user": {"login": "infraio", "name": "Guanghao Zhang"}}, "url": "https://github.com/apache/hbase/commit/069ed71de4d054f1e2d56bf60a6a084c161118d7", "committedDate": "2020-09-14T07:05:43Z", "message": "HBASE-24998 Introduce a ReplicationSourceOverallController interface and decouple ReplicationSourceManager and ReplicationSource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxOTc3OTY2", "url": "https://github.com/apache/hbase/pull/2364#pullrequestreview-491977966", "createdAt": "2020-09-19T07:15:22Z", "commit": {"oid": "069ed71de4d054f1e2d56bf60a6a084c161118d7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4764, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}