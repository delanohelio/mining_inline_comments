{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTE4OTQ1", "number": 1301, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToxMDowNFrODpXwcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNTozMTowNFrODpX7ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzA3NDQwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToxMDowNFrOF4gUKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToxMDowNFrOF4gUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NDAyNA==", "bodyText": "Smile. These gymastics need big comment here to explain magic going on here. Smile.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394794024", "createdAt": "2020-03-19T05:10:04Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzA5NDIzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyNDoyOFrOF4ggsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyNDoyOFrOF4ggsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzIzMw==", "bodyText": "The builder is from HDFS. It is NOT a pb. It has pbs in it?", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797233", "createdAt": "2020-03-19T05:24:28Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -363,7 +410,7 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload,\n       if (payload != null) {\n         // Was ByteStringer; fix w/o using ByteStringer. Its in hbase-protocol\n         // and we want to keep that out of hbase-server.\n-        builder.setPayload(ByteString.copyFrom(payload));\n+        BuilderPayloadSetter.setter(builder, payload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzA5NTc2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyNTo0MFrOF4ghpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyODowNFrOF4gjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA==", "bodyText": "Is this ok? This presumes what pb is on the CLASSPATH? pb2.5?  Should it be the shaded hbase ByteString?", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797478", "createdAt": "2020-03-19T05:25:40Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzU3Ng==", "bodyText": "Or this is just a default setting?", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797576", "createdAt": "2020-03-19T05:26:09Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA=="}, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5Nzg1Ng==", "bodyText": "Seems like it should be hbase internal shaded ByteString, not this com.google one.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797856", "createdAt": "2020-03-19T05:27:25Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA=="}, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODAxOQ==", "bodyText": "oh. i get it. This is the HDFS ByteString. The one that will be on the CP for all versions before HDFS3.3. Ok.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798019", "createdAt": "2020-03-19T05:28:04Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzQ3OA=="}, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzA5NzIwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyNjo0NFrOF4gilw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDozMzo1MFrOF5Ey8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzcxOQ==", "bodyText": "This is printed out once on class loading? We can prettify later.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394797719", "createdAt": "2020-03-19T05:26:44Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;\n+        try {\n+          byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+        } catch (ClassNotFoundException e) {\n+          e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MTczMA==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r395391730", "createdAt": "2020-03-20T00:33:50Z", "author": {"login": "jojochuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);\n+          } catch (NoSuchMethodException e) {\n+            e.printStackTrace();\n+          }\n+        }\n+\n+        try {\n+          setPayloadMethod.invoke(builder, byteStringObject);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+      }\n+\n+      static {\n+        builderClass = DataTransferEncryptorMessageProto.Builder.class;\n+        byteStringClass = com.google.protobuf.ByteString.class;\n+        try {\n+          byteStringClass = Class.forName(\"org.apache.hadoop.thirdparty.protobuf.ByteString\");\n+        } catch (ClassNotFoundException e) {\n+          e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NzcxOQ=="}, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzEwMDE3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyODo0N1rOF4gkcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDo0MToyOFrOF5E5gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODE5NQ==", "bodyText": "This a byte array copy? If we wanted to wrap w/o copy, could we do that?", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798195", "createdAt": "2020-03-19T05:28:47Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MzQwOA==", "bodyText": "yeah i think that's possible. In fact, that was the case prior to HBASE-17908. Here the code simply do what was there after HBASE-17908. I can certain try do the zero copy thing too.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r395393408", "createdAt": "2020-03-20T00:41:28Z", "author": {"login": "jojochuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODE5NQ=="}, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzEwMTQwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyOTo0MFrOF4glOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwMDozNzo0MFrOF5E2UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODM5NA==", "bodyText": "hmm... we can't set this till setter time I suppose? Could we do it at static class loading time?", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798394", "createdAt": "2020-03-19T05:29:40Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM5MjU5Mw==", "bodyText": "Moved to static loading time.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r395392593", "createdAt": "2020-03-20T00:37:40Z", "author": {"login": "jojochuang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/FanOutOneBlockAsyncDFSOutputSaslHelper.java", "diffHunk": "@@ -355,6 +353,55 @@ private void sendSaslMessage(ChannelHandlerContext ctx, byte[] payload) throws I\n       return Collections.singletonList(new CipherOption(CipherSuite.AES_CTR_NOPADDING));\n     }\n \n+    private static class BuilderPayloadSetter {\n+      private static Class<?> byteStringClass;\n+      private static Class<?> builderClass;\n+      private static Method copyFromMethod;\n+      private static Method setPayloadMethod = null;\n+\n+      static void setter(DataTransferEncryptorMessageProto.Builder builder, byte[] payload) {\n+        Object byteStringObject = null;\n+        try {\n+          byteStringObject = copyFromMethod.invoke(null, payload);\n+        } catch (IllegalAccessException e) {\n+          e.printStackTrace();\n+        } catch (InvocationTargetException e) {\n+          e.printStackTrace();\n+        }\n+\n+        if (setPayloadMethod == null) {\n+          try {\n+            setPayloadMethod = builderClass.getMethod(\"setPayload\", byteStringClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODM5NA=="}, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzEwMTg1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNTozMDowNFrOF4glmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNTozMDowNFrOF4glmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODQ5MQ==", "bodyText": "license?", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798491", "createdAt": "2020-03-19T05:30:04Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.apache.hadoop.hbase.io.asyncfs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NzEwMzMwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNTozMTowNFrOF4gmiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNTozMTowNFrOF4gmiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5ODcyOA==", "bodyText": "Needs comment on what this is doing.", "url": "https://github.com/apache/hbase/pull/1301#discussion_r394798728", "createdAt": "2020-03-19T05:31:04Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/io/asyncfs/ProtobufDecoder.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package org.apache.hadoop.hbase.io.asyncfs;\n+\n+import org.apache.hbase.thirdparty.io.netty.buffer.ByteBuf;\n+import org.apache.hbase.thirdparty.io.netty.buffer.ByteBufUtil;\n+import org.apache.hbase.thirdparty.io.netty.channel.ChannelHandlerContext;\n+import org.apache.hbase.thirdparty.io.netty.handler.codec.MessageToMessageDecoder;\n+import org.apache.hbase.thirdparty.io.netty.util.internal.ObjectUtil;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.util.List;\n+\n+/** Modified based on io.netty.handler.codec.protobuf.ProtobufDecoder */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71f02d5cb7156c91753c7ac1352028a38aa2d74e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2025, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}