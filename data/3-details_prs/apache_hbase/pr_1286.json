{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODM5ODMy", "number": 1286, "title": "HBASE-23977 : Resolve flakes present in TestSlowLogRecorder", "bodyText": "", "createdAt": "2020-03-13T15:29:18Z", "url": "https://github.com/apache/hbase/pull/1286", "merged": true, "mergeCommit": {"oid": "26b31e351c94ebcb6fcbdfed4fa2c74bd974cb3c"}, "closed": true, "closedAt": "2020-03-19T10:05:50Z", "author": {"login": "virajjasani"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNSHLpAFqTM3NDM5ODA0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPS1AWAFqTM3ODEwNTAzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0Mzk4MDQz", "url": "https://github.com/apache/hbase/pull/1286#pullrequestreview-374398043", "createdAt": "2020-03-13T15:33:14Z", "commit": {"oid": "8582c31fe5c4492de007de680a8ec2d1492d9d81"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/e0ecdae2d0416a53de084fadb5238f8fbb03ae17", "committedDate": "2020-03-13T19:06:40Z", "message": "HBASE-23977 : Resolve flakes present in TestSlowLogRecorder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89c6904a48d649c7834e458ec13d7fe65e7fa832", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/89c6904a48d649c7834e458ec13d7fe65e7fa832", "committedDate": "2020-03-13T15:49:25Z", "message": "use waitFor()"}, "afterCommit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/e0ecdae2d0416a53de084fadb5238f8fbb03ae17", "committedDate": "2020-03-13T19:06:40Z", "message": "HBASE-23977 : Resolve flakes present in TestSlowLogRecorder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1Njc1OTE5", "url": "https://github.com/apache/hbase/pull/1286#pullrequestreview-375675919", "createdAt": "2020-03-17T01:03:15Z", "commit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowMzoxNVrOF3Kp7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMTowNjozOFrOF3KtSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MDU3Mw==", "bodyText": "nit: intermediate boolean values aren't necessary... just return foo && bar && baz.", "url": "https://github.com/apache/hbase/pull/1286#discussion_r393390573", "createdAt": "2020-03-17T01:03:15Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/slowlog/TestSlowLogRecorder.java", "diffHunk": "@@ -93,12 +91,14 @@ private static Configuration applySlowLogRecorderConf(int eventSize) {\n    * @param i index of ringbuffer logs\n    * @param j data value that was put on index i\n    * @param slowLogPayloads list of payload retrieved from {@link SlowLogRecorder}\n+   * @return if actual values are as per expectations\n    */\n-  private void confirmPayloadParams(int i, int j, List<SlowLogPayload> slowLogPayloads) {\n+  private boolean confirmPayloadParams(int i, int j, List<SlowLogPayload> slowLogPayloads) {\n \n-    Assert.assertEquals(slowLogPayloads.get(i).getClientAddress(), \"client_\" + j);\n-    Assert.assertEquals(slowLogPayloads.get(i).getUserName(), \"userName_\" + j);\n-    Assert.assertEquals(slowLogPayloads.get(i).getServerClass(), \"class_\" + j);\n+    boolean isClientExpected = slowLogPayloads.get(i).getClientAddress().equals(\"client_\" + j);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTE1MA==", "bodyText": "I don't understand why these tests are executed within the timeout window. How does that make the tests more reliable?", "url": "https://github.com/apache/hbase/pull/1286#discussion_r393391150", "createdAt": "2020-03-17T01:05:31Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/slowlog/TestSlowLogRecorder.java", "diffHunk": "@@ -140,12 +141,16 @@ public void testOnlieSlowLogConsumption() throws Exception {\n     Assert.assertNotEquals(-1, HBASE_TESTING_UTILITY.waitFor(3000,\n       () -> slowLogRecorder.getSlowLogPayloads(request).size() == 7));\n \n-    slowLogPayloads = slowLogRecorder.getSlowLogPayloads(request);\n-\n-    Assert.assertEquals(slowLogPayloads.size(), 7);\n-    confirmPayloadParams(0, 7, slowLogPayloads);\n-    confirmPayloadParams(5, 2, slowLogPayloads);\n-    confirmPayloadParams(6, 1, slowLogPayloads);\n+    Assert.assertNotEquals(-1, HBASE_TESTING_UTILITY.waitFor(3000,\n+      () -> {\n+        List<SlowLogPayload> slowLogPayloadsList = slowLogRecorder.getSlowLogPayloads(request);\n+        Assert.assertEquals(slowLogPayloadsList.size(), 7);\n+        boolean b1 = confirmPayloadParams(0, 7, slowLogPayloadsList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTQzNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/hbase/pull/1286#discussion_r393391435", "createdAt": "2020-03-17T01:06:38Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/slowlog/TestSlowLogRecorder.java", "diffHunk": "@@ -261,10 +287,12 @@ public void testOnlineSlowLogWithDefaultDisableConfig() throws Exception {\n       slowLogRecorder.addSlowLogPayload(rpcLogDetails);\n     }\n \n-    Uninterruptibles.sleepUninterruptibly(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "originalPosition": 212}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTA1MDMx", "url": "https://github.com/apache/hbase/pull/1286#pullrequestreview-378105031", "createdAt": "2020-03-19T21:25:20Z", "commit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMToyNToyMFrOF5A8Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMTozMTowM1rOF5BGHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMyODU3MQ==", "bodyText": "It's a style consideration... not a strong concern. I find it easier to read if you did something like\nreturn doThingA()\n  && doThingB()\n  && doThingC();\nbecause in this case, there's no chance for any of them to be accidentally forgotten. Not as important here where there's only 3, but down below you do quite a few, so that's where I think it helps.", "url": "https://github.com/apache/hbase/pull/1286#discussion_r395328571", "createdAt": "2020-03-19T21:25:20Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/slowlog/TestSlowLogRecorder.java", "diffHunk": "@@ -93,12 +91,14 @@ private static Configuration applySlowLogRecorderConf(int eventSize) {\n    * @param i index of ringbuffer logs\n    * @param j data value that was put on index i\n    * @param slowLogPayloads list of payload retrieved from {@link SlowLogRecorder}\n+   * @return if actual values are as per expectations\n    */\n-  private void confirmPayloadParams(int i, int j, List<SlowLogPayload> slowLogPayloads) {\n+  private boolean confirmPayloadParams(int i, int j, List<SlowLogPayload> slowLogPayloads) {\n \n-    Assert.assertEquals(slowLogPayloads.get(i).getClientAddress(), \"client_\" + j);\n-    Assert.assertEquals(slowLogPayloads.get(i).getUserName(), \"userName_\" + j);\n-    Assert.assertEquals(slowLogPayloads.get(i).getServerClass(), \"class_\" + j);\n+    boolean isClientExpected = slowLogPayloads.get(i).getClientAddress().equals(\"client_\" + j);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MDU3Mw=="}, "originalCommit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMDM5MQ==", "bodyText": "Oh, I see. So you're actually using waitFor as a retry mechanism. That's not how I imagined using it, but so long as those inner asserts don't interfere with the retry, I guess that's fine.\nWhat happens when the inner Assert.assertEquals(slowLogPayloadsList.size(), 7); throws? Does waitFor retry that, or does it simply fail? If the latter, the test is still flakey. I would loop until I have all the data and then perform the asserts at the end.", "url": "https://github.com/apache/hbase/pull/1286#discussion_r395330391", "createdAt": "2020-03-19T21:29:37Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/slowlog/TestSlowLogRecorder.java", "diffHunk": "@@ -140,12 +141,16 @@ public void testOnlieSlowLogConsumption() throws Exception {\n     Assert.assertNotEquals(-1, HBASE_TESTING_UTILITY.waitFor(3000,\n       () -> slowLogRecorder.getSlowLogPayloads(request).size() == 7));\n \n-    slowLogPayloads = slowLogRecorder.getSlowLogPayloads(request);\n-\n-    Assert.assertEquals(slowLogPayloads.size(), 7);\n-    confirmPayloadParams(0, 7, slowLogPayloads);\n-    confirmPayloadParams(5, 2, slowLogPayloads);\n-    confirmPayloadParams(6, 1, slowLogPayloads);\n+    Assert.assertNotEquals(-1, HBASE_TESTING_UTILITY.waitFor(3000,\n+      () -> {\n+        List<SlowLogPayload> slowLogPayloadsList = slowLogRecorder.getSlowLogPayloads(request);\n+        Assert.assertEquals(slowLogPayloadsList.size(), 7);\n+        boolean b1 = confirmPayloadParams(0, 7, slowLogPayloadsList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM5MTE1MA=="}, "originalCommit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTMzMTEwMA==", "bodyText": "Yeah, so here's the example where all these intermediate variables make this hard to know it's correct on a quick glance. If it was a chain of return foo && bar && biz && ..., it's obvious that all components are considered.", "url": "https://github.com/apache/hbase/pull/1286#discussion_r395331100", "createdAt": "2020-03-19T21:31:03Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/slowlog/TestSlowLogRecorder.java", "diffHunk": "@@ -214,29 +234,35 @@ public void testOnlineSlowLogWithHighRecords() throws Exception {\n     Assert.assertNotEquals(-1, HBASE_TESTING_UTILITY.waitFor(3000,\n       () -> slowLogRecorder.getSlowLogPayloads(request).size() == 14));\n \n-    List<SlowLogPayload> slowLogPayloads = slowLogRecorder.getSlowLogPayloads(request);\n-    Assert.assertEquals(slowLogPayloads.size(), 14);\n-\n-    // confirm strict order of slow log payloads\n-    confirmPayloadParams(0, 154, slowLogPayloads);\n-    confirmPayloadParams(1, 153, slowLogPayloads);\n-    confirmPayloadParams(2, 152, slowLogPayloads);\n-    confirmPayloadParams(3, 151, slowLogPayloads);\n-    confirmPayloadParams(4, 150, slowLogPayloads);\n-    confirmPayloadParams(5, 149, slowLogPayloads);\n-    confirmPayloadParams(6, 148, slowLogPayloads);\n-    confirmPayloadParams(7, 147, slowLogPayloads);\n-    confirmPayloadParams(8, 146, slowLogPayloads);\n-    confirmPayloadParams(9, 145, slowLogPayloads);\n-    confirmPayloadParams(10, 144, slowLogPayloads);\n-    confirmPayloadParams(11, 143, slowLogPayloads);\n-    confirmPayloadParams(12, 142, slowLogPayloads);\n-    confirmPayloadParams(13, 141, slowLogPayloads);\n+    Assert.assertNotEquals(-1, HBASE_TESTING_UTILITY.waitFor(3000,\n+      () -> {\n+        List<SlowLogPayload> slowLogPayloads = slowLogRecorder.getSlowLogPayloads(request);\n+        boolean b1 = slowLogPayloads.size() == 14;\n+\n+        // confirm strict order of slow log payloads\n+        boolean b2 = confirmPayloadParams(0, 154, slowLogPayloads);\n+        boolean b3 = confirmPayloadParams(1, 153, slowLogPayloads);\n+        boolean b4 = confirmPayloadParams(2, 152, slowLogPayloads);\n+        boolean b5 = confirmPayloadParams(3, 151, slowLogPayloads);\n+        boolean b6 = confirmPayloadParams(4, 150, slowLogPayloads);\n+        boolean b7 = confirmPayloadParams(5, 149, slowLogPayloads);\n+        boolean b8 = confirmPayloadParams(6, 148, slowLogPayloads);\n+        boolean b9 = confirmPayloadParams(7, 147, slowLogPayloads);\n+        boolean b10 = confirmPayloadParams(8, 146, slowLogPayloads);\n+        boolean b11 = confirmPayloadParams(9, 145, slowLogPayloads);\n+        boolean b12 = confirmPayloadParams(10, 144, slowLogPayloads);\n+        boolean b13 = confirmPayloadParams(11, 143, slowLogPayloads);\n+        boolean b14 = confirmPayloadParams(12, 142, slowLogPayloads);\n+        boolean b15 = confirmPayloadParams(13, 141, slowLogPayloads);\n+        return b1 && b2 && b3 && b4 && b5 && b6 && b7 && b8 && b9 && b10 && b11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ecdae2d0416a53de084fadb5238f8fbb03ae17"}, "originalPosition": 195}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2660, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}