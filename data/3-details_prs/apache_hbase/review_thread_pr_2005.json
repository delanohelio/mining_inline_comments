{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMzYzMTg5", "number": 2005, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNDo0OFrOENVVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNjo0M1rOENVYUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDE2NTgyOnYy", "diffSide": "RIGHT", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/DumpClusterStatusAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNDo0OFrOGv9TVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNDo0OFrOGv9TVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MDYyOA==", "bodyText": "nit: lambda expression address -> stringBuilder.append(\"\\n  \").append(address)", "url": "https://github.com/apache/hbase/pull/2005#discussion_r452940628", "createdAt": "2020-07-10T16:14:48Z", "author": {"login": "virajjasani"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/DumpClusterStatusAction.java", "diffHunk": "@@ -28,18 +35,69 @@\n public class DumpClusterStatusAction extends Action {\n   private static final Logger LOG = LoggerFactory.getLogger(DumpClusterStatusAction.class);\n \n-  @Override protected Logger getLogger() {\n+  private Set<Address> initialRegionServers;\n+\n+  @Override\n+  protected Logger getLogger() {\n     return LOG;\n   }\n \n   @Override\n   public void init(ActionContext context) throws IOException {\n     super.init(context);\n+    initialRegionServers = collectKnownRegionServers(initialStatus);\n   }\n \n   @Override\n   public void perform() throws Exception {\n     getLogger().debug(\"Performing action: Dump cluster status\");\n-    getLogger().info(\"Cluster status\\n\" + cluster.getClusterMetrics());\n+    final ClusterMetrics currentMetrics = cluster.getClusterMetrics();\n+    getLogger().info(\"Cluster status\\n{}\", currentMetrics);\n+    reportMissingRegionServers(currentMetrics);\n+    reportNewRegionServers(currentMetrics);\n+  }\n+\n+  /**\n+   * Build a set of all the host:port pairs of region servers known to this cluster.\n+   */\n+  private static Set<Address> collectKnownRegionServers(final ClusterMetrics clusterMetrics) {\n+    final Set<Address> regionServers = clusterMetrics.getLiveServerMetrics()\n+      .keySet()\n+      .stream()\n+      .map(ServerName::getAddress)\n+      .collect(Collectors.toSet());\n+    clusterMetrics.getDeadServerNames()\n+      .stream()\n+      .map(ServerName::getAddress)\n+      .forEach(regionServers::add);\n+    return Collections.unmodifiableSet(regionServers);\n+  }\n+\n+  private void reportMissingRegionServers(final ClusterMetrics clusterMetrics) {\n+    final Set<Address> regionServers = collectKnownRegionServers(clusterMetrics);\n+    final Set<Address> missingRegionServers = new HashSet<>(initialRegionServers);\n+    missingRegionServers.removeAll(regionServers);\n+    if (!missingRegionServers.isEmpty()) {\n+      final StringBuilder stringBuilder = new StringBuilder()\n+        .append(\"region server(s) are missing from this cluster report\");\n+      missingRegionServers.forEach(address -> {\n+        stringBuilder.append(\"\\n  \").append(address);\n+      });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200deb7984cf63274801022e7a89673ae5495f1d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDE3MjM0OnYy", "diffSide": "RIGHT", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/DumpClusterStatusAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNjo0M1rOGv9XWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxNjo0M1rOGv9XWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MTY1Nw==", "bodyText": "same here", "url": "https://github.com/apache/hbase/pull/2005#discussion_r452941657", "createdAt": "2020-07-10T16:16:43Z", "author": {"login": "virajjasani"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/chaos/actions/DumpClusterStatusAction.java", "diffHunk": "@@ -28,18 +35,69 @@\n public class DumpClusterStatusAction extends Action {\n   private static final Logger LOG = LoggerFactory.getLogger(DumpClusterStatusAction.class);\n \n-  @Override protected Logger getLogger() {\n+  private Set<Address> initialRegionServers;\n+\n+  @Override\n+  protected Logger getLogger() {\n     return LOG;\n   }\n \n   @Override\n   public void init(ActionContext context) throws IOException {\n     super.init(context);\n+    initialRegionServers = collectKnownRegionServers(initialStatus);\n   }\n \n   @Override\n   public void perform() throws Exception {\n     getLogger().debug(\"Performing action: Dump cluster status\");\n-    getLogger().info(\"Cluster status\\n\" + cluster.getClusterMetrics());\n+    final ClusterMetrics currentMetrics = cluster.getClusterMetrics();\n+    getLogger().info(\"Cluster status\\n{}\", currentMetrics);\n+    reportMissingRegionServers(currentMetrics);\n+    reportNewRegionServers(currentMetrics);\n+  }\n+\n+  /**\n+   * Build a set of all the host:port pairs of region servers known to this cluster.\n+   */\n+  private static Set<Address> collectKnownRegionServers(final ClusterMetrics clusterMetrics) {\n+    final Set<Address> regionServers = clusterMetrics.getLiveServerMetrics()\n+      .keySet()\n+      .stream()\n+      .map(ServerName::getAddress)\n+      .collect(Collectors.toSet());\n+    clusterMetrics.getDeadServerNames()\n+      .stream()\n+      .map(ServerName::getAddress)\n+      .forEach(regionServers::add);\n+    return Collections.unmodifiableSet(regionServers);\n+  }\n+\n+  private void reportMissingRegionServers(final ClusterMetrics clusterMetrics) {\n+    final Set<Address> regionServers = collectKnownRegionServers(clusterMetrics);\n+    final Set<Address> missingRegionServers = new HashSet<>(initialRegionServers);\n+    missingRegionServers.removeAll(regionServers);\n+    if (!missingRegionServers.isEmpty()) {\n+      final StringBuilder stringBuilder = new StringBuilder()\n+        .append(\"region server(s) are missing from this cluster report\");\n+      missingRegionServers.forEach(address -> {\n+        stringBuilder.append(\"\\n  \").append(address);\n+      });\n+      getLogger().warn(stringBuilder.toString());\n+    }\n+  }\n+\n+  private void reportNewRegionServers(final ClusterMetrics clusterMetrics) {\n+    final Set<Address> regionServers = collectKnownRegionServers(clusterMetrics);\n+    final Set<Address> newRegionServers = new HashSet<>(regionServers);\n+    newRegionServers.removeAll(initialRegionServers);\n+    if (!newRegionServers.isEmpty()) {\n+      final StringBuilder stringBuilder = new StringBuilder()\n+        .append(\"region server(s) are new for this cluster report\");\n+      newRegionServers.forEach(address -> {\n+        stringBuilder.append(\"\\n  \").append(address);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "200deb7984cf63274801022e7a89673ae5495f1d"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2892, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}