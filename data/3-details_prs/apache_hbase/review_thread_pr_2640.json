{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MTQ2NzM0", "number": 2640, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMjo1OTozMFrOE3Ca8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo0MzozNFrOE3UGaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTQ2ODAwOnYy", "diffSide": "LEFT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMjo1OTozMFrOHwJ3Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo0MDo0M1rOHw3gjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NTI2Ng==", "bodyText": "I can not recall whether I have mentioned this on the patch for master. The scope of 'useMetaReplicas' is wider than the newly introduced metaReplicaMode, as it could also effect the methods in Admin implementation, so I do not think we could remove it directly. If we want to do so, we'd better follow the typical rule to deprecated it first and then remove it in the next major release.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520255266", "createdAt": "2020-11-10T02:59:30Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -161,7 +165,11 @@\n   private final boolean hostnamesCanChange;\n   private final long pause;\n   private final long pauseForCQTBE;// pause for CallQueueTooBigException, if specified\n-  private boolean useMetaReplicas;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc4MDU1MA==", "bodyText": "Let me explain a bit here. The old behavior for 'useMetaReplicas' is kept, no change of that. The flag is consolidated to the mode as the mode flag also supports the old behavior. Looking at the code, 'useMetaReplicas' only supports the region locator at this moment. The config is kept in case 'META_REPLICA_USE' needs to support a broader scope. This is just an implementation consolidation.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520780550", "createdAt": "2020-11-10T18:32:14Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -161,7 +165,11 @@\n   private final boolean hostnamesCanChange;\n   private final long pause;\n   private final long pauseForCQTBE;// pause for CallQueueTooBigException, if specified\n-  private boolean useMetaReplicas;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NTI2Ng=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwMzE0OQ==", "bodyText": "OK, I got your point. Here the' useMetaReplicas' flag is only for locating region, so it is fine to remove it. The \"hbase.meta.replicas.use\" config will still be honored here, and at other places, we will still check the \"hbase.meta.replicas.use\" config separately.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r521003149", "createdAt": "2020-11-11T01:40:43Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -161,7 +165,11 @@\n   private final boolean hostnamesCanChange;\n   private final long pause;\n   private final long pauseForCQTBE;// pause for CallQueueTooBigException, if specified\n-  private boolean useMetaReplicas;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NTI2Ng=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTQ3Mzk1OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzowMjozN1rOHwJ6kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzoyMzo0N1rOHwzhYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NjE0Ng==", "bodyText": "This is a bit strange, TIMELINE means we should send request to primary first and if it does not come back in time, we switch to secondary replicas. IIRC the design here is that, if targetReplicaId is -1, we follow the rule of STRONG or TIMELINE, if targetReplicaId is not -1, we will go to the specific replica directly?", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520256146", "createdAt": "2020-11-10T03:02:37Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java", "diffHunk": "@@ -64,7 +64,9 @@ protected boolean setNewStartKey() {\n \n   @Override\n   protected ReversedScannerCallable createScannerCallable() {\n+    // In case of meta, we want to support scan over a replica region.\n+    int replicaId = (scan.getConsistency() == Consistency.TIMELINE) ? scan.getReplicaId() : 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2OTU5Nw==", "bodyText": "My previous comment is incorrect(removed it). let me visit it again. Just found out the targetReplicaId is initialized to -1. Testing also fails, let me debug first.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520869597", "createdAt": "2020-11-10T20:58:15Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java", "diffHunk": "@@ -64,7 +64,9 @@ protected boolean setNewStartKey() {\n \n   @Override\n   protected ReversedScannerCallable createScannerCallable() {\n+    // In case of meta, we want to support scan over a replica region.\n+    int replicaId = (scan.getConsistency() == Consistency.TIMELINE) ? scan.getReplicaId() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NjE0Ng=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MjA2Mw==", "bodyText": "Just found out that what you said is correct.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520872063", "createdAt": "2020-11-10T21:02:55Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java", "diffHunk": "@@ -64,7 +64,9 @@ protected boolean setNewStartKey() {\n \n   @Override\n   protected ReversedScannerCallable createScannerCallable() {\n+    // In case of meta, we want to support scan over a replica region.\n+    int replicaId = (scan.getConsistency() == Consistency.TIMELINE) ? scan.getReplicaId() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NjE0Ng=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MzUyNQ==", "bodyText": "However, I introduced a bug here. For Consistency.TIMELINE, if scan is targeted to a specific replica region, replicaId is -1, which is incorrect. For this case, it also needs to pass in 0.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520883525", "createdAt": "2020-11-10T21:25:45Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java", "diffHunk": "@@ -64,7 +64,9 @@ protected boolean setNewStartKey() {\n \n   @Override\n   protected ReversedScannerCallable createScannerCallable() {\n+    // In case of meta, we want to support scan over a replica region.\n+    int replicaId = (scan.getConsistency() == Consistency.TIMELINE) ? scan.getReplicaId() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NjE0Ng=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNzgyNA==", "bodyText": "For testing failures, it is my misunderstanding of the default targetReplicaId is 0 (actually it is -1). Introduce a utility method to differentiate the case for scan over a specific replica region in TIMELINE mode.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520937824", "createdAt": "2020-11-10T23:23:47Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ReversedClientScanner.java", "diffHunk": "@@ -64,7 +64,9 @@ protected boolean setNewStartKey() {\n \n   @Override\n   protected ReversedScannerCallable createScannerCallable() {\n+    // In case of meta, we want to support scan over a replica region.\n+    int replicaId = (scan.getConsistency() == Consistency.TIMELINE) ? scan.getReplicaId() : 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NjE0Ng=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MTQ3NDk2OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallableWithReplicas.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzowMzoxNVrOHwJ7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwMzowMzoxNVrOHwJ7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDI1NjMwMA==", "bodyText": "Put static import on top?", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520256300", "createdAt": "2020-11-10T03:03:15Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ScannerCallableWithReplicas.java", "diffHunk": "@@ -42,13 +42,15 @@\n import org.slf4j.LoggerFactory;\n import org.apache.hadoop.hbase.client.ScannerCallable.MoreResults;\n import org.apache.hadoop.hbase.util.Pair;\n+import static org.apache.hadoop.hbase.client.RegionReplicaUtil.DEFAULT_REPLICA_ID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDMxNjAxOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjozMzowM1rOHwlFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODo1MToyMVrOHwqyLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwMTM0NA==", "bodyText": "Is this code duplicated? Does it have to be?", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520701344", "createdAt": "2020-11-10T16:33:03Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -332,19 +338,59 @@ public void newDead(ServerName sn) {\n       close();\n       throw e;\n     }\n+\n+    // Get the region locator's meta replica mode.\n+    this.metaReplicaMode = CatalogReplicaMode.fromString(conf.get(LOCATOR_META_REPLICAS_MODE,\n+      CatalogReplicaMode.NONE.toString()));\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        String replicaSelectorClass = conf.get(\n+          RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,\n+          CatalogReplicaLoadBalanceSimpleSelector.class.getName());\n+\n+        this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory.createSelector(\n+          replicaSelectorClass, META_TABLE_NAME, getChoreService(), () -> {\n+            int numOfReplicas = 1;\n+            try {\n+              RegionLocations metaLocations = registry.getMetaRegionLocations().get(\n+                connectionConfig.getReadRpcTimeout(), TimeUnit.MILLISECONDS);\n+              numOfReplicas = metaLocations.size();\n+            } catch (Exception e) {\n+              LOG.error(\"Failed to get table {}'s region replication, \", META_TABLE_NAME, e);\n+            }\n+            return numOfReplicas;\n+          });\n+        break;\n+      case NONE:\n+        // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.\n+\n+        boolean useMetaReplicas = conf.getBoolean(USE_META_REPLICAS,\n+          DEFAULT_USE_META_REPLICAS);\n+        if (useMetaReplicas) {\n+          this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;\n+        }\n+        break;\n+      default:\n+        // Doing nothing\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc5NDY3MA==", "bodyText": "Yeah, this part of code is duplicated from AsyncNonMetaLocator. When this logic is encaped into CatalogManager class, this duplication will go away  (HBASE-25247).", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520794670", "createdAt": "2020-11-10T18:51:21Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -332,19 +338,59 @@ public void newDead(ServerName sn) {\n       close();\n       throw e;\n     }\n+\n+    // Get the region locator's meta replica mode.\n+    this.metaReplicaMode = CatalogReplicaMode.fromString(conf.get(LOCATOR_META_REPLICAS_MODE,\n+      CatalogReplicaMode.NONE.toString()));\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        String replicaSelectorClass = conf.get(\n+          RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,\n+          CatalogReplicaLoadBalanceSimpleSelector.class.getName());\n+\n+        this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory.createSelector(\n+          replicaSelectorClass, META_TABLE_NAME, getChoreService(), () -> {\n+            int numOfReplicas = 1;\n+            try {\n+              RegionLocations metaLocations = registry.getMetaRegionLocations().get(\n+                connectionConfig.getReadRpcTimeout(), TimeUnit.MILLISECONDS);\n+              numOfReplicas = metaLocations.size();\n+            } catch (Exception e) {\n+              LOG.error(\"Failed to get table {}'s region replication, \", META_TABLE_NAME, e);\n+            }\n+            return numOfReplicas;\n+          });\n+        break;\n+      case NONE:\n+        // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.\n+\n+        boolean useMetaReplicas = conf.getBoolean(USE_META_REPLICAS,\n+          DEFAULT_USE_META_REPLICAS);\n+        if (useMetaReplicas) {\n+          this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;\n+        }\n+        break;\n+      default:\n+        // Doing nothing\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwMTM0NA=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM2Mjg4OnYy", "diffSide": "LEFT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo0MzowOVrOHwlibQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMToxMzozMlrOHxegFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwODcxNw==", "bodyText": "I was wondering about the @Apache9 comment above on scope. I was thinking this a @Private class so we should be able to change internals but I see now this method exposes our internal useMetaReplicas.\nIts a weird method though. Package protected for testing only? The test shouldn't do this? Should change config rather than this method? Probably ok to add @deprecated.... to be replaced by nothing.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520708717", "createdAt": "2020-11-10T16:43:09Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -332,19 +338,59 @@ public void newDead(ServerName sn) {\n       close();\n       throw e;\n     }\n+\n+    // Get the region locator's meta replica mode.\n+    this.metaReplicaMode = CatalogReplicaMode.fromString(conf.get(LOCATOR_META_REPLICAS_MODE,\n+      CatalogReplicaMode.NONE.toString()));\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        String replicaSelectorClass = conf.get(\n+          RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,\n+          CatalogReplicaLoadBalanceSimpleSelector.class.getName());\n+\n+        this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory.createSelector(\n+          replicaSelectorClass, META_TABLE_NAME, getChoreService(), () -> {\n+            int numOfReplicas = 1;\n+            try {\n+              RegionLocations metaLocations = registry.getMetaRegionLocations().get(\n+                connectionConfig.getReadRpcTimeout(), TimeUnit.MILLISECONDS);\n+              numOfReplicas = metaLocations.size();\n+            } catch (Exception e) {\n+              LOG.error(\"Failed to get table {}'s region replication, \", META_TABLE_NAME, e);\n+            }\n+            return numOfReplicas;\n+          });\n+        break;\n+      case NONE:\n+        // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.\n+\n+        boolean useMetaReplicas = conf.getBoolean(USE_META_REPLICAS,\n+          DEFAULT_USE_META_REPLICAS);\n+        if (useMetaReplicas) {\n+          this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;\n+        }\n+        break;\n+      default:\n+        // Doing nothing\n+    }\n   }\n \n   private void spawnRenewalChore(final UserGroupInformation user) {\n-    authService = new ChoreService(\"Relogin service\");\n-    authService.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n+    ChoreService service = getChoreService();\n+    service.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n   }\n \n   /**\n    * @param useMetaReplicas\n    */\n   @VisibleForTesting\n   void setUseMetaReplicas(final boolean useMetaReplicas) {\n-    this.useMetaReplicas = useMetaReplicas;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDgxNTQ5OQ==", "bodyText": "Yeah, this method is only used for testing purpose. Just found out that it was added by me, working on removing it.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520815499", "createdAt": "2020-11-10T19:19:58Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -332,19 +338,59 @@ public void newDead(ServerName sn) {\n       close();\n       throw e;\n     }\n+\n+    // Get the region locator's meta replica mode.\n+    this.metaReplicaMode = CatalogReplicaMode.fromString(conf.get(LOCATOR_META_REPLICAS_MODE,\n+      CatalogReplicaMode.NONE.toString()));\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        String replicaSelectorClass = conf.get(\n+          RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,\n+          CatalogReplicaLoadBalanceSimpleSelector.class.getName());\n+\n+        this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory.createSelector(\n+          replicaSelectorClass, META_TABLE_NAME, getChoreService(), () -> {\n+            int numOfReplicas = 1;\n+            try {\n+              RegionLocations metaLocations = registry.getMetaRegionLocations().get(\n+                connectionConfig.getReadRpcTimeout(), TimeUnit.MILLISECONDS);\n+              numOfReplicas = metaLocations.size();\n+            } catch (Exception e) {\n+              LOG.error(\"Failed to get table {}'s region replication, \", META_TABLE_NAME, e);\n+            }\n+            return numOfReplicas;\n+          });\n+        break;\n+      case NONE:\n+        // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.\n+\n+        boolean useMetaReplicas = conf.getBoolean(USE_META_REPLICAS,\n+          DEFAULT_USE_META_REPLICAS);\n+        if (useMetaReplicas) {\n+          this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;\n+        }\n+        break;\n+      default:\n+        // Doing nothing\n+    }\n   }\n \n   private void spawnRenewalChore(final UserGroupInformation user) {\n-    authService = new ChoreService(\"Relogin service\");\n-    authService.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n+    ChoreService service = getChoreService();\n+    service.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n   }\n \n   /**\n    * @param useMetaReplicas\n    */\n   @VisibleForTesting\n   void setUseMetaReplicas(final boolean useMetaReplicas) {\n-    this.useMetaReplicas = useMetaReplicas;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwODcxNw=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDk2MTU4Mg==", "bodyText": "will work on this later tonight.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520961582", "createdAt": "2020-11-11T00:31:57Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -332,19 +338,59 @@ public void newDead(ServerName sn) {\n       close();\n       throw e;\n     }\n+\n+    // Get the region locator's meta replica mode.\n+    this.metaReplicaMode = CatalogReplicaMode.fromString(conf.get(LOCATOR_META_REPLICAS_MODE,\n+      CatalogReplicaMode.NONE.toString()));\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        String replicaSelectorClass = conf.get(\n+          RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,\n+          CatalogReplicaLoadBalanceSimpleSelector.class.getName());\n+\n+        this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory.createSelector(\n+          replicaSelectorClass, META_TABLE_NAME, getChoreService(), () -> {\n+            int numOfReplicas = 1;\n+            try {\n+              RegionLocations metaLocations = registry.getMetaRegionLocations().get(\n+                connectionConfig.getReadRpcTimeout(), TimeUnit.MILLISECONDS);\n+              numOfReplicas = metaLocations.size();\n+            } catch (Exception e) {\n+              LOG.error(\"Failed to get table {}'s region replication, \", META_TABLE_NAME, e);\n+            }\n+            return numOfReplicas;\n+          });\n+        break;\n+      case NONE:\n+        // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.\n+\n+        boolean useMetaReplicas = conf.getBoolean(USE_META_REPLICAS,\n+          DEFAULT_USE_META_REPLICAS);\n+        if (useMetaReplicas) {\n+          this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;\n+        }\n+        break;\n+      default:\n+        // Doing nothing\n+    }\n   }\n \n   private void spawnRenewalChore(final UserGroupInformation user) {\n-    authService = new ChoreService(\"Relogin service\");\n-    authService.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n+    ChoreService service = getChoreService();\n+    service.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n   }\n \n   /**\n    * @param useMetaReplicas\n    */\n   @VisibleForTesting\n   void setUseMetaReplicas(final boolean useMetaReplicas) {\n-    this.useMetaReplicas = useMetaReplicas;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwODcxNw=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTY0MjAwNw==", "bodyText": "Pushed a commit which removes setUseMetaReplicas().", "url": "https://github.com/apache/hbase/pull/2640#discussion_r521642007", "createdAt": "2020-11-11T21:13:32Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -332,19 +338,59 @@ public void newDead(ServerName sn) {\n       close();\n       throw e;\n     }\n+\n+    // Get the region locator's meta replica mode.\n+    this.metaReplicaMode = CatalogReplicaMode.fromString(conf.get(LOCATOR_META_REPLICAS_MODE,\n+      CatalogReplicaMode.NONE.toString()));\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        String replicaSelectorClass = conf.get(\n+          RegionLocator.LOCATOR_META_REPLICAS_MODE_LOADBALANCE_SELECTOR,\n+          CatalogReplicaLoadBalanceSimpleSelector.class.getName());\n+\n+        this.metaReplicaSelector = CatalogReplicaLoadBalanceSelectorFactory.createSelector(\n+          replicaSelectorClass, META_TABLE_NAME, getChoreService(), () -> {\n+            int numOfReplicas = 1;\n+            try {\n+              RegionLocations metaLocations = registry.getMetaRegionLocations().get(\n+                connectionConfig.getReadRpcTimeout(), TimeUnit.MILLISECONDS);\n+              numOfReplicas = metaLocations.size();\n+            } catch (Exception e) {\n+              LOG.error(\"Failed to get table {}'s region replication, \", META_TABLE_NAME, e);\n+            }\n+            return numOfReplicas;\n+          });\n+        break;\n+      case NONE:\n+        // If user does not configure LOCATOR_META_REPLICAS_MODE, let's check the legacy config.\n+\n+        boolean useMetaReplicas = conf.getBoolean(USE_META_REPLICAS,\n+          DEFAULT_USE_META_REPLICAS);\n+        if (useMetaReplicas) {\n+          this.metaReplicaMode = CatalogReplicaMode.HEDGED_READ;\n+        }\n+        break;\n+      default:\n+        // Doing nothing\n+    }\n   }\n \n   private void spawnRenewalChore(final UserGroupInformation user) {\n-    authService = new ChoreService(\"Relogin service\");\n-    authService.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n+    ChoreService service = getChoreService();\n+    service.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n   }\n \n   /**\n    * @param useMetaReplicas\n    */\n   @VisibleForTesting\n   void setUseMetaReplicas(final boolean useMetaReplicas) {\n-    this.useMetaReplicas = useMetaReplicas;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwODcxNw=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDM2NDU5OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjo0MzozNFrOHwljeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMzoxOTo1OFrOHwzb0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwODk4NA==", "bodyText": "Yeah, this a dupe too?", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520708984", "createdAt": "2020-11-10T16:43:34Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -841,8 +898,23 @@ private RegionLocations locateRegionInMeta(TableName tableName, byte[] row, bool\n     Scan s = new Scan().withStartRow(metaStartKey).withStopRow(metaStopKey, true)\n       .addFamily(HConstants.CATALOG_FAMILY).setReversed(true).setCaching(5)\n       .setReadType(ReadType.PREAD);\n-    if (this.useMetaReplicas) {\n-      s.setConsistency(Consistency.TIMELINE);\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        int metaReplicaId = this.metaReplicaSelector.select(tableName, row,\n+          RegionLocateType.CURRENT);\n+        if (metaReplicaId != RegionInfo.DEFAULT_REPLICA_ID) {\n+          // If the selector gives a non-primary meta replica region, then go with it.\n+          // Otherwise, just go to primary in non-hedgedRead mode.\n+          s.setConsistency(Consistency.TIMELINE);\n+          s.setReplicaId(metaReplicaId);\n+        }\n+        break;\n+      case HEDGED_READ:\n+        s.setConsistency(Consistency.TIMELINE);\n+        break;\n+      default:\n+        // do nothing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDkzNjQwMQ==", "bodyText": "As explained above.", "url": "https://github.com/apache/hbase/pull/2640#discussion_r520936401", "createdAt": "2020-11-10T23:19:58Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionImplementation.java", "diffHunk": "@@ -841,8 +898,23 @@ private RegionLocations locateRegionInMeta(TableName tableName, byte[] row, bool\n     Scan s = new Scan().withStartRow(metaStartKey).withStopRow(metaStopKey, true)\n       .addFamily(HConstants.CATALOG_FAMILY).setReversed(true).setCaching(5)\n       .setReadType(ReadType.PREAD);\n-    if (this.useMetaReplicas) {\n-      s.setConsistency(Consistency.TIMELINE);\n+\n+    switch (this.metaReplicaMode) {\n+      case LOAD_BALANCE:\n+        int metaReplicaId = this.metaReplicaSelector.select(tableName, row,\n+          RegionLocateType.CURRENT);\n+        if (metaReplicaId != RegionInfo.DEFAULT_REPLICA_ID) {\n+          // If the selector gives a non-primary meta replica region, then go with it.\n+          // Otherwise, just go to primary in non-hedgedRead mode.\n+          s.setConsistency(Consistency.TIMELINE);\n+          s.setReplicaId(metaReplicaId);\n+        }\n+        break;\n+      case HEDGED_READ:\n+        s.setConsistency(Consistency.TIMELINE);\n+        break;\n+      default:\n+        // do nothing", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDcwODk4NA=="}, "originalCommit": {"oid": "8da5fb0de7d5fb448d6a57da73efcd9e72e5a910"}, "originalPosition": 149}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2371, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}