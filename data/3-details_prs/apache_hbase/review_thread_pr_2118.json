{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTg4NDA0", "number": 2118, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzo1NVrOERHnwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyNDo1NFrOERH12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg2MTE0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzo1NVrOG1p7Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzo1NVrOG1p7Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDYzMQ==", "bodyText": "nit, parameterized logging", "url": "https://github.com/apache/hbase/pull/2118#discussion_r458914631", "createdAt": "2020-07-22T16:17:55Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -513,8 +514,14 @@ public boolean replicate(ReplicateContext replicateContext) {\n \n     int numSinks = replicationSinkMgr.getNumSinks();\n     if (numSinks == 0) {\n-      LOG.warn(\"{} No replication sinks found, returning without replicating. \"\n-        + \"The source should retry with the same set of edits.\", logPeerId());\n+      if((System.currentTimeMillis() - lastSinkFetchTime) >= (maxRetriesMultiplier*1000)) {\n+        LOG.warn(\n+          \"No replication sinks found, returning without replicating. \"\n+            + \"The source should retry with the same set of edits. Not logging this again for \"\n+            + \"the next \" + maxRetriesMultiplier + \" seconds.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg3MzE3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyMDo1MFrOG1qC_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyNjoyMFrOG1qX2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNjYwNg==", "bodyText": "JVM will initialize this to zero which is of consequence to the log message (will make sure that you get the LOG.warn the first time).\nExplicitly initialize it here so with a comment so we know that?", "url": "https://github.com/apache/hbase/pull/2118#discussion_r458916606", "createdAt": "2020-07-22T16:20:50Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -127,6 +127,7 @@\n   private boolean dropOnDeletedTables;\n   private boolean dropOnDeletedColumnFamilies;\n   private boolean isSerial = false;\n+  private long lastSinkFetchTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMTk0NA==", "bodyText": "+1", "url": "https://github.com/apache/hbase/pull/2118#discussion_r458921944", "createdAt": "2020-07-22T16:26:20Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -127,6 +127,7 @@\n   private boolean dropOnDeletedTables;\n   private boolean dropOnDeletedColumnFamilies;\n   private boolean isSerial = false;\n+  private long lastSinkFetchTime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNjYwNg=="}, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg3NTc3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyMToyNVrOG1qEnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoxODozNlrOG2R8Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNzAyMA==", "bodyText": "Might it be helpful to include which peer (in the case that we have multiple) here?", "url": "https://github.com/apache/hbase/pull/2118#discussion_r458917020", "createdAt": "2020-07-22T16:21:25Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -513,8 +514,14 @@ public boolean replicate(ReplicateContext replicateContext) {\n \n     int numSinks = replicationSinkMgr.getNumSinks();\n     if (numSinks == 0) {\n-      LOG.warn(\"{} No replication sinks found, returning without replicating. \"\n-        + \"The source should retry with the same set of edits.\", logPeerId());\n+      if((System.currentTimeMillis() - lastSinkFetchTime) >= (maxRetriesMultiplier*1000)) {\n+        LOG.warn(\n+          \"No replication sinks found, returning without replicating. \"\n+            + \"The source should retry with the same set of edits. Not logging this again for \"\n+            + \"the next \" + maxRetriesMultiplier + \" seconds.\");\n+        lastSinkFetchTime = System.currentTimeMillis();\n+      }\n+      sleepForRetries(\"No sinks available at peer\", sleepMultiplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3MDIxMA==", "bodyText": "peer id is already been logged inside sleepForRetries method.", "url": "https://github.com/apache/hbase/pull/2118#discussion_r459570210", "createdAt": "2020-07-23T16:18:36Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -513,8 +514,14 @@ public boolean replicate(ReplicateContext replicateContext) {\n \n     int numSinks = replicationSinkMgr.getNumSinks();\n     if (numSinks == 0) {\n-      LOG.warn(\"{} No replication sinks found, returning without replicating. \"\n-        + \"The source should retry with the same set of edits.\", logPeerId());\n+      if((System.currentTimeMillis() - lastSinkFetchTime) >= (maxRetriesMultiplier*1000)) {\n+        LOG.warn(\n+          \"No replication sinks found, returning without replicating. \"\n+            + \"The source should retry with the same set of edits. Not logging this again for \"\n+            + \"the next \" + maxRetriesMultiplier + \" seconds.\");\n+        lastSinkFetchTime = System.currentTimeMillis();\n+      }\n+      sleepForRetries(\"No sinks available at peer\", sleepMultiplier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNzAyMA=="}, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg5NzE2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSinkManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyNDo1NFrOG1qSvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjoyMTozNlrOG2SDcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMDYzOQ==", "bodyText": "Doesn't look like HBaseReplicationEndpoint ever returns null. Guarding against custom endpoint implementations?\nWe should expose getRegionServers on a base-class or interface and explicitly say that we expect a non-null answer. Follow-on..\nIf easy, this would be good to write a quick unit test to cover this method.", "url": "https://github.com/apache/hbase/pull/2118#discussion_r458920639", "createdAt": "2020-07-22T16:24:54Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSinkManager.java", "diffHunk": "@@ -150,9 +151,14 @@ public synchronized void reportSinkSuccess(SinkPeer sinkPeer) {\n    */\n   public synchronized void chooseSinks() {\n     List<ServerName> slaveAddresses = endpoint.getRegionServers();\n-    Collections.shuffle(slaveAddresses, ThreadLocalRandom.current());\n-    int numSinks = (int) Math.ceil(slaveAddresses.size() * ratio);\n-    sinks = slaveAddresses.subList(0, numSinks);\n+    if(slaveAddresses==null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU3MjA4Mw==", "bodyText": "Doesn't look like HBaseReplicationEndpoint ever returns null. Guarding against custom endpoint implementations?\n\nYeah, that's indeed the case.\n\nWe should expose getRegionServers on a base-class or interface and explicitly say that we expect a non-null answer. Follow-on..\nIf easy, this would be good to write a quick unit test to cover this method.\n\nSo we can leave getRegionServers at HBaseReplicationEndpoint, emphasize it should never return null. I'm not sure a UT for this would be effective, though. Custom implementations of HBaseReplicationEndpoint returning null would still blow it at runtime.\n\nSo maybe we can safely log warning for if(slaveAddresses.size()==0) ?\n\nYeah, can just leave that.", "url": "https://github.com/apache/hbase/pull/2118#discussion_r459572083", "createdAt": "2020-07-23T16:21:36Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSinkManager.java", "diffHunk": "@@ -150,9 +151,14 @@ public synchronized void reportSinkSuccess(SinkPeer sinkPeer) {\n    */\n   public synchronized void chooseSinks() {\n     List<ServerName> slaveAddresses = endpoint.getRegionServers();\n-    Collections.shuffle(slaveAddresses, ThreadLocalRandom.current());\n-    int numSinks = (int) Math.ceil(slaveAddresses.size() * ratio);\n-    sinks = slaveAddresses.subList(0, numSinks);\n+    if(slaveAddresses==null){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMDYzOQ=="}, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Mzg5NzIwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSinkManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyNDo1NFrOG1qSxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoyNDo1NFrOG1qSxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkyMDY0NA==", "bodyText": "Further down in setRegionServers(fetchSlavesAddresses(this.getZkw())), fetchSlavesAddresses()is not returning null, but empty list. So maybe we can safely log warning for if(slaveAddresses.size()==0) ?", "url": "https://github.com/apache/hbase/pull/2118#discussion_r458920644", "createdAt": "2020-07-22T16:24:54Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSinkManager.java", "diffHunk": "@@ -150,9 +151,14 @@ public synchronized void reportSinkSuccess(SinkPeer sinkPeer) {\n    */\n   public synchronized void chooseSinks() {\n     List<ServerName> slaveAddresses = endpoint.getRegionServers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59372c7c05c49f322008310999dc81ea4f8e9944"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2696, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}