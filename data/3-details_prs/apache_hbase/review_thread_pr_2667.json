{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMTYzMzU2", "number": 2667, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoxMDo1OVrOE5_OcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzozNDoyN1rOE6R6SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjQwMTc3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoxMDo1OVrOH0x-Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMzo0MzoxNFrOH1ZCNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNjc2Ng==", "bodyText": "nit: \"getValidRegionIndex\"", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525106766", "createdAt": "2020-11-17T12:10:59Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "diffHunk": "@@ -615,6 +615,43 @@ private String getUniqueName() {\n     return lqis;\n   }\n \n+  /**\n+   * @param startEndKeys the start/end keys of regions belong to this table, the list in ascending\n+   *          order by start key\n+   * @param key the key need to find which region belong to\n+   * @param tableName table\n+   * @throws IOException the table has hole or overlap, need hbck tool to fix\n+   */\n+  private int getVaildRegionIndex(List<Pair<byte[], byte[]>> startEndKeys, byte[] key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0Njc0MA==", "bodyText": "sorry, a mistake", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525746740", "createdAt": "2020-11-18T03:43:14Z", "author": {"login": "nyl3532016"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "diffHunk": "@@ -615,6 +615,43 @@ private String getUniqueName() {\n     return lqis;\n   }\n \n+  /**\n+   * @param startEndKeys the start/end keys of regions belong to this table, the list in ascending\n+   *          order by start key\n+   * @param key the key need to find which region belong to\n+   * @param tableName table\n+   * @throws IOException the table has hole or overlap, need hbck tool to fix\n+   */\n+  private int getVaildRegionIndex(List<Pair<byte[], byte[]>> startEndKeys, byte[] key,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEwNjc2Ng=="}, "originalCommit": {"oid": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTQ2MzEyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzozNDoyN1rOH1P1GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQxMTowMjozNFrOH3ttJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTkyOQ==", "bodyText": "So if the hfile.endKey > region.endKey, we don't always split the file by region.endKey anymore? Can you explain what should be the ideal split point in this case?", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525595929", "createdAt": "2020-11-17T23:34:27Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "diffHunk": "@@ -647,51 +684,24 @@ private String getUniqueName() {\n       return null;\n     }\n     if (Bytes.compareTo(first.get(), last.get()) > 0) {\n-      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get()) +\n-        \" > \" + Bytes.toStringBinary(last.get()));\n-    }\n-    int idx =\n-      Collections.binarySearch(startEndKeys, Pair.newPair(first.get(), HConstants.EMPTY_END_ROW),\n-        (p1, p2) -> Bytes.compareTo(p1.getFirst(), p2.getFirst()));\n-    if (idx < 0) {\n-      // not on boundary, returns -(insertion index). Calculate region it\n-      // would be in.\n-      idx = -(idx + 1) - 1;\n-    }\n-    int indexForCallable = idx;\n-\n-    /*\n-     * we can consider there is a region hole in following conditions. 1) if idx < 0,then first\n-     * region info is lost. 2) if the endkey of a region is not equal to the startkey of the next\n-     * region. 3) if the endkey of the last region is not empty.\n-     */\n-    if (indexForCallable < 0) {\n-      throw new IOException(\"The first region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if ((indexForCallable == startEndKeys.size() - 1) &&\n-      !Bytes.equals(startEndKeys.get(indexForCallable).getSecond(), HConstants.EMPTY_BYTE_ARRAY)) {\n-      throw new IOException(\"The last region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if (indexForCallable + 1 < startEndKeys.size() &&\n-      !(Bytes.compareTo(startEndKeys.get(indexForCallable).getSecond(),\n-        startEndKeys.get(indexForCallable + 1).getFirst()) == 0)) {\n-      throw new IOException(\"The endkey of one region for table \" + tableName +\n-        \" is not equal to the startkey of the next region in hbase:meta.\" +\n-        \"Please use hbck tool to fix it first.\");\n+      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get())\n+          + \" > \" + Bytes.toStringBinary(last.get()));\n     }\n-\n-    boolean lastKeyInRange = Bytes.compareTo(last.get(), startEndKeys.get(idx).getSecond()) < 0 ||\n-      Bytes.equals(startEndKeys.get(idx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n+    int firstKeyRegionIdx = getVaildRegionIndex(startEndKeys, first.get(), tableName);\n+    boolean lastKeyInRange =\n+        Bytes.compareTo(last.get(), startEndKeys.get(firstKeyRegionIdx).getSecond()) < 0 || Bytes\n+            .equals(startEndKeys.get(firstKeyRegionIdx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n     if (!lastKeyInRange) {\n-      Pair<byte[], byte[]> startEndKey = startEndKeys.get(indexForCallable);\n-      List<LoadQueueItem> lqis =\n-        splitStoreFile(item, FutureUtils.get(conn.getAdmin().getDescriptor(tableName)),\n-            startEndKey.getSecond());\n+      int lastKeyRegionIdx = getVaildRegionIndex(startEndKeys, last.get(), tableName);\n+      int splitIdx = (firstKeyRegionIdx + lastKeyRegionIdx) / 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTc0NTUwOA==", "bodyText": "yes\uff0cif hfile span multi regions, for example A,B,C,D,E,F(the start key of these regions are in ascending order), we should use region C endkey to split, not region A. In this way, we can get equal .top and .bottom hfiles, reduce time complexity of split from O(n) to O(logn),decrease invoke of bulkLoad rpc to regionserver ,and also avoid write amplification during copyHFileHalf", "url": "https://github.com/apache/hbase/pull/2667#discussion_r525745508", "createdAt": "2020-11-18T03:41:56Z", "author": {"login": "nyl3532016"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "diffHunk": "@@ -647,51 +684,24 @@ private String getUniqueName() {\n       return null;\n     }\n     if (Bytes.compareTo(first.get(), last.get()) > 0) {\n-      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get()) +\n-        \" > \" + Bytes.toStringBinary(last.get()));\n-    }\n-    int idx =\n-      Collections.binarySearch(startEndKeys, Pair.newPair(first.get(), HConstants.EMPTY_END_ROW),\n-        (p1, p2) -> Bytes.compareTo(p1.getFirst(), p2.getFirst()));\n-    if (idx < 0) {\n-      // not on boundary, returns -(insertion index). Calculate region it\n-      // would be in.\n-      idx = -(idx + 1) - 1;\n-    }\n-    int indexForCallable = idx;\n-\n-    /*\n-     * we can consider there is a region hole in following conditions. 1) if idx < 0,then first\n-     * region info is lost. 2) if the endkey of a region is not equal to the startkey of the next\n-     * region. 3) if the endkey of the last region is not empty.\n-     */\n-    if (indexForCallable < 0) {\n-      throw new IOException(\"The first region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if ((indexForCallable == startEndKeys.size() - 1) &&\n-      !Bytes.equals(startEndKeys.get(indexForCallable).getSecond(), HConstants.EMPTY_BYTE_ARRAY)) {\n-      throw new IOException(\"The last region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if (indexForCallable + 1 < startEndKeys.size() &&\n-      !(Bytes.compareTo(startEndKeys.get(indexForCallable).getSecond(),\n-        startEndKeys.get(indexForCallable + 1).getFirst()) == 0)) {\n-      throw new IOException(\"The endkey of one region for table \" + tableName +\n-        \" is not equal to the startkey of the next region in hbase:meta.\" +\n-        \"Please use hbck tool to fix it first.\");\n+      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get())\n+          + \" > \" + Bytes.toStringBinary(last.get()));\n     }\n-\n-    boolean lastKeyInRange = Bytes.compareTo(last.get(), startEndKeys.get(idx).getSecond()) < 0 ||\n-      Bytes.equals(startEndKeys.get(idx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n+    int firstKeyRegionIdx = getVaildRegionIndex(startEndKeys, first.get(), tableName);\n+    boolean lastKeyInRange =\n+        Bytes.compareTo(last.get(), startEndKeys.get(firstKeyRegionIdx).getSecond()) < 0 || Bytes\n+            .equals(startEndKeys.get(firstKeyRegionIdx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n     if (!lastKeyInRange) {\n-      Pair<byte[], byte[]> startEndKey = startEndKeys.get(indexForCallable);\n-      List<LoadQueueItem> lqis =\n-        splitStoreFile(item, FutureUtils.get(conn.getAdmin().getDescriptor(tableName)),\n-            startEndKey.getSecond());\n+      int lastKeyRegionIdx = getVaildRegionIndex(startEndKeys, last.get(), tableName);\n+      int splitIdx = (firstKeyRegionIdx + lastKeyRegionIdx) / 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTkyOQ=="}, "originalCommit": {"oid": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE4MjU2NQ==", "bodyText": "Makes sense, thanks for explaining!", "url": "https://github.com/apache/hbase/pull/2667#discussion_r528182565", "createdAt": "2020-11-21T11:02:34Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/tool/BulkLoadHFilesTool.java", "diffHunk": "@@ -647,51 +684,24 @@ private String getUniqueName() {\n       return null;\n     }\n     if (Bytes.compareTo(first.get(), last.get()) > 0) {\n-      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get()) +\n-        \" > \" + Bytes.toStringBinary(last.get()));\n-    }\n-    int idx =\n-      Collections.binarySearch(startEndKeys, Pair.newPair(first.get(), HConstants.EMPTY_END_ROW),\n-        (p1, p2) -> Bytes.compareTo(p1.getFirst(), p2.getFirst()));\n-    if (idx < 0) {\n-      // not on boundary, returns -(insertion index). Calculate region it\n-      // would be in.\n-      idx = -(idx + 1) - 1;\n-    }\n-    int indexForCallable = idx;\n-\n-    /*\n-     * we can consider there is a region hole in following conditions. 1) if idx < 0,then first\n-     * region info is lost. 2) if the endkey of a region is not equal to the startkey of the next\n-     * region. 3) if the endkey of the last region is not empty.\n-     */\n-    if (indexForCallable < 0) {\n-      throw new IOException(\"The first region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if ((indexForCallable == startEndKeys.size() - 1) &&\n-      !Bytes.equals(startEndKeys.get(indexForCallable).getSecond(), HConstants.EMPTY_BYTE_ARRAY)) {\n-      throw new IOException(\"The last region info for table \" + tableName +\n-        \" can't be found in hbase:meta.Please use hbck tool to fix it first.\");\n-    } else if (indexForCallable + 1 < startEndKeys.size() &&\n-      !(Bytes.compareTo(startEndKeys.get(indexForCallable).getSecond(),\n-        startEndKeys.get(indexForCallable + 1).getFirst()) == 0)) {\n-      throw new IOException(\"The endkey of one region for table \" + tableName +\n-        \" is not equal to the startkey of the next region in hbase:meta.\" +\n-        \"Please use hbck tool to fix it first.\");\n+      throw new IllegalArgumentException(\"Invalid range: \" + Bytes.toStringBinary(first.get())\n+          + \" > \" + Bytes.toStringBinary(last.get()));\n     }\n-\n-    boolean lastKeyInRange = Bytes.compareTo(last.get(), startEndKeys.get(idx).getSecond()) < 0 ||\n-      Bytes.equals(startEndKeys.get(idx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n+    int firstKeyRegionIdx = getVaildRegionIndex(startEndKeys, first.get(), tableName);\n+    boolean lastKeyInRange =\n+        Bytes.compareTo(last.get(), startEndKeys.get(firstKeyRegionIdx).getSecond()) < 0 || Bytes\n+            .equals(startEndKeys.get(firstKeyRegionIdx).getSecond(), HConstants.EMPTY_BYTE_ARRAY);\n     if (!lastKeyInRange) {\n-      Pair<byte[], byte[]> startEndKey = startEndKeys.get(indexForCallable);\n-      List<LoadQueueItem> lqis =\n-        splitStoreFile(item, FutureUtils.get(conn.getAdmin().getDescriptor(tableName)),\n-            startEndKey.getSecond());\n+      int lastKeyRegionIdx = getVaildRegionIndex(startEndKeys, last.get(), tableName);\n+      int splitIdx = (firstKeyRegionIdx + lastKeyRegionIdx) / 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NTkyOQ=="}, "originalCommit": {"oid": "374cf2a4a65ebe85eb8fa9c2b0ec87cc1e88fac8"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2396, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}