{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MDkwMDU0", "number": 1793, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozODoyMFrOEA9gNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0Mjo1M1rOEA9mHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQzMTI0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozODoyMFrOGckEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjozODoyMFrOGckEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNDMyOQ==", "bodyText": "if (filterCount == 0) {\nreturn ...\n}", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432604329", "createdAt": "2020-05-29T16:38:20Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQzODYzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0MDo0M1rOGckJeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0MDo0M1rOGckJeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNTU2MA==", "bodyText": "Apply only the filters that are actually in the request, why check if a filter exists in every iteration?", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432605560", "createdAt": "2020-05-29T16:40:43Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloadList) {\n+      int totalFilterMatches = 0;\n+      if (StringUtils.isNotEmpty(request.getRegionName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQ0NTg0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0Mjo0NVrOGckNsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0Mjo0NVrOGckNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNjY0MQ==", "bodyText": "no need for this if you implement the above logic I suggested..", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432606641", "createdAt": "2020-05-29T16:42:45Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloadList) {\n+      int totalFilterMatches = 0;\n+      if (StringUtils.isNotEmpty(request.getRegionName())) {\n+        if (slowLogPayload.getRegionName().equals(request.getRegionName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getTableName())) {\n+        if (slowLogPayload.getRegionName().startsWith(request.getTableName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+        if (slowLogPayload.getClientAddress().equals(request.getClientAddress())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getUserName())) {\n+        if (slowLogPayload.getUserName().equals(request.getUserName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (request.hasFilterByOperator() && request.getFilterByOperator()\n+        .equals(AdminProtos.SlowLogResponseRequest.FilterByOperator.AND)) {\n+        // Filter by AND operator\n+        if (totalFilterMatches == totalFilters) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      } else {\n+        // Filter by OR operator\n+        if (totalFilterMatches > 0) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      }\n+    }\n+    return filteredSlowLogPayloads;\n+  }\n+\n+  static List<TooSlowLog.SlowLogPayload> getFilteredLogs(\n+      AdminProtos.SlowLogResponseRequest request, List<TooSlowLog.SlowLogPayload> logPayloadList) {\n+    if (isFilterProvided(request)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDQ0NjM3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0Mjo1M1rOGckOAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjo0Mjo1M1rOGckOAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjYwNjcyMg==", "bodyText": "and you can remove this..", "url": "https://github.com/apache/hbase/pull/1793#discussion_r432606722", "createdAt": "2020-05-29T16:42:53Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogHandlerUtils.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.AdminProtos;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+/**\n+ * Event Handler utility class\n+ */\n+@InterfaceAudience.Private\n+class LogHandlerUtils {\n+\n+  private static int getTotalFiltersCount(AdminProtos.SlowLogResponseRequest request) {\n+    int totalFilters = 0;\n+    if (StringUtils.isNotEmpty(request.getRegionName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getTableName())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+      totalFilters++;\n+    }\n+    if (StringUtils.isNotEmpty(request.getUserName())) {\n+      totalFilters++;\n+    }\n+    return totalFilters;\n+  }\n+\n+  private static List<TooSlowLog.SlowLogPayload> filterLogs(\n+      AdminProtos.SlowLogResponseRequest request,\n+      List<TooSlowLog.SlowLogPayload> slowLogPayloadList) {\n+    List<TooSlowLog.SlowLogPayload> filteredSlowLogPayloads = new ArrayList<>();\n+    int totalFilters = getTotalFiltersCount(request);\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloadList) {\n+      int totalFilterMatches = 0;\n+      if (StringUtils.isNotEmpty(request.getRegionName())) {\n+        if (slowLogPayload.getRegionName().equals(request.getRegionName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getTableName())) {\n+        if (slowLogPayload.getRegionName().startsWith(request.getTableName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getClientAddress())) {\n+        if (slowLogPayload.getClientAddress().equals(request.getClientAddress())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (StringUtils.isNotEmpty(request.getUserName())) {\n+        if (slowLogPayload.getUserName().equals(request.getUserName())) {\n+          totalFilterMatches++;\n+        }\n+      }\n+      if (request.hasFilterByOperator() && request.getFilterByOperator()\n+        .equals(AdminProtos.SlowLogResponseRequest.FilterByOperator.AND)) {\n+        // Filter by AND operator\n+        if (totalFilterMatches == totalFilters) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      } else {\n+        // Filter by OR operator\n+        if (totalFilterMatches > 0) {\n+          filteredSlowLogPayloads.add(slowLogPayload);\n+        }\n+      }\n+    }\n+    return filteredSlowLogPayloads;\n+  }\n+\n+  static List<TooSlowLog.SlowLogPayload> getFilteredLogs(\n+      AdminProtos.SlowLogResponseRequest request, List<TooSlowLog.SlowLogPayload> logPayloadList) {\n+    if (isFilterProvided(request)) {\n+      logPayloadList = filterLogs(request, logPayloadList);\n+    }\n+    int limit = Math.min(request.getLimit(), logPayloadList.size());\n+    return logPayloadList.subList(0, limit);\n+  }\n+\n+  private static boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d5ee966c4b0a3d0bacdc3e2680b5b1ae4625e5"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3071, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}