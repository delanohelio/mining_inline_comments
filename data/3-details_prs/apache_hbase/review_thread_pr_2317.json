{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczNzYxNjc3", "number": 2317, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyNTo0OVrOEcffvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0ODo0NlrOEdOx3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzExNjEzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyNTo0OVrOHHDxMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOToyNTo0OVrOHHDxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE2MzgyNQ==", "bodyText": "nit: method name can represent returning TableDescriptor, maybe something like: updateAndGetMetaTableDesc ?", "url": "https://github.com/apache/hbase/pull/2317#discussion_r477163825", "createdAt": "2020-08-26T09:25:49Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -125,11 +125,11 @@ public static void tryUpdateMetaTableDescriptor(Configuration conf) throws IOExc\n       CommonFSUtils.getRootDir(conf), null);\n   }\n \n-  public static void tryUpdateMetaTableDescriptor(Configuration conf, FileSystem fs, Path rootdir,\n+  public static TableDescriptor tryUpdateMetaTableDescriptor(Configuration conf, FileSystem fs, Path rootdir,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830d99eae681639f394a4823f74e47b9309b4ec5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE1ODgxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTozNjo0MVrOHHEKug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTozNjo0MVrOHHEKug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MDM2Mg==", "bodyText": "nit: catch (NullPointerException | IOException e)", "url": "https://github.com/apache/hbase/pull/2317#discussion_r477170362", "createdAt": "2020-08-26T09:36:41Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -196,57 +197,47 @@ private static TableDescriptorBuilder createMetaTableDescriptorBuilder(final Con\n         .setPriority(Coprocessor.PRIORITY_SYSTEM).build());\n   }\n \n-  @Override\n-  public void setCacheOn() throws IOException {\n-    this.cache.clear();\n-    this.usecache = true;\n-  }\n-\n-  @Override\n-  public void setCacheOff() throws IOException {\n-    this.usecache = false;\n-    this.cache.clear();\n-  }\n-\n   @VisibleForTesting\n   public boolean isUsecache() {\n     return this.usecache;\n   }\n \n   /**\n    * Get the current table descriptor for the given table, or null if none exists.\n-   *\n-   * Uses a local cache of the descriptor but still checks the filesystem on each call\n-   * to see if a newer file has been created since the cached one was read.\n+   * <p/>\n+   * Uses a local cache of the descriptor but still checks the filesystem on each call if\n+   * {@link #fsvisited} is not {@code true}, i.e, we haven't done a full scan yet, to see if a newer\n+   * file has been created since the cached one was read.\n    */\n   @Override\n   @Nullable\n-  public TableDescriptor get(final TableName tablename)\n-  throws IOException {\n+  public TableDescriptor get(TableName tableName) throws IOException {\n     invocations++;\n     if (usecache) {\n       // Look in cache of descriptors.\n-      TableDescriptor cachedtdm = this.cache.get(tablename);\n+      TableDescriptor cachedtdm = this.cache.get(tableName);\n       if (cachedtdm != null) {\n         cachehits++;\n         return cachedtdm;\n       }\n+      // we do not need to go to fs any more\n+      if (fsvisited) {\n+        return null;\n+      }\n     }\n     TableDescriptor tdmt = null;\n     try {\n-      tdmt = getTableDescriptorFromFs(fs, rootdir, tablename);\n+      tdmt = getTableDescriptorFromFs(fs, rootdir, tableName);\n     } catch (NullPointerException e) {\n-      LOG.debug(\"Exception during readTableDecriptor. Current table name = \"\n-          + tablename, e);\n+      LOG.debug(\"Exception during readTableDecriptor. Current table name = \" + tableName, e);\n     } catch (TableInfoMissingException e) {\n       // ignore. This is regular operation\n     } catch (IOException ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830d99eae681639f394a4823f74e47b9309b4ec5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE2NTA4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTozODoxM1rOHHEObg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTozODoxM1rOHHEObg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MTMxMA==", "bodyText": "nit: In above if condition, continue is no longer required.", "url": "https://github.com/apache/hbase/pull/2317#discussion_r477171310", "createdAt": "2020-08-26T09:38:13Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -279,8 +270,8 @@ public TableDescriptor get(final TableName tablename)\n         } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830d99eae681639f394a4823f74e47b9309b4ec5"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE3MjQzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MDoxM1rOHHETEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MDoxM1rOHHETEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MjQ5Ng==", "bodyText": "Now that we only have constructor to set this, +1", "url": "https://github.com/apache/hbase/pull/2317#discussion_r477172496", "createdAt": "2020-08-26T09:40:13Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -79,7 +79,7 @@\n   private final FileSystem fs;\n   private final Path rootdir;\n   private final boolean fsreadonly;\n-  private volatile boolean usecache;\n+  private final boolean usecache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830d99eae681639f394a4823f74e47b9309b4ec5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MzE4MDY4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/TableDescriptors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0MjozM1rOHHEYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwOTo0NjowNlrOHHEgZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MzgyNA==", "bodyText": "Is this change needed? Do we follow any convention to not provide final to argument? Just asking as I am not aware of it.", "url": "https://github.com/apache/hbase/pull/2317#discussion_r477173824", "createdAt": "2020-08-26T09:42:33Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/TableDescriptors.java", "diffHunk": "@@ -31,7 +31,7 @@\n   /**\n    * @return TableDescriptor for tablename\n    */\n-  TableDescriptor get(final TableName tableName) throws IOException;\n+  TableDescriptor get(TableName tableName) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830d99eae681639f394a4823f74e47b9309b4ec5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3NTkxMA==", "bodyText": "In the interface the final is useless, you are free to not use final when actually implementing the method, and there is no difference for callers. So just remove it.", "url": "https://github.com/apache/hbase/pull/2317#discussion_r477175910", "createdAt": "2020-08-26T09:46:06Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/TableDescriptors.java", "diffHunk": "@@ -31,7 +31,7 @@\n   /**\n    * @return TableDescriptor for tablename\n    */\n-  TableDescriptor get(final TableName tableName) throws IOException;\n+  TableDescriptor get(TableName tableName) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE3MzgyNA=="}, "originalCommit": {"oid": "830d99eae681639f394a4823f74e47b9309b4ec5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4ODk2OTc2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNToyMjowMVrOHH-_iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMDozMToyMVrOHIKP6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzNDE1Mw==", "bodyText": "This will do nothing when cacheonly is true and usecache is false? It is weird...... How about throw UnsupportedOperationException for this case too?", "url": "https://github.com/apache/hbase/pull/2317#discussion_r478134153", "createdAt": "2020-08-27T05:22:01Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -290,35 +272,43 @@ public TableDescriptor get(final TableName tablename)\n     * @see #get(org.apache.hadoop.hbase.TableName)\n     */\n   @Override\n-  public Map<String, TableDescriptor> getByNamespace(String name)\n-  throws IOException {\n+  public Map<String, TableDescriptor> getByNamespace(String name) throws IOException {\n     Map<String, TableDescriptor> htds = new TreeMap<>();\n     List<Path> tableDirs =\n-        FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n-    for (Path d: tableDirs) {\n-      TableDescriptor htd = null;\n-      try {\n-        htd = get(CommonFSUtils.getTableName(d));\n-      } catch (FileNotFoundException fnfe) {\n-        // inability of retrieving one HTD shouldn't stop getting the remaining\n-        LOG.warn(\"Trouble retrieving htd\", fnfe);\n+      FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n+    for (Path d : tableDirs) {\n+      TableDescriptor htd = get(CommonFSUtils.getTableName(d));\n+      if (htd == null) {\n+        continue;\n       }\n-      if (htd == null) continue;\n       htds.put(CommonFSUtils.getTableName(d).getNameAsString(), htd);\n     }\n     return htds;\n   }\n \n-  /**\n-   * Adds (or updates) the table descriptor to the FileSystem\n-   * and updates the local cache with it.\n-   */\n   @Override\n-  public void update(TableDescriptor htd) throws IOException {\n+  public void update(TableDescriptor td, boolean cacheOnly) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb35322120e3a9a3a92a9a70895559915dbe64d5"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE2MjEyMg==", "bodyText": "In fact this will only be called on master so usecache will always be true.\nI think the root problem here is that, HMaster extends HRegionServer, and they both uses TableDescriptors, but on HRegionServer it is read only and no cache. In general, we should make HMaster not extend HRegionServer in the future, then we could introduce a new ReadOnlyTableDescriptors to be used by HRegionServer and then a normal FSTableDescriptor for HMaster.", "url": "https://github.com/apache/hbase/pull/2317#discussion_r478162122", "createdAt": "2020-08-27T06:05:45Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -290,35 +272,43 @@ public TableDescriptor get(final TableName tablename)\n     * @see #get(org.apache.hadoop.hbase.TableName)\n     */\n   @Override\n-  public Map<String, TableDescriptor> getByNamespace(String name)\n-  throws IOException {\n+  public Map<String, TableDescriptor> getByNamespace(String name) throws IOException {\n     Map<String, TableDescriptor> htds = new TreeMap<>();\n     List<Path> tableDirs =\n-        FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n-    for (Path d: tableDirs) {\n-      TableDescriptor htd = null;\n-      try {\n-        htd = get(CommonFSUtils.getTableName(d));\n-      } catch (FileNotFoundException fnfe) {\n-        // inability of retrieving one HTD shouldn't stop getting the remaining\n-        LOG.warn(\"Trouble retrieving htd\", fnfe);\n+      FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n+    for (Path d : tableDirs) {\n+      TableDescriptor htd = get(CommonFSUtils.getTableName(d));\n+      if (htd == null) {\n+        continue;\n       }\n-      if (htd == null) continue;\n       htds.put(CommonFSUtils.getTableName(d).getNameAsString(), htd);\n     }\n     return htds;\n   }\n \n-  /**\n-   * Adds (or updates) the table descriptor to the FileSystem\n-   * and updates the local cache with it.\n-   */\n   @Override\n-  public void update(TableDescriptor htd) throws IOException {\n+  public void update(TableDescriptor td, boolean cacheOnly) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzNDE1Mw=="}, "originalCommit": {"oid": "fb35322120e3a9a3a92a9a70895559915dbe64d5"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI0NjM0OA==", "bodyText": "So left a TODO here? Maybe make this more clear in the future.", "url": "https://github.com/apache/hbase/pull/2317#discussion_r478246348", "createdAt": "2020-08-27T08:27:47Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -290,35 +272,43 @@ public TableDescriptor get(final TableName tablename)\n     * @see #get(org.apache.hadoop.hbase.TableName)\n     */\n   @Override\n-  public Map<String, TableDescriptor> getByNamespace(String name)\n-  throws IOException {\n+  public Map<String, TableDescriptor> getByNamespace(String name) throws IOException {\n     Map<String, TableDescriptor> htds = new TreeMap<>();\n     List<Path> tableDirs =\n-        FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n-    for (Path d: tableDirs) {\n-      TableDescriptor htd = null;\n-      try {\n-        htd = get(CommonFSUtils.getTableName(d));\n-      } catch (FileNotFoundException fnfe) {\n-        // inability of retrieving one HTD shouldn't stop getting the remaining\n-        LOG.warn(\"Trouble retrieving htd\", fnfe);\n+      FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n+    for (Path d : tableDirs) {\n+      TableDescriptor htd = get(CommonFSUtils.getTableName(d));\n+      if (htd == null) {\n+        continue;\n       }\n-      if (htd == null) continue;\n       htds.put(CommonFSUtils.getTableName(d).getNameAsString(), htd);\n     }\n     return htds;\n   }\n \n-  /**\n-   * Adds (or updates) the table descriptor to the FileSystem\n-   * and updates the local cache with it.\n-   */\n   @Override\n-  public void update(TableDescriptor htd) throws IOException {\n+  public void update(TableDescriptor td, boolean cacheOnly) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzNDE1Mw=="}, "originalCommit": {"oid": "fb35322120e3a9a3a92a9a70895559915dbe64d5"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODMxODU3MA==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/2317#discussion_r478318570", "createdAt": "2020-08-27T10:31:21Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -290,35 +272,43 @@ public TableDescriptor get(final TableName tablename)\n     * @see #get(org.apache.hadoop.hbase.TableName)\n     */\n   @Override\n-  public Map<String, TableDescriptor> getByNamespace(String name)\n-  throws IOException {\n+  public Map<String, TableDescriptor> getByNamespace(String name) throws IOException {\n     Map<String, TableDescriptor> htds = new TreeMap<>();\n     List<Path> tableDirs =\n-        FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n-    for (Path d: tableDirs) {\n-      TableDescriptor htd = null;\n-      try {\n-        htd = get(CommonFSUtils.getTableName(d));\n-      } catch (FileNotFoundException fnfe) {\n-        // inability of retrieving one HTD shouldn't stop getting the remaining\n-        LOG.warn(\"Trouble retrieving htd\", fnfe);\n+      FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n+    for (Path d : tableDirs) {\n+      TableDescriptor htd = get(CommonFSUtils.getTableName(d));\n+      if (htd == null) {\n+        continue;\n       }\n-      if (htd == null) continue;\n       htds.put(CommonFSUtils.getTableName(d).getNameAsString(), htd);\n     }\n     return htds;\n   }\n \n-  /**\n-   * Adds (or updates) the table descriptor to the FileSystem\n-   * and updates the local cache with it.\n-   */\n   @Override\n-  public void update(TableDescriptor htd) throws IOException {\n+  public void update(TableDescriptor td, boolean cacheOnly) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODEzNDE1Mw=="}, "originalCommit": {"oid": "fb35322120e3a9a3a92a9a70895559915dbe64d5"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDg2MzAwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMzo0ODo0NlrOHIRO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoxOToxNlrOHISlvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjk5MQ==", "bodyText": "updateTableDesciptor => updateTableDescriptor", "url": "https://github.com/apache/hbase/pull/2317#discussion_r478432991", "createdAt": "2020-08-27T13:48:46Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -290,35 +272,48 @@ public TableDescriptor get(final TableName tablename)\n     * @see #get(org.apache.hadoop.hbase.TableName)\n     */\n   @Override\n-  public Map<String, TableDescriptor> getByNamespace(String name)\n-  throws IOException {\n+  public Map<String, TableDescriptor> getByNamespace(String name) throws IOException {\n     Map<String, TableDescriptor> htds = new TreeMap<>();\n     List<Path> tableDirs =\n-        FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n-    for (Path d: tableDirs) {\n-      TableDescriptor htd = null;\n-      try {\n-        htd = get(CommonFSUtils.getTableName(d));\n-      } catch (FileNotFoundException fnfe) {\n-        // inability of retrieving one HTD shouldn't stop getting the remaining\n-        LOG.warn(\"Trouble retrieving htd\", fnfe);\n+      FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n+    for (Path d : tableDirs) {\n+      TableDescriptor htd = get(CommonFSUtils.getTableName(d));\n+      if (htd == null) {\n+        continue;\n       }\n-      if (htd == null) continue;\n       htds.put(CommonFSUtils.getTableName(d).getNameAsString(), htd);\n     }\n     return htds;\n   }\n \n-  /**\n-   * Adds (or updates) the table descriptor to the FileSystem\n-   * and updates the local cache with it.\n-   */\n   @Override\n-  public void update(TableDescriptor htd) throws IOException {\n+  public void update(TableDescriptor td, boolean cacheOnly) throws IOException {\n+    // TODO: in fact this method will only be called at master side, so fsreadonly and usecache will\n+    // always be true. In general, we'd better have a ReadOnlyFSTableDesciptors for HRegionServer\n+    // but now, HMaster extends HRegionServer, so unless making use of generic, we can not have\n+    // different implementations for HMaster and HRegionServer. Revisit this when we make HMaster\n+    // not extend HRegionServer in the future.\n     if (fsreadonly) {\n-      throw new NotImplementedException(\"Cannot add a table descriptor - in read only mode\");\n+      throw new UnsupportedOperationException(\"Cannot add a table descriptor - in read only mode\");\n+    }\n+    if (!cacheOnly) {\n+      updateTableDesciptor(td);\n+    }\n+    if (usecache) {\n+      this.cache.put(td.getTableName(), td);\n     }\n-    updateTableDescriptor(htd);\n+  }\n+\n+  @VisibleForTesting\n+  Path updateTableDesciptor(TableDescriptor td) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecea9b01e34b04eee97cf4c56f365bda6d065764"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1NTIzMQ==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/2317#discussion_r478455231", "createdAt": "2020-08-27T14:19:16Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/util/FSTableDescriptors.java", "diffHunk": "@@ -290,35 +272,48 @@ public TableDescriptor get(final TableName tablename)\n     * @see #get(org.apache.hadoop.hbase.TableName)\n     */\n   @Override\n-  public Map<String, TableDescriptor> getByNamespace(String name)\n-  throws IOException {\n+  public Map<String, TableDescriptor> getByNamespace(String name) throws IOException {\n     Map<String, TableDescriptor> htds = new TreeMap<>();\n     List<Path> tableDirs =\n-        FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n-    for (Path d: tableDirs) {\n-      TableDescriptor htd = null;\n-      try {\n-        htd = get(CommonFSUtils.getTableName(d));\n-      } catch (FileNotFoundException fnfe) {\n-        // inability of retrieving one HTD shouldn't stop getting the remaining\n-        LOG.warn(\"Trouble retrieving htd\", fnfe);\n+      FSUtils.getLocalTableDirs(fs, CommonFSUtils.getNamespaceDir(rootdir, name));\n+    for (Path d : tableDirs) {\n+      TableDescriptor htd = get(CommonFSUtils.getTableName(d));\n+      if (htd == null) {\n+        continue;\n       }\n-      if (htd == null) continue;\n       htds.put(CommonFSUtils.getTableName(d).getNameAsString(), htd);\n     }\n     return htds;\n   }\n \n-  /**\n-   * Adds (or updates) the table descriptor to the FileSystem\n-   * and updates the local cache with it.\n-   */\n   @Override\n-  public void update(TableDescriptor htd) throws IOException {\n+  public void update(TableDescriptor td, boolean cacheOnly) throws IOException {\n+    // TODO: in fact this method will only be called at master side, so fsreadonly and usecache will\n+    // always be true. In general, we'd better have a ReadOnlyFSTableDesciptors for HRegionServer\n+    // but now, HMaster extends HRegionServer, so unless making use of generic, we can not have\n+    // different implementations for HMaster and HRegionServer. Revisit this when we make HMaster\n+    // not extend HRegionServer in the future.\n     if (fsreadonly) {\n-      throw new NotImplementedException(\"Cannot add a table descriptor - in read only mode\");\n+      throw new UnsupportedOperationException(\"Cannot add a table descriptor - in read only mode\");\n+    }\n+    if (!cacheOnly) {\n+      updateTableDesciptor(td);\n+    }\n+    if (usecache) {\n+      this.cache.put(td.getTableName(), td);\n     }\n-    updateTableDescriptor(htd);\n+  }\n+\n+  @VisibleForTesting\n+  Path updateTableDesciptor(TableDescriptor td) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQzMjk5MQ=="}, "originalCommit": {"oid": "ecea9b01e34b04eee97cf4c56f365bda6d065764"}, "originalPosition": 208}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2574, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}