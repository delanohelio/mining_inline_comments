{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5ODIwMDUx", "number": 2587, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo0OTozMlrOE3GW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo0OTozMlrOE3GW5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MjExMzAxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBulkloadBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwNzo0OTozMlrOHwP2PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQwOTo0MzoyMVrOHwUH0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1MzM0MQ==", "bodyText": "Just remove the line?", "url": "https://github.com/apache/hbase/pull/2587#discussion_r520353341", "createdAt": "2020-11-10T07:49:32Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBulkloadBase.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hbase.CellBuilderType;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.ExtendedCellBuilderFactory;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.io.hfile.HFile;\n+import org.apache.hadoop.hbase.io.hfile.HFileContextBuilder;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.Pair;\n+import org.apache.hadoop.hbase.wal.WAL;\n+import org.apache.hadoop.hbase.wal.WALEdit;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestName;\n+\n+import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.WALProtos;\n+\n+public class TestBulkloadBase {\n+  @ClassRule\n+  public static TemporaryFolder testFolder = new TemporaryFolder();\n+  private static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+  protected final WAL log = mock(WAL.class);\n+  protected final Configuration conf = HBaseConfiguration.create();\n+  private final Random random = new Random();\n+  private final byte[] randomBytes = new byte[100];\n+  protected final byte[] family1 = Bytes.toBytes(\"family1\");\n+  protected final byte[] family2 = Bytes.toBytes(\"family2\");\n+  protected final byte[] family3 = Bytes.toBytes(\"family3\");\n+\n+  @Rule\n+  public TestName name = new TestName();\n+\n+  @Before\n+  public void before() throws IOException {\n+    random.nextBytes(randomBytes);\n+    // Mockito.when(log.append(htd, info, key, edits, inMemstore));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e22e31db60733744abdd3b09bb660eaf24e2e4"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQyMzM3Nw==", "bodyText": "yes", "url": "https://github.com/apache/hbase/pull/2587#discussion_r520423377", "createdAt": "2020-11-10T09:43:21Z", "author": {"login": "nyl3532016"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestBulkloadBase.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.FSDataOutputStream;\n+import org.apache.hadoop.fs.Path;\n+import org.apache.hadoop.hbase.CellBuilderType;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.ExtendedCellBuilderFactory;\n+import org.apache.hadoop.hbase.HBaseConfiguration;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.KeyValue;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.io.hfile.HFile;\n+import org.apache.hadoop.hbase.io.hfile.HFileContextBuilder;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.Pair;\n+import org.apache.hadoop.hbase.wal.WAL;\n+import org.apache.hadoop.hbase.wal.WALEdit;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestName;\n+\n+import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.WALProtos;\n+\n+public class TestBulkloadBase {\n+  @ClassRule\n+  public static TemporaryFolder testFolder = new TemporaryFolder();\n+  private static HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+  protected final WAL log = mock(WAL.class);\n+  protected final Configuration conf = HBaseConfiguration.create();\n+  private final Random random = new Random();\n+  private final byte[] randomBytes = new byte[100];\n+  protected final byte[] family1 = Bytes.toBytes(\"family1\");\n+  protected final byte[] family2 = Bytes.toBytes(\"family2\");\n+  protected final byte[] family3 = Bytes.toBytes(\"family3\");\n+\n+  @Rule\n+  public TestName name = new TestName();\n+\n+  @Before\n+  public void before() throws IOException {\n+    random.nextBytes(randomBytes);\n+    // Mockito.when(log.append(htd, info, key, edits, inMemstore));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM1MzM0MQ=="}, "originalCommit": {"oid": "d3e22e31db60733744abdd3b09bb660eaf24e2e4"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2468, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}