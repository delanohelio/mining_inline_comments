{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTE0OTE3", "number": 1034, "title": "HBASE-23622 Reduced the number of Checkstyle violations in hbase-common", "bodyText": "Backport of #968 to branch-1.", "createdAt": "2020-01-14T08:50:17Z", "url": "https://github.com/apache/hbase/pull/1034", "merged": true, "mergeCommit": {"oid": "99a59cf9e7122d5dd25cd464cea5ac4f6c96cdb0"}, "closed": true, "closedAt": "2020-01-19T17:02:09Z", "author": {"login": "HorizonNet"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6M9sZgH2gAyMzYyNTE0OTE3OmVmN2Y4NzYyZGEyM2ZjYmM4ZDk2ZGYzYjM1Zjg5ZmI1NmFjNzg2NWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6nyI8AFqTM0MzMzMTkxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ef7f8762da23fcbc8d96df3b35f89fb56ac7865f", "author": {"user": {"login": "HorizonNet", "name": "Jan Hentschel"}}, "url": "https://github.com/apache/hbase/commit/ef7f8762da23fcbc8d96df3b35f89fb56ac7865f", "committedDate": "2020-01-14T08:48:47Z", "message": "HBASE-23622 Reduced the number of Checkstyle violations in hbase-common"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNTg5NjE3", "url": "https://github.com/apache/hbase/pull/1034#pullrequestreview-342589617", "createdAt": "2020-01-14T14:52:19Z", "commit": {"oid": "ef7f8762da23fcbc8d96df3b35f89fb56ac7865f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNDo1MjoxOVrOFdaMlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMDoyMlrOFdbN8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4MjIzMA==", "bodyText": "this is a binary incompatible change and matters because ByteRangeUtils is IA.Public\nref: JLS 13.4.2 \"final classes\"\nhttps://docs.oracle.com/javase/specs/jls/se13/html/jls-13.html#jls-13.4.2", "url": "https://github.com/apache/hbase/pull/1034#discussion_r366382230", "createdAt": "2020-01-14T14:52:19Z", "author": {"login": "busbey"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeUtils.java", "diffHunk": "@@ -33,12 +33,16 @@\n  */\n @InterfaceAudience.Public\n @InterfaceStability.Evolving\n-public class ByteRangeUtils {\n+public final class ByteRangeUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7f8762da23fcbc8d96df3b35f89fb56ac7865f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM4NTY0Ng==", "bodyText": "This is a binary incompatible change and matters because ByteRangeUtils is IA.Public\nref JLS 13.4.12\nhttps://docs.oracle.com/javase/specs/jls/se13/html/jls-13.html#jls-13.4.12\nBecause there were no constructors defined and this class is marked public, this class implicitly had a public ByteRangeUtils() constructor. So changing it to private here will break compatibility.", "url": "https://github.com/apache/hbase/pull/1034#discussion_r366385646", "createdAt": "2020-01-14T14:57:46Z", "author": {"login": "busbey"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/util/ByteRangeUtils.java", "diffHunk": "@@ -33,12 +33,16 @@\n  */\n @InterfaceAudience.Public\n @InterfaceStability.Evolving\n-public class ByteRangeUtils {\n+public final class ByteRangeUtils {\n+  private ByteRangeUtils() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7f8762da23fcbc8d96df3b35f89fb56ac7865f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NjQ4OA==", "bodyText": "The method getDefaultBlockSize(Path) has been a supported API in all the Hadoop versions we support for a very longs time. We should skip the reflection here.", "url": "https://github.com/apache/hbase/pull/1034#discussion_r366396488", "createdAt": "2020-01-14T15:16:16Z", "author": {"login": "busbey"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/util/CommonFSUtils.java", "diffHunk": "@@ -157,7 +156,7 @@ public static long getDefaultBlockSize(final FileSystem fs, final Path path) thr\n     Method m = null;\n     Class<? extends FileSystem> cls = fs.getClass();\n     try {\n-      m = cls.getMethod(\"getDefaultBlockSize\", new Class<?>[] { Path.class });\n+      m = cls.getMethod(\"getDefaultBlockSize\", Path.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7f8762da23fcbc8d96df3b35f89fb56ac7865f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5NjYwMQ==", "bodyText": "The method getDefaultReplication(Path) has been a supported API in all the Hadoop versions we support for a very longs time. We should skip the reflection here.", "url": "https://github.com/apache/hbase/pull/1034#discussion_r366396601", "createdAt": "2020-01-14T15:16:29Z", "author": {"login": "busbey"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/util/CommonFSUtils.java", "diffHunk": "@@ -192,7 +191,7 @@ public static short getDefaultReplication(final FileSystem fs, final Path path)\n     Method m = null;\n     Class<? extends FileSystem> cls = fs.getClass();\n     try {\n-      m = cls.getMethod(\"getDefaultReplication\", new Class<?>[] { Path.class });\n+      m = cls.getMethod(\"getDefaultReplication\", Path.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7f8762da23fcbc8d96df3b35f89fb56ac7865f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5ODk2Mg==", "bodyText": "branch-1's minimum hadoop version is 2.8.5, so for that branch we can remove this reflection as well. Note to potential further backporters: the method is not in Hadoop 2.7, we'll need this reflection in branch-1.4 and branch-1.3.", "url": "https://github.com/apache/hbase/pull/1034#discussion_r366398962", "createdAt": "2020-01-14T15:20:22Z", "author": {"login": "busbey"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/util/CommonFSUtils.java", "diffHunk": "@@ -560,8 +558,7 @@ private static void invokeSetStoragePolicy(final FileSystem fs, final Path path,\n     Method m = null;\n     Exception toThrow = null;\n     try {\n-      m = fs.getClass().getDeclaredMethod(\"setStoragePolicy\",\n-        new Class<?>[] { Path.class, String.class });\n+      m = fs.getClass().getDeclaredMethod(\"setStoragePolicy\", Path.class, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef7f8762da23fcbc8d96df3b35f89fb56ac7865f"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9c61bdfb552b0915dd47c2b740b7d8d2e3bf9c4", "author": {"user": {"login": "HorizonNet", "name": "Jan Hentschel"}}, "url": "https://github.com/apache/hbase/commit/f9c61bdfb552b0915dd47c2b740b7d8d2e3bf9c4", "committedDate": "2020-01-14T16:31:29Z", "message": "HBASE-23622 Fixed review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNjk2NTE4", "url": "https://github.com/apache/hbase/pull/1034#pullrequestreview-342696518", "createdAt": "2020-01-14T17:08:49Z", "commit": {"oid": "f9c61bdfb552b0915dd47c2b740b7d8d2e3bf9c4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzoxMDozNFrOFdfNJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzoxMDozNFrOFdfNJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2NDI5NQ==", "bodyText": "Now that we're not using reflection, this should be a direct check for RemoteException because it won't be wrapped in the reflection invocation exception.", "url": "https://github.com/apache/hbase/pull/1034#discussion_r366464295", "createdAt": "2020-01-14T17:10:34Z", "author": {"login": "busbey"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/util/CommonFSUtils.java", "diffHunk": "@@ -557,71 +508,45 @@ static void setStoragePolicy(final FileSystem fs, final Path path, final String\n    */\n   private static void invokeSetStoragePolicy(final FileSystem fs, final Path path,\n       final String storagePolicy) throws IOException {\n-    Method m = null;\n     Exception toThrow = null;\n+\n     try {\n-      m = fs.getClass().getDeclaredMethod(\"setStoragePolicy\",\n-        new Class<?>[] { Path.class, String.class });\n-      m.setAccessible(true);\n-    } catch (NoSuchMethodException e) {\n-      toThrow = e;\n-      final String msg = \"FileSystem doesn't support setStoragePolicy; HDFS-6584 not available\";\n-      if (!warningMap.containsKey(fs)) {\n-        warningMap.put(fs, true);\n-        LOG.warn(msg, e);\n-      } else if (LOG.isDebugEnabled()) {\n-        LOG.debug(msg, e);\n+      fs.setStoragePolicy(path, storagePolicy);\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Set storagePolicy=\" + storagePolicy + \" for path=\" + path);\n       }\n-      m = null;\n-    } catch (SecurityException e) {\n+    } catch (Exception e) {\n       toThrow = e;\n-      final String msg = \"No access to setStoragePolicy on FileSystem; HDFS-6584 not available\";\n+      // This swallows FNFE, should we be throwing it? seems more likely to indicate dev\n+      // misuse than a runtime problem with HDFS.\n       if (!warningMap.containsKey(fs)) {\n         warningMap.put(fs, true);\n-        LOG.warn(msg, e);\n+        LOG.warn(\"Unable to set storagePolicy=\" + storagePolicy + \" for path=\" + path, e);\n       } else if (LOG.isDebugEnabled()) {\n-        LOG.debug(msg, e);\n+        LOG.debug(\"Unable to set storagePolicy=\" + storagePolicy + \" for path=\" + path, e);\n       }\n-      m = null; // could happen on setAccessible()\n-    }\n-    if (m != null) {\n-      try {\n-        m.invoke(fs, path, storagePolicy);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Set storagePolicy=\" + storagePolicy + \" for path=\" + path);\n-        }\n-      } catch (Exception e) {\n-        toThrow = e;\n-        // This swallows FNFE, should we be throwing it? seems more likely to indicate dev\n-        // misuse than a runtime problem with HDFS.\n-        if (!warningMap.containsKey(fs)) {\n-          warningMap.put(fs, true);\n-          LOG.warn(\"Unable to set storagePolicy=\" + storagePolicy + \" for path=\" + path, e);\n-        } else if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Unable to set storagePolicy=\" + storagePolicy + \" for path=\" + path, e);\n-        }\n-        // check for lack of HDFS-7228\n-        if (e instanceof InvocationTargetException) {\n-          final Throwable exception = e.getCause();\n-          if (exception instanceof RemoteException &&\n-              HadoopIllegalArgumentException.class.getName().equals(\n-                ((RemoteException)exception).getClassName())) {\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"Given storage policy, '\" +storagePolicy +\"', was rejected and probably \" +\n-                \"isn't a valid policy for the version of Hadoop you're running. I.e. if you're \" +\n-                \"trying to use SSD related policies then you're likely missing HDFS-7228. For \" +\n-                \"more information see the 'ArchivalStorage' docs for your Hadoop release.\");\n-            }\n+      // check for lack of HDFS-7228\n+      if (e instanceof InvocationTargetException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c61bdfb552b0915dd47c2b740b7d8d2e3bf9c4"}, "originalPosition": 199}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e002f59b486ba101a7c928c34c0a55ed519e1aa3", "author": {"user": {"login": "HorizonNet", "name": "Jan Hentschel"}}, "url": "https://github.com/apache/hbase/commit/e002f59b486ba101a7c928c34c0a55ed519e1aa3", "committedDate": "2020-01-14T17:48:56Z", "message": "HBASE-23622 Fixed review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzcyNjM1", "url": "https://github.com/apache/hbase/pull/1034#pullrequestreview-342772635", "createdAt": "2020-01-14T19:11:46Z", "commit": {"oid": "e002f59b486ba101a7c928c34c0a55ed519e1aa3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOToxMTo0NlrOFditOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxOToxMTo0NlrOFditOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjUyMTY1OA==", "bodyText": "I don't think this is correct. wouldn't e be the RemoteException?", "url": "https://github.com/apache/hbase/pull/1034#discussion_r366521658", "createdAt": "2020-01-14T19:11:46Z", "author": {"login": "busbey"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/util/CommonFSUtils.java", "diffHunk": "@@ -557,71 +508,44 @@ static void setStoragePolicy(final FileSystem fs, final Path path, final String\n    */\n   private static void invokeSetStoragePolicy(final FileSystem fs, final Path path,\n       final String storagePolicy) throws IOException {\n-    Method m = null;\n     Exception toThrow = null;\n+\n     try {\n-      m = fs.getClass().getDeclaredMethod(\"setStoragePolicy\",\n-        new Class<?>[] { Path.class, String.class });\n-      m.setAccessible(true);\n-    } catch (NoSuchMethodException e) {\n-      toThrow = e;\n-      final String msg = \"FileSystem doesn't support setStoragePolicy; HDFS-6584 not available\";\n-      if (!warningMap.containsKey(fs)) {\n-        warningMap.put(fs, true);\n-        LOG.warn(msg, e);\n-      } else if (LOG.isDebugEnabled()) {\n-        LOG.debug(msg, e);\n+      fs.setStoragePolicy(path, storagePolicy);\n+\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Set storagePolicy=\" + storagePolicy + \" for path=\" + path);\n       }\n-      m = null;\n-    } catch (SecurityException e) {\n+    } catch (Exception e) {\n       toThrow = e;\n-      final String msg = \"No access to setStoragePolicy on FileSystem; HDFS-6584 not available\";\n+      // This swallows FNFE, should we be throwing it? seems more likely to indicate dev\n+      // misuse than a runtime problem with HDFS.\n       if (!warningMap.containsKey(fs)) {\n         warningMap.put(fs, true);\n-        LOG.warn(msg, e);\n+        LOG.warn(\"Unable to set storagePolicy=\" + storagePolicy + \" for path=\" + path, e);\n       } else if (LOG.isDebugEnabled()) {\n-        LOG.debug(msg, e);\n+        LOG.debug(\"Unable to set storagePolicy=\" + storagePolicy + \" for path=\" + path, e);\n       }\n-      m = null; // could happen on setAccessible()\n-    }\n-    if (m != null) {\n-      try {\n-        m.invoke(fs, path, storagePolicy);\n+\n+      // check for lack of HDFS-7228\n+      final Throwable exception = e.getCause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e002f59b486ba101a7c928c34c0a55ed519e1aa3"}, "originalPosition": 175}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f71018c3abd53fc0d520a0f218075c90e644182a", "author": {"user": {"login": "HorizonNet", "name": "Jan Hentschel"}}, "url": "https://github.com/apache/hbase/commit/f71018c3abd53fc0d520a0f218075c90e644182a", "committedDate": "2020-01-14T19:45:31Z", "message": "HBASE-23622 Fixed review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzMxOTE0", "url": "https://github.com/apache/hbase/pull/1034#pullrequestreview-343331914", "createdAt": "2020-01-15T16:03:36Z", "commit": {"oid": "f71018c3abd53fc0d520a0f218075c90e644182a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2926, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}