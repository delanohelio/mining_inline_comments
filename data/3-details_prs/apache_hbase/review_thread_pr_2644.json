{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODYwMjI1", "number": 2644, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1MDo0OVrOE3fscA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NjoyNVrOE44cNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjI2NDE2OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1MDo0OVrOHw38Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoxODo0NFrOHy9q1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ==", "bodyText": "the return value is not used?", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521010199", "createdAt": "2020-11-11T01:50:49Z", "author": {"login": "Apache9"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyOTY0NA==", "bodyText": "Right. I was thinking to add trace in the case of troubleshooting but not sure.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521129644", "createdAt": "2020-11-11T05:58:11Z", "author": {"login": "clarax"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTEyOTgwOA==", "bodyText": "MetaWriteTest should be executed before MetaReadTest to populate the table.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521129808", "createdAt": "2020-11-11T05:58:49Z", "author": {"login": "clarax"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5ODk0NA==", "bodyText": "Can we generate a correct key, let's say 'aaabc' and get the location, and make sure that the key falls in the boundary of [region.startKey, region.endKey), it will be great.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521598944", "createdAt": "2020-11-11T19:48:31Z", "author": {"login": "huaxiangsun"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMDAzMg==", "bodyText": "For PE meta read testing, at the end of the test, can we get the read/write count for all meta regions? This will help us to see if read load is distributed among all meta replica regions.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521600032", "createdAt": "2020-11-11T19:50:34Z", "author": {"login": "huaxiangsun"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyMjIyOQ==", "bodyText": "Right. I was thinking to add trace in the case of troubleshooting but not sure.\n\nThen lt's remove it? Otherwise there will be a checkstyle warning.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r522122229", "createdAt": "2020-11-12T13:55:11Z", "author": {"login": "Apache9"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMDQ3Ng==", "bodyText": "added logging", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523200476", "createdAt": "2020-11-13T20:17:10Z", "author": {"login": "clarax"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMTIzOQ==", "bodyText": "Added split key generation so write, read and clean up will work with regions with continuous range of start key and end key.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523201239", "createdAt": "2020-11-13T20:18:44Z", "author": {"login": "clarax"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2006,41 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends TableTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      this.table = connection.getTable(TableName.valueOf(\"hbase:meta\"));\n+      this.regionLocator = connection.getRegionLocator(TableName.valueOf(\"hbase:meta\"));\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(Bytes.toBytes(Integer.toString(rd.nextInt(100) + 1)), true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDE5OQ=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjI2NzU2OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo1MTozNlrOHw3-Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoxNjo1M1rOHy9nRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDc2Mg==", "bodyText": "This will be a bit confusing that we add \"hbase:meta\" to hbase:meta?", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521010762", "createdAt": "2020-11-11T01:51:36Z", "author": {"login": "Apache9"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2276,7 +2319,38 @@ boolean testRow(final int i, final long startTime) throws IOException {\n       return true;\n     }\n   }\n+  static class MetaWriteTest extends Test {\n+\n+    MetaWriteTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+    }\n \n+    @Override\n+    void onTakedown() throws IOException {\n+    }\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException {\n+      List<RegionInfo> regionInfos = new ArrayList<RegionInfo>();\n+\n+      for (int index = 0; index < i; index++) {\n+        regionInfos.add(RegionInfoBuilder.newBuilder(TableName.valueOf(\"hbase:meta\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMDMyNg==", "bodyText": "Thanks. changed to the default test table.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523200326", "createdAt": "2020-11-13T20:16:53Z", "author": {"login": "clarax"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2276,7 +2319,38 @@ boolean testRow(final int i, final long startTime) throws IOException {\n       return true;\n     }\n   }\n+  static class MetaWriteTest extends Test {\n+\n+    MetaWriteTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+    }\n \n+    @Override\n+    void onTakedown() throws IOException {\n+    }\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException {\n+      List<RegionInfo> regionInfos = new ArrayList<RegionInfo>();\n+\n+      for (int index = 0; index < i; index++) {\n+        regionInfos.add(RegionInfoBuilder.newBuilder(TableName.valueOf(\"hbase:meta\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAxMDc2Mg=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTk2NjY2OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo0Mjo1OVrOHxbtWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMDoxOToxMlrOHy9rdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5NjI0OA==", "bodyText": "We do not need to set region id, builder will fill it internally, same for offline(), repilcaId, split bit.\nWe do need to set the startKey and endKey correctly to make sure that there is no overlay for regions. I think it is only one region if startKey and endKey are same.\nWe need to use the following as an example, it will insert about 11m entries to metatable, which has the continuous key space.\nbyte[5] startKey, endKey;\nfor (byte b1 = 'a'; b1 <= 'z'; b1++) {\nstartKey[0] = b1;\nendKey[0] = b1;\nfor (byte b2 = 'a'; b2 <= 'z'; b2++) {\nstartKey[1] = b2;\nendKey[1] = b2;\nfor (byte b3 = 'a'; b3 <= 'z'; b3++) {\nstartKey[2] = b3;\nendKey[2] = b3;\nfor (byte b4 = 'a'; b4 <= 'z'; b4++) {\nstartKey[3] = b4;\nendKey[3] = b4;\nfor (byte b5 = 'a'; b5 <= 'z'; b5++) {\nendKey[4] = b5;\nif (b5 == 'a') {\nstartKey[4] = '';\n}\n// TODO: add to Meta\nstartKey[4] = endKey[4];\n}\n}\n}\n}", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521596248", "createdAt": "2020-11-11T19:42:59Z", "author": {"login": "huaxiangsun"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2276,7 +2319,38 @@ boolean testRow(final int i, final long startTime) throws IOException {\n       return true;\n     }\n   }\n+  static class MetaWriteTest extends Test {\n+\n+    MetaWriteTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+    }\n \n+    @Override\n+    void onTakedown() throws IOException {\n+    }\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException {\n+      List<RegionInfo> regionInfos = new ArrayList<RegionInfo>();\n+\n+      for (int index = 0; index < i; index++) {\n+        regionInfos.add(RegionInfoBuilder.newBuilder(TableName.valueOf(\"hbase:meta\"))\n+          .setRegionId(this.rand.nextLong())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNjk5OA==", "bodyText": "Just found out that there is no info family. Can we populate this info to meta table as well? Sample code as below, we can populate the same server info here.\n`ServerName sn = ServerName.valueOf(\"bar\", 0, 0);\ntry (Table meta = MetaTableAccessor.getMetaHTable(UTIL.getConnection())) {\nList regionInfos = Lists.newArrayList(regionInfoA, regionInfoB);\nMetaTableAccessor.addRegionsToMeta(UTIL.getConnection(), regionInfos, 1);\n  // write the serverName column with a big current time, but set the masters time as even\n  // bigger. When region merge deletes the rows for regionA and regionB, the serverName columns\n  // should not be seen by the following get\n  long serverNameTime = EnvironmentEdgeManager.currentTime() + 100000000;\n  long masterSystemTime = EnvironmentEdgeManager.currentTime() + 123456789;\n\n  // write the serverName columns\n  MetaTableAccessor.updateRegionLocation(UTIL.getConnection(), regionInfoA, sn, 1,\n    serverNameTime);`", "url": "https://github.com/apache/hbase/pull/2644#discussion_r521606998", "createdAt": "2020-11-11T20:03:51Z", "author": {"login": "huaxiangsun"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2276,7 +2319,38 @@ boolean testRow(final int i, final long startTime) throws IOException {\n       return true;\n     }\n   }\n+  static class MetaWriteTest extends Test {\n+\n+    MetaWriteTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+    }\n \n+    @Override\n+    void onTakedown() throws IOException {\n+    }\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException {\n+      List<RegionInfo> regionInfos = new ArrayList<RegionInfo>();\n+\n+      for (int index = 0; index < i; index++) {\n+        regionInfos.add(RegionInfoBuilder.newBuilder(TableName.valueOf(\"hbase:meta\"))\n+          .setRegionId(this.rand.nextLong())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5NjI0OA=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzIwMTM5Ng==", "bodyText": "added both. Thank you.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523201396", "createdAt": "2020-11-13T20:19:12Z", "author": {"login": "clarax"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2276,7 +2319,38 @@ boolean testRow(final int i, final long startTime) throws IOException {\n       return true;\n     }\n   }\n+  static class MetaWriteTest extends Test {\n+\n+    MetaWriteTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+    }\n \n+    @Override\n+    void onTakedown() throws IOException {\n+    }\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException {\n+      List<RegionInfo> regionInfos = new ArrayList<RegionInfo>();\n+\n+      for (int index = 0; index < i; index++) {\n+        regionInfos.add(RegionInfoBuilder.newBuilder(TableName.valueOf(\"hbase:meta\"))\n+          .setRegionId(this.rand.nextLong())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTU5NjI0OA=="}, "originalCommit": {"oid": "29a3d0dab81097c8e56cfe6003028b9753100349"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDc5NDIwOnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0ODo0MFrOHzD5NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0ODo0MFrOHzD5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwMzIyMQ==", "bodyText": "Do we want to tie this to the new cleanMeta? i.e. in the help text here say cleanMeta cleans up the writes done by this test run?", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523303221", "createdAt": "2020-11-14T00:48:40Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -187,11 +192,12 @@\n       \"Run sequential read test\");\n     addCommandDescriptor(SequentialWriteTest.class, \"sequentialWrite\",\n       \"Run sequential write test\");\n-    addCommandDescriptor(ScanTest.class, \"scan\",\n-      \"Run scan test (read every row)\");\n+    addCommandDescriptor(MetaWriteTest.class, \"metaWrite\",\n+      \"Run addRegion test to populate meta table; used with 1 thread\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d01acd7833bcebaa817c883020edab99c7a7bab"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDc5NDM3OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0ODo1NFrOHzD5Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0ODo1NFrOHzD5Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwMzI1MQ==", "bodyText": "No harm in a class comment?", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523303251", "createdAt": "2020-11-14T00:48:54Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1481,6 +1489,28 @@ void onTakedown() throws IOException {\n     }\n   }\n \n+  static abstract class MetaTest extends TableTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d01acd7833bcebaa817c883020edab99c7a7bab"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDc5NjI0OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0OTo1N1rOHzD6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo0OTo1N1rOHzD6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwMzUwOQ==", "bodyText": "Add empty line above? Class comment on what this does?", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523303509", "createdAt": "2020-11-14T00:49:57Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2028,45 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends MetaTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d01acd7833bcebaa817c883020edab99c7a7bab"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDgwMjE0OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NDo0N1rOHzD9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NDo0N1rOHzD9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwNDM0Ng==", "bodyText": "No need of the if debug test... use parameterized logging... \"Get location for {}\", hRegionLocation.... no need of 'region' in log message.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523304346", "createdAt": "2020-11-14T00:54:47Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -1998,6 +2028,45 @@ protected void testTakedown() throws IOException {\n       super.testTakedown();\n     }\n   }\n+  static class MetaRandomReadTest extends MetaTest {\n+    private Random rd = new Random();\n+    private RegionLocator regionLocator;\n+\n+    MetaRandomReadTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+      LOG.info(\"call getRegionLocation\");\n+    }\n+\n+    @Override\n+    void onStartup() throws IOException {\n+      super.onStartup();\n+      this.regionLocator = connection.getRegionLocator(table.getName());\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException, InterruptedException {\n+      if (opts.randomSleep > 0) {\n+        Thread.sleep(rd.nextInt(opts.randomSleep));\n+      }\n+      HRegionLocation hRegionLocation = regionLocator.getRegionLocation(\n+        getSplitKey(rd.nextInt(opts.perClientRunRows)), true);\n+      if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d01acd7833bcebaa817c883020edab99c7a7bab"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDgwMjcyOnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NToxMVrOHzD96A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NToxMVrOHzD96A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwNDQyNA==", "bodyText": "No harm in class comment on what this does.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523304424", "createdAt": "2020-11-14T00:55:11Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2188,6 +2257,32 @@ boolean testRow(final int i, final long startTime) throws IOException {\n     }\n   }\n \n+  static class CleanMetaTest extends MetaTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d01acd7833bcebaa817c883020edab99c7a7bab"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDgwMzgyOnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NTo1OFrOHzD-dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NTo1OFrOHzD-dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwNDU2NA==", "bodyText": "No need of test for isdebug if parameterized logging.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523304564", "createdAt": "2020-11-14T00:55:58Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2188,6 +2257,32 @@ boolean testRow(final int i, final long startTime) throws IOException {\n     }\n   }\n \n+  static class CleanMetaTest extends MetaTest {\n+    CleanMetaTest(Connection con, TestOptions options, Status status) {\n+      super(con, options, status);\n+    }\n+\n+    @Override\n+    boolean testRow(final int i, final long startTime) throws IOException {\n+      try {\n+        RegionInfo regionInfo = connection.getRegionLocator(table.getName())\n+          .getRegionLocation(getSplitKey(i), false).getRegion();\n+        if (LOG.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d01acd7833bcebaa817c883020edab99c7a7bab"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDgwNDM2OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NjoyNVrOHzD-wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDo1NjoyNVrOHzD-wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzMwNDY0MA==", "bodyText": "Add empty line above and class comment.", "url": "https://github.com/apache/hbase/pull/2644#discussion_r523304640", "createdAt": "2020-11-14T00:56:25Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/test/java/org/apache/hadoop/hbase/PerformanceEvaluation.java", "diffHunk": "@@ -2276,7 +2371,29 @@ boolean testRow(final int i, final long startTime) throws IOException {\n       return true;\n     }\n   }\n+  static class MetaWriteTest extends MetaTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d01acd7833bcebaa817c883020edab99c7a7bab"}, "originalPosition": 181}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2375, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}