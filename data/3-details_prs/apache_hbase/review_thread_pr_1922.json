{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MTM4MDE1", "number": 1922, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNToxMjowNlrOEGmbzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1NzozNVrOEG1hcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzU2NjIzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNToxMjowNlrOGlf0yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo0MjozOFrOGppZhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg==", "bodyText": "wtb generate the hashCode at the beginning (in constructor)? instead of calculating it every time.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r441971912", "createdAt": "2020-06-18T05:12:06Z", "author": {"login": "Reidddddd"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MjI2NQ==", "bodyText": "the same below", "url": "https://github.com/apache/hbase/pull/1922#discussion_r441972265", "createdAt": "2020-06-18T05:13:28Z", "author": {"login": "Reidddddd"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5OTM3MQ==", "bodyText": "Nice one, since we have two final RegionInfo and hopefully they are not getting mutated after plan generation, we can do this.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442299371", "createdAt": "2020-06-18T15:08:19Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3MTc5OA==", "bodyText": "And make the object instances that much larger? Is that really helpful? I think of this as a premature optimization, something the JIT can handle for me if it thinks so.\nIf you feel strongly about it, I suppose...", "url": "https://github.com/apache/hbase/pull/1922#discussion_r443871798", "createdAt": "2020-06-22T23:05:15Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA1NjkyNQ==", "bodyText": "I don't have strong opinion since I have also never done it, just that I felt what if this is beneficial but it seems it is not proper optimization. It's fine to keep it as is in that case.\n@Reidddddd what do you think? Not a major improvement right?", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444056925", "createdAt": "2020-06-23T08:36:21Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA3NzQ5NQ==", "bodyText": "Step back, I don't think it ever needs hashCode() method, they are currently stored in ArrayList only. Why not implement it when needed.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444077495", "createdAt": "2020-06-23T09:09:00Z", "author": {"login": "Reidddddd"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2ODQ0Nw==", "bodyText": "So what I really wanted was equals, so that I could treat these objects as POJOs and do simple comparisons in unit tests. In java, it's a bad idea to implement a custom equals without also implementing hashCode, so I did both. Well, I generated both from IntelliJ without much thought about it.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444268447", "createdAt": "2020-06-23T14:29:04Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwODA4Mw==", "bodyText": "please make sure we implement hashCode if we implement equals.\nif we're not expecting to call hashCode then why are we going through ways to optimize the call?", "url": "https://github.com/apache/hbase/pull/1922#discussion_r445308083", "createdAt": "2020-06-25T05:02:28Z", "author": {"login": "busbey"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ4MTMwMQ==", "bodyText": "please make sure we implement hashCode if we implement equals\n\nhashCode and equals are not binding. hashCode only makes sense when object will be used as a key in Map or as en element in Set, with one rare case: hashCode is used as a part of judging equals.\n\nthen why are we going through ways to optimize the call?\n\nBecause I lacked the context. After I read the codes in trunk and got the intention of this PR, then found out it unnecessary.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r445481301", "createdAt": "2020-06-25T11:10:32Z", "author": {"login": "Reidddddd"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyMzA3Ng==", "bodyText": "From javadoc on Object#equals(Object)\n\nNote that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.\n\nAnd besides since I want to treat these objects like POJOs, it is useful to be able to use them in maps and sets.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446323076", "createdAt": "2020-06-26T17:42:38Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(17, 37)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk3MTkxMg=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTU3NDEyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNTowMjoyMFrOGlzkqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzozNTozNlrOGppMlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw==", "bodyText": "By introducing hashCode() and equals(), comparison is no more dependant on getter methods, can we also remove getFirstRegion() and getSecondRegion()? Although they are useful, but I don't think they will be used anymore. Thought?", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442295467", "createdAt": "2020-06-18T15:02:20Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMzY0Mw==", "bodyText": "Plus, removal of getters further reduces the chances of mutation of firstRegion and secondRegion.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442303643", "createdAt": "2020-06-18T15:14:42Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3MzAyNw==", "bodyText": "Yeah, seems they're unused. As is SplitNormalizationPlan#getRegionInfo(). Seems a little strange to have a POJO without public accessors, to include these members in toString but not have accessors, but yeah, less data visibility is better data visibility.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r443873027", "createdAt": "2020-06-22T23:09:11Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMxOTc2NA==", "bodyText": "Actually, I think i'd like to keep them. I'm finding they're handy for some of the experimental changes I've been trying. I'd prefer keep them for now.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446319764", "createdAt": "2020-06-26T17:35:36Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/MergeNormalizationPlan.java", "diffHunk": "@@ -78,4 +82,30 @@ public void execute(Admin admin) {\n       LOG.error(\"Error during region merge: \", ex);\n     }\n   }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    MergeNormalizationPlan that = (MergeNormalizationPlan) o;\n+\n+    return new EqualsBuilder()\n+      .append(firstRegion, that.firstRegion)\n+      .append(secondRegion, that.secondRegion)\n+      .isEquals();\n+  }\n+\n+  @Override\n+  public int hashCode() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI5NTQ2Nw=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTYwNzE0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SplitNormalizationPlan.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMDozMlrOGlz5rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNToxMDozMlrOGlz5rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMwMDg0Ng==", "bodyText": "Seems like a good candidate for final and setRegionInfo() can be removed?", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442300846", "createdAt": "2020-06-18T15:10:32Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SplitNormalizationPlan.java", "diffHunk": "@@ -33,11 +36,9 @@\n   private static final Logger LOG = LoggerFactory.getLogger(SplitNormalizationPlan.class.getName());\n \n   private RegionInfo regionInfo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjAzODI0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1NzozNVrOGl4MTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QyMDoyOTo1MFrOG7HsHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ==", "bodyText": "There is a special case for size to be 0, wondering if the region size is very small but nonzero, and there is a large size neighbor region, can we do something about it?\n100 1 100  (avg size is 20), in this case, 1 wont be merged as well.  What if some logic like\ncurrentSizeMb < 0.1 * avgRegionSizeMb and currentSizeMb/nextSizeMb < 0.1 (switch currentSizeMb and nextSizeMb as well), then merge", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442371151", "createdAt": "2020-06-18T16:57:35Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MjE3Mw==", "bodyText": "0.1 is a small random number, can be 0.05.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r442372173", "createdAt": "2020-06-18T16:59:19Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg3NjU5NQ==", "bodyText": "I like this idea of a fuzzy threshold idea. What if we merge a little more aggressively, expressed relative to avgRegionSizeMb? Something like\nif (currentSizeMb + nextSizeMb < avgRegionSizeMb * 0.4) {...}\n\nThis gives us a strong preference toward larger regions, with a threshold based on the average size.\nI guess next you'll same \"make it configurable\" :)", "url": "https://github.com/apache/hbase/pull/1922#discussion_r443876595", "createdAt": "2020-06-22T23:21:07Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQxNTQxMA==", "bodyText": "if (currentSizeMb + nextSizeMb < avgRegionSizeMb * 0.4) {...}\n\n\nThe above statement does not address the case that 100 1 80 (average 60), in this case 100 is not qualified for split, and none is qualified for merge as well.\nDo not mean to block your commit, and for cases like above, need to spend more time to find a right solution, we can create an improvement jira to address it.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r444415410", "createdAt": "2020-06-23T18:12:29Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyNDc1NA==", "bodyText": "@huaxiangsun I've been thinking about this and haven't come to a formula that I like. So let me propose this: rather than basing this decision on a scaling factor, how about we decide on some arbitrary value to use as meaning \"effectively 0\" in size. Say, any region <= 10mb will be considered as \"effectively 0-sized\" and we'll merge it into it's neighbor when possible. I supposed we can make this configurable as well...\nWhat do you think?", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446324754", "createdAt": "2020-06-26T17:46:06Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0NDk4Mw==", "bodyText": "Yeah, this is a good idea!", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446344983", "createdAt": "2020-06-26T18:30:07Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NzUxOA==", "bodyText": "Argh. This idea is in direct contradiction to the feature implemented by \"The minimum size for a region to be considered for a merge, in whole MBs.\"\n  static final String MERGE_MIN_REGION_SIZE_MB_KEY = \"hbase.normalizer.merge.min_region_size.mb\";\n  static final int DEFAULT_MERGE_MIN_REGION_SIZE_MB = 1;", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446387518", "createdAt": "2020-06-26T20:10:13Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxMzQ4Nw==", "bodyText": "I think what we need is to unset the default values of hbase.normalizer.merge.min_region_age.days and hbase.normalizer.merge.min_region_size.mb. If someone wants the features, make them opt-in.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446413487", "createdAt": "2020-06-26T21:15:30Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxODMxNA==", "bodyText": "Oh, and hbase.normalizer.min.region.count as well.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r446418314", "createdAt": "2020-06-26T21:29:16Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTMwNDI0MA==", "bodyText": "There hasn't been much feedback on the DISCUSS thread.\nI'm of the mind that we can resolve this specific bug using the special-case (if == 0) code I have in this patch. I think we should return with another change that allows the min_* values to be unset, and probably remove the defaults for everything except min_region_age.days.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r449304240", "createdAt": "2020-07-02T23:11:15Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc1OTQ0OQ==", "bodyText": "I think this is good enough considering if region is empty it is in KB's as per my experience(i can be wrong here). One issue is if there are few rows which are yet to expire then the probability of next region to be more than avgRegionSize is also low but ofcourse possible. Silver lline is eventually we will merge it maybe in 2-3 weeks.", "url": "https://github.com/apache/hbase/pull/1922#discussion_r453759449", "createdAt": "2020-07-13T16:02:57Z", "author": {"login": "mnpoonia"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDY0NTE1MQ==", "bodyText": "Replying to my earlier comment,\n\nSo let me propose this: rather than basing this decision on a scaling factor, how about we decide on some arbitrary value to use as meaning \"effectively 0\" in size.\n\nPer my above, and @mnpoonia 's, we've already decided that \"effectively 0\" means \"less than 1mb according to reported metrics.\" Thus I think we should keep this \"special logic\".", "url": "https://github.com/apache/hbase/pull/1922#discussion_r464645151", "createdAt": "2020-08-03T20:29:50Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -369,7 +369,8 @@ private boolean skipForMerge(final RegionStates regionStates, final RegionInfo r\n       }\n       final long currentSizeMb = getRegionSizeMB(current);\n       final long nextSizeMb = getRegionSizeMB(next);\n-      if (currentSizeMb + nextSizeMb < avgRegionSizeMb) {\n+      // always merge away empty regions when they present themselves.\n+      if (currentSizeMb == 0 || nextSizeMb == 0 || currentSizeMb + nextSizeMb < avgRegionSizeMb) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MTE1MQ=="}, "originalCommit": {"oid": "c20ec6ab9746170132f2064612ca10bd42a2d7f2"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2834, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}