{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyOTYzMDg4", "number": 1505, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxOTo1NFrODxiKaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowNVrODxiMHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjY2NTM2OnYy", "diffSide": "RIGHT", "path": "src/main/asciidoc/_chapters/developer.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxOTo1NFrOGFDa2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoxNjo0OVrOGFWdpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MjA5MA==", "bodyText": "As both commands below are the same, can we just state \"You can then use it to run all HBase tests with the command:\" and merge the two commands to one?", "url": "https://github.com/apache/hbase/pull/1505#discussion_r407952090", "createdAt": "2020-04-14T08:19:54Z", "author": {"login": "HorizonNet"}, "path": "src/main/asciidoc/_chapters/developer.adoc", "diffHunk": "@@ -1364,17 +1404,13 @@ sudo mount -t tmpfs -o size=2048M tmpfs /ram2G\n You can then use it to run all HBase tests on 2.0 with the command:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbc03cbb5faa733d3a4d2ee1783120f8c43f628"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI2NDEwMw==", "bodyText": "Thats dumb. Thanks for fingering it. I didn't read what was there just blindly changing structure.", "url": "https://github.com/apache/hbase/pull/1505#discussion_r408264103", "createdAt": "2020-04-14T16:16:49Z", "author": {"login": "saintstack"}, "path": "src/main/asciidoc/_chapters/developer.adoc", "diffHunk": "@@ -1364,17 +1404,13 @@ sudo mount -t tmpfs -o size=2048M tmpfs /ram2G\n You can then use it to run all HBase tests on 2.0 with the command:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MjA5MA=="}, "originalCommit": {"oid": "4fbc03cbb5faa733d3a4d2ee1783120f8c43f628"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjY2OTczOnYy", "diffSide": "RIGHT", "path": "src/main/asciidoc/_chapters/developer.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowNVrOGFDdjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoyMTowNVrOGFDdjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1Mjc4Mw==", "bodyText": "Remove this additional empty line.", "url": "https://github.com/apache/hbase/pull/1505#discussion_r407952783", "createdAt": "2020-04-14T08:21:05Z", "author": {"login": "HorizonNet"}, "path": "src/main/asciidoc/_chapters/developer.adoc", "diffHunk": "@@ -1344,17 +1368,33 @@ For convenience, you can run `mvn test -P runDevTests` to execute both small and\n [[hbase.unittests.test.faster]]\n ==== Running tests faster\n \n-By default, `$ mvn test -P runAllTests` runs all small tests in 1 forked instance and the medium and large tests in 5 parallel forked instances. Up these counts to get the build to run faster (you may run into\n-rare issues of test mutual interference). For example,\n-allowing that you want to have 2 tests in parallel per core, and you need about 2GB of memory per test (at the extreme), if you have an 8 core, 24GB box, you can have 16 tests in parallel.\n-but the memory available limits it to 12 (24/2), To run all tests with 12 tests in parallel, do this: +mvn test -P runAllTests -Dsurefire.secondPartForkCount=12+.\n-If using a version earlier than  2.0, do: +mvn test -P runAllTests -Dsurefire.secondPartThreadCount=12 +.\n-You can also increase the fork count for the first party by setting -Dsurefire.firstPartForkCount to a value > 1.\n-The values passed as fork counts can be specified as a fraction of CPU as follows: for two forks per available CPU, set the value to 2.0C; for a fork for every two CPUs, set it to 0.5C.\n-To increase the speed, you can as well use a ramdisk.\n-You will need 2GB  of memory to run all tests.\n-You will also need to delete the files between two  test run.\n-The typical way to configure a ramdisk on Linux is:\n+By default, `$ mvn test -P runAllTests` runs all tests using a quarter of the CPUs available on machine\n+hosting the test run (see `surefire.firstPartForkCount` and `surefire.secondPartForkCount` in the top-level\n+hbase `pom.xml`). Up these counts to get the build to run faster. You can also have hbase modules\n+run their tests in parrallel when the dependency graph allows by passing `--threads=N` when you invoke\n+maven, where `N` is the amount of parallelism wanted.\n+\n+For example, allowing that you want to use all cores on a machine to run tests,\n+you could start up the maven test run with:\n+\n+----\n+  $ x=\"1.0C\";  mvn -Dsurefire.firstPartForkCount=$x -Dsurefire.secondPartForkCount=$x test -PrunAllTests\n+----\n+\n+If a 32 core machine, you should see periods during which 32 forked jvms appear in your process listing each running unit tests.\n+Your milage may vary. Dependent on hardware, overcommittment of CPU, memory, etc., can bring the test suite crashing down,\n+usually complaining of system exit and incomplete test report xml files. Start gently, with the default fork setting which\n+uses a quarter of the available CPUs.\n+\n+Adding the `--threads=N`, maven will run N modules in parallel when dependencies allow. Be aware, if you have\n+set the forkcount to `1.0C`, and the threads count to '2', the number of concurrent test runners can approach\n+2 * CPU count likely overcommitting the host machine.\n+\n+You will need ~2.2GB of memory per forked JVM plus the memory used by maven itself (3-4G).\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fbc03cbb5faa733d3a4d2ee1783120f8c43f628"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1918, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}