{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1ODE2NjIw", "number": 1258, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozNjoyNFrODmfGOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0MTozOFrODmfKzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgxOTc4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozNjoyNFrOFz7qiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozNjoyNFrOFz7qiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTI0Mw==", "bodyText": "Nice!", "url": "https://github.com/apache/hbase/pull/1258#discussion_r389999243", "createdAt": "2020-03-09T22:36:24Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1722,21 +1723,36 @@ public boolean balance() throws IOException {\n     return balance(false);\n   }\n \n-  public boolean balance(boolean force) throws IOException {\n-    // if master not initialized, don't run balancer.\n+  /**\n+   * Checks master state before initiating action over region topology.\n+   * @param action the name of the action under consideration, for logging.\n+   * @return {@code true} when the caller should exit early, {@code false} otherwise.\n+   */\n+  private boolean skipRegionManagementAction(final String action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4fea1149c5d069de342d44684d73ec9991ef6c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgyMzQ4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozODowNVrOFz7sxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjozODowNVrOFz7sxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk5OTgxNA==", "bodyText": "Nice -- wraps a null-check around isEmpty(). Had to look it up.", "url": "https://github.com/apache/hbase/pull/1258#discussion_r389999814", "createdAt": "2020-03-09T22:38:05Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1868,52 +1889,50 @@ public RegionNormalizer getRegionNormalizer() {\n    *    is globally disabled)\n    */\n   public boolean normalizeRegions() throws IOException {\n-    if (!isInitialized()) {\n-      LOG.debug(\"Master has not been initialized, don't run region normalizer.\");\n-      return false;\n-    }\n-    if (this.getServerManager().isClusterShutdown()) {\n-      LOG.info(\"Cluster is shutting down, don't run region normalizer.\");\n+    if (regionNormalizerTracker == null || !regionNormalizerTracker.isNormalizerOn()) {\n+      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n       return false;\n     }\n-    if (isInMaintenanceMode()) {\n-      LOG.info(\"Master is in maintenance mode, don't run region normalizer.\");\n+    if (skipRegionManagementAction(\"region normalizer\")) {\n       return false;\n     }\n-    if (!this.regionNormalizerTracker.isNormalizerOn()) {\n-      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n+    if (assignmentManager.hasRegionsInTransition()) {\n       return false;\n     }\n \n     synchronized (this.normalizer) {\n       // Don't run the normalizer concurrently\n+\n       List<TableName> allEnabledTables = new ArrayList<>(\n         this.tableStateManager.getTablesInStates(TableState.State.ENABLED));\n \n       Collections.shuffle(allEnabledTables);\n \n       for (TableName table : allEnabledTables) {\n-        if (isInMaintenanceMode()) {\n-          LOG.debug(\"Master is in maintenance mode, stop running region normalizer.\");\n-          return false;\n-        }\n-\n         TableDescriptor tblDesc = getTableDescriptors().get(table);\n         if (table.isSystemTable() || (tblDesc != null &&\n             !tblDesc.isNormalizationEnabled())) {\n           LOG.trace(\"Skipping normalization for {}, as it's either system\"\n               + \" table or doesn't have auto normalization turned on\", table);\n           continue;\n         }\n-        List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n-        if (plans != null) {\n-          for (NormalizationPlan plan : plans) {\n-            plan.execute(asyncClusterConnection.toConnection().getAdmin());\n-            if (plan.getType() == PlanType.SPLIT) {\n-              splitPlanCount++;\n-            } else if (plan.getType() == PlanType.MERGE) {\n-              mergePlanCount++;\n-            }\n+\n+        // make one last check that the cluster isn't shutting down before proceeding.\n+        if (skipRegionManagementAction(\"region normalizer\")) {\n+          return false;\n+        }\n+\n+        final List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n+        if (CollectionUtils.isEmpty(plans)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4fea1149c5d069de342d44684d73ec9991ef6c"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjgzMTQ4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMjo0MTozOFrOFz7xWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNjo1MDo1M1rOF0X22w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDk4NQ==", "bodyText": "toConnection() returns a cached Connection but we make a new Admin object every time (at least via AsyncClusterConnectionImpl. Should we just cache this Admin once for all plans?", "url": "https://github.com/apache/hbase/pull/1258#discussion_r390000985", "createdAt": "2020-03-09T22:41:38Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1868,52 +1889,50 @@ public RegionNormalizer getRegionNormalizer() {\n    *    is globally disabled)\n    */\n   public boolean normalizeRegions() throws IOException {\n-    if (!isInitialized()) {\n-      LOG.debug(\"Master has not been initialized, don't run region normalizer.\");\n-      return false;\n-    }\n-    if (this.getServerManager().isClusterShutdown()) {\n-      LOG.info(\"Cluster is shutting down, don't run region normalizer.\");\n+    if (regionNormalizerTracker == null || !regionNormalizerTracker.isNormalizerOn()) {\n+      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n       return false;\n     }\n-    if (isInMaintenanceMode()) {\n-      LOG.info(\"Master is in maintenance mode, don't run region normalizer.\");\n+    if (skipRegionManagementAction(\"region normalizer\")) {\n       return false;\n     }\n-    if (!this.regionNormalizerTracker.isNormalizerOn()) {\n-      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n+    if (assignmentManager.hasRegionsInTransition()) {\n       return false;\n     }\n \n     synchronized (this.normalizer) {\n       // Don't run the normalizer concurrently\n+\n       List<TableName> allEnabledTables = new ArrayList<>(\n         this.tableStateManager.getTablesInStates(TableState.State.ENABLED));\n \n       Collections.shuffle(allEnabledTables);\n \n       for (TableName table : allEnabledTables) {\n-        if (isInMaintenanceMode()) {\n-          LOG.debug(\"Master is in maintenance mode, stop running region normalizer.\");\n-          return false;\n-        }\n-\n         TableDescriptor tblDesc = getTableDescriptors().get(table);\n         if (table.isSystemTable() || (tblDesc != null &&\n             !tblDesc.isNormalizationEnabled())) {\n           LOG.trace(\"Skipping normalization for {}, as it's either system\"\n               + \" table or doesn't have auto normalization turned on\", table);\n           continue;\n         }\n-        List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n-        if (plans != null) {\n-          for (NormalizationPlan plan : plans) {\n-            plan.execute(asyncClusterConnection.toConnection().getAdmin());\n-            if (plan.getType() == PlanType.SPLIT) {\n-              splitPlanCount++;\n-            } else if (plan.getType() == PlanType.MERGE) {\n-              mergePlanCount++;\n-            }\n+\n+        // make one last check that the cluster isn't shutting down before proceeding.\n+        if (skipRegionManagementAction(\"region normalizer\")) {\n+          return false;\n+        }\n+\n+        final List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n+        if (CollectionUtils.isEmpty(plans)) {\n+          return true;\n+        }\n+\n+        for (NormalizationPlan plan : plans) {\n+          plan.execute(asyncClusterConnection.toConnection().getAdmin());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f4fea1149c5d069de342d44684d73ec9991ef6c"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQ2MTE0Nw==", "bodyText": "Oh fun. This code actually leaks admin instances :(", "url": "https://github.com/apache/hbase/pull/1258#discussion_r390461147", "createdAt": "2020-03-10T16:50:53Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -1868,52 +1889,50 @@ public RegionNormalizer getRegionNormalizer() {\n    *    is globally disabled)\n    */\n   public boolean normalizeRegions() throws IOException {\n-    if (!isInitialized()) {\n-      LOG.debug(\"Master has not been initialized, don't run region normalizer.\");\n-      return false;\n-    }\n-    if (this.getServerManager().isClusterShutdown()) {\n-      LOG.info(\"Cluster is shutting down, don't run region normalizer.\");\n+    if (regionNormalizerTracker == null || !regionNormalizerTracker.isNormalizerOn()) {\n+      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n       return false;\n     }\n-    if (isInMaintenanceMode()) {\n-      LOG.info(\"Master is in maintenance mode, don't run region normalizer.\");\n+    if (skipRegionManagementAction(\"region normalizer\")) {\n       return false;\n     }\n-    if (!this.regionNormalizerTracker.isNormalizerOn()) {\n-      LOG.debug(\"Region normalization is disabled, don't run region normalizer.\");\n+    if (assignmentManager.hasRegionsInTransition()) {\n       return false;\n     }\n \n     synchronized (this.normalizer) {\n       // Don't run the normalizer concurrently\n+\n       List<TableName> allEnabledTables = new ArrayList<>(\n         this.tableStateManager.getTablesInStates(TableState.State.ENABLED));\n \n       Collections.shuffle(allEnabledTables);\n \n       for (TableName table : allEnabledTables) {\n-        if (isInMaintenanceMode()) {\n-          LOG.debug(\"Master is in maintenance mode, stop running region normalizer.\");\n-          return false;\n-        }\n-\n         TableDescriptor tblDesc = getTableDescriptors().get(table);\n         if (table.isSystemTable() || (tblDesc != null &&\n             !tblDesc.isNormalizationEnabled())) {\n           LOG.trace(\"Skipping normalization for {}, as it's either system\"\n               + \" table or doesn't have auto normalization turned on\", table);\n           continue;\n         }\n-        List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n-        if (plans != null) {\n-          for (NormalizationPlan plan : plans) {\n-            plan.execute(asyncClusterConnection.toConnection().getAdmin());\n-            if (plan.getType() == PlanType.SPLIT) {\n-              splitPlanCount++;\n-            } else if (plan.getType() == PlanType.MERGE) {\n-              mergePlanCount++;\n-            }\n+\n+        // make one last check that the cluster isn't shutting down before proceeding.\n+        if (skipRegionManagementAction(\"region normalizer\")) {\n+          return false;\n+        }\n+\n+        final List<NormalizationPlan> plans = this.normalizer.computePlanForTable(table);\n+        if (CollectionUtils.isEmpty(plans)) {\n+          return true;\n+        }\n+\n+        for (NormalizationPlan plan : plans) {\n+          plan.execute(asyncClusterConnection.toConnection().getAdmin());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDAwMDk4NQ=="}, "originalCommit": {"oid": "0f4fea1149c5d069de342d44684d73ec9991ef6c"}, "originalPosition": 185}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1977, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}