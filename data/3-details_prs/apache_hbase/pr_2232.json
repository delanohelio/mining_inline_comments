{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1NTUzNjI2", "number": 2232, "title": "HBASE-24806 Small Updates to Functionality of Shell IRB Workspace", "bodyText": "Resolves https://issues.apache.org/jira/browse/HBASE-24806\nHigh-Level Overview\n\nCreate exception handler for shell (to hide tracebacks unless debug is on). The handler just replaces exceptions with SystemExit.\nGet rid of a recently introduced IRB warning (can't alias help from irb_help).\nCreate a new module Hbase::Loader that can find ruby scripts using JRuby's loader. This is better than IRB::Loader because it can find anything that can be found directly with load, including files inside a Jar. It is necessary so that our shell can evaluate scripts in the $LOAD_PATH/classpath.\nUpdate the test runner to catch SystemExits. This will ensure that our unit tests stay potent and cannot fail unnoticed.\n\nChangelog\n\nMove exception handler from Shell::Shell#eval_io to new method,\nShell::Shell#exception_handler\nAdd unit tests for Shell::Shell#exception_handler\nChange Shell::Shell#eval_io to no longer raise SystemExit when any error is\nseen and update unit test\nUpdate ruby test runner to catch SystemExit and fail to avoid tests that\ncause the test runner to incorrectly exit successfully\nAdd Hbase::Loader module to find ruby scripts in the $LOAD_PATH and classpath\nusing JRuby's loader.\nIn hbase-shell, install IRB commands before exporting HBase commands. The\nHBase commands will override the IRB commands, and no warning will be\nprinted.", "createdAt": "2020-08-10T14:56:57Z", "url": "https://github.com/apache/hbase/pull/2232", "merged": true, "mergeCommit": {"oid": "98e35842ebeb9a419df37a1c3166b4468b85a6bc"}, "closed": true, "closedAt": "2020-08-18T20:14:35Z", "author": {"login": "bitoffdev"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9jUn8AH2gAyNDY1NTUzNjI2OmJhN2M1N2VjOTM2NzMxNTYzMzkyZDdmY2Y5MDA4YzcyZmEzYTE1ZTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc__5f4AFqTQ2ODk5MzI1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ba7c57ec936731563392d7fcf9008c72fa3a15e0", "author": {"user": {"login": "bitoffdev", "name": "Elliot"}}, "url": "https://github.com/apache/hbase/commit/ba7c57ec936731563392d7fcf9008c72fa3a15e0", "committedDate": "2020-08-10T14:44:40Z", "message": "HBASE-24806 Small Updates to Functionality of Shell IRB Workspace\n\n- Move exception handler from Shell::Shell#eval_io to new method,\n  Shell::Shell#exception_handler\n- Add unit tests for Shell::Shell#exception_handler\n- Change Shell::Shell#eval_io to no longer raise SystemExit when any error is\n  seen and update unit test\n- Update ruby test runner to catch SystemExit and fail to avoid tests that\n  cause the test runner to incorrectly exit successfully\n- Add Hbase::Loader module to find ruby scripts in the $LOAD_PATH and classpath\n  using JRuby's loader.\n- In hbase-shell, install IRB commands before exporting HBase commands. The\n  HBase commands will override the IRB commands, and no warning will be\n  printed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDAxODM5", "url": "https://github.com/apache/hbase/pull/2232#pullrequestreview-464401839", "createdAt": "2020-08-10T16:47:21Z", "commit": {"oid": "ba7c57ec936731563392d7fcf9008c72fa3a15e0"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjo0NzoyMVrOG-W70w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNjo1MDoyMVrOG-XCdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MDY1OQ==", "bodyText": "Control flow returns to this line after a raise ? raise is an expression in this language..?", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468040659", "createdAt": "2020-08-10T16:47:21Z", "author": {"login": "ndimiduk"}, "path": "hbase-shell/src/main/ruby/shell.rb", "diffHunk": "@@ -335,12 +348,9 @@ def eval_io(io)\n         # Include the 'ERROR' string to try to make transition easier for scripts that\n         # may have already been relying on grepping output.\n         puts \"ERROR #{e.class}: #{message}\"\n-        if $fullBacktrace\n-          # re-raising the will include a backtrace and exit.\n-          raise e\n-        else\n-          exit 1\n-        end\n+        raise e unless hide_traceback\n+\n+        exit 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7c57ec936731563392d7fcf9008c72fa3a15e0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MTI2OA==", "bodyText": "this propagates source files and line numbers for the purpose of error handling? nice!", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468041268", "createdAt": "2020-08-10T16:48:27Z", "author": {"login": "ndimiduk"}, "path": "hbase-shell/src/main/ruby/shell.rb", "diffHunk": "@@ -320,10 +323,20 @@ def eval_io(io)\n       scanner = RubyLex.new\n       scanner.set_input(io)\n \n+      scanner.each_top_level_statement do |statement, linenum|\n+        puts(workspace.evaluate(nil, statement, filename, linenum))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7c57ec936731563392d7fcf9008c72fa3a15e0"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0MjM1Nw==", "bodyText": "why do you both define a variable hide_traceback = true and also pass true to the exception_handler -- it's redundant?", "url": "https://github.com/apache/hbase/pull/2232#discussion_r468042357", "createdAt": "2020-08-10T16:50:21Z", "author": {"login": "ndimiduk"}, "path": "hbase-shell/src/test/ruby/shell/shell_test.rb", "diffHunk": "@@ -123,14 +124,35 @@ class FooC; end\n \n     # check that at least one of the HBase constants is present while evaluating\n     io = StringIO.new <<~EOF\n-      ROWPREFIXFILTER\n+      ROWPREFIXFILTER.dump\n     EOF\n     output = capture_stdout { @shell.eval_io(io) }\n     assert_match(/\"ROWPREFIXFILTER\"/, output)\n   end\n \n   #-----------------------------------------------------------------------------\n \n+  define_test 'Shell::Shell#exception_handler should hide traceback' do\n+    class TestException < RuntimeError; end\n+    hide_traceback = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7c57ec936731563392d7fcf9008c72fa3a15e0"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4323aae535e3a273338095157893a21c2d1d2112", "author": {"user": {"login": "bitoffdev", "name": "Elliot"}}, "url": "https://github.com/apache/hbase/commit/4323aae535e3a273338095157893a21c2d1d2112", "committedDate": "2020-08-10T17:19:32Z", "message": "Remove unused variables from shell_test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTkzMjU1", "url": "https://github.com/apache/hbase/pull/2232#pullrequestreview-468993255", "createdAt": "2020-08-18T05:06:27Z", "commit": {"oid": "4323aae535e3a273338095157893a21c2d1d2112"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTowNjoyOFrOHCDfsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNTowNzoyMlrOHCDgng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNjQ2Ng==", "bodyText": "Whats going on here? We are skipping output of the exception stack trace?", "url": "https://github.com/apache/hbase/pull/2232#discussion_r471916466", "createdAt": "2020-08-18T05:06:28Z", "author": {"login": "saintstack"}, "path": "hbase-shell/src/main/ruby/shell.rb", "diffHunk": "@@ -320,10 +323,20 @@ def eval_io(io)\n       scanner = RubyLex.new\n       scanner.set_input(io)\n \n+      scanner.each_top_level_statement do |statement, linenum|\n+        puts(workspace.evaluate(nil, statement, filename, linenum))\n+      end\n+      nil\n+    end\n+\n+    ##\n+    # Runs a block and logs exception from both Ruby and Java, optionally discarding the traceback\n+    #\n+    # @param [Boolean] hide_traceback if true, Exceptions will be converted to\n+    #   a SystemExit so that the traceback is not printed\n+    def self.exception_handler(hide_traceback)\n       begin\n-        scanner.each_top_level_statement do |statement, linenum|\n-          puts(workspace.evaluate(nil, statement, 'stdin', linenum))\n-        end\n+        yield", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4323aae535e3a273338095157893a21c2d1d2112"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNjcwMg==", "bodyText": "We need this begin/rescue w/ a yield in the middle of it?", "url": "https://github.com/apache/hbase/pull/2232#discussion_r471916702", "createdAt": "2020-08-18T05:07:22Z", "author": {"login": "saintstack"}, "path": "hbase-shell/src/main/ruby/shell.rb", "diffHunk": "@@ -320,10 +323,20 @@ def eval_io(io)\n       scanner = RubyLex.new\n       scanner.set_input(io)\n \n+      scanner.each_top_level_statement do |statement, linenum|\n+        puts(workspace.evaluate(nil, statement, filename, linenum))\n+      end\n+      nil\n+    end\n+\n+    ##\n+    # Runs a block and logs exception from both Ruby and Java, optionally discarding the traceback\n+    #\n+    # @param [Boolean] hide_traceback if true, Exceptions will be converted to\n+    #   a SystemExit so that the traceback is not printed\n+    def self.exception_handler(hide_traceback)\n       begin\n-        scanner.each_top_level_statement do |statement, linenum|\n-          puts(workspace.evaluate(nil, statement, 'stdin', linenum))\n-        end\n+        yield", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNjQ2Ng=="}, "originalCommit": {"oid": "4323aae535e3a273338095157893a21c2d1d2112"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4844, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}