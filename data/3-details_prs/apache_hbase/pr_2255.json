{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MzI3MzYx", "number": 2255, "title": "HBASE-24877 Add option to avoid aborting RS process upon uncaught exc\u2026", "bodyText": "\u2026eptions happen on replication source", "createdAt": "2020-08-13T11:34:06Z", "url": "https://github.com/apache/hbase/pull/2255", "merged": true, "mergeCommit": {"oid": "2042523f43cdd0ec57f8fec6e35bdede20f0abb1"}, "closed": true, "closedAt": "2020-09-14T10:13:15Z", "author": {"login": "wchevreuil"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-eXengH2gAyNDY3MzI3MzYxOjVhMGFkYWYyMDNkN2E3YjI3MGE2MTU4ODJhYWRmNGIzNjViZGUwN2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHQHgTgFqTQ4NTI2OTM3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5a0adaf203d7a7b270a615882aadf4b365bde07b", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/5a0adaf203d7a7b270a615882aadf4b365bde07b", "committedDate": "2020-08-13T11:32:11Z", "message": "HBASE-24877 Add option to avoid aborting RS process upon uncaught exceptions happen on replication source"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Njg0OTQy", "url": "https://github.com/apache/hbase/pull/2255#pullrequestreview-466684942", "createdAt": "2020-08-13T11:46:19Z", "commit": {"oid": "5a0adaf203d7a7b270a615882aadf4b365bde07b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTo0NjoxOVrOHAH62A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjoxMDozMFrOHAIq0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5MTgwMA==", "bodyText": "nit: redundant", "url": "https://github.com/apache/hbase/pull/2255#discussion_r469891800", "createdAt": "2020-08-13T11:46:19Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -35,6 +35,8 @@\n import java.util.concurrent.PriorityBlockingQueue;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicInteger;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0adaf203d7a7b270a615882aadf4b365bde07b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5MjEyNw==", "bodyText": "nit: final for both?", "url": "https://github.com/apache/hbase/pull/2255#discussion_r469892127", "createdAt": "2020-08-13T11:46:58Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -120,6 +122,13 @@\n   // ReplicationEndpoint which will handle the actual replication\n   private volatile ReplicationEndpoint replicationEndpoint;\n \n+  private AtomicBoolean retryStartup = new AtomicBoolean(false);\n+\n+  private AtomicBoolean startupOngoing = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0adaf203d7a7b270a615882aadf4b365bde07b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkwNDA4MQ==", "bodyText": "I hope if we encounter uncaughtException here, we want to retry the loop again.\nIf so, shall we also add startupOngoing.set(true); here explicitely? Just in case if it is set to false in initialize()?", "url": "https://github.com/apache/hbase/pull/2255#discussion_r469904081", "createdAt": "2020-08-13T12:10:30Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -583,16 +614,27 @@ private void initialize() {\n       PriorityBlockingQueue<Path> queue = entry.getValue();\n       tryStartNewShipper(walGroupId, queue);\n     }\n+    this.startupOngoing.set(false);\n   }\n \n   @Override\n   public void startup() {\n     // mark we are running now\n     this.sourceRunning = true;\n-    initThread = new Thread(this::initialize);\n-    Threads.setDaemonThreadRunning(initThread,\n-      Thread.currentThread().getName() + \".replicationSource,\" + this.queueId,\n-      this::uncaughtException);\n+    this.retryStartup.set(true);\n+    do {\n+      if(retryStartup.get()) {\n+        retryStartup.set(false);\n+        startupOngoing.set(true);\n+        initThread = new Thread(this::initialize);\n+        Threads.setDaemonThreadRunning(initThread,\n+          Thread.currentThread().getName() + \".replicationSource,\" + this.queueId,\n+          (t,e) -> {\n+          uncaughtException(t, e);\n+          retryStartup.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a0adaf203d7a7b270a615882aadf4b365bde07b"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjYzNjE4", "url": "https://github.com/apache/hbase/pull/2255#pullrequestreview-467263618", "createdAt": "2020-08-14T02:06:43Z", "commit": {"oid": "5a0adaf203d7a7b270a615882aadf4b365bde07b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fb4dce7b7f52839ee3b142c621d50e7acb38052", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/3fb4dce7b7f52839ee3b142c621d50e7acb38052", "committedDate": "2020-08-14T16:34:53Z", "message": "Addressing Viraj comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMDk2NzU5", "url": "https://github.com/apache/hbase/pull/2255#pullrequestreview-470096759", "createdAt": "2020-08-19T03:19:03Z", "commit": {"oid": "3fb4dce7b7f52839ee3b142c621d50e7acb38052"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoxOTowNFrOHCvV0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMzoyNDoxNFrOHCvihg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNDgzNA==", "bodyText": "So here it is for wal reader. I think refreshSources and retry is an acceptable way. Then let's just test the abortOnError flag here? If it is true, we will call uncaughtException, otherwise we will try to refresh the replication source.", "url": "https://github.com/apache/hbase/pull/2255#discussion_r472634834", "createdAt": "2020-08-19T03:19:04Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -373,7 +389,21 @@ private void tryStartNewShipper(String walGroupId, PriorityBlockingQueue<Path> q\n         Threads.setDaemonThreadRunning(\n             walReader, Thread.currentThread().getName()\n                 + \".replicationSource.wal-reader.\" + walGroupId + \",\" + queueId,\n-            this::uncaughtException);\n+                (t,e) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb4dce7b7f52839ee3b142c621d50e7acb38052"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNjUzNw==", "bodyText": "OK, the code is almost the same... Then I think we could move the logic into uncaughtException method? If abortOnError is true, we about, otherwise we will try to refresh the source.", "url": "https://github.com/apache/hbase/pull/2255#discussion_r472636537", "createdAt": "2020-08-19T03:21:46Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java", "diffHunk": "@@ -290,7 +290,22 @@ private boolean updateLogPosition(WALEntryBatch batch) {\n   public void startup(UncaughtExceptionHandler handler) {\n     String name = Thread.currentThread().getName();\n     Threads.setDaemonThreadRunning(this,\n-      name + \".replicationSource.shipper\" + walGroupId + \",\" + source.getQueueId(), handler);\n+      name + \".replicationSource.shipper\" + walGroupId + \",\" + source.getQueueId(),\n+      (t,e) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb4dce7b7f52839ee3b142c621d50e7acb38052"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzNzMwOA==", "bodyText": "This flag is only used in this method? Let's use a local var instead of a class member field?", "url": "https://github.com/apache/hbase/pull/2255#discussion_r472637308", "createdAt": "2020-08-19T03:22:58Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -583,16 +617,27 @@ private void initialize() {\n       PriorityBlockingQueue<Path> queue = entry.getValue();\n       tryStartNewShipper(walGroupId, queue);\n     }\n+    this.startupOngoing.set(false);\n   }\n \n   @Override\n   public void startup() {\n     // mark we are running now\n     this.sourceRunning = true;\n-    initThread = new Thread(this::initialize);\n-    Threads.setDaemonThreadRunning(initThread,\n-      Thread.currentThread().getName() + \".replicationSource,\" + this.queueId,\n-      this::uncaughtException);\n+    this.retryStartup.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb4dce7b7f52839ee3b142c621d50e7acb38052"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjYzODA4Ng==", "bodyText": "So this one is exactly the same with source.isActive? Can we just make use of that flag instead of introducing a new one?", "url": "https://github.com/apache/hbase/pull/2255#discussion_r472638086", "createdAt": "2020-08-19T03:24:14Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -583,16 +617,27 @@ private void initialize() {\n       PriorityBlockingQueue<Path> queue = entry.getValue();\n       tryStartNewShipper(walGroupId, queue);\n     }\n+    this.startupOngoing.set(false);\n   }\n \n   @Override\n   public void startup() {\n     // mark we are running now\n     this.sourceRunning = true;\n-    initThread = new Thread(this::initialize);\n-    Threads.setDaemonThreadRunning(initThread,\n-      Thread.currentThread().getName() + \".replicationSource,\" + this.queueId,\n-      this::uncaughtException);\n+    this.retryStartup.set(true);\n+    do {\n+      if(retryStartup.get()) {\n+        retryStartup.set(false);\n+        startupOngoing.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fb4dce7b7f52839ee3b142c621d50e7acb38052"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af3041eb5ab52b147b72880faf8507ef8a1f4cf", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/8af3041eb5ab52b147b72880faf8507ef8a1f4cf", "committedDate": "2020-08-24T12:06:38Z", "message": "Addressing Duo's comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNDI4OTE2", "url": "https://github.com/apache/hbase/pull/2255#pullrequestreview-473428916", "createdAt": "2020-08-24T12:47:47Z", "commit": {"oid": "8af3041eb5ab52b147b72880faf8507ef8a1f4cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo0Nzo0OFrOHFiryA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1MToyNVrOHFizhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3MzE5Mg==", "bodyText": "nit: indent?", "url": "https://github.com/apache/hbase/pull/2255#discussion_r475573192", "createdAt": "2020-08-24T12:47:48Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -119,6 +120,14 @@\n   private int logQueueWarnThreshold;\n   // ReplicationEndpoint which will handle the actual replication\n   private volatile ReplicationEndpoint replicationEndpoint;\n+  //This is needed for the startup loop to identify when there's already\n+  // an initialization happening (but not finished yet),\n+  // so that it doesn't try submit another initialize thread.\n+  // NOTE: this should only be set to false at the end of initialize method, prior to return.\n+//  private final AtomicBoolean startupOngoing = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af3041eb5ab52b147b72880faf8507ef8a1f4cf"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3Mzk4OQ==", "bodyText": "Need to update the formatter config? Usually it should be 'if (manager != null) {'.", "url": "https://github.com/apache/hbase/pull/2255#discussion_r475573989", "createdAt": "2020-08-24T12:49:20Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -450,11 +463,28 @@ WALEntryFilter getWalEntryFilter() {\n     return walEntryFilter;\n   }\n \n-  protected final void uncaughtException(Thread t, Throwable e) {\n+  protected final void uncaughtException(Thread t, Throwable e,\n+      ReplicationSourceManager manager, String peerId) {\n     RSRpcServices.exitIfOOME(e);\n     LOG.error(\"Unexpected exception in {} currentPath={}\",\n       t.getName(), getCurrentPath(), e);\n-    server.abort(\"Unexpected exception in \" + t.getName(), e);\n+    if(abortOnError){\n+      server.abort(\"Unexpected exception in \" + t.getName(), e);\n+    }\n+    if(manager!=null){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af3041eb5ab52b147b72880faf8507ef8a1f4cf"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3NTE3Mg==", "bodyText": "Why we need a AtomicBoolean here? It is only used locally, so a simple boolean is enough?", "url": "https://github.com/apache/hbase/pull/2255#discussion_r475575172", "createdAt": "2020-08-24T12:51:25Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -587,12 +617,25 @@ private void initialize() {\n \n   @Override\n   public void startup() {\n-    // mark we are running now\n-    this.sourceRunning = true;\n-    initThread = new Thread(this::initialize);\n-    Threads.setDaemonThreadRunning(initThread,\n-      Thread.currentThread().getName() + \".replicationSource,\" + this.queueId,\n-      this::uncaughtException);\n+    //Flag that signalizes uncaught error happening while starting up the source\n+    // and a retry should be attempted\n+    AtomicBoolean retryStartup = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af3041eb5ab52b147b72880faf8507ef8a1f4cf"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNTgwMjcx", "url": "https://github.com/apache/hbase/pull/2255#pullrequestreview-473580271", "createdAt": "2020-08-24T14:52:52Z", "commit": {"oid": "8af3041eb5ab52b147b72880faf8507ef8a1f4cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo1Mjo1MlrOHFooVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo1Mjo1MlrOHFooVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY3MDYxNQ==", "bodyText": "I had a second thought on this here, we can't simply re-use this boolean, because in case of failure, we risk reach this point before the exception handler has updated it to false. I'm bringing back the original startupOngoing in the next commit,", "url": "https://github.com/apache/hbase/pull/2255#discussion_r475670615", "createdAt": "2020-08-24T14:52:52Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -587,12 +617,25 @@ private void initialize() {\n \n   @Override\n   public void startup() {\n-    // mark we are running now\n-    this.sourceRunning = true;\n-    initThread = new Thread(this::initialize);\n-    Threads.setDaemonThreadRunning(initThread,\n-      Thread.currentThread().getName() + \".replicationSource,\" + this.queueId,\n-      this::uncaughtException);\n+    //Flag that signalizes uncaught error happening while starting up the source\n+    // and a retry should be attempted\n+    AtomicBoolean retryStartup = new AtomicBoolean(false);\n+    retryStartup.set(true);\n+    do {\n+      if(retryStartup.get()) {\n+        retryStartup.set(false);\n+        // mark we are running now\n+        this.sourceRunning = true;\n+        initThread = new Thread(this::initialize);\n+        Threads.setDaemonThreadRunning(initThread,\n+          Thread.currentThread().getName() + \".replicationSource,\" + this.queueId,\n+          (t,e) -> {\n+          sourceRunning = false;\n+          uncaughtException(t, e, null, null);\n+          retryStartup.set(true);\n+        });\n+      }\n+    } while (!this.sourceRunning);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8af3041eb5ab52b147b72880faf8507ef8a1f4cf"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84994f940838f0da8090ed0a47786a100c475b4b", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/84994f940838f0da8090ed0a47786a100c475b4b", "committedDate": "2020-08-24T15:00:59Z", "message": "addressing some nits and the loop control"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e716047dddbad655b71dc7fb0729430442f45580", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/e716047dddbad655b71dc7fb0729430442f45580", "committedDate": "2020-08-25T08:27:41Z", "message": "Changed to MutableBoolean and addressed latest checkstyles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fcf7142739875241ed6255a5df8f52ef4fe737a", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/2fcf7142739875241ed6255a5df8f52ef4fe737a", "committedDate": "2020-08-25T09:53:44Z", "message": "switched from banned version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzA2ODcw", "url": "https://github.com/apache/hbase/pull/2255#pullrequestreview-475306870", "createdAt": "2020-08-26T09:18:24Z", "commit": {"oid": "2fcf7142739875241ed6255a5df8f52ef4fe737a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16db51e8ca4284bc9683070ede29b07e869d2ec2", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/16db51e8ca4284bc9683070ede29b07e869d2ec2", "committedDate": "2020-09-04T13:22:16Z", "message": "Additional checks on the loop control, for the tests that are note complete initialization but don't care about it"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjY5Mzc2", "url": "https://github.com/apache/hbase/pull/2255#pullrequestreview-485269376", "createdAt": "2020-09-09T18:01:23Z", "commit": {"oid": "16db51e8ca4284bc9683070ede29b07e869d2ec2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4870, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}