{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwODU3NjA1", "number": 2286, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo1NDowMVrOEauCtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxMzo1Mzo1NVrOEbN_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDUyNzkwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo1NDowMVrOHEUmcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0NjoyMFrOHFYRZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5Mzg3Mg==", "bodyText": "While the port might have been 'free' when we got it, by the time we go to use it, it may have been occupied for another. See HBaseTestingUtility#setupMiniKdc where it loops until no BindException. This trick is used in a few places to get around port clash.", "url": "https://github.com/apache/hbase/pull/2286#discussion_r474293872", "createdAt": "2020-08-20T21:54:01Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "diffHunk": "@@ -56,39 +58,47 @@\n   private static Configuration conf = null;\n   private static Admin admin;\n   // RMI registry port\n-  private static int rmiRegistryPort = 61120;\n+  private static int rmiRegistryPort;\n   // Switch for customized Accesscontroller to throw ACD exception while executing test case\n-  static boolean hasAccess;\n+  private volatile static boolean hasAccess;\n \n-  @Before\n-  public void setUp() throws Exception {\n-    UTIL = new HBaseTestingUtility();\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n     conf = UTIL.getConfiguration();\n+    String cps = JMXListener.class.getName() + \",\" + MyAccessController.class.getName();\n+    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY, cps);\n+    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY, cps);\n+    rmiRegistryPort = UTIL.randomFreePort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a3569c173d5961c7279a799ceabdbce21b3f7d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDM5NjE4Mg==", "bodyText": "Thank @saintstack for reviewing.\nFor JMXConnectorServer starting, only use the default port or specifying port, can't find a free port by retrying. So I use HBaseTestingUtility#randomFreePort to get a free port, which mark ports as taken and don't return repeated ports. This patch may not completely avoid port clash, but at least it can reduce the possibility ?", "url": "https://github.com/apache/hbase/pull/2286#discussion_r474396182", "createdAt": "2020-08-21T04:04:08Z", "author": {"login": "ddupg"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "diffHunk": "@@ -56,39 +58,47 @@\n   private static Configuration conf = null;\n   private static Admin admin;\n   // RMI registry port\n-  private static int rmiRegistryPort = 61120;\n+  private static int rmiRegistryPort;\n   // Switch for customized Accesscontroller to throw ACD exception while executing test case\n-  static boolean hasAccess;\n+  private volatile static boolean hasAccess;\n \n-  @Before\n-  public void setUp() throws Exception {\n-    UTIL = new HBaseTestingUtility();\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n     conf = UTIL.getConfiguration();\n+    String cps = JMXListener.class.getName() + \",\" + MyAccessController.class.getName();\n+    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY, cps);\n+    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY, cps);\n+    rmiRegistryPort = UTIL.randomFreePort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5Mzg3Mg=="}, "originalCommit": {"oid": "a4a3569c173d5961c7279a799ceabdbce21b3f7d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDQwNjc4OQ==", "bodyText": "In my experience it is strange how often we meet clashes.  Any chance of catching BindException and retrying?", "url": "https://github.com/apache/hbase/pull/2286#discussion_r474406789", "createdAt": "2020-08-21T04:50:15Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "diffHunk": "@@ -56,39 +58,47 @@\n   private static Configuration conf = null;\n   private static Admin admin;\n   // RMI registry port\n-  private static int rmiRegistryPort = 61120;\n+  private static int rmiRegistryPort;\n   // Switch for customized Accesscontroller to throw ACD exception while executing test case\n-  static boolean hasAccess;\n+  private volatile static boolean hasAccess;\n \n-  @Before\n-  public void setUp() throws Exception {\n-    UTIL = new HBaseTestingUtility();\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n     conf = UTIL.getConfiguration();\n+    String cps = JMXListener.class.getName() + \",\" + MyAccessController.class.getName();\n+    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY, cps);\n+    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY, cps);\n+    rmiRegistryPort = UTIL.randomFreePort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5Mzg3Mg=="}, "originalCommit": {"oid": "a4a3569c173d5961c7279a799ceabdbce21b3f7d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMjU5Nw==", "bodyText": "The port used to start JMXConnectorServer is obtained from the configuration during cluster startup. And just log even if failed to start JMXConnectorServer because of port clash.\nSo if we want to avoid port clash absolutely, restart cluster?", "url": "https://github.com/apache/hbase/pull/2286#discussion_r475402597", "createdAt": "2020-08-24T07:46:20Z", "author": {"login": "ddupg"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "diffHunk": "@@ -56,39 +58,47 @@\n   private static Configuration conf = null;\n   private static Admin admin;\n   // RMI registry port\n-  private static int rmiRegistryPort = 61120;\n+  private static int rmiRegistryPort;\n   // Switch for customized Accesscontroller to throw ACD exception while executing test case\n-  static boolean hasAccess;\n+  private volatile static boolean hasAccess;\n \n-  @Before\n-  public void setUp() throws Exception {\n-    UTIL = new HBaseTestingUtility();\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n     conf = UTIL.getConfiguration();\n+    String cps = JMXListener.class.getName() + \",\" + MyAccessController.class.getName();\n+    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY, cps);\n+    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY, cps);\n+    rmiRegistryPort = UTIL.randomFreePort();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5Mzg3Mg=="}, "originalCommit": {"oid": "a4a3569c173d5961c7279a799ceabdbce21b3f7d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2OTc2MzYxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQxMzo1Mzo1NVrOHFFZxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QwODo1MToyNVrOHFLcAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5MzQ0Ng==", "bodyText": "Seems only the first call will throw AccessDeny exception. Did you know why this design?", "url": "https://github.com/apache/hbase/pull/2286#discussion_r475093446", "createdAt": "2020-08-22T13:53:55Z", "author": {"login": "infraio"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "diffHunk": "@@ -56,39 +58,47 @@\n   private static Configuration conf = null;\n   private static Admin admin;\n   // RMI registry port\n-  private static int rmiRegistryPort = 61120;\n+  private static int rmiRegistryPort;\n   // Switch for customized Accesscontroller to throw ACD exception while executing test case\n-  static boolean hasAccess;\n+  private volatile static boolean hasAccess;\n \n-  @Before\n-  public void setUp() throws Exception {\n-    UTIL = new HBaseTestingUtility();\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n     conf = UTIL.getConfiguration();\n+    String cps = JMXListener.class.getName() + \",\" + MyAccessController.class.getName();\n+    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY, cps);\n+    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY, cps);\n+    rmiRegistryPort = UTIL.randomFreePort();\n+    conf.setInt(\"master.rmi.registry.port\", rmiRegistryPort);\n+    conf.setInt(\"regionserver.rmi.registry.port\", rmiRegistryPort);\n+    UTIL.startMiniCluster();\n+    admin = UTIL.getConnection().getAdmin();\n   }\n \n-  @After\n-  public void tearDown() throws Exception {\n-    // Set to true while stopping cluster\n-    hasAccess = true;\n+  @AfterClass\n+  public static void tearDownAfterClass() throws Exception {\n     admin.close();\n     UTIL.shutdownMiniCluster();\n   }\n \n+  @Before\n+  public void setUp() {\n+    hasAccess = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4a3569c173d5961c7279a799ceabdbce21b3f7d"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTE5MjMyMA==", "bodyText": "HMaster#stopMaster doesn't catch any exception that cpHost.preStopMaster() throws out.\nHRegionServer#stop catches exception from rsHost.preStop.\nBut I have no idea why the two are different in the design of handling exceptions.", "url": "https://github.com/apache/hbase/pull/2286#discussion_r475192320", "createdAt": "2020-08-23T08:51:25Z", "author": {"login": "ddupg"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/TestJMXConnectorServer.java", "diffHunk": "@@ -56,39 +58,47 @@\n   private static Configuration conf = null;\n   private static Admin admin;\n   // RMI registry port\n-  private static int rmiRegistryPort = 61120;\n+  private static int rmiRegistryPort;\n   // Switch for customized Accesscontroller to throw ACD exception while executing test case\n-  static boolean hasAccess;\n+  private volatile static boolean hasAccess;\n \n-  @Before\n-  public void setUp() throws Exception {\n-    UTIL = new HBaseTestingUtility();\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n     conf = UTIL.getConfiguration();\n+    String cps = JMXListener.class.getName() + \",\" + MyAccessController.class.getName();\n+    conf.set(CoprocessorHost.MASTER_COPROCESSOR_CONF_KEY, cps);\n+    conf.set(CoprocessorHost.REGIONSERVER_COPROCESSOR_CONF_KEY, cps);\n+    rmiRegistryPort = UTIL.randomFreePort();\n+    conf.setInt(\"master.rmi.registry.port\", rmiRegistryPort);\n+    conf.setInt(\"regionserver.rmi.registry.port\", rmiRegistryPort);\n+    UTIL.startMiniCluster();\n+    admin = UTIL.getConnection().getAdmin();\n   }\n \n-  @After\n-  public void tearDown() throws Exception {\n-    // Set to true while stopping cluster\n-    hasAccess = true;\n+  @AfterClass\n+  public static void tearDownAfterClass() throws Exception {\n     admin.close();\n     UTIL.shutdownMiniCluster();\n   }\n \n+  @Before\n+  public void setUp() {\n+    hasAccess = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTA5MzQ0Ng=="}, "originalCommit": {"oid": "a4a3569c173d5961c7279a799ceabdbce21b3f7d"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2675, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}