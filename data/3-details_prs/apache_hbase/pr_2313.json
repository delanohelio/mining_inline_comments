{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMzg0NjQ5", "number": 2313, "title": "HBASE-24900 Make retain assignment configurable during SCP", "bodyText": "Added \"hbase.master.scp.retain.assignment\" configuration parameter to contol the retain assignment during SCP.", "createdAt": "2020-08-25T18:35:16Z", "url": "https://github.com/apache/hbase/pull/2313", "merged": true, "mergeCommit": {"oid": "a04ea7ea4493f5bc583b4d08a2a6a88e7c6b8c54"}, "closed": true, "closedAt": "2021-02-01T05:07:58Z", "author": {"login": "pankaj72981"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDCPXUABqjM3MDAyMzk2MTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd1LIZegFqTU3OTc0NjAyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "470dcc1a209b08b48e04aba2456591dd7158edd8", "author": {"user": {"login": "pankaj2461", "name": "Pankaj Kumar"}}, "url": "https://github.com/apache/hbase/commit/470dcc1a209b08b48e04aba2456591dd7158edd8", "committedDate": "2020-08-25T18:31:49Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}, "afterCommit": {"oid": "743876d60ff596e9c3081e655352cc93729502b6", "author": {"user": {"login": "pankaj2461", "name": "Pankaj Kumar"}}, "url": "https://github.com/apache/hbase/commit/743876d60ff596e9c3081e655352cc93729502b6", "committedDate": "2020-08-27T15:34:28Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MTY0MTUx", "url": "https://github.com/apache/hbase/pull/2313#pullrequestreview-477164151", "createdAt": "2020-08-28T00:17:53Z", "commit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3MjA0NTA5", "url": "https://github.com/apache/hbase/pull/2313#pullrequestreview-477204509", "createdAt": "2020-08-28T02:40:28Z", "commit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo0MDoyOFrOHInkfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMjo1NDowOFrOHInxDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5ODk3NQ==", "bodyText": "On a method call, we set a state variable. !  Is that really wanted?  Seems before also this was happening but always set to true.  Now it can change.  I did not see the class how this var being used.  But can we check pls?", "url": "https://github.com/apache/hbase/pull/2313#discussion_r478798975", "createdAt": "2020-08-28T02:40:28Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/TransitRegionStateProcedure.java", "diffHunk": "@@ -416,13 +416,8 @@ public void reportTransition(MasterProcedureEnv env, RegionStateNode regionNode,\n \n   // Should be called with RegionStateNode locked\n   public void serverCrashed(MasterProcedureEnv env, RegionStateNode regionNode,\n-      ServerName serverName) throws IOException {\n-    // force to assign to a new candidate server\n-    // AssignmentManager#regionClosedAbnormally will set region location to null\n-    // TODO: the forceNewPlan flag not be persistent so if master crash then the flag will be lost.\n-    // But assign to old server is not big deal because it not effect correctness.\n-    // See HBASE-23035 for more details.\n-    forceNewPlan = true;\n+      ServerName serverName, boolean forceNewPlan) throws IOException {\n+    this.forceNewPlan = forceNewPlan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTM0Mw==", "bodyText": "Can u add few more lines as code level comments here?  What is the pros and cons of setting this. Will be easy for some one coming in here later to understand clearly.", "url": "https://github.com/apache/hbase/pull/2313#discussion_r478799343", "createdAt": "2020-08-28T02:41:55Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/procedure/ServerCrashProcedure.java", "diffHunk": "@@ -65,6 +65,14 @@\n     implements ServerProcedureInterface {\n   private static final Logger LOG = LoggerFactory.getLogger(ServerCrashProcedure.class);\n \n+  /**\n+   * Configuration parameter to retain the region assignment during ServerCrashProcedure, see", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc5OTkxMw==", "bodyText": "Give a better name for the test method?", "url": "https://github.com/apache/hbase/pull/2313#discussion_r478799913", "createdAt": "2020-08-28T02:44:38Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestRetainAssignmentOnRestart.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MiniHBaseCluster;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestRetainAssignmentOnRestart extends AbstractTestRestartCluster {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestRetainAssignmentOnRestart.class);\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestRetainAssignmentOnRestart.class);\n+\n+  @Override\n+  protected boolean splitWALCoordinatedByZk() {\n+    return true;\n+  }\n+\n+  /**\n+   * This tests retaining assignments on a cluster restart\n+   */\n+  @Test\n+  public void test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMTA2Mg==", "bodyText": "Here at restart , making it to 3 RSs from 2??  The value for rsPorts[2] is HM port", "url": "https://github.com/apache/hbase/pull/2313#discussion_r478801062", "createdAt": "2020-08-28T02:49:27Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestRetainAssignmentOnRestart.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MiniHBaseCluster;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestRetainAssignmentOnRestart extends AbstractTestRestartCluster {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestRetainAssignmentOnRestart.class);\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(TestRetainAssignmentOnRestart.class);\n+\n+  @Override\n+  protected boolean splitWALCoordinatedByZk() {\n+    return true;\n+  }\n+\n+  /**\n+   * This tests retaining assignments on a cluster restart\n+   */\n+  @Test\n+  public void test() throws Exception {\n+    // Set Zookeeper based connection registry since we will stop master and start a new master\n+    // without populating the underlying config for the connection.\n+    UTIL.getConfiguration().set(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY,\n+      HConstants.ZK_CONNECTION_REGISTRY_CLASS);\n+    // Enable retain assignment during ServerCrashProcedure\n+    UTIL.getConfiguration().setBoolean(ServerCrashProcedure.MASTER_SCP_RETAIN_ASSIGNMENT, true);\n+    UTIL.startMiniCluster(2);\n+    // Turn off balancer\n+    UTIL.getMiniHBaseCluster().getMaster().getMasterRpcServices().synchronousBalanceSwitch(false);\n+    LOG.info(\"\\n\\nCreating tables\");\n+    for (TableName TABLE : TABLES) {\n+      UTIL.createTable(TABLE, FAMILY);\n+    }\n+    for (TableName TABLE : TABLES) {\n+      UTIL.waitTableEnabled(TABLE);\n+    }\n+\n+    HMaster master = UTIL.getMiniHBaseCluster().getMaster();\n+    UTIL.waitUntilNoRegionsInTransition(60000);\n+\n+    // We don't have to use SnapshotOfRegionAssignmentFromMeta.\n+    // We use it here because AM used to use it to load all user region placements\n+    SnapshotOfRegionAssignmentFromMeta snapshot =\n+        new SnapshotOfRegionAssignmentFromMeta(master.getConnection());\n+    snapshot.initialize();\n+    Map<RegionInfo, ServerName> regionToRegionServerMap = snapshot.getRegionToRegionServerMap();\n+\n+    MiniHBaseCluster cluster = UTIL.getHBaseCluster();\n+    List<JVMClusterUtil.RegionServerThread> threads = cluster.getLiveRegionServerThreads();\n+    assertEquals(2, threads.size());\n+    int[] rsPorts = new int[3];\n+    for (int i = 0; i < 2; i++) {\n+      rsPorts[i] = threads.get(i).getRegionServer().getServerName().getPort();\n+    }\n+    rsPorts[2] = cluster.getMaster().getServerName().getPort();\n+    for (ServerName serverName : regionToRegionServerMap.values()) {\n+      boolean found = false; // Test only, no need to optimize\n+      for (int k = 0; k < 3 && !found; k++) {\n+        found = serverName.getPort() == rsPorts[k];\n+      }\n+      assertTrue(found);\n+    }\n+\n+    LOG.info(\"\\n\\nShutting down HBase cluster\");\n+    cluster.stopMaster(0);\n+    cluster.shutdown();\n+    cluster.waitUntilShutDown();\n+\n+    LOG.info(\"\\n\\nSleeping a bit\");\n+    Thread.sleep(2000);\n+\n+    LOG.info(\"\\n\\nStarting cluster the second time with the same ports\");\n+    cluster.getConf().setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 3);\n+    master = cluster.startMaster().getMaster();\n+    for (int i = 0; i < 3; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgwMjE5MQ==", "bodyText": "This tests the cluster restart case.  The config is applicable for single RS down and that getting restarted within the zk session time out.  Then also we will go with retain assign as per the config.  Can we add test for that?", "url": "https://github.com/apache/hbase/pull/2313#discussion_r478802191", "createdAt": "2020-08-28T02:54:08Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestRetainAssignmentOnRestart.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MiniHBaseCluster;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.procedure.ServerCrashProcedure;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.JVMClusterUtil;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestRetainAssignmentOnRestart extends AbstractTestRestartCluster {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b36b3d21f8892a789a95e4fd679bb8d2ce5167a5", "author": {"user": {"login": "pankaj2461", "name": "Pankaj Kumar"}}, "url": "https://github.com/apache/hbase/commit/b36b3d21f8892a789a95e4fd679bb8d2ce5167a5", "committedDate": "2020-10-13T03:13:00Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "828b79ed30fc2ee439c535531a82ee3542b1be71", "author": {"user": {"login": "pankaj2461", "name": "Pankaj Kumar"}}, "url": "https://github.com/apache/hbase/commit/828b79ed30fc2ee439c535531a82ee3542b1be71", "committedDate": "2020-10-13T03:13:00Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0514221a5f18ccadd86e40e04caadd31a13aeb19", "author": {"user": {"login": "pankaj2461", "name": "Pankaj Kumar"}}, "url": "https://github.com/apache/hbase/commit/0514221a5f18ccadd86e40e04caadd31a13aeb19", "committedDate": "2020-10-13T03:13:00Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b169e22bcd8017dc5955f5777040df6913818c1", "author": {"user": {"login": "pankaj72981", "name": "Pankaj"}}, "url": "https://github.com/apache/hbase/commit/2b169e22bcd8017dc5955f5777040df6913818c1", "committedDate": "2020-10-13T06:59:24Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "960530cb0fd261a702fff542b51dd0895d4315b2", "author": {"user": {"login": "pankaj2461", "name": "Pankaj Kumar"}}, "url": "https://github.com/apache/hbase/commit/960530cb0fd261a702fff542b51dd0895d4315b2", "committedDate": "2020-08-27T16:33:02Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}, "afterCommit": {"oid": "2b169e22bcd8017dc5955f5777040df6913818c1", "author": {"user": {"login": "pankaj72981", "name": "Pankaj"}}, "url": "https://github.com/apache/hbase/commit/2b169e22bcd8017dc5955f5777040df6913818c1", "committedDate": "2020-10-13T06:59:24Z", "message": "HBASE-24900 Make retain assignment configurable during SCP"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5NzQ2MDIy", "url": "https://github.com/apache/hbase/pull/2313#pullrequestreview-579746022", "createdAt": "2021-01-30T10:13:21Z", "commit": {"oid": "2b169e22bcd8017dc5955f5777040df6913818c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4684, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}