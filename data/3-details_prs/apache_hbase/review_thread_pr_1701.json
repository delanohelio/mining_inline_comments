{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MDM1MzY5", "number": 1701, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowMzoxNlrOD73aQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowMzozNVrOD73adg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAwNDE2OnYy", "diffSide": "RIGHT", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowMzoxNlrOGUdEUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowMzoxNlrOGUdEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMDk0Nw==", "bodyText": "Good", "url": "https://github.com/apache/hbase/pull/1701#discussion_r424100947", "createdAt": "2020-05-13T00:03:16Z", "author": {"login": "saintstack"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java", "diffHunk": "@@ -124,38 +142,111 @@ public void setConf(Configuration conf) {\n     String serverUsername = conf.get(REST_API_CLUSTER_MANAGER_USERNAME, DEFAULT_SERVER_USERNAME);\n     String serverPassword = conf.get(REST_API_CLUSTER_MANAGER_PASSWORD, DEFAULT_SERVER_PASSWORD);\n     client.register(HttpAuthenticationFeature.basic(serverUsername, serverPassword));\n+\n+    this.retryCounterFactory = new RetryCounterFactory(new RetryConfig()\n+      .setMaxAttempts(conf.getInt(RETRY_ATTEMPTS_KEY, DEFAULT_RETRY_ATTEMPTS))\n+      .setSleepInterval(conf.getLong(RETRY_SLEEP_INTERVAL_KEY, DEFAULT_RETRY_SLEEP_INTERVAL)));\n   }\n \n   @Override\n-  public void start(ServiceType service, String hostname, int port) throws IOException {\n-    performClusterManagerCommand(service, hostname, RoleCommand.START);\n+  public void start(ServiceType service, String hostname, int port) {\n+    // With Cloudera Manager (6.3.x), sending a START command to a service role\n+    // that is already in the \"Started\" state is an error. CM will log a message\n+    // saying \"Role must be stopped\". It will complain similarly for other\n+    // expected state transitions.\n+    // A role process that has been `kill -9`'ed ends up with the service role\n+    // retaining the \"Started\" state but with the process marked as \"unhealthy\".\n+    // Instead of blindly issuing the START command, first send a STOP command\n+    // to ensure the START will be accepted.\n+    LOG.debug(\"Performing start of {} on {}:{}\", service, hostname, port);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8b26e4c6b6423fbc980169bb81a196a512ee1a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTAwNDcwOnYy", "diffSide": "RIGHT", "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowMzozNVrOGUdEpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMDowMzozNVrOGUdEpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDEwMTAzMA==", "bodyText": "Man", "url": "https://github.com/apache/hbase/pull/1701#discussion_r424101030", "createdAt": "2020-05-13T00:03:35Z", "author": {"login": "saintstack"}, "path": "hbase-it/src/test/java/org/apache/hadoop/hbase/RESTApiClusterManager.java", "diffHunk": "@@ -124,38 +142,111 @@ public void setConf(Configuration conf) {\n     String serverUsername = conf.get(REST_API_CLUSTER_MANAGER_USERNAME, DEFAULT_SERVER_USERNAME);\n     String serverPassword = conf.get(REST_API_CLUSTER_MANAGER_PASSWORD, DEFAULT_SERVER_PASSWORD);\n     client.register(HttpAuthenticationFeature.basic(serverUsername, serverPassword));\n+\n+    this.retryCounterFactory = new RetryCounterFactory(new RetryConfig()\n+      .setMaxAttempts(conf.getInt(RETRY_ATTEMPTS_KEY, DEFAULT_RETRY_ATTEMPTS))\n+      .setSleepInterval(conf.getLong(RETRY_SLEEP_INTERVAL_KEY, DEFAULT_RETRY_SLEEP_INTERVAL)));\n   }\n \n   @Override\n-  public void start(ServiceType service, String hostname, int port) throws IOException {\n-    performClusterManagerCommand(service, hostname, RoleCommand.START);\n+  public void start(ServiceType service, String hostname, int port) {\n+    // With Cloudera Manager (6.3.x), sending a START command to a service role\n+    // that is already in the \"Started\" state is an error. CM will log a message\n+    // saying \"Role must be stopped\". It will complain similarly for other\n+    // expected state transitions.\n+    // A role process that has been `kill -9`'ed ends up with the service role\n+    // retaining the \"Started\" state but with the process marked as \"unhealthy\".\n+    // Instead of blindly issuing the START command, first send a STOP command\n+    // to ensure the START will be accepted.\n+    LOG.debug(\"Performing start of {} on {}:{}\", service, hostname, port);\n+    final RoleState currentState = getRoleState(service, hostname);\n+    switch (currentState) {\n+      case NA:\n+      case BUSY:\n+      case UNKNOWN:\n+      case HISTORY_NOT_AVAILABLE:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but currently in\"\n+          + \" {} state. Attempting to start. {}, {}:{}\", currentState, service, hostname, port);\n+        performClusterManagerCommand(service, hostname, RoleCommand.START);\n+        return;\n+      case STOPPING:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but currently in\"\n+          + \" {} state. Waiting for stop before attempting start. {}, {}:{}\", currentState,\n+          service, hostname, port);\n+        waitFor(() -> Objects.equals(RoleState.STOPPED, getRoleState(service, hostname)));\n+        performClusterManagerCommand(service, hostname, RoleCommand.START);\n+        return;\n+      case STOPPED:\n+        performClusterManagerCommand(service, hostname, RoleCommand.START);\n+        return;\n+      case STARTING:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but already in\"\n+          + \" {} state. Ignoring current request and waiting for start to complete. {}, {}:{}\",\n+          currentState, service, hostname, port);\n+        waitFor(()-> Objects.equals(RoleState.STARTED, getRoleState(service, hostname)));\n+        return;\n+      case STARTED:\n+        LOG.warn(\"Unexpected service state detected. Service START requested, but already in\"\n+          + \" {} state. Restarting. {}, {}:{}\", currentState, service, hostname, port);\n+        performClusterManagerCommand(service, hostname, RoleCommand.RESTART);\n+        return;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8b26e4c6b6423fbc980169bb81a196a512ee1a"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1770, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}