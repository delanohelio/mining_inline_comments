{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjYxMTc3", "number": 2652, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjowNTo0M1rOE4b_PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDoyNDoxMlrOE44KeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NjE0MjY5OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMjowNTo0M1rOHyWrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNTo1NzoxOVrOHydTDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MjMyMA==", "bodyText": "I do not think use index instead of replicaId is the correct way to fix the problem here.\nYou should use replicaId, and the problem here is the size of the array is incorrect. You should find out the maximum replicaId and create the locs array with maxReplicaId + 1 as its size.", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522562320", "createdAt": "2020-11-13T02:05:43Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -133,13 +133,17 @@ private static void tryComplete(MutableInt remaining, HRegionLocation[] locs,\n       ServerName.valueOf(snProto.getHostName(), snProto.getPort(), snProto.getStartCode()));\n   }\n \n-  private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n+  @VisibleForTesting\n+  void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       List<String> metaReplicaZNodes) {\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n     HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n     MutableInt remaining = new MutableInt(locs.length);\n+    // Do NOT use replicaid as index into locations array. The location set may not be complete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU5ODUxMw==", "bodyText": "Thanks for the review @Apache9\nI need help understanding here why returning an array with empty slots is the way to go instead? What you thinking? Is it that you are afraid that elsewhere we are using replicaid as index?\nWhen you say find the max replicaid, are you suggesting the max replicaid present in the list metaReplicaZNodes (doable)?  Or are you thinking the array should be same as the configured replica count (hard -- hard to pass an active table schema reference down to ConnectionRegistry)?\nThanks for the fast review.", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522598513", "createdAt": "2020-11-13T04:00:03Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -133,13 +133,17 @@ private static void tryComplete(MutableInt remaining, HRegionLocation[] locs,\n       ServerName.valueOf(snProto.getHostName(), snProto.getPort(), snProto.getStartCode()));\n   }\n \n-  private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n+  @VisibleForTesting\n+  void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       List<String> metaReplicaZNodes) {\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n     HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n     MutableInt remaining = new MutableInt(locs.length);\n+    // Do NOT use replicaid as index into locations array. The location set may not be complete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MjMyMA=="}, "originalCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjYyMzYwNA==", "bodyText": "Based on Duo and Stack's comments, I spend quite some time trying to understand how locs is being used.\nIt is being used in\nhttps://github.com/apache/hbase/blob/master/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java#L162\nIt is used for initialize RegionLocations() object.\nWithin RegionLocations(), all logic is there trying to allocate a location array with replica id as index.\nhttps://github.com/apache/hbase/blob/master/hbase-client/src/main/java/org/apache/hadoop/hbase/RegionLocations.java#L74\nSo it seems that at least in this place, it is fine to do in this way. Otherwise, the logic is duplicated twice?", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522623604", "createdAt": "2020-11-13T04:39:26Z", "author": {"login": "huaxiangsun"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -133,13 +133,17 @@ private static void tryComplete(MutableInt remaining, HRegionLocation[] locs,\n       ServerName.valueOf(snProto.getHostName(), snProto.getPort(), snProto.getStartCode()));\n   }\n \n-  private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n+  @VisibleForTesting\n+  void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       List<String> metaReplicaZNodes) {\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n     HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n     MutableInt remaining = new MutableInt(locs.length);\n+    // Do NOT use replicaid as index into locations array. The location set may not be complete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MjMyMA=="}, "originalCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY0MjAwNw==", "bodyText": "Thanks @huaxiangsun . That helps (Its also used here https://github.com/apache/hbase/blob/master/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java#L187 but if error, we don't get to this point because of ArrayOutOfBoundsException).\nLet me just do what @Apache9 suggests. Looks like there is precedent around the handling of this situation. Let me follow the model (even if it means double work as you point out).\nWill be back in a bit w/ new patch.", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522642007", "createdAt": "2020-11-13T04:58:19Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -133,13 +133,17 @@ private static void tryComplete(MutableInt remaining, HRegionLocation[] locs,\n       ServerName.valueOf(snProto.getHostName(), snProto.getPort(), snProto.getStartCode()));\n   }\n \n-  private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n+  @VisibleForTesting\n+  void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       List<String> metaReplicaZNodes) {\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n     HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n     MutableInt remaining = new MutableInt(locs.length);\n+    // Do NOT use replicaid as index into locations array. The location set may not be complete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MjMyMA=="}, "originalCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY2NTg4Mw==", "bodyText": "The problem is for RegionLocations. As Huaxiang pointed out that in RegionLocations we will handle the out of order replicas, I think it is fine to do something like this here. Maybe we could use a List instead of an array? And add a comment here to say that \"we do not care about the order of the replicas or if there are holes, the constructor of RegionLocations will handle this\". And we could add a Constructor for RegionLoations to accept a List. And for the old constructor which accepts an array, just do this(Arrays.asList(locations));", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522665883", "createdAt": "2020-11-13T05:36:00Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -133,13 +133,17 @@ private static void tryComplete(MutableInt remaining, HRegionLocation[] locs,\n       ServerName.valueOf(snProto.getHostName(), snProto.getPort(), snProto.getStartCode()));\n   }\n \n-  private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n+  @VisibleForTesting\n+  void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       List<String> metaReplicaZNodes) {\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n     HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n     MutableInt remaining = new MutableInt(locs.length);\n+    // Do NOT use replicaid as index into locations array. The location set may not be complete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MjMyMA=="}, "originalCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjY3MDg2Mw==", "bodyText": "Let me try and do what you suggest later @Apache9 with a list and pointers back to RegionLocations. Making an array that is maxReplicaId+1 is going to have the tryComplete do more work than was asked for (see 'remaining' param). Thanks for the help.", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522670863", "createdAt": "2020-11-13T05:57:19Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -133,13 +133,17 @@ private static void tryComplete(MutableInt remaining, HRegionLocation[] locs,\n       ServerName.valueOf(snProto.getHostName(), snProto.getPort(), snProto.getStartCode()));\n   }\n \n-  private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n+  @VisibleForTesting\n+  void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n       List<String> metaReplicaZNodes) {\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n     HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n     MutableInt remaining = new MutableInt(locs.length);\n+    // Do NOT use replicaid as index into locations array. The location set may not be complete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjU2MjMyMA=="}, "originalCommit": {"oid": "5613f4b5c7c2fa4cf3bcd31faf064f71854b827c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzE3NDQ2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNzozNToxM1rOHyhJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxOTozMzozMFrOHy8XFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjczMzgyNA==", "bodyText": "Better to not expose this method here but write fake znode on zk to simulate discontinuous meta replicas? I do not think it is very difficult to do...", "url": "https://github.com/apache/hbase/pull/2652#discussion_r522733824", "createdAt": "2020-11-13T07:35:13Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "diffHunk": "@@ -125,4 +127,20 @@ public void testNoMetaAvailable() throws InterruptedException {\n       }\n     }\n   }\n+\n+  /**\n+   * Pass discontinuous list of znodes to registry getMetaRegionLocation. Should work fine.\n+   * It used to throw ArrayOutOfBoundsException. See HBASE-25280.\n+   */\n+  @Test\n+  public void testDiscontinuousLocations() throws ExecutionException, InterruptedException {\n+    Configuration conf = new Configuration(TEST_UTIL.getConfiguration());\n+    try (ZKConnectionRegistry registry = new ZKConnectionRegistry(conf)) {\n+      CompletableFuture<RegionLocations> cf = new CompletableFuture<>();\n+      List<String> znodes = Arrays.asList(\n+        new String[] { ZNodePaths.META_ZNODE_PREFIX, ZNodePaths.META_ZNODE_PREFIX + \"_003\" });\n+      registry.getMetaRegionLocation(cf, znodes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfa0594066b741ddbde13abb393a8a5983540099"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzE3OTc5OA==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/2652#discussion_r523179798", "createdAt": "2020-11-13T19:33:30Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "diffHunk": "@@ -125,4 +127,20 @@ public void testNoMetaAvailable() throws InterruptedException {\n       }\n     }\n   }\n+\n+  /**\n+   * Pass discontinuous list of znodes to registry getMetaRegionLocation. Should work fine.\n+   * It used to throw ArrayOutOfBoundsException. See HBASE-25280.\n+   */\n+  @Test\n+  public void testDiscontinuousLocations() throws ExecutionException, InterruptedException {\n+    Configuration conf = new Configuration(TEST_UTIL.getConfiguration());\n+    try (ZKConnectionRegistry registry = new ZKConnectionRegistry(conf)) {\n+      CompletableFuture<RegionLocations> cf = new CompletableFuture<>();\n+      List<String> znodes = Arrays.asList(\n+        new String[] { ZNodePaths.META_ZNODE_PREFIX, ZNodePaths.META_ZNODE_PREFIX + \"_003\" });\n+      registry.getMetaRegionLocation(cf, znodes);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjczMzgyNA=="}, "originalCommit": {"oid": "cfa0594066b741ddbde13abb393a8a5983540099"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDc1Mzk5OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDoyMDo0N1rOHzDjpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MDo0M1rOH0H1Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NzcwMA==", "bodyText": "This will generate a generic type warning, please use new TreeMap<>()", "url": "https://github.com/apache/hbase/pull/2652#discussion_r523297700", "createdAt": "2020-11-14T00:20:47Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -138,8 +141,15 @@ private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n-    HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n-    MutableInt remaining = new MutableInt(locs.length);\n+    // Note, the list of metaReplicaZNodes may be discontiguous regards replicaId; i.e. we may have\n+    // a znode for the default -- replicaId=0 -- and perhaps replicaId '2' but be could be missing\n+    // znode for replicaId '1'. This is a transient condition. Because of this we are careful\n+    // accumulating locations. We use a Map so retries overwrite rather than aggregate and the\n+    // Map sorts just to be kind to further processing. The Map will retain the discontinuity on\n+    // replicaIds but on completion (of the future), the Map values are passed to the\n+    // RegionLocations constructor which knows how to deal with discontinuities.\n+    final Map<Integer, HRegionLocation> locs = new TreeMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNjM1OA==", "bodyText": "Fixed", "url": "https://github.com/apache/hbase/pull/2652#discussion_r524416358", "createdAt": "2020-11-16T16:50:43Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ZKConnectionRegistry.java", "diffHunk": "@@ -138,8 +141,15 @@ private void getMetaRegionLocation(CompletableFuture<RegionLocations> future,\n     if (metaReplicaZNodes.isEmpty()) {\n       future.completeExceptionally(new IOException(\"No meta znode available\"));\n     }\n-    HRegionLocation[] locs = new HRegionLocation[metaReplicaZNodes.size()];\n-    MutableInt remaining = new MutableInt(locs.length);\n+    // Note, the list of metaReplicaZNodes may be discontiguous regards replicaId; i.e. we may have\n+    // a znode for the default -- replicaId=0 -- and perhaps replicaId '2' but be could be missing\n+    // znode for replicaId '1'. This is a transient condition. Because of this we are careful\n+    // accumulating locations. We use a Map so retries overwrite rather than aggregate and the\n+    // Map sorts just to be kind to further processing. The Map will retain the discontinuity on\n+    // replicaIds but on completion (of the future), the Map values are passed to the\n+    // RegionLocations constructor which knows how to deal with discontinuities.\n+    final Map<Integer, HRegionLocation> locs = new TreeMap();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5NzcwMA=="}, "originalCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDc1ODk2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQwMDoyNDoxMlrOHzDmRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MToyN1rOH0H3lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODM3NQ==", "bodyText": "I recall that you mentioned many times that the operator must be at the end of a line so I changed my formatter config to do this, so now you prefer the operator at the start of a line?\nI'm fine with both, just want to know which one do you want, or it is not important?", "url": "https://github.com/apache/hbase/pull/2652#discussion_r523298375", "createdAt": "2020-11-14T00:24:12Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "diffHunk": "@@ -101,8 +116,8 @@ public void testIndependentZKConnections() throws IOException {\n       otherConf.set(HConstants.ZOOKEEPER_QUORUM, MiniZooKeeperCluster.HOST);\n       try (ZKConnectionRegistry otherRegistry = new ZKConnectionRegistry(otherConf)) {\n         ReadOnlyZKClient zk2 = otherRegistry.getZKClient();\n-        assertNotSame(\"Using a different configuration / quorum should result in different \" +\n-          \"backing zk connection.\", zk1, zk2);\n+        assertNotSame(\"Using a different configuration / quorum should result in different \"\n+          + \"backing zk connection.\", zk1, zk2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNjkxOQ==", "bodyText": "Mistake. I like '+' at end of line. Let me fix.", "url": "https://github.com/apache/hbase/pull/2652#discussion_r524416919", "createdAt": "2020-11-16T16:51:27Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestZKConnectionRegistry.java", "diffHunk": "@@ -101,8 +116,8 @@ public void testIndependentZKConnections() throws IOException {\n       otherConf.set(HConstants.ZOOKEEPER_QUORUM, MiniZooKeeperCluster.HOST);\n       try (ZKConnectionRegistry otherRegistry = new ZKConnectionRegistry(otherConf)) {\n         ReadOnlyZKClient zk2 = otherRegistry.getZKClient();\n-        assertNotSame(\"Using a different configuration / quorum should result in different \" +\n-          \"backing zk connection.\", zk1, zk2);\n+        assertNotSame(\"Using a different configuration / quorum should result in different \"\n+          + \"backing zk connection.\", zk1, zk2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5ODM3NQ=="}, "originalCommit": {"oid": "adbf81c010a5fbfebfcc4aae68e35dbd12da1601"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2383, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}