{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMDMwNTY3", "number": 1737, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjowMDo0NVrOD-cw8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDo1ODowM1rOEJAL3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODA5NTg0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMjowMDo0NVrOGYju7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwNjoyNjoyNFrOGYnqeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDQ2Mg==", "bodyText": "If we want to use contains then we better use a Set instead of a List?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r428404462", "createdAt": "2020-05-21T02:00:45Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = stores.entrySet().stream()\n+            .filter(e -> families.contains(Bytes.toString(e.getKey())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8b0e46c7ae8aa73df09491b10bd55acd9b1a2be"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxMjQyNg==", "bodyText": "So why we choose String instead of byte[] here?\n\n1\u3001The family name stored as private byte[] in ImmutableByteArray, if use byte[], it need twice convertion.\n2\u3001We use the method of contains to filter them later, use string seems esaliy to do.\nCorrect me if i have some mistake.\n\nIf we want to use contains then we better use a Set instead of a List?\n\nYeah, you are right, will fix.\nThanks a lot.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r428412426", "createdAt": "2020-05-21T02:33:46Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = stores.entrySet().stream()\n+            .filter(e -> families.contains(Bytes.toString(e.getKey())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDQ2Mg=="}, "originalCommit": {"oid": "b8b0e46c7ae8aa73df09491b10bd55acd9b1a2be"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQxOTkzNw==", "bodyText": "If the String is ok, i will push a commit later, or else i will research more.\nThanks.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r428419937", "createdAt": "2020-05-21T03:04:01Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = stores.entrySet().stream()\n+            .filter(e -> families.contains(Bytes.toString(e.getKey())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDQ2Mg=="}, "originalCommit": {"oid": "b8b0e46c7ae8aa73df09491b10bd55acd9b1a2be"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2NDk1Nw==", "bodyText": "In the WAL interface, we all use byte[] as family name, so I prefer we also use byte[] here. You could use TreeSet with BytesComparator to hold byte[].", "url": "https://github.com/apache/hbase/pull/1737#discussion_r428464957", "createdAt": "2020-05-21T06:14:20Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = stores.entrySet().stream()\n+            .filter(e -> families.contains(Bytes.toString(e.getKey())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDQ2Mg=="}, "originalCommit": {"oid": "b8b0e46c7ae8aa73df09491b10bd55acd9b1a2be"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQ2ODg1Ng==", "bodyText": "Ok, will use byte[] instead of String.\nIn addition,since we do not need a sorted collection,  i could iterate the families to avoid use contains.\nThanks.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r428468856", "createdAt": "2020-05-21T06:26:24Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = stores.entrySet().stream()\n+            .filter(e -> families.contains(Bytes.toString(e.getKey())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQwNDQ2Mg=="}, "originalCommit": {"oid": "b8b0e46c7ae8aa73df09491b10bd55acd9b1a2be"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTE1NjIxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwOTo0ODozMVrOGZojcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMjowNzozN1rOGZpDsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjAxNw==", "bodyText": "Change the comment?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r429532017", "createdAt": "2020-05-23T09:48:31Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -59,7 +61,7 @@ protected void scheduleFlush(String encodedRegionName) {\n       return;\n     }\n     // force flushing all stores to clean old logs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631f0f66585a559ecddc32b302c4bc4304ab0376"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MDI3Mw==", "bodyText": "Fixed.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r429540273", "createdAt": "2020-05-23T12:07:37Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -59,7 +61,7 @@ protected void scheduleFlush(String encodedRegionName) {\n       return;\n     }\n     // force flushing all stores to clean old logs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjAxNw=="}, "originalCommit": {"oid": "631f0f66585a559ecddc32b302c4bc4304ab0376"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTE1NzIyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwOTo1MDo0OVrOGZoj8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxMjowODowMVrOGZpD3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjE0NA==", "bodyText": "Better use a TreeMap with BytesComparator?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r429532144", "createdAt": "2020-05-23T09:50:49Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "diffHunk": "@@ -440,27 +440,27 @@ boolean areAllLower(Map<byte[], Long> sequenceids, Collection<byte[]> keysBlocki\n    * {@link #lowestUnflushedSequenceIds} has a sequence id less than that passed in\n    * <code>sequenceids</code> then return it.\n    * @param sequenceids Sequenceids keyed by encoded region name.\n-   * @return regions found in this instance with sequence ids less than those passed in.\n+   * @return stores of regions found in this instance with sequence ids less than those passed in.\n    */\n-  byte[][] findLower(Map<byte[], Long> sequenceids) {\n-    List<byte[]> toFlush = null;\n+  Map<byte[], List<byte[]>> findLower(Map<byte[], Long> sequenceids) {\n+    Map<byte[], List<byte[]>> toFlush = null;\n     // Keeping the old behavior of iterating unflushedSeqNums under oldestSeqNumsLock.\n     synchronized (tieLock) {\n       for (Map.Entry<byte[], Long> e : sequenceids.entrySet()) {\n         Map<ImmutableByteArray, Long> m = this.lowestUnflushedSequenceIds.get(e.getKey());\n         if (m == null) {\n           continue;\n         }\n-        // The lowest sequence id outstanding for this region.\n-        long lowest = getLowestSequenceId(m);\n-        if (lowest != HConstants.NO_SEQNUM && lowest <= e.getValue()) {\n-          if (toFlush == null) {\n-            toFlush = new ArrayList<>();\n+        for (Map.Entry<ImmutableByteArray, Long> me : m.entrySet()) {\n+          if (me.getValue() <= e.getValue()) {\n+            if (toFlush == null) {\n+              toFlush = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "631f0f66585a559ecddc32b302c4bc4304ab0376"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MDMxOQ==", "bodyText": "Fixed.\nThanks a lot.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r429540319", "createdAt": "2020-05-23T12:08:01Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "diffHunk": "@@ -440,27 +440,27 @@ boolean areAllLower(Map<byte[], Long> sequenceids, Collection<byte[]> keysBlocki\n    * {@link #lowestUnflushedSequenceIds} has a sequence id less than that passed in\n    * <code>sequenceids</code> then return it.\n    * @param sequenceids Sequenceids keyed by encoded region name.\n-   * @return regions found in this instance with sequence ids less than those passed in.\n+   * @return stores of regions found in this instance with sequence ids less than those passed in.\n    */\n-  byte[][] findLower(Map<byte[], Long> sequenceids) {\n-    List<byte[]> toFlush = null;\n+  Map<byte[], List<byte[]>> findLower(Map<byte[], Long> sequenceids) {\n+    Map<byte[], List<byte[]>> toFlush = null;\n     // Keeping the old behavior of iterating unflushedSeqNums under oldestSeqNumsLock.\n     synchronized (tieLock) {\n       for (Map.Entry<byte[], Long> e : sequenceids.entrySet()) {\n         Map<ImmutableByteArray, Long> m = this.lowestUnflushedSequenceIds.get(e.getKey());\n         if (m == null) {\n           continue;\n         }\n-        // The lowest sequence id outstanding for this region.\n-        long lowest = getLowestSequenceId(m);\n-        if (lowest != HConstants.NO_SEQNUM && lowest <= e.getValue()) {\n-          if (toFlush == null) {\n-            toFlush = new ArrayList<>();\n+        for (Map.Entry<ImmutableByteArray, Long> me : m.entrySet()) {\n+          if (me.getValue() <= e.getValue()) {\n+            if (toFlush == null) {\n+              toFlush = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjE0NA=="}, "originalCommit": {"oid": "631f0f66585a559ecddc32b302c4bc4304ab0376"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc5MTkyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1NTowMVrOGac5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNTozNVrOGdDtwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTYxNw==", "bodyText": "StringBuilder", "url": "https://github.com/apache/hbase/pull/1737#discussion_r430389617", "createdAt": "2020-05-26T12:55:01Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -639,26 +641,30 @@ public int getNumLogFiles() {\n    * If the number of un-archived WAL files ('live' WALs) is greater than maximum allowed,\n    * check the first (oldest) WAL, and return those regions which should be flushed so that\n    * it can be let-go/'archived'.\n-   * @return regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n+   * @return stores of regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n    */\n-  byte[][] findRegionsToForceFlush() throws IOException {\n-    byte[][] regions = null;\n+  Map<byte[], List<byte[]>> findRegionsToForceFlush() throws IOException {\n+    Map<byte[], List<byte[]>> regions = null;\n     int logCount = getNumRolledLogFiles();\n     if (logCount > this.maxLogs && logCount > 0) {\n       Map.Entry<Path, WalProps> firstWALEntry = this.walFile2Props.firstEntry();\n       regions =\n         this.sequenceIdAccounting.findLower(firstWALEntry.getValue().encodedName2HighestSequenceId);\n     }\n     if (regions != null) {\n-      StringBuilder sb = new StringBuilder();\n-      for (int i = 0; i < regions.length; i++) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+      List<String> listForPrint = new ArrayList();\n+      for (Map.Entry<byte[], List<byte[]>> r : regions.entrySet()) {\n+        StringBuffer families = new StringBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMjc1Mg==", "bodyText": "Will fix.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r433122752", "createdAt": "2020-06-01T09:05:35Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -639,26 +641,30 @@ public int getNumLogFiles() {\n    * If the number of un-archived WAL files ('live' WALs) is greater than maximum allowed,\n    * check the first (oldest) WAL, and return those regions which should be flushed so that\n    * it can be let-go/'archived'.\n-   * @return regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n+   * @return stores of regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n    */\n-  byte[][] findRegionsToForceFlush() throws IOException {\n-    byte[][] regions = null;\n+  Map<byte[], List<byte[]>> findRegionsToForceFlush() throws IOException {\n+    Map<byte[], List<byte[]>> regions = null;\n     int logCount = getNumRolledLogFiles();\n     if (logCount > this.maxLogs && logCount > 0) {\n       Map.Entry<Path, WalProps> firstWALEntry = this.walFile2Props.firstEntry();\n       regions =\n         this.sequenceIdAccounting.findLower(firstWALEntry.getValue().encodedName2HighestSequenceId);\n     }\n     if (regions != null) {\n-      StringBuilder sb = new StringBuilder();\n-      for (int i = 0; i < regions.length; i++) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+      List<String> listForPrint = new ArrayList();\n+      for (Map.Entry<byte[], List<byte[]>> r : regions.entrySet()) {\n+        StringBuffer families = new StringBuffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTYxNw=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc5MzM0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1NToyMlrOGac6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNTo0NFrOGdDuBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTg0NQ==", "bodyText": "Avoid star imports.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r430389845", "createdAt": "2020-05-26T12:55:22Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "diffHunk": "@@ -19,13 +19,7 @@\n \n import static org.apache.hadoop.hbase.util.ConcurrentMapUtils.computeIfAbsent;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMjgyMw==", "bodyText": "Will fix.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r433122823", "createdAt": "2020-06-01T09:05:44Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "diffHunk": "@@ -19,13 +19,7 @@\n \n import static org.apache.hadoop.hbase.util.ConcurrentMapUtils.computeIfAbsent;\n \n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4OTg0NQ=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDc5NTYyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMjo1NTo1OVrOGac7wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNToxNFrOGdDtMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MDIwOA==", "bodyText": "Just return toFlush?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r430390208", "createdAt": "2020-05-26T12:55:59Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "diffHunk": "@@ -440,27 +434,27 @@ boolean areAllLower(Map<byte[], Long> sequenceids, Collection<byte[]> keysBlocki\n    * {@link #lowestUnflushedSequenceIds} has a sequence id less than that passed in\n    * <code>sequenceids</code> then return it.\n    * @param sequenceids Sequenceids keyed by encoded region name.\n-   * @return regions found in this instance with sequence ids less than those passed in.\n+   * @return stores of regions found in this instance with sequence ids less than those passed in.\n    */\n-  byte[][] findLower(Map<byte[], Long> sequenceids) {\n-    List<byte[]> toFlush = null;\n+  Map<byte[], List<byte[]>> findLower(Map<byte[], Long> sequenceids) {\n+    Map<byte[], List<byte[]>> toFlush = null;\n     // Keeping the old behavior of iterating unflushedSeqNums under oldestSeqNumsLock.\n     synchronized (tieLock) {\n       for (Map.Entry<byte[], Long> e : sequenceids.entrySet()) {\n         Map<ImmutableByteArray, Long> m = this.lowestUnflushedSequenceIds.get(e.getKey());\n         if (m == null) {\n           continue;\n         }\n-        // The lowest sequence id outstanding for this region.\n-        long lowest = getLowestSequenceId(m);\n-        if (lowest != HConstants.NO_SEQNUM && lowest <= e.getValue()) {\n-          if (toFlush == null) {\n-            toFlush = new ArrayList<>();\n+        for (Map.Entry<ImmutableByteArray, Long> me : m.entrySet()) {\n+          if (me.getValue() <= e.getValue()) {\n+            if (toFlush == null) {\n+              toFlush = new TreeMap(Bytes.BYTES_COMPARATOR);\n+            }\n+            toFlush.computeIfAbsent(e.getKey(), k -> new ArrayList<>()).add(Bytes.toBytes(me.getKey().toString()));\n           }\n-          toFlush.add(e.getKey());\n         }\n       }\n     }\n-    return toFlush == null ? null : toFlush.toArray(new byte[0][]);\n+    return toFlush == null ? null : toFlush;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMjYxMQ==", "bodyText": "Oh, awkward.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r433122611", "createdAt": "2020-06-01T09:05:14Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/SequenceIdAccounting.java", "diffHunk": "@@ -440,27 +434,27 @@ boolean areAllLower(Map<byte[], Long> sequenceids, Collection<byte[]> keysBlocki\n    * {@link #lowestUnflushedSequenceIds} has a sequence id less than that passed in\n    * <code>sequenceids</code> then return it.\n    * @param sequenceids Sequenceids keyed by encoded region name.\n-   * @return regions found in this instance with sequence ids less than those passed in.\n+   * @return stores of regions found in this instance with sequence ids less than those passed in.\n    */\n-  byte[][] findLower(Map<byte[], Long> sequenceids) {\n-    List<byte[]> toFlush = null;\n+  Map<byte[], List<byte[]>> findLower(Map<byte[], Long> sequenceids) {\n+    Map<byte[], List<byte[]>> toFlush = null;\n     // Keeping the old behavior of iterating unflushedSeqNums under oldestSeqNumsLock.\n     synchronized (tieLock) {\n       for (Map.Entry<byte[], Long> e : sequenceids.entrySet()) {\n         Map<ImmutableByteArray, Long> m = this.lowestUnflushedSequenceIds.get(e.getKey());\n         if (m == null) {\n           continue;\n         }\n-        // The lowest sequence id outstanding for this region.\n-        long lowest = getLowestSequenceId(m);\n-        if (lowest != HConstants.NO_SEQNUM && lowest <= e.getValue()) {\n-          if (toFlush == null) {\n-            toFlush = new ArrayList<>();\n+        for (Map.Entry<ImmutableByteArray, Long> me : m.entrySet()) {\n+          if (me.getValue() <= e.getValue()) {\n+            if (toFlush == null) {\n+              toFlush = new TreeMap(Bytes.BYTES_COMPARATOR);\n+            }\n+            toFlush.computeIfAbsent(e.getKey(), k -> new ArrayList<>()).add(Bytes.toBytes(me.getKey().toString()));\n           }\n-          toFlush.add(e.getKey());\n         }\n       }\n     }\n-    return toFlush == null ? null : toFlush.toArray(new byte[0][]);\n+    return toFlush == null ? null : toFlush;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM5MDIwOA=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDYwNDY1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzowMDoyOFrOGb-Z5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMTo0NVrOGcPyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4NzE3NQ==", "bodyText": "Should this family selection pass through the flushPolicy?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r431987175", "createdAt": "2020-05-28T17:00:28Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = new ArrayList<>();\n+          for (byte[] family : families) {\n+            specificStoresToFlush.add(stores.get(family));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTk2NA==", "bodyText": "Moved to FlushPolicy, seems better.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r432271964", "createdAt": "2020-05-29T06:01:45Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = new ArrayList<>();\n+          for (byte[] family : families) {\n+            specificStoresToFlush.add(stores.get(family));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4NzE3NQ=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDYwNTk0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzowMDo1MFrOGb-auw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo0NjozNlrOGcPhTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4NzM4Nw==", "bodyText": "Be careful here. Make code look like rest of the file. Add space around the 'else'.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r431987387", "createdAt": "2020-05-28T17:00:50Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = new ArrayList<>();\n+          for (byte[] family : families) {\n+            specificStoresToFlush.add(stores.get(family));\n+          }\n+        }else{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2NzU5Ng==", "bodyText": "Sorry for the careless.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r432267596", "createdAt": "2020-05-29T05:46:36Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2444,8 +2451,16 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = new ArrayList<>();\n+          for (byte[] family : families) {\n+            specificStoresToFlush.add(stores.get(family));\n+          }\n+        }else{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4NzM4Nw=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDYwOTcwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreFlusher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzowMTo0M1rOGb-dOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo0Nzo1M1rOGcPivQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4ODAyNg==", "bodyText": "Space after comma (Make your code follow convention of surrounding code)", "url": "https://github.com/apache/hbase/pull/1737#discussion_r431988026", "createdAt": "2020-05-28T17:01:43Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreFlusher.java", "diffHunk": "@@ -459,13 +459,18 @@ private FlushType isAboveLowWaterMark() {\n   }\n \n   @Override\n-  public boolean requestFlush(HRegion r, boolean forceFlushAllStores,\n-                              FlushLifeCycleTracker tracker) {\n+  public boolean requestFlush(HRegion r, boolean forceFlushAllStores,FlushLifeCycleTracker tracker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2Nzk2NQ==", "bodyText": "Ditto", "url": "https://github.com/apache/hbase/pull/1737#discussion_r432267965", "createdAt": "2020-05-29T05:47:53Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MemStoreFlusher.java", "diffHunk": "@@ -459,13 +459,18 @@ private FlushType isAboveLowWaterMark() {\n   }\n \n   @Override\n-  public boolean requestFlush(HRegion r, boolean forceFlushAllStores,\n-                              FlushLifeCycleTracker tracker) {\n+  public boolean requestFlush(HRegion r, boolean forceFlushAllStores,FlushLifeCycleTracker tracker) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk4ODAyNg=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDYyMjYxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzowNDoxNlrOGb-lhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1MDoyMVrOGcPllA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5MDE0OQ==", "bodyText": "Usually ',' for lists.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r431990149", "createdAt": "2020-05-28T17:04:16Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -639,26 +641,30 @@ public int getNumLogFiles() {\n    * If the number of un-archived WAL files ('live' WALs) is greater than maximum allowed,\n    * check the first (oldest) WAL, and return those regions which should be flushed so that\n    * it can be let-go/'archived'.\n-   * @return regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n+   * @return stores of regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n    */\n-  byte[][] findRegionsToForceFlush() throws IOException {\n-    byte[][] regions = null;\n+  Map<byte[], List<byte[]>> findRegionsToForceFlush() throws IOException {\n+    Map<byte[], List<byte[]>> regions = null;\n     int logCount = getNumRolledLogFiles();\n     if (logCount > this.maxLogs && logCount > 0) {\n       Map.Entry<Path, WalProps> firstWALEntry = this.walFile2Props.firstEntry();\n       regions =\n         this.sequenceIdAccounting.findLower(firstWALEntry.getValue().encodedName2HighestSequenceId);\n     }\n     if (regions != null) {\n-      StringBuilder sb = new StringBuilder();\n-      for (int i = 0; i < regions.length; i++) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+      List<String> listForPrint = new ArrayList();\n+      for (Map.Entry<byte[], List<byte[]>> r : regions.entrySet()) {\n+        StringBuffer families = new StringBuffer();\n+        for (int i = 0; i < r.getValue().size(); i++) {\n+          if (i > 0) {\n+            families.append(\"|\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2ODY5Mg==", "bodyText": "Will fix", "url": "https://github.com/apache/hbase/pull/1737#discussion_r432268692", "createdAt": "2020-05-29T05:50:21Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -639,26 +641,30 @@ public int getNumLogFiles() {\n    * If the number of un-archived WAL files ('live' WALs) is greater than maximum allowed,\n    * check the first (oldest) WAL, and return those regions which should be flushed so that\n    * it can be let-go/'archived'.\n-   * @return regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n+   * @return stores of regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n    */\n-  byte[][] findRegionsToForceFlush() throws IOException {\n-    byte[][] regions = null;\n+  Map<byte[], List<byte[]>> findRegionsToForceFlush() throws IOException {\n+    Map<byte[], List<byte[]>> regions = null;\n     int logCount = getNumRolledLogFiles();\n     if (logCount > this.maxLogs && logCount > 0) {\n       Map.Entry<Path, WalProps> firstWALEntry = this.walFile2Props.firstEntry();\n       regions =\n         this.sequenceIdAccounting.findLower(firstWALEntry.getValue().encodedName2HighestSequenceId);\n     }\n     if (regions != null) {\n-      StringBuilder sb = new StringBuilder();\n-      for (int i = 0; i < regions.length; i++) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+      List<String> listForPrint = new ArrayList();\n+      for (Map.Entry<byte[], List<byte[]>> r : regions.entrySet()) {\n+        StringBuffer families = new StringBuffer();\n+        for (int i = 0; i < r.getValue().size(); i++) {\n+          if (i > 0) {\n+            families.append(\"|\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTk5MDE0OQ=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MDY4NjY1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNzoyMjo1M1rOGb_PPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1MToyOVrOGcPm1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMDgyOA==", "bodyText": "s/forcing flush partial stores of/forcing (partial) flush of/", "url": "https://github.com/apache/hbase/pull/1737#discussion_r432000828", "createdAt": "2020-05-28T17:22:53Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -639,26 +641,30 @@ public int getNumLogFiles() {\n    * If the number of un-archived WAL files ('live' WALs) is greater than maximum allowed,\n    * check the first (oldest) WAL, and return those regions which should be flushed so that\n    * it can be let-go/'archived'.\n-   * @return regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n+   * @return stores of regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n    */\n-  byte[][] findRegionsToForceFlush() throws IOException {\n-    byte[][] regions = null;\n+  Map<byte[], List<byte[]>> findRegionsToForceFlush() throws IOException {\n+    Map<byte[], List<byte[]>> regions = null;\n     int logCount = getNumRolledLogFiles();\n     if (logCount > this.maxLogs && logCount > 0) {\n       Map.Entry<Path, WalProps> firstWALEntry = this.walFile2Props.firstEntry();\n       regions =\n         this.sequenceIdAccounting.findLower(firstWALEntry.getValue().encodedName2HighestSequenceId);\n     }\n     if (regions != null) {\n-      StringBuilder sb = new StringBuilder();\n-      for (int i = 0; i < regions.length; i++) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+      List<String> listForPrint = new ArrayList();\n+      for (Map.Entry<byte[], List<byte[]>> r : regions.entrySet()) {\n+        StringBuffer families = new StringBuffer();\n+        for (int i = 0; i < r.getValue().size(); i++) {\n+          if (i > 0) {\n+            families.append(\"|\");\n+          }\n+          families.append(Bytes.toString(r.getValue().get(i)));\n         }\n-        sb.append(Bytes.toStringBinary(regions[i]));\n+        listForPrint.add(Bytes.toStringBinary(r.getKey()) + \"[\" + families.toString() + \"]\");\n       }\n       LOG.info(\"Too many WALs; count=\" + logCount + \", max=\" + this.maxLogs +\n-        \"; forcing flush of \" + regions.length + \" regions(s): \" + sb.toString());\n+        \"; forcing flush partial stores of \" + regions.size() + \" region(s): \" + StringUtils.join(\",\", listForPrint));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI2OTAxMg==", "bodyText": "Will fix.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r432269012", "createdAt": "2020-05-29T05:51:29Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -639,26 +641,30 @@ public int getNumLogFiles() {\n    * If the number of un-archived WAL files ('live' WALs) is greater than maximum allowed,\n    * check the first (oldest) WAL, and return those regions which should be flushed so that\n    * it can be let-go/'archived'.\n-   * @return regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n+   * @return stores of regions (encodedRegionNames) to flush in order to archive oldest WAL file.\n    */\n-  byte[][] findRegionsToForceFlush() throws IOException {\n-    byte[][] regions = null;\n+  Map<byte[], List<byte[]>> findRegionsToForceFlush() throws IOException {\n+    Map<byte[], List<byte[]>> regions = null;\n     int logCount = getNumRolledLogFiles();\n     if (logCount > this.maxLogs && logCount > 0) {\n       Map.Entry<Path, WalProps> firstWALEntry = this.walFile2Props.firstEntry();\n       regions =\n         this.sequenceIdAccounting.findLower(firstWALEntry.getValue().encodedName2HighestSequenceId);\n     }\n     if (regions != null) {\n-      StringBuilder sb = new StringBuilder();\n-      for (int i = 0; i < regions.length; i++) {\n-        if (i > 0) {\n-          sb.append(\", \");\n+      List<String> listForPrint = new ArrayList();\n+      for (Map.Entry<byte[], List<byte[]>> r : regions.entrySet()) {\n+        StringBuffer families = new StringBuffer();\n+        for (int i = 0; i < r.getValue().size(); i++) {\n+          if (i > 0) {\n+            families.append(\"|\");\n+          }\n+          families.append(Bytes.toString(r.getValue().get(i)));\n         }\n-        sb.append(Bytes.toStringBinary(regions[i]));\n+        listForPrint.add(Bytes.toStringBinary(r.getKey()) + \"[\" + families.toString() + \"]\");\n       }\n       LOG.info(\"Too many WALs; count=\" + logCount + \", max=\" + this.maxLogs +\n-        \"; forcing flush of \" + regions.length + \" regions(s): \" + sb.toString());\n+        \"; forcing flush partial stores of \" + regions.size() + \" region(s): \" + StringUtils.join(\",\", listForPrint));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjAwMDgyOA=="}, "originalCommit": {"oid": "bc0089a687d02b55706b0b4baf9173b013531de5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Nzg2MjE2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwODozOTowMlrOGdC_NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwOTowNzo1MVrOGdDxnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMDgzNg==", "bodyText": "What's this?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r433110836", "createdAt": "2020-06-01T08:39:02Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java", "diffHunk": "@@ -9,7 +9,7 @@\n  * with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ *TestFlusher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1463fb7a0b15c15a29ce622ec8ad23505975d99"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEyMzc0MA==", "bodyText": "Will fix, editing error.\nThanks.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r433123740", "createdAt": "2020-06-01T09:07:51Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestWALReplay.java", "diffHunk": "@@ -9,7 +9,7 @@\n  * with the License.  You may obtain a copy of the License at\n  *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ *TestFlusher", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzExMDgzNg=="}, "originalCommit": {"oid": "e1463fb7a0b15c15a29ce622ec8ad23505975d99"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODkyMTE0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoyNDo0MVrOGgO2YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo1OTozMlrOGgRUpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDkxMw==", "bodyText": "Could be static?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436450913", "createdAt": "2020-06-08T04:24:41Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushPolicy.java", "diffHunk": "@@ -46,4 +49,16 @@ protected void configureForRegion(HRegion region) {\n    */\n   public abstract Collection<HStore> selectStoresToFlush();\n \n+  /**\n+   * select stores which matches the specified families\n+   *\n+   * @return the stores need to be flushed.\n+   */\n+  public Collection<HStore> selectStoresToFlush(Map<byte[], HStore> stores, List<byte[]> families) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MTQzMQ==", "bodyText": "Yeah, if still as part of FlushPolicy after discuss.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436491431", "createdAt": "2020-06-08T06:59:32Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushPolicy.java", "diffHunk": "@@ -46,4 +49,16 @@ protected void configureForRegion(HRegion region) {\n    */\n   public abstract Collection<HStore> selectStoresToFlush();\n \n+  /**\n+   * select stores which matches the specified families\n+   *\n+   * @return the stores need to be flushed.\n+   */\n+  public Collection<HStore> selectStoresToFlush(Map<byte[], HStore> stores, List<byte[]> families) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MDkxMw=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODkyMzQ5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushRequester.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDoyNjo0M1rOGgO3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNDo1OTozNlrOGorZ9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MTI2Mw==", "bodyText": "If this true, does it mean flush all familes even if only a subset passed in families?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436451263", "createdAt": "2020-06-08T04:26:43Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushRequester.java", "diffHunk": "@@ -36,6 +38,18 @@\n    */\n   boolean requestFlush(HRegion region, boolean forceFlushAllStores, FlushLifeCycleTracker tracker);\n \n+  /**\n+   * Tell the listener the cache needs to be flushed.\n+   *\n+   * @param region the Region requesting the cache flush\n+   * @param forceFlushAllStores whether we want to flush all stores. e.g., when request from log", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MTgzOQ==", "bodyText": "If this is case, maybe say so in the javadoc?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436451839", "createdAt": "2020-06-08T04:30:09Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushRequester.java", "diffHunk": "@@ -36,6 +38,18 @@\n    */\n   boolean requestFlush(HRegion region, boolean forceFlushAllStores, FlushLifeCycleTracker tracker);\n \n+  /**\n+   * Tell the listener the cache needs to be flushed.\n+   *\n+   * @param region the Region requesting the cache flush\n+   * @param forceFlushAllStores whether we want to flush all stores. e.g., when request from log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MTI2Mw=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MjU0OA==", "bodyText": "Yeah, if this is true, families are ignored.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436452548", "createdAt": "2020-06-08T04:34:17Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushRequester.java", "diffHunk": "@@ -36,6 +38,18 @@\n    */\n   boolean requestFlush(HRegion region, boolean forceFlushAllStores, FlushLifeCycleTracker tracker);\n \n+  /**\n+   * Tell the listener the cache needs to be flushed.\n+   *\n+   * @param region the Region requesting the cache flush\n+   * @param forceFlushAllStores whether we want to flush all stores. e.g., when request from log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MTI2Mw=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5Mjk4MA==", "bodyText": "Will add some content for this.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436492980", "createdAt": "2020-06-08T07:03:29Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushRequester.java", "diffHunk": "@@ -36,6 +38,18 @@\n    */\n   boolean requestFlush(HRegion region, boolean forceFlushAllStores, FlushLifeCycleTracker tracker);\n \n+  /**\n+   * Tell the listener the cache needs to be flushed.\n+   *\n+   * @param region the Region requesting the cache flush\n+   * @param forceFlushAllStores whether we want to flush all stores. e.g., when request from log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MTI2Mw=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNzIyNw==", "bodyText": "Did you add comment to clarify what is going on here? I don't see it. Maybe it is elsewhere?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445307227", "createdAt": "2020-06-25T04:59:10Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushRequester.java", "diffHunk": "@@ -36,6 +38,18 @@\n    */\n   boolean requestFlush(HRegion region, boolean forceFlushAllStores, FlushLifeCycleTracker tracker);\n \n+  /**\n+   * Tell the listener the cache needs to be flushed.\n+   *\n+   * @param region the Region requesting the cache flush\n+   * @param forceFlushAllStores whether we want to flush all stores. e.g., when request from log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MTI2Mw=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNzM4MA==", "bodyText": "Oh, I see it in next line. Let me resolve.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445307380", "createdAt": "2020-06-25T04:59:36Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushRequester.java", "diffHunk": "@@ -36,6 +38,18 @@\n    */\n   boolean requestFlush(HRegion region, boolean forceFlushAllStores, FlushLifeCycleTracker tracker);\n \n+  /**\n+   * Tell the listener the cache needs to be flushed.\n+   *\n+   * @param region the Region requesting the cache flush\n+   * @param forceFlushAllStores whether we want to flush all stores. e.g., when request from log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1MTI2Mw=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk0NTYwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo0Njo0M1rOGgPFbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo0MjowOVrOGgQ6OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NDc2Nw==", "bodyText": "So, looking at the flushPolicy implementations we currently have, I see two:\nFlushAllStoresPolicy\nand\nFlushLargeStoresPolicy\nGiven the current implementations, passing a subset of families doesn't seem appropriate at least for the FlushAllStoresPolicy -- if we flush some families only, then we are not flushing AllStores -- and perhaps for the FlushLargeStoresPolicy since we are not flushing the large but the passed families.\nDo you need to create a new flush policy? One that does the subset of families passed? If user configures the FlushAllStoresPolicy and instead we only flush a subset, then they will be confused.\nWhy do we pass in stores into selectStoresToFlush? We do not need the list of stores in the flushAllStoresPolicy. It has access to 'this' so can figure what Stores are in the Region.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436454767", "createdAt": "2020-06-08T04:46:43Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2457,8 +2463,13 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = flushPolicy.selectStoresToFlush(stores, families);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4NDY2NQ==", "bodyText": "Why do we pass in stores into selectStoresToFlush? We do not need the list of stores in the flushAllStoresPolicy. It has access to 'this' so can figure what Stores are in the Region.\n\nAs comment below, maybe it should not be part of flushPolicy?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436484665", "createdAt": "2020-06-08T06:42:09Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2457,8 +2463,13 @@ public FlushResultImpl flushcache(boolean forceFlushAllStores, boolean writeFlus\n       }\n \n       try {\n-        Collection<HStore> specificStoresToFlush =\n+        Collection<HStore> specificStoresToFlush = null;\n+        if (!forceFlushAllStores && families != null) {\n+          specificStoresToFlush = flushPolicy.selectStoresToFlush(stores, families);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NDc2Nw=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk1NTIyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNDo1Mzo0MlrOGgPK7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo0MTowMVrOGosEjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NjE3NA==", "bodyText": "We are in here because a force roll was requested.  You change the true to false. Isn't that changing behavior at least for the default flush all stores case?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436456174", "createdAt": "2020-06-08T04:53:42Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -58,8 +60,8 @@ protected void scheduleFlush(String encodedRegionName) {\n         encodedRegionName, r);\n       return;\n     }\n-    // force flushing all stores to clean old logs\n-    requester.requestFlush(r, true, FlushLifeCycleTracker.DUMMY);\n+    // force flushing specified stores to clean old logs\n+    requester.requestFlush(r, false, families, FlushLifeCycleTracker.DUMMY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MDkwNA==", "bodyText": "Yeah, it changes and only changes behavior in case that wals is too many.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436490904", "createdAt": "2020-06-08T06:58:13Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -58,8 +60,8 @@ protected void scheduleFlush(String encodedRegionName) {\n         encodedRegionName, r);\n       return;\n     }\n-    // force flushing all stores to clean old logs\n-    requester.requestFlush(r, true, FlushLifeCycleTracker.DUMMY);\n+    // force flushing specified stores to clean old logs\n+    requester.requestFlush(r, false, families, FlushLifeCycleTracker.DUMMY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NjE3NA=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzc2OTA1OA==", "bodyText": "Are you sure. You change the force from true to false in line above.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r437769058", "createdAt": "2020-06-09T23:02:53Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -58,8 +60,8 @@ protected void scheduleFlush(String encodedRegionName) {\n         encodedRegionName, r);\n       return;\n     }\n-    // force flushing all stores to clean old logs\n-    requester.requestFlush(r, true, FlushLifeCycleTracker.DUMMY);\n+    // force flushing specified stores to clean old logs\n+    requester.requestFlush(r, false, families, FlushLifeCycleTracker.DUMMY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NjE3NA=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3NDQ0NQ==", "bodyText": "Errr, is this line could be executed in other case except too many wals?\nChecked the code again, seems not, Correct me if i miss something.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r438074445", "createdAt": "2020-06-10T12:14:03Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -58,8 +60,8 @@ protected void scheduleFlush(String encodedRegionName) {\n         encodedRegionName, r);\n       return;\n     }\n-    // force flushing all stores to clean old logs\n-    requester.requestFlush(r, true, FlushLifeCycleTracker.DUMMY);\n+    // force flushing specified stores to clean old logs\n+    requester.requestFlush(r, false, families, FlushLifeCycleTracker.DUMMY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NjE3NA=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxNTA5NA==", "bodyText": "The flag is set when we are in a critical condition -- the WAL count is in excess of our WAL limit. The flag's intent IIRC is that we flush all stores regardless of what determination is made at flush time as to which stores are in need of flush or not; the old edit may actually be hanging out in a store that is small and not in need of flush normally or in accordance w/ some flush policy. The flag says 'force' the flush. My understanding is that this is a FlushRequest usually but the flag changes the request to a demand.\nHere you are passing a set of stores instead where the stores chosen are the ones that will free up WALs. So, this flag is now redundant? We should purge it. Now it will confuse since the 'force' instead is a list of families to flush -- else its null if old behavior.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445315094", "createdAt": "2020-06-25T05:29:32Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -58,8 +60,8 @@ protected void scheduleFlush(String encodedRegionName) {\n         encodedRegionName, r);\n       return;\n     }\n-    // force flushing all stores to clean old logs\n-    requester.requestFlush(r, true, FlushLifeCycleTracker.DUMMY);\n+    // force flushing specified stores to clean old logs\n+    requester.requestFlush(r, false, families, FlushLifeCycleTracker.DUMMY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NjE3NA=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxODI4NA==", "bodyText": "Looking around, this is the only time forceFlushAllStores is set to true -- when we have too many WALs and we need to clear the old ones out.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445318284", "createdAt": "2020-06-25T05:41:01Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -58,8 +60,8 @@ protected void scheduleFlush(String encodedRegionName) {\n         encodedRegionName, r);\n       return;\n     }\n-    // force flushing all stores to clean old logs\n-    requester.requestFlush(r, true, FlushLifeCycleTracker.DUMMY);\n+    // force flushing specified stores to clean old logs\n+    requester.requestFlush(r, false, families, FlushLifeCycleTracker.DUMMY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NjE3NA=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODk2MzkwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNTowMDoxNVrOGgPP9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo1NjoyOVrOGgRPuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NzQ2Mg==", "bodyText": "I do like this change in the return type from Region to Region Stores. I am wary that we are changing the default behavior.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436457462", "createdAt": "2020-06-08T05:00:15Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -180,18 +181,18 @@ public void run() {\n           WAL wal = entry.getKey();\n           // reset the flag in front to avoid missing roll request before we return from rollWriter.\n           walNeedsRoll.put(wal, Boolean.FALSE);\n-          byte[][] regionsToFlush = null;\n+          Map<byte[], List<byte[]>> regionsToFlush = null;\n           try {\n             // Force the roll if the logroll.period is elapsed or if a roll was requested.\n-            // The returned value is an array of actual region names.\n+            // The returned value is an collection of actual region and family names.\n             regionsToFlush = wal.rollWriter(periodic || entry.getValue().booleanValue());\n           } catch (WALClosedException e) {\n             LOG.warn(\"WAL has been closed. Skipping rolling of writer and just remove it\", e);\n             iter.remove();\n           }\n           if (regionsToFlush != null) {\n-            for (byte[] r : regionsToFlush) {\n-              scheduleFlush(Bytes.toString(r));\n+            for (Map.Entry<byte[], List<byte[]>> r : regionsToFlush.entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MDE3MQ==", "bodyText": "I understand your concern, but i think the test is enough, and we just change the behavier when families is not null, and it will only comes from logRoller, and it only could be happend when wals is too many.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r436490171", "createdAt": "2020-06-08T06:56:29Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/AbstractWALRoller.java", "diffHunk": "@@ -180,18 +181,18 @@ public void run() {\n           WAL wal = entry.getKey();\n           // reset the flag in front to avoid missing roll request before we return from rollWriter.\n           walNeedsRoll.put(wal, Boolean.FALSE);\n-          byte[][] regionsToFlush = null;\n+          Map<byte[], List<byte[]>> regionsToFlush = null;\n           try {\n             // Force the roll if the logroll.period is elapsed or if a roll was requested.\n-            // The returned value is an array of actual region names.\n+            // The returned value is an collection of actual region and family names.\n             regionsToFlush = wal.rollWriter(periodic || entry.getValue().booleanValue());\n           } catch (WALClosedException e) {\n             LOG.warn(\"WAL has been closed. Skipping rolling of writer and just remove it\", e);\n             iter.remove();\n           }\n           if (regionsToFlush != null) {\n-            for (byte[] r : regionsToFlush) {\n-              scheduleFlush(Bytes.toString(r));\n+            for (Map.Entry<byte[], List<byte[]>> r : regionsToFlush.entrySet()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ1NzQ2Mg=="}, "originalCommit": {"oid": "ff0b09041215c4a49200c938aa4a52d7aa43f87c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODMyMzUxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushPolicy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDo1NTozMlrOGntRag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNToxNDoyMlrOGnuGNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4OTM4Ng==", "bodyText": "Should remove these imports? Seems we add a method in this class and then moved it out but forgot to remove these imports?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r444289386", "createdAt": "2020-06-23T14:55:32Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushPolicy.java", "diffHunk": "@@ -17,7 +17,10 @@\n  */\n package org.apache.hadoop.hbase.regionserver;\n \n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5632d9f317506501ae72817808daed3d5af9d347"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDMwMjkwMg==", "bodyText": "Oh, you are right, fixed.\nThanks.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r444302902", "createdAt": "2020-06-23T15:14:22Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/FlushPolicy.java", "diffHunk": "@@ -17,7 +17,10 @@\n  */\n package org.apache.hadoop.hbase.regionserver;\n \n+import java.util.ArrayList;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI4OTM4Ng=="}, "originalCommit": {"oid": "5632d9f317506501ae72817808daed3d5af9d347"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDY1NTU0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTowMDoyNFrOGoraxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTo1ODoyMFrOGosZJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNzU4OA==", "bodyText": "If null is passed, does that mean all families?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445307588", "createdAt": "2020-06-25T05:00:24Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2400,6 +2405,7 @@ public FlushResult flush(boolean force) throws IOException {\n    * <p>This method may block for some time, so it should not be called from a\n    * time-sensitive thread.\n    * @param forceFlushAllStores whether we want to flush all stores\n+   * @param families stores of region to flush.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78b9b5afdc77385e3d228467f512fe231c0f4e75"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNzczNg==", "bodyText": "Yeah, looks like it.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445307736", "createdAt": "2020-06-25T05:00:57Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2400,6 +2405,7 @@ public FlushResult flush(boolean force) throws IOException {\n    * <p>This method may block for some time, so it should not be called from a\n    * time-sensitive thread.\n    * @param forceFlushAllStores whether we want to flush all stores\n+   * @param families stores of region to flush.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNzU4OA=="}, "originalCommit": {"oid": "78b9b5afdc77385e3d228467f512fe231c0f4e75"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxNzMyMg==", "bodyText": "So all families in a Region if 'families' is null or if forceFlushAllStores is true?", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445317322", "createdAt": "2020-06-25T05:37:29Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2400,6 +2405,7 @@ public FlushResult flush(boolean force) throws IOException {\n    * <p>This method may block for some time, so it should not be called from a\n    * time-sensitive thread.\n    * @param forceFlushAllStores whether we want to flush all stores\n+   * @param families stores of region to flush.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNzU4OA=="}, "originalCommit": {"oid": "78b9b5afdc77385e3d228467f512fe231c0f4e75"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMyMzU1Ng==", "bodyText": "No, only if forceFlushAllStores is true we select all families.", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445323556", "createdAt": "2020-06-25T05:58:20Z", "author": {"login": "bsglz"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2400,6 +2405,7 @@ public FlushResult flush(boolean force) throws IOException {\n    * <p>This method may block for some time, so it should not be called from a\n    * time-sensitive thread.\n    * @param forceFlushAllStores whether we want to flush all stores\n+   * @param families stores of region to flush.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwNzU4OA=="}, "originalCommit": {"oid": "78b9b5afdc77385e3d228467f512fe231c0f4e75"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODc1Njc5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDo1ODowM1rOGpTsmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNDo1ODowM1rOGpTsmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk2NzUxNA==", "bodyText": "Good", "url": "https://github.com/apache/hbase/pull/1737#discussion_r445967514", "createdAt": "2020-06-26T04:58:03Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegion.java", "diffHunk": "@@ -2386,6 +2386,16 @@ public FlushResult flush(boolean force) throws IOException {\n     boolean isCompactionNeeded();\n   }\n \n+  public FlushResultImpl flushcache(boolean flushAllStores, boolean writeFlushRequestWalMarker,\n+    FlushLifeCycleTracker tracker) throws IOException {\n+    List families = null;\n+    if (flushAllStores) {\n+      families = new ArrayList();\n+      families.addAll(this.getTableDescriptor().getColumnFamilyNames());\n+    }\n+    return this.flushcache(families, writeFlushRequestWalMarker, tracker);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d2a3ea2f1e1c0a4c3cd2f18e29115fba5bfd713"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3001, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}