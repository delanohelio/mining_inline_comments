{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNzY5NTg2", "number": 1039, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoyNjo0N1rODaAttg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxNzo1MFrODaorkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAxMjcwOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoyNjo0N1rOFgujdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QyMTo0MDo1OVrOFiSa_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTQ5NQ==", "bodyText": "You could use findClass and if there's an exception fall through to alternate or recovery code. Anyway, agreed, a reference to a class constant is not called for here.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369861495", "createdAt": "2020-01-22T23:26:47Z", "author": {"login": "apurtell"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()\n+    // here because the ConnectionRegistry* classes are not resolvable from this module.\n+    // This will be broken if ZkConnectionRegistry class gets renamed or moved. Is there a better\n+    // way?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5MzY2MA==", "bodyText": "fall through to alternate or recovery code\n\nThere is no alternate or recovery from that point, no? The same error is propagated while creating the registry instance, so I guess we don't need to do it again here I think.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369893660", "createdAt": "2020-01-23T01:30:19Z", "author": {"login": "bharathv"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()\n+    // here because the ConnectionRegistry* classes are not resolvable from this module.\n+    // This will be broken if ZkConnectionRegistry class gets renamed or moved. Is there a better\n+    // way?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTQ5NQ=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzMzc3NQ==", "bodyText": "This code is going waste away. If user chooses zk registry, this code applies?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369933775", "createdAt": "2020-01-23T05:10:15Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()\n+    // here because the ConnectionRegistry* classes are not resolvable from this module.\n+    // This will be broken if ZkConnectionRegistry class gets renamed or moved. Is there a better\n+    // way?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTQ5NQ=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4MjcyNg==", "bodyText": "Agree. It is ok to leave as-is since it is a no-op?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369982726", "createdAt": "2020-01-23T08:28:03Z", "author": {"login": "bharathv"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()\n+    // here because the ConnectionRegistry* classes are not resolvable from this module.\n+    // This will be broken if ZkConnectionRegistry class gets renamed or moved. Is there a better\n+    // way?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTQ5NQ=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MzgxMA==", "bodyText": "I'm finding this method used by SyncTable, TableMapReduceUtil, TableOutputFormat, VerifyReplication, ExportSnapshot ... Per earlier discussion, replication will continue to use the ZK registry... what about the general MapReduce/Spark/Flink use-cases?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370873810", "createdAt": "2020-01-24T22:40:44Z", "author": {"login": "ndimiduk"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()\n+    // here because the ConnectionRegistry* classes are not resolvable from this module.\n+    // This will be broken if ZkConnectionRegistry class gets renamed or moved. Is there a better\n+    // way?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTQ5NQ=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2NTg1Mg==", "bodyText": "Hmm. Good point.\nTableMapReduceUtil: This happens only in initCredentialsForCluster() or if hbase.mapred.output.quorum is specified. Basically it only happens for a \"peer\" cluster. (same for TableOutputFormat, unless QUORUM_ADDRESS for a target is specified this doesn't happen). Overall, I think all MR jobs running on a single cluster will use master registry. I think that answers the MR/Spark/Flink usecases.\nNow coming to MR jobs spanning multiple clusters (source and target) Ex: VerifyReplication / ExportSnapshot/SyncTable/TableOutputFormat  etc\nI think these need to be rewritten with new config params like hbase.[source|target].master.addrs for clients to pass the addresses so that they can use master registry.\nWhat do you think? Should we rewrite them with new configs or maintain compatibility and keep using zkregistry?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370965852", "createdAt": "2020-01-26T00:45:40Z", "author": {"login": "bharathv"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()\n+    // here because the ConnectionRegistry* classes are not resolvable from this module.\n+    // This will be broken if ZkConnectionRegistry class gets renamed or moved. Is there a better\n+    // way?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTQ5NQ=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ5NzcyNQ==", "bodyText": "Overall, I think all MR jobs running on a single cluster will use master registry. I think that answers the MR/Spark/Flink usecases.\n\nSounds good.\n\nI think these need to be rewritten with new config params like hbase.[source|target].master.addrs for clients to pass the addresses so that they can use master registry.\n\nI think it's best to reduce the ZK-exposed surface area as much as possible. This seems a reasonable solution to me.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r371497725", "createdAt": "2020-01-27T21:40:59Z", "author": {"login": "ndimiduk"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()\n+    // here because the ConnectionRegistry* classes are not resolvable from this module.\n+    // This will be broken if ZkConnectionRegistry class gets renamed or moved. Is there a better\n+    // way?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MTQ5NQ=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAxNjY0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoyODo1MlrOFgul9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTozMjowMlrOFgwipA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjEzNQ==", "bodyText": "The tense here is confusing.\n\"Using the ZK based registry means the region servers continue to be independent of master availability...\" ?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369862135", "createdAt": "2020-01-22T23:28:52Z", "author": {"login": "apurtell"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,19 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. For example, if all the masters are down, region\n+    //   servers can abort at the same time, because the internal connection is master dependent and\n+    //   fails.This is an operational nightmare. Using the ZK based registry means that the region\n+    //   servers are now on the look out for new masters, if they are spun up.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NDA1Mg==", "bodyText": "Clarified.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369894052", "createdAt": "2020-01-23T01:32:02Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,19 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. For example, if all the masters are down, region\n+    //   servers can abort at the same time, because the internal connection is master dependent and\n+    //   fails.This is an operational nightmare. Using the ZK based registry means that the region\n+    //   servers are now on the look out for new masters, if they are spun up.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjEzNQ=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAxNzMxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzoyOToxNlrOFgumVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTozMjoxMVrOFgwiuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjIzMA==", "bodyText": "Ok, but these class names can be constant strings at least.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369862230", "createdAt": "2020-01-22T23:29:16Z", "author": {"login": "apurtell"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,19 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. For example, if all the masters are down, region\n+    //   servers can abort at the same time, because the internal connection is master dependent and\n+    //   fails.This is an operational nightmare. Using the ZK based registry means that the region\n+    //   servers are now on the look out for new masters, if they are spun up.\n+    // - Configuration management for region servers (cluster internal) is much simpler when adding\n+    //   new masters etc.\n+    // - We need to retain ZKConnectionRegistry for replication use anyway, so we just extend it for\n+    //   other internal connections too.\n+    conf.set(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY,\n+        \"org.apache.hadoop.hbase.client.ZKConnectionRegistry\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NDA3NQ==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369894075", "createdAt": "2020-01-23T01:32:11Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,19 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. For example, if all the masters are down, region\n+    //   servers can abort at the same time, because the internal connection is master dependent and\n+    //   fails.This is an operational nightmare. Using the ZK based registry means that the region\n+    //   servers are now on the look out for new masters, if they are spun up.\n+    // - Configuration management for region servers (cluster internal) is much simpler when adding\n+    //   new masters etc.\n+    // - We need to retain ZKConnectionRegistry for replication use anyway, so we just extend it for\n+    //   other internal connections too.\n+    conf.set(HConstants.CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY,\n+        \"org.apache.hadoop.hbase.client.ZKConnectionRegistry\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MjIzMA=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjAyNDc2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQyMzozMzowN1rOFguqyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTo0NDo1M1rOFgwuXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MzM3MA==", "bodyText": "Is it possible to use Waiter#waitFor to wait on some condition variable or predicate? Hard coded sleeps in tests tend to fall over on Apache Jenkins because of load issues ie the sleeps can never be long enough...", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369863370", "createdAt": "2020-01-22T23:33:07Z", "author": {"login": "apurtell"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -133,11 +133,19 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     util.startMiniZKCluster();\n     util.createRootDir();\n     final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        new LocalHBaseCluster(conf, NUM_MASTERS, 0, NUM_RS, HMaster.class,\n             MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n     final int MASTER_INDEX = 0;\n     final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n     master.start();\n+    // Switching to master registry exposed a race in the master bootstrap that can result in a\n+    // lost shutdown command (essentially HBASE-8422). The race is essentially because the\n+    // server manager in HMaster is not initialized by the time shutdown() RPC (below) is made to\n+    // the master. The reason it was not happening earlier is because the connection creation with\n+    // ZK registry is so slow that by then the server manager is init'ed thus masking the problem.\n+    // For now, I'm putting a sleep here to workaround the issue, I think the fix for it is a little\n+    // delicate and needs to be done separately.\n+    Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg5NzA1NA==", "bodyText": "That is cleaner, done.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369897054", "createdAt": "2020-01-23T01:44:53Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -133,11 +133,19 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     util.startMiniZKCluster();\n     util.createRootDir();\n     final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        new LocalHBaseCluster(conf, NUM_MASTERS, 0, NUM_RS, HMaster.class,\n             MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n     final int MASTER_INDEX = 0;\n     final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n     master.start();\n+    // Switching to master registry exposed a race in the master bootstrap that can result in a\n+    // lost shutdown command (essentially HBASE-8422). The race is essentially because the\n+    // server manager in HMaster is not initialized by the time shutdown() RPC (below) is made to\n+    // the master. The reason it was not happening earlier is because the connection creation with\n+    // ZK registry is so slow that by then the server manager is init'ed thus masking the problem.\n+    // For now, I'm putting a sleep here to workaround the issue, I think the fix for it is a little\n+    // delicate and needs to be done separately.\n+    Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg2MzM3MA=="}, "originalCommit": {"oid": "10f1e24eba8a692eb0631b03729f8533b4874872"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjQ5MTMwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNToxNDozOVrOFgzFFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODoyOTo0OVrOFg2AMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzNTYzOA==", "bodyText": "Late to the game , but what is an AlwaysStandByHMaster rather than StandByMaster? Why the Always? Maybe it will make sense later in review.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369935638", "createdAt": "2020-01-23T05:14:39Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "diffHunk": "@@ -170,27 +171,36 @@ public LocalHBaseCluster(final Configuration conf, final int noMasters,\n     this.masterClass = (Class<? extends HMaster>)\n       conf.getClass(HConstants.MASTER_IMPL, masterClass);\n     // Start the HMasters.\n-    for (int i = 0; i < noMasters; i++) {\n+    int i;\n+    for (i = 0; i < noMasters; i++) {\n       addMaster(new Configuration(conf), i);\n     }\n-\n-    // Populate the master address host ports in the config. This is needed if a master based\n-    // registry is configured for client metadata services (HBASE-18095)\n-    List<String> masterHostPorts = new ArrayList<>();\n-    getMasters().forEach(masterThread ->\n-        masterHostPorts.add(masterThread.getMaster().getServerName().getAddress().toString()));\n-    conf.set(HConstants.MASTER_ADDRS_KEY, String.join(\",\", masterHostPorts));\n-\n+    for (int j = 0; j < noAlwaysStandByMasters; j++) {\n+      Configuration c = new Configuration(conf);\n+      c.set(HConstants.MASTER_IMPL, \"org.apache.hadoop.hbase.master.AlwaysStandByHMaster\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4MzUzOA==", "bodyText": "Looks like you already figured it out based on your other comments below.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369983538", "createdAt": "2020-01-23T08:29:49Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "diffHunk": "@@ -170,27 +171,36 @@ public LocalHBaseCluster(final Configuration conf, final int noMasters,\n     this.masterClass = (Class<? extends HMaster>)\n       conf.getClass(HConstants.MASTER_IMPL, masterClass);\n     // Start the HMasters.\n-    for (int i = 0; i < noMasters; i++) {\n+    int i;\n+    for (i = 0; i < noMasters; i++) {\n       addMaster(new Configuration(conf), i);\n     }\n-\n-    // Populate the master address host ports in the config. This is needed if a master based\n-    // registry is configured for client metadata services (HBASE-18095)\n-    List<String> masterHostPorts = new ArrayList<>();\n-    getMasters().forEach(masterThread ->\n-        masterHostPorts.add(masterThread.getMaster().getServerName().getAddress().toString()));\n-    conf.set(HConstants.MASTER_ADDRS_KEY, String.join(\",\", masterHostPorts));\n-\n+    for (int j = 0; j < noAlwaysStandByMasters; j++) {\n+      Configuration c = new Configuration(conf);\n+      c.set(HConstants.MASTER_IMPL, \"org.apache.hadoop.hbase.master.AlwaysStandByHMaster\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzNTYzOA=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjUxOTQzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTozOToyOVrOFgzWFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODozMTozNFrOFg2C-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzOTk4OA==", "bodyText": "I could be obnoxious here but won't. Better to do as you have done here and just move the code.... not change it.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369939988", "createdAt": "2020-01-23T05:39:29Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "diffHunk": "@@ -170,27 +171,36 @@ public LocalHBaseCluster(final Configuration conf, final int noMasters,\n     this.masterClass = (Class<? extends HMaster>)\n       conf.getClass(HConstants.MASTER_IMPL, masterClass);\n     // Start the HMasters.\n-    for (int i = 0; i < noMasters; i++) {\n+    int i;\n+    for (i = 0; i < noMasters; i++) {\n       addMaster(new Configuration(conf), i);\n     }\n-\n-    // Populate the master address host ports in the config. This is needed if a master based\n-    // registry is configured for client metadata services (HBASE-18095)\n-    List<String> masterHostPorts = new ArrayList<>();\n-    getMasters().forEach(masterThread ->\n-        masterHostPorts.add(masterThread.getMaster().getServerName().getAddress().toString()));\n-    conf.set(HConstants.MASTER_ADDRS_KEY, String.join(\",\", masterHostPorts));\n-\n+    for (int j = 0; j < noAlwaysStandByMasters; j++) {\n+      Configuration c = new Configuration(conf);\n+      c.set(HConstants.MASTER_IMPL, \"org.apache.hadoop.hbase.master.AlwaysStandByHMaster\");\n+      addMaster(c, i + j);\n+    }\n     // Start the HRegionServers.\n     this.regionServerClass =\n       (Class<? extends HRegionServer>)conf.getClass(HConstants.REGION_SERVER_IMPL,\n        regionServerClass);\n \n-    for (int i = 0; i < noRegionServers; i++) {\n-      addRegionServer(new Configuration(conf), i);\n+    for (int j = 0; j < noRegionServers; j++) {\n+      addRegionServer(new Configuration(conf), j);\n     }\n   }\n \n+  /**\n+   * Populates the master address host ports in the config. This is needed if a master based\n+   * registry is configured for client metadata services (HBASE-18095)\n+   */\n+  private void refreshMasterAddrsConfig() {\n+    List<String> masterHostPorts = new ArrayList<>();\n+    getMasters().forEach(masterThread ->\n+        masterHostPorts.add(masterThread.getMaster().getServerName().getAddress().toString()));\n+    conf.set(HConstants.MASTER_ADDRS_KEY, String.join(\",\", masterHostPorts));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4NDI0OA==", "bodyText": "Ah I rewrote this multiple times to get it working and in that process called it from multiple places, hence separated it out into a method. Doesn't make sense anymore like you pointed out. Moved it to the new place instead.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369984248", "createdAt": "2020-01-23T08:31:34Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "diffHunk": "@@ -170,27 +171,36 @@ public LocalHBaseCluster(final Configuration conf, final int noMasters,\n     this.masterClass = (Class<? extends HMaster>)\n       conf.getClass(HConstants.MASTER_IMPL, masterClass);\n     // Start the HMasters.\n-    for (int i = 0; i < noMasters; i++) {\n+    int i;\n+    for (i = 0; i < noMasters; i++) {\n       addMaster(new Configuration(conf), i);\n     }\n-\n-    // Populate the master address host ports in the config. This is needed if a master based\n-    // registry is configured for client metadata services (HBASE-18095)\n-    List<String> masterHostPorts = new ArrayList<>();\n-    getMasters().forEach(masterThread ->\n-        masterHostPorts.add(masterThread.getMaster().getServerName().getAddress().toString()));\n-    conf.set(HConstants.MASTER_ADDRS_KEY, String.join(\",\", masterHostPorts));\n-\n+    for (int j = 0; j < noAlwaysStandByMasters; j++) {\n+      Configuration c = new Configuration(conf);\n+      c.set(HConstants.MASTER_IMPL, \"org.apache.hadoop.hbase.master.AlwaysStandByHMaster\");\n+      addMaster(c, i + j);\n+    }\n     // Start the HRegionServers.\n     this.regionServerClass =\n       (Class<? extends HRegionServer>)conf.getClass(HConstants.REGION_SERVER_IMPL,\n        regionServerClass);\n \n-    for (int i = 0; i < noRegionServers; i++) {\n-      addRegionServer(new Configuration(conf), i);\n+    for (int j = 0; j < noRegionServers; j++) {\n+      addRegionServer(new Configuration(conf), j);\n     }\n   }\n \n+  /**\n+   * Populates the master address host ports in the config. This is needed if a master based\n+   * registry is configured for client metadata services (HBASE-18095)\n+   */\n+  private void refreshMasterAddrsConfig() {\n+    List<String> masterHostPorts = new ArrayList<>();\n+    getMasters().forEach(masterThread ->\n+        masterHostPorts.add(masterThread.getMaster().getServerName().getAddress().toString()));\n+    conf.set(HConstants.MASTER_ADDRS_KEY, String.join(\",\", masterHostPorts));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkzOTk4OA=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjUyMjY0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTo0MjoyMVrOFgzYDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODozNDoxMFrOFg2HIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MDQ5NA==", "bodyText": "Is this not possible when Master Registry?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369940494", "createdAt": "2020-01-23T05:42:21Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,17 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. RegionServers can continue be up independent of\n+    //   masters' availability.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4NTMxNA==", "bodyText": "Region servers abort if the connection doesn't work for any reason. With master registry, if the master is down the registry methods throw connection refused and that can bringdown the entire set of region servers at the same time.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369985314", "createdAt": "2020-01-23T08:34:10Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,17 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. RegionServers can continue be up independent of\n+    //   masters' availability.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MDQ5NA=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjUyMzQ5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTo0MzowMlrOFgzYiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo0NzowMFrOFg2bPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MDYxNw==", "bodyText": "I don't understand this one.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369940617", "createdAt": "2020-01-23T05:43:02Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,17 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. RegionServers can continue be up independent of\n+    //   masters' availability.\n+    // - Configuration management for region servers (cluster internal) is much simpler when adding\n+    //   new masters etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk4NjA2Mg==", "bodyText": "So if one is adding new masters to the cluster (or taking down an existing master), they will have to update the region servers config by doing a rolling restart (unless there is some dynamic way of updating it). This operational overhead is avoided since the regionservers figure it out from ZK. They just have to update it on the clients.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369986062", "createdAt": "2020-01-23T08:36:06Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,17 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. RegionServers can continue be up independent of\n+    //   masters' availability.\n+    // - Configuration management for region servers (cluster internal) is much simpler when adding\n+    //   new masters etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MDYxNw=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MDQ2MQ==", "bodyText": "(clarified it in the comment, let me know if it is still unclear)", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369990461", "createdAt": "2020-01-23T08:47:00Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -789,8 +789,17 @@ public boolean registerService(com.google.protobuf.Service instance) {\n     return true;\n   }\n \n-  private Configuration unsetClientZookeeperQuorum() {\n+  private Configuration cleanupConfiguration() {\n     Configuration conf = this.conf;\n+    // We use ZKConnectionRegistry for all the internal communication, primarily for these reasons:\n+    // - Decouples RS and master life cycles. RegionServers can continue be up independent of\n+    //   masters' availability.\n+    // - Configuration management for region servers (cluster internal) is much simpler when adding\n+    //   new masters etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MDYxNw=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjUyNzM3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTo0NjowNFrOFgzaww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo1MDowOVrOFhsfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MTE4Nw==", "bodyText": "Good comment", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369941187", "createdAt": "2020-01-23T05:46:04Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -3058,6 +3061,26 @@ private void initConnection() throws IOException {\n     this.asyncConnection = ClusterConnectionFactory.createAsyncClusterConnection(conf, null, user);\n   }\n \n+  /**\n+   * Resets the connections so that the next time getConnection() is called, a new connection is\n+   * created. This is needed in cases where the entire cluster / all the masters are shutdown and\n+   * the connection is not valid anymore.\n+   * TODO: There should be a more coherent way of doing this. Unfortunately the way tests are\n+   *   written, not all start() stop() calls go through this class. Most tests directly operate on\n+   *   the underlying mini/local hbase cluster. That makes it difficult for this wrapper class to\n+   *   maintain the connection state automatically. Cleaning this is a much bigger refactor.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NjMyOQ==", "bodyText": "Cleaning this is a much bigger refactor.\n\nUgh.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370876329", "createdAt": "2020-01-24T22:50:09Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/HBaseTestingUtility.java", "diffHunk": "@@ -3058,6 +3061,26 @@ private void initConnection() throws IOException {\n     this.asyncConnection = ClusterConnectionFactory.createAsyncClusterConnection(conf, null, user);\n   }\n \n+  /**\n+   * Resets the connections so that the next time getConnection() is called, a new connection is\n+   * created. This is needed in cases where the entire cluster / all the masters are shutdown and\n+   * the connection is not valid anymore.\n+   * TODO: There should be a more coherent way of doing this. Unfortunately the way tests are\n+   *   written, not all start() stop() calls go through this class. Most tests directly operate on\n+   *   the underlying mini/local hbase cluster. That makes it difficult for this wrapper class to\n+   *   maintain the connection state automatically. Cleaning this is a much bigger refactor.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MTE4Nw=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjUzOTY2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/StartMiniClusterOption.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTo1NjowN1rOFgziXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo0ODoyNFrOFg2dtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MzEzMg==", "bodyText": "Oh, so a hack to get around some test scenarios. Ok. Good.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369943132", "createdAt": "2020-01-23T05:56:07Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/StartMiniClusterOption.java", "diffHunk": "@@ -46,6 +46,14 @@\n    * can find the active/primary master with {@link MiniHBaseCluster#getMaster()}.\n    */\n   private final int numMasters;\n+\n+  /**\n+   * Number of masters that always remain standby. These set of masters never transition to active\n+   * even if an active master does not exist. These are needed for testing scenarios where there are\n+   * no active masters in the cluster but the cluster connection (backed by master registry) should\n+   * still work.\n+   */\n+  private final int numAlwaysStandByMasters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MzQwOA==", "bodyText": "Would be good to keep them 'hidden' as much as we can.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369943408", "createdAt": "2020-01-23T05:57:28Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/StartMiniClusterOption.java", "diffHunk": "@@ -46,6 +46,14 @@\n    * can find the active/primary master with {@link MiniHBaseCluster#getMaster()}.\n    */\n   private final int numMasters;\n+\n+  /**\n+   * Number of masters that always remain standby. These set of masters never transition to active\n+   * even if an active master does not exist. These are needed for testing scenarios where there are\n+   * no active masters in the cluster but the cluster connection (backed by master registry) should\n+   * still work.\n+   */\n+  private final int numAlwaysStandByMasters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MzEzMg=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MTA5Mg==", "bodyText": "Agree, it is a test-only construct. Didn't leak into the server module. Anything else should be done?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369991092", "createdAt": "2020-01-23T08:48:24Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/StartMiniClusterOption.java", "diffHunk": "@@ -46,6 +46,14 @@\n    * can find the active/primary master with {@link MiniHBaseCluster#getMaster()}.\n    */\n   private final int numMasters;\n+\n+  /**\n+   * Number of masters that always remain standby. These set of masters never transition to active\n+   * even if an active master does not exist. These are needed for testing scenarios where there are\n+   * no active masters in the cluster but the cluster connection (backed by master registry) should\n+   * still work.\n+   */\n+  private final int numAlwaysStandByMasters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MzEzMg=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU0Mzk5OnYy", "diffSide": "LEFT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncAdminMasterSwitch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTo1OTozMlrOFgzk9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo0OToxMFrOFg2fGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0Mzc5Nw==", "bodyText": "No need of a new master to complete test?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369943797", "createdAt": "2020-01-23T05:59:32Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncAdminMasterSwitch.java", "diffHunk": "@@ -48,8 +48,6 @@ public void testSwitch() throws IOException, InterruptedException {\n     assertEquals(TEST_UTIL.getHBaseCluster().getRegionServerThreads().size(),\n       admin.getClusterMetrics(EnumSet.of(ClusterMetrics.Option.SERVERS_NAME)).join()\n         .getServersName().size());\n-    // stop the old master, and start a new one\n-    TEST_UTIL.getMiniHBaseCluster().startMaster();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MTQ0OQ==", "bodyText": "This extends TestAsyncAdminBase (file above) that builds the cluster. Fixed it there.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369991449", "createdAt": "2020-01-23T08:49:10Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestAsyncAdminMasterSwitch.java", "diffHunk": "@@ -48,8 +48,6 @@ public void testSwitch() throws IOException, InterruptedException {\n     assertEquals(TEST_UTIL.getHBaseCluster().getRegionServerThreads().size(),\n       admin.getClusterMetrics(EnumSet.of(ClusterMetrics.Option.SERVERS_NAME)).join()\n         .getServersName().size());\n-    // stop the old master, and start a new one\n-    TEST_UTIL.getMiniHBaseCluster().startMaster();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0Mzc5Nw=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU0NjY2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithCoprocessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowMTozNFrOFgzmkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMjo0NDoyMVrOFhxo7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDIwOQ==", "bodyText": "What you thinking? No tests of old registry in Master?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369944209", "createdAt": "2020-01-23T06:01:34Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithCoprocessor.java", "diffHunk": "@@ -43,7 +43,7 @@\n   @Parameterized.Parameters\n   public static Collection parameters() {\n     return Arrays.asList(new Object[][] {\n-        { ZKConnectionRegistry.class, 1}\n+        { MasterRegistry.class, 1}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5MjY5MA==", "bodyText": "This test is a bit special, I had to parameterize it in the first place to override parent test params. The parent test (TestFromClientSide) has a lot of coverage for ZKConnectionRegistry and I felt this is redundant (tests the same thing) so removed. You prefer to retain it?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369992690", "createdAt": "2020-01-23T08:51:56Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithCoprocessor.java", "diffHunk": "@@ -43,7 +43,7 @@\n   @Parameterized.Parameters\n   public static Collection parameters() {\n     return Arrays.asList(new Object[][] {\n-        { ZKConnectionRegistry.class, 1}\n+        { MasterRegistry.class, 1}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDIwOQ=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3OTE3OQ==", "bodyText": "I'd prefer to retain both. Let's follow on with some work to establish code coverage and see about pruning the tests via that angle.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370879179", "createdAt": "2020-01-24T23:01:31Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithCoprocessor.java", "diffHunk": "@@ -43,7 +43,7 @@\n   @Parameterized.Parameters\n   public static Collection parameters() {\n     return Arrays.asList(new Object[][] {\n-        { ZKConnectionRegistry.class, 1}\n+        { MasterRegistry.class, 1}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDIwOQ=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDYyMg==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370960622", "createdAt": "2020-01-25T22:44:21Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestFromClientSideWithCoprocessor.java", "diffHunk": "@@ -43,7 +43,7 @@\n   @Parameterized.Parameters\n   public static Collection parameters() {\n     return Arrays.asList(new Object[][] {\n-        { ZKConnectionRegistry.class, 1}\n+        { MasterRegistry.class, 1}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDIwOQ=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU0NzkyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaRegionLocationCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowMjoyNFrOFgznVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo1NzowNlrOFg2snA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDQwNA==", "bodyText": "We pass in a TEST_UTIL AND a Configuration? Do we always get the configuration from TEST_UTIL? If so, just pass TEST_UTIL? Otherwise, ignore this comment.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369944404", "createdAt": "2020-01-23T06:02:24Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaRegionLocationCache.java", "diffHunk": "@@ -60,7 +60,7 @@ public static void setUp() throws Exception {\n     TEST_UTIL.getConfiguration().setInt(HConstants.META_REPLICAS_NUM, 3);\n     TEST_UTIL.startMiniCluster(3);\n     REGISTRY = ConnectionRegistryFactory.getRegistry(TEST_UTIL.getConfiguration());\n-    RegionReplicaTestHelper.waitUntilAllMetaReplicasHavingRegionLocation(\n+    RegionReplicaTestHelper.waitUntilAllMetaReplicasAreReady(TEST_UTIL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NDkwOA==", "bodyText": "good catch, you are right. For some reason I thought there are some callers that pass some custom config but I was wrong.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369994908", "createdAt": "2020-01-23T08:57:06Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMetaRegionLocationCache.java", "diffHunk": "@@ -60,7 +60,7 @@ public static void setUp() throws Exception {\n     TEST_UTIL.getConfiguration().setInt(HConstants.META_REPLICAS_NUM, 3);\n     TEST_UTIL.startMiniCluster(3);\n     REGISTRY = ConnectionRegistryFactory.getRegistry(TEST_UTIL.getConfiguration());\n-    RegionReplicaTestHelper.waitUntilAllMetaReplicasHavingRegionLocation(\n+    RegionReplicaTestHelper.waitUntilAllMetaReplicasAreReady(TEST_UTIL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDQwNA=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU1MDk2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowNDo0NlrOFgzpLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODo1Nzo0OVrOFg2t3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDg3OQ==", "bodyText": "Is it going to be hell when no Master for clients up in the cluster?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369944879", "createdAt": "2020-01-23T06:04:46Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.hbase.Server;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.monitoring.MonitoredTask;\n+import org.apache.hadoop.hbase.util.Threads;\n+import org.apache.hadoop.hbase.zookeeper.MasterAddressTracker;\n+import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.zookeeper.KeeperException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation of ActiveMasterManager that never transitions it's master to active state. It\n+ * always remains as a stand by master. With the master registry implementation (HBASE-18095) it is\n+ * expected to have at least one active / standby master always running at any point in time since\n+ * they serve as the gateway for client connections.\n+ *\n+ * With this implementation, tests can simulate the scenario of not having an active master yet the\n+ * client connections to the cluster succeed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NTIzMQ==", "bodyText": "ya the regular RetryingRpcCaller with long stack traces :-)", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369995231", "createdAt": "2020-01-23T08:57:49Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.hbase.Server;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.monitoring.MonitoredTask;\n+import org.apache.hadoop.hbase.util.Threads;\n+import org.apache.hadoop.hbase.zookeeper.MasterAddressTracker;\n+import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.zookeeper.KeeperException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation of ActiveMasterManager that never transitions it's master to active state. It\n+ * always remains as a stand by master. With the master registry implementation (HBASE-18095) it is\n+ * expected to have at least one active / standby master always running at any point in time since\n+ * they serve as the gateway for client connections.\n+ *\n+ * With this implementation, tests can simulate the scenario of not having an active master yet the\n+ * client connections to the cluster succeed.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDg3OQ=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU1MTI3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowNTowN1rOFgzpaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowNTowN1rOFgzpaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NDkzOQ==", "bodyText": "Good.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369944939", "createdAt": "2020-01-23T06:05:07Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.hbase.Server;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.monitoring.MonitoredTask;\n+import org.apache.hadoop.hbase.util.Threads;\n+import org.apache.hadoop.hbase.zookeeper.MasterAddressTracker;\n+import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.zookeeper.KeeperException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation of ActiveMasterManager that never transitions it's master to active state. It\n+ * always remains as a stand by master. With the master registry implementation (HBASE-18095) it is\n+ * expected to have at least one active / standby master always running at any point in time since\n+ * they serve as the gateway for client connections.\n+ *\n+ * With this implementation, tests can simulate the scenario of not having an active master yet the\n+ * client connections to the cluster succeed.\n+ */\n+@InterfaceAudience.Private\n+class AlwaysStandByMasterManager extends ActiveMasterManager {\n+  private static final Logger LOG = LoggerFactory.getLogger(AlwaysStandByMasterManager.class);\n+\n+  AlwaysStandByMasterManager(ZKWatcher watcher, ServerName sn, Server master) {\n+    super(watcher, sn, master);\n+  }\n+\n+  /**\n+   * An implementation that never transitions to an active master.\n+   */\n+  boolean blockUntilBecomingActiveMaster(int checkInterval, MonitoredTask startupStatus) {\n+    while (!(master.isAborted() || master.isStopped())) {\n+      startupStatus.setStatus(\"Forever looping to stay as a standby master.\");\n+      try {\n+        activeMasterServerName = null;\n+        try {\n+          if (MasterAddressTracker.getMasterAddress(watcher) != null) {\n+            clusterHasActiveMaster.set(true);\n+          }\n+          Threads.sleepWithoutInterrupt(100);\n+        } catch (IOException e) {\n+          // pass, we will get notified when some other active master creates the znode.\n+        }\n+      } catch (KeeperException e) {\n+        master.abort(\"Received an unexpected KeeperException, aborting\", e);\n+        return false;\n+      }\n+      synchronized (this.clusterHasActiveMaster) {\n+        while (clusterHasActiveMaster.get() && !master.isStopped()) {\n+          try {\n+            clusterHasActiveMaster.wait(checkInterval);\n+          } catch (InterruptedException e) {\n+            // We expect to be interrupted when a master dies,\n+            //  will fall out if so\n+            LOG.debug(\"Interrupted waiting for master to die\", e);\n+          }\n+        }\n+        if (clusterShutDown.get()) {\n+          this.master.stop(\n+              \"Cluster went down before this master became active\");\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU1MTcyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAlwaysStandByHMaster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowNTozMVrOFgzpuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowNTozMVrOFgzpuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NTAxNg==", "bodyText": "Good", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369945016", "createdAt": "2020-01-23T06:05:31Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAlwaysStandByHMaster.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.StartMiniClusterOption;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({MediumTests.class, MasterTests.class})\n+public class TestAlwaysStandByHMaster {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestAlwaysStandByHMaster.class);\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    StartMiniClusterOption option = StartMiniClusterOption.builder().\n+        numAlwaysStandByMasters(1).numMasters(1).numRegionServers(1).build();\n+    TEST_UTIL.startMiniCluster(option);\n+  }\n+\n+  public static void teardown() throws Exception {\n+    TEST_UTIL.shutdownMiniCluster();\n+  }\n+\n+  /**\n+   * Tests that the AlwaysStandByHMaster does not transition to active state even if no active\n+   * master exists.\n+   */\n+  @Test  public void testAlwaysStandBy() throws Exception {\n+    // Make sure there is an active master.\n+    assertNotNull(TEST_UTIL.getMiniHBaseCluster().getMaster());\n+    assertEquals(2, TEST_UTIL.getMiniHBaseCluster().getMasterThreads().size());\n+    // Kill the only active master.\n+    TEST_UTIL.getMiniHBaseCluster().stopMaster(0).join();\n+    // Wait for 5s to make sure the always standby doesn't transition to active state.\n+    assertFalse(TEST_UTIL.getMiniHBaseCluster().waitForActiveAndReadyMaster(5000));\n+    // Add a new master.\n+    HMaster newActive = TEST_UTIL.getMiniHBaseCluster().startMaster().getMaster();\n+    assertTrue(TEST_UTIL.getMiniHBaseCluster().waitForActiveAndReadyMaster(5000));\n+    // Newly added master should be the active.\n+    assertEquals(newActive.getServerName(),\n+        TEST_UTIL.getMiniHBaseCluster().getMaster().getServerName());\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU1MjYyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowNjoyMlrOFgzqQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTowMDowOFrOFg2xxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NTE1NQ==", "bodyText": "Good\nBTW, does test suite run faster now?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369945155", "createdAt": "2020-01-23T06:06:22Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -133,11 +134,19 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     util.startMiniZKCluster();\n     util.createRootDir();\n     final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        new LocalHBaseCluster(conf, NUM_MASTERS, 0, NUM_RS, HMaster.class,\n             MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n     final int MASTER_INDEX = 0;\n     final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n     master.start();\n+    // Switching to master registry exposed a race in the master bootstrap that can result in a\n+    // lost shutdown command (HBASE-8422). The race is essentially because the server manager in\n+    // HMaster is not initialized by the time shutdown() RPC (below) is made to\n+    // the master. The reason it was not happening earlier is because the connection creation with\n+    // ZK registry is so slow that by then the server manager is init'ed thus masking the problem.\n+    // For now, I'm putting a wait() here to workaround the issue, I think the fix for it is a\n+    // little delicate and needs to be done separately.\n+    Waiter.waitFor(conf, 5000, () -> master.getMaster().getServerManager() != null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5NjIyOA==", "bodyText": "BTW, does test suite run faster now?\n\nSo the initial impression is that the individual tests seem to run a little faster (in my local runs, anywhere a connection is involved), but I don't have actual numbers from the Jenkins jobs since the PR jenkins run doesn't always run the full suite. Once this patch makes it to the branch, we will some numbers to compare.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369996228", "createdAt": "2020-01-23T09:00:08Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -133,11 +134,19 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     util.startMiniZKCluster();\n     util.createRootDir();\n     final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        new LocalHBaseCluster(conf, NUM_MASTERS, 0, NUM_RS, HMaster.class,\n             MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n     final int MASTER_INDEX = 0;\n     final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n     master.start();\n+    // Switching to master registry exposed a race in the master bootstrap that can result in a\n+    // lost shutdown command (HBASE-8422). The race is essentially because the server manager in\n+    // HMaster is not initialized by the time shutdown() RPC (below) is made to\n+    // the master. The reason it was not happening earlier is because the connection creation with\n+    // ZK registry is so slow that by then the server manager is init'ed thus masking the problem.\n+    // For now, I'm putting a wait() here to workaround the issue, I think the fix for it is a\n+    // little delicate and needs to be done separately.\n+    Waiter.waitFor(conf, 5000, () -> master.getMaster().getServerManager() != null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NTE1NQ=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjU1NDIxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRSKilledWhenInitializing.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNjowNzo1NVrOFgzrYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTowNjo0OVrOFg28jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NTQ0MQ==", "bodyText": "We seem to do '0' as AlwaysMasters. Should we do override that defaults zero? Just to keep the AlwaysMasters out of view when not needed.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369945441", "createdAt": "2020-01-23T06:07:55Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRSKilledWhenInitializing.java", "diffHunk": "@@ -96,7 +96,7 @@ public void testRSTerminationAfterRegisteringToMasterBeforeCreatingEphemeralNode\n     TEST_UTIL.startMiniZKCluster();\n     TEST_UTIL.createRootDir();\n     final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        new LocalHBaseCluster(conf, NUM_MASTERS, 0, NUM_RS, HMaster.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk5ODk5MA==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r369998990", "createdAt": "2020-01-23T09:06:49Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestRSKilledWhenInitializing.java", "diffHunk": "@@ -96,7 +96,7 @@ public void testRSTerminationAfterRegisteringToMasterBeforeCreatingEphemeralNode\n     TEST_UTIL.startMiniZKCluster();\n     TEST_UTIL.createRootDir();\n     final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        new LocalHBaseCluster(conf, NUM_MASTERS, 0, NUM_RS, HMaster.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0NTQ0MQ=="}, "originalCommit": {"oid": "f15e106acde16ba7984fbd4577e04da2e07bd0c8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjQ4ODM1OnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjozMjo1N1rOFhsNag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMzo0Nzo0N1rOFhxy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MTY1OA==", "bodyText": "Is there a check-then-fail that can be done to assert that the method invocation has significance? Maybe log a warning saying zk configs are being applied to a master registry?", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370871658", "createdAt": "2020-01-24T22:32:57Z", "author": {"login": "ndimiduk"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MzE4OQ==", "bodyText": "Added the logging. Don't think it should be warn though.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370963189", "createdAt": "2020-01-25T23:47:47Z", "author": {"login": "bharathv"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HBaseConfiguration.java", "diffHunk": "@@ -268,14 +268,19 @@ public static Configuration createClusterConf(Configuration baseConf, String clu\n    * used to communicate with distant clusters\n    * @param conf configuration object to configure\n    * @param key string that contains the 3 required configuratins\n-   * @throws IOException\n    */\n   private static void applyClusterKeyToConf(Configuration conf, String key)\n-      throws IOException{\n+      throws IOException {\n     ZKConfig.ZKClusterKey zkClusterKey = ZKConfig.transformClusterKey(key);\n     conf.set(HConstants.ZOOKEEPER_QUORUM, zkClusterKey.getQuorumString());\n     conf.setInt(HConstants.ZOOKEEPER_CLIENT_PORT, zkClusterKey.getClientPort());\n     conf.set(HConstants.ZOOKEEPER_ZNODE_PARENT, zkClusterKey.getZnodeParent());\n+    // Without the right registry, the above configs are useless. Also, we don't use setClass()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3MTY1OA=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjUwNjIzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo0MzoxMlrOFhsYcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMjo0MzowOVrOFhxorg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDQ4MA==", "bodyText": "Ugh. The final constructor args are Configuration, int, int, int, Class, Class. It's time for a builder with named arguments.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370874480", "createdAt": "2020-01-24T22:43:12Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "diffHunk": "@@ -134,9 +140,9 @@ public LocalHBaseCluster(final Configuration conf, final int noMasters,\n    */\n   @SuppressWarnings(\"unchecked\")\n   public LocalHBaseCluster(final Configuration conf, final int noMasters,\n-    final int noRegionServers, final Class<? extends HMaster> masterClass,\n-    final Class<? extends HRegionServer> regionServerClass)\n-  throws IOException {\n+      final int noAlwaysStandByMasters, final int noRegionServers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDU1OA==", "bodyText": "Ya, too long and confusing now.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370960558", "createdAt": "2020-01-25T22:43:09Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/LocalHBaseCluster.java", "diffHunk": "@@ -134,9 +140,9 @@ public LocalHBaseCluster(final Configuration conf, final int noMasters,\n    */\n   @SuppressWarnings(\"unchecked\")\n   public LocalHBaseCluster(final Configuration conf, final int noMasters,\n-    final int noRegionServers, final Class<? extends HMaster> masterClass,\n-    final Class<? extends HRegionServer> regionServerClass)\n-  throws IOException {\n+      final int noAlwaysStandByMasters, final int noRegionServers,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3NDQ4MA=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjUzMDk3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/RegionReplicaTestHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMjo1ODoyMFrOFhsn2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMjo0MjoxN1rOFhxogw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3ODQyNQ==", "bodyText": "I know this is not your code, but, is that last argument int regionReplication necessary? Seems like there's already configuration available via the other arguments.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370878425", "createdAt": "2020-01-24T22:58:20Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/RegionReplicaTestHelper.java", "diffHunk": "@@ -43,24 +42,30 @@ private RegionReplicaTestHelper() {\n   }\n \n   // waits for all replicas to have region location\n-  static void waitUntilAllMetaReplicasHavingRegionLocation(Configuration conf,\n-      ConnectionRegistry registry, int regionReplication) throws IOException {\n+  static void waitUntilAllMetaReplicasAreReady(HBaseTestingUtility util,\n+      ConnectionRegistry registry, int regionReplication) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDUxNQ==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370960515", "createdAt": "2020-01-25T22:42:17Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/RegionReplicaTestHelper.java", "diffHunk": "@@ -43,24 +42,30 @@ private RegionReplicaTestHelper() {\n   }\n \n   // waits for all replicas to have region location\n-  static void waitUntilAllMetaReplicasHavingRegionLocation(Configuration conf,\n-      ConnectionRegistry registry, int regionReplication) throws IOException {\n+  static void waitUntilAllMetaReplicasAreReady(HBaseTestingUtility util,\n+      ConnectionRegistry registry, int regionReplication) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3ODQyNQ=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjUzOTcxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzowMzo1MVrOFhstIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDo0MzoxM1rOFht0yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3OTc3OA==", "bodyText": "nit: could be static inner class of AlwaysStandByHMaster.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370879778", "createdAt": "2020-01-24T23:03:51Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.hbase.Server;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.monitoring.MonitoredTask;\n+import org.apache.hadoop.hbase.util.Threads;\n+import org.apache.hadoop.hbase.zookeeper.MasterAddressTracker;\n+import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.zookeeper.KeeperException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation of ActiveMasterManager that never transitions it's master to active state. It\n+ * always remains as a stand by master. With the master registry implementation (HBASE-18095) it is\n+ * expected to have at least one active / standby master always running at any point in time since\n+ * they serve as the gateway for client connections.\n+ *\n+ * With this implementation, tests can simulate the scenario of not having an active master yet the\n+ * client connections to the cluster succeed.\n+ */\n+@InterfaceAudience.Private\n+class AlwaysStandByMasterManager extends ActiveMasterManager {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODEyMA==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370898120", "createdAt": "2020-01-25T00:43:13Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/AlwaysStandByMasterManager.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.hbase.Server;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.monitoring.MonitoredTask;\n+import org.apache.hadoop.hbase.util.Threads;\n+import org.apache.hadoop.hbase.zookeeper.MasterAddressTracker;\n+import org.apache.hadoop.hbase.zookeeper.ZKWatcher;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.zookeeper.KeeperException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * An implementation of ActiveMasterManager that never transitions it's master to active state. It\n+ * always remains as a stand by master. With the master registry implementation (HBASE-18095) it is\n+ * expected to have at least one active / standby master always running at any point in time since\n+ * they serve as the gateway for client connections.\n+ *\n+ * With this implementation, tests can simulate the scenario of not having an active master yet the\n+ * client connections to the cluster succeed.\n+ */\n+@InterfaceAudience.Private\n+class AlwaysStandByMasterManager extends ActiveMasterManager {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg3OTc3OA=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjU0NDg5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAlwaysStandByHMaster.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzowNzozN1rOFhswbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMzowMTo1NlrOFhxrgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MDYyMA==", "bodyText": "Why no MiniClusterRule? \ud83d\ude22", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370880620", "createdAt": "2020-01-24T23:07:37Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAlwaysStandByHMaster.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.StartMiniClusterOption;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({MediumTests.class, MasterTests.class})\n+public class TestAlwaysStandByHMaster {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestAlwaysStandByHMaster.class);\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MTI4Mg==", "bodyText": "Done.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370961282", "createdAt": "2020-01-25T23:01:56Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestAlwaysStandByHMaster.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master;\n+\n+import static junit.framework.TestCase.assertTrue;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.StartMiniClusterOption;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({MediumTests.class, MasterTests.class})\n+public class TestAlwaysStandByHMaster {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestAlwaysStandByHMaster.class);\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MDYyMA=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjU0ODgzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxMDowMlrOFhsy1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQyMjo0ODozM1rOFhxpig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MTIzNg==", "bodyText": "What's the fix you have in mind? Reading through your comment, I thought of a test-only coprocessor that installs a latch that can be waited upon by the test.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370881236", "createdAt": "2020-01-24T23:10:02Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -132,12 +133,19 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     util.startMiniDFSCluster(3);\n     util.startMiniZKCluster();\n     util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+    final LocalHBaseCluster cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS,\n+        HMaster.class, MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n     final int MASTER_INDEX = 0;\n     final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n     master.start();\n+    // Switching to master registry exposed a race in the master bootstrap that can result in a\n+    // lost shutdown command (HBASE-8422). The race is essentially because the server manager in\n+    // HMaster is not initialized by the time shutdown() RPC (below) is made to\n+    // the master. The reason it was not happening earlier is because the connection creation with\n+    // ZK registry is so slow that by then the server manager is init'ed thus masking the problem.\n+    // For now, I'm putting a wait() here to workaround the issue, I think the fix for it is a\n+    // little delicate and needs to be done separately.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk2MDc3OA==", "bodyText": "I was thinking about fixing the actual problem rather than the test. If a shutdown happens before starting the server manager, the latter takes note of that during init and shuts down automatically (or something along the lines). My fix is in the master bootstrap.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370960778", "createdAt": "2020-01-25T22:48:33Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -132,12 +133,19 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     util.startMiniDFSCluster(3);\n     util.startMiniZKCluster();\n     util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+    final LocalHBaseCluster cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS,\n+        HMaster.class, MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n     final int MASTER_INDEX = 0;\n     final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n     master.start();\n+    // Switching to master registry exposed a race in the master bootstrap that can result in a\n+    // lost shutdown command (HBASE-8422). The race is essentially because the server manager in\n+    // HMaster is not initialized by the time shutdown() RPC (below) is made to\n+    // the master. The reason it was not happening earlier is because the connection creation with\n+    // ZK registry is so slow that by then the server manager is init'ed thus masking the problem.\n+    // For now, I'm putting a wait() here to workaround the issue, I think the fix for it is a\n+    // little delicate and needs to be done separately.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MTIzNg=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjU1MDM2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestRegionMoveAndAbandon.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxMTowMVrOFhszwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDo0NDo1M1rOFht1mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MTQ3Mg==", "bodyText": "It's a pity this method must be called manually. Seems easy to forget.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370881472", "createdAt": "2020-01-24T23:11:01Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestRegionMoveAndAbandon.java", "diffHunk": "@@ -116,6 +116,7 @@ public void test() throws Exception {\n     // Start up everything again\n     LOG.info(\"Starting cluster\");\n     UTIL.getMiniHBaseCluster().startMaster();\n+    UTIL.invalidateConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5ODMyOQ==", "bodyText": "ya, its bad. All the tests operate on the cluster object directly and changes its state. There is no way to keep track of restarts.", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370898329", "createdAt": "2020-01-25T00:44:53Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestRegionMoveAndAbandon.java", "diffHunk": "@@ -116,6 +116,7 @@ public void test() throws Exception {\n     // Start up everything again\n     LOG.info(\"Starting cluster\");\n     UTIL.getMiniHBaseCluster().startMaster();\n+    UTIL.invalidateConnection();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MTQ3Mg=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjU1MzU2OnYy", "diffSide": "LEFT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/SecureTestCluster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxMjozOFrOFhs1lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxMjozOFrOFhs1lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MTk0MA==", "bodyText": "\ud83e\udd26\u200d\u2640", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370881940", "createdAt": "2020-01-24T23:12:38Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/security/token/SecureTestCluster.java", "diffHunk": "@@ -80,8 +80,8 @@ public static void setUp() throws Exception {\n   public static void tearDown() throws Exception {\n     if (CLUSTER != null) {\n       CLUSTER.shutdown();\n+      CLUSTER.join();\n     }\n-    CLUSTER.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MjU2MDgxOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionRegistryFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQyMzoxNzo1MVrOFhs6JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwMDozNjowOVrOFhtwzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MzEwOA==", "bodyText": "It all pivots around this one little change :)", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370883108", "createdAt": "2020-01-24T23:17:51Z", "author": {"login": "ndimiduk"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionRegistryFactory.java", "diffHunk": "@@ -36,7 +36,7 @@ private ConnectionRegistryFactory() {\n    */\n   static ConnectionRegistry getRegistry(Configuration conf) {\n     Class<? extends ConnectionRegistry> clazz = conf.getClass(\n-        CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY, ZKConnectionRegistry.class,\n+        CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY, MasterRegistry.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg5NzEwMg==", "bodyText": ":D", "url": "https://github.com/apache/hbase/pull/1039#discussion_r370897102", "createdAt": "2020-01-25T00:36:09Z", "author": {"login": "bharathv"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionRegistryFactory.java", "diffHunk": "@@ -36,7 +36,7 @@ private ConnectionRegistryFactory() {\n    */\n   static ConnectionRegistry getRegistry(Configuration conf) {\n     Class<? extends ConnectionRegistry> clazz = conf.getClass(\n-        CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY, ZKConnectionRegistry.class,\n+        CLIENT_CONNECTION_REGISTRY_IMPL_CONF_KEY, MasterRegistry.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDg4MzEwOA=="}, "originalCommit": {"oid": "0b5fdaab427b135c2cd875ccda67be1908463dfc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2139, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}