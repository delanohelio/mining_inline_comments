{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTk0OTk3", "number": 1141, "title": "HBASE-23808 [Flakey Test] TestMasterShutdown#testMasterShutdownBefore\u2026", "bodyText": "\u2026StartingAnyRegionServer\nBe a bit more dogmatic about terminating the minicluster between test\nmethods. I doubt this resolves the root issue, but we'll see.", "createdAt": "2020-02-07T01:44:19Z", "url": "https://github.com/apache/hbase/pull/1141", "merged": true, "mergeCommit": {"oid": "533302addefc3a1eb2a494148a86892b5d92bb76"}, "closed": true, "closedAt": "2020-02-13T22:02:16Z", "author": {"login": "ndimiduk"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcB1TCRABqjMwMTYwOTY3NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcD_t3HAH2gAyMzcyMTk0OTk3OjI2OTU4OGJhMzQxYjM2MDNhMmVkN2VlNmE5ODEwM2Y0MTkxNzkwMTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f117569b6641b949d11947a9759e5660cec1afeb", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/f117569b6641b949d11947a9759e5660cec1afeb", "committedDate": "2020-02-07T01:42:34Z", "message": "HBASE-23808 [Flakey Test] TestMasterShutdown#testMasterShutdownBeforeStartingAnyRegionServer\n\nBe a bit more dogmatic about terminating the minicluster between test\nmethods. I doubt this resolves the root issue, but we'll see."}, "afterCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/c184bf695e50f2260b7e59c17eb4930646ffde5f", "committedDate": "2020-02-07T01:45:37Z", "message": "HBASE-23808 [Flakey Test] TestMasterShutdown#testMasterShutdownBeforeStartingAnyRegionServer\n\nBe a bit more dogmatic about terminating the minicluster between test\nmethods. I doubt this resolves the root issue, but we'll see."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0OTEwNTg3", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-354910587", "createdAt": "2020-02-07T03:16:40Z", "commit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzoxNjo0MVrOFmxOAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMzozMDowN1rOFmxZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5NjYwOA==", "bodyText": "nit: Can probably be simplified to masterThreads != null && masterThreads.size() >=3...\nbecause the second check automatically means isNotEmpty().", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376196608", "createdAt": "2020-02-07T03:16:41Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      StartMiniClusterOption option = StartMiniClusterOption.builder()\n+        .numMasters(NUM_MASTERS)\n+        .numRegionServers(NUM_RS)\n+        .numDataNodes(NUM_RS)\n+        .build();\n+      final MiniHBaseCluster cluster = htu.startMiniCluster(option);\n+\n+      // wait for all master thread to spawn and start their run loop.\n+      final long thirtySeconds = TimeUnit.SECONDS.toMillis(30);\n+      final long oneSecond = TimeUnit.SECONDS.toMillis(1);\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond, () -> {\n+        final List<MasterThread> masterThreads = cluster.getMasterThreads();\n+        return CollectionUtils.isNotEmpty(masterThreads)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTI5OA==", "bodyText": "nit: You could just use shutdownMiniCluster(). It appears null safe on underlying minicluster", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376199298", "createdAt": "2020-02-07T03:29:17Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();\n+          } catch (Exception e) {\n+            LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+          }\n+          LOG.info(\"After call to shutdown master\");\n+          finalCluster.waitOnMaster(MASTER_INDEX);\n         }\n-        LOG.info(\"After call to shutdown master\");\n-        cluster.waitOnMaster(MASTER_INDEX);\n+      };\n+      shutdownThread.start();\n+      LOG.info(\"Called master join on \" + master.getName());\n+      master.join();\n+      shutdownThread.join();\n+\n+      List<MasterThread> masterThreads = cluster.getMasters();\n+      // make sure all the masters properly shutdown\n+      assertEquals(0, masterThreads.size());\n+    } finally {\n+      if (cluster != null) {\n+        cluster.shutdown();\n+      }\n+      if (htu != null) {\n+        htu.shutdownMiniZKCluster();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE5OTQzOA==", "bodyText": "This is the place that the master registry exposed a race ..(shutdown goes missing..). Rebase will not be clean now :'(", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376199438", "createdAt": "2020-02-07T03:30:07Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -128,41 +142,50 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n     conf.setInt(ServerManager.WAIT_ON_REGIONSERVERS_MINTOSTART, 1);\n \n     // Start the cluster\n-    final HBaseTestingUtility util = new HBaseTestingUtility(conf);\n-    util.startMiniDFSCluster(3);\n-    util.startMiniZKCluster();\n-    util.createRootDir();\n-    final LocalHBaseCluster cluster =\n-        new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n-            MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n-    final int MASTER_INDEX = 0;\n-    final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n-    master.start();\n-    LOG.info(\"Called master start on \" + master.getName());\n-    Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n-      @Override\n-      public void run() {\n-        LOG.info(\"Before call to shutdown master\");\n-        try (Connection connection = createConnection(util); Admin admin = connection.getAdmin()) {\n-          admin.shutdown();\n-        } catch (Exception e) {\n-          LOG.info(\"Error while calling Admin.shutdown, which is expected: \" + e.getMessage());\n+    LocalHBaseCluster cluster = null;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      htu.startMiniDFSCluster(3);\n+      htu.startMiniZKCluster();\n+      htu.createRootDir();\n+      cluster = new LocalHBaseCluster(conf, NUM_MASTERS, NUM_RS, HMaster.class,\n+        MiniHBaseCluster.MiniHBaseClusterRegionServer.class);\n+      final int MASTER_INDEX = 0;\n+      final MasterThread master = cluster.getMasters().get(MASTER_INDEX);\n+      master.start();\n+      LOG.info(\"Called master start on \" + master.getName());\n+      final LocalHBaseCluster finalCluster = cluster;\n+      Thread shutdownThread = new Thread(\"Shutdown-Thread\") {\n+        @Override\n+        public void run() {\n+          LOG.info(\"Before call to shutdown master\");\n+          try (Connection connection = createConnection(htu); Admin admin = connection.getAdmin()) {\n+            admin.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 180}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDYwMjU0", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-355460254", "createdAt": "2020-02-07T21:54:40Z", "commit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo1NDo0MFrOFnLaFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo1NDo0MFrOFnLaFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyNTY4NA==", "bodyText": "For sure? Maybe medium when you run it standalone but under load, maybe it goes over the 50s upper-bound (only saying because did a pass on these recently).", "url": "https://github.com/apache/hbase/pull/1141#discussion_r376625684", "createdAt": "2020-02-07T21:54:40Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -33,23 +34,34 @@\n import org.apache.hadoop.hbase.client.Admin;\n import org.apache.hadoop.hbase.client.Connection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n-import org.apache.hadoop.hbase.testclassification.LargeTests;\n import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.MasterThread;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.hbase.thirdparty.org.apache.commons.collections4.CollectionUtils;\n \n-@Category({MasterTests.class, LargeTests.class})\n+@Category({MasterTests.class, MediumTests.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTQyOTQz", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-356142943", "createdAt": "2020-02-10T17:56:34Z", "commit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1NjozNFrOFnv1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNzo1NjozNFrOFnv1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMjQzOA==", "bodyText": "You don't want to get a new conf to go w/ the new htu?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377222438", "createdAt": "2020-02-10T17:56:34Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 83}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/c184bf695e50f2260b7e59c17eb4930646ffde5f", "committedDate": "2020-02-07T01:45:37Z", "message": "HBASE-23808 [Flakey Test] TestMasterShutdown#testMasterShutdownBeforeStartingAnyRegionServer\n\nBe a bit more dogmatic about terminating the minicluster between test\nmethods. I doubt this resolves the root issue, but we'll see."}, "afterCommit": {"oid": "c699e2a09ec5b0c345cb892a55236276ae607275", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/c699e2a09ec5b0c345cb892a55236276ae607275", "committedDate": "2020-02-11T17:14:19Z", "message": "PR Feedback and further test development"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDM1ODE3", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-357035817", "createdAt": "2020-02-11T22:13:21Z", "commit": {"oid": "c699e2a09ec5b0c345cb892a55236276ae607275"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTI2MzYx", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-357126361", "createdAt": "2020-02-12T00:59:13Z", "commit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1OToxNFrOFoek2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMDo1OToxNFrOFoek2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk4ODMxNA==", "bodyText": "Bah. need to delete this commented code.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377988314", "createdAt": "2020-02-12T00:59:14Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,103 +82,172 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      StartMiniClusterOption option = StartMiniClusterOption.builder()\n+        .numMasters(NUM_MASTERS)\n+        .numRegionServers(NUM_RS)\n+        .numDataNodes(NUM_RS)\n+        .build();\n+      final MiniHBaseCluster cluster = htu.startMiniCluster(option);\n+\n+      // wait for all master thread to spawn and start their run loop.\n+      final long thirtySeconds = TimeUnit.SECONDS.toMillis(30);\n+      final long oneSecond = TimeUnit.SECONDS.toMillis(1);\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond, () -> {\n+        final List<MasterThread> masterThreads = cluster.getMasterThreads();\n+        return masterThreads != null\n+          && masterThreads.size() >= 3\n+          && masterThreads.stream().allMatch(Thread::isAlive);\n+      }));\n+\n+      // find the active master\n+      final HMaster active = cluster.getMaster();\n+      assertNotNull(active);\n+\n+      // make sure the other two are backup masters\n+      ClusterMetrics status = active.getClusterMetrics();\n+      assertEquals(2, status.getBackupMasterNames().size());\n+\n+      // tell the active master to shutdown the cluster\n+      active.shutdown();\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveMasterThreads())));\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveRegionServerThreads())));\n+    } finally {\n+      if (htu != null) {\n+        htu.shutdownMiniCluster();\n+        htu = null;\n       }\n     }\n-    assertNotNull(active);\n-    // make sure the other two are backup masters\n-    ClusterMetrics status = active.getClusterMetrics();\n-    assertEquals(2, status.getBackupMasterNames().size());\n-\n-    // tell the active master to shutdown the cluster\n-    active.shutdown();\n-\n-    for (int i = NUM_MASTERS - 1; i >= 0 ;--i) {\n-      cluster.waitOnMaster(i);\n-    }\n-    // make sure all the masters properly shutdown\n-    assertEquals(0, masterThreads.size());\n-\n-    htu.shutdownMiniCluster();\n   }\n \n-  private Connection createConnection(HBaseTestingUtility util) throws InterruptedException {\n-    // the cluster may have not been initialized yet which means we can not get the cluster id thus\n-    // an exception will be thrown. So here we need to retry.\n-    for (;;) {\n-      try {\n-        return ConnectionFactory.createConnection(util.getConfiguration());\n-      } catch (Exception e) {\n-        Thread.sleep(10);\n+  /**\n+   * This test appears to be an intentional race between a thread that issues a shutdown RPC to the\n+   * master, while the master is concurrently realizing it cannot initialize because there are no\n+   * region servers available to it. The expected behavior is that master initialization is\n+   * interruptable via said shutdown RPC.\n+   */\n+  @Test\n+  public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n+    LocalHBaseCluster hbaseCluster = null;\n+    try {\n+      htu =  new HBaseTestingUtility(\n+        createMasterShutdownBeforeStartingAnyRegionServerConfiguration());\n+\n+      // configure a cluster with\n+      final StartMiniClusterOption options = StartMiniClusterOption.builder()\n+        .numDataNodes(1)\n+        .numMasters(1)\n+        .numRegionServers(0)\n+        .masterClass(HMaster.class)\n+        .rsClass(MiniHBaseCluster.MiniHBaseClusterRegionServer.class)\n+        .createRootDir(true)\n+        .build();\n+\n+      // Can't simply `htu.startMiniCluster(options)` because that method waits for the master to\n+      // start completely. However, this test's premise is that a partially started master should\n+      // still respond to a shutdown RPC. So instead, we manage each component lifecycle\n+      // independently.\n+      // I think it's not worth refactoring HTU's helper methods just for this class.\n+      htu.startMiniDFSCluster(options.getNumDataNodes());\n+      htu.startMiniZKCluster(options.getNumZkServers());\n+      htu.createRootDir();\n+      hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n+        options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n+      final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422). The race is essentially because the server\n+        // manager in HMaster is not initialized by the time shutdown() RPC (below) is made to the\n+        // master. The suspected reason as to why it was uncommon before HBASE-18095 is because the\n+        // connection creation with ZK registry is so slow that by then the server manager is\n+        // usually init'ed in time for the RPC to be made. For now, adding an explicit wait() in\n+        // the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+//        assertNotEquals(\"timeout waiting for server manager to become available.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTMyODc4", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-357132878", "createdAt": "2020-02-12T01:20:20Z", "commit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToyMDoyMFrOFoe5ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMToyMDoyMFrOFoe5ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzYxMA==", "bodyText": "I think another reasonable alternative here is to reject the RPC back to the client with some form of DoNotRetryIOException and a message about cannot shutdown from an inactive master.\nWhat do you think?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r377993610", "createdAt": "2020-02-12T01:20:20Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -2804,9 +2804,15 @@ public MemoryBoundedLogMessageBuffer getRegionServerFatalLogBuffer() {\n    * Master runs a coordinated stop of all RegionServers and then itself.\n    */\n   public void shutdown() throws IOException {\n+    if (!isInitialized()) {\n+      LOG.info(\"Shutdown requested but we're not the active master. Proceeding as a stop.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTgyMDMy", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-357182032", "createdAt": "2020-02-12T04:26:10Z", "commit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDoyNjoxMFrOFohbuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwNDozMzo1MVrOFohhEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTEyOQ==", "bodyText": "Yeah, this stuff is tricky and there be dragons if you disturb the current order.\nThe standbys don't go down currently?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378035129", "createdAt": "2020-02-12T04:26:10Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/HMaster.java", "diffHunk": "@@ -2804,9 +2804,15 @@ public MemoryBoundedLogMessageBuffer getRegionServerFatalLogBuffer() {\n    * Master runs a coordinated stop of all RegionServers and then itself.\n    */\n   public void shutdown() throws IOException {\n+    if (!isInitialized()) {\n+      LOG.info(\"Shutdown requested but we're not the active master. Proceeding as a stop.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MzYxMA=="}, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNTQyMg==", "bodyText": "We can skip an @after ? i.e. should the shutdown of cluster be in @after if not there already.", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378035422", "createdAt": "2020-02-12T04:27:48Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -30,26 +34,38 @@\n import org.apache.hadoop.hbase.LocalHBaseCluster;\n import org.apache.hadoop.hbase.MiniHBaseCluster;\n import org.apache.hadoop.hbase.StartMiniClusterOption;\n-import org.apache.hadoop.hbase.client.Admin;\n-import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.Waiter;\n+import org.apache.hadoop.hbase.client.AsyncConnection;\n import org.apache.hadoop.hbase.client.ConnectionFactory;\n import org.apache.hadoop.hbase.testclassification.LargeTests;\n import org.apache.hadoop.hbase.testclassification.MasterTests;\n import org.apache.hadoop.hbase.util.JVMClusterUtil.MasterThread;\n+import org.apache.hadoop.hbase.zookeeper.ReadOnlyZKClient;\n+import org.junit.Before;\n import org.junit.ClassRule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.hbase.thirdparty.org.apache.commons.collections4.CollectionUtils;\n \n @Category({MasterTests.class, LargeTests.class})\n public class TestMasterShutdown {\n+  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n \n   @ClassRule\n   public static final HBaseClassTestRule CLASS_RULE =\n       HBaseClassTestRule.forClass(TestMasterShutdown.class);\n \n-  private static final Logger LOG = LoggerFactory.getLogger(TestMasterShutdown.class);\n+  private HBaseTestingUtility htu;\n+\n+  @Before\n+  public void shutdownCluster() throws IOException {\n+    if (htu != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjI3OA==", "bodyText": "On hbase.ipc.client.failed.servers.expiry being aggressive... remove the config?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378036278", "createdAt": "2020-02-12T04:32:35Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,43 +78,45 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIyMjQzOA=="}, "originalCommit": {"oid": "c184bf695e50f2260b7e59c17eb4930646ffde5f"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAzNjQ5Ng==", "bodyText": "Somehow we are skipping this? Odd. Move to an @after?", "url": "https://github.com/apache/hbase/pull/1141#discussion_r378036496", "createdAt": "2020-02-12T04:33:51Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -66,103 +82,172 @@ public void testMasterShutdown() throws Exception {\n     Configuration conf = HBaseConfiguration.create();\n \n     // Start the cluster\n-    HBaseTestingUtility htu = new HBaseTestingUtility(conf);\n-    StartMiniClusterOption option = StartMiniClusterOption.builder()\n-        .numMasters(NUM_MASTERS).numRegionServers(NUM_RS).numDataNodes(NUM_RS).build();\n-    htu.startMiniCluster(option);\n-    MiniHBaseCluster cluster = htu.getHBaseCluster();\n-\n-    // get all the master threads\n-    List<MasterThread> masterThreads = cluster.getMasterThreads();\n-\n-    // wait for each to come online\n-    for (MasterThread mt : masterThreads) {\n-      assertTrue(mt.isAlive());\n-    }\n-\n-    // find the active master\n-    HMaster active = null;\n-    for (int i = 0; i < masterThreads.size(); i++) {\n-      if (masterThreads.get(i).getMaster().isActiveMaster()) {\n-        active = masterThreads.get(i).getMaster();\n-        break;\n+    try {\n+      htu = new HBaseTestingUtility(conf);\n+      StartMiniClusterOption option = StartMiniClusterOption.builder()\n+        .numMasters(NUM_MASTERS)\n+        .numRegionServers(NUM_RS)\n+        .numDataNodes(NUM_RS)\n+        .build();\n+      final MiniHBaseCluster cluster = htu.startMiniCluster(option);\n+\n+      // wait for all master thread to spawn and start their run loop.\n+      final long thirtySeconds = TimeUnit.SECONDS.toMillis(30);\n+      final long oneSecond = TimeUnit.SECONDS.toMillis(1);\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond, () -> {\n+        final List<MasterThread> masterThreads = cluster.getMasterThreads();\n+        return masterThreads != null\n+          && masterThreads.size() >= 3\n+          && masterThreads.stream().allMatch(Thread::isAlive);\n+      }));\n+\n+      // find the active master\n+      final HMaster active = cluster.getMaster();\n+      assertNotNull(active);\n+\n+      // make sure the other two are backup masters\n+      ClusterMetrics status = active.getClusterMetrics();\n+      assertEquals(2, status.getBackupMasterNames().size());\n+\n+      // tell the active master to shutdown the cluster\n+      active.shutdown();\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveMasterThreads())));\n+      assertNotEquals(-1, htu.waitFor(thirtySeconds, oneSecond,\n+        () -> CollectionUtils.isEmpty(cluster.getLiveRegionServerThreads())));\n+    } finally {\n+      if (htu != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzg1MjQ3", "url": "https://github.com/apache/hbase/pull/1141#pullrequestreview-357785247", "createdAt": "2020-02-12T21:03:40Z", "commit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac802f2be3075c92454375b3e2e1da1d90e2de6", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/4ac802f2be3075c92454375b3e2e1da1d90e2de6", "committedDate": "2020-02-13T16:18:54Z", "message": "HBASE-23808 [Flakey Test] TestMasterShutdown#testMasterShutdownBeforeStartingAnyRegionServer\n\nBe a bit more dogmatic about terminating the minicluster between test\nmethods. I doubt this resolves the root issue, but we'll see."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1e248ac2dba6773c89bd3cec269e41a630a92d5", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/f1e248ac2dba6773c89bd3cec269e41a630a92d5", "committedDate": "2020-02-13T16:18:54Z", "message": "PR Feedback and further test development"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9845e5e468ccb32f5b39195ec966ab14ed02186b", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/9845e5e468ccb32f5b39195ec966ab14ed02186b", "committedDate": "2020-02-13T16:18:54Z", "message": "When it's not the active master, accept shutdown RPC as a stop instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0758e04bbe16083c5bab185ecf52c4947d6dc7e0", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/0758e04bbe16083c5bab185ecf52c4947d6dc7e0", "committedDate": "2020-02-13T18:43:55Z", "message": "PR Feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11e1cd3ab1c6916ae0878f7309a670ef306fe2a2", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/11e1cd3ab1c6916ae0878f7309a670ef306fe2a2", "committedDate": "2020-02-12T00:46:07Z", "message": "When it's not the active master, accept shutdown RPC as a stop instead"}, "afterCommit": {"oid": "0758e04bbe16083c5bab185ecf52c4947d6dc7e0", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/0758e04bbe16083c5bab185ecf52c4947d6dc7e0", "committedDate": "2020-02-13T18:43:55Z", "message": "PR Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "269588ba341b3603a2ed7ee6a98103f419179010", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/269588ba341b3603a2ed7ee6a98103f419179010", "committedDate": "2020-02-13T19:01:58Z", "message": "Actually waitFor master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2755, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}