{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxOTIwMTU0", "number": 2364, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyODo0N1rOEhXaWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjowN1rOEhXyAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIyMDQwOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyODo0N1rOHOpH5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjozNzoyNFrOHO0hWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTg3OA==", "bodyText": "Only used in ReplicationSourceManager so define these there?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485115878", "createdAt": "2020-09-08T18:28:47Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -979,6 +979,8 @@\n   /*\n    * cluster replication constants.\n    */\n+  public static final String REPLICATION_OFFLOAD_ENABLE_KEY = \"hbase.replication.offload.enabled\";\n+  public static final boolean REPLICATION_OFFLOAD_ENABLE_DEFAULT = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMjYxOA==", "bodyText": "In the next patches, this may be used in other place, too.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485302618", "createdAt": "2020-09-09T02:37:24Z", "author": {"login": "infraio"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -979,6 +979,8 @@\n   /*\n    * cluster replication constants.\n    */\n+  public static final String REPLICATION_OFFLOAD_ENABLE_KEY = \"hbase.replication.offload.enabled\";\n+  public static final boolean REPLICATION_OFFLOAD_ENABLE_DEFAULT = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTg3OA=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIyMzM0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyOTozMFrOHOpJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODoyOTozMFrOHOpJpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjMyNA==", "bodyText": "License", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485116324", "createdAt": "2020-09-08T18:29:30Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIyODM2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMTowMlrOHOpM1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMTowMlrOHOpM1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzE0MQ==", "bodyText": "Can it just be ReplicationSoruceController? Drop the 'Overall'?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485117141", "createdAt": "2020-09-08T18:31:02Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIzMTcwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMjowMVrOHOpOxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjozOToyM1rOHO0jSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzYzOQ==", "bodyText": "Is this a 'size' rather than a 'limit'? It is count of how many bytes are currently accumulated in replication source memory?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485117639", "createdAt": "2020-09-08T18:32:01Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzg5Mg==", "bodyText": "Maybe the comment is just in the wrong place.. should be on the next data member?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485117892", "createdAt": "2020-09-08T18:32:30Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzYzOQ=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMzExNA==", "bodyText": "This was copied from the ReplicationSourceManager. And it is the total limit, not the currently size.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485303114", "createdAt": "2020-09-09T02:39:23Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzYzOQ=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIzNTI1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMzowNlrOHOpQ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjozOTozMVrOHO0jbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExODE4OQ==", "bodyText": "What sort of 'global' metrics? This is metrics for all replication sources?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485118189", "createdAt": "2020-09-08T18:33:06Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();\n+\n+  AtomicLong getTotalBufferUsed();\n+\n+  MetricsReplicationGlobalSourceSource getGlobalMetrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMzE0OQ==", "bodyText": "Yes.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485303149", "createdAt": "2020-09-09T02:39:31Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();\n+\n+  AtomicLong getTotalBufferUsed();\n+\n+  MetricsReplicationGlobalSourceSource getGlobalMetrics();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExODE4OQ=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDIzOTUxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNDowNVrOHOpTTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNDowNVrOHOpTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExODc5Ng==", "bodyText": "Remove '@param src'. s/Called/Call/", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485118796", "createdAt": "2020-09-08T18:34:05Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/ReplicationSourceOverallController.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.apache.hadoop.hbase.replication;\n+\n+import org.apache.hadoop.hbase.replication.regionserver.MetricsReplicationGlobalSourceSource;\n+import org.apache.hadoop.hbase.replication.regionserver.RecoveredReplicationSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Used to control all replication sources inside one RegionServer or ReplicationServer.\n+ * Used by {@link ReplicationSource} or {@link RecoveredReplicationSource}.\n+ */\n+@InterfaceAudience.Private\n+public interface ReplicationSourceOverallController {\n+\n+  /**\n+   * Returns the maximum size in bytes of edits held in memory which are pending replication\n+   * across all sources inside this RegionServer or ReplicationServer.\n+   */\n+  long getTotalBufferLimit();\n+\n+  AtomicLong getTotalBufferUsed();\n+\n+  MetricsReplicationGlobalSourceSource getGlobalMetrics();\n+\n+  /**\n+   * Called this when the recovered replication source replicated all WALs.\n+   * @param src", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI0Mjk0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/RecoveredReplicationSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNTowNFrOHOpVVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwMjo0MToyMVrOHO0lTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTMxNg==", "bodyText": "There is only one ReplicationSourceManager instance in a RS? If so, can it carry the Controller rather than as here where it is another param on this init method?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485119316", "createdAt": "2020-09-08T18:35:04Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/RecoveredReplicationSource.java", "diffHunk": "@@ -45,18 +46,15 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(RecoveredReplicationSource.class);\n \n-  private Path walDir;\n-\n   private String actualPeerId;\n \n   @Override\n-  public void init(Configuration conf, FileSystem fs, Path walDir, ReplicationSourceManager manager,\n-    ReplicationQueueStorage queueStorage, ReplicationPeer replicationPeer, Server server,\n-    String peerClusterZnode, UUID clusterId, WALFileLengthProvider walFileLengthProvider,\n-    MetricsSource metrics) throws IOException {\n-    super.init(conf, fs, walDir, manager, queueStorage, replicationPeer, server, peerClusterZnode,\n-      clusterId, walFileLengthProvider, metrics);\n-    this.walDir = walDir;\n+  public void init(Configuration conf, FileSystem fs, Path walDir,\n+    ReplicationSourceOverallController overallController, ReplicationQueueStorage queueStorage,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTMwMzYzMA==", "bodyText": "Yes. Only one ReplicationSourceManager and only one Controller, too. Only pass Controller to ReplicationSource. Then decouple ReplicationSourceManager and ReplicationSource.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485303630", "createdAt": "2020-09-09T02:41:21Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/RecoveredReplicationSource.java", "diffHunk": "@@ -45,18 +46,15 @@\n \n   private static final Logger LOG = LoggerFactory.getLogger(RecoveredReplicationSource.class);\n \n-  private Path walDir;\n-\n   private String actualPeerId;\n \n   @Override\n-  public void init(Configuration conf, FileSystem fs, Path walDir, ReplicationSourceManager manager,\n-    ReplicationQueueStorage queueStorage, ReplicationPeer replicationPeer, Server server,\n-    String peerClusterZnode, UUID clusterId, WALFileLengthProvider walFileLengthProvider,\n-    MetricsSource metrics) throws IOException {\n-    super.init(conf, fs, walDir, manager, queueStorage, replicationPeer, server, peerClusterZnode,\n-      clusterId, walFileLengthProvider, metrics);\n-    this.walDir = walDir;\n+  public void init(Configuration conf, FileSystem fs, Path walDir,\n+    ReplicationSourceOverallController overallController, ReplicationQueueStorage queueStorage,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExOTMxNg=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI1MDIzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNzoxNlrOHOpZvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozNzoxNlrOHOpZvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMDQ0NQ==", "bodyText": "Yeah, if this implements Controller, you have to pass it in to ReplicationSource #Init as a distinct arg?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485120445", "createdAt": "2020-09-08T18:37:16Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -92,7 +93,8 @@\n  * </ul>\n  */\n @InterfaceAudience.Private\n-public class ReplicationSourceManager implements ReplicationListener {\n+public class ReplicationSourceManager implements ReplicationListener,\n+  ReplicationSourceOverallController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI1NDMzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozODozOVrOHOpcSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTo0NjoyMFrOHT7HOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTA5OA==", "bodyText": "I should go back to the design but we can't just have the offload be a ReplicationSource implementation? Because you need to span all ReplicationSources?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485121098", "createdAt": "2020-09-08T18:38:39Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -186,12 +188,11 @@ public ReplicationSourceManager(ReplicationQueueStorage queueStorage,\n     this.latestPaths = new HashMap<>();\n     this.replicationForBulkLoadDataEnabled = conf.getBoolean(\n       HConstants.REPLICATION_BULKLOAD_ENABLE_KEY, HConstants.REPLICATION_BULKLOAD_ENABLE_DEFAULT);\n-    this.sleepForRetries = this.conf.getLong(\"replication.source.sync.sleepforretries\", 1000);\n-    this.maxRetriesMultiplier =\n-      this.conf.getInt(\"replication.source.sync.maxretriesmultiplier\", 60);\n     this.totalBufferLimit = conf.getLong(HConstants.REPLICATION_SOURCE_TOTAL_BUFFER_KEY,\n         HConstants.REPLICATION_SOURCE_TOTAL_BUFFER_DFAULT);\n     this.globalMetrics = globalMetrics;\n+    this.replicationOffload = conf.getBoolean(HConstants.REPLICATION_OFFLOAD_ENABLE_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1MzQ5Ng==", "bodyText": "In the design, the RegionServer not need to start all ReplicationSources. It only need to store its WAL path to the ReplicationQueueStorage. And the ReplicationServer will fetch the WAL paths and start all ReplicationSources.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r490653496", "createdAt": "2020-09-18T01:46:20Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -186,12 +188,11 @@ public ReplicationSourceManager(ReplicationQueueStorage queueStorage,\n     this.latestPaths = new HashMap<>();\n     this.replicationForBulkLoadDataEnabled = conf.getBoolean(\n       HConstants.REPLICATION_BULKLOAD_ENABLE_KEY, HConstants.REPLICATION_BULKLOAD_ENABLE_DEFAULT);\n-    this.sleepForRetries = this.conf.getLong(\"replication.source.sync.sleepforretries\", 1000);\n-    this.maxRetriesMultiplier =\n-      this.conf.getInt(\"replication.source.sync.maxretriesmultiplier\", 60);\n     this.totalBufferLimit = conf.getLong(HConstants.REPLICATION_SOURCE_TOTAL_BUFFER_KEY,\n         HConstants.REPLICATION_SOURCE_TOTAL_BUFFER_DFAULT);\n     this.globalMetrics = globalMetrics;\n+    this.replicationOffload = conf.getBoolean(HConstants.REPLICATION_OFFLOAD_ENABLE_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMTA5OA=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2ODUyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Mjo0M1rOHOpkkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NTowNVrOHOpppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzIxNw==", "bodyText": "Funny, I want it to stay public in my current work (meta region replicas). Can move it back in my patch.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485123217", "createdAt": "2020-09-08T18:42:43Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -244,7 +286,7 @@ private void adoptAbandonedQueues() {\n    * </ol>\n    * @param peerId the id of replication peer\n    */\n-  public void addPeer(String peerId) throws IOException {\n+  void addPeer(String peerId) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDUxNg==", "bodyText": "I want to call it on Region open. Let me see if I can move where I make the call.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485124516", "createdAt": "2020-09-08T18:45:05Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -244,7 +286,7 @@ private void adoptAbandonedQueues() {\n    * </ol>\n    * @param peerId the id of replication peer\n    */\n-  public void addPeer(String peerId) throws IOException {\n+  void addPeer(String peerId) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzIxNw=="}, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI2OTA2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Mjo1MVrOHOpk4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0Mjo1MVrOHOpk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMzI5OQ==", "bodyText": "Ditto", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485123299", "createdAt": "2020-09-08T18:42:51Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -268,7 +310,7 @@ public void addPeer(String peerId) throws IOException {\n    * </ol>\n    * @param peerId the id of the replication peer\n    */\n-  public void removePeer(String peerId) {\n+  void removePeer(String peerId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI3ODU1OnYy", "diffSide": "LEFT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NToyOVrOHOpqiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NToyOVrOHOpqiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNDc0Nw==", "bodyText": "I see, you are just moving existing methods.", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485124747", "createdAt": "2020-09-08T18:45:29Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -849,19 +874,6 @@ int getSizeOfLatestPath() {\n     }\n   }\n \n-  @VisibleForTesting\n-  public AtomicLong getTotalBufferUsed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 263}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDI4MDk4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjowN1rOHOpr_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0NjowN1rOHOpr_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyNTExNw==", "bodyText": "Yeah, if the Controller is in the ReplicationSourceManager, then the 'overall' will be redundant?", "url": "https://github.com/apache/hbase/pull/2364#discussion_r485125117", "createdAt": "2020-09-08T18:46:07Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReader.java", "diffHunk": "@@ -267,10 +267,11 @@ public Path getCurrentPath() {\n   //returns false if we've already exceeded the global quota\n   private boolean checkQuota() {\n     // try not to go over total quota\n-    if (source.manager.getTotalBufferUsed().get() > source.manager.getTotalBufferLimit()) {\n+    if (source.overallController.getTotalBufferUsed().get() > source.overallController", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "860c55f3df65056d4b847ea31e488860d3a10ca7"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2603, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}