{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NzYyNzgz", "number": 2337, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMTo0NVrOEe3KhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzo0MzoyNFrOEe6O3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzk2NTQ4OnYy", "diffSide": "LEFT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFlusher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTozMTo0NVrOHKyI3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDo0NDozOFrOHK5pbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2OTI3Ng==", "bodyText": "Any reason for doing this?", "url": "https://github.com/apache/hbase/pull/2337#discussion_r481069276", "createdAt": "2020-09-01T11:31:45Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFlusher.java", "diffHunk": "@@ -73,20 +73,20 @@ protected void finalizeWriter(StoreFileWriter writer, long cacheFlushSeqNum,\n   /**\n    * Creates the scanner for flushing snapshot. Also calls coprocessors.\n    * @param snapshotScanners\n-   * @param smallestReadPoint\n    * @return The scanner; null if coprocessor is canceling the flush.\n    */\n   protected final InternalScanner createScanner(List<KeyValueScanner> snapshotScanners,\n-      long smallestReadPoint, FlushLifeCycleTracker tracker) throws IOException {\n+    FlushLifeCycleTracker tracker) throws IOException {\n     ScanInfo scanInfo;\n     if (store.getCoprocessorHost() != null) {\n       scanInfo = store.getCoprocessorHost().preFlushScannerOpen(store, tracker);\n     } else {\n       scanInfo = store.getScanInfo();\n     }\n+    final long smallestReadPoint = store.getSmallestReadPoint();\n     InternalScanner scanner = new StoreScanner(store, scanInfo, snapshotScanners,\n         ScanType.COMPACT_RETAIN_DELETES, smallestReadPoint, HConstants.OLDEST_TIMESTAMP);\n-    assert scanner != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef190636370bd82dd7415e703c7b86ebbcf530"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEzNzcxNQ==", "bodyText": "As far as I can see,\u00a0scanner can't be null here as it's a local variance, see below\nscanner = new StoreScanner(store, scanInfo, snapshotScanners,\n        ScanType.COMPACT_RETAIN_DELETES, smallestReadPoint, HConstants.OLDEST_TIMESTAMP);\n\nso i remove the assert logic here", "url": "https://github.com/apache/hbase/pull/2337#discussion_r481137715", "createdAt": "2020-09-01T13:29:30Z", "author": {"login": "yuqi1129"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFlusher.java", "diffHunk": "@@ -73,20 +73,20 @@ protected void finalizeWriter(StoreFileWriter writer, long cacheFlushSeqNum,\n   /**\n    * Creates the scanner for flushing snapshot. Also calls coprocessors.\n    * @param snapshotScanners\n-   * @param smallestReadPoint\n    * @return The scanner; null if coprocessor is canceling the flush.\n    */\n   protected final InternalScanner createScanner(List<KeyValueScanner> snapshotScanners,\n-      long smallestReadPoint, FlushLifeCycleTracker tracker) throws IOException {\n+    FlushLifeCycleTracker tracker) throws IOException {\n     ScanInfo scanInfo;\n     if (store.getCoprocessorHost() != null) {\n       scanInfo = store.getCoprocessorHost().preFlushScannerOpen(store, tracker);\n     } else {\n       scanInfo = store.getScanInfo();\n     }\n+    final long smallestReadPoint = store.getSmallestReadPoint();\n     InternalScanner scanner = new StoreScanner(store, scanInfo, snapshotScanners,\n         ScanType.COMPACT_RETAIN_DELETES, smallestReadPoint, HConstants.OLDEST_TIMESTAMP);\n-    assert scanner != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2OTI3Ng=="}, "originalCommit": {"oid": "bcef190636370bd82dd7415e703c7b86ebbcf530"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE5MjMwMg==", "bodyText": "Perfect.", "url": "https://github.com/apache/hbase/pull/2337#discussion_r481192302", "createdAt": "2020-09-01T14:44:38Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFlusher.java", "diffHunk": "@@ -73,20 +73,20 @@ protected void finalizeWriter(StoreFileWriter writer, long cacheFlushSeqNum,\n   /**\n    * Creates the scanner for flushing snapshot. Also calls coprocessors.\n    * @param snapshotScanners\n-   * @param smallestReadPoint\n    * @return The scanner; null if coprocessor is canceling the flush.\n    */\n   protected final InternalScanner createScanner(List<KeyValueScanner> snapshotScanners,\n-      long smallestReadPoint, FlushLifeCycleTracker tracker) throws IOException {\n+    FlushLifeCycleTracker tracker) throws IOException {\n     ScanInfo scanInfo;\n     if (store.getCoprocessorHost() != null) {\n       scanInfo = store.getCoprocessorHost().preFlushScannerOpen(store, tracker);\n     } else {\n       scanInfo = store.getScanInfo();\n     }\n+    final long smallestReadPoint = store.getSmallestReadPoint();\n     InternalScanner scanner = new StoreScanner(store, scanInfo, snapshotScanners,\n         ScanType.COMPACT_RETAIN_DELETES, smallestReadPoint, HConstants.OLDEST_TIMESTAMP);\n-    assert scanner != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA2OTI3Ng=="}, "originalCommit": {"oid": "bcef190636370bd82dd7415e703c7b86ebbcf530"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODQ2ODEyOnYy", "diffSide": "LEFT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFlusher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzo0MzoyNVrOHK26pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDoyNDo0N1rOHK4udQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NzU1Ng==", "bodyText": "This remove the smallestReadPoint parameter from createScanner method, too? Change the issue title to talk about this?", "url": "https://github.com/apache/hbase/pull/2337#discussion_r481147556", "createdAt": "2020-09-01T13:43:25Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFlusher.java", "diffHunk": "@@ -73,20 +73,20 @@ protected void finalizeWriter(StoreFileWriter writer, long cacheFlushSeqNum,\n   /**\n    * Creates the scanner for flushing snapshot. Also calls coprocessors.\n    * @param snapshotScanners\n-   * @param smallestReadPoint\n    * @return The scanner; null if coprocessor is canceling the flush.\n    */\n   protected final InternalScanner createScanner(List<KeyValueScanner> snapshotScanners,\n-      long smallestReadPoint, FlushLifeCycleTracker tracker) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcef190636370bd82dd7415e703c7b86ebbcf530"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE3NzIwNQ==", "bodyText": "OK, thanks a lot~", "url": "https://github.com/apache/hbase/pull/2337#discussion_r481177205", "createdAt": "2020-09-01T14:24:47Z", "author": {"login": "yuqi1129"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreFlusher.java", "diffHunk": "@@ -73,20 +73,20 @@ protected void finalizeWriter(StoreFileWriter writer, long cacheFlushSeqNum,\n   /**\n    * Creates the scanner for flushing snapshot. Also calls coprocessors.\n    * @param snapshotScanners\n-   * @param smallestReadPoint\n    * @return The scanner; null if coprocessor is canceling the flush.\n    */\n   protected final InternalScanner createScanner(List<KeyValueScanner> snapshotScanners,\n-      long smallestReadPoint, FlushLifeCycleTracker tracker) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTE0NzU1Ng=="}, "originalCommit": {"oid": "bcef190636370bd82dd7415e703c7b86ebbcf530"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2591, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}