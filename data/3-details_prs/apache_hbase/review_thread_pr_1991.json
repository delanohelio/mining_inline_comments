{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwOTgxODcw", "number": 1991, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMToyNDo0OFrOEJZeNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxNToyNzo1MlrOELY5uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjg5OTcyOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/CheckAndMutateResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMToyNDo0OFrOGp5flw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTozOTowM1rOGp5jCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Njc3NQ==", "bodyText": "For IA.Public, we do not use the IS annotation since it should always be Stable.", "url": "https://github.com/apache/hbase/pull/1991#discussion_r446586775", "createdAt": "2020-06-28T01:24:48Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/CheckAndMutateResult.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.yetus.audience.InterfaceStability;\n+\n+/**\n+ * Represents a result of a CheckAndMutate operation\n+ */\n+@InterfaceAudience.Public\n+@InterfaceStability.Evolving", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713b4a3992cdef358fb07d35bb3cb2a1fd266451"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NzY1Nw==", "bodyText": "Okay. I will remove the IS annotation. Thanks.", "url": "https://github.com/apache/hbase/pull/1991#discussion_r446587657", "createdAt": "2020-06-28T01:39:03Z", "author": {"login": "brfrn169"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/CheckAndMutateResult.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.apache.yetus.audience.InterfaceStability;\n+\n+/**\n+ * Represents a result of a CheckAndMutate operation\n+ */\n+@InterfaceAudience.Public\n+@InterfaceStability.Evolving", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Njc3NQ=="}, "originalCommit": {"oid": "713b4a3992cdef358fb07d35bb3cb2a1fd266451"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjkwMTIwOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMToyNzowM1rOGp5gPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTo1MjowM1rOGp5mJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Njk0MQ==", "bodyText": "We have already make use of generic type so why here we still need to cast?", "url": "https://github.com/apache/hbase/pull/1991#discussion_r446586941", "createdAt": "2020-06-28T01:27:03Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "diffHunk": "@@ -349,7 +349,7 @@ private void preCheck() {\n           loc, stub, mutation,\n           (rn, rm) -> RequestConverter.buildMutateRequest(rn, row, family, qualifier, op, value,\n             null, timeRange, rm),\n-          resp -> resp.getExists()))\n+          resp -> ((CheckAndMutateResult) resp).isSuccess()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713b4a3992cdef358fb07d35bb3cb2a1fd266451"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4ODQ1Mw==", "bodyText": "I will modify it to make use of generic type. Thanks.", "url": "https://github.com/apache/hbase/pull/1991#discussion_r446588453", "createdAt": "2020-06-28T01:52:03Z", "author": {"login": "brfrn169"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "diffHunk": "@@ -349,7 +349,7 @@ private void preCheck() {\n           loc, stub, mutation,\n           (rn, rm) -> RequestConverter.buildMutateRequest(rn, row, family, qualifier, op, value,\n             null, timeRange, rm),\n-          resp -> resp.getExists()))\n+          resp -> ((CheckAndMutateResult) resp).isSuccess()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Njk0MQ=="}, "originalCommit": {"oid": "713b4a3992cdef358fb07d35bb3cb2a1fd266451"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjkwMTc1OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMToyNzo0N1rOGp5gfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTo1NzowMFrOGp5nXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NzAwNA==", "bodyText": "Object is too generic. Please explain why we need to do this change?", "url": "https://github.com/apache/hbase/pull/1991#discussion_r446587004", "createdAt": "2020-06-28T01:27:47Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "diffHunk": "@@ -431,49 +431,49 @@ public CheckAndMutateWithFilterBuilder checkAndMutate(byte[] row, Filter filter)\n       if (mutation instanceof Put) {\n         validatePut((Put) mutation, conn.connConf.getMaxKeyValueSize());\n       }\n-      return RawAsyncTableImpl.this.<Boolean> newCaller(checkAndMutate.getRow(),\n+      return RawAsyncTableImpl.this.<CheckAndMutateResult> newCaller(checkAndMutate.getRow(),\n         mutation.getPriority(), rpcTimeoutNs)\n         .action((controller, loc, stub) -> RawAsyncTableImpl.mutate(controller,\n           loc, stub, mutation,\n           (rn, m) -> RequestConverter.buildMutateRequest(rn, checkAndMutate.getRow(),\n             checkAndMutate.getFamily(), checkAndMutate.getQualifier(),\n             checkAndMutate.getCompareOp(), checkAndMutate.getValue(), checkAndMutate.getFilter(),\n             checkAndMutate.getTimeRange(), m),\n-          (c, r) -> r.getProcessed()))\n+          (c, r) -> ResponseConverter.getCheckAndMutateResult(r)))\n         .call();\n     } else if (checkAndMutate.getAction() instanceof RowMutations) {\n       RowMutations rowMutations = (RowMutations) checkAndMutate.getAction();\n-      return RawAsyncTableImpl.this.<Boolean> newCaller(checkAndMutate.getRow(),\n+      return RawAsyncTableImpl.this.<CheckAndMutateResult> newCaller(checkAndMutate.getRow(),\n         rowMutations.getMaxPriority(), rpcTimeoutNs)\n         .action((controller, loc, stub) -> RawAsyncTableImpl.this.mutateRow(controller,\n           loc, stub, rowMutations,\n           (rn, rm) -> RequestConverter.buildMutateRequest(rn, checkAndMutate.getRow(),\n             checkAndMutate.getFamily(), checkAndMutate.getQualifier(),\n             checkAndMutate.getCompareOp(), checkAndMutate.getValue(), checkAndMutate.getFilter(),\n             checkAndMutate.getTimeRange(), rm),\n-          resp -> resp.getExists()))\n+          resp -> (CheckAndMutateResult) resp))\n         .call();\n     } else {\n-      CompletableFuture<Boolean> future = new CompletableFuture<>();\n+      CompletableFuture<CheckAndMutateResult> future = new CompletableFuture<>();\n       future.completeExceptionally(new DoNotRetryIOException(\n         \"CheckAndMutate doesn't support \" + checkAndMutate.getAction().getClass().getName()));\n       return future;\n     }\n   }\n \n   @Override\n-  public List<CompletableFuture<Boolean>> checkAndMutate(List<CheckAndMutate> checkAndMutates) {\n+  public List<CompletableFuture<CheckAndMutateResult>> checkAndMutate(\n+    List<CheckAndMutate> checkAndMutates) {\n     return batch(checkAndMutates, rpcTimeoutNs).stream()\n-      .map(f -> f.thenApply(r -> ((Result)r).getExists()))\n-      .collect(toList());\n+      .map(f -> f.thenApply(r -> (CheckAndMutateResult) r)).collect(toList());\n   }\n \n   // We need the MultiRequest when constructing the org.apache.hadoop.hbase.client.MultiResponse,\n   // so here I write a new method as I do not want to change the abstraction of call method.\n   private <RESP> CompletableFuture<RESP> mutateRow(HBaseRpcController controller,\n       HRegionLocation loc, ClientService.Interface stub, RowMutations mutation,\n       Converter<MultiRequest, byte[], RowMutations> reqConvert,\n-      Function<Result, RESP> respConverter) {\n+      Function<Object, RESP> respConverter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "713b4a3992cdef358fb07d35bb3cb2a1fd266451"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4ODc2NA==", "bodyText": "The reason why I changed Result to Object here is that this method is used by both checkAndMutate() and mutateRow() and we need to use different types each case (respectively CheckAndMutateResult and Result). However as you mentioned, we can make use of generic type here. I will modify it. Thanks.", "url": "https://github.com/apache/hbase/pull/1991#discussion_r446588764", "createdAt": "2020-06-28T01:57:00Z", "author": {"login": "brfrn169"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "diffHunk": "@@ -431,49 +431,49 @@ public CheckAndMutateWithFilterBuilder checkAndMutate(byte[] row, Filter filter)\n       if (mutation instanceof Put) {\n         validatePut((Put) mutation, conn.connConf.getMaxKeyValueSize());\n       }\n-      return RawAsyncTableImpl.this.<Boolean> newCaller(checkAndMutate.getRow(),\n+      return RawAsyncTableImpl.this.<CheckAndMutateResult> newCaller(checkAndMutate.getRow(),\n         mutation.getPriority(), rpcTimeoutNs)\n         .action((controller, loc, stub) -> RawAsyncTableImpl.mutate(controller,\n           loc, stub, mutation,\n           (rn, m) -> RequestConverter.buildMutateRequest(rn, checkAndMutate.getRow(),\n             checkAndMutate.getFamily(), checkAndMutate.getQualifier(),\n             checkAndMutate.getCompareOp(), checkAndMutate.getValue(), checkAndMutate.getFilter(),\n             checkAndMutate.getTimeRange(), m),\n-          (c, r) -> r.getProcessed()))\n+          (c, r) -> ResponseConverter.getCheckAndMutateResult(r)))\n         .call();\n     } else if (checkAndMutate.getAction() instanceof RowMutations) {\n       RowMutations rowMutations = (RowMutations) checkAndMutate.getAction();\n-      return RawAsyncTableImpl.this.<Boolean> newCaller(checkAndMutate.getRow(),\n+      return RawAsyncTableImpl.this.<CheckAndMutateResult> newCaller(checkAndMutate.getRow(),\n         rowMutations.getMaxPriority(), rpcTimeoutNs)\n         .action((controller, loc, stub) -> RawAsyncTableImpl.this.mutateRow(controller,\n           loc, stub, rowMutations,\n           (rn, rm) -> RequestConverter.buildMutateRequest(rn, checkAndMutate.getRow(),\n             checkAndMutate.getFamily(), checkAndMutate.getQualifier(),\n             checkAndMutate.getCompareOp(), checkAndMutate.getValue(), checkAndMutate.getFilter(),\n             checkAndMutate.getTimeRange(), rm),\n-          resp -> resp.getExists()))\n+          resp -> (CheckAndMutateResult) resp))\n         .call();\n     } else {\n-      CompletableFuture<Boolean> future = new CompletableFuture<>();\n+      CompletableFuture<CheckAndMutateResult> future = new CompletableFuture<>();\n       future.completeExceptionally(new DoNotRetryIOException(\n         \"CheckAndMutate doesn't support \" + checkAndMutate.getAction().getClass().getName()));\n       return future;\n     }\n   }\n \n   @Override\n-  public List<CompletableFuture<Boolean>> checkAndMutate(List<CheckAndMutate> checkAndMutates) {\n+  public List<CompletableFuture<CheckAndMutateResult>> checkAndMutate(\n+    List<CheckAndMutate> checkAndMutates) {\n     return batch(checkAndMutates, rpcTimeoutNs).stream()\n-      .map(f -> f.thenApply(r -> ((Result)r).getExists()))\n-      .collect(toList());\n+      .map(f -> f.thenApply(r -> (CheckAndMutateResult) r)).collect(toList());\n   }\n \n   // We need the MultiRequest when constructing the org.apache.hadoop.hbase.client.MultiResponse,\n   // so here I write a new method as I do not want to change the abstraction of call method.\n   private <RESP> CompletableFuture<RESP> mutateRow(HBaseRpcController controller,\n       HRegionLocation loc, ClientService.Interface stub, RowMutations mutation,\n       Converter<MultiRequest, byte[], RowMutations> reqConvert,\n-      Function<Result, RESP> respConverter) {\n+      Function<Object, RESP> respConverter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4NzAwNA=="}, "originalCommit": {"oid": "713b4a3992cdef358fb07d35bb3cb2a1fd266451"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzc2NjI5OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableOverAsyncTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxNTowNzo0M1rOGs8bUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwOTowOTozOVrOGtA6hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MDU2Mg==", "bodyText": "Better to return a List?", "url": "https://github.com/apache/hbase/pull/1991#discussion_r449780562", "createdAt": "2020-07-04T15:07:43Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableOverAsyncTable.java", "diffHunk": "@@ -300,13 +300,16 @@ public boolean thenMutate(RowMutations mutation) throws IOException {\n   }\n \n   @Override\n-  public boolean checkAndMutate(CheckAndMutate checkAndMutate) throws IOException {\n+  public CheckAndMutateResult checkAndMutate(CheckAndMutate checkAndMutate) throws IOException {\n     return FutureUtils.get(table.checkAndMutate(checkAndMutate));\n   }\n \n   @Override\n-  public boolean[] checkAndMutate(List<CheckAndMutate> checkAndMutates) throws IOException {\n-    return Booleans.toArray(FutureUtils.get(table.checkAndMutateAll(checkAndMutates)));\n+  public CheckAndMutateResult[] checkAndMutate(List<CheckAndMutate> checkAndMutates)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80cbe529cdea6bbe6c6b21e8594c31a9ff4d4b3d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1NDA4Nw==", "bodyText": "Yeah that's better. I will change it.", "url": "https://github.com/apache/hbase/pull/1991#discussion_r449854087", "createdAt": "2020-07-05T09:09:39Z", "author": {"login": "brfrn169"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/TableOverAsyncTable.java", "diffHunk": "@@ -300,13 +300,16 @@ public boolean thenMutate(RowMutations mutation) throws IOException {\n   }\n \n   @Override\n-  public boolean checkAndMutate(CheckAndMutate checkAndMutate) throws IOException {\n+  public CheckAndMutateResult checkAndMutate(CheckAndMutate checkAndMutate) throws IOException {\n     return FutureUtils.get(table.checkAndMutate(checkAndMutate));\n   }\n \n   @Override\n-  public boolean[] checkAndMutate(List<CheckAndMutate> checkAndMutates) throws IOException {\n-    return Booleans.toArray(FutureUtils.get(table.checkAndMutateAll(checkAndMutates)));\n+  public CheckAndMutateResult[] checkAndMutate(List<CheckAndMutate> checkAndMutates)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MDU2Mg=="}, "originalCommit": {"oid": "80cbe529cdea6bbe6c6b21e8594c31a9ff4d4b3d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMzc3Nzg0OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQxNToyNzo1MlrOGs8guw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwOTo1Mzo1MVrOGtQq1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MTk0Nw==", "bodyText": "OK, so the problem here is that, the result for a multi operation is an Object? And we will have two types, one is Result, for normal mutateRow, and the other is CheckAndMutateResult, for checkAndMutate?", "url": "https://github.com/apache/hbase/pull/1991#discussion_r449781947", "createdAt": "2020-07-04T15:27:52Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "diffHunk": "@@ -497,7 +497,7 @@ public void run(MultiResponse resp) {\n                     \"Failed to mutate row: \" + Bytes.toStringBinary(mutation.getRow()), ex));\n               } else {\n                 future.complete(respConverter\n-                  .apply((Result) multiResp.getResults().get(regionName).result.get(0)));\n+                  .apply((RES) multiResp.getResults().get(regionName).result.get(0)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80cbe529cdea6bbe6c6b21e8594c31a9ff4d4b3d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTg1NDQ1OQ==", "bodyText": "Yes, correct. Previously, we returned only Result type but after this fix, we will return Result (for normal mutateRow) and CheckAndMutateResult (for checkAndMutate). So I used a generic type here.", "url": "https://github.com/apache/hbase/pull/1991#discussion_r449854459", "createdAt": "2020-07-05T09:13:19Z", "author": {"login": "brfrn169"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "diffHunk": "@@ -497,7 +497,7 @@ public void run(MultiResponse resp) {\n                     \"Failed to mutate row: \" + Bytes.toStringBinary(mutation.getRow()), ex));\n               } else {\n                 future.complete(respConverter\n-                  .apply((Result) multiResp.getResults().get(regionName).result.get(0)));\n+                  .apply((RES) multiResp.getResults().get(regionName).result.get(0)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MTk0Nw=="}, "originalCommit": {"oid": "80cbe529cdea6bbe6c6b21e8594c31a9ff4d4b3d"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMjIxNQ==", "bodyText": "Is there any problem here?", "url": "https://github.com/apache/hbase/pull/1991#discussion_r450112215", "createdAt": "2020-07-06T09:53:51Z", "author": {"login": "brfrn169"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/RawAsyncTableImpl.java", "diffHunk": "@@ -497,7 +497,7 @@ public void run(MultiResponse resp) {\n                     \"Failed to mutate row: \" + Bytes.toStringBinary(mutation.getRow()), ex));\n               } else {\n                 future.complete(respConverter\n-                  .apply((Result) multiResp.getResults().get(regionName).result.get(0)));\n+                  .apply((RES) multiResp.getResults().get(regionName).result.get(0)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc4MTk0Nw=="}, "originalCommit": {"oid": "80cbe529cdea6bbe6c6b21e8594c31a9ff4d4b3d"}, "originalPosition": 99}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2879, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}