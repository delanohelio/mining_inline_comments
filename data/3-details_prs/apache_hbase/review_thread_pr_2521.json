{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDExOTEw", "number": 2521, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzo0NDo1NVrOEsPohA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzo0MzoxOVrOEs2oQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODI4OTMyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwMzo0NDo1NVrOHfc5Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMjo1OTozN1rOHgTrdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MTI1MA==", "bodyText": "This means we eat the interrupted exception at some places? Can we propagate it to the upper layer?", "url": "https://github.com/apache/hbase/pull/2521#discussion_r502741250", "createdAt": "2020-10-10T03:44:55Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -475,7 +476,7 @@ public boolean replicate(ReplicateContext replicateContext) {\n     }\n \n     List<List<Entry>> batches = createBatches(replicateContext.getEntries());\n-    while (this.isRunning() && !exec.isShutdown()) {\n+    while (this.isRunning() && !exec.isShutdown() && !Thread.currentThread().isInterrupted()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d357e8616a9428f821a04005bf3532710f4071"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0Mjg2Mw==", "bodyText": "Yes, InterruptedException catched in method sleepForRetries, but no further processing. The upper layer, you said, means ReplicationSourceShipper? We just keep the interrupted status of the current thread, ReplicationSourceShipper.isActive() can sense it.", "url": "https://github.com/apache/hbase/pull/2521#discussion_r502742863", "createdAt": "2020-10-10T04:06:47Z", "author": {"login": "ddupg"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -475,7 +476,7 @@ public boolean replicate(ReplicateContext replicateContext) {\n     }\n \n     List<List<Entry>> batches = createBatches(replicateContext.getEntries());\n-    while (this.isRunning() && !exec.isShutdown()) {\n+    while (this.isRunning() && !exec.isShutdown() && !Thread.currentThread().isInterrupted()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MTI1MA=="}, "originalCommit": {"oid": "76d357e8616a9428f821a04005bf3532710f4071"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1MzczMA==", "bodyText": "Then I think we should reset the running or shutdown flag in sleepForRetries when we get InterruptedException? Then here we know that we should quit?", "url": "https://github.com/apache/hbase/pull/2521#discussion_r502753730", "createdAt": "2020-10-10T06:27:37Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -475,7 +476,7 @@ public boolean replicate(ReplicateContext replicateContext) {\n     }\n \n     List<List<Entry>> batches = createBatches(replicateContext.getEntries());\n-    while (this.isRunning() && !exec.isShutdown()) {\n+    while (this.isRunning() && !exec.isShutdown() && !Thread.currentThread().isInterrupted()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MTI1MA=="}, "originalCommit": {"oid": "76d357e8616a9428f821a04005bf3532710f4071"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYzODkwMw==", "bodyText": "How about using ReplicationSource.isSourceActive() instead of !Thread.currentThread().isInterrupted() ? HBaseReplicationEndpoint manages lifecycle by extent AbstractService, adding a flag in HBaseInterClusterReplicationEndpoint is a bit redundant?", "url": "https://github.com/apache/hbase/pull/2521#discussion_r503638903", "createdAt": "2020-10-13T02:59:37Z", "author": {"login": "ddupg"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/HBaseInterClusterReplicationEndpoint.java", "diffHunk": "@@ -475,7 +476,7 @@ public boolean replicate(ReplicateContext replicateContext) {\n     }\n \n     List<List<Entry>> batches = createBatches(replicateContext.getEntries());\n-    while (this.isRunning() && !exec.isShutdown()) {\n+    while (this.isRunning() && !exec.isShutdown() && !Thread.currentThread().isInterrupted()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc0MTI1MA=="}, "originalCommit": {"oid": "76d357e8616a9428f821a04005bf3532710f4071"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NDY3ODQwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMzo0MzoxOVrOHgUUjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwMjoxNDozMFrOHg_pMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0OTQyMg==", "bodyText": "ReplicationSourceShipper and entryReader are thread. replicationEndpoint is not a thread and is used by ReplicationSourceShipper thread. I am +1 for this: stop firstly, then interrupt thread.", "url": "https://github.com/apache/hbase/pull/2521#discussion_r503649422", "createdAt": "2020-10-13T03:43:19Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -691,6 +691,9 @@ public void terminate(String reason, Exception cause, boolean clearMetrics,\n       }\n     }\n \n+    if (this.replicationEndpoint != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bb3ce5874edc2cdb55690a10c3e59c143094abf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg4OTQ2Mw==", "bodyText": "I think the intenion here to interrupt thread first is that, we want to make sure that, we could still do replication when shutting down the worker.\nIn general, I'm fine with this approach as in distributed system, we should have the ability to deal with this type error. But it is still a bit strange that, the above stop worker and setReaderRunning to false can not stop the work?", "url": "https://github.com/apache/hbase/pull/2521#discussion_r503889463", "createdAt": "2020-10-13T11:55:29Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -691,6 +691,9 @@ public void terminate(String reason, Exception cause, boolean clearMetrics,\n       }\n     }\n \n+    if (this.replicationEndpoint != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0OTQyMg=="}, "originalCommit": {"oid": "0bb3ce5874edc2cdb55690a10c3e59c143094abf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM1OTIxNg==", "bodyText": "But it is still a bit strange that, the above stop worker and setReaderRunning to false can not stop the work?\n\nYes, stop worker and setReaderRunning to false just set flag non-running, if happens exception in while loop of method replicationEndpoint.replicate, will go into retry and cannot sense the flag changing. Leaving the retry can be achieved by calling replicationEndpoint.stop().", "url": "https://github.com/apache/hbase/pull/2521#discussion_r504359216", "createdAt": "2020-10-14T02:14:30Z", "author": {"login": "ddupg"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -691,6 +691,9 @@ public void terminate(String reason, Exception cause, boolean clearMetrics,\n       }\n     }\n \n+    if (this.replicationEndpoint != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY0OTQyMg=="}, "originalCommit": {"oid": "0bb3ce5874edc2cdb55690a10c3e59c143094abf"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2413, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}