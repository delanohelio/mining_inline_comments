{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTU4MDA2", "number": 1943, "title": "HBASE-24609 Move MetaTableAccessor out of hbase-client", "bodyText": "", "createdAt": "2020-06-21T15:08:48Z", "url": "https://github.com/apache/hbase/pull/1943", "merged": true, "mergeCommit": {"oid": "22103067b6050285dd73e8460b8ab13a42bb6a8b"}, "closed": true, "closedAt": "2020-06-24T13:20:36Z", "author": {"login": "Apache9"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctnU-egBqjM0NjYxNzcyMjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSQmmhgFqTUwNzg3ODE2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02c20338f40a5fbcbdb24f342da1d1f3a4dc8a04", "author": {"user": {"login": "Apache9", "name": "Duo Zhang"}}, "url": "https://github.com/apache/hbase/commit/02c20338f40a5fbcbdb24f342da1d1f3a4dc8a04", "committedDate": "2020-06-21T15:05:09Z", "message": "HBASE-24609 Move MetaTableAccessor out of hbase-client"}, "afterCommit": {"oid": "2e3705744aa48bcc23815c6cdfa43046c4af5197", "author": {"user": {"login": "Apache9", "name": "Duo Zhang"}}, "url": "https://github.com/apache/hbase/commit/2e3705744aa48bcc23815c6cdfa43046c4af5197", "committedDate": "2020-06-22T02:21:34Z", "message": "HBASE-24609 Move MetaTableAccessor out of hbase-client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954", "author": {"user": {"login": "Apache9", "name": "Duo Zhang"}}, "url": "https://github.com/apache/hbase/commit/24c11ebe2a3091138bb164b6ecb32fb59efaf954", "committedDate": "2020-06-22T06:00:26Z", "message": "HBASE-24609 Move MetaTableAccessor out of hbase-client"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e3705744aa48bcc23815c6cdfa43046c4af5197", "author": {"user": {"login": "Apache9", "name": "Duo Zhang"}}, "url": "https://github.com/apache/hbase/commit/2e3705744aa48bcc23815c6cdfa43046c4af5197", "committedDate": "2020-06-22T02:21:34Z", "message": "HBASE-24609 Move MetaTableAccessor out of hbase-client"}, "afterCommit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954", "author": {"user": {"login": "Apache9", "name": "Duo Zhang"}}, "url": "https://github.com/apache/hbase/commit/24c11ebe2a3091138bb164b6ecb32fb59efaf954", "committedDate": "2020-06-22T06:00:26Z", "message": "HBASE-24609 Move MetaTableAccessor out of hbase-client"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MzcxOTcz", "url": "https://github.com/apache/hbase/pull/1943#pullrequestreview-436371973", "createdAt": "2020-06-24T06:55:51Z", "commit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjo1NTo1MVrOGoFSuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNjo1NTo1MVrOGoFSuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDY4MjkzNw==", "bodyText": "replica_id is a integer? So it should only have [0-9]?", "url": "https://github.com/apache/hbase/pull/1943#discussion_r444682937", "createdAt": "2020-06-24T06:55:51Z", "author": {"login": "infraio"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/CatalogFamilyFormat.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import edu.umd.cs.findbugs.annotations.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.RegionReplicaUtil;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.TableState;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * Helper class for generating/parsing\n+ * {@value org.apache.hadoop.hbase.HConstants#CATALOG_FAMILY_STR} family cells in meta table.\n+ * <p/>\n+ * The cells in catalog family are:\n+ *\n+ * <pre>\n+ * For each table range ('Region'), there is a single row, formatted as:\n+ * &lt;tableName&gt;,&lt;startKey&gt;,&lt;regionId&gt;,&lt;encodedRegionName&gt;.\n+ * This row is the serialized regionName of the default region replica.\n+ * Columns are:\n+ * info:regioninfo         => contains serialized HRI for the default region replica\n+ * info:server             => contains hostname:port (in string form) for the server hosting\n+ *                            the default regionInfo replica\n+ * info:server_&lt;replicaId&gt => contains hostname:port (in string form) for the server hosting\n+ *                                 the regionInfo replica with replicaId\n+ * info:serverstartcode    => contains server start code (in binary long form) for the server\n+ *                            hosting the default regionInfo replica\n+ * info:serverstartcode_&lt;replicaId&gt => contains server start code (in binary long form) for\n+ *                                          the server hosting the regionInfo replica with\n+ *                                          replicaId\n+ * info:seqnumDuringOpen   => contains seqNum (in binary long form) for the region at the time\n+ *                            the server opened the region with default replicaId\n+ * info:seqnumDuringOpen_&lt;replicaId&gt => contains seqNum (in binary long form) for the region\n+ *                                           at the time the server opened the region with\n+ *                                           replicaId\n+ * info:splitA             => contains a serialized HRI for the first daughter region if the\n+ *                            region is split\n+ * info:splitB             => contains a serialized HRI for the second daughter region if the\n+ *                            region is split\n+ * info:merge*             => contains a serialized HRI for a merge parent region. There will be two\n+ *                            or more of these columns in a row. A row that has these columns is\n+ *                            undergoing a merge and is the result of the merge. Columns listed\n+ *                            in marge* columns are the parents of this merged region. Example\n+ *                            columns: info:merge0001, info:merge0002. You make also see 'mergeA',\n+ *                            and 'mergeB'. This is old form replaced by the new format that allows\n+ *                            for more than two parents to be merged at a time.\n+ * </pre>\n+ */\n+@InterfaceAudience.Private\n+public class CatalogFamilyFormat {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(CatalogFamilyFormat.class);\n+\n+  /** A regex for parsing server columns from meta. See above javadoc for meta layout */\n+  private static final Pattern SERVER_COLUMN_PATTERN =\n+    Pattern.compile(\"^server(_[0-9a-fA-F]{4})?$\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2Mzc0NzI2", "url": "https://github.com/apache/hbase/pull/1943#pullrequestreview-436374726", "createdAt": "2020-06-24T07:00:56Z", "commit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3ODc4MTYy", "url": "https://github.com/apache/hbase/pull/1943#pullrequestreview-507878162", "createdAt": "2020-10-13T22:41:01Z", "commit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0MTowMlrOHg7_GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QyMjo0ODoyNFrOHg8Jcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDI5OTI4OQ==", "bodyText": "Should this method be in ClientMTA altogether? Or you leave it here just to minimize code churn?", "url": "https://github.com/apache/hbase/pull/1943#discussion_r504299289", "createdAt": "2020-10-13T22:41:02Z", "author": {"login": "saintstack"}, "path": "hbase-balancer/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java", "diffHunk": "@@ -193,8 +133,8 @@\n    * @param connection connection we're using\n    * @param visitor Visitor invoked against each row in regions family.\n    */\n-  public static void fullScanRegions(Connection connection, final Visitor visitor)\n-      throws IOException {\n+  public static void fullScanRegions(Connection connection,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMTA1Nw==", "bodyText": "Trying to figure the prinicipal to apply figuring when to put something in MTA and when to put it in CMTA? Thanks.", "url": "https://github.com/apache/hbase/pull/1943#discussion_r504301057", "createdAt": "2020-10-13T22:45:56Z", "author": {"login": "saintstack"}, "path": "hbase-balancer/src/main/java/org/apache/hadoop/hbase/MetaTableAccessor.java", "diffHunk": "@@ -2176,13 +1606,9 @@ private static void debugLogMutation(Mutation p) throws IOException {\n   }\n \n   private static Put addSequenceNum(Put p, long openSeqNum, int replicaId) throws IOException {\n-    return p.add(CellBuilderFactory.create(CellBuilderType.SHALLOW_COPY)\n-              .setRow(p.getRow())\n-              .setFamily(HConstants.CATALOG_FAMILY)\n-              .setQualifier(getSeqNumColumn(replicaId))\n-              .setTimestamp(p.getTimestamp())\n-              .setType(Type.Put)\n-              .setValue(Bytes.toBytes(openSeqNum))\n-              .build());\n+    return p.add(CellBuilderFactory.create(CellBuilderType.SHALLOW_COPY).setRow(p.getRow())\n+      .setFamily(HConstants.CATALOG_FAMILY)\n+      .setQualifier(CatalogFamilyFormat.getSeqNumColumn(replicaId)).setTimestamp(p.getTimestamp())\n+      .setType(Type.Put).setValue(Bytes.toBytes(openSeqNum)).build());\n   }\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "originalPosition": 1932}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMTc5NQ==", "bodyText": "Looks like could be package private?", "url": "https://github.com/apache/hbase/pull/1943#discussion_r504301795", "createdAt": "2020-10-13T22:47:58Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/CatalogFamilyFormat.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import edu.umd.cs.findbugs.annotations.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.RegionReplicaUtil;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.TableState;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * Helper class for generating/parsing\n+ * {@value org.apache.hadoop.hbase.HConstants#CATALOG_FAMILY_STR} family cells in meta table.\n+ * <p/>\n+ * The cells in catalog family are:\n+ *\n+ * <pre>\n+ * For each table range ('Region'), there is a single row, formatted as:\n+ * &lt;tableName&gt;,&lt;startKey&gt;,&lt;regionId&gt;,&lt;encodedRegionName&gt;.\n+ * This row is the serialized regionName of the default region replica.\n+ * Columns are:\n+ * info:regioninfo         => contains serialized HRI for the default region replica\n+ * info:server             => contains hostname:port (in string form) for the server hosting\n+ *                            the default regionInfo replica\n+ * info:server_&lt;replicaId&gt => contains hostname:port (in string form) for the server hosting\n+ *                                 the regionInfo replica with replicaId\n+ * info:serverstartcode    => contains server start code (in binary long form) for the server\n+ *                            hosting the default regionInfo replica\n+ * info:serverstartcode_&lt;replicaId&gt => contains server start code (in binary long form) for\n+ *                                          the server hosting the regionInfo replica with\n+ *                                          replicaId\n+ * info:seqnumDuringOpen   => contains seqNum (in binary long form) for the region at the time\n+ *                            the server opened the region with default replicaId\n+ * info:seqnumDuringOpen_&lt;replicaId&gt => contains seqNum (in binary long form) for the region\n+ *                                           at the time the server opened the region with\n+ *                                           replicaId\n+ * info:splitA             => contains a serialized HRI for the first daughter region if the\n+ *                            region is split\n+ * info:splitB             => contains a serialized HRI for the second daughter region if the\n+ *                            region is split\n+ * info:merge*             => contains a serialized HRI for a merge parent region. There will be two\n+ *                            or more of these columns in a row. A row that has these columns is\n+ *                            undergoing a merge and is the result of the merge. Columns listed\n+ *                            in marge* columns are the parents of this merged region. Example\n+ *                            columns: info:merge0001, info:merge0002. You make also see 'mergeA',\n+ *                            and 'mergeB'. This is old form replaced by the new format that allows\n+ *                            for more than two parents to be merged at a time.\n+ * </pre>\n+ */\n+@InterfaceAudience.Private\n+public class CatalogFamilyFormat {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMTkzOQ==", "bodyText": "Only for the 'info' CF?", "url": "https://github.com/apache/hbase/pull/1943#discussion_r504301939", "createdAt": "2020-10-13T22:48:24Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/CatalogFamilyFormat.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase;\n+\n+import edu.umd.cs.findbugs.annotations.Nullable;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.NavigableMap;\n+import java.util.SortedMap;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.client.RegionInfoBuilder;\n+import org.apache.hadoop.hbase.client.RegionReplicaUtil;\n+import org.apache.hadoop.hbase.client.Result;\n+import org.apache.hadoop.hbase.client.TableState;\n+import org.apache.hadoop.hbase.exceptions.DeserializationException;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+\n+/**\n+ * Helper class for generating/parsing\n+ * {@value org.apache.hadoop.hbase.HConstants#CATALOG_FAMILY_STR} family cells in meta table.\n+ * <p/>\n+ * The cells in catalog family are:\n+ *\n+ * <pre>\n+ * For each table range ('Region'), there is a single row, formatted as:\n+ * &lt;tableName&gt;,&lt;startKey&gt;,&lt;regionId&gt;,&lt;encodedRegionName&gt;.\n+ * This row is the serialized regionName of the default region replica.\n+ * Columns are:\n+ * info:regioninfo         => contains serialized HRI for the default region replica\n+ * info:server             => contains hostname:port (in string form) for the server hosting\n+ *                            the default regionInfo replica\n+ * info:server_&lt;replicaId&gt => contains hostname:port (in string form) for the server hosting\n+ *                                 the regionInfo replica with replicaId\n+ * info:serverstartcode    => contains server start code (in binary long form) for the server\n+ *                            hosting the default regionInfo replica\n+ * info:serverstartcode_&lt;replicaId&gt => contains server start code (in binary long form) for\n+ *                                          the server hosting the regionInfo replica with\n+ *                                          replicaId\n+ * info:seqnumDuringOpen   => contains seqNum (in binary long form) for the region at the time\n+ *                            the server opened the region with default replicaId\n+ * info:seqnumDuringOpen_&lt;replicaId&gt => contains seqNum (in binary long form) for the region\n+ *                                           at the time the server opened the region with\n+ *                                           replicaId\n+ * info:splitA             => contains a serialized HRI for the first daughter region if the\n+ *                            region is split\n+ * info:splitB             => contains a serialized HRI for the second daughter region if the\n+ *                            region is split\n+ * info:merge*             => contains a serialized HRI for a merge parent region. There will be two\n+ *                            or more of these columns in a row. A row that has these columns is\n+ *                            undergoing a merge and is the result of the merge. Columns listed\n+ *                            in marge* columns are the parents of this merged region. Example\n+ *                            columns: info:merge0001, info:merge0002. You make also see 'mergeA',\n+ *                            and 'mergeB'. This is old form replaced by the new format that allows\n+ *                            for more than two parents to be merged at a time.\n+ * </pre>\n+ */\n+@InterfaceAudience.Private\n+public class CatalogFamilyFormat {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDMwMTc5NQ=="}, "originalCommit": {"oid": "24c11ebe2a3091138bb164b6ecb32fb59efaf954"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4376, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}