{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNjQ1MDYx", "number": 2304, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozNzowMVrOEdV2pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODoxNDoxNlrOEdiHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MjAyMjE1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/CatalogJanitor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxODozNzowMVrOHIclZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMDo1NDowNlrOHIg5Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxODk4MQ==", "bodyText": "Add an 'else' here?", "url": "https://github.com/apache/hbase/pull/2304#discussion_r478618981", "createdAt": "2020-08-27T18:37:01Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/CatalogJanitor.java", "diffHunk": "@@ -644,12 +644,17 @@ private RegionInfo metaTableConsistencyCheck(Result metaTableRow) {\n       // If table is disabled, skip integrity check.\n       if (!isTableDisabled(ri)) {\n         if (isTableTransition(ri)) {\n-          // On table transition, look to see if last region was last in table\n-          // and if this is the first. Report 'hole' if neither is true.\n           // HBCK1 used to have a special category for missing start or end keys.\n           // We'll just lump them in as 'holes'.\n-          if ((this.previous != null && !this.previous.isLast()) || !ri.isFirst()) {\n-            addHole(this.previous == null? RegionInfo.UNDEFINED: this.previous, ri);\n+\n+          // This is a table transition. If this region is not first region, report a hole.\n+          if (!ri.isFirst()) {\n+            addHole(RegionInfo.UNDEFINED, ri);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a226360a9e2c88caedb1b3388bd9e4b06fa6fa45"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYyNzc4OA==", "bodyText": "IMHO, else is not needed as both condition can happen at the same time\n\ncurrent table has hole due to first region missing\nprevious table has hole due to last region missing", "url": "https://github.com/apache/hbase/pull/2304#discussion_r478627788", "createdAt": "2020-08-27T18:53:30Z", "author": {"login": "arshadmohammad"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/CatalogJanitor.java", "diffHunk": "@@ -644,12 +644,17 @@ private RegionInfo metaTableConsistencyCheck(Result metaTableRow) {\n       // If table is disabled, skip integrity check.\n       if (!isTableDisabled(ri)) {\n         if (isTableTransition(ri)) {\n-          // On table transition, look to see if last region was last in table\n-          // and if this is the first. Report 'hole' if neither is true.\n           // HBCK1 used to have a special category for missing start or end keys.\n           // We'll just lump them in as 'holes'.\n-          if ((this.previous != null && !this.previous.isLast()) || !ri.isFirst()) {\n-            addHole(this.previous == null? RegionInfo.UNDEFINED: this.previous, ri);\n+\n+          // This is a table transition. If this region is not first region, report a hole.\n+          if (!ri.isFirst()) {\n+            addHole(RegionInfo.UNDEFINED, ri);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxODk4MQ=="}, "originalCommit": {"oid": "a226360a9e2c88caedb1b3388bd9e4b06fa6fa45"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODY4OTU4Mw==", "bodyText": "You are right.", "url": "https://github.com/apache/hbase/pull/2304#discussion_r478689583", "createdAt": "2020-08-27T20:54:06Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/CatalogJanitor.java", "diffHunk": "@@ -644,12 +644,17 @@ private RegionInfo metaTableConsistencyCheck(Result metaTableRow) {\n       // If table is disabled, skip integrity check.\n       if (!isTableDisabled(ri)) {\n         if (isTableTransition(ri)) {\n-          // On table transition, look to see if last region was last in table\n-          // and if this is the first. Report 'hole' if neither is true.\n           // HBCK1 used to have a special category for missing start or end keys.\n           // We'll just lump them in as 'holes'.\n-          if ((this.previous != null && !this.previous.isLast()) || !ri.isFirst()) {\n-            addHole(this.previous == null? RegionInfo.UNDEFINED: this.previous, ri);\n+\n+          // This is a table transition. If this region is not first region, report a hole.\n+          if (!ri.isFirst()) {\n+            addHole(RegionInfo.UNDEFINED, ri);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODYxODk4MQ=="}, "originalCommit": {"oid": "a226360a9e2c88caedb1b3388bd9e4b06fa6fa45"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NDAzMTc0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestCatalogJanitorCluster.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODoxNDoxNlrOHIvRBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODoxNDoxNlrOHIvRBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkyNTA2Mg==", "bodyText": "Please run MetaFixer to verify is it processing these holes correctly.", "url": "https://github.com/apache/hbase/pull/2304#discussion_r478925062", "createdAt": "2020-08-28T08:14:16Z", "author": {"login": "KanakaKumar"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestCatalogJanitorCluster.java", "diffHunk": "@@ -231,4 +234,86 @@ public void testConsistency() throws IOException {\n     row[row.length - 1] = (byte)(((int)row[row.length - 1]) + 1);\n     return row;\n   }\n+\n+  @Test\n+  public void testHoles() throws IOException {\n+    CatalogJanitor janitor = TEST_UTIL.getHBaseCluster().getMaster().getCatalogJanitor();\n+\n+    CatalogJanitor.Report report = janitor.getLastReport();\n+    // Assert no problems.\n+    assertTrue(report.isEmpty());\n+    //Verify start and end region holes\n+    verifyCornerHoles(janitor, T1);\n+    //Verify start and end region holes\n+    verifyCornerHoles(janitor, T2);\n+    verifyMiddleHole(janitor);\n+    //verify total number of holes, 2 in t1 and t2 each and one in t3\n+    janitor.scan();\n+    assertEquals(5, janitor.getLastReport().getHoles().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a226360a9e2c88caedb1b3388bd9e4b06fa6fa45"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2687, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}