{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MDY1ODg0", "number": 1552, "title": "HBASE-24205 Create metric to know the number of reads that happens fr\u2026", "bodyText": "Initial PR to get the metrics that indicates the gets that happens on the memstore. We just try to get the count at the row level and not at the cell level.\nOnly StoreScanner has details about how the cell or row was retrieved. Even if one of the cell is retrieved from the Memstore we will account the read to have used the memstore indicating it was trying to access latest data. We can add metric for scan too later.\nAnother thing to note is that the real time counter on the Store level will use MetricStore which will use the Counters with hbase-metric-api and not the hadoop's counters.", "createdAt": "2020-04-20T13:31:24Z", "url": "https://github.com/apache/hbase/pull/1552", "merged": true, "mergeCommit": {"oid": "510aad3125b80a7b144d4213194b09a39495f336"}, "closed": true, "closedAt": "2020-06-16T13:00:21Z", "author": {"login": "ramkrish86"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaM9FvAFqTM5ODA3MzQyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr28yrAFqTQzMTYyMTQ3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDczNDI0", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-398073424", "createdAt": "2020-04-22T10:55:47Z", "commit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMDo1NTo0OFrOGJwOLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1MzoxNVrOGKF66w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDQzMQ==", "bodyText": "wrapper argument can be removed?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412880431", "createdAt": "2020-04-22T10:55:48Z", "author": {"login": "virajjasani"}, "path": "hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSourceFactoryImpl.java", "diffHunk": "@@ -45,6 +46,16 @@ private synchronized MetricsRegionAggregateSourceImpl getRegionAggregate() {\n     }\n   }\n \n+  private synchronized MetricsStoreAggregateSourceImpl\n+      getStoreAggregate(MetricsStoreWrapper wrapper) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MDc5Nw==", "bodyText": "nit: Collections.newSetFromMap(new ConcurrentHashMap<>())", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412880797", "createdAt": "2020-04-22T10:56:19Z", "author": {"login": "virajjasani"}, "path": "hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSourceImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;\n+import org.apache.hadoop.metrics2.lib.MetricsExecutorImpl;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreAggregateSourceImpl extends BaseSourceImpl\n+    implements MetricsStoreAggregateSource {\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreAggregateSourceImpl.class);\n+\n+  private final MetricsExecutorImpl executor = new MetricsExecutorImpl();\n+\n+  private final Set<MetricsStoreSource> storeSources =\n+      Collections.newSetFromMap(new ConcurrentHashMap<MetricsStoreSource, Boolean>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTExMQ==", "bodyText": "Good to have LOG.error here?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412881111", "createdAt": "2020-04-22T10:56:50Z", "author": {"login": "virajjasani"}, "path": "hbase-hadoop2-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSourceImpl.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSourceImpl;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsCollector;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.hadoop.metrics2.impl.JmxCacheBuster;\n+import org.apache.hadoop.metrics2.lib.MetricsExecutorImpl;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreAggregateSourceImpl extends BaseSourceImpl\n+    implements MetricsStoreAggregateSource {\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreAggregateSourceImpl.class);\n+\n+  private final MetricsExecutorImpl executor = new MetricsExecutorImpl();\n+\n+  private final Set<MetricsStoreSource> storeSources =\n+      Collections.newSetFromMap(new ConcurrentHashMap<MetricsStoreSource, Boolean>());\n+\n+  public MetricsStoreAggregateSourceImpl() {\n+    this(METRICS_NAME, METRICS_DESCRIPTION, METRICS_CONTEXT, METRICS_JMX_CONTEXT);\n+  }\n+\n+\n+  public MetricsStoreAggregateSourceImpl(String metricsName,\n+                                          String metricsDescription,\n+                                          String metricsContext,\n+                                          String metricsJmxContext) {\n+    super(metricsName, metricsDescription, metricsContext, metricsJmxContext);\n+\n+    // Every few mins clean the JMX cache.\n+    executor.getExecutor().scheduleWithFixedDelay(new Runnable() {\n+      public void run() {\n+        JmxCacheBuster.clearJmxCache();\n+      }\n+    }, 5, 5, TimeUnit.MINUTES);\n+  }\n+\n+  public MetricRegistry getMetricRegistry() {\n+    return registry;\n+  }\n+\n+  @Override\n+  public void register(MetricsStoreSource source) {\n+    storeSources.add(source);\n+    clearCache();\n+  }\n+\n+  @Override\n+  public void deregister(MetricsStoreSource toRemove) {\n+    try {\n+      storeSources.remove(toRemove);\n+    } catch (Exception e) {\n+      // Ignored. If this errors out it means that someone is double\n+      // closing the region source and the region is already nulled out.\n+      LOG.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MTY1OQ==", "bodyText": "We can remove conf", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412881659", "createdAt": "2020-04-22T10:57:49Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStore.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+@InterfaceAudience.Private\n+public class MetricsStore {\n+  private final MetricsStoreSource source;\n+  private MetricsStoreWrapper storeWrapper;\n+\n+  public MetricsStore(final MetricsStoreWrapper wrapper, Configuration conf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4MjUzMg==", "bodyText": "Would you like to use LOG somewhere? Or maybe dropped the idea and hence it's not being used?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412882532", "createdAt": "2020-04-22T10:59:08Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreWrapperImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.OptionalDouble;\n+import java.util.OptionalLong;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.hadoop.metrics2.MetricsExecutor;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreWrapperImpl implements MetricsStoreWrapper, Closeable {\n+\n+  private final HStore store;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreWrapperImpl.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4Mzc0NQ==", "bodyText": "Noted. For this change, is it good to give name memstoreDataSize ?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412883745", "createdAt": "2020-04-22T11:01:10Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreWrapperImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.OptionalDouble;\n+import java.util.OptionalLong;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.hadoop.metrics2.MetricsExecutor;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreWrapperImpl implements MetricsStoreWrapper, Closeable {\n+\n+  private final HStore store;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreWrapperImpl.class);\n+\n+  public static final int PERIOD = 45;\n+  public static final String UNKNOWN = \"unknown\";\n+  private ScheduledExecutorService executor;\n+  private Runnable runnable;\n+  // add others also. check if anything is redundant\n+  private long numStoreFiles;\n+  private long memstoreSize;\n+  private long storeFileSize;\n+  private long getsFromMemstore;\n+  private long getsOnStore;\n+  private long getsOnFile;\n+  private long numReferenceFiles;\n+  private long minStoreFileAge;\n+  private long maxStoreFileAge;\n+  private long avgStoreFileAge;\n+  private long numHFiles;\n+  private int storeRefCount;\n+\n+  private ScheduledFuture<?> storeMetricUpdateTask;\n+\n+  public MetricsStoreWrapperImpl(HStore store) {\n+    this.store = store;\n+    this.executor = CompatibilitySingletonFactory.getInstance(MetricsExecutor.class).getExecutor();\n+    this.runnable = new HStoreMetricsWrapperRunnable();\n+    this.storeMetricUpdateTask =\n+        this.executor.scheduleWithFixedDelay(this.runnable, PERIOD, PERIOD, TimeUnit.SECONDS);\n+  }\n+\n+  @Override\n+  public void close() throws IOException {\n+    storeMetricUpdateTask.cancel(true);\n+  }\n+\n+  @Override\n+  public String getStoreName() {\n+    return store.getColumnFamilyName();\n+  }\n+\n+  @Override\n+  public String getRegionName() {\n+    return store.getRegionInfo().getRegionNameAsString();\n+  }\n+\n+  @Override\n+  public String getTableName() {\n+    return store.getRegionInfo().getTable().getNameAsString();\n+  }\n+\n+  @Override\n+  public String getNamespace() {\n+    return store.getTableName().getNamespaceAsString();\n+  }\n+\n+  @Override\n+  public long getNumStoreFiles() {\n+    return numStoreFiles;\n+  }\n+\n+  @Override\n+  public long getMemStoreSize() {\n+    // todo : change this - we need to expose data, heapsize and offheapdatasize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NDQ3MQ==", "bodyText": "executor and runnable both could be local variable", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412884471", "createdAt": "2020-04-22T11:02:25Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreWrapperImpl.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.util.OptionalDouble;\n+import java.util.OptionalLong;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.apache.hadoop.hbase.CompatibilitySingletonFactory;\n+import org.apache.hadoop.metrics2.MetricsExecutor;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreWrapperImpl implements MetricsStoreWrapper, Closeable {\n+\n+  private final HStore store;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreWrapperImpl.class);\n+\n+  public static final int PERIOD = 45;\n+  public static final String UNKNOWN = \"unknown\";\n+  private ScheduledExecutorService executor;\n+  private Runnable runnable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzcyNw==", "bodyText": "Can be simplified to updateMetricsStore(!heap.current.isFileScanner())", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412887727", "createdAt": "2020-04-22T11:08:03Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/StoreScanner.java", "diffHunk": "@@ -608,7 +613,17 @@ public boolean next(List<Cell> outResult, ScannerContext scannerContext) throws\n           if (f != null) {\n             cell = f.transformCell(cell);\n           }\n-\n+          // tracking gets only and currently per row\n+          // and not per cell. Even scans metrics at the region level are\n+          // being tracked row wise.\n+          if (get && !trackGets) {\n+            if (!heap.current.isFileScanner()) {\n+              updateMetricsStore(true);\n+            } else {\n+              updateMetricsStore(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyMzIxNg==", "bodyText": "This change is a must or it is an improvement? Just trying to understand it better :)", "url": "https://github.com/apache/hbase/pull/1552#discussion_r412923216", "createdAt": "2020-04-22T12:06:56Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -2547,7 +2565,7 @@ public CacheConfig getCacheConfig() {\n   }\n \n   public static final long FIXED_OVERHEAD =\n-      ClassSize.align(ClassSize.OBJECT + (27 * ClassSize.REFERENCE) + (2 * Bytes.SIZEOF_LONG)\n+      ClassSize.align(ClassSize.OBJECT + (31 * ClassSize.REFERENCE) + (2 * Bytes.SIZEOF_LONG)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTk0Nw==", "bodyText": "This should be an else statement?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r413235947", "createdAt": "2020-04-22T18:53:15Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -2898,4 +2915,40 @@ public int getMaxCompactedStoreFileRefCount() {\n       ? maxCompactedStoreFileRefCount.getAsInt() : 0;\n   }\n \n+  @Override\n+  public long getReadRequestsFromStoreCount() {\n+    return getRequestsFromStore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromMemstore() {\n+    return getRequestsFromMemstore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromFile() {\n+    return getRequestsFromFile.sum();\n+  }\n+\n+  void incrGetRequestsFromStore() {\n+    getRequestsFromStore.increment();\n+    if (metricsStore != null) {\n+      metricsStore.updateGet();\n+    }\n+  }\n+\n+  void updateMetricsStore(boolean memstoreRead) {\n+    if (memstoreRead) {\n+      getRequestsFromMemstore.increment();\n+    } else {\n+      getRequestsFromFile.increment();\n+    }\n+    if (metricsStore != null) {\n+      if (memstoreRead) {\n+        metricsStore.updateMemstoreGet();\n+      }\n+      metricsStore.updateFileGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODkzMjE2", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-399893216", "createdAt": "2020-04-24T12:17:05Z", "commit": {"oid": "24c44bba23903c0001c3a59d6c6f8e1388f08073"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "444387a91b99c266a5359df2fadf7a7b637741f5", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/444387a91b99c266a5359df2fadf7a7b637741f5", "committedDate": "2020-04-27T10:24:44Z", "message": "Fix unused imports"}, "afterCommit": {"oid": "3f3944c1eba56ebf1ffd22a74bce33ee7d70d728", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/3f3944c1eba56ebf1ffd22a74bce33ee7d70d728", "committedDate": "2020-05-05T10:40:31Z", "message": "Rebase with latest commit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MTMwODI3", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-409130827", "createdAt": "2020-05-11T12:37:02Z", "commit": {"oid": "3f3944c1eba56ebf1ffd22a74bce33ee7d70d728"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozNzowMlrOGTaWnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjozNzowMlrOGTaWnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwNzkwMQ==", "bodyText": "So this will treat only one store under a region for this aggregation.\nWhen we want to see an aggregated metric across all the store instances (under diff regions) for a table, this wont help right? (I mean metric for table CF) Do you think that will be more useful?  The stuff of memstore hit rate and all at a CF level would be useful IMO.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r423007901", "createdAt": "2020-05-11T12:37:02Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+\n+@InterfaceAudience.Private\n+public interface MetricsStoreAggregateSource extends BaseSource {\n+  /**\n+   * The name of the metrics\n+   */\n+  String METRICS_NAME = \"Stores\";\n+\n+  /**\n+   * The name of the metrics context that metrics will be under.\n+   */\n+  String METRICS_CONTEXT = \"regionserver\";\n+\n+  /**\n+   * Description\n+   */\n+  String METRICS_DESCRIPTION = \"Metrics about Stores under a region\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f3944c1eba56ebf1ffd22a74bce33ee7d70d728"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f3944c1eba56ebf1ffd22a74bce33ee7d70d728", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/3f3944c1eba56ebf1ffd22a74bce33ee7d70d728", "committedDate": "2020-05-05T10:40:31Z", "message": "Rebase with latest commit"}, "afterCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "committedDate": "2020-05-14T07:55:56Z", "message": "Adding the table vs store metric by consolidating"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDUzMTI2", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-416053126", "createdAt": "2020-05-21T10:52:58Z", "commit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMDo1Mjo1OFrOGYujbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjoxNTo1MlrOGYwn_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTc0Mw==", "bodyText": "#getsOnMemstore + #getsOnFile will be #get write?  Why we should keep both metric then?  We can keep only getsOnMemstore", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428581743", "createdAt": "2020-05-21T10:52:58Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java", "diffHunk": "@@ -402,6 +402,8 @@\n   String DELETE_BATCH_KEY = \"deleteBatch\";\n   String GET_SIZE_KEY = \"getSize\";\n   String GET_KEY = \"get\";\n+  String MEMSTORE_GET_KEY = \"getsOnMemstore\";\n+  String FILE_GET_KEY = \"getsOnFile\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4OTc1NQ==", "bodyText": "We are collecting the metric at every store level and then aggregating over region also?  Do we need that? A region might have say 3 CFs out of which only one is getting recent data gets. Aggregate at region level for these 3 CFs, how that can be used?  IMO we can avoid this.  And keep aggregate only at the RS level for table:cf", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428589755", "createdAt": "2020-05-21T11:12:19Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -302,6 +302,14 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n               regionNamePrefix + MetricsRegionSource.MAX_FLUSH_QUEUE_SIZE,\n               MetricsRegionSource.MAX_FLUSH_QUEUE_DESC),\n           this.regionWrapper.getMaxFlushQueueSize());\n+      mrb.addCounter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NDM1MA==", "bodyText": "Yes here.. No need to fileReads.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428594350", "createdAt": "2020-05-21T11:24:04Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreSourceImpl.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.hadoop.hbase.metrics.Counter;\n+import org.apache.hadoop.hbase.metrics.Interns;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreSourceImpl implements MetricsStoreSource {\n+\n+  private MetricsStoreWrapper storeWrapper;\n+  private MetricsStoreAggregateSourceImpl aggreagate;\n+  private AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private String storeNamePrefix;\n+  private final MetricRegistry registry;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreSourceImpl.class);\n+  String storeReadsKey;\n+\n+  String memstoreReadsKey;\n+  String fileReadsKey;\n+  private final Counter storeReads;\n+  private final Counter memstoreReads;\n+  private final Counter fileReads;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NjMyNQ==", "bodyText": "Pls correct log\nfor store storeWrapper.getRegionName() + \" : \" + storeWrapper.getStoreName()", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428596325", "createdAt": "2020-05-21T11:28:46Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreSourceImpl.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.hadoop.hbase.metrics.Counter;\n+import org.apache.hadoop.hbase.metrics.Interns;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreSourceImpl implements MetricsStoreSource {\n+\n+  private MetricsStoreWrapper storeWrapper;\n+  private MetricsStoreAggregateSourceImpl aggreagate;\n+  private AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private String storeNamePrefix;\n+  private final MetricRegistry registry;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreSourceImpl.class);\n+  String storeReadsKey;\n+\n+  String memstoreReadsKey;\n+  String fileReadsKey;\n+  private final Counter storeReads;\n+  private final Counter memstoreReads;\n+  private final Counter fileReads;\n+\n+  public MetricsStoreSourceImpl(MetricsStoreWrapper storeWrapper,\n+      MetricsStoreAggregateSourceImpl aggreagate) {\n+    this.storeWrapper = storeWrapper;\n+    this.aggreagate = aggreagate;\n+    aggreagate.register(this);\n+\n+    LOG.debug(\"Creating new MetricsRegionSourceImpl for table \" + storeWrapper.getStoreName() + \" \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU5NzgwMw==", "bodyText": "Why all these storeFile related metric comes here as part of this?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428597803", "createdAt": "2020-05-21T11:32:08Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreSourceImpl.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.hadoop.hbase.metrics.Counter;\n+import org.apache.hadoop.hbase.metrics.Interns;\n+import org.apache.hadoop.hbase.metrics.MetricRegistry;\n+import org.apache.hadoop.metrics2.MetricsRecordBuilder;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@InterfaceAudience.Private\n+public class MetricsStoreSourceImpl implements MetricsStoreSource {\n+\n+  private MetricsStoreWrapper storeWrapper;\n+  private MetricsStoreAggregateSourceImpl aggreagate;\n+  private AtomicBoolean closed = new AtomicBoolean(false);\n+\n+  private String storeNamePrefix;\n+  private final MetricRegistry registry;\n+  private static final Logger LOG = LoggerFactory.getLogger(MetricsStoreSourceImpl.class);\n+  String storeReadsKey;\n+\n+  String memstoreReadsKey;\n+  String fileReadsKey;\n+  private final Counter storeReads;\n+  private final Counter memstoreReads;\n+  private final Counter fileReads;\n+\n+  public MetricsStoreSourceImpl(MetricsStoreWrapper storeWrapper,\n+      MetricsStoreAggregateSourceImpl aggreagate) {\n+    this.storeWrapper = storeWrapper;\n+    this.aggreagate = aggreagate;\n+    aggreagate.register(this);\n+\n+    LOG.debug(\"Creating new MetricsRegionSourceImpl for table \" + storeWrapper.getStoreName() + \" \"\n+        + storeWrapper.getRegionName());\n+\n+    // we are using the hbase-metrics API\n+    registry = aggreagate.getMetricRegistry();\n+\n+    storeNamePrefix = \"Namespace_\" + storeWrapper.getNamespace() + \"_table_\"\n+        + storeWrapper.getTableName() + \"_region_\" + storeWrapper.getRegionName() + \"_store_\"\n+        + storeWrapper.getStoreName() + \"_metric_\";\n+\n+    String suffix = \"Count\";\n+\n+    storeReadsKey = storeNamePrefix + MetricsRegionServerSource.GET_KEY + suffix;\n+    // all the counters are hbase-metrics API\n+    storeReads = registry.counter(storeReadsKey);\n+\n+    memstoreReadsKey = storeNamePrefix + MetricsRegionServerSource.MEMSTORE_GET_KEY + suffix;\n+    memstoreReads = registry.counter(memstoreReadsKey);\n+\n+    fileReadsKey = storeNamePrefix + MetricsRegionServerSource.FILE_GET_KEY + suffix;\n+    fileReads = registry.counter(fileReadsKey);\n+\n+  }\n+\n+  @Override\n+  public void close() {\n+    boolean wasClosed = closed.getAndSet(true);\n+\n+    // Has someone else already closed this for us?\n+    if (wasClosed) {\n+      return;\n+    }\n+\n+    // Before removing the metrics remove this region from the aggregate region bean.\n+    // This should mean that it's unlikely that snapshot and close happen at the same time.\n+    aggreagate.deregister(this);\n+\n+    // While it's un-likely that snapshot and close happen at the same time it's still possible.\n+    // So grab the lock to ensure that all calls to snapshot are done before we remove the metrics\n+    synchronized (this) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Removing store Metrics: \" + storeWrapper.getStoreName());\n+      }\n+\n+      registry.remove(storeReadsKey);\n+      registry.remove(memstoreReadsKey);\n+      registry.remove(fileReadsKey);\n+\n+      storeWrapper = null;\n+    }\n+  }\n+\n+  @Override\n+  public int compareTo(MetricsStoreSource source) {\n+    if (!(source instanceof MetricsStoreSourceImpl)) {\n+      return -1;\n+    }\n+\n+    MetricsStoreSourceImpl impl = (MetricsStoreSourceImpl) source;\n+    if (impl == null) {\n+      return -1;\n+    }\n+\n+    // TODO : make this better\n+    return Long.compare(this.storeWrapper.getStoreName().hashCode(),\n+      impl.storeWrapper.getStoreName().hashCode());\n+  }\n+\n+  @Override\n+  public void updateGet() {\n+    storeReads.increment();\n+  }\n+\n+  @Override\n+  public void updateMemtoreGet() {\n+    memstoreReads.increment();\n+  }\n+\n+  @Override\n+  public void updateFileGet() {\n+    fileReads.increment();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    return obj == this\n+        || (obj instanceof MetricsStoreSourceImpl && compareTo((MetricsStoreSourceImpl) obj) == 0);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return this.storeWrapper.getStoreName().hashCode();\n+  }\n+\n+  void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n+\n+    // If there is a close that started be double extra sure\n+    // that we're not getting any locks and not putting data\n+    // into the metrics that should be removed. So early out\n+    // before even getting the lock.\n+    if (closed.get()) {\n+      return;\n+    }\n+\n+    // Grab the read\n+    // This ensures that removes of the metrics\n+    // can't happen while we are putting them back in.\n+    synchronized (this) {\n+\n+      // It's possible that a close happened between checking\n+      // the closed variable and getting the lock.\n+      if (closed.get()) {\n+        return;\n+      }\n+      mrb.addGauge(Interns.info(storeNamePrefix + MetricsRegionServerSource.STOREFILE_COUNT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMDc2Mw==", "bodyText": "Here we are not adding aggregate of total gets on table:cf?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428600763", "createdAt": "2020-05-21T11:39:39Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableSourceImpl.java", "diffHunk": "@@ -311,6 +320,25 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n         mrb.addGauge(Interns.info(tableNamePrefix + MetricsRegionServerSource.NUM_REFERENCE_FILES,\n             MetricsRegionServerSource.NUM_REFERENCE_FILES_DESC),\n             tableWrapperAgg.getNumReferenceFiles(tableName.getNameAsString()));\n+        addGauge(mrb, tableWrapperAgg.getMemstoreReadRequestCount(tableName.getNameAsString()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMTI0NQ==", "bodyText": "Same here..  All places we can keep totalReads metric and memstoreReads. That should be enough to understand the pattern.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428601245", "createdAt": "2020-05-21T11:40:52Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregate.java", "diffHunk": "@@ -107,6 +109,13 @@\n    */\n   long getNumReferenceFiles(String table);\n \n+  /**\n+   * @return number of get requests on memstore for this table\n+   */\n+  Map<String, Long> getMemstoreReadRequestCount(String table);\n \n-\n+  /**\n+   * @return number of get requests from file for this table\n+   */\n+  Map<String, Long> getFileRequestCount(String table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMjQ1NQ==", "bodyText": "Actually here added 5 more refs but considering 4 only. And infact 4 is enough when u keep getRequestsFromMemstore  and getRequestsFromStore .\ngetRequestsFromStore => getRequests..  This is store anyways so 'FromStore' is implicit.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428602455", "createdAt": "2020-05-21T11:43:55Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -2547,7 +2565,7 @@ public CacheConfig getCacheConfig() {\n   }\n \n   public static final long FIXED_OVERHEAD =\n-      ClassSize.align(ClassSize.OBJECT + (27 * ClassSize.REFERENCE) + (2 * Bytes.SIZEOF_LONG)\n+      ClassSize.align(ClassSize.OBJECT + (31 * ClassSize.REFERENCE) + (2 * Bytes.SIZEOF_LONG)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkyMzIxNg=="}, "originalCommit": {"oid": "1dd15b7615f61fab4d27239c72ca970712f4b7f1"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwMzM2MA==", "bodyText": "Actually we need to keep this counter here as well as update the counter on Metrics also?  The local Counter is used by?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428603360", "createdAt": "2020-05-21T11:45:54Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -2884,4 +2901,41 @@ public int getMaxCompactedStoreFileRefCount() {\n       ? maxCompactedStoreFileRefCount.getAsInt() : 0;\n   }\n \n+  @Override\n+  public long getReadRequestsFromStoreCount() {\n+    return getRequestsFromStore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromMemstore() {\n+    return getRequestsFromMemstore.sum();\n+  }\n+\n+  @Override\n+  public long getGetRequestsCountFromFile() {\n+    return getRequestsFromFile.sum();\n+  }\n+\n+  void incrGetRequestsFromStore() {\n+    getRequestsFromStore.increment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNTkwMQ==", "bodyText": "Why this change? If any bug fix, pls keep it as another Jira", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428605901", "createdAt": "2020-05-21T11:52:07Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregateImpl.java", "diffHunk": "@@ -70,25 +69,36 @@ public void run() {\n           localMetricsTableMap.put(tbl, mt);\n         }\n         if (r.getStores() != null) {\n+          long memstoreReadCount = 0l;\n+          long fileReadCount = 0l;\n+          String familyName = null;\n           for (Store store : r.getStores()) {\n+            familyName = store.getColumnFamilyName();\n+\n             mt.storeFileCount += store.getStorefilesCount();\n-            mt.memstoreSize += (store.getMemStoreSize().getDataSize() +\n-              store.getMemStoreSize().getHeapSize() + store.getMemStoreSize().getOffHeapSize());\n+            mt.memstoreSize += (store.getMemStoreSize().getDataSize()\n+                + store.getMemStoreSize().getHeapSize() + store.getMemStoreSize().getOffHeapSize());\n             mt.storeFileSize += store.getStorefilesSize();\n             mt.referenceFileCount += store.getNumReferenceFiles();\n \n-            mt.maxStoreFileAge = Math.max(mt.maxStoreFileAge, store.getMaxStoreFileAge().getAsLong());\n-            mt.minStoreFileAge = Math.min(mt.minStoreFileAge, store.getMinStoreFileAge().getAsLong());\n-            mt.totalStoreFileAge = (long)store.getAvgStoreFileAge().getAsDouble() *\n-                store.getStorefilesCount();\n+            mt.maxStoreFileAge =\n+                Math.max(mt.maxStoreFileAge, store.getMaxStoreFileAge().getAsLong());\n+            mt.minStoreFileAge =\n+                Math.min(mt.minStoreFileAge, store.getMinStoreFileAge().getAsLong());\n+            mt.totalStoreFileAge =\n+                (long) store.getAvgStoreFileAge().getAsDouble() * store.getStorefilesCount();\n             mt.storeCount += 1;\n+            memstoreReadCount += store.getGetRequestsCountFromMemstore();\n+            fileReadCount += store.getGetRequestsCountFromFile();\n+            mt.storeMemstoreGetCount.putIfAbsent(familyName, memstoreReadCount);\n+            mt.storeFileGetCount.putIfAbsent(familyName, fileReadCount);\n           }\n+\n           mt.regionCount += 1;\n \n           mt.readRequestCount += r.getReadRequestsCount();\n-          mt.filteredReadRequestCount += getFilteredReadRequestCount(tbl.getNameAsString());\n+          mt.filteredReadRequestCount += r.getFilteredReadRequestsCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxNTY3OQ==", "bodyText": "This will do all the deregister stuff?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r428615679", "createdAt": "2020-05-21T12:15:52Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -1002,6 +1012,14 @@ public Void call() throws IOException {\n     } finally {\n       this.lock.writeLock().unlock();\n       this.archiveLock.unlock();\n+      // moving it after the unlocking so\n+      // that metrics closure does not affect them\n+      if (this.metricsStore != null) {\n+        metricsStore.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 52}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/29e5ac82028be2b5eb158ed7a86317732dfd1d4f", "committedDate": "2020-05-14T07:55:56Z", "message": "Adding the table vs store metric by consolidating"}, "afterCommit": {"oid": "7860d769b3911ff1e1ce6923688d166ee699e7f5", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/7860d769b3911ff1e1ce6923688d166ee699e7f5", "committedDate": "2020-05-29T14:00:41Z", "message": "Track for full row and then increment either memstore or file read\nmetric"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab042c9a4b33a7a320060d1bdd9045b23a7b5696", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/ab042c9a4b33a7a320060d1bdd9045b23a7b5696", "committedDate": "2020-05-29T14:23:16Z", "message": "TestMetricsStore test fix"}, "afterCommit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/66e0d8ffb5122019916a420a35c0372e17774212", "committedDate": "2020-06-02T14:32:33Z", "message": "Only increment the memstore metric if all cells are from memstore, if\nnot treat as mixed reads"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDk4MDUz", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-423098053", "createdAt": "2020-06-02T22:23:24Z", "commit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjoyMzoyNFrOGeF81Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjozMToxNlrOGeGH1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwNzk1Nw==", "bodyText": "In other words, it'd be better if the accounting aligned.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434207957", "createdAt": "2020-06-02T22:23:24Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionServerSource.java", "diffHunk": "@@ -402,6 +402,8 @@\n   String DELETE_BATCH_KEY = \"deleteBatch\";\n   String GET_SIZE_KEY = \"getSize\";\n   String GET_KEY = \"get\";\n+  String MEMSTORE_GET_KEY = \"getsOnMemstore\";\n+  String FILE_GET_KEY = \"getsOnFile\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4MTc0Mw=="}, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODQ2MA==", "bodyText": "Yeah, don't we have this accounted already? Seems redundant.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434208460", "createdAt": "2020-06-02T22:24:52Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSource.java", "diffHunk": "@@ -53,6 +53,10 @@\n   String COPROCESSOR_EXECUTION_STATISTICS_DESC = \"Statistics for coprocessor execution times\";\n   String REPLICA_ID = \"replicaid\";\n   String REPLICA_ID_DESC = \"The replica ID of a region. 0 is primary, otherwise is secondary\";\n+  String READ_REQUEST_ON_MEMSTORE = \"readRequestCountOnMemstore\";\n+  String READ_REQUEST_ON_MEMSTORE_DESC = \"Reads happening out of memstore\";\n+  String MIXED_READ_REQUEST_ON_STORE = \"mixedReadRequestCountOnStore\";\n+  String MIXED_READ_REQUEST_ON_STORE_DESC = \"Reads happening out of files and memstore on store\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwODk5Nw==", "bodyText": "I don't follow the above. We already have account at the store level per region? Why then would we add these counters?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434208997", "createdAt": "2020-06-02T22:26:18Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -302,6 +302,14 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n               regionNamePrefix + MetricsRegionSource.MAX_FLUSH_QUEUE_SIZE,\n               MetricsRegionSource.MAX_FLUSH_QUEUE_DESC),\n           this.regionWrapper.getMaxFlushQueueSize());\n+      mrb.addCounter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODU4OTc1NQ=="}, "originalCommit": {"oid": "29e5ac82028be2b5eb158ed7a86317732dfd1d4f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTI4Mw==", "bodyText": "... this if for the Region?  Can I ask for the number of reads on memstore on a Store?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434209283", "createdAt": "2020-06-02T22:27:04Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java", "diffHunk": "@@ -170,4 +170,15 @@\n    *   all compacted store files that belong to this region\n    */\n   long getMaxCompactedStoreFileRefCount();\n+\n+  /**\n+   * @return the number of reads on memstore\n+   */\n+  long getMemstoreReadRequestsCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTYxNQ==", "bodyText": "Metrics for a Store for more than one Store? If for more than one Store, why not in Region?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434209615", "createdAt": "2020-06-02T22:27:57Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+\n+@InterfaceAudience.Private\n+public interface MetricsStoreAggregateSource extends BaseSource {\n+  /**\n+   * The name of the metrics\n+   */\n+  String METRICS_NAME = \"Stores\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTc2Mg==", "bodyText": "If a single Store, should be called 'Store' not 'Stores'?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434209762", "createdAt": "2020-06-02T22:28:21Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+\n+@InterfaceAudience.Private\n+public interface MetricsStoreAggregateSource extends BaseSource {\n+  /**\n+   * The name of the metrics\n+   */\n+  String METRICS_NAME = \"Stores\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwOTYxNQ=="}, "originalCommit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDc3NA==", "bodyText": "This model doesn't seem right. There is no such thing as a Store on a RegionServer. The RegionServer hosts Regions. A Region hosts Stores.  This is an aggregate of all Stores on the RegionServer?\nI could imagine RegionServer,sub=Region,sub=Store... with a Bean per Store but then we'd probably have too many MBeans.\nDo we have a Region at this level in MBean hierarchy?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r434210774", "createdAt": "2020-06-02T22:31:16Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsStoreAggregateSource.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.regionserver;\n+\n+import org.apache.hadoop.hbase.metrics.BaseSource;\n+import org.apache.yetus.audience.InterfaceAudience;\n+\n+\n+@InterfaceAudience.Private\n+public interface MetricsStoreAggregateSource extends BaseSource {\n+  /**\n+   * The name of the metrics\n+   */\n+  String METRICS_NAME = \"Stores\";\n+\n+  /**\n+   * The name of the metrics context that metrics will be under.\n+   */\n+  String METRICS_CONTEXT = \"regionserver\";\n+\n+  /**\n+   * Description\n+   */\n+  String METRICS_DESCRIPTION = \"Metrics about Stores under a region\";\n+\n+  /**\n+   * The name of the metrics context that metrics will be under in jmx\n+   */\n+  String METRICS_JMX_CONTEXT = \"RegionServer,sub=\" + METRICS_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66e0d8ffb5122019916a420a35c0372e17774212", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/66e0d8ffb5122019916a420a35c0372e17774212", "committedDate": "2020-06-02T14:32:33Z", "message": "Only increment the memstore metric if all cells are from memstore, if\nnot treat as mixed reads"}, "afterCommit": {"oid": "04836c048d54b44c533465377776c9a70e3fa101", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/04836c048d54b44c533465377776c9a70e3fa101", "committedDate": "2020-06-03T14:23:49Z", "message": "Remove metricsstore and aggregate at region level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbfc3d0a3c2ca8a7329cfb9771921cd077b8d454", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/dbfc3d0a3c2ca8a7329cfb9771921cd077b8d454", "committedDate": "2020-06-11T11:48:48Z", "message": "HBASE-24205 Create metric to know the number of reads that happens from memstore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e43ed9c6203be957676ff9bb057f607375c82279", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/e43ed9c6203be957676ff9bb057f607375c82279", "committedDate": "2020-06-11T11:48:48Z", "message": "Fix checkstyles and whitespaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "002e7ecd800fad1d95a4aa932f62c5904a6d65d6", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/002e7ecd800fad1d95a4aa932f62c5904a6d65d6", "committedDate": "2020-06-11T11:48:48Z", "message": "Checkstyl, whitespace and javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e44c4a71b83df9258e4fff0548bb02ecdfbabab", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/9e44c4a71b83df9258e4fff0548bb02ecdfbabab", "committedDate": "2020-06-11T11:48:48Z", "message": "Fixed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5844bdb55b83fd685132b982b87e3828b9931e7f", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/5844bdb55b83fd685132b982b87e3828b9931e7f", "committedDate": "2020-06-11T11:48:48Z", "message": "Fix unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9a04b05ce8fb4e93075d9299d9fdeca8ce4b8b5", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/b9a04b05ce8fb4e93075d9299d9fdeca8ce4b8b5", "committedDate": "2020-06-11T11:48:48Z", "message": "Rebase with latest commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41670b30f29cb89eb1473333bf6e3c4479cc67ab", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/41670b30f29cb89eb1473333bf6e3c4479cc67ab", "committedDate": "2020-06-11T11:48:48Z", "message": "Adding the table vs store metric by consolidating"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c254a354e6673407be9f6f1f332101a19ff2812", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/5c254a354e6673407be9f6f1f332101a19ff2812", "committedDate": "2020-06-11T11:48:48Z", "message": "Combine get and scan metrics and make all relevant changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32c1a82787944758d4a92bfb4e09e1651f0ffc2d", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/32c1a82787944758d4a92bfb4e09e1651f0ffc2d", "committedDate": "2020-06-11T11:48:48Z", "message": "Track for full row and then increment either memstore or file read\nmetric"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923f356f49eed9877729f68d5591a4035b7f4c8d", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/923f356f49eed9877729f68d5591a4035b7f4c8d", "committedDate": "2020-06-11T11:48:49Z", "message": "TestMetricsStore test fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e481f99fff85ae6f695b519a008c7f14df95ffd4", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/e481f99fff85ae6f695b519a008c7f14df95ffd4", "committedDate": "2020-06-11T11:48:49Z", "message": "Only increment the memstore metric if all cells are from memstore, if\nnot treat as mixed reads"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0f89d5088e228a109bb859d18290b0769369c83", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/d0f89d5088e228a109bb859d18290b0769369c83", "committedDate": "2020-06-11T11:48:49Z", "message": "Remove metricsstore and aggregate at region level"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzkzMDc4", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-428793078", "createdAt": "2020-06-11T10:41:06Z", "commit": {"oid": "04836c048d54b44c533465377776c9a70e3fa101"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MTowNlrOGiX57Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMDo0MjozN1rOGiX8sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjQyOQ==", "bodyText": "Here the key will be <regionName>_<storeName>?\nAt this level we should call CF not store?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r438696429", "createdAt": "2020-06-11T10:41:06Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableSourceImpl.java", "diffHunk": "@@ -311,6 +322,27 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n         mrb.addGauge(Interns.info(tableNamePrefix + MetricsRegionServerSource.NUM_REFERENCE_FILES,\n             MetricsRegionServerSource.NUM_REFERENCE_FILES_DESC),\n             tableWrapperAgg.getNumReferenceFiles(tableName.getNameAsString()));\n+        addGauge(mrb, tableWrapperAgg.getMemstoreReadRequestsCount(tableName.getNameAsString()),\n+          MetricsRegionSource.READ_REQUEST_ON_MEMSTORE,\n+          MetricsRegionSource.READ_REQUEST_ON_MEMSTORE_DESC);\n+        addGauge(mrb, tableWrapperAgg.getMixedRequestsCount(tableName.getNameAsString()),\n+          MetricsRegionSource.MIXED_READ_REQUEST_ON_STORE,\n+          MetricsRegionSource.MIXED_READ_REQUEST_ON_STORE_DESC);\n+      }\n+    }\n+  }\n+\n+  private void addGauge(MetricsRecordBuilder mrb, Map<String, Long> metricMap, String metricName,\n+      String metricDesc) {\n+    if (metricMap != null) {\n+      Iterator<Entry<String, Long>> iterator = metricMap.entrySet().iterator();\n+      while (iterator.hasNext()) {\n+        Entry<String, Long> entry = iterator.next();\n+        // append 'store' and its name to the metric\n+        mrb.addGauge(Interns.info(this.tableNamePrefixPart1 + _STORE\n+            + entry.getKey().split(MetricsTableWrapperAggregate.UNDERSCORE)[1]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04836c048d54b44c533465377776c9a70e3fa101"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NzEzNw==", "bodyText": "We dont say whether it is read reqs in this method name.  This is the total  #rows reads from this Store right?  Can we name in that way and avoid the term mixed?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r438697137", "createdAt": "2020-06-11T10:42:37Z", "author": {"login": "anoopsjohn"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregate.java", "diffHunk": "@@ -107,6 +109,13 @@\n    */\n   long getNumReferenceFiles(String table);\n \n+  /**\n+   * @return number of get requests from memstore per store for this table\n+   */\n+  Map<String, Long> getMemstoreReadRequestsCount(String table);\n \n-\n+  /**\n+   * @return number of get requests from file per store for this table\n+   */\n+  Map<String, Long> getMixedRequestsCount(String table);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04836c048d54b44c533465377776c9a70e3fa101"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "committedDate": "2020-06-12T05:09:50Z", "message": "Addresses review comments-metric name updated everywhere"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04836c048d54b44c533465377776c9a70e3fa101", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/04836c048d54b44c533465377776c9a70e3fa101", "committedDate": "2020-06-03T14:23:49Z", "message": "Remove metricsstore and aggregate at region level"}, "afterCommit": {"oid": "66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/66d72cbff794b6ce4e1e815ed71d8ee3a7189a07", "committedDate": "2020-06-12T05:09:50Z", "message": "Addresses review comments-metric name updated everywhere"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a46d74fbdf256b342b7b06ab78e739cca17e3b8f", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/a46d74fbdf256b342b7b06ab78e739cca17e3b8f", "committedDate": "2020-06-12T10:42:13Z", "message": "Metric name change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTIwNjM5", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-429920639", "createdAt": "2020-06-12T17:32:37Z", "commit": {"oid": "a46d74fbdf256b342b7b06ab78e739cca17e3b8f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMjozN1rOGjMO7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNzozMjozN1rOGjMO7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTU1Mzc3NA==", "bodyText": "Is this a bug fix? (Like the one below) .. Can u explain .. Previously it was a config based thing and now hard coded.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r439553774", "createdAt": "2020-06-12T17:32:37Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableWrapperAggregateImpl.java", "diffHunk": "@@ -41,39 +40,42 @@\n   private final HRegionServer regionServer;\n   private ScheduledExecutorService executor;\n   private Runnable runnable;\n-  private long period;\n+  private static final int PERIOD = 45;\n   private ScheduledFuture<?> tableMetricsUpdateTask;\n   private ConcurrentHashMap<TableName, MetricsTableValues> metricsTableMap\n     = new ConcurrentHashMap<>();\n \n   public MetricsTableWrapperAggregateImpl(final HRegionServer regionServer) {\n     this.regionServer = regionServer;\n-    this.period = regionServer.getConfiguration().getLong(HConstants.REGIONSERVER_METRICS_PERIOD,\n-      HConstants.DEFAULT_REGIONSERVER_METRICS_PERIOD) + 1000;\n     this.executor = CompatibilitySingletonFactory.getInstance(MetricsExecutor.class).getExecutor();\n     this.runnable = new TableMetricsWrapperRunnable();\n-    this.tableMetricsUpdateTask = this.executor.scheduleWithFixedDelay(this.runnable, period,\n-      this.period, TimeUnit.MILLISECONDS);\n+    this.tableMetricsUpdateTask = this.executor.scheduleWithFixedDelay(this.runnable, PERIOD,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d74fbdf256b342b7b06ab78e739cca17e3b8f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4252420b08217bd33ee15f890bc791769640a4ab", "author": {"user": {"login": "ramkrish86", "name": null}}, "url": "https://github.com/apache/hbase/commit/4252420b08217bd33ee15f890bc791769640a4ab", "committedDate": "2020-06-13T14:52:40Z", "message": "Review comment changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjE4NjY5", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-430618669", "createdAt": "2020-06-15T12:59:59Z", "commit": {"oid": "4252420b08217bd33ee15f890bc791769640a4ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjIxNDc1", "url": "https://github.com/apache/hbase/pull/1552#pullrequestreview-431621475", "createdAt": "2020-06-16T15:20:01Z", "commit": {"oid": "4252420b08217bd33ee15f890bc791769640a4ab"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToyMDowMVrOGkgkmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToyNTo1M1rOGkg34w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNTU3Nw==", "bodyText": "We still need this count? We don't have it already with the general read count?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440935577", "createdAt": "2020-06-16T15:20:01Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -302,6 +308,24 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n               regionNamePrefix + MetricsRegionSource.MAX_FLUSH_QUEUE_SIZE,\n               MetricsRegionSource.MAX_FLUSH_QUEUE_DESC),\n           this.regionWrapper.getMaxFlushQueueSize());\n+      addCounter(mrb, this.regionWrapper.getMemstoreOnlyRowReadsCount(),\n+        MetricsRegionSource.ROW_READS_ONLY_ON_MEMSTORE,\n+        MetricsRegionSource.ROW_READS_ONLY_ON_MEMSTORE_DESC);\n+      addCounter(mrb, this.regionWrapper.getMixedRowReadsCount(),\n+        MetricsRegionSource.MIXED_ROW_READS,\n+        MetricsRegionSource.MIXED_ROW_READS_ON_STORE_DESC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4252420b08217bd33ee15f890bc791769640a4ab"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNzQxNA==", "bodyText": "This 'metric' addition to name was of no value?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440937414", "createdAt": "2020-06-16T15:21:51Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -77,10 +83,10 @@ public MetricsRegionSourceImpl(MetricsRegionWrapper regionWrapper,\n \n     registry = agg.getMetricsRegistry();\n \n-    regionNamePrefix = \"Namespace_\" + regionWrapper.getNamespace() +\n-        \"_table_\" + regionWrapper.getTableName() +\n-        \"_region_\" + regionWrapper.getRegionName()  +\n-        \"_metric_\";\n+    regionNamePrefix1 = \"Namespace_\" + regionWrapper.getNamespace() + \"_table_\"\n+        + regionWrapper.getTableName() + \"_region_\" + regionWrapper.getRegionName();\n+    regionNamePrefix2 = \"_metric_\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4252420b08217bd33ee15f890bc791769640a4ab"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzODIxOA==", "bodyText": "Yeah, do we need to keep this count? It doesn't overlap w/ another?", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440938218", "createdAt": "2020-06-16T15:22:49Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionWrapper.java", "diffHunk": "@@ -170,4 +172,15 @@\n    *   all compacted store files that belong to this region\n    */\n   long getMaxCompactedStoreFileRefCount();\n+\n+  /**\n+   * @return the number of row reads completely on memstore per store\n+   */\n+  Map<String, Long> getMemstoreOnlyRowReadsCount();\n+\n+  /**\n+   * @return the number of row reads on memstore and file per store\n+   */\n+  Map<String, Long> getMixedRowReadsCount();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4252420b08217bd33ee15f890bc791769640a4ab"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzOTY4OA==", "bodyText": "This looks like it was addressed.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440939688", "createdAt": "2020-06-16T15:24:50Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsTableSourceImpl.java", "diffHunk": "@@ -311,6 +322,27 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n         mrb.addGauge(Interns.info(tableNamePrefix + MetricsRegionServerSource.NUM_REFERENCE_FILES,\n             MetricsRegionServerSource.NUM_REFERENCE_FILES_DESC),\n             tableWrapperAgg.getNumReferenceFiles(tableName.getNameAsString()));\n+        addGauge(mrb, tableWrapperAgg.getMemstoreReadRequestsCount(tableName.getNameAsString()),\n+          MetricsRegionSource.READ_REQUEST_ON_MEMSTORE,\n+          MetricsRegionSource.READ_REQUEST_ON_MEMSTORE_DESC);\n+        addGauge(mrb, tableWrapperAgg.getMixedRequestsCount(tableName.getNameAsString()),\n+          MetricsRegionSource.MIXED_READ_REQUEST_ON_STORE,\n+          MetricsRegionSource.MIXED_READ_REQUEST_ON_STORE_DESC);\n+      }\n+    }\n+  }\n+\n+  private void addGauge(MetricsRecordBuilder mrb, Map<String, Long> metricMap, String metricName,\n+      String metricDesc) {\n+    if (metricMap != null) {\n+      Iterator<Entry<String, Long>> iterator = metricMap.entrySet().iterator();\n+      while (iterator.hasNext()) {\n+        Entry<String, Long> entry = iterator.next();\n+        // append 'store' and its name to the metric\n+        mrb.addGauge(Interns.info(this.tableNamePrefixPart1 + _STORE\n+            + entry.getKey().split(MetricsTableWrapperAggregate.UNDERSCORE)[1]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY5NjQyOQ=="}, "originalCommit": {"oid": "04836c048d54b44c533465377776c9a70e3fa101"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0MDUxNQ==", "bodyText": "My aversion to the extra counting is that we already do so much; it costs us loads in cpu. Was trying to do less if we can.", "url": "https://github.com/apache/hbase/pull/1552#discussion_r440940515", "createdAt": "2020-06-16T15:25:53Z", "author": {"login": "saintstack"}, "path": "hbase-hadoop-compat/src/main/java/org/apache/hadoop/hbase/regionserver/MetricsRegionSourceImpl.java", "diffHunk": "@@ -302,6 +308,24 @@ void snapshot(MetricsRecordBuilder mrb, boolean ignored) {\n               regionNamePrefix + MetricsRegionSource.MAX_FLUSH_QUEUE_SIZE,\n               MetricsRegionSource.MAX_FLUSH_QUEUE_DESC),\n           this.regionWrapper.getMaxFlushQueueSize());\n+      addCounter(mrb, this.regionWrapper.getMemstoreOnlyRowReadsCount(),\n+        MetricsRegionSource.ROW_READS_ONLY_ON_MEMSTORE,\n+        MetricsRegionSource.ROW_READS_ONLY_ON_MEMSTORE_DESC);\n+      addCounter(mrb, this.regionWrapper.getMixedRowReadsCount(),\n+        MetricsRegionSource.MIXED_ROW_READS,\n+        MetricsRegionSource.MIXED_ROW_READS_ON_STORE_DESC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNTU3Nw=="}, "originalCommit": {"oid": "4252420b08217bd33ee15f890bc791769640a4ab"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2204, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}