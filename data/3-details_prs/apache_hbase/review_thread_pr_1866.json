{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDE4NTk3", "number": 1866, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToxMTowOVrOEDZgLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToxMzoyNFrOEDZifQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTk5MDIyOnYy", "diffSide": "LEFT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToxMTowOVrOGgZJ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODoxMDoyM1rOGhpvAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTc1Ng==", "bodyText": "Donot need lock because the master was started now? No other procedures runed at the same time?", "url": "https://github.com/apache/hbase/pull/1866#discussion_r436619756", "createdAt": "2020-06-08T11:11:09Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java", "diffHunk": "@@ -231,17 +231,15 @@ public void start() throws IOException, KeeperException {\n       RegionState regionState = MetaTableLocator.getMetaRegionState(zkw);\n       RegionStateNode regionNode =\n         regionStates.getOrCreateRegionStateNode(RegionInfoBuilder.FIRST_META_REGIONINFO);\n-      regionNode.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzOTI4Ng==", "bodyText": "No. As you said, no procedures yet and no concurrent call to this method either. The code is written by me but now I think adding the lock here will make people confusing, let's just remove it.", "url": "https://github.com/apache/hbase/pull/1866#discussion_r436639286", "createdAt": "2020-06-08T11:55:23Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java", "diffHunk": "@@ -231,17 +231,15 @@ public void start() throws IOException, KeeperException {\n       RegionState regionState = MetaTableLocator.getMetaRegionState(zkw);\n       RegionStateNode regionNode =\n         regionStates.getOrCreateRegionStateNode(RegionInfoBuilder.FIRST_META_REGIONINFO);\n-      regionNode.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTc1Ng=="}, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk2NTAzMw==", "bodyText": "We need a note here? Normally, we want to lock RegionNode because we do not want concurrent modifications happening. I see this is happening early in startup so should be safe. I do notice that the RpcServer is up by the time we get to here but Master is not active yet so we can't get requests at this point?", "url": "https://github.com/apache/hbase/pull/1866#discussion_r436965033", "createdAt": "2020-06-08T19:58:03Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java", "diffHunk": "@@ -231,17 +231,15 @@ public void start() throws IOException, KeeperException {\n       RegionState regionState = MetaTableLocator.getMetaRegionState(zkw);\n       RegionStateNode regionNode =\n         regionStates.getOrCreateRegionStateNode(RegionInfoBuilder.FIRST_META_REGIONINFO);\n-      regionNode.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTc1Ng=="}, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2NzA5OQ==", "bodyText": "no procedures yet and no concurrent call to this method\n\nNit: Add this comment here?", "url": "https://github.com/apache/hbase/pull/1866#discussion_r437067099", "createdAt": "2020-06-09T00:10:27Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java", "diffHunk": "@@ -231,17 +231,15 @@ public void start() throws IOException, KeeperException {\n       RegionState regionState = MetaTableLocator.getMetaRegionState(zkw);\n       RegionStateNode regionNode =\n         regionStates.getOrCreateRegionStateNode(RegionInfoBuilder.FIRST_META_REGIONINFO);\n-      regionNode.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTc1Ng=="}, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzOTk3MA==", "bodyText": "Let me add comments. Missed this one.", "url": "https://github.com/apache/hbase/pull/1866#discussion_r437939970", "createdAt": "2020-06-10T08:10:23Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/assignment/AssignmentManager.java", "diffHunk": "@@ -231,17 +231,15 @@ public void start() throws IOException, KeeperException {\n       RegionState regionState = MetaTableLocator.getMetaRegionState(zkw);\n       RegionStateNode regionNode =\n         regionStates.getOrCreateRegionStateNode(RegionInfoBuilder.FIRST_META_REGIONINFO);\n-      regionNode.lock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYxOTc1Ng=="}, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTk5NjEzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestAssignmentManagerLoadMetaRegionState.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMToxMzoyNFrOGgZNoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwODowNzoyNVrOGhpobg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyMDcwNA==", "bodyText": "Without this patch, the newRegions will not contains meta region?", "url": "https://github.com/apache/hbase/pull/1866#discussion_r436620704", "createdAt": "2020-06-08T11:13:24Z", "author": {"login": "infraio"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestAssignmentManagerLoadMetaRegionState.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master.assignment;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.HMaster;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestAssignmentManagerLoadMetaRegionState {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestAssignmentManagerLoadMetaRegionState.class);\n+\n+  private static final HBaseTestingUtility UTIL = new HBaseTestingUtility();\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    UTIL.startMiniCluster(1);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws IOException {\n+    UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Test\n+  public void testRestart() throws InterruptedException, IOException {\n+    ServerName sn = UTIL.getMiniHBaseCluster().getRegionServer(0).getServerName();\n+    AssignmentManager am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    Set<RegionInfo> regions = new HashSet<>(am.getRegionsOnServer(sn));\n+\n+    UTIL.getMiniHBaseCluster().stopMaster(0).join();\n+    HMaster newMaster = UTIL.getMiniHBaseCluster().startMaster().getMaster();\n+    UTIL.waitFor(30000, () -> newMaster.isInitialized());\n+\n+    am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    List<RegionInfo> newRegions = am.getRegionsOnServer(sn);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYzOTM3NQ==", "bodyText": "Exactly.", "url": "https://github.com/apache/hbase/pull/1866#discussion_r436639375", "createdAt": "2020-06-08T11:55:34Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestAssignmentManagerLoadMetaRegionState.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master.assignment;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.HMaster;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestAssignmentManagerLoadMetaRegionState {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestAssignmentManagerLoadMetaRegionState.class);\n+\n+  private static final HBaseTestingUtility UTIL = new HBaseTestingUtility();\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    UTIL.startMiniCluster(1);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws IOException {\n+    UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Test\n+  public void testRestart() throws InterruptedException, IOException {\n+    ServerName sn = UTIL.getMiniHBaseCluster().getRegionServer(0).getServerName();\n+    AssignmentManager am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    Set<RegionInfo> regions = new HashSet<>(am.getRegionsOnServer(sn));\n+\n+    UTIL.getMiniHBaseCluster().stopMaster(0).join();\n+    HMaster newMaster = UTIL.getMiniHBaseCluster().startMaster().getMaster();\n+    UTIL.waitFor(30000, () -> newMaster.isInitialized());\n+\n+    am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    List<RegionInfo> newRegions = am.getRegionsOnServer(sn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyMDcwNA=="}, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4MTMxMg==", "bodyText": "How does the lock interfere here?", "url": "https://github.com/apache/hbase/pull/1866#discussion_r436981312", "createdAt": "2020-06-08T20:29:45Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestAssignmentManagerLoadMetaRegionState.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master.assignment;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.HMaster;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestAssignmentManagerLoadMetaRegionState {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestAssignmentManagerLoadMetaRegionState.class);\n+\n+  private static final HBaseTestingUtility UTIL = new HBaseTestingUtility();\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    UTIL.startMiniCluster(1);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws IOException {\n+    UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Test\n+  public void testRestart() throws InterruptedException, IOException {\n+    ServerName sn = UTIL.getMiniHBaseCluster().getRegionServer(0).getServerName();\n+    AssignmentManager am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    Set<RegionInfo> regions = new HashSet<>(am.getRegionsOnServer(sn));\n+\n+    UTIL.getMiniHBaseCluster().stopMaster(0).join();\n+    HMaster newMaster = UTIL.getMiniHBaseCluster().startMaster().getMaster();\n+    UTIL.waitFor(30000, () -> newMaster.isInitialized());\n+\n+    am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    List<RegionInfo> newRegions = am.getRegionsOnServer(sn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyMDcwNA=="}, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzODI4Ng==", "bodyText": "The lock is not the problem. The problem is we forgot to call regionStates.addRegionToServer.", "url": "https://github.com/apache/hbase/pull/1866#discussion_r437938286", "createdAt": "2020-06-10T08:07:25Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/assignment/TestAssignmentManagerLoadMetaRegionState.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.master.assignment;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.ServerName;\n+import org.apache.hadoop.hbase.client.RegionInfo;\n+import org.apache.hadoop.hbase.master.HMaster;\n+import org.apache.hadoop.hbase.testclassification.MasterTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+@Category({ MasterTests.class, MediumTests.class })\n+public class TestAssignmentManagerLoadMetaRegionState {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+    HBaseClassTestRule.forClass(TestAssignmentManagerLoadMetaRegionState.class);\n+\n+  private static final HBaseTestingUtility UTIL = new HBaseTestingUtility();\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    UTIL.startMiniCluster(1);\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() throws IOException {\n+    UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Test\n+  public void testRestart() throws InterruptedException, IOException {\n+    ServerName sn = UTIL.getMiniHBaseCluster().getRegionServer(0).getServerName();\n+    AssignmentManager am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    Set<RegionInfo> regions = new HashSet<>(am.getRegionsOnServer(sn));\n+\n+    UTIL.getMiniHBaseCluster().stopMaster(0).join();\n+    HMaster newMaster = UTIL.getMiniHBaseCluster().startMaster().getMaster();\n+    UTIL.waitFor(30000, () -> newMaster.isInitialized());\n+\n+    am = UTIL.getMiniHBaseCluster().getMaster().getAssignmentManager();\n+    List<RegionInfo> newRegions = am.getRegionsOnServer(sn);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYyMDcwNA=="}, "originalCommit": {"oid": "52ba9051b6a10651ca9ad2e988040748c276fab7"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2954, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}