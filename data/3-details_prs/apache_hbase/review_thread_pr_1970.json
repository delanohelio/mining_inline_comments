{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5Njc4Mjk5", "number": 1970, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjozMDo1OFrOEIvQ7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToyOTozOVrOEL0QPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTk4NDQ3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMjozMDo1OFrOGo4cDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToyMDo0MlrOGtkHnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA==", "bodyText": "Use an AtomicLong?", "url": "https://github.com/apache/hbase/pull/1970#discussion_r445520908", "createdAt": "2020-06-25T12:30:58Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java", "diffHunk": "@@ -46,6 +46,10 @@\n \n   protected FSDataOutputStream output;\n \n+  private volatile long syncedLength = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60abb396591039f211a000e641e849e59bb733fb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk0MzIyOQ==", "bodyText": "seems that using AtomicLong is unnecessary, because AtomicLong could not provide update if greater than semantics,  so I used synchronized keyword here when updating the syncedLength for simplicity", "url": "https://github.com/apache/hbase/pull/1970#discussion_r445943229", "createdAt": "2020-06-26T03:00:54Z", "author": {"login": "comnetwork"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java", "diffHunk": "@@ -46,6 +46,10 @@\n \n   protected FSDataOutputStream output;\n \n+  private volatile long syncedLength = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}, "originalCommit": {"oid": "60abb396591039f211a000e641e849e59bb733fb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2ODE4OQ==", "bodyText": "Use AtomicUtils.updateMax. It is a util class in hbase-common.", "url": "https://github.com/apache/hbase/pull/1970#discussion_r447768189", "createdAt": "2020-06-30T15:20:37Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java", "diffHunk": "@@ -46,6 +46,10 @@\n \n   protected FSDataOutputStream output;\n \n+  private volatile long syncedLength = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}, "originalCommit": {"oid": "60abb396591039f211a000e641e849e59bb733fb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODcxNTEwNg==", "bodyText": "Used AtomicUtils to replace synchronized, thank you very much.", "url": "https://github.com/apache/hbase/pull/1970#discussion_r448715106", "createdAt": "2020-07-02T02:35:17Z", "author": {"login": "comnetwork"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java", "diffHunk": "@@ -46,6 +46,10 @@\n \n   protected FSDataOutputStream output;\n \n+  private volatile long syncedLength = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}, "originalCommit": {"oid": "60abb396591039f211a000e641e849e59bb733fb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzMDg3OQ==", "bodyText": "nit: why do we have AtomicUtils.updateMax? It seems getAndAccumulate is designed for this use case, i.e., syncedLength.getAndAccumulate(fsdos.getPos(), Math::max)", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450430879", "createdAt": "2020-07-06T19:20:42Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/ProtobufLogWriter.java", "diffHunk": "@@ -46,6 +46,10 @@\n \n   protected FSDataOutputStream output;\n \n+  private volatile long syncedLength = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTUyMDkwOA=="}, "originalCommit": {"oid": "60abb396591039f211a000e641e849e59bb733fb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODU1MjQ2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoxMjo1NFrOGsMQ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDoxMDowNFrOGsxkPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MTQ1Ng==", "bodyText": "Do not need to use pre here? These are just normal text.", "url": "https://github.com/apache/hbase/pull/1970#discussion_r448991456", "createdAt": "2020-07-02T13:12:54Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java", "diffHunk": "@@ -74,6 +74,22 @@\n \n   interface WriterBase extends Closeable {\n     long getLength();\n+    /**\n+     * <pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a31b8660d29e6b25921b40498441793e1fcb41c4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMjYyMw==", "bodyText": "ok, I would fix it.", "url": "https://github.com/apache/hbase/pull/1970#discussion_r449602623", "createdAt": "2020-07-03T14:10:04Z", "author": {"login": "comnetwork"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALProvider.java", "diffHunk": "@@ -74,6 +74,22 @@\n \n   interface WriterBase extends Closeable {\n     long getLength();\n+    /**\n+     * <pre>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5MTQ1Ng=="}, "originalCommit": {"oid": "a31b8660d29e6b25921b40498441793e1fcb41c4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODI1OTE3OnYy", "diffSide": "RIGHT", "path": "hbase-asyncfs/src/main/java/org/apache/hadoop/hbase/io/asyncfs/WrapperAsyncFSOutput.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToyOTozOVrOGtkYpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwMjoyNzo0NlrOGttC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzNTIzOQ==", "bodyText": "This read-followedby-update also needs to be atomic, yes?", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450435239", "createdAt": "2020-07-06T19:29:39Z", "author": {"login": "ndimiduk"}, "path": "hbase-asyncfs/src/main/java/org/apache/hadoop/hbase/io/asyncfs/WrapperAsyncFSOutput.java", "diffHunk": "@@ -91,7 +93,11 @@ private void flush0(CompletableFuture<Long> future, ByteArrayOutputStream buffer\n           out.hflush();\n         }\n       }\n-      future.complete(out.getPos());\n+      long pos = out.getPos();\n+      if(pos > this.syncedLength) {\n+        this.syncedLength = pos;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f33ed001b70c62bbd341132e3adb1c72627c9c46"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU2OTMzOQ==", "bodyText": "This one is just for test so not a big problem but aligning with other producation implementations is better. Can have an addendum.", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450569339", "createdAt": "2020-07-07T01:57:52Z", "author": {"login": "Apache9"}, "path": "hbase-asyncfs/src/main/java/org/apache/hadoop/hbase/io/asyncfs/WrapperAsyncFSOutput.java", "diffHunk": "@@ -91,7 +93,11 @@ private void flush0(CompletableFuture<Long> future, ByteArrayOutputStream buffer\n           out.hflush();\n         }\n       }\n-      future.complete(out.getPos());\n+      long pos = out.getPos();\n+      if(pos > this.syncedLength) {\n+        this.syncedLength = pos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzNTIzOQ=="}, "originalCommit": {"oid": "f33ed001b70c62bbd341132e3adb1c72627c9c46"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDU3NzEyOQ==", "bodyText": "Oh, reviewed the code again, actuall, the flush0 method can only be executed in a single thread so no need to use AtomicUtils.updateMax. The AtomicLong is in the ProtobufLogWriter, not the output stream. But the 'if(pos > this.syncedLength) {' is a bit confusing to developers, I prefer we just remove this check...", "url": "https://github.com/apache/hbase/pull/1970#discussion_r450577129", "createdAt": "2020-07-07T02:27:46Z", "author": {"login": "Apache9"}, "path": "hbase-asyncfs/src/main/java/org/apache/hadoop/hbase/io/asyncfs/WrapperAsyncFSOutput.java", "diffHunk": "@@ -91,7 +93,11 @@ private void flush0(CompletableFuture<Long> future, ByteArrayOutputStream buffer\n           out.hflush();\n         }\n       }\n-      future.complete(out.getPos());\n+      long pos = out.getPos();\n+      if(pos > this.syncedLength) {\n+        this.syncedLength = pos;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQzNTIzOQ=="}, "originalCommit": {"oid": "f33ed001b70c62bbd341132e3adb1c72627c9c46"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2863, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}