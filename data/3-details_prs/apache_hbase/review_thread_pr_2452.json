{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMzIyNjg3", "number": 2452, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyMzowMlrOEnJPsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNzowOFrOE1HTSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDgxMzk0OnYy", "diffSide": "RIGHT", "path": "hbase-protocol-shaded/src/main/protobuf/server/master/Master.proto", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyMzowMlrOHXlEMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyMDowMVrOHXw0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjU3Ng==", "bodyText": "Is this right name for the attribute? The method name for a boolean should be isATTRIBUTE but the ATTRIBUTE itself should not have the 'is' prefix.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494486576", "createdAt": "2020-09-24T17:23:02Z", "author": {"login": "saintstack"}, "path": "hbase-protocol-shaded/src/main/protobuf/server/master/Master.proto", "diffHunk": "@@ -721,7 +721,8 @@ message ListReplicationSinkServersRequest {\n }\n \n message ListReplicationSinkServersResponse {\n-  repeated ServerName server_name = 1;\n+  required bool is_replication_server = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NzAxNg==", "bodyText": "Oh, you can't change the protobuf index.... it breaks compatibility. Give the replication_server '2' and leave server_name as '1'.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494487016", "createdAt": "2020-09-24T17:23:48Z", "author": {"login": "saintstack"}, "path": "hbase-protocol-shaded/src/main/protobuf/server/master/Master.proto", "diffHunk": "@@ -721,7 +721,8 @@ message ListReplicationSinkServersRequest {\n }\n \n message ListReplicationSinkServersResponse {\n-  repeated ServerName server_name = 1;\n+  required bool is_replication_server = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjU3Ng=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3OTIzNA==", "bodyText": "This is only for the feature branch. Not merged to any branch now.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494679234", "createdAt": "2020-09-25T00:20:01Z", "author": {"login": "infraio"}, "path": "hbase-protocol-shaded/src/main/protobuf/server/master/Master.proto", "diffHunk": "@@ -721,7 +721,8 @@ message ListReplicationSinkServersRequest {\n }\n \n message ListReplicationSinkServersResponse {\n-  repeated ServerName server_name = 1;\n+  required bool is_replication_server = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjU3Ng=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDgyMzAxOnYy", "diffSide": "RIGHT", "path": "hbase-protocol-shaded/src/main/protobuf/server/replication/ReplicationServer.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyNToxOVrOHXlJmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyMDo1NVrOHXw1uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4Nzk2MA==", "bodyText": "Does the replication server belong in the core? Should it be done outside in hbase-operator-tools? Just add the communication bits to core?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494487960", "createdAt": "2020-09-24T17:25:19Z", "author": {"login": "saintstack"}, "path": "hbase-protocol-shaded/src/main/protobuf/server/replication/ReplicationServer.proto", "diffHunk": "@@ -24,9 +24,21 @@ option java_generic_services = true;\n option java_generate_equals_and_hash = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3OTQ4Mw==", "bodyText": "Yes, in the core. The HReplicationServer will be a new role in one HBase cluster.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494679483", "createdAt": "2020-09-25T00:20:55Z", "author": {"login": "infraio"}, "path": "hbase-protocol-shaded/src/main/protobuf/server/replication/ReplicationServer.proto", "diffHunk": "@@ -24,9 +24,21 @@ option java_generic_services = true;\n option java_generate_equals_and_hash = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4Nzk2MA=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDgzMjE2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HBaseReplicationEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyNzo1OFrOHXlPfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyNzo1OFrOHXlPfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4OTQ3MA==", "bodyText": "Yeah, boolean should be named replicationServer and the method to access this data member is named isReplicationServer.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494489470", "createdAt": "2020-09-24T17:27:58Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HBaseReplicationEndpoint.java", "diffHunk": "@@ -118,6 +118,7 @@\n   private boolean fetchServersUseZk = false;\n   private FetchServersChore fetchServersChore;\n   private int shortOperationTimeout;\n+  private boolean isReplicationServer = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDgzNTQ5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HBaseReplicationEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyODo1NFrOHXlRmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMToyNzoxNlrOHXx2mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MDAwOA==", "bodyText": "Do you have to do hasReplicationServer first? And then read it if present? Or maybe this defaults false if not present?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494490008", "createdAt": "2020-09-24T17:28:54Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HBaseReplicationEndpoint.java", "diffHunk": "@@ -295,6 +296,7 @@ private synchronized AsyncClusterConnection getPeerConnection() throws IOExcepti\n           .createBlockingRpcChannel(master, User.getCurrent(), shortOperationTimeout));\n       ListReplicationSinkServersResponse resp = masterStub\n         .listReplicationSinkServers(null, ListReplicationSinkServersRequest.newBuilder().build());\n+      isReplicationServer = resp.getIsReplicationServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5NjA4OQ==", "bodyText": "This field is required. So not need to check hasReplicationServer first?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494696089", "createdAt": "2020-09-25T01:27:16Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HBaseReplicationEndpoint.java", "diffHunk": "@@ -295,6 +296,7 @@ private synchronized AsyncClusterConnection getPeerConnection() throws IOExcepti\n           .createBlockingRpcChannel(master, User.getCurrent(), shortOperationTimeout));\n       ListReplicationSinkServersResponse resp = masterStub\n         .listReplicationSinkServers(null, ListReplicationSinkServersRequest.newBuilder().build());\n+      isReplicationServer = resp.getIsReplicationServer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MDAwOA=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDgzODU4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyOTo0N1rOHXlTkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyMTozM1rOHXw2eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MDUxMw==", "bodyText": "Looks like ReplicationServer already committed (why have the 'H' prefix?)", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494490513", "createdAt": "2020-09-24T17:29:47Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -50,7 +72,7 @@\n  */\n @InterfaceAudience.Private\n @SuppressWarnings({ \"deprecation\"})\n-public class HReplicationServer extends Thread implements Server {\n+public class HReplicationServer extends Thread implements Server, ReplicationSourceController  {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3OTY3Mg==", "bodyText": "Only for the feature branch HBASE-24666.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494679672", "createdAt": "2020-09-25T00:21:33Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -50,7 +72,7 @@\n  */\n @InterfaceAudience.Private\n @SuppressWarnings({ \"deprecation\"})\n-public class HReplicationServer extends Thread implements Server {\n+public class HReplicationServer extends Thread implements Server, ReplicationSourceController  {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MDUxMw=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDg0MzkzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzozMToxMFrOHXlW9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDoyMzoyMVrOHXw4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MTM4MA==", "bodyText": "We have to do this? Just because we do it for HMaster and HRegionServer, it doesn't make it a good pattern. This is an Interface to pass instead of the impl?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494491380", "createdAt": "2020-09-24T17:31:10Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -78,27 +104,44 @@\n    */\n   private ServerName serverName;\n \n-  protected final Configuration conf;\n+  private final Configuration conf;\n \n-  private ReplicationSinkService replicationSinkService;\n+  // zookeeper connection and watcher\n+  private final ZKWatcher zooKeeper;\n \n-  final int msgInterval;\n-  // A sleeper that sleeps for msgInterval.\n-  protected final Sleeper sleeper;\n+  private final UUID clusterId;\n \n-  // zookeeper connection and watcher\n-  protected final ZKWatcher zooKeeper;\n+  private HFileSystem walFs;\n+  private Path walRootDir;\n+\n+  /**\n+   * ChoreService used to schedule tasks that we want to run periodically\n+   */\n+  private ChoreService choreService;\n \n   /**\n    * The asynchronous cluster connection to be shared by services.\n    */\n-  protected AsyncClusterConnection asyncClusterConnection;\n+  private AsyncClusterConnection asyncClusterConnection;\n \n   private UserProvider userProvider;\n \n-  protected final ReplicationServerRpcServices rpcServices;\n+  private final ReplicationServerRpcServices rpcServices;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MTU1NQ==", "bodyText": "Maybe it is to mock?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494491555", "createdAt": "2020-09-24T17:31:25Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -78,27 +104,44 @@\n    */\n   private ServerName serverName;\n \n-  protected final Configuration conf;\n+  private final Configuration conf;\n \n-  private ReplicationSinkService replicationSinkService;\n+  // zookeeper connection and watcher\n+  private final ZKWatcher zooKeeper;\n \n-  final int msgInterval;\n-  // A sleeper that sleeps for msgInterval.\n-  protected final Sleeper sleeper;\n+  private final UUID clusterId;\n \n-  // zookeeper connection and watcher\n-  protected final ZKWatcher zooKeeper;\n+  private HFileSystem walFs;\n+  private Path walRootDir;\n+\n+  /**\n+   * ChoreService used to schedule tasks that we want to run periodically\n+   */\n+  private ChoreService choreService;\n \n   /**\n    * The asynchronous cluster connection to be shared by services.\n    */\n-  protected AsyncClusterConnection asyncClusterConnection;\n+  private AsyncClusterConnection asyncClusterConnection;\n \n   private UserProvider userProvider;\n \n-  protected final ReplicationServerRpcServices rpcServices;\n+  private final ReplicationServerRpcServices rpcServices;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MTM4MA=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MDExOA==", "bodyText": "I am ok with this. Decouple a RpcService can make the code more clearly.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494680118", "createdAt": "2020-09-25T00:23:21Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -78,27 +104,44 @@\n    */\n   private ServerName serverName;\n \n-  protected final Configuration conf;\n+  private final Configuration conf;\n \n-  private ReplicationSinkService replicationSinkService;\n+  // zookeeper connection and watcher\n+  private final ZKWatcher zooKeeper;\n \n-  final int msgInterval;\n-  // A sleeper that sleeps for msgInterval.\n-  protected final Sleeper sleeper;\n+  private final UUID clusterId;\n \n-  // zookeeper connection and watcher\n-  protected final ZKWatcher zooKeeper;\n+  private HFileSystem walFs;\n+  private Path walRootDir;\n+\n+  /**\n+   * ChoreService used to schedule tasks that we want to run periodically\n+   */\n+  private ChoreService choreService;\n \n   /**\n    * The asynchronous cluster connection to be shared by services.\n    */\n-  protected AsyncClusterConnection asyncClusterConnection;\n+  private AsyncClusterConnection asyncClusterConnection;\n \n   private UserProvider userProvider;\n \n-  protected final ReplicationServerRpcServices rpcServices;\n+  private final ReplicationServerRpcServices rpcServices;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MTM4MA=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDg1MDUzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzozMjo1OFrOHXlbLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDozODo1M1rOHXxJPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MjQ2MQ==", "bodyText": "Is this stuff normally inside a ReplicationSourceManager? Or maybe the Replication instance? Can you not use these instead?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494492461", "createdAt": "2020-09-24T17:32:58Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -78,27 +104,44 @@\n    */\n   private ServerName serverName;\n \n-  protected final Configuration conf;\n+  private final Configuration conf;\n \n-  private ReplicationSinkService replicationSinkService;\n+  // zookeeper connection and watcher\n+  private final ZKWatcher zooKeeper;\n \n-  final int msgInterval;\n-  // A sleeper that sleeps for msgInterval.\n-  protected final Sleeper sleeper;\n+  private final UUID clusterId;\n \n-  // zookeeper connection and watcher\n-  protected final ZKWatcher zooKeeper;\n+  private HFileSystem walFs;\n+  private Path walRootDir;\n+\n+  /**\n+   * ChoreService used to schedule tasks that we want to run periodically\n+   */\n+  private ChoreService choreService;\n \n   /**\n    * The asynchronous cluster connection to be shared by services.\n    */\n-  protected AsyncClusterConnection asyncClusterConnection;\n+  private AsyncClusterConnection asyncClusterConnection;\n \n   private UserProvider userProvider;\n \n-  protected final ReplicationServerRpcServices rpcServices;\n+  private final ReplicationServerRpcServices rpcServices;\n+\n+  // Total buffer size on this RegionServer for holding batched edits to be shipped.\n+  private final long totalBufferLimit;\n+  private AtomicLong totalBufferUsed = new AtomicLong();\n+\n+  private final MetricsReplicationGlobalSourceSource globalMetrics;\n+  private final Map<String, MetricsSource> sourceMetrics = new HashMap<>();\n+  private final ConcurrentMap<String, ReplicationSourceInterface> sources = new ConcurrentHashMap<>();\n+\n+  private final ReplicationQueueStorage queueStorage;\n+  private final ReplicationPeers replicationPeers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NDQ3Nw==", "bodyText": "The key thing of this feature is here. The new HReplicationServer will be a independent server which manage some ReplicationSource.\nThe assumption here is that: Replication is a producer-consumer module. The \"producer\" RegionServer write WAL to HDFS and write WAL name to a replication queue, which can be identified by <RegionServer ServerName, QueueId>. The \"consumer\" ReplicationSource fetch the WAL name from the replication queue and read the WAL from HDFS and replicate to other HBase Clusters or other Systems.\nWhen replication offload enabled, ReplicationSourceManager will only wirte the WAL name to the replication queue. But not start any ReplicationSource. HMaster get all replication queues and assign them to many ReplicationServers. Same with the region balancer, HMaster called a StartReplicationSource rpc to the ReplicationServer. Then the ReplicationServer will start a ReplicationSource thread to do the replication job.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494684477", "createdAt": "2020-09-25T00:38:53Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -78,27 +104,44 @@\n    */\n   private ServerName serverName;\n \n-  protected final Configuration conf;\n+  private final Configuration conf;\n \n-  private ReplicationSinkService replicationSinkService;\n+  // zookeeper connection and watcher\n+  private final ZKWatcher zooKeeper;\n \n-  final int msgInterval;\n-  // A sleeper that sleeps for msgInterval.\n-  protected final Sleeper sleeper;\n+  private final UUID clusterId;\n \n-  // zookeeper connection and watcher\n-  protected final ZKWatcher zooKeeper;\n+  private HFileSystem walFs;\n+  private Path walRootDir;\n+\n+  /**\n+   * ChoreService used to schedule tasks that we want to run periodically\n+   */\n+  private ChoreService choreService;\n \n   /**\n    * The asynchronous cluster connection to be shared by services.\n    */\n-  protected AsyncClusterConnection asyncClusterConnection;\n+  private AsyncClusterConnection asyncClusterConnection;\n \n   private UserProvider userProvider;\n \n-  protected final ReplicationServerRpcServices rpcServices;\n+  private final ReplicationServerRpcServices rpcServices;\n+\n+  // Total buffer size on this RegionServer for holding batched edits to be shipped.\n+  private final long totalBufferLimit;\n+  private AtomicLong totalBufferUsed = new AtomicLong();\n+\n+  private final MetricsReplicationGlobalSourceSource globalMetrics;\n+  private final Map<String, MetricsSource> sourceMetrics = new HashMap<>();\n+  private final ConcurrentMap<String, ReplicationSourceInterface> sources = new ConcurrentHashMap<>();\n+\n+  private final ReplicationQueueStorage queueStorage;\n+  private final ReplicationPeers replicationPeers;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MjQ2MQ=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDg1NjU3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzozNDoyOFrOHXlezw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzozNDoyOFrOHXlezw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MzM5MQ==", "bodyText": "Undo this change. Misspelling.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494493391", "createdAt": "2020-09-24T17:34:28Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/HReplicationServer.java", "diffHunk": "@@ -226,13 +302,16 @@ protected final synchronized void setupClusterConnection() throws IOException {\n   }\n \n   /**\n-   * Wait on all threads to finish. Presumption is that all closes and stops\n+   * Wait on all threads to fnish. Presumption is that all closes and stops", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDg3MzY3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzozOToxNFrOHXlpng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTozMDoxMVrOHXx5PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjE1OA==", "bodyText": "This is for the RecoveryReplicationSource only?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494496158", "createdAt": "2020-09-24T17:39:14Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java", "diffHunk": "@@ -52,15 +52,17 @@\n    * @param queueStorage the replication queue storage\n    * @param replicationPeer the replication peer\n    * @param server the server which start and run this replication source\n+   * @param producer the name of region server which produce the replication queue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5Njc2NQ==", "bodyText": "For all ReplicationSource. The assumption here is that: all replication is a producer-consumer module.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494696765", "createdAt": "2020-09-25T01:30:11Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceInterface.java", "diffHunk": "@@ -52,15 +52,17 @@\n    * @param queueStorage the replication queue storage\n    * @param replicationPeer the replication peer\n    * @param server the server which start and run this replication source\n+   * @param producer the name of region server which produce the replication queue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjE1OA=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDg3NzcyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo0MDoyMVrOHXlsLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMTozMjoyNVrOHXx7Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjgxMw==", "bodyText": "There will be a time when the passed in 'server' differs from server.getServerName?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494496813", "createdAt": "2020-09-24T17:40:21Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -360,8 +360,8 @@ private ReplicationSourceInterface createSource(String queueId, ReplicationPeer\n     MetricsSource metrics = new MetricsSource(queueId);\n     sourceMetrics.put(queueId, metrics);\n     // init replication source\n-    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, queueId, clusterId,\n-      walFileLengthProvider, metrics);\n+    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, server.getServerName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NzI0NQ==", "bodyText": "Perhaps say more about this?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494497245", "createdAt": "2020-09-24T17:41:01Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -360,8 +360,8 @@ private ReplicationSourceInterface createSource(String queueId, ReplicationPeer\n     MetricsSource metrics = new MetricsSource(queueId);\n     sourceMetrics.put(queueId, metrics);\n     // init replication source\n-    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, queueId, clusterId,\n-      walFileLengthProvider, metrics);\n+    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, server.getServerName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjgxMw=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5MjExMQ==", "bodyText": "@param server the server which start and run this replication source\n@param producer the name of region server which produce WAL to the replication queue\n\nIs this comment clearly?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494692111", "createdAt": "2020-09-25T01:10:06Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -360,8 +360,8 @@ private ReplicationSourceInterface createSource(String queueId, ReplicationPeer\n     MetricsSource metrics = new MetricsSource(queueId);\n     sourceMetrics.put(queueId, metrics);\n     // init replication source\n-    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, queueId, clusterId,\n-      walFileLengthProvider, metrics);\n+    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, server.getServerName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjgxMw=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5MjI3NA==", "bodyText": "One replication queue can be identified by <Producer ServerName, QueueId>.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494692274", "createdAt": "2020-09-25T01:10:52Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -360,8 +360,8 @@ private ReplicationSourceInterface createSource(String queueId, ReplicationPeer\n     MetricsSource metrics = new MetricsSource(queueId);\n     sourceMetrics.put(queueId, metrics);\n     // init replication source\n-    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, queueId, clusterId,\n-      walFileLengthProvider, metrics);\n+    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, server.getServerName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjgxMw=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5MjQ2NA==", "bodyText": "And one ReplicationSource is responsible for one replication queue.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494692464", "createdAt": "2020-09-25T01:11:43Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -360,8 +360,8 @@ private ReplicationSourceInterface createSource(String queueId, ReplicationPeer\n     MetricsSource metrics = new MetricsSource(queueId);\n     sourceMetrics.put(queueId, metrics);\n     // init replication source\n-    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, queueId, clusterId,\n-      walFileLengthProvider, metrics);\n+    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, server.getServerName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjgxMw=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY5NzMxNA==", "bodyText": "When replication offload disabled, the ReplicationSource will be started in RegionServer inside. So the producer name is same with the Server's name.", "url": "https://github.com/apache/hbase/pull/2452#discussion_r494697314", "createdAt": "2020-09-25T01:32:25Z", "author": {"login": "infraio"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceManager.java", "diffHunk": "@@ -360,8 +360,8 @@ private ReplicationSourceInterface createSource(String queueId, ReplicationPeer\n     MetricsSource metrics = new MetricsSource(queueId);\n     sourceMetrics.put(queueId, metrics);\n     // init replication source\n-    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, queueId, clusterId,\n-      walFileLengthProvider, metrics);\n+    src.init(conf, fs, logDir, this, queueStorage, replicationPeer, server, server.getServerName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5NjgxMw=="}, "originalCommit": {"oid": "8e6639eb646a021de02a383f0bb48615c6cf32c4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MTI5NjA4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNzowOFrOHtNK3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQwODoxNzowOFrOHtNK3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzE2Mzc0MQ==", "bodyText": "interrrupt the fetchWALsThread when the ReplicationServer exits or when the peer terminates?", "url": "https://github.com/apache/hbase/pull/2452#discussion_r517163741", "createdAt": "2020-11-04T08:17:08Z", "author": {"login": "ddupg"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -224,6 +226,35 @@ public void init(Configuration conf, FileSystem fs, Path walDir,\n     this.abortOnError = this.conf.getBoolean(\"replication.source.regionserver.abort\",\n       true);\n \n+    if (conf.getBoolean(HConstants.REPLICATION_OFFLOAD_ENABLE_KEY,\n+      HConstants.REPLICATION_OFFLOAD_ENABLE_DEFAULT)) {\n+      fetchWALsThread = new Thread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d4b04119169b6f4a2beb619fe27951100850baa"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2518, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}