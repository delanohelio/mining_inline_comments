{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTIyNTg2", "number": 1071, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToyMzowMFrODZLaqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzowMTo0NlrODZRmHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzI4MDQyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMToyMzowMFrOFfbRRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzo1MToxOVrOFglVow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Njk2Nw==", "bodyText": "Is it really entering this block? My understanding is that parent region would be in OFFLINE state and SPLIT=true after createDaughters call completed inside SplitTransactionImpl.execute.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368496967", "createdAt": "2020-01-20T11:23:00Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -758,8 +764,20 @@ public void regionOffline(\n             // Delete the ZNode if exists\n             ZKAssign.deleteNodeFailSilent(watcher, region);\n             regionsToOffline.add(region);\n+            PairOfSameType<HRegionInfo> daughterRegions =\n+              MetaTableAccessor.getDaughterRegionsFromParent(this.server.getConnection(), region);\n+            if (daughterRegions != null) {\n+              if (daughterRegions.getFirst() != null) {\n+                daughter2Parent.put(daughterRegions.getFirst().getEncodedName(), region);\n+              }\n+              if (daughterRegions.getSecond() != null) {\n+                daughter2Parent.put(daughterRegions.getSecond().getEncodedName(), region);\n+              }\n+            }\n           } catch (KeeperException ke) {\n             server.abort(\"Unexpected ZK exception deleting node \" + region, ke);\n+          } catch (IOException e) {\n+            LOG.warn(\"get daughter from meta exception \" + region, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzMzcwMQ==", "bodyText": "Yes, but at this time(after createDaughters call completed inside SplitTransactionImpl.execute) the split transaction is still not entirely complete.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368633701", "createdAt": "2020-01-20T16:24:40Z", "author": {"login": "thangTang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -758,8 +764,20 @@ public void regionOffline(\n             // Delete the ZNode if exists\n             ZKAssign.deleteNodeFailSilent(watcher, region);\n             regionsToOffline.add(region);\n+            PairOfSameType<HRegionInfo> daughterRegions =\n+              MetaTableAccessor.getDaughterRegionsFromParent(this.server.getConnection(), region);\n+            if (daughterRegions != null) {\n+              if (daughterRegions.getFirst() != null) {\n+                daughter2Parent.put(daughterRegions.getFirst().getEncodedName(), region);\n+              }\n+              if (daughterRegions.getSecond() != null) {\n+                daughter2Parent.put(daughterRegions.getSecond().getEncodedName(), region);\n+              }\n+            }\n           } catch (KeeperException ke) {\n             server.abort(\"Unexpected ZK exception deleting node \" + region, ke);\n+          } catch (IOException e) {\n+            LOG.warn(\"get daughter from meta exception \" + region, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Njk2Nw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY1NjExOA==", "bodyText": "Yes, but at this time(after createDaughters call completed inside SplitTransactionImpl.execute) the split transaction is still not entirely complete.\n\nAnd that's why seems wrong to have SPLIT=true already at that point.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368656118", "createdAt": "2020-01-20T17:13:28Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -758,8 +764,20 @@ public void regionOffline(\n             // Delete the ZNode if exists\n             ZKAssign.deleteNodeFailSilent(watcher, region);\n             regionsToOffline.add(region);\n+            PairOfSameType<HRegionInfo> daughterRegions =\n+              MetaTableAccessor.getDaughterRegionsFromParent(this.server.getConnection(), region);\n+            if (daughterRegions != null) {\n+              if (daughterRegions.getFirst() != null) {\n+                daughter2Parent.put(daughterRegions.getFirst().getEncodedName(), region);\n+              }\n+              if (daughterRegions.getSecond() != null) {\n+                daughter2Parent.put(daughterRegions.getSecond().getEncodedName(), region);\n+              }\n+            }\n           } catch (KeeperException ke) {\n             server.abort(\"Unexpected ZK exception deleting node \" + region, ke);\n+          } catch (IOException e) {\n+            LOG.warn(\"get daughter from meta exception \" + region, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Njk2Nw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwMzg4Mg==", "bodyText": "If we update the meta information later, we can only put it after the completion of execute openDaughters. It is not very clear to me what impact this might have now. I may need more detailed and comprehensive thinking. My idea is to merge this patch first, at least it can solve most of the problems. Do you think it is okay? @wchevreuil", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368803882", "createdAt": "2020-01-21T04:08:44Z", "author": {"login": "thangTang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -758,8 +764,20 @@ public void regionOffline(\n             // Delete the ZNode if exists\n             ZKAssign.deleteNodeFailSilent(watcher, region);\n             regionsToOffline.add(region);\n+            PairOfSameType<HRegionInfo> daughterRegions =\n+              MetaTableAccessor.getDaughterRegionsFromParent(this.server.getConnection(), region);\n+            if (daughterRegions != null) {\n+              if (daughterRegions.getFirst() != null) {\n+                daughter2Parent.put(daughterRegions.getFirst().getEncodedName(), region);\n+              }\n+              if (daughterRegions.getSecond() != null) {\n+                daughter2Parent.put(daughterRegions.getSecond().getEncodedName(), region);\n+              }\n+            }\n           } catch (KeeperException ke) {\n             server.abort(\"Unexpected ZK exception deleting node \" + region, ke);\n+          } catch (IOException e) {\n+            LOG.warn(\"get daughter from meta exception \" + region, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Njk2Nw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0ODUyMw==", "bodyText": "If we update the meta information later, we can only put it after the completion of execute openDaughters.\n\nYeah, that's what I think.\n\nIt is not very clear to me what impact this might have now. I may need more detailed and comprehensive thinking. My idea is to merge this patch first, at least it can solve most of the problems. Do you think it is okay?\n\nIf you think it's too much work try fixing the state/split flag updates on this PR, then yeah, we can merge this one for now, then work on the other solution in a different jira/RP.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368948523", "createdAt": "2020-01-21T11:30:00Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -758,8 +764,20 @@ public void regionOffline(\n             // Delete the ZNode if exists\n             ZKAssign.deleteNodeFailSilent(watcher, region);\n             regionsToOffline.add(region);\n+            PairOfSameType<HRegionInfo> daughterRegions =\n+              MetaTableAccessor.getDaughterRegionsFromParent(this.server.getConnection(), region);\n+            if (daughterRegions != null) {\n+              if (daughterRegions.getFirst() != null) {\n+                daughter2Parent.put(daughterRegions.getFirst().getEncodedName(), region);\n+              }\n+              if (daughterRegions.getSecond() != null) {\n+                daughter2Parent.put(daughterRegions.getSecond().getEncodedName(), region);\n+              }\n+            }\n           } catch (KeeperException ke) {\n             server.abort(\"Unexpected ZK exception deleting node \" + region, ke);\n+          } catch (IOException e) {\n+            LOG.warn(\"get daughter from meta exception \" + region, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Njk2Nw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcxMDQ5OQ==", "bodyText": "If you think it's too much work try fixing the state/split flag updates on this PR, then yeah, we can merge this one for now, then work on the other solution in a different jira/RP.\n\nYeah, I hope to merge this patch first, and other work can be completed in new JIRA. At least it can solve the problem of data loss. In extreme scenarios, the region hole can be temporarily repaired by HBCK.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r369710499", "createdAt": "2020-01-22T17:51:19Z", "author": {"login": "thangTang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -758,8 +764,20 @@ public void regionOffline(\n             // Delete the ZNode if exists\n             ZKAssign.deleteNodeFailSilent(watcher, region);\n             regionsToOffline.add(region);\n+            PairOfSameType<HRegionInfo> daughterRegions =\n+              MetaTableAccessor.getDaughterRegionsFromParent(this.server.getConnection(), region);\n+            if (daughterRegions != null) {\n+              if (daughterRegions.getFirst() != null) {\n+                daughter2Parent.put(daughterRegions.getFirst().getEncodedName(), region);\n+              }\n+              if (daughterRegions.getSecond() != null) {\n+                daughter2Parent.put(daughterRegions.getSecond().getEncodedName(), region);\n+              }\n+            }\n           } catch (KeeperException ke) {\n             server.abort(\"Unexpected ZK exception deleting node \" + region, ke);\n+          } catch (IOException e) {\n+            LOG.warn(\"get daughter from meta exception \" + region, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ5Njk2Nw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NzQzMDE0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMjoyMjoyM1rOFfcrZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToyNDoyNVrOFf2sJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyMDAzNw==", "bodyText": "Oh, so parent is OFFLINE and SPLIT=true in meta only, but not in assignedRegions? Sounds wrong that we marked parent as OFFLINE and SPLIT even when splitting was still not entirely complete.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368520037", "createdAt": "2020-01-20T12:22:23Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -783,10 +801,20 @@ public void regionOffline(\n             LOG.info(\"Found region in \" + state +\n               \" to be reassigned by ServerCrashProcedure for \" + sn);\n             rits.add(hri);\n-          } else if(state.isSplittingNew() || state.isMergingNew()) {\n-            LOG.info(\"Offline/Cleanup region if no meta entry exists, hri: \" + hri +\n-                \" state: \" + state);\n-            regionsToClean.add(state.getRegion());\n+          } else if (state.isSplittingNew() || state.isMergingNew()) {\n+            LOG.info(\n+              \"Offline/Cleanup region if no meta entry exists, hri: \" + hri + \" state: \" + state);\n+            if (daughter2Parent.containsKey(hri.getEncodedName())) {\n+              HRegionInfo parent = daughter2Parent.get(hri.getEncodedName());\n+              HRegionInfo info = getHRIFromMeta(parent);\n+              if (info != null && info.isSplit() && info.isOffline()) {\n+                regionsToClean.add(Pair.newPair(state.getRegion(), info));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODYzMTg3Mw==", "bodyText": "If the RS machine crash when the SplitTransactionImpl step after PONR, master will handle the split rollback. Under normal conditions, it cleanup daughter region and try to assign parent region. If assign failed, parent region RIT so CatalogJanitor blocked; but at this time the master switch, new master will delete parent region because of OFFLINE and SPLIT=true.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368631873", "createdAt": "2020-01-20T16:20:59Z", "author": {"login": "thangTang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -783,10 +801,20 @@ public void regionOffline(\n             LOG.info(\"Found region in \" + state +\n               \" to be reassigned by ServerCrashProcedure for \" + sn);\n             rits.add(hri);\n-          } else if(state.isSplittingNew() || state.isMergingNew()) {\n-            LOG.info(\"Offline/Cleanup region if no meta entry exists, hri: \" + hri +\n-                \" state: \" + state);\n-            regionsToClean.add(state.getRegion());\n+          } else if (state.isSplittingNew() || state.isMergingNew()) {\n+            LOG.info(\n+              \"Offline/Cleanup region if no meta entry exists, hri: \" + hri + \" state: \" + state);\n+            if (daughter2Parent.containsKey(hri.getEncodedName())) {\n+              HRegionInfo parent = daughter2Parent.get(hri.getEncodedName());\n+              HRegionInfo info = getHRIFromMeta(parent);\n+              if (info != null && info.isSplit() && info.isOffline()) {\n+                regionsToClean.add(Pair.newPair(state.getRegion(), info));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyMDAzNw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY1MjQwMA==", "bodyText": "This daughter2Parent added stingency makes sense to me. Nice.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368652400", "createdAt": "2020-01-20T17:04:18Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -783,10 +801,20 @@ public void regionOffline(\n             LOG.info(\"Found region in \" + state +\n               \" to be reassigned by ServerCrashProcedure for \" + sn);\n             rits.add(hri);\n-          } else if(state.isSplittingNew() || state.isMergingNew()) {\n-            LOG.info(\"Offline/Cleanup region if no meta entry exists, hri: \" + hri +\n-                \" state: \" + state);\n-            regionsToClean.add(state.getRegion());\n+          } else if (state.isSplittingNew() || state.isMergingNew()) {\n+            LOG.info(\n+              \"Offline/Cleanup region if no meta entry exists, hri: \" + hri + \" state: \" + state);\n+            if (daughter2Parent.containsKey(hri.getEncodedName())) {\n+              HRegionInfo parent = daughter2Parent.get(hri.getEncodedName());\n+              HRegionInfo info = getHRIFromMeta(parent);\n+              if (info != null && info.isSplit() && info.isOffline()) {\n+                regionsToClean.add(Pair.newPair(state.getRegion(), info));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyMDAzNw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY3MjQyMw==", "bodyText": "If the RS machine crash when the SplitTransactionImpl step after PONR, master will handle the split rollback.\n\nYeah, but it seems to work only because Master has different info for the region than what is actual in meta. What if Active Master also crashes before it triggers SCP and daughters get cleaned up? The other master will load regions state as seen in meta, then it can run into same problem again.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368672423", "createdAt": "2020-01-20T18:00:11Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -783,10 +801,20 @@ public void regionOffline(\n             LOG.info(\"Found region in \" + state +\n               \" to be reassigned by ServerCrashProcedure for \" + sn);\n             rits.add(hri);\n-          } else if(state.isSplittingNew() || state.isMergingNew()) {\n-            LOG.info(\"Offline/Cleanup region if no meta entry exists, hri: \" + hri +\n-                \" state: \" + state);\n-            regionsToClean.add(state.getRegion());\n+          } else if (state.isSplittingNew() || state.isMergingNew()) {\n+            LOG.info(\n+              \"Offline/Cleanup region if no meta entry exists, hri: \" + hri + \" state: \" + state);\n+            if (daughter2Parent.containsKey(hri.getEncodedName())) {\n+              HRegionInfo parent = daughter2Parent.get(hri.getEncodedName());\n+              HRegionInfo info = getHRIFromMeta(parent);\n+              if (info != null && info.isSplit() && info.isOffline()) {\n+                regionsToClean.add(Pair.newPair(state.getRegion(), info));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyMDAzNw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODc5NzYyNg==", "bodyText": "If the RS machine crash when the SplitTransactionImpl step after PONR, master will handle the split rollback.\n\nYeah, but it seems to work only because Master has different info for the region than what is actual in meta. What if Active Master also crashes before it triggers SCP and daughters get cleaned up? The other master will load regions state as seen in meta, then it can run into same problem again.\n\ndaughter cleanup is excuted in SCP, and in this patch it will do three things together:\n\ndelete daughter region in meta\nupdate parent region in meta\ndelete daughter region dir in HDFS\n\n\t  if (regionPair != null) {\n            MetaTableAccessor.deleteRegion(this.server.getConnection(), hri);\t            MetaTableAccessor.deleteRegion(this.server.getConnection(), hri);\n          }\t          }\n          if (parentInfo != null) {\n            List<Mutation> mutations = new ArrayList<Mutation>();\n            HRegionInfo copyOfParent = new HRegionInfo(parentInfo);\n            copyOfParent.setOffline(false);\n            copyOfParent.setSplit(false);\n            Put putParent = MetaTableAccessor.makePutFromRegionInfo(copyOfParent);\n            mutations.add(putParent);\n            MetaTableAccessor.mutateMetaTable(this.server.getConnection(), mutations);\n          }\n          LOG.debug(\"Cleaning up HDFS since no meta entry exists, hri: \" + hri);\t          LOG.debug(\"Cleaning up HDFS since no meta entry exists, hri: \" + hri);\n          FSUtils.deleteRegionDir(server.getConfiguration(), hri);\t          FSUtils.deleteRegionDir(server.getConfiguration(), hri);\n\nSo if Active Master also crashes before it triggers SCP, the daughter won`t be deleted.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368797626", "createdAt": "2020-01-21T03:30:05Z", "author": {"login": "thangTang"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -783,10 +801,20 @@ public void regionOffline(\n             LOG.info(\"Found region in \" + state +\n               \" to be reassigned by ServerCrashProcedure for \" + sn);\n             rits.add(hri);\n-          } else if(state.isSplittingNew() || state.isMergingNew()) {\n-            LOG.info(\"Offline/Cleanup region if no meta entry exists, hri: \" + hri +\n-                \" state: \" + state);\n-            regionsToClean.add(state.getRegion());\n+          } else if (state.isSplittingNew() || state.isMergingNew()) {\n+            LOG.info(\n+              \"Offline/Cleanup region if no meta entry exists, hri: \" + hri + \" state: \" + state);\n+            if (daughter2Parent.containsKey(hri.getEncodedName())) {\n+              HRegionInfo parent = daughter2Parent.get(hri.getEncodedName());\n+              HRegionInfo info = getHRIFromMeta(parent);\n+              if (info != null && info.isSplit() && info.isOffline()) {\n+                regionsToClean.add(Pair.newPair(state.getRegion(), info));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyMDAzNw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0NjIxNQ==", "bodyText": "So if Active Master also crashes before it triggers SCP, the daughter won`t be deleted.\n\nYes, that's my point. We would now have a new active master that sees parent split as complete, although split was midway through. It will potentially remove the parent, and fail to online the daughters.\nI wonder if working on correcting the regions state and split flag updates would sort split failures at different scenarios. It also does not seem consistent the way we do these updates in meta only and don't reflect it on the \"in-memory\" region info master has.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368946215", "createdAt": "2020-01-21T11:24:25Z", "author": {"login": "wchevreuil"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -783,10 +801,20 @@ public void regionOffline(\n             LOG.info(\"Found region in \" + state +\n               \" to be reassigned by ServerCrashProcedure for \" + sn);\n             rits.add(hri);\n-          } else if(state.isSplittingNew() || state.isMergingNew()) {\n-            LOG.info(\"Offline/Cleanup region if no meta entry exists, hri: \" + hri +\n-                \" state: \" + state);\n-            regionsToClean.add(state.getRegion());\n+          } else if (state.isSplittingNew() || state.isMergingNew()) {\n+            LOG.info(\n+              \"Offline/Cleanup region if no meta entry exists, hri: \" + hri + \" state: \" + state);\n+            if (daughter2Parent.containsKey(hri.getEncodedName())) {\n+              HRegionInfo parent = daughter2Parent.get(hri.getEncodedName());\n+              HRegionInfo info = getHRIFromMeta(parent);\n+              if (info != null && info.isSplit() && info.isOffline()) {\n+                regionsToClean.add(Pair.newPair(state.getRegion(), info));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUyMDAzNw=="}, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3ODI5Mjc3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzowMTo0NlrOFfkrzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzowMTo0NlrOFfkrzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY1MTIxMw==", "bodyText": "Suggest this needs more comment on why we need this accounting in daughter2Parent.", "url": "https://github.com/apache/hbase/pull/1071#discussion_r368651213", "createdAt": "2020-01-20T17:01:46Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/RegionStates.java", "diffHunk": "@@ -737,11 +741,13 @@ public void regionOffline(\n   public List<HRegionInfo> serverOffline(final ZooKeeperWatcher watcher, final ServerName sn) {\n     // Offline all regions on this server not already in transition.\n     List<HRegionInfo> rits = new ArrayList<HRegionInfo>();\n-    Set<HRegionInfo> regionsToClean = new HashSet<HRegionInfo>();\n+    Set<Pair<HRegionInfo, HRegionInfo>> regionsToClean =\n+      new HashSet<Pair<HRegionInfo, HRegionInfo>>();\n     // Offline regions outside the loop and synchronized block to avoid\n     // ConcurrentModificationException and deadlock in case of meta anassigned,\n     // but RegionState a blocked.\n     Set<HRegionInfo> regionsToOffline = new HashSet<HRegionInfo>();\n+    Map<String, HRegionInfo> daughter2Parent = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3b12c43a34c5ea0cde219ea0a4d16682298f59c"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2170, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}