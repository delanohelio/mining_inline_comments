{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4OTA4ODg1", "number": 2504, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1NTo1OVrOEriW9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1Nzo1OVrOEriaKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDg3MTU2OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1NTo1OVrOHeW5TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoyMToyMFrOHemclA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDQ0NQ==", "bodyText": "Nit: worth put a different message from the one on line #343, in order to explicitly say this had no timestamp? Maybe saying this is likely a recovered.edit file.", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501594445", "createdAt": "2020-10-08T09:55:59Z", "author": {"login": "wchevreuil"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "diffHunk": "@@ -301,40 +303,56 @@ public WALKey getCurrentKey() throws IOException, InterruptedException {\n       inpDirs.split(conf.get(WALPlayer.INPUT_FILES_SEPARATOR_KEY, \",\")));\n   }\n \n+  /**\n+   * @param startTime If file looks like it has a timestamp in its name, we'll check if newer\n+   *                  or equal to this value else we will filter out the file. If name does not\n+   *                  seem to have a timestamp, we will just return it w/o filtering.\n+   * @param endTime If file looks like it has a timestamp in its name, we'll check if older or equal\n+   *                to this value else we will filter out the file. If name does not seem to\n+   *                have a timestamp, we will just return it w/o filtering.\n+   */\n   private List<FileStatus> getFiles(FileSystem fs, Path dir, long startTime, long endTime)\n       throws IOException {\n     List<FileStatus> result = new ArrayList<>();\n     LOG.debug(\"Scanning \" + dir.toString() + \" for WAL files\");\n-\n     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(dir);\n-    if (!iter.hasNext()) return Collections.emptyList();\n+    if (!iter.hasNext()) {\n+      return Collections.emptyList();\n+    }\n     while (iter.hasNext()) {\n       LocatedFileStatus file = iter.next();\n       if (file.isDirectory()) {\n-        // recurse into sub directories\n+        // Recurse into sub directories\n         result.addAll(getFiles(fs, file.getPath(), startTime, endTime));\n       } else {\n-        String name = file.getPath().toString();\n-        int idx = name.lastIndexOf('.');\n-        if (idx > 0) {\n-          try {\n-            long fileStartTime = Long.parseLong(name.substring(idx+1));\n-            if (fileStartTime <= endTime) {\n-              LOG.info(\"Found: \" + file);\n-              result.add(file);\n-            }\n-          } catch (NumberFormatException x) {\n-            idx = 0;\n-          }\n-        }\n-        if (idx == 0) {\n-          LOG.warn(\"File \" + name + \" does not appear to be an WAL file. Skipping...\");\n-        }\n+        addFile(result, file, startTime, endTime);\n       }\n     }\n+    // TODO: These results should be sorted? Results could be content of recovered.edits directory\n+    // -- null padded increasing numeric -- or a WAL file w/ timestamp suffix or timestamp and\n+    // then meta suffix. See AbstractFSWALProvider#WALStartTimeComparator\n     return result;\n   }\n \n+  static void addFile(List<FileStatus> result, LocatedFileStatus lfs, long startTime,\n+      long endTime) {\n+    long timestamp = WAL.getTimestamp(lfs.getPath().getName());\n+    if (timestamp > 0) {\n+      // Looks like a valid timestamp.\n+      if (timestamp <= endTime && timestamp >= startTime) {\n+        LOG.info(\"Found {}\", lfs.getPath());\n+        result.add(lfs);\n+      } else {\n+        LOG.debug(\"Skipped {}, outside range [{}/{} - {}/{}]\", lfs.getPath(),\n+          startTime, Instant.ofEpochMilli(startTime), endTime, Instant.ofEpochMilli(endTime));\n+      }\n+    } else {\n+      // If no timestamp, add it regardless.\n+      LOG.info(\"Found {}\", lfs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39116059782de8422ebacd2ccc195ce026489c61"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0OTIzNg==", "bodyText": "Makes sense.", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501849236", "createdAt": "2020-10-08T16:21:20Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "diffHunk": "@@ -301,40 +303,56 @@ public WALKey getCurrentKey() throws IOException, InterruptedException {\n       inpDirs.split(conf.get(WALPlayer.INPUT_FILES_SEPARATOR_KEY, \",\")));\n   }\n \n+  /**\n+   * @param startTime If file looks like it has a timestamp in its name, we'll check if newer\n+   *                  or equal to this value else we will filter out the file. If name does not\n+   *                  seem to have a timestamp, we will just return it w/o filtering.\n+   * @param endTime If file looks like it has a timestamp in its name, we'll check if older or equal\n+   *                to this value else we will filter out the file. If name does not seem to\n+   *                have a timestamp, we will just return it w/o filtering.\n+   */\n   private List<FileStatus> getFiles(FileSystem fs, Path dir, long startTime, long endTime)\n       throws IOException {\n     List<FileStatus> result = new ArrayList<>();\n     LOG.debug(\"Scanning \" + dir.toString() + \" for WAL files\");\n-\n     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(dir);\n-    if (!iter.hasNext()) return Collections.emptyList();\n+    if (!iter.hasNext()) {\n+      return Collections.emptyList();\n+    }\n     while (iter.hasNext()) {\n       LocatedFileStatus file = iter.next();\n       if (file.isDirectory()) {\n-        // recurse into sub directories\n+        // Recurse into sub directories\n         result.addAll(getFiles(fs, file.getPath(), startTime, endTime));\n       } else {\n-        String name = file.getPath().toString();\n-        int idx = name.lastIndexOf('.');\n-        if (idx > 0) {\n-          try {\n-            long fileStartTime = Long.parseLong(name.substring(idx+1));\n-            if (fileStartTime <= endTime) {\n-              LOG.info(\"Found: \" + file);\n-              result.add(file);\n-            }\n-          } catch (NumberFormatException x) {\n-            idx = 0;\n-          }\n-        }\n-        if (idx == 0) {\n-          LOG.warn(\"File \" + name + \" does not appear to be an WAL file. Skipping...\");\n-        }\n+        addFile(result, file, startTime, endTime);\n       }\n     }\n+    // TODO: These results should be sorted? Results could be content of recovered.edits directory\n+    // -- null padded increasing numeric -- or a WAL file w/ timestamp suffix or timestamp and\n+    // then meta suffix. See AbstractFSWALProvider#WALStartTimeComparator\n     return result;\n   }\n \n+  static void addFile(List<FileStatus> result, LocatedFileStatus lfs, long startTime,\n+      long endTime) {\n+    long timestamp = WAL.getTimestamp(lfs.getPath().getName());\n+    if (timestamp > 0) {\n+      // Looks like a valid timestamp.\n+      if (timestamp <= endTime && timestamp >= startTime) {\n+        LOG.info(\"Found {}\", lfs.getPath());\n+        result.add(lfs);\n+      } else {\n+        LOG.debug(\"Skipped {}, outside range [{}/{} - {}/{}]\", lfs.getPath(),\n+          startTime, Instant.ofEpochMilli(startTime), endTime, Instant.ofEpochMilli(endTime));\n+      }\n+    } else {\n+      // If no timestamp, add it regardless.\n+      LOG.info(\"Found {}\", lfs);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NDQ0NQ=="}, "originalCommit": {"oid": "39116059782de8422ebacd2ccc195ce026489c61"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDg3OTc5OnYy", "diffSide": "RIGHT", "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOTo1Nzo1OVrOHeW-Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjoyMTo0MlrOHemddA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NTczMA==", "bodyText": "Is this expected to be the majority of cases, or could log be info just like on #343 and #351?", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501595730", "createdAt": "2020-10-08T09:57:59Z", "author": {"login": "wchevreuil"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "diffHunk": "@@ -301,40 +303,56 @@ public WALKey getCurrentKey() throws IOException, InterruptedException {\n       inpDirs.split(conf.get(WALPlayer.INPUT_FILES_SEPARATOR_KEY, \",\")));\n   }\n \n+  /**\n+   * @param startTime If file looks like it has a timestamp in its name, we'll check if newer\n+   *                  or equal to this value else we will filter out the file. If name does not\n+   *                  seem to have a timestamp, we will just return it w/o filtering.\n+   * @param endTime If file looks like it has a timestamp in its name, we'll check if older or equal\n+   *                to this value else we will filter out the file. If name does not seem to\n+   *                have a timestamp, we will just return it w/o filtering.\n+   */\n   private List<FileStatus> getFiles(FileSystem fs, Path dir, long startTime, long endTime)\n       throws IOException {\n     List<FileStatus> result = new ArrayList<>();\n     LOG.debug(\"Scanning \" + dir.toString() + \" for WAL files\");\n-\n     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(dir);\n-    if (!iter.hasNext()) return Collections.emptyList();\n+    if (!iter.hasNext()) {\n+      return Collections.emptyList();\n+    }\n     while (iter.hasNext()) {\n       LocatedFileStatus file = iter.next();\n       if (file.isDirectory()) {\n-        // recurse into sub directories\n+        // Recurse into sub directories\n         result.addAll(getFiles(fs, file.getPath(), startTime, endTime));\n       } else {\n-        String name = file.getPath().toString();\n-        int idx = name.lastIndexOf('.');\n-        if (idx > 0) {\n-          try {\n-            long fileStartTime = Long.parseLong(name.substring(idx+1));\n-            if (fileStartTime <= endTime) {\n-              LOG.info(\"Found: \" + file);\n-              result.add(file);\n-            }\n-          } catch (NumberFormatException x) {\n-            idx = 0;\n-          }\n-        }\n-        if (idx == 0) {\n-          LOG.warn(\"File \" + name + \" does not appear to be an WAL file. Skipping...\");\n-        }\n+        addFile(result, file, startTime, endTime);\n       }\n     }\n+    // TODO: These results should be sorted? Results could be content of recovered.edits directory\n+    // -- null padded increasing numeric -- or a WAL file w/ timestamp suffix or timestamp and\n+    // then meta suffix. See AbstractFSWALProvider#WALStartTimeComparator\n     return result;\n   }\n \n+  static void addFile(List<FileStatus> result, LocatedFileStatus lfs, long startTime,\n+      long endTime) {\n+    long timestamp = WAL.getTimestamp(lfs.getPath().getName());\n+    if (timestamp > 0) {\n+      // Looks like a valid timestamp.\n+      if (timestamp <= endTime && timestamp >= startTime) {\n+        LOG.info(\"Found {}\", lfs.getPath());\n+        result.add(lfs);\n+      } else {\n+        LOG.debug(\"Skipped {}, outside range [{}/{} - {}/{}]\", lfs.getPath(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39116059782de8422ebacd2ccc195ce026489c61"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg0OTQ2MA==", "bodyText": "Made it info.", "url": "https://github.com/apache/hbase/pull/2504#discussion_r501849460", "createdAt": "2020-10-08T16:21:42Z", "author": {"login": "saintstack"}, "path": "hbase-mapreduce/src/main/java/org/apache/hadoop/hbase/mapreduce/WALInputFormat.java", "diffHunk": "@@ -301,40 +303,56 @@ public WALKey getCurrentKey() throws IOException, InterruptedException {\n       inpDirs.split(conf.get(WALPlayer.INPUT_FILES_SEPARATOR_KEY, \",\")));\n   }\n \n+  /**\n+   * @param startTime If file looks like it has a timestamp in its name, we'll check if newer\n+   *                  or equal to this value else we will filter out the file. If name does not\n+   *                  seem to have a timestamp, we will just return it w/o filtering.\n+   * @param endTime If file looks like it has a timestamp in its name, we'll check if older or equal\n+   *                to this value else we will filter out the file. If name does not seem to\n+   *                have a timestamp, we will just return it w/o filtering.\n+   */\n   private List<FileStatus> getFiles(FileSystem fs, Path dir, long startTime, long endTime)\n       throws IOException {\n     List<FileStatus> result = new ArrayList<>();\n     LOG.debug(\"Scanning \" + dir.toString() + \" for WAL files\");\n-\n     RemoteIterator<LocatedFileStatus> iter = fs.listLocatedStatus(dir);\n-    if (!iter.hasNext()) return Collections.emptyList();\n+    if (!iter.hasNext()) {\n+      return Collections.emptyList();\n+    }\n     while (iter.hasNext()) {\n       LocatedFileStatus file = iter.next();\n       if (file.isDirectory()) {\n-        // recurse into sub directories\n+        // Recurse into sub directories\n         result.addAll(getFiles(fs, file.getPath(), startTime, endTime));\n       } else {\n-        String name = file.getPath().toString();\n-        int idx = name.lastIndexOf('.');\n-        if (idx > 0) {\n-          try {\n-            long fileStartTime = Long.parseLong(name.substring(idx+1));\n-            if (fileStartTime <= endTime) {\n-              LOG.info(\"Found: \" + file);\n-              result.add(file);\n-            }\n-          } catch (NumberFormatException x) {\n-            idx = 0;\n-          }\n-        }\n-        if (idx == 0) {\n-          LOG.warn(\"File \" + name + \" does not appear to be an WAL file. Skipping...\");\n-        }\n+        addFile(result, file, startTime, endTime);\n       }\n     }\n+    // TODO: These results should be sorted? Results could be content of recovered.edits directory\n+    // -- null padded increasing numeric -- or a WAL file w/ timestamp suffix or timestamp and\n+    // then meta suffix. See AbstractFSWALProvider#WALStartTimeComparator\n     return result;\n   }\n \n+  static void addFile(List<FileStatus> result, LocatedFileStatus lfs, long startTime,\n+      long endTime) {\n+    long timestamp = WAL.getTimestamp(lfs.getPath().getName());\n+    if (timestamp > 0) {\n+      // Looks like a valid timestamp.\n+      if (timestamp <= endTime && timestamp >= startTime) {\n+        LOG.info(\"Found {}\", lfs.getPath());\n+        result.add(lfs);\n+      } else {\n+        LOG.debug(\"Skipped {}, outside range [{}/{} - {}/{}]\", lfs.getPath(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU5NTczMA=="}, "originalCommit": {"oid": "39116059782de8422ebacd2ccc195ce026489c61"}, "originalPosition": 150}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2561, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}