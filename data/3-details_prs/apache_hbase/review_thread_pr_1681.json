{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTEwOTM5", "number": 1681, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0ODozMFrOD7DTww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyOTo0NlrOD95kkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjQ2Nzg3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0ODozMFrOGTJ9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoyMzoyN1rOGWb29Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw==", "bodyText": "Will this genereate hot spot on the region?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r422739393", "createdAt": "2020-05-11T01:48:30Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc4MjgzOA==", "bodyText": "Yes it can have hotsopts, but we are not expecting the system to be too slow for longer time. And also, when users scan the system table, they would expect to see slow RPC logs in increasing order of time.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r422782838", "createdAt": "2020-05-11T05:06:41Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDAyMjU0Nw==", "bodyText": "Added chore to insert records every 10 min, hence we are not much worried about hotspot.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r424022547", "createdAt": "2020-05-12T20:45:37Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NjUyOQ==", "bodyText": "In a 10 min window we run the chore - but if there are slow sync happening during that 10 min window - we accumulate it in memory ?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426176529", "createdAt": "2020-05-16T18:03:03Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzAxNg==", "bodyText": "Ok I saw this public static final int DEFAULT_SLOW_LOG_RING_BUFFER_SIZE = 256;\nSo at max it is only 256 elements that we store in that queue. Rest will be removed anyway. At max we have 256 put list at any point of time. Right?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426177016", "createdAt": "2020-05-16T18:08:49Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzE3Nw==", "bodyText": "Just one Q - this system table if not coming online due to some assignment issues -  we don't bother right? Say if the table is not online and while doing the puts we don't get the table - we should not do a WARN for certain time and then stop the connection fetching operatoin itself. Something like file based bucket cache - if there is afailure in writing to cache we keep retrying and if the error count exceeds a threshold we will WARN and no longer cache the data.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426177177", "createdAt": "2020-05-16T18:10:46Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODI5Mw==", "bodyText": "DEFAULT_SLOW_LOG_RING_BUFFER_SIZE = 256 this is for in-memory ring buffer only. For 10 min window, yes we will keep records in memory until we can insert them together by cron. And the size for the memory queue is 1000. The code is here:\n    if (isSlowLogTableEnabled) {\n      EvictingQueue<SlowLogPayload> evictingQueueForTable = EvictingQueue.create(\n        SYS_TABLE_QUEUE_SIZE);\n      queueForSysTable = Queues.synchronizedQueue(evictingQueueForTable);\n    } else {\n      queueForSysTable = null;\n    }\n\n\nthis system table if not coming online due to some assignment issues - we don't bother right?\n\nThat is true, and yes warn should be present, which is provided here:\n    } catch (Exception e) {\n      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n    }\n\nRetries and timeout is also defined here:\n      Configuration conf = new Configuration(configuration);\n      // rpc timeout: 20s\n      conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n      // retry count: 5\n      conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n      conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n      connection = ConnectionFactory.createConnection(conf);", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426178293", "createdAt": "2020-05-16T18:23:27Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjMxMjU0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjo0NzozNFrOGWMamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjo0ODowN1rOGWMbvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNTI3NQ==", "bodyText": "Why we need inMemory true ?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425925275", "createdAt": "2020-05-15T16:47:34Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setInMemory(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNTU2Nw==", "bodyText": "We should make the blockCaching = false for this table?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425925567", "createdAt": "2020-05-15T16:48:07Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setInMemory(true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNTI3NQ=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjMyMDEzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjo0OTo1N1rOGWMfOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjo0OTo1N1rOGWMfOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNjQ1OQ==", "bodyText": "The log is a bit confusing. The will look like a table is enabled/disabled.  We can say slow request logging to system table is not enable? (Or a better message)", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425926459", "createdAt": "2020-05-15T16:49:57Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setInMemory(true)\n+          .setMaxVersions(1).build());\n+\n+  public SlowLogMasterService(final Configuration configuration,\n+      final MasterServices masterServices) {\n+    slowlogTableEnabled = configuration.getBoolean(HConstants.SLOW_LOG_SYS_TABLE_ENABLED_KEY,\n+      HConstants.DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY);\n+    this.masterServices = masterServices;\n+  }\n+\n+  public void init() throws IOException {\n+    if (!slowlogTableEnabled) {\n+      LOG.info(\"SlowLogTable is not enabled. Quitting.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjM5NzQyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxNDozNVrOGWNQ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxNDozNVrOGWNQ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzOTE3MQ==", "bodyText": "If the config is turned off, this will log this warn line in every 10 mins right? Dont think we need to log here at all.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425939171", "createdAt": "2020-05-15T17:14:35Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +278,32 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      LOG.warn(\"hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQwMzgxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxNjozNlrOGWNVFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxNjozNlrOGWNVFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MDI0NQ==", "bodyText": "Instead can do ArrayList#clear?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425940245", "createdAt": "2020-05-15T17:16:36Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +278,32 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      LOG.warn(\"hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\");\n+      return;\n+    }\n+    if (this.connection == null) {\n+      LOG.warn(\"LogEventHandler has null connection. Exiting.\");\n+      return;\n+    }\n+    List<SlowLogPayload> slowLogPayloads = new ArrayList<>();\n+    int i = 0;\n+    while (!queueForSysTable.isEmpty()) {\n+      slowLogPayloads.add(queueForSysTable.poll());\n+      i++;\n+      if (i == 100) {\n+        SlowLogTableAccessor.addSlowLogRecords(slowLogPayloads, this.connection);\n+        slowLogPayloads = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQxMDgxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoxOToxM1rOGWNZ7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxMDowNjo0OVrOGWZfgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MTQ4Ng==", "bodyText": "If 100 rows, approx what will be the write req total size?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425941486", "createdAt": "2020-05-15T17:19:13Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +278,32 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      LOG.warn(\"hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\");\n+      return;\n+    }\n+    if (this.connection == null) {\n+      LOG.warn(\"LogEventHandler has null connection. Exiting.\");\n+      return;\n+    }\n+    List<SlowLogPayload> slowLogPayloads = new ArrayList<>();\n+    int i = 0;\n+    while (!queueForSysTable.isEmpty()) {\n+      slowLogPayloads.add(queueForSysTable.poll());\n+      i++;\n+      if (i == 100) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzOTUyMA==", "bodyText": "I believe if region name is quite long, in the worst case, each request might be of ~ 3-4k bytes.\nAlso, mutate() allows by default 5000 rows in single request and hence, this is reasonably lower no of requests. Size is also not much higher.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426139520", "createdAt": "2020-05-16T10:06:49Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +278,32 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      LOG.warn(\"hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\");\n+      return;\n+    }\n+    if (this.connection == null) {\n+      LOG.warn(\"LogEventHandler has null connection. Exiting.\");\n+      return;\n+    }\n+    List<SlowLogPayload> slowLogPayloads = new ArrayList<>();\n+    int i = 0;\n+    while (!queueForSysTable.isEmpty()) {\n+      slowLogPayloads.add(queueForSysTable.poll());\n+      i++;\n+      if (i == 100) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MTQ4Ng=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQxNTgwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoyMDo1N1rOGWNdVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoyMDo1N1rOGWNdVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MjM1Nw==", "bodyText": "Puts list size can be given as slowLogPayloads.size()", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425942357", "createdAt": "2020-05-15T17:20:57Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Connection connection) {\n+    List<Put> puts = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQzMjg3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoyNjo0MVrOGWNoiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzoyNjo0MVrOGWNoiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NTIyNQ==", "bodyText": "Is there any chance of non IOE possible? Should we catch Exception. Else it might cause the chore to get terminated if any non IOE comes ever?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425945225", "createdAt": "2020-05-15T17:26:41Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Connection connection) {\n+    List<Put> puts = new ArrayList<>();\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(slowLogPayload.getQueueTime()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(slowLogPayload.getResponseSize()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(slowLogPayload.getStartTime()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      doPut(connection, puts);\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQ0NDQzOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/TableName.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzozMDoyNlrOGWNv5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzoyNTo1NlrOGWe4dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzExMA==", "bodyText": "We are exposing this Table name for users right? I think we need.  Then we should expose the cf and column names also?  Sure this is not the class for those expose.\nNow we allow all kind of client ops (writes, disable, alter) on this table? I believe in Master branch we allow tables in system NS to be disabled, altered etc.  There was a Jira around META table.  Will that be ok (Disable this table and keep it that state)", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425947110", "createdAt": "2020-05-15T17:30:26Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/TableName.java", "diffHunk": "@@ -83,6 +83,12 @@\n   public static final TableName META_TABLE_NAME =\n       valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"meta\");\n \n+  /** hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE2MzEwMA==", "bodyText": "Yes, I tried disable and enable of 'hbase:slowlog' locally and both worked fine.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426163100", "createdAt": "2020-05-16T15:23:04Z", "author": {"login": "virajjasani"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/TableName.java", "diffHunk": "@@ -83,6 +83,12 @@\n   public static final TableName META_TABLE_NAME =\n       valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"meta\");\n \n+  /** hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzExMA=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzgyOA==", "bodyText": "Are we exposing this table name to customer? This is a public class.  If we expose the name for user to create queries, we might have to expose the column names also?  But those can not be done in this class. Any thinking of having a new Public class if needed to expose? If you dont want to expose this table name, we should not keep this in TableName public class", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426227828", "createdAt": "2020-05-17T07:25:56Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/TableName.java", "diffHunk": "@@ -83,6 +83,12 @@\n   public static final TableName META_TABLE_NAME =\n       valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"meta\");\n \n+  /** hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzExMA=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MjQ0ODM1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzozMTo0NFrOGWNyWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwODoxMzo0MlrOGWfIBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw==", "bodyText": "For some reason this put is not happening for one occasion, we will just throw away those logs. Anyways we are ok to loose some data as we already disabled the WAL.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425947737", "createdAt": "2020-05-15T17:31:44Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0ODQ5Mw==", "bodyText": "By default HBase will have a 60 sec RPC timeout and 35 retries. Means overall it will be > 10 min which is the default Chore interval.  We can adjust these configs?  35 retries anyways we can reduce.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425948493", "createdAt": "2020-05-15T17:33:12Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE0NDI4NQ==", "bodyText": "@anoopsjohn on master branch, this retry count is 45?\n  public static void setServerSideHConnectionRetriesConfig(final Configuration c, final String sn,\n      final Logger log) {\n    // TODO: Fix this. Not all connections from server side should have 10 times the retries.\n    int hcRetries = c.getInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER,\n      HConstants.DEFAULT_HBASE_CLIENT_RETRIES_NUMBER);\n    // Go big. Multiply by 10. If we can't get to meta after this many retries\n    // then something seriously wrong.\n    int serversideMultiplier = c.getInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER,\n      HConstants.DEFAULT_HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER);\n    int retries = hcRetries * serversideMultiplier;\n    c.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, retries);\n    log.info(sn + \" server-side Connection retries=\" + retries);\n  }\n\nOr I am missing some calculation?\nLet me get these configs:\n          conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n          conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n          conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426144285", "createdAt": "2020-05-16T11:12:56Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMTUxOA==", "bodyText": "So I can see that u have reduced the RPC time out and retries. Fine.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426231518", "createdAt": "2020-05-17T08:10:04Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMTgxNQ==", "bodyText": "Ya seems for Server -> Server RPCs  we will have default of 15 * 3 = 45 retries.\nI can see the client side retries is 15 now not 35. I believe this is changed in master branch. Not sure which jira", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426231815", "createdAt": "2020-05-17T08:13:42Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzk4NTgyOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo0Njo1MVrOGWbp-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMzo0NjoxMVrOGWhEMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NDk2OA==", "bodyText": "Good. Generally if we have a log system which will store the logs then this may be redundant in such systems.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426174968", "createdAt": "2020-05-16T17:46:51Z", "author": {"login": "ramkrish86"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1532,6 +1532,16 @@\n     \"hbase.regionserver.slowlog.buffer.enabled\";\n   public static final boolean DEFAULT_ONLINE_LOG_PROVIDER_ENABLED = false;\n \n+  /** The slowlog info family as a string*/\n+  private static final String SLOWLOG_INFO_FAMILY_STR = \"info\";\n+\n+  /** The slowlog info family */\n+  public static final byte [] SLOWLOG_INFO_FAMILY = Bytes.toBytes(SLOWLOG_INFO_FAMILY_STR);\n+\n+  public static final String SLOW_LOG_SYS_TABLE_ENABLED_KEY =\n+    \"hbase.regionserver.slowlog.systable.enabled\";\n+  public static final boolean DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODk5NA==", "bodyText": "On high level, it will be redundant but if we are looking for completeness of logs, this might provide better details. Because as of today, we log truncated data at RpcServer level. At times, we miss on huge region name.\ne.g\n\"param\":\"region { type: REGION_NAME value: \\\"t1,\\\\000\\\\000\\\\215\\\\f)o\\\\\\\\\\\\024\\\\302\\\\220\\\\000\\\\000\\\\000\\\\000\\\\000\\\\001\\\\000\\\\000\\\\000\\\\000\\\\000\\\\006\\\\000\\\\000\\\\000\\\\000\\\\000\\\\005\n000000<TRUNCATED>\"\n\nBut regardless, this is not supposed to be enabled by default for sure. Ringbuffer feature is also so far disabled (by default). Maybe we can plan to enable it by default starting release 3.0.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426178994", "createdAt": "2020-05-16T18:32:17Z", "author": {"login": "virajjasani"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1532,6 +1532,16 @@\n     \"hbase.regionserver.slowlog.buffer.enabled\";\n   public static final boolean DEFAULT_ONLINE_LOG_PROVIDER_ENABLED = false;\n \n+  /** The slowlog info family as a string*/\n+  private static final String SLOWLOG_INFO_FAMILY_STR = \"info\";\n+\n+  /** The slowlog info family */\n+  public static final byte [] SLOWLOG_INFO_FAMILY = Bytes.toBytes(SLOWLOG_INFO_FAMILY_STR);\n+\n+  public static final String SLOW_LOG_SYS_TABLE_ENABLED_KEY =\n+    \"hbase.regionserver.slowlog.systable.enabled\";\n+  public static final boolean DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NDk2OA=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzYyMQ==", "bodyText": "Are we not logging the region's encoded name?  This is the region name which comes as part of the req param:", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426227621", "createdAt": "2020-05-17T07:23:32Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1532,6 +1532,16 @@\n     \"hbase.regionserver.slowlog.buffer.enabled\";\n   public static final boolean DEFAULT_ONLINE_LOG_PROVIDER_ENABLED = false;\n \n+  /** The slowlog info family as a string*/\n+  private static final String SLOWLOG_INFO_FAMILY_STR = \"info\";\n+\n+  /** The slowlog info family */\n+  public static final byte [] SLOWLOG_INFO_FAMILY = Bytes.toBytes(SLOWLOG_INFO_FAMILY_STR);\n+\n+  public static final String SLOW_LOG_SYS_TABLE_ENABLED_KEY =\n+    \"hbase.regionserver.slowlog.systable.enabled\";\n+  public static final boolean DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NDk2OA=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2MzYwMg==", "bodyText": "Yes, this is region name that comes as part of req param. We do record it, but in ringbuffer and systable, we record the full name, whereas in RpcServer log, we record truncated name. The truncation was one of the first reasons behind the idea of online ringbuffer implementation.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426263602", "createdAt": "2020-05-17T13:46:11Z", "author": {"login": "virajjasani"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1532,6 +1532,16 @@\n     \"hbase.regionserver.slowlog.buffer.enabled\";\n   public static final boolean DEFAULT_ONLINE_LOG_PROVIDER_ENABLED = false;\n \n+  /** The slowlog info family as a string*/\n+  private static final String SLOWLOG_INFO_FAMILY_STR = \"info\";\n+\n+  /** The slowlog info family */\n+  public static final byte [] SLOWLOG_INFO_FAMILY = Bytes.toBytes(SLOWLOG_INFO_FAMILY_STR);\n+\n+  public static final String SLOW_LOG_SYS_TABLE_ENABLED_KEY =\n+    \"hbase.regionserver.slowlog.systable.enabled\";\n+  public static final boolean DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NDk2OA=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzk4OTQ4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogRecorder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1MToyM1rOGWbrzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxNjo1OFrOGWb0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTQzNg==", "bodyText": "Even if not enabled we will create that handler?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426175436", "createdAt": "2020-05-16T17:51:23Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogRecorder.java", "diffHunk": "@@ -86,7 +87,9 @@ public SlowLogRecorder(Configuration conf) {\n     this.disruptor.setDefaultExceptionHandler(new DisruptorExceptionHandler());\n \n     // initialize ringbuffer event handler\n-    this.logEventHandler = new LogEventHandler(this.eventCount);\n+    final boolean isSlowLogTableEnabled = conf.getBoolean(HConstants.SLOW_LOG_SYS_TABLE_ENABLED_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzczMA==", "bodyText": "Yes, we will create that handler because that is primarily used for in-memory ring buffer. That part is fine, nothing to worry \ud83d\udc4d", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426177730", "createdAt": "2020-05-16T18:16:58Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogRecorder.java", "diffHunk": "@@ -86,7 +87,9 @@ public SlowLogRecorder(Configuration conf) {\n     this.disruptor.setDefaultExceptionHandler(new DisruptorExceptionHandler());\n \n     // initialize ringbuffer event handler\n-    this.logEventHandler = new LogEventHandler(this.eventCount);\n+    final boolean isSlowLogTableEnabled = conf.getBoolean(HConstants.SLOW_LOG_SYS_TABLE_ENABLED_KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTQzNg=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzk5MTIwOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1NDoxM1rOGWbstw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNDozMTo0MlrOGWhWSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTY3MQ==", "bodyText": "In a 10 min window we will do the puts . Can it really hotspot the region? Also at the Rpc handler layer should we give the lowest priority? System tables like META had high priority i belive - need to check the code. Should we lower for this table?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426175671", "createdAt": "2020-05-16T17:54:13Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        synchronized (SlowLogTableAccessor.class) {\n+          if (connection == null) {\n+            Configuration conf = new Configuration(configuration);\n+            // rpc timeout: 20s\n+            conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+            // retry count: 5\n+            conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+            conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+            connection = ConnectionFactory.createConnection(conf);\n+          }\n+        }\n+      }\n+      doPut(connection, puts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3ODUzNg==", "bodyText": "Sure that should be fine, but since we already have (WAL disabled + block cache disabled). Do you think it is fine to not touch Rpc handler level priority? We already don't have tight consistency and resiliency for this system table, so there are already chances of losing some data :)\nThought? I am fine with lowering the priority anyways.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426178536", "createdAt": "2020-05-16T18:26:38Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        synchronized (SlowLogTableAccessor.class) {\n+          if (connection == null) {\n+            Configuration conf = new Configuration(configuration);\n+            // rpc timeout: 20s\n+            conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+            // retry count: 5\n+            conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+            conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+            connection = ConnectionFactory.createConnection(conf);\n+          }\n+        }\n+      }\n+      doPut(connection, puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTY3MQ=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Nzk2NQ==", "bodyText": "The above is a valid Q and nice observation.  The priority of the req been calculated based on the System ns. As this table is in 'hbase' NS it will get highest priority.  Its not about WAL write or cache usage.  The RPC will be handled by the priority handler threads and Q.    I believe we can set it at the individual req level.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426247965", "createdAt": "2020-05-17T11:07:14Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        synchronized (SlowLogTableAccessor.class) {\n+          if (connection == null) {\n+            Configuration conf = new Configuration(configuration);\n+            // rpc timeout: 20s\n+            conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+            // retry count: 5\n+            conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+            conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+            connection = ConnectionFactory.createConnection(conf);\n+          }\n+        }\n+      }\n+      doPut(connection, puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTY3MQ=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2ODIzNA==", "bodyText": "Sure, taken care of in the latest commit.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426268234", "createdAt": "2020-05-17T14:31:42Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        synchronized (SlowLogTableAccessor.class) {\n+          if (connection == null) {\n+            Configuration conf = new Configuration(configuration);\n+            // rpc timeout: 20s\n+            conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+            // retry count: 5\n+            conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+            conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+            connection = ConnectionFactory.createConnection(conf);\n+          }\n+        }\n+      }\n+      doPut(connection, puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTY3MQ=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzk5MjAzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1NToxNVrOGWbtIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1NToxNVrOGWbtIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTc3OA==", "bodyText": "Better to disable all types of cache for this. Good.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426175778", "createdAt": "2020-05-16T17:55:15Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setBlockCacheEnabled(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Mzk5NDg1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1OTozNFrOGWbumg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo1OTozNFrOGWbumg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NjE1NA==", "bodyText": "Good.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426176154", "createdAt": "2020-05-16T17:59:34Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDQxODI2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzo1MDozMFrOGWfAhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMzo1OTo0N1rOGWhJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTg5Mg==", "bodyText": "When system table logging is enabled, we have 2 queue.  This new one will always have 1000 max size where as the 'queueForRingBuffer' will have a default of 256 only.  Anyways we will occupy more heap memory upto 1000 messages. Why we should reduce the max numbers in queueForRingBuffer?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426229892", "createdAt": "2020-05-17T07:50:30Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;\n \n-  private final Queue<SlowLogPayload> queue;\n+  private final Queue<SlowLogPayload> queueForRingBuffer;\n+  private final Queue<SlowLogPayload> queueForSysTable;\n+  private final boolean isSlowLogTableEnabled;\n \n-  LogEventHandler(int eventCount) {\n+  private Configuration configuration;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n+\n+  LogEventHandler(int eventCount, boolean isSlowLogTableEnabled, Configuration conf) {\n+    this.configuration = conf;\n     EvictingQueue<SlowLogPayload> evictingQueue = EvictingQueue.create(eventCount);\n-    queue = Queues.synchronizedQueue(evictingQueue);\n+    queueForRingBuffer = Queues.synchronizedQueue(evictingQueue);\n+    this.isSlowLogTableEnabled = isSlowLogTableEnabled;\n+    if (isSlowLogTableEnabled) {\n+      EvictingQueue<SlowLogPayload> evictingQueueForTable = EvictingQueue.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTk3NQ==", "bodyText": "Can we have a way to avoid this 2 queues but keep it single?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426229975", "createdAt": "2020-05-17T07:51:41Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;\n \n-  private final Queue<SlowLogPayload> queue;\n+  private final Queue<SlowLogPayload> queueForRingBuffer;\n+  private final Queue<SlowLogPayload> queueForSysTable;\n+  private final boolean isSlowLogTableEnabled;\n \n-  LogEventHandler(int eventCount) {\n+  private Configuration configuration;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n+\n+  LogEventHandler(int eventCount, boolean isSlowLogTableEnabled, Configuration conf) {\n+    this.configuration = conf;\n     EvictingQueue<SlowLogPayload> evictingQueue = EvictingQueue.create(eventCount);\n-    queue = Queues.synchronizedQueue(evictingQueue);\n+    queueForRingBuffer = Queues.synchronizedQueue(evictingQueue);\n+    this.isSlowLogTableEnabled = isSlowLogTableEnabled;\n+    if (isSlowLogTableEnabled) {\n+      EvictingQueue<SlowLogPayload> evictingQueueForTable = EvictingQueue.create(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTg5Mg=="}, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2NDk0MQ==", "bodyText": "One Q is literally managed by user only and it's purpose is to server online slowlogs from memory. Another Q is for cron to insert records in system table in batch, hence both should not be same. Even if user clears the Q, the one intended is in-memory ring buffer Q. If user has opted for system table, the other Q is totally managed internally and not upto user to manage. User might also opt for lower size for config hbase.regionserver.slowlog.ringbuffer.size to say 100/50. But there is no guarantee that within 10 min of cron run, the no of slow RPC calls would be less than 50, and hence better to have another Q for systable maintenance.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426264941", "createdAt": "2020-05-17T13:59:47Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;\n \n-  private final Queue<SlowLogPayload> queue;\n+  private final Queue<SlowLogPayload> queueForRingBuffer;\n+  private final Queue<SlowLogPayload> queueForSysTable;\n+  private final boolean isSlowLogTableEnabled;\n \n-  LogEventHandler(int eventCount) {\n+  private Configuration configuration;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n+\n+  LogEventHandler(int eventCount, boolean isSlowLogTableEnabled, Configuration conf) {\n+    this.configuration = conf;\n     EvictingQueue<SlowLogPayload> evictingQueue = EvictingQueue.create(eventCount);\n-    queue = Queues.synchronizedQueue(evictingQueue);\n+    queueForRingBuffer = Queues.synchronizedQueue(evictingQueue);\n+    this.isSlowLogTableEnabled = isSlowLogTableEnabled;\n+    if (isSlowLogTableEnabled) {\n+      EvictingQueue<SlowLogPayload> evictingQueueForTable = EvictingQueue.create(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTg5Mg=="}, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDQxODU0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzo1MDo1MlrOGWfAqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNTo1Mjo1OFrOGXQy4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTkyOQ==", "bodyText": "You want a config for this like 'hbase.regionserver.slowlog.ringbuffer.size'?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426229929", "createdAt": "2020-05-17T07:50:52Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2NDU4Ng==", "bodyText": "That will conflict with the existing one. We have hbase.regionserver.slowlog.ringbuffer.size but this is only related to in memory ring buffer and has nothing to do with system table. If you believe we can increase this size, we can do it. It is rough estimate that within 10 min, we can have slow/large logs count within 1000.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426264586", "createdAt": "2020-05-17T13:56:10Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTkyOQ=="}, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzA0NTYwMQ==", "bodyText": "My ask was do u want to put a new config similar to the ring buffer's rather than hard coded 1000.\nAfter discussion, it looks like the confusion mostly coming because of these Q sizes and its value is not really going with its intent.  Ideally the ringbuffer Q is supposed to hold the slow logs for much longer time. The table Q is cleared/reduced in every 10 mins. So ideally the size of the table Q <= ring buffer Q size.  Then all confusions will go.\nI would suggest we do this way.\nWe can have a new config like 'hbase.regionserver.slowlog.ringbuffer.size' for the table Q size. Its default value can be the value of hbase.regionserver.slowlog.ringbuffer.size' itself.   This 2 Q system will allow user to even have a tableQ size > ringbuffer Q size by tuning the config.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427045601", "createdAt": "2020-05-19T05:52:58Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTkyOQ=="}, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDQxOTA5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzo1MjozM1rOGWfBCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNDowMToyNlrOGWhKIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMDAyNQ==", "bodyText": "Even while adding here also u can have below check right?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426230025", "createdAt": "2020-05-17T07:52:33Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -129,7 +147,12 @@ public void onEvent(RingBufferEnvelope event, long sequence, boolean endOfBatch)\n       .setType(type)\n       .setUserName(userName)\n       .build();\n-    queue.add(slowLogPayload);\n+    queueForRingBuffer.add(slowLogPayload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2NTEyMg==", "bodyText": "Actually this is for in-memory ring buffer and has nothing to do with below check. isSlowLogTableEnabled is for queueForSysTable only. If the execution comes till this point, that means we do at least need to create in-memory ring buffer and that one is queueForRingBuffer (this is previous feature).", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426265122", "createdAt": "2020-05-17T14:01:26Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -129,7 +147,12 @@ public void onEvent(RingBufferEnvelope event, long sequence, boolean endOfBatch)\n       .setType(type)\n       .setUserName(userName)\n       .build();\n-    queue.add(slowLogPayload);\n+    queueForRingBuffer.add(slowLogPayload);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMDAyNQ=="}, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDQyMzA3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzo1ODozMVrOGWfDIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxNDowMjoxMFrOGWhKUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMDU2MQ==", "bodyText": "This will be done when Admin issues clearSlowLogsResponses req.  Still it wont reduce the RS heap usage as we have 2 queues. Is that what we intent?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426230561", "createdAt": "2020-05-17T07:58:31Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -160,7 +183,7 @@ boolean clearSlowLogs() {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Received request to clean up online slowlog buffer..\");\n     }\n-    queue.clear();\n+    queueForRingBuffer.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI2NTE3MQ==", "bodyText": "Yes, this is intended since another Q is quite internal for systable insertion by cron.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426265171", "createdAt": "2020-05-17T14:02:10Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -160,7 +183,7 @@ boolean clearSlowLogs() {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Received request to clean up online slowlog buffer..\");\n     }\n-    queue.clear();\n+    queueForRingBuffer.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMDU2MQ=="}, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMwODY1OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNDo0MlrOGXq18Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNDo0MlrOGXq18Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MjM2OQ==", "bodyText": "Good. This is where we set the priority.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427472369", "createdAt": "2020-05-19T17:24:42Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -532,7 +533,7 @@ static int calcPriority(int priority, TableName tableName) {\n   }\n \n   static int getPriority(TableName tableName) {\n-    if (tableName.isSystemTable()) {\n+    if (tableName.isSystemTable() && !tableName.equals(SlowLogTableAccessor.SLOW_LOG_TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMxNDA2OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/HBaseRpcControllerImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNjowMlrOGXq5dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo1Mjo0N1rOGXuLhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MzI3MA==", "bodyText": "May be move this to a util method some where. Like isMeta that we have. We can say as isLogTable()?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427473270", "createdAt": "2020-05-19T17:26:02Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/HBaseRpcControllerImpl.java", "diffHunk": "@@ -101,8 +102,12 @@ public void setPriority(int priority) {\n \n   @Override\n   public void setPriority(final TableName tn) {\n-    setPriority(\n-      tn != null && tn.isSystemTable() ? HConstants.SYSTEMTABLE_QOS : HConstants.NORMAL_QOS);\n+    int priority = HConstants.NORMAL_QOS;\n+    if (tn != null && tn.isSystemTable()\n+        && !tn.equals(SlowLogTableAccessor.SLOW_LOG_TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ5MjUwNA==", "bodyText": "Should we set the priority on the write req directly (Put) rather than having extra check like this at different places?  That will work right?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427492504", "createdAt": "2020-05-19T17:55:35Z", "author": {"login": "anoopsjohn"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/HBaseRpcControllerImpl.java", "diffHunk": "@@ -101,8 +102,12 @@ public void setPriority(int priority) {\n \n   @Override\n   public void setPriority(final TableName tn) {\n-    setPriority(\n-      tn != null && tn.isSystemTable() ? HConstants.SYSTEMTABLE_QOS : HConstants.NORMAL_QOS);\n+    int priority = HConstants.NORMAL_QOS;\n+    if (tn != null && tn.isSystemTable()\n+        && !tn.equals(SlowLogTableAccessor.SLOW_LOG_TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MzI3MA=="}, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNzA0Nw==", "bodyText": "Oh, okk sure let me update priority with Put request. So in that case, we don't need this change and even the above class change tableName.isSystemTable() && !tableName.equals(SlowLogTableAccessor.SLOW_LOG_TABLE_NAME).\nThanks @ramkrish86 @anoopsjohn", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427527047", "createdAt": "2020-05-19T18:52:47Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/HBaseRpcControllerImpl.java", "diffHunk": "@@ -101,8 +102,12 @@ public void setPriority(int priority) {\n \n   @Override\n   public void setPriority(final TableName tn) {\n-    setPriority(\n-      tn != null && tn.isSystemTable() ? HConstants.SYSTEMTABLE_QOS : HConstants.NORMAL_QOS);\n+    int priority = HConstants.NORMAL_QOS;\n+    if (tn != null && tn.isSystemTable()\n+        && !tn.equals(SlowLogTableAccessor.SLOW_LOG_TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MzI3MA=="}, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMyMTc5OnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzo0OFrOGXq-Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NTo0OFrOGXt7Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDQ2Ng==", "bodyText": "It is synchronized. Good. Anyway mostly it will be only one thread executing it I believe.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427474466", "createdAt": "2020-05-19T17:27:48Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMjg1OQ==", "bodyText": "That is correct, only one thread, however since this is for creating connection, thought of keeping synchronized.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427522859", "createdAt": "2020-05-19T18:45:48Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDQ2Ng=="}, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMyMjIwOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzo1NlrOGXq-cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzo1NlrOGXq-cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDU0NA==", "bodyText": "Nice.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427474544", "createdAt": "2020-05-19T17:27:56Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)\n+      throws IOException {\n+    Configuration conf = new Configuration(configuration);\n+    // rpc timeout: 20s\n+    conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+    // retry count: 5\n+    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+    conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMyNDUwOnYy", "diffSide": "RIGHT", "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyODoyN1rOGXq_wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0OTowM1rOGXuC0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDg4Mg==", "bodyText": "Are we going to expose this to the user incase he needs to query based on row key? How are we planning to expose it? Some doc ?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427474882", "createdAt": "2020-05-19T17:28:27Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)\n+      throws IOException {\n+    Configuration conf = new Configuration(configuration);\n+    // rpc timeout: 20s\n+    conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+    // retry count: 5\n+    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+    conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+    connection = ConnectionFactory.createConnection(conf);\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {\n+    String hashcode = String.valueOf(slowLogPayload.hashCode());\n+    String lastFiveDig =\n+      hashcode.substring((hashcode.length() > 5) ? (hashcode.length() - 5) : 0);\n+    if (lastFiveDig.startsWith(\"-\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyNDgxNw==", "bodyText": "Sure, we will have doc but on high level, this table is going to be scanned only by end user, maybe with multiple ColumnValueFilters but we are not expecting get queries with rowkey since users are interested to know what are the records (e.g slow logs on table meta done by user xyz etc), then don't need to know rowkey.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427524817", "createdAt": "2020-05-19T18:49:03Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)\n+      throws IOException {\n+    Configuration conf = new Configuration(configuration);\n+    // rpc timeout: 20s\n+    conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+    // retry count: 5\n+    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+    conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+    connection = ConnectionFactory.createConnection(conf);\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {\n+    String hashcode = String.valueOf(slowLogPayload.hashCode());\n+    String lastFiveDig =\n+      hashcode.substring((hashcode.length() > 5) ? (hashcode.length() - 5) : 0);\n+    if (lastFiveDig.startsWith(\"-\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDg4Mg=="}, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMyOTc5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyOTo0NlrOGXrDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyOTo0NlrOGXrDKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NTc1NA==", "bodyText": "Better to move this to constant. nit", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427475754", "createdAt": "2020-05-19T17:29:46Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +283,36 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      // hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\n+      return;\n+    }\n+    if (LOCK.isLocked()) {\n+      return;\n+    }\n+    LOCK.lock();\n+    try {\n+      List<SlowLogPayload> slowLogPayloads = new ArrayList<>();\n+      int i = 0;\n+      while (!queueForSysTable.isEmpty()) {\n+        slowLogPayloads.add(queueForSysTable.poll());\n+        i++;\n+        if (i == 100) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1760, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}