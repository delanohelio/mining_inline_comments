{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NzM0NDE2", "number": 2327, "title": "Hbase-24764 : Add support of adding base peer configs via hbase-site.xml for all replication peers", "bodyText": "JIRA: https://issues.apache.org/jira/browse/HBASE-24764\nJIRA Description:\nToday, if a user needs to apply some common base peer configs to all the replication peers on the cluster,  the only way is to execute update_peer_config via CLI which requires manual intervention and can be tedious in case of large deployment fleet.\nAs part of this JIRA, we plan to add the support to have base replication peer configs as part of hbase-site.xml like hbase.replication.peer.base.config=\"k1=v1;k2=v2..\" which can be easily updated and applied as part of a rolling restart.\nExample below:\n    <property> \n    <name>hbase.replication.peer.base.configs</name>\n<value>hbase.replication.source.custom.walentryfilters=x,y,z;hbase.rpc.protection=abc;hbase.xxx.custom_property=123</value>\n    </property>\n\nThis property will be empty by default, but user can override to have base configs in place.\nThe final peer configuration would be a merge of whatever is currently present or what users override during the peer creation/update (if any) + this newly added base config.\nRelated Jira: https://issues.apache.org/jira/browse/HBASE-17543.  HBASE-17543 added the support to add the WALEntryFilters to default endpoint via peer configuration.\nBy this new Jira we are extending the support to update peer configs via hbase-site.xml and hence WalEntryFilters or any other peer property can be applied just by rolling restart.\nmaster branch PR : #2284", "createdAt": "2020-08-29T07:07:07Z", "url": "https://github.com/apache/hbase/pull/2327", "merged": true, "mergeCommit": {"oid": "f0acafc58e2926362541e20a2f37ba6ff4eee1cc"}, "closed": true, "closedAt": "2020-09-17T16:39:56Z", "author": {"login": "ankitjain64"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDkEvTAH2gAyNDc1NzM0NDE2OjkwNmRiMTFlNjllNjQwYzM4ZWQzMDc3OTA3MTEzYmEwNDMxOGJmODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJmt9ogH2gAyNDc1NzM0NDE2OjIzM2E0ODc2ZTEyMTQyNmQ2ZTVjOGYyYmE5N2RjMGY4Y2Q0Nzk5NjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "906db11e69e640c38ed3077907113ba04318bf80", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/906db11e69e640c38ed3077907113ba04318bf80", "committedDate": "2020-08-29T07:00:46Z", "message": "HBASE-24764: Add support of adding base peer configs via hbase-site.xml for all replication peers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a739beb4a4f05f796b30a8930aaf65d6d7c7f5", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/59a739beb4a4f05f796b30a8930aaf65d6d7c7f5", "committedDate": "2020-08-31T22:26:18Z", "message": "HBASE-24764: Reordering imports for checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d558c30f67174c0007c91155462c7caf7ec22da6", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/d558c30f67174c0007c91155462c7caf7ec22da6", "committedDate": "2020-09-01T18:57:12Z", "message": "HBASE-24764: Modifying comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODA2ODg5", "url": "https://github.com/apache/hbase/pull/2327#pullrequestreview-489806889", "createdAt": "2020-09-16T16:38:32Z", "commit": {"oid": "d558c30f67174c0007c91155462c7caf7ec22da6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozODozMlrOHS5RuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozODozMlrOHS5RuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3NDg0MA==", "bodyText": "nit: just use this.configuration directly?", "url": "https://github.com/apache/hbase/pull/2327#discussion_r489574840", "createdAt": "2020-09-16T16:38:32Z", "author": {"login": "bharathv"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/replication/ReplicationPeerConfig.java", "diffHunk": "@@ -99,6 +105,36 @@ public ReplicationPeerConfig setBandwidth(long bandwidth) {\n     return this;\n   }\n \n+  /**\n+   * Helper method to add base peer configs from Configuration to ReplicationPeerConfig\n+   * if not present in latter.\n+   *\n+   * This merges the user supplied peer configuration\n+   * {@link org.apache.hadoop.hbase.replication.ReplicationPeerConfig} with peer configs\n+   * provided as property hbase.replication.peer.base.configs in hbase configuration.\n+   * Expected format for this hbase configuration is \"k1=v1;k2=v2,v2_1\". Original value\n+   * of conf is retained if already present in ReplicationPeerConfig.\n+   *\n+   * @param conf Configuration\n+   */\n+  public void addBasePeerConfigsIfNotPresent(Configuration conf) {\n+    String basePeerConfigs = conf.get(HBASE_REPLICATION_PEER_BASE_CONFIG, \"\");\n+    Map<String,String> receivedPeerConfigMap = this.getConfiguration();\n+\n+    if (basePeerConfigs.length() != 0) {\n+      Map<String, String> basePeerConfigMap = Splitter.on(';').trimResults().omitEmptyStrings()\n+        .withKeyValueSeparator(\"=\").split(basePeerConfigs);\n+      for (Map.Entry<String,String> entry : basePeerConfigMap.entrySet()) {\n+        String configName = entry.getKey();\n+        String configValue = entry.getValue();\n+        // Only override if base config does not exist in existing replication peer configs\n+        if (!receivedPeerConfigMap.containsKey(configName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d558c30f67174c0007c91155462c7caf7ec22da6"}, "originalPosition": 53}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "233a4876e121426d6e5c8f2ba97dc0f8cd479960", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/233a4876e121426d6e5c8f2ba97dc0f8cd479960", "committedDate": "2020-09-17T01:29:09Z", "message": "HBASE-24764: Review comments. Note: branch-1 has design difference wrt to other branch for Hbase-24764. branch-1 does not have master based coordination for replication like master branch , and hence each RS is responsible for initing peers and updating ZK states. As part of this change we are updating zk state of peers after reading from configuration, so if there is a divergence in configuration across RS the result can be can be non-deteministic and the last RS RPC will win."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4714, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}