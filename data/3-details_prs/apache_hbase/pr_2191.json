{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzU0Mjcx", "number": 2191, "title": "HBASE-24813 ReplicationSource should clear buffer usage on Replicatio\u2026", "bodyText": "\u2026nSourceManager upon termination", "createdAt": "2020-08-03T19:25:43Z", "url": "https://github.com/apache/hbase/pull/2191", "merged": true, "mergeCommit": {"oid": "687e53b7e49c1a149e55829bbeca6aa4edfe69e7"}, "closed": true, "closedAt": "2020-09-24T09:44:37Z", "author": {"login": "wchevreuil"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7XHAagH2gAyNDYyMzU0MjcxOjYzYjhlMTVkZGMxYjM0YmJiZDFiNDUzNGM2ZDJhOGVkNDgwMGVlYTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLyLzigFqTQ5NTAwMjQ2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "63b8e15ddc1b34bbbd1b4534c6d2a8ed4800eea5", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/63b8e15ddc1b34bbbd1b4534c6d2a8ed4800eea5", "committedDate": "2020-08-03T19:23:05Z", "message": "HBASE-24813 ReplicationSource should clear buffer usage on ReplicationSourceManager upon termination"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02ed4fa1ac87287d4bc1189650973f5b991914e8", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/02ed4fa1ac87287d4bc1189650973f5b991914e8", "committedDate": "2020-08-04T09:01:43Z", "message": "addressing checkstyles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bba267c0bb3dc4e6019fe308ce23e1bb9e164a7e", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/bba267c0bb3dc4e6019fe308ce23e1bb9e164a7e", "committedDate": "2020-08-05T14:07:07Z", "message": "addressing TestReplicationSource checkstyle issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTQzNDE0", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-464543414", "createdAt": "2020-08-10T20:07:37Z", "commit": {"oid": "bba267c0bb3dc4e6019fe308ce23e1bb9e164a7e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowNzozN1rOG-duxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxNTozNFrOG-eIHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjAwNQ==", "bodyText": "nit: we", "url": "https://github.com/apache/hbase/pull/2191#discussion_r468152005", "createdAt": "2020-08-10T20:07:37Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -600,6 +600,10 @@ public void terminate(String reason, Exception cause, boolean clearMetrics, bool\n         if (worker.entryReader.isAlive()) {\n           worker.entryReader.interrupt();\n         }\n+      } else {\n+        //If worker is already stopped but there was still entries batched,\n+        //wee need to clear buffer used for non processed entries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba267c0bb3dc4e6019fe308ce23e1bb9e164a7e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MzcyMA==", "bodyText": "Should this be atomic? Is there anything to prevent two racing threads: one calling this clearWALEntryBatch() method and another trying to normally consume the next WALEntryBatch?\nI think this could lead to a double-decrement.", "url": "https://github.com/apache/hbase/pull/2191#discussion_r468153720", "createdAt": "2020-08-10T20:11:14Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReader.java", "diffHunk": "@@ -309,6 +310,16 @@ public WALEntryBatch poll(long timeout) throws InterruptedException {\n     return entryBatchQueue.poll(timeout, TimeUnit.MILLISECONDS);\n   }\n \n+  public void clearWALEntryBatch() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba267c0bb3dc4e6019fe308ce23e1bb9e164a7e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1ODQ5NQ==", "bodyText": "What about summing the total size to decrement and then making the one call to totalBufferUsed? Guessing that might be micro-optimized faster.", "url": "https://github.com/apache/hbase/pull/2191#discussion_r468158495", "createdAt": "2020-08-10T20:15:34Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceWALReader.java", "diffHunk": "@@ -309,6 +310,16 @@ public WALEntryBatch poll(long timeout) throws InterruptedException {\n     return entryBatchQueue.poll(timeout, TimeUnit.MILLISECONDS);\n   }\n \n+  public void clearWALEntryBatch() {\n+    entryBatchQueue.forEach(w -> {\n+      entryBatchQueue.remove(w);\n+      w.getWalEntries().forEach(e -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bba267c0bb3dc4e6019fe308ce23e1bb9e164a7e"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aee4d4df689e3c9f739d5bed9a524542aa3aa4b", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/6aee4d4df689e3c9f739d5bed9a524542aa3aa4b", "committedDate": "2020-08-12T18:17:35Z", "message": "addressing Josh latest suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a872761c558f595a0a437fa6fd353c9effbdf0", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/75a872761c558f595a0a437fa6fd353c9effbdf0", "committedDate": "2020-08-13T09:38:14Z", "message": "Merge branch 'master' into HBASE-24813-master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjY3NDcw", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-467267470", "createdAt": "2020-08-14T02:21:41Z", "commit": {"oid": "75a872761c558f595a0a437fa6fd353c9effbdf0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjoyMTo0MVrOHAlXgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMjoyMTo0MVrOHAlXgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM3NDI3NQ==", "bodyText": "We will not do this for the above condition branch?", "url": "https://github.com/apache/hbase/pull/2191#discussion_r470374275", "createdAt": "2020-08-14T02:21:41Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -650,6 +650,10 @@ public void terminate(String reason, Exception cause, boolean clearMetrics, bool\n         if (worker.entryReader.isAlive()) {\n           worker.entryReader.interrupt();\n         }\n+      } else {\n+        //If worker is already stopped but there was still entries batched,\n+        //we need to clear buffer used for non processed entries\n+        worker.clearWALEntryBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75a872761c558f595a0a437fa6fd353c9effbdf0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98096163507122c16721afe8e7d9964c8ed936ce", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/98096163507122c16721afe8e7d9964c8ed936ce", "committedDate": "2020-08-14T16:09:10Z", "message": "updated comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a48376ea943580a9026c3b78515e9165c26d6261", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/a48376ea943580a9026c3b78515e9165c26d6261", "committedDate": "2020-08-14T16:22:40Z", "message": "Addressing issue on terminate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b865d119dbac6c3929c71a0d108e18b8fa1d0dc", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/7b865d119dbac6c3929c71a0d108e18b8fa1d0dc", "committedDate": "2020-08-25T10:39:37Z", "message": "addressing checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMzQzOTkx", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-482343991", "createdAt": "2020-09-04T04:11:19Z", "commit": {"oid": "7b865d119dbac6c3929c71a0d108e18b8fa1d0dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDoxMToxOVrOHM-20g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNDoyNzozMVrOHM_FxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NDgwMg==", "bodyText": "we don't need the null check still?", "url": "https://github.com/apache/hbase/pull/2191#discussion_r483374802", "createdAt": "2020-09-04T04:11:19Z", "author": {"login": "busbey"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -626,14 +626,10 @@ public void terminate(String reason, Exception cause, boolean clearMetrics, bool\n       Threads.shutdown(initThread, this.sleepForRetries);\n     }\n     Collection<ReplicationSourceShipper> workers = workerThreads.values();\n-    for (ReplicationSourceShipper worker : workers) {\n-      worker.stopWorker();\n-      if(worker.entryReader != null) {\n-        worker.entryReader.setReaderRunning(false);\n-      }\n-    }\n \n     for (ReplicationSourceShipper worker : workers) {\n+      worker.stopWorker();\n+      worker.entryReader.setReaderRunning(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b865d119dbac6c3929c71a0d108e18b8fa1d0dc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzE3Mw==", "bodyText": "given that clearWALEntryBatch will wait for the worker to not be alive, why are we waiting for it here as well?", "url": "https://github.com/apache/hbase/pull/2191#discussion_r483377173", "createdAt": "2020-09-04T04:21:20Z", "author": {"login": "busbey"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -651,6 +647,20 @@ public void terminate(String reason, Exception cause, boolean clearMetrics, bool\n           worker.entryReader.interrupt();\n         }\n       }\n+      //block this thread until worker thread is interrupted\n+      while(worker.isAlive()){\n+        try {\n+          // Wait worker to stop\n+          Thread.sleep(this.sleepForRetries);\n+        } catch (InterruptedException e) {\n+          LOG.info(\"{} Interrupted while waiting {} to stop\", logPeerId(), worker.getName());\n+          Thread.currentThread().interrupt();\n+        }\n+      }\n+      //If worker is already stopped but there was still entries batched,\n+      //we need to clear buffer used for non processed entries\n+      worker.clearWALEntryBatch();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b865d119dbac6c3929c71a0d108e18b8fa1d0dc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3NzUyOQ==", "bodyText": "should we have a timeout here? or is there a timeout above us that will interrupt if we take too long?", "url": "https://github.com/apache/hbase/pull/2191#discussion_r483377529", "createdAt": "2020-09-04T04:22:48Z", "author": {"login": "busbey"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java", "diffHunk": "@@ -324,4 +326,39 @@ void stopWorker() {\n   public boolean isFinished() {\n     return state == WorkerState.FINISHED;\n   }\n+\n+  /**\n+   * Attempts to properly update <code>ReplicationSourceManager.totalBufferUser</code>,\n+   * in case there were unprocessed entries batched by the reader to the shipper,\n+   * but the shipper didn't manage to ship those because the replication source is being terminated.\n+   * In that case, it iterates through the batched entries and decrease the pending\n+   * entries size from <code>ReplicationSourceManager.totalBufferUser</code>\n+   * <p/>\n+   * <b>NOTE</b> This method should be only called upon replication source termination.\n+   * It blocks waiting for both shipper and reader threads termination,\n+   * to make sure no race conditions\n+   * when updating <code>ReplicationSourceManager.totalBufferUser</code>.\n+   */\n+  void clearWALEntryBatch() {\n+    while(this.isAlive() || this.entryReader.isAlive()){\n+      try {\n+        // Wait both shipper and reader threads to stop\n+        Thread.sleep(this.sleepForRetries);\n+      } catch (InterruptedException e) {\n+        LOG.info(\"{} Interrupted while waiting {} to stop on clearWALEntryBatch\",\n+          this.source.getPeerId(), this.getName());\n+        Thread.currentThread().interrupt();\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b865d119dbac6c3929c71a0d108e18b8fa1d0dc"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3ODIyOA==", "bodyText": "expressly note that both the worker and the entry reader should have already been interrupted because we're not doing it here.", "url": "https://github.com/apache/hbase/pull/2191#discussion_r483378228", "createdAt": "2020-09-04T04:25:41Z", "author": {"login": "busbey"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java", "diffHunk": "@@ -324,4 +326,39 @@ void stopWorker() {\n   public boolean isFinished() {\n     return state == WorkerState.FINISHED;\n   }\n+\n+  /**\n+   * Attempts to properly update <code>ReplicationSourceManager.totalBufferUser</code>,\n+   * in case there were unprocessed entries batched by the reader to the shipper,\n+   * but the shipper didn't manage to ship those because the replication source is being terminated.\n+   * In that case, it iterates through the batched entries and decrease the pending\n+   * entries size from <code>ReplicationSourceManager.totalBufferUser</code>\n+   * <p/>\n+   * <b>NOTE</b> This method should be only called upon replication source termination.\n+   * It blocks waiting for both shipper and reader threads termination,\n+   * to make sure no race conditions\n+   * when updating <code>ReplicationSourceManager.totalBufferUser</code>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b865d119dbac6c3929c71a0d108e18b8fa1d0dc"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzM3ODYyOA==", "bodyText": "is info the right level here? maybe it is? but if we get interrupted that means we could go to do the update below in a racy way with the other threads right?", "url": "https://github.com/apache/hbase/pull/2191#discussion_r483378628", "createdAt": "2020-09-04T04:27:31Z", "author": {"login": "busbey"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java", "diffHunk": "@@ -324,4 +326,39 @@ void stopWorker() {\n   public boolean isFinished() {\n     return state == WorkerState.FINISHED;\n   }\n+\n+  /**\n+   * Attempts to properly update <code>ReplicationSourceManager.totalBufferUser</code>,\n+   * in case there were unprocessed entries batched by the reader to the shipper,\n+   * but the shipper didn't manage to ship those because the replication source is being terminated.\n+   * In that case, it iterates through the batched entries and decrease the pending\n+   * entries size from <code>ReplicationSourceManager.totalBufferUser</code>\n+   * <p/>\n+   * <b>NOTE</b> This method should be only called upon replication source termination.\n+   * It blocks waiting for both shipper and reader threads termination,\n+   * to make sure no race conditions\n+   * when updating <code>ReplicationSourceManager.totalBufferUser</code>.\n+   */\n+  void clearWALEntryBatch() {\n+    while(this.isAlive() || this.entryReader.isAlive()){\n+      try {\n+        // Wait both shipper and reader threads to stop\n+        Thread.sleep(this.sleepForRetries);\n+      } catch (InterruptedException e) {\n+        LOG.info(\"{} Interrupted while waiting {} to stop on clearWALEntryBatch\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b865d119dbac6c3929c71a0d108e18b8fa1d0dc"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75c3915f964d1a8f1bde4981354f7924ba92c7c7", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/75c3915f964d1a8f1bde4981354f7924ba92c7c7", "committedDate": "2020-09-07T12:26:20Z", "message": "addressing Busbey review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3", "committedDate": "2020-09-09T15:21:23Z", "message": "addressing checkstyles"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODk0MzQw", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-486894340", "createdAt": "2020-09-11T15:11:06Z", "commit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxMTowNlrOHQi6Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxMTowNlrOHQi6Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMTI1MA==", "bodyText": "Semantics of this have changed, but I'm not seeing conversation that indicates that it was intentional.\nBefore: we would stop all workers, then wait for them all to be stopped. Each worker could stop itself concurrently. Now, for each worker, we request a stop and then wait for it to be stopped, then move on to the next worker.\nI don't think this is a big deal, but wanted to call it out.", "url": "https://github.com/apache/hbase/pull/2191#discussion_r487111250", "createdAt": "2020-09-11T15:11:06Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSource.java", "diffHunk": "@@ -626,14 +626,12 @@ public void terminate(String reason, Exception cause, boolean clearMetrics, bool\n       Threads.shutdown(initThread, this.sleepForRetries);\n     }\n     Collection<ReplicationSourceShipper> workers = workerThreads.values();\n+\n     for (ReplicationSourceShipper worker : workers) {\n       worker.stopWorker();\n-      if(worker.entryReader != null) {\n+      if (worker.entryReader != null) {\n         worker.entryReader.setReaderRunning(false);\n       }\n-    }\n-\n-    for (ReplicationSourceShipper worker : workers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODk2MDE1", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-486896015", "createdAt": "2020-09-11T15:13:08Z", "commit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxMzowOVrOHQi_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxMzowOVrOHQi_VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMjUzMg==", "bodyText": "Could just break instead of interrupting this thread.", "url": "https://github.com/apache/hbase/pull/2191#discussion_r487112532", "createdAt": "2020-09-11T15:13:09Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java", "diffHunk": "@@ -324,4 +326,51 @@ void stopWorker() {\n   public boolean isFinished() {\n     return state == WorkerState.FINISHED;\n   }\n+\n+  /**\n+   * Attempts to properly update <code>ReplicationSourceManager.totalBufferUser</code>,\n+   * in case there were unprocessed entries batched by the reader to the shipper,\n+   * but the shipper didn't manage to ship those because the replication source is being terminated.\n+   * In that case, it iterates through the batched entries and decrease the pending\n+   * entries size from <code>ReplicationSourceManager.totalBufferUser</code>\n+   * <p/>\n+   * <b>NOTES</b>\n+   * 1) This method should only be called upon replication source termination.\n+   * It blocks waiting for both shipper and reader threads termination,\n+   * to make sure no race conditions\n+   * when updating <code>ReplicationSourceManager.totalBufferUser</code>.\n+   *\n+   * 2) It <b>does not</b> attempt to terminate reader and shipper threads. Those <b>must</b>\n+   * have been triggered interruption/termination prior to calling this method.\n+   */\n+  void clearWALEntryBatch() {\n+    long timeout = System.currentTimeMillis() + this.shipEditsTimeout;\n+    while(this.isAlive() || this.entryReader.isAlive()){\n+      try {\n+        if (System.currentTimeMillis() >= timeout) {\n+          LOG.warn(\"Interrupting source thread for peer {} without cleaning buffer usage \"\n+            + \"because clearWALEntryBatch method timed out whilst waiting reader/shipper \"\n+            + \"thread to stop.\", this.source.getPeerId());\n+          Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODk3NDA5", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-486897409", "createdAt": "2020-09-11T15:14:57Z", "commit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxNDo1OFrOHQjDfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNToxNDo1OFrOHQjDfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzExMzU5Ng==", "bodyText": "Thanks for updating the decrement logic.\nMaybe a TRACE log message to indicate the amount of buffer reclaimed as a part of shutting down. Sounds like that might be helpful in the future. e.g.\nLOG.trace(\"Decrementing totalBufferUsed by {}B while stopping Replication WAL Readers\", totalToDecrement.longValue())", "url": "https://github.com/apache/hbase/pull/2191#discussion_r487113596", "createdAt": "2020-09-11T15:14:58Z", "author": {"login": "joshelser"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/replication/regionserver/ReplicationSourceShipper.java", "diffHunk": "@@ -324,4 +326,51 @@ void stopWorker() {\n   public boolean isFinished() {\n     return state == WorkerState.FINISHED;\n   }\n+\n+  /**\n+   * Attempts to properly update <code>ReplicationSourceManager.totalBufferUser</code>,\n+   * in case there were unprocessed entries batched by the reader to the shipper,\n+   * but the shipper didn't manage to ship those because the replication source is being terminated.\n+   * In that case, it iterates through the batched entries and decrease the pending\n+   * entries size from <code>ReplicationSourceManager.totalBufferUser</code>\n+   * <p/>\n+   * <b>NOTES</b>\n+   * 1) This method should only be called upon replication source termination.\n+   * It blocks waiting for both shipper and reader threads termination,\n+   * to make sure no race conditions\n+   * when updating <code>ReplicationSourceManager.totalBufferUser</code>.\n+   *\n+   * 2) It <b>does not</b> attempt to terminate reader and shipper threads. Those <b>must</b>\n+   * have been triggered interruption/termination prior to calling this method.\n+   */\n+  void clearWALEntryBatch() {\n+    long timeout = System.currentTimeMillis() + this.shipEditsTimeout;\n+    while(this.isAlive() || this.entryReader.isAlive()){\n+      try {\n+        if (System.currentTimeMillis() >= timeout) {\n+          LOG.warn(\"Interrupting source thread for peer {} without cleaning buffer usage \"\n+            + \"because clearWALEntryBatch method timed out whilst waiting reader/shipper \"\n+            + \"thread to stop.\", this.source.getPeerId());\n+          Thread.currentThread().interrupt();\n+        } else {\n+          // Wait both shipper and reader threads to stop\n+          Thread.sleep(this.sleepForRetries);\n+        }\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"{} Interrupted while waiting {} to stop on clearWALEntryBatch: {}\",\n+          this.source.getPeerId(), this.getName(), e);\n+        Thread.currentThread().interrupt();\n+      }\n+    }\n+    LongAccumulator totalToDecrement = new LongAccumulator((a,b) -> a + b, 0);\n+    entryReader.entryBatchQueue.forEach(w -> {\n+      entryReader.entryBatchQueue.remove(w);\n+      w.getWalEntries().forEach(e -> {\n+        long entrySizeExcludeBulkLoad = entryReader.getEntrySizeExcludeBulkLoad(e);\n+        totalToDecrement.accumulate(entrySizeExcludeBulkLoad);\n+      });\n+    });\n+\n+    source.getSourceManager().getTotalBufferUsed().addAndGet(-totalToDecrement.longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2ODk3NzE5", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-486897719", "createdAt": "2020-09-11T15:15:23Z", "commit": {"oid": "2a61bccffc8dfc4d33701d53f38cb8ba993ff9b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dca0ef06ff5145640754257b720d499eebfde58", "author": {"user": {"login": "wchevreuil", "name": "Wellington Ramos Chevreuil"}}, "url": "https://github.com/apache/hbase/commit/8dca0ef06ff5145640754257b720d499eebfde58", "committedDate": "2020-09-15T09:59:49Z", "message": "adding extra TRACE message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MDAyNDY3", "url": "https://github.com/apache/hbase/pull/2191#pullrequestreview-495002467", "createdAt": "2020-09-23T19:58:33Z", "commit": {"oid": "8dca0ef06ff5145640754257b720d499eebfde58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4150, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}