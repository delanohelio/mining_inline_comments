{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNzE1MDQ5", "number": 2194, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo0ODo0NVrOEWwnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1MDo0NFrOEWwpVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAwNTQ1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo0ODo0NVrOG-LTzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMzoxMDozOVrOG-m1aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MDE5MA==", "bodyText": "This is not as per other branch patches. Why?", "url": "https://github.com/apache/hbase/pull/2194#discussion_r467850190", "createdAt": "2020-08-10T11:48:45Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -229,11 +244,52 @@ private void scheduleFlush(final byte [] encodedRegionName) {\n    */\n   @VisibleForTesting\n   public boolean walRollFinished() {\n-    for (boolean needRoll : walNeedsRoll.values()) {\n-      if (needRoll) {\n+    long now = System.currentTimeMillis();\n+    for (RollController controller : wals.values()) {\n+      if (controller.needsRoll(now)) {\n         return false;\n       }\n     }\n     return true;\n   }\n+\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public byte[][] rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      byte[][] regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc0dbff4ceded376d99b4d0f2d5b3a0e511bd05"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMTE2MQ==", "bodyText": "In order to be consistent with the previous", "url": "https://github.com/apache/hbase/pull/2194#discussion_r468301161", "createdAt": "2020-08-11T03:10:39Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -229,11 +244,52 @@ private void scheduleFlush(final byte [] encodedRegionName) {\n    */\n   @VisibleForTesting\n   public boolean walRollFinished() {\n-    for (boolean needRoll : walNeedsRoll.values()) {\n-      if (needRoll) {\n+    long now = System.currentTimeMillis();\n+    for (RollController controller : wals.values()) {\n+      if (controller.needsRoll(now)) {\n         return false;\n       }\n     }\n     return true;\n   }\n+\n+\n+  /**\n+   * Independently control the roll of each wal. When use multiwal,\n+   * can avoid all wal roll together. see HBASE-24665 for detail\n+   */\n+  protected class RollController {\n+    private final WAL wal;\n+    private final AtomicBoolean rollRequest;\n+    private long lastRollTime;\n+\n+    RollController(WAL wal) {\n+      this.wal = wal;\n+      this.rollRequest = new AtomicBoolean(false);\n+      this.lastRollTime = System.currentTimeMillis();\n+    }\n+\n+    public void requestRoll() {\n+      this.rollRequest.set(true);\n+    }\n+\n+    public byte[][] rollWal(long now) throws IOException {\n+      this.lastRollTime = now;\n+      byte[][] regionsToFlush = wal.rollWriter(true);\n+      this.rollRequest.set(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MDE5MA=="}, "originalCommit": {"oid": "7cc0dbff4ceded376d99b4d0f2d5b3a0e511bd05"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAwODUzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo0OTo0OVrOG-LVjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMzoxMTozMFrOG-m2GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MDYzOQ==", "bodyText": "This logic is not same as per branch-2 patches.  What is different here? why?", "url": "https://github.com/apache/hbase/pull/2194#discussion_r467850639", "createdAt": "2020-08-10T11:49:49Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -141,9 +150,14 @@ public void run() {\n     while (!server.isStopped()) {\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      boolean periodic = false;\n       if (!rollLog.get()) {\n-        periodic = (now - this.lastrolltime) > this.rollperiod;\n+        boolean periodic = false;\n+        for (RollController controller : wals.values()) {\n+          if (controller.needsPeriodicRoll(now)) {\n+            periodic = true;\n+            break;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc0dbff4ceded376d99b4d0f2d5b3a0e511bd05"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMTMzNg==", "bodyText": "In order to be compatible with jdk1.7", "url": "https://github.com/apache/hbase/pull/2194#discussion_r468301336", "createdAt": "2020-08-11T03:11:30Z", "author": {"login": "WenFeiYi"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -141,9 +150,14 @@ public void run() {\n     while (!server.isStopped()) {\n       long now = System.currentTimeMillis();\n       checkLowReplication(now);\n-      boolean periodic = false;\n       if (!rollLog.get()) {\n-        periodic = (now - this.lastrolltime) > this.rollperiod;\n+        boolean periodic = false;\n+        for (RollController controller : wals.values()) {\n+          if (controller.needsPeriodicRoll(now)) {\n+            periodic = true;\n+            break;\n+          }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MDYzOQ=="}, "originalCommit": {"oid": "7cc0dbff4ceded376d99b4d0f2d5b3a0e511bd05"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMzAxMTQxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1MDo0NFrOG-LXRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMTo1MDo0NFrOG-LXRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg1MTA3OA==", "bodyText": "I see.. because of jdk 1.7 support, we have to use this way and that is what Findbugs complain.", "url": "https://github.com/apache/hbase/pull/2194#discussion_r467851078", "createdAt": "2020-08-10T11:50:44Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/LogRoller.java", "diffHunk": "@@ -56,23 +56,32 @@\n   private static final Log LOG = LogFactory.getLog(LogRoller.class);\n   private final ReentrantLock rollLock = new ReentrantLock();\n   private final AtomicBoolean rollLog = new AtomicBoolean(false);\n-  private final ConcurrentHashMap<WAL, Boolean> walNeedsRoll =\n-      new ConcurrentHashMap<WAL, Boolean>();\n+  private final ConcurrentHashMap<WAL, RollController> wals =\n+      new ConcurrentHashMap<WAL, RollController>();\n   private final Server server;\n   protected final RegionServerServices services;\n-  private volatile long lastrolltime = System.currentTimeMillis();\n   // Period to roll log.\n-  private final long rollperiod;\n+  private final long rollPeriod;\n   private final int threadWakeFrequency;\n   // The interval to check low replication on hlog's pipeline\n-  private long checkLowReplicationInterval;\n+  private final long checkLowReplicationInterval;\n \n   public void addWAL(final WAL wal) {\n-    if (null == walNeedsRoll.putIfAbsent(wal, Boolean.FALSE)) {\n+    if (null == wals.putIfAbsent(wal, new RollController(wal))) {\n       wal.registerWALActionsListener(new WALActionsListener.Base() {\n         @Override\n         public void logRollRequested(WALActionsListener.RollRequestReason reason) {\n-          walNeedsRoll.put(wal, Boolean.TRUE);\n+          RollController controller = wals.get(wal);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc0dbff4ceded376d99b4d0f2d5b3a0e511bd05"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2742, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}