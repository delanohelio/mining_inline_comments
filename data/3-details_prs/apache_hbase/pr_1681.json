{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTEwOTM5", "number": 1681, "title": "HBASE-23938 : System table hbase:slowlog to store complete slow/large\u2026", "bodyText": "\u2026 RPC logs", "createdAt": "2020-05-07T20:46:29Z", "url": "https://github.com/apache/hbase/pull/1681", "merged": true, "mergeCommit": {"oid": "86a2692dc4480308b9d1e4b84f0ff56a1af0fd04"}, "closed": true, "closedAt": "2020-05-20T09:40:30Z", "author": {"login": "virajjasani"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfDhpWAH2gAyNDE0OTEwOTM5OjJhODU1NmI1NzUzYjRmOGEyOWRkYzk3YmM1MTM0MWRkNTk4NzNjMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABci5XOkAH2gAyNDE0OTEwOTM5OjkzYzAxNmFlODMwM2I4NjMzN2U3MmNiMDZlMWRkYzVmYWVmYjZiMWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2a8556b5753b4f8a29ddc97bc51341dd59873c29", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/2a8556b5753b4f8a29ddc97bc51341dd59873c29", "committedDate": "2020-05-07T20:44:12Z", "message": "HBASE-23938 : System table hbase:slowlog to store complete slow/large RPC logs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3a93711364ec8489419f462fb7f3b803fc01a03", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/f3a93711364ec8489419f462fb7f3b803fc01a03", "committedDate": "2020-05-08T09:14:26Z", "message": "minor fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/abadaf4317faa052e299121614a9b38b3e0b1bd8", "committedDate": "2020-05-08T12:26:08Z", "message": "skip WAL"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODE2MTYw", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-408816160", "createdAt": "2020-05-11T01:48:29Z", "commit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0ODozMFrOGTJ9wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0ODozMFrOGTJ9wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw==", "bodyText": "Will this genereate hot spot on the region?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r422739393", "createdAt": "2020-05-11T01:48:30Z", "author": {"login": "Apache9"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/9fc877544c15c8fce3c9709301d64146b505543d", "committedDate": "2020-05-12T20:42:30Z", "message": "chore to insert records in system table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNjcwMjU4", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-412670258", "createdAt": "2020-05-15T13:54:34Z", "commit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyODA4ODY4", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-412808868", "createdAt": "2020-05-15T16:47:33Z", "commit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjo0NzozNFrOGWMamw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNzozMzoxMlrOGWN1TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNTI3NQ==", "bodyText": "Why we need inMemory true ?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425925275", "createdAt": "2020-05-15T16:47:34Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setInMemory(true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNTU2Nw==", "bodyText": "We should make the blockCaching = false for this table?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425925567", "createdAt": "2020-05-15T16:48:07Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setInMemory(true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNTI3NQ=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkyNjQ1OQ==", "bodyText": "The log is a bit confusing. The will look like a table is enabled/disabled.  We can say slow request logging to system table is not enable? (Or a better message)", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425926459", "createdAt": "2020-05-15T16:49:57Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setInMemory(true)\n+          .setMaxVersions(1).build());\n+\n+  public SlowLogMasterService(final Configuration configuration,\n+      final MasterServices masterServices) {\n+    slowlogTableEnabled = configuration.getBoolean(HConstants.SLOW_LOG_SYS_TABLE_ENABLED_KEY,\n+      HConstants.DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY);\n+    this.masterServices = masterServices;\n+  }\n+\n+  public void init() throws IOException {\n+    if (!slowlogTableEnabled) {\n+      LOG.info(\"SlowLogTable is not enabled. Quitting.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkzOTE3MQ==", "bodyText": "If the config is turned off, this will log this warn line in every 10 mins right? Dont think we need to log here at all.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425939171", "createdAt": "2020-05-15T17:14:35Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +278,32 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      LOG.warn(\"hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MDI0NQ==", "bodyText": "Instead can do ArrayList#clear?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425940245", "createdAt": "2020-05-15T17:16:36Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +278,32 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      LOG.warn(\"hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\");\n+      return;\n+    }\n+    if (this.connection == null) {\n+      LOG.warn(\"LogEventHandler has null connection. Exiting.\");\n+      return;\n+    }\n+    List<SlowLogPayload> slowLogPayloads = new ArrayList<>();\n+    int i = 0;\n+    while (!queueForSysTable.isEmpty()) {\n+      slowLogPayloads.add(queueForSysTable.poll());\n+      i++;\n+      if (i == 100) {\n+        SlowLogTableAccessor.addSlowLogRecords(slowLogPayloads, this.connection);\n+        slowLogPayloads = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MTQ4Ng==", "bodyText": "If 100 rows, approx what will be the write req total size?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425941486", "createdAt": "2020-05-15T17:19:13Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +278,32 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      LOG.warn(\"hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\");\n+      return;\n+    }\n+    if (this.connection == null) {\n+      LOG.warn(\"LogEventHandler has null connection. Exiting.\");\n+      return;\n+    }\n+    List<SlowLogPayload> slowLogPayloads = new ArrayList<>();\n+    int i = 0;\n+    while (!queueForSysTable.isEmpty()) {\n+      slowLogPayloads.add(queueForSysTable.poll());\n+      i++;\n+      if (i == 100) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0MjM1Nw==", "bodyText": "Puts list size can be given as slowLogPayloads.size()", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425942357", "createdAt": "2020-05-15T17:20:57Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Connection connection) {\n+    List<Put> puts = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NTIyNQ==", "bodyText": "Is there any chance of non IOE possible? Should we catch Exception. Else it might cause the chore to get terminated if any non IOE comes ever?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425945225", "createdAt": "2020-05-15T17:26:41Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Connection connection) {\n+    List<Put> puts = new ArrayList<>();\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(slowLogPayload.getQueueTime()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(slowLogPayload.getResponseSize()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(slowLogPayload.getStartTime()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      doPut(connection, puts);\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzExMA==", "bodyText": "We are exposing this Table name for users right? I think we need.  Then we should expose the cf and column names also?  Sure this is not the class for those expose.\nNow we allow all kind of client ops (writes, disable, alter) on this table? I believe in Master branch we allow tables in system NS to be disabled, altered etc.  There was a Jira around META table.  Will that be ok (Disable this table and keep it that state)", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425947110", "createdAt": "2020-05-15T17:30:26Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/TableName.java", "diffHunk": "@@ -83,6 +83,12 @@\n   public static final TableName META_TABLE_NAME =\n       valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"meta\");\n \n+  /** hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw==", "bodyText": "For some reason this put is not happening for one occasion, we will just throw away those logs. Anyways we are ok to loose some data as we already disabled the WAL.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425947737", "createdAt": "2020-05-15T17:31:44Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0ODQ5Mw==", "bodyText": "By default HBase will have a 60 sec RPC timeout and 35 retries. Means overall it will be > 10 min which is the default Chore interval.  We can adjust these configs?  35 retries anyways we can reduce.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r425948493", "createdAt": "2020-05-15T17:33:12Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/f83726d372426878f2d85dec7a2b7baeb474027c", "committedDate": "2020-05-16T15:19:47Z", "message": "review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDk1MjQw", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-413095240", "createdAt": "2020-05-16T17:46:50Z", "commit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxNzo0Njo1MVrOGWbp-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQxODoxMDo0NlrOGWbymQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NDk2OA==", "bodyText": "Good. Generally if we have a log system which will store the logs then this may be redundant in such systems.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426174968", "createdAt": "2020-05-16T17:46:51Z", "author": {"login": "ramkrish86"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1532,6 +1532,16 @@\n     \"hbase.regionserver.slowlog.buffer.enabled\";\n   public static final boolean DEFAULT_ONLINE_LOG_PROVIDER_ENABLED = false;\n \n+  /** The slowlog info family as a string*/\n+  private static final String SLOWLOG_INFO_FAMILY_STR = \"info\";\n+\n+  /** The slowlog info family */\n+  public static final byte [] SLOWLOG_INFO_FAMILY = Bytes.toBytes(SLOWLOG_INFO_FAMILY_STR);\n+\n+  public static final String SLOW_LOG_SYS_TABLE_ENABLED_KEY =\n+    \"hbase.regionserver.slowlog.systable.enabled\";\n+  public static final boolean DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTQzNg==", "bodyText": "Even if not enabled we will create that handler?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426175436", "createdAt": "2020-05-16T17:51:23Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogRecorder.java", "diffHunk": "@@ -86,7 +87,9 @@ public SlowLogRecorder(Configuration conf) {\n     this.disruptor.setDefaultExceptionHandler(new DisruptorExceptionHandler());\n \n     // initialize ringbuffer event handler\n-    this.logEventHandler = new LogEventHandler(this.eventCount);\n+    final boolean isSlowLogTableEnabled = conf.getBoolean(HConstants.SLOW_LOG_SYS_TABLE_ENABLED_KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTY3MQ==", "bodyText": "In a 10 min window we will do the puts . Can it really hotspot the region? Also at the Rpc handler layer should we give the lowest priority? System tables like META had high priority i belive - need to check the code. Should we lower for this table?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426175671", "createdAt": "2020-05-16T17:54:13Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        synchronized (SlowLogTableAccessor.class) {\n+          if (connection == null) {\n+            Configuration conf = new Configuration(configuration);\n+            // rpc timeout: 20s\n+            conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+            // retry count: 5\n+            conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+            conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+            connection = ConnectionFactory.createConnection(conf);\n+          }\n+        }\n+      }\n+      doPut(connection, puts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTc3OA==", "bodyText": "Better to disable all types of cache for this. Good.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426175778", "createdAt": "2020-05-16T17:55:15Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/slowlog/SlowLogMasterService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.master.slowlog;\n+\n+import java.io.IOException;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.MetaTableAccessor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.ColumnFamilyDescriptorBuilder;\n+import org.apache.hadoop.hbase.client.TableDescriptorBuilder;\n+import org.apache.hadoop.hbase.master.MasterServices;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Master services - Table creation to be used by HMaster\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogMasterService {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogMasterService.class);\n+\n+  private final boolean slowlogTableEnabled;\n+  private final MasterServices masterServices;\n+\n+  private static final TableDescriptorBuilder TABLE_DESCRIPTOR_BUILDER =\n+    TableDescriptorBuilder.newBuilder(TableName.SLOW_LOG_TABLE_NAME).setRegionReplication(1)\n+      .setColumnFamily(\n+        ColumnFamilyDescriptorBuilder.newBuilder(HConstants.SLOWLOG_INFO_FAMILY)\n+          .setScope(HConstants.REPLICATION_SCOPE_LOCAL)\n+          .setBlockCacheEnabled(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NjE1NA==", "bodyText": "Good.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426176154", "createdAt": "2020-05-16T17:59:34Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NjUyOQ==", "bodyText": "In a 10 min window we run the chore - but if there are slow sync happening during that 10 min window - we accumulate it in memory ?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426176529", "createdAt": "2020-05-16T18:03:03Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzAxNg==", "bodyText": "Ok I saw this public static final int DEFAULT_SLOW_LOG_RING_BUFFER_SIZE = 256;\nSo at max it is only 256 elements that we store in that queue. Rest will be removed anyway. At max we have 256 put list at any point of time. Right?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426177016", "createdAt": "2020-05-16T18:08:49Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NzE3Nw==", "bodyText": "Just one Q - this system table if not coming online due to some assignment issues -  we don't bother right? Say if the table is not online and while doing the puts we don't get the table - we should not do a WARN for certain time and then stop the connection fetching operatoin itself. Something like file based bucket cache - if there is afailure in writing to cache we keep retrying and if the error count exceeds a threshold we will WARN and no longer cache the data.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426177177", "createdAt": "2020-05-16T18:10:46Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final Put put)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(put);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @param connection Connection to put data\n+   */\n+  public static void addSlowLogRecord(final TooSlowLog.SlowLogPayload slowLogPayload,\n+      final Connection connection) {\n+    final byte[] rowKey = getRowKey(slowLogPayload);\n+    final Put put = new Put(rowKey)\n+      .setDurability(Durability.SKIP_WAL)\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+        Bytes.toBytes(slowLogPayload.getCallDetails()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+        Bytes.toBytes(slowLogPayload.getClientAddress()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+        Bytes.toBytes(slowLogPayload.getMethodName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+        Bytes.toBytes(slowLogPayload.getParam()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+        Bytes.toBytes(slowLogPayload.getProcessingTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+        Bytes.toBytes(slowLogPayload.getQueueTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+        Bytes.toBytes(slowLogPayload.getRegionName()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+        Bytes.toBytes(slowLogPayload.getResponseSize()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+        Bytes.toBytes(slowLogPayload.getServerClass()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+        Bytes.toBytes(slowLogPayload.getStartTime()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+        Bytes.toBytes(slowLogPayload.getType().name()))\n+      .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+        Bytes.toBytes(slowLogPayload.getUserName()));\n+    try {\n+      doPut(connection, put);\n+    } catch (IOException e) {\n+      LOG.error(\"Failed to add slow/large log record to hbase:slowlog table for region: {}\",\n+        slowLogPayload.getRegionName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTM5Mw=="}, "originalCommit": {"oid": "abadaf4317faa052e299121614a9b38b3e0b1bd8"}, "originalPosition": 107}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/4e979c617200ef436a36eec07d990a6dce0c2c49", "committedDate": "2020-05-16T18:47:52Z", "message": "spotbugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMTM0NDc2", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-413134476", "createdAt": "2020-05-17T07:23:32Z", "commit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QwNzoyMzozMlrOGWe3pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xN1QxMTowNzoxNFrOGWgHHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzYyMQ==", "bodyText": "Are we not logging the region's encoded name?  This is the region name which comes as part of the req param:", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426227621", "createdAt": "2020-05-17T07:23:32Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/HConstants.java", "diffHunk": "@@ -1532,6 +1532,16 @@\n     \"hbase.regionserver.slowlog.buffer.enabled\";\n   public static final boolean DEFAULT_ONLINE_LOG_PROVIDER_ENABLED = false;\n \n+  /** The slowlog info family as a string*/\n+  private static final String SLOWLOG_INFO_FAMILY_STR = \"info\";\n+\n+  /** The slowlog info family */\n+  public static final byte [] SLOWLOG_INFO_FAMILY = Bytes.toBytes(SLOWLOG_INFO_FAMILY_STR);\n+\n+  public static final String SLOW_LOG_SYS_TABLE_ENABLED_KEY =\n+    \"hbase.regionserver.slowlog.systable.enabled\";\n+  public static final boolean DEFAULT_SLOW_LOG_SYS_TABLE_ENABLED_KEY = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NDk2OA=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyNzgyOA==", "bodyText": "Are we exposing this table name to customer? This is a public class.  If we expose the name for user to create queries, we might have to expose the column names also?  But those can not be done in this class. Any thinking of having a new Public class if needed to expose? If you dont want to expose this table name, we should not keep this in TableName public class", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426227828", "createdAt": "2020-05-17T07:25:56Z", "author": {"login": "anoopsjohn"}, "path": "hbase-common/src/main/java/org/apache/hadoop/hbase/TableName.java", "diffHunk": "@@ -83,6 +83,12 @@\n   public static final TableName META_TABLE_NAME =\n       valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"meta\");\n \n+  /** hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzExMA=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTg5Mg==", "bodyText": "When system table logging is enabled, we have 2 queue.  This new one will always have 1000 max size where as the 'queueForRingBuffer' will have a default of 256 only.  Anyways we will occupy more heap memory upto 1000 messages. Why we should reduce the max numbers in queueForRingBuffer?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426229892", "createdAt": "2020-05-17T07:50:30Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;\n \n-  private final Queue<SlowLogPayload> queue;\n+  private final Queue<SlowLogPayload> queueForRingBuffer;\n+  private final Queue<SlowLogPayload> queueForSysTable;\n+  private final boolean isSlowLogTableEnabled;\n \n-  LogEventHandler(int eventCount) {\n+  private Configuration configuration;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n+\n+  LogEventHandler(int eventCount, boolean isSlowLogTableEnabled, Configuration conf) {\n+    this.configuration = conf;\n     EvictingQueue<SlowLogPayload> evictingQueue = EvictingQueue.create(eventCount);\n-    queue = Queues.synchronizedQueue(evictingQueue);\n+    queueForRingBuffer = Queues.synchronizedQueue(evictingQueue);\n+    this.isSlowLogTableEnabled = isSlowLogTableEnabled;\n+    if (isSlowLogTableEnabled) {\n+      EvictingQueue<SlowLogPayload> evictingQueueForTable = EvictingQueue.create(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTkyOQ==", "bodyText": "You want a config for this like 'hbase.regionserver.slowlog.ringbuffer.size'?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426229929", "createdAt": "2020-05-17T07:50:52Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTk3NQ==", "bodyText": "Can we have a way to avoid this 2 queues but keep it single?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426229975", "createdAt": "2020-05-17T07:51:41Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -53,12 +55,28 @@\n class LogEventHandler implements EventHandler<RingBufferEnvelope> {\n \n   private static final Logger LOG = LoggerFactory.getLogger(LogEventHandler.class);\n+  private static final int SYS_TABLE_QUEUE_SIZE = 1000;\n \n-  private final Queue<SlowLogPayload> queue;\n+  private final Queue<SlowLogPayload> queueForRingBuffer;\n+  private final Queue<SlowLogPayload> queueForSysTable;\n+  private final boolean isSlowLogTableEnabled;\n \n-  LogEventHandler(int eventCount) {\n+  private Configuration configuration;\n+\n+  private static final ReentrantLock LOCK = new ReentrantLock();\n+\n+  LogEventHandler(int eventCount, boolean isSlowLogTableEnabled, Configuration conf) {\n+    this.configuration = conf;\n     EvictingQueue<SlowLogPayload> evictingQueue = EvictingQueue.create(eventCount);\n-    queue = Queues.synchronizedQueue(evictingQueue);\n+    queueForRingBuffer = Queues.synchronizedQueue(evictingQueue);\n+    this.isSlowLogTableEnabled = isSlowLogTableEnabled;\n+    if (isSlowLogTableEnabled) {\n+      EvictingQueue<SlowLogPayload> evictingQueueForTable = EvictingQueue.create(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIyOTg5Mg=="}, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMDAyNQ==", "bodyText": "Even while adding here also u can have below check right?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426230025", "createdAt": "2020-05-17T07:52:33Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -129,7 +147,12 @@ public void onEvent(RingBufferEnvelope event, long sequence, boolean endOfBatch)\n       .setType(type)\n       .setUserName(userName)\n       .build();\n-    queue.add(slowLogPayload);\n+    queueForRingBuffer.add(slowLogPayload);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMDU2MQ==", "bodyText": "This will be done when Admin issues clearSlowLogsResponses req.  Still it wont reduce the RS heap usage as we have 2 queues. Is that what we intent?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426230561", "createdAt": "2020-05-17T07:58:31Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -160,7 +183,7 @@ boolean clearSlowLogs() {\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Received request to clean up online slowlog buffer..\");\n     }\n-    queue.clear();\n+    queueForRingBuffer.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e979c617200ef436a36eec07d990a6dce0c2c49"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMTUxOA==", "bodyText": "So I can see that u have reduced the RPC time out and retries. Fine.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426231518", "createdAt": "2020-05-17T08:10:04Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMTgxNQ==", "bodyText": "Ya seems for Server -> Server RPCs  we will have default of 15 * 3 = 45 retries.\nI can see the client side retries is 15 now not 35. I believe this is changed in master branch. Not sure which jira", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426231815", "createdAt": "2020-05-17T08:13:42Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk0NzczNw=="}, "originalCommit": {"oid": "9fc877544c15c8fce3c9709301d64146b505543d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjI0Nzk2NQ==", "bodyText": "The above is a valid Q and nice observation.  The priority of the req been calculated based on the System ns. As this table is in 'hbase' NS it will get highest priority.  Its not about WAL write or cache usage.  The RPC will be handled by the priority handler threads and Q.    I believe we can set it at the individual req level.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r426247965", "createdAt": "2020-05-17T11:07:14Z", "author": {"login": "anoopsjohn"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.regionserver.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(TableName.SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        synchronized (SlowLogTableAccessor.class) {\n+          if (connection == null) {\n+            Configuration conf = new Configuration(configuration);\n+            // rpc timeout: 20s\n+            conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+            // retry count: 5\n+            conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+            conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+            connection = ConnectionFactory.createConnection(conf);\n+          }\n+        }\n+      }\n+      doPut(connection, puts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE3NTY3MQ=="}, "originalCommit": {"oid": "f83726d372426878f2d85dec7a2b7baeb474027c"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17523573623a034c9398999ee30512eab8a8d204", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/17523573623a034c9398999ee30512eab8a8d204", "committedDate": "2020-05-17T14:31:12Z", "message": "latest review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "006546701174c121390874c07b037f43562f4185", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/006546701174c121390874c07b037f43562f4185", "committedDate": "2020-05-19T09:59:55Z", "message": "config for queue that handles systable writes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjY1ODQ1", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-414665845", "createdAt": "2020-05-19T17:24:41Z", "commit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNDo0MlrOGXq18Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNDo0MlrOGXq18Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MjM2OQ==", "bodyText": "Good. This is where we set the priority.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427472369", "createdAt": "2020-05-19T17:24:42Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -532,7 +533,7 @@ static int calcPriority(int priority, TableName tableName) {\n   }\n \n   static int getPriority(TableName tableName) {\n-    if (tableName.isSystemTable()) {\n+    if (tableName.isSystemTable() && !tableName.equals(SlowLogTableAccessor.SLOW_LOG_TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjY2ODk2", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-414666896", "createdAt": "2020-05-19T17:26:01Z", "commit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNjowMlrOGXq5dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNjowMlrOGXq5dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MzI3MA==", "bodyText": "May be move this to a util method some where. Like isMeta that we have. We can say as isLogTable()?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427473270", "createdAt": "2020-05-19T17:26:02Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/HBaseRpcControllerImpl.java", "diffHunk": "@@ -101,8 +102,12 @@ public void setPriority(int priority) {\n \n   @Override\n   public void setPriority(final TableName tn) {\n-    setPriority(\n-      tn != null && tn.isSystemTable() ? HConstants.SYSTEMTABLE_QOS : HConstants.NORMAL_QOS);\n+    int priority = HConstants.NORMAL_QOS;\n+    if (tn != null && tn.isSystemTable()\n+        && !tn.equals(SlowLogTableAccessor.SLOW_LOG_TABLE_NAME)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjY4MzI5", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-414668329", "createdAt": "2020-05-19T17:27:48Z", "commit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzo0OFrOGXq-Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzo0OFrOGXq-Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDQ2Ng==", "bodyText": "It is synchronized. Good. Anyway mostly it will be only one thread executing it I believe.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427474466", "createdAt": "2020-05-19T17:27:48Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjY4NDE0", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-414668414", "createdAt": "2020-05-19T17:27:56Z", "commit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzo1NlrOGXq-cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNzo1NlrOGXq-cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDU0NA==", "bodyText": "Nice.", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427474544", "createdAt": "2020-05-19T17:27:56Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)\n+      throws IOException {\n+    Configuration conf = new Configuration(configuration);\n+    // rpc timeout: 20s\n+    conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+    // retry count: 5\n+    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+    conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjY4ODQ2", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-414668846", "createdAt": "2020-05-19T17:28:27Z", "commit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyODoyN1rOGXq_wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyODoyN1rOGXq_wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NDg4Mg==", "bodyText": "Are we going to expose this to the user incase he needs to query based on row key? How are we planning to expose it? Some doc ?", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427474882", "createdAt": "2020-05-19T17:28:27Z", "author": {"login": "ramkrish86"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/slowlog/SlowLogTableAccessor.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.hadoop.hbase.slowlog;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.hbase.HConstants;\n+import org.apache.hadoop.hbase.NamespaceDescriptor;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.client.Connection;\n+import org.apache.hadoop.hbase.client.ConnectionFactory;\n+import org.apache.hadoop.hbase.client.Durability;\n+import org.apache.hadoop.hbase.client.Put;\n+import org.apache.hadoop.hbase.client.Table;\n+import org.apache.hadoop.hbase.shaded.protobuf.generated.TooSlowLog;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.apache.hadoop.hbase.util.EnvironmentEdgeManager;\n+import org.apache.yetus.audience.InterfaceAudience;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Slowlog Accessor to record slow/large RPC log identified at each RegionServer RpcServer level.\n+ * This can be done only optionally to record the entire history of slow/large rpc calls\n+ * since RingBuffer can handle only limited latest records.\n+ */\n+@InterfaceAudience.Private\n+public class SlowLogTableAccessor {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(SlowLogTableAccessor.class);\n+\n+  private static final Random RANDOM = new Random();\n+\n+  private static Connection connection;\n+\n+  /**\n+   * hbase:slowlog table name - can be enabled\n+   * with config - hbase.regionserver.slowlog.systable.enabled\n+   */\n+  public static final TableName SLOW_LOG_TABLE_NAME =\n+    TableName.valueOf(NamespaceDescriptor.SYSTEM_NAMESPACE_NAME_STR, \"slowlog\");\n+\n+  private static void doPut(final Connection connection, final List<Put> puts)\n+      throws IOException {\n+    try (Table table = connection.getTable(SLOW_LOG_TABLE_NAME)) {\n+      table.put(puts);\n+    }\n+  }\n+\n+  /**\n+   * Add slow/large log records to hbase:slowlog table\n+   * @param slowLogPayloads List of SlowLogPayload to process\n+   * @param configuration Configuration to use for connection\n+   */\n+  public static void addSlowLogRecords(final List<TooSlowLog.SlowLogPayload> slowLogPayloads,\n+      final Configuration configuration) {\n+    List<Put> puts = new ArrayList<>(slowLogPayloads.size());\n+    for (TooSlowLog.SlowLogPayload slowLogPayload : slowLogPayloads) {\n+      final byte[] rowKey = getRowKey(slowLogPayload);\n+      final Put put = new Put(rowKey).setDurability(Durability.SKIP_WAL)\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"call_details\"),\n+          Bytes.toBytes(slowLogPayload.getCallDetails()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"client_address\"),\n+          Bytes.toBytes(slowLogPayload.getClientAddress()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"method_name\"),\n+          Bytes.toBytes(slowLogPayload.getMethodName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"param\"),\n+          Bytes.toBytes(slowLogPayload.getParam()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"processing_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getProcessingTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"queue_time\"),\n+          Bytes.toBytes(Integer.toString(slowLogPayload.getQueueTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"region_name\"),\n+          Bytes.toBytes(slowLogPayload.getRegionName()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"response_size\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getResponseSize())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"server_class\"),\n+          Bytes.toBytes(slowLogPayload.getServerClass()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"start_time\"),\n+          Bytes.toBytes(Long.toString(slowLogPayload.getStartTime())))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"type\"),\n+          Bytes.toBytes(slowLogPayload.getType().name()))\n+        .addColumn(HConstants.SLOWLOG_INFO_FAMILY, Bytes.toBytes(\"username\"),\n+          Bytes.toBytes(slowLogPayload.getUserName()));\n+      puts.add(put);\n+    }\n+    try {\n+      if (connection == null) {\n+        createConnection(configuration);\n+      }\n+      doPut(connection, puts);\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to add slow/large log records to hbase:slowlog table.\", e);\n+    }\n+  }\n+\n+  private static synchronized void createConnection(Configuration configuration)\n+      throws IOException {\n+    Configuration conf = new Configuration(configuration);\n+    // rpc timeout: 20s\n+    conf.setInt(HConstants.HBASE_RPC_TIMEOUT_KEY, 20000);\n+    // retry count: 5\n+    conf.setInt(HConstants.HBASE_CLIENT_RETRIES_NUMBER, 5);\n+    conf.setInt(HConstants.HBASE_CLIENT_SERVERSIDE_RETRIES_MULTIPLIER, 1);\n+    connection = ConnectionFactory.createConnection(conf);\n+  }\n+\n+  /**\n+   * Create rowKey: currentTimeMillis APPEND slowLogPayload.hashcode\n+   * Scan on slowlog table should keep records with sorted order of time, however records\n+   * added at the very same time (currentTimeMillis) could be in random order.\n+   *\n+   * @param slowLogPayload SlowLogPayload to process\n+   * @return rowKey byte[]\n+   */\n+  private static byte[] getRowKey(final TooSlowLog.SlowLogPayload slowLogPayload) {\n+    String hashcode = String.valueOf(slowLogPayload.hashCode());\n+    String lastFiveDig =\n+      hashcode.substring((hashcode.length() > 5) ? (hashcode.length() - 5) : 0);\n+    if (lastFiveDig.startsWith(\"-\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjY5OTY0", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-414669964", "createdAt": "2020-05-19T17:29:46Z", "commit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyOTo0NlrOGXrDKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyOTo0NlrOGXrDKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3NTc1NA==", "bodyText": "Better to move this to constant. nit", "url": "https://github.com/apache/hbase/pull/1681#discussion_r427475754", "createdAt": "2020-05-19T17:29:46Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/slowlog/LogEventHandler.java", "diffHunk": "@@ -256,4 +283,36 @@ private boolean isFilterProvided(AdminProtos.SlowLogResponseRequest request) {\n     return filteredSlowLogPayloads;\n   }\n \n+  /**\n+   * Poll from queueForSysTable and insert 100 records in hbase:slowlog table in single batch\n+   */\n+  void addAllLogsToSysTable() {\n+    if (queueForSysTable == null) {\n+      // hbase.regionserver.slowlog.systable.enabled is turned off. Exiting.\n+      return;\n+    }\n+    if (LOCK.isLocked()) {\n+      return;\n+    }\n+    LOCK.lock();\n+    try {\n+      List<SlowLogPayload> slowLogPayloads = new ArrayList<>();\n+      int i = 0;\n+      while (!queueForSysTable.isEmpty()) {\n+        slowLogPayloads.add(queueForSysTable.poll());\n+        i++;\n+        if (i == 100) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjcwODk0", "url": "https://github.com/apache/hbase/pull/1681#pullrequestreview-414670894", "createdAt": "2020-05-19T17:30:53Z", "commit": {"oid": "006546701174c121390874c07b037f43562f4185"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93c016ae8303b86337e72cb06e1ddc5faefb6b1a", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/93c016ae8303b86337e72cb06e1ddc5faefb6b1a", "committedDate": "2020-05-19T19:09:28Z", "message": "review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2101, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}