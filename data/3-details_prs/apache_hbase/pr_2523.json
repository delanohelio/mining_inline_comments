{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODIyNTE0", "number": 2523, "title": "HBASE-25167 Normalizer support for hot config reloading", "bodyText": "Wire up the ConfigurationObserver chain for RegionNormalizerManager. The following configuration keys support hot-reloading:\n\nhbase.normalizer.throughput.max_bytes_per_sec\nhbase.normalizer.split.enabled\nhbase.normalizer.merge.enabled\nhbase.normalizer.min.region.count\nhbase.normalizer.merge.min_region_age.days\nhbase.normalizer.merge.min_region_size.mb\n\nNote that support for hbase.normalizer.period is not provided here. Support would need to be implemented generally for the Chore subsystem.", "createdAt": "2020-10-09T21:10:59Z", "url": "https://github.com/apache/hbase/pull/2523", "merged": true, "mergeCommit": {"oid": "d790bdeddef755751c43f328daaf5aa027bf8cad"}, "closed": true, "closedAt": "2020-10-30T17:41:57Z", "author": {"login": "ndimiduk"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdR3mG4gFqTUwNjgwNDUxNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXYr7oABqjM5Mzg0Mjg5MDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODA0NTE2", "url": "https://github.com/apache/hbase/pull/2523#pullrequestreview-506804516", "createdAt": "2020-10-12T17:38:20Z", "commit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozODoyMFrOHgHmCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzozODoyMFrOHgHmCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MDkwNg==", "bodyText": "This is cool. I believe this will help us avoid partial config update!", "url": "https://github.com/apache/hbase/pull/2523#discussion_r503440906", "createdAt": "2020-10-12T17:38:20Z", "author": {"login": "mnpoonia"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -71,38 +76,81 @@\n   static final String MERGE_MIN_REGION_SIZE_MB_KEY = \"hbase.normalizer.merge.min_region_size.mb\";\n   static final int DEFAULT_MERGE_MIN_REGION_SIZE_MB = 1;\n \n-  private Configuration conf;\n   private MasterServices masterServices;\n-  private boolean splitEnabled;\n-  private boolean mergeEnabled;\n-  private int minRegionCount;\n-  private Period mergeMinRegionAge;\n-  private int mergeMinRegionSizeMb;\n+\n+  /** Ensure configuration changes are applied atomically. */\n+  private final ReadWriteLock configUpdateLock = new ReentrantReadWriteLock();\n+  @GuardedBy(\"configUpdateLock\") private Configuration conf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTUxMTk2", "url": "https://github.com/apache/hbase/pull/2523#pullrequestreview-512551196", "createdAt": "2020-10-20T10:16:27Z", "commit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDoxNjoyN1rOHk1GjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMDo1NDoyMVrOHk2gBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODM4MDgxMg==", "bodyText": "Last 3 getters should have @VisibleForTesting ?", "url": "https://github.com/apache/hbase/pull/2523#discussion_r508380812", "createdAt": "2020-10-20T10:16:27Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -140,39 +188,76 @@ private static int parseMergeMinRegionSizeMb(final Configuration conf) {\n       key, parsedValue, settledValue);\n   }\n \n+  private static <T> void logConfigurationUpdated(final String key, final T oldValue,\n+    final T newValue) {\n+    if (!Objects.equals(oldValue, newValue)) {\n+      LOG.info(\"Updated configuration for key '{}' from {} to {}\", key, oldValue, newValue);\n+    }\n+  }\n+\n   /**\n    * Return this instance's configured value for {@value #SPLIT_ENABLED_KEY}.\n    */\n   public boolean isSplitEnabled() {\n-    return splitEnabled;\n+    final Lock readLock = configUpdateLock.readLock();\n+    readLock.lock();\n+    try {\n+      return splitEnabled;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n \n   /**\n    * Return this instance's configured value for {@value #MERGE_ENABLED_KEY}.\n    */\n   public boolean isMergeEnabled() {\n-    return mergeEnabled;\n+    final Lock readLock = configUpdateLock.readLock();\n+    readLock.lock();\n+    try {\n+      return mergeEnabled;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n \n   /**\n    * Return this instance's configured value for {@value #MIN_REGION_COUNT_KEY}.\n    */\n   public int getMinRegionCount() {\n-    return minRegionCount;\n+    final Lock readLock = configUpdateLock.readLock();\n+    readLock.lock();\n+    try {\n+      return minRegionCount;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n \n   /**\n    * Return this instance's configured value for {@value #MERGE_MIN_REGION_AGE_DAYS_KEY}.\n    */\n   public Period getMergeMinRegionAge() {\n-    return mergeMinRegionAge;\n+    final Lock readLock = configUpdateLock.readLock();\n+    readLock.lock();\n+    try {\n+      return mergeMinRegionAge;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n \n   /**\n    * Return this instance's configured value for {@value #MERGE_MIN_REGION_SIZE_MB_KEY}.\n    */\n   public int getMergeMinRegionSizeMb() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQwMzcxNw==", "bodyText": "Indeed ! Wondering if we can ensure all implementors of ConfigurationObserver can start using such lock for atomic updates of non-final fields (of course not as part of this Jira :) )", "url": "https://github.com/apache/hbase/pull/2523#discussion_r508403717", "createdAt": "2020-10-20T10:54:21Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -71,38 +76,81 @@\n   static final String MERGE_MIN_REGION_SIZE_MB_KEY = \"hbase.normalizer.merge.min_region_size.mb\";\n   static final int DEFAULT_MERGE_MIN_REGION_SIZE_MB = 1;\n \n-  private Configuration conf;\n   private MasterServices masterServices;\n-  private boolean splitEnabled;\n-  private boolean mergeEnabled;\n-  private int minRegionCount;\n-  private Period mergeMinRegionAge;\n-  private int mergeMinRegionSizeMb;\n+\n+  /** Ensure configuration changes are applied atomically. */\n+  private final ReadWriteLock configUpdateLock = new ReentrantReadWriteLock();\n+  @GuardedBy(\"configUpdateLock\") private Configuration conf;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0MDkwNg=="}, "originalCommit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzIyNzI0", "url": "https://github.com/apache/hbase/pull/2523#pullrequestreview-513322724", "createdAt": "2020-10-21T05:44:42Z", "commit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo0NDo0MlrOHlbG0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNTo0NDo0MlrOHlbG0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTAwMzQ3NQ==", "bodyText": "Why is readLock.lock() called here? Thought writeLock is enough.", "url": "https://github.com/apache/hbase/pull/2523#discussion_r509003475", "createdAt": "2020-10-21T05:44:42Z", "author": {"login": "huaxiangsun"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -71,38 +76,81 @@\n   static final String MERGE_MIN_REGION_SIZE_MB_KEY = \"hbase.normalizer.merge.min_region_size.mb\";\n   static final int DEFAULT_MERGE_MIN_REGION_SIZE_MB = 1;\n \n-  private Configuration conf;\n   private MasterServices masterServices;\n-  private boolean splitEnabled;\n-  private boolean mergeEnabled;\n-  private int minRegionCount;\n-  private Period mergeMinRegionAge;\n-  private int mergeMinRegionSizeMb;\n+\n+  /** Ensure configuration changes are applied atomically. */\n+  private final ReadWriteLock configUpdateLock = new ReentrantReadWriteLock();\n+  @GuardedBy(\"configUpdateLock\") private Configuration conf;\n+  @GuardedBy(\"configUpdateLock\") private boolean splitEnabled;\n+  @GuardedBy(\"configUpdateLock\") private boolean mergeEnabled;\n+  @GuardedBy(\"configUpdateLock\") private int minRegionCount;\n+  @GuardedBy(\"configUpdateLock\") private Period mergeMinRegionAge;\n+  @GuardedBy(\"configUpdateLock\") private int mergeMinRegionSizeMb;\n \n   public SimpleRegionNormalizer() {\n-    splitEnabled = DEFAULT_SPLIT_ENABLED;\n-    mergeEnabled = DEFAULT_MERGE_ENABLED;\n-    minRegionCount = DEFAULT_MIN_REGION_COUNT;\n-    mergeMinRegionAge = Period.ofDays(DEFAULT_MERGE_MIN_REGION_AGE_DAYS);\n-    mergeMinRegionSizeMb = DEFAULT_MERGE_MIN_REGION_SIZE_MB;\n+    final Lock writeLock = configUpdateLock.writeLock();\n+    writeLock.lock();\n+    try {\n+      splitEnabled = DEFAULT_SPLIT_ENABLED;\n+      mergeEnabled = DEFAULT_MERGE_ENABLED;\n+      minRegionCount = DEFAULT_MIN_REGION_COUNT;\n+      mergeMinRegionAge = Period.ofDays(DEFAULT_MERGE_MIN_REGION_AGE_DAYS);\n+      mergeMinRegionSizeMb = DEFAULT_MERGE_MIN_REGION_SIZE_MB;\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n \n   @Override\n   public Configuration getConf() {\n-    return conf;\n+    final Lock readLock = configUpdateLock.readLock();\n+    readLock.lock();\n+    try {\n+      return conf;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n \n   @Override\n   public void setConf(final Configuration conf) {\n     if (conf == null) {\n       return;\n     }\n-    this.conf = conf;\n-    splitEnabled = conf.getBoolean(SPLIT_ENABLED_KEY, DEFAULT_SPLIT_ENABLED);\n-    mergeEnabled = conf.getBoolean(MERGE_ENABLED_KEY, DEFAULT_MERGE_ENABLED);\n-    minRegionCount = parseMinRegionCount(conf);\n-    mergeMinRegionAge = parseMergeMinRegionAge(conf);\n-    mergeMinRegionSizeMb = parseMergeMinRegionSizeMb(conf);\n+\n+    final Lock readLock = configUpdateLock.readLock();\n+    final Lock writeLock = configUpdateLock.writeLock();\n+    writeLock.lock(); // \"a writer can acquire the read lock, but not vice-versa.\"\n+    readLock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b"}, "originalPosition": 96}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "557c6c9719afcfe6cf45641b44ea11097387af0b", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/557c6c9719afcfe6cf45641b44ea11097387af0b", "committedDate": "2020-10-09T21:09:56Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}, "afterCommit": {"oid": "ef7269fc56b2fff1c902f1025f846eff6c6bce81", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/ef7269fc56b2fff1c902f1025f846eff6c6bce81", "committedDate": "2020-10-21T18:23:51Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef7269fc56b2fff1c902f1025f846eff6c6bce81", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/ef7269fc56b2fff1c902f1025f846eff6c6bce81", "committedDate": "2020-10-21T18:23:51Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}, "afterCommit": {"oid": "e1a733f2bc5fc1a4d71bdcbec9bcd31d13002c97", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/e1a733f2bc5fc1a4d71bdcbec9bcd31d13002c97", "committedDate": "2020-10-21T22:51:34Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1a733f2bc5fc1a4d71bdcbec9bcd31d13002c97", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/e1a733f2bc5fc1a4d71bdcbec9bcd31d13002c97", "committedDate": "2020-10-21T22:51:34Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}, "afterCommit": {"oid": "8a71147d4cfa2df52017e86a63a276426951d1ff", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/8a71147d4cfa2df52017e86a63a276426951d1ff", "committedDate": "2020-10-21T22:52:08Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MzM5MDI2", "url": "https://github.com/apache/hbase/pull/2523#pullrequestreview-514339026", "createdAt": "2020-10-22T03:44:27Z", "commit": {"oid": "8a71147d4cfa2df52017e86a63a276426951d1ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzo0NDoyN1rOHmPgQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMzo0NDoyN1rOHmPgQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTg2MTk1NA==", "bodyText": "Stumbled upon this change. I think there is a much simpler way to achieve this without locks and fewer lines of code (and cleaner). If we can factor all of the configs into a single object (with appropriate getters and setters if needed), something like,\nstatic class NormalizerConfig {\n  Configuration conf;\n  boolean splitEnabled;\n  private boolean mergeEnabled;\n  private Period mergeMinRegionAge;\n  private int mergeMinRegionSizeMb;\n  .......\n\n  static parseFromConfig(Conf conf);\n}\n\nprivate NormalizerConfig normalizerConf;\n\npublic void setConf(final Configuration conf) {\n   normalizerConf = parseFromConfig(conf);\n}\n\npublic boolean isSplitEnabled() {\n  return normalizerConf.isSplitEnabled();\n}\n\n\nReference assignment is atomic. So even if multiple threads call setConf(conf), each thread calls its own parseFromConfig() in it's own context, constructs the whole object and the reference assignment works cleanly. On the reader side depending on what reference is being used that point, the value is returned (ex: isSplitEnabled() above)..\nThe advantage of using these locks is the memory ordering that they enforce in methods like isSplitEnabled(). We essentially block until the reference is updated but I don't think that is a requirement here because we don't guarantee the callers of these methods (like computePlansForTable()) that they will work on the latest config while the config update is in progress (we can't guarantee that level of ordering anyway). Point here being the above approach gets rid of most code and is still not racy. WDYT.", "url": "https://github.com/apache/hbase/pull/2523#discussion_r509861954", "createdAt": "2020-10-22T03:44:27Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java", "diffHunk": "@@ -71,38 +76,78 @@\n   static final String MERGE_MIN_REGION_SIZE_MB_KEY = \"hbase.normalizer.merge.min_region_size.mb\";\n   static final int DEFAULT_MERGE_MIN_REGION_SIZE_MB = 1;\n \n-  private Configuration conf;\n   private MasterServices masterServices;\n-  private boolean splitEnabled;\n-  private boolean mergeEnabled;\n-  private int minRegionCount;\n-  private Period mergeMinRegionAge;\n-  private int mergeMinRegionSizeMb;\n+\n+  /** Ensure configuration changes are applied atomically. */\n+  private final ReadWriteLock configUpdateLock = new ReentrantReadWriteLock();\n+  @GuardedBy(\"configUpdateLock\") private Configuration conf;\n+  @GuardedBy(\"configUpdateLock\") private boolean splitEnabled;\n+  @GuardedBy(\"configUpdateLock\") private boolean mergeEnabled;\n+  @GuardedBy(\"configUpdateLock\") private int minRegionCount;\n+  @GuardedBy(\"configUpdateLock\") private Period mergeMinRegionAge;\n+  @GuardedBy(\"configUpdateLock\") private int mergeMinRegionSizeMb;\n \n   public SimpleRegionNormalizer() {\n-    splitEnabled = DEFAULT_SPLIT_ENABLED;\n-    mergeEnabled = DEFAULT_MERGE_ENABLED;\n-    minRegionCount = DEFAULT_MIN_REGION_COUNT;\n-    mergeMinRegionAge = Period.ofDays(DEFAULT_MERGE_MIN_REGION_AGE_DAYS);\n-    mergeMinRegionSizeMb = DEFAULT_MERGE_MIN_REGION_SIZE_MB;\n+    final Lock writeLock = configUpdateLock.writeLock();\n+    writeLock.lock();\n+    try {\n+      splitEnabled = DEFAULT_SPLIT_ENABLED;\n+      mergeEnabled = DEFAULT_MERGE_ENABLED;\n+      minRegionCount = DEFAULT_MIN_REGION_COUNT;\n+      mergeMinRegionAge = Period.ofDays(DEFAULT_MERGE_MIN_REGION_AGE_DAYS);\n+      mergeMinRegionSizeMb = DEFAULT_MERGE_MIN_REGION_SIZE_MB;\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n \n   @Override\n   public Configuration getConf() {\n-    return conf;\n+    final Lock readLock = configUpdateLock.readLock();\n+    readLock.lock();\n+    try {\n+      return conf;\n+    } finally {\n+      readLock.unlock();\n+    }\n   }\n \n   @Override\n   public void setConf(final Configuration conf) {\n     if (conf == null) {\n       return;\n     }\n-    this.conf = conf;\n-    splitEnabled = conf.getBoolean(SPLIT_ENABLED_KEY, DEFAULT_SPLIT_ENABLED);\n-    mergeEnabled = conf.getBoolean(MERGE_ENABLED_KEY, DEFAULT_MERGE_ENABLED);\n-    minRegionCount = parseMinRegionCount(conf);\n-    mergeMinRegionAge = parseMergeMinRegionAge(conf);\n-    mergeMinRegionSizeMb = parseMergeMinRegionSizeMb(conf);\n+\n+    final Lock writeLock = configUpdateLock.writeLock();\n+    writeLock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a71147d4cfa2df52017e86a63a276426951d1ff"}, "originalPosition": 94}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8a71147d4cfa2df52017e86a63a276426951d1ff", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/8a71147d4cfa2df52017e86a63a276426951d1ff", "committedDate": "2020-10-21T22:52:08Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}, "afterCommit": {"oid": "c8ecefb829b3383f9013e791518162af70ca5d75", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/c8ecefb829b3383f9013e791518162af70ca5d75", "committedDate": "2020-10-29T18:53:47Z", "message": "remove use of ReadWriteLock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwMDE1NjAx", "url": "https://github.com/apache/hbase/pull/2523#pullrequestreview-520015601", "createdAt": "2020-10-29T19:45:18Z", "commit": {"oid": "c8ecefb829b3383f9013e791518162af70ca5d75"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe89fb0ce69b2b5ae49053e4aaed9d73d22fe9d6", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/fe89fb0ce69b2b5ae49053e4aaed9d73d22fe9d6", "committedDate": "2020-10-29T20:52:09Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8ecefb829b3383f9013e791518162af70ca5d75", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/c8ecefb829b3383f9013e791518162af70ca5d75", "committedDate": "2020-10-29T18:53:47Z", "message": "remove use of ReadWriteLock"}, "afterCommit": {"oid": "fe89fb0ce69b2b5ae49053e4aaed9d73d22fe9d6", "author": {"user": {"login": "ndimiduk", "name": "Nick Dimiduk"}}, "url": "https://github.com/apache/hbase/commit/fe89fb0ce69b2b5ae49053e4aaed9d73d22fe9d6", "committedDate": "2020-10-29T20:52:09Z", "message": "HBASE-25167 Normalizer support for hot config reloading\n\nWire up the `ConfigurationObserver` chain for\n`RegionNormalizerManager`. The following configuration keys support\nhot-reloading:\n * hbase.normalizer.throughput.max_bytes_per_sec\n * hbase.normalizer.split.enabled\n * hbase.normalizer.merge.enabled\n * hbase.normalizer.min.region.count\n * hbase.normalizer.merge.min_region_age.days\n * hbase.normalizer.merge.min_region_size.mb\n\nNote that support for `hbase.normalizer.period` is not provided\nhere. Support would need to be implemented generally for the `Chore`\nsubsystem."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4341, "cost": 1, "resetAt": "2021-10-28T16:48:13Z"}}}