{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMzQxMjU5", "number": 1784, "title": "HBASE-24428 : Update compaction priority for recently split daughter \u2026", "bodyText": "\u2026regions", "createdAt": "2020-05-26T17:17:34Z", "url": "https://github.com/apache/hbase/pull/1784", "merged": true, "mergeCommit": {"oid": "48e9835adbf7777dc7eb1823b9a7ae3065b45ba5"}, "closed": true, "closedAt": "2020-05-27T15:26:42Z", "author": {"login": "virajjasani"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclH7JOgH2gAyNDIzMzQxMjU5OmM5OGFhODAyNmIyYTkxOWIxNzFmMTM1OGQxN2ZkMzA2MGE2MTk4Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcla2fmAH2gAyNDIzMzQxMjU5OmZkYThlMjRmMWQxZTFjYmRiMjcxNzc4ZmIzMzI1Y2UzOWM0NzMxN2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/c98aa8026b2a919b171f1358d17fd3060a619877", "committedDate": "2020-05-26T17:15:13Z", "message": "HBASE-24428 : Update compaction priority for recently split daughter regions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4Njg2MDMx", "url": "https://github.com/apache/hbase/pull/1784#pullrequestreview-418686031", "createdAt": "2020-05-26T21:17:36Z", "commit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToxNzozNlrOGawpLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMToyNToyMFrOGaw3hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzEzNA==", "bodyText": "Or should we define a new constant for high priority splits that is not quite MIN_VALUE, so someone can still schedule something ahead of us? idk, like MIN_VALUE+1000.", "url": "https://github.com/apache/hbase/pull/1784#discussion_r430713134", "createdAt": "2020-05-26T21:17:36Z", "author": {"login": "apurtell"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -1921,9 +1921,15 @@ public boolean shouldPerformMajorCompaction() throws IOException {\n         // If we're enqueuing a major, clear the force flag.\n         this.forceMajor = this.forceMajor && !request.isMajor();\n \n-        // Set common request properties.\n-        // Set priority, either override value supplied by caller or from store.\n-        request.setPriority((priority != Store.NO_PRIORITY) ? priority : getCompactPriority());\n+        if (request.isAfterSplit()) {\n+          // If the store belongs to recently splitted daughter regions, better we consider\n+          // them with the highest priority in the compaction queue.\n+          request.setPriority(Integer.MIN_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNTMyNw==", "bodyText": "Hmm. I suppose this is fine. We already have request#isMajor to inform us if we need to schedule a major compaction.\nrequest#isSplit is just as informative as request#isAfterSplit, but no strong opinion there.", "url": "https://github.com/apache/hbase/pull/1784#discussion_r430715327", "createdAt": "2020-05-26T21:22:11Z", "author": {"login": "apurtell"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -1921,9 +1921,15 @@ public boolean shouldPerformMajorCompaction() throws IOException {\n         // If we're enqueuing a major, clear the force flag.\n         this.forceMajor = this.forceMajor && !request.isMajor();\n \n-        // Set common request properties.\n-        // Set priority, either override value supplied by caller or from store.\n-        request.setPriority((priority != Store.NO_PRIORITY) ? priority : getCompactPriority());\n+        if (request.isAfterSplit()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNTkzOQ==", "bodyText": "We should log when we are overriding request priority with the reason why, at DEBUG level at least, but INFO makes sense too.", "url": "https://github.com/apache/hbase/pull/1784#discussion_r430715939", "createdAt": "2020-05-26T21:23:28Z", "author": {"login": "apurtell"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -1921,9 +1921,15 @@ public boolean shouldPerformMajorCompaction() throws IOException {\n         // If we're enqueuing a major, clear the force flag.\n         this.forceMajor = this.forceMajor && !request.isMajor();\n \n-        // Set common request properties.\n-        // Set priority, either override value supplied by caller or from store.\n-        request.setPriority((priority != Store.NO_PRIORITY) ? priority : getCompactPriority());\n+        if (request.isAfterSplit()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNTMyNw=="}, "originalCommit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNjgwNQ==", "bodyText": "This pattern is not one I've seen before but we do it above for isOffPeak so (shrug).", "url": "https://github.com/apache/hbase/pull/1784#discussion_r430716805", "createdAt": "2020-05-26T21:25:20Z", "author": {"login": "apurtell"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/CompactionRequestImpl.java", "diffHunk": "@@ -149,6 +158,7 @@ public int hashCode() {\n     result = prime * result + ((storeName == null) ? 0 : storeName.hashCode());\n     result = prime * result + (int) (totalSize ^ (totalSize >>> 32));\n     result = prime * result + ((tracker == null) ? 0 : tracker.hashCode());\n+    result = prime * result + (isAfterSplit ? 1231 : 1237);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTA5NTMz", "url": "https://github.com/apache/hbase/pull/1784#pullrequestreview-418909533", "createdAt": "2020-05-27T07:05:13Z", "commit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowNToxM1rOGa8BFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoxMToyNFrOGa8L1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg5OTQ3OA==", "bodyText": "Agree, we should override priority only if it is higher than constant (MIN_VALUE + 1000).", "url": "https://github.com/apache/hbase/pull/1784#discussion_r430899478", "createdAt": "2020-05-27T07:05:13Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -1921,9 +1921,15 @@ public boolean shouldPerformMajorCompaction() throws IOException {\n         // If we're enqueuing a major, clear the force flag.\n         this.forceMajor = this.forceMajor && !request.isMajor();\n \n-        // Set common request properties.\n-        // Set priority, either override value supplied by caller or from store.\n-        request.setPriority((priority != Store.NO_PRIORITY) ? priority : getCompactPriority());\n+        if (request.isAfterSplit()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNTMyNw=="}, "originalCommit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMDUzNQ==", "bodyText": "Yeah, MIN_VALUE+1000 (or 5000) should be able to provide more than enough room for tasks that can emerge as even higher priority than split housekeeping in future.", "url": "https://github.com/apache/hbase/pull/1784#discussion_r430900535", "createdAt": "2020-05-27T07:07:39Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HStore.java", "diffHunk": "@@ -1921,9 +1921,15 @@ public boolean shouldPerformMajorCompaction() throws IOException {\n         // If we're enqueuing a major, clear the force flag.\n         this.forceMajor = this.forceMajor && !request.isMajor();\n \n-        // Set common request properties.\n-        // Set priority, either override value supplied by caller or from store.\n-        request.setPriority((priority != Store.NO_PRIORITY) ? priority : getCompactPriority());\n+        if (request.isAfterSplit()) {\n+          // If the store belongs to recently splitted daughter regions, better we consider\n+          // them with the highest priority in the compaction queue.\n+          request.setPriority(Integer.MIN_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxMzEzNA=="}, "originalCommit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMjIzMQ==", "bodyText": "Yeah right, I exactly looked for an existing boolean and applied same formula rather than regenerating hashcode() by IDE :)", "url": "https://github.com/apache/hbase/pull/1784#discussion_r430902231", "createdAt": "2020-05-27T07:11:24Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/compactions/CompactionRequestImpl.java", "diffHunk": "@@ -149,6 +158,7 @@ public int hashCode() {\n     result = prime * result + ((storeName == null) ? 0 : storeName.hashCode());\n     result = prime * result + (int) (totalSize ^ (totalSize >>> 32));\n     result = prime * result + ((tracker == null) ? 0 : tracker.hashCode());\n+    result = prime * result + (isAfterSplit ? 1231 : 1237);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDcxNjgwNQ=="}, "originalCommit": {"oid": "c98aa8026b2a919b171f1358d17fd3060a619877"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "799f0074b91c9c7dba2d4f353923bdd90c0150a9", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/799f0074b91c9c7dba2d4f353923bdd90c0150a9", "committedDate": "2020-05-27T10:21:30Z", "message": "addressing review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fda8e24f1d1e1cbdb271778fb3325ce39c47317a", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/fda8e24f1d1e1cbdb271778fb3325ce39c47317a", "committedDate": "2020-05-27T15:18:20Z", "message": "small comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4768, "cost": 1, "resetAt": "2021-10-28T18:00:02Z"}}}