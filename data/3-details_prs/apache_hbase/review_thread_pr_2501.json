{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3NjM5OTE2", "number": 2501, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1Nzo1M1rOErb_Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozMDowNVrOEsxPog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgyNzYyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1Nzo1M1rOHeNHdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1Nzo1M1rOHeNHdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDIyOQ==", "bodyText": "Why the cast? Isn't HRegionServer a Server?", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434229", "createdAt": "2020-10-08T03:57:53Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -1905,8 +1906,8 @@ public boolean isOnline() {\n   private void setupWALAndReplication() throws IOException {\n     boolean isMasterNoTableOrSystemTableOnly = this instanceof HMaster &&\n         !LoadBalancer.isMasterCanHostUserRegions(conf);\n-    WALFactory factory =\n-        new WALFactory(conf, serverName.toString(), !isMasterNoTableOrSystemTableOnly);\n+    WALFactory factory = new WALFactory(conf, serverName.toString(), (Server) this,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgyOTA1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1ODo0NlrOHeNIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1ODo0NlrOHeNIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDQ0OQ==", "bodyText": "Is it a good idea adding 'Server' in here? I think been trying to keep it so this is apart from need for a 'Server'?", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434449", "createdAt": "2020-10-08T03:58:46Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -185,6 +190,8 @@\n    */\n   protected final Configuration conf;\n \n+  protected final Server server;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgyOTU1OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMzo1OToxM1rOHeNIrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMTowODozNlrOHeZcqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDU0MQ==", "bodyText": "s/Log/WAL/g", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434541", "createdAt": "2020-10-08T03:59:13Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -329,6 +336,11 @@ public WalProps(Map<byte[], Long> encodedName2HighestSequenceId, long logSize) {\n \n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n+  private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"Log-Archiver-%d\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjI2NQ==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636265", "createdAt": "2020-10-08T11:08:36Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -329,6 +336,11 @@ public WalProps(Map<byte[], Long> encodedName2HighestSequenceId, long logSize) {\n \n   protected final AtomicBoolean rollRequested = new AtomicBoolean(false);\n \n+  private final ExecutorService logArchiveExecutor = Executors.newSingleThreadExecutor(\n+    new ThreadFactoryBuilder().setDaemon(true).setNameFormat(\"Log-Archiver-%d\").build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDU0MQ=="}, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgzMjYzOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDowMDo0N1rOHeNKZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDowMDo0N1rOHeNKZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNDk4Mw==", "bodyText": "s/logroll/walroll/g", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501434983", "createdAt": "2020-10-08T04:00:47Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +503,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.logroll.archive.retries\", 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgzNDY4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDowMjoyN1rOHeNLwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMTowODoxNVrOHeZb0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTMyOA==", "bodyText": "Why not put this inside the doShutdown?", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501435328", "createdAt": "2020-10-08T04:02:27Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -907,6 +959,9 @@ public void shutdown() throws IOException {\n     rollWriterLock.lock();\n     try {\n       doShutdown();\n+      if (logArchiveExecutor != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjA0OA==", "bodyText": "doShutDown is abstract method. So its better we do in the Parent class.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636048", "createdAt": "2020-10-08T11:08:15Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -907,6 +959,9 @@ public void shutdown() throws IOException {\n     rollWriterLock.lock();\n     try {\n       doShutdown();\n+      if (logArchiveExecutor != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTMyOA=="}, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgzNzA0OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDowNDoxM1rOHeNNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMTowODoyM1rOHeZcGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTcwMw==", "bodyText": "This the only reason for passing server? There is an Abortable Interface. Pass in an Abortable Interface instead (the server is an implementation of an Abortable so you could pass server).", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501435703", "createdAt": "2020-10-08T04:04:13Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +738,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archiveRetriable(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archiveRetriable(final Pair<Path, Long> log) {\n+    int retry = 1;\n+    while (true) {\n+      try {\n+        archiveLogFile(log.getFirst());\n+        totalLogSize.addAndGet(-log.getSecond());\n+        // successful\n+        break;\n+      } catch (Throwable e) {\n+        if (retry > archiveRetries) {\n+          LOG.error(\"Failed log archiving for the log {},\", log.getFirst(), e);\n+          if (this.server != null) {\n+            this.server.abort(\"Failed log archiving\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjEyMw==", "bodyText": "Fixed this every where.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636123", "createdAt": "2020-10-08T11:08:23Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +738,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archiveRetriable(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archiveRetriable(final Pair<Path, Long> log) {\n+    int retry = 1;\n+    while (true) {\n+      try {\n+        archiveLogFile(log.getFirst());\n+        totalLogSize.addAndGet(-log.getSecond());\n+        // successful\n+        break;\n+      } catch (Throwable e) {\n+        if (retry > archiveRetries) {\n+          LOG.error(\"Failed log archiving for the log {},\", log.getFirst(), e);\n+          if (this.server != null) {\n+            this.server.abort(\"Failed log archiving\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNTcwMw=="}, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTgzOTY2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDowNTozNVrOHeNOqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDowNTozNVrOHeNOqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjA3Mg==", "bodyText": "Yeah, too much if it is only being used to abort. Just pass an Abortable.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501436072", "createdAt": "2020-10-08T04:05:35Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/wal/WALFactory.java", "diffHunk": "@@ -86,6 +87,7 @@\n   public static final String WAL_ENABLED = \"hbase.regionserver.hlog.enabled\";\n \n   final String factoryId;\n+  final Server server;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTg0MDYyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNDowNjoxNVrOHeNPOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMTowODoyOVrOHeZcRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjIxNw==", "bodyText": "s/Retriable/Retryable/g", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501436217", "createdAt": "2020-10-08T04:06:15Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "diffHunk": "@@ -122,6 +127,18 @@ public DodgyFSLog(FileSystem fs, Path root, String logDir, Configuration conf)\n       return regions;\n     }\n \n+    @Override\n+    protected void archiveLogFile(Path p) throws IOException {\n+      if (throwArchiveException) {\n+        throw new IOException(\"throw archival exception\");\n+      }\n+    }\n+\n+    @Override\n+    protected void archiveRetriable(Pair<Path, Long> localLogsToArchive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTYzNjE2Ng==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501636166", "createdAt": "2020-10-08T11:08:29Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "diffHunk": "@@ -122,6 +127,18 @@ public DodgyFSLog(FileSystem fs, Path root, String logDir, Configuration conf)\n       return regions;\n     }\n \n+    @Override\n+    protected void archiveLogFile(Path p) throws IOException {\n+      if (throwArchiveException) {\n+        throw new IOException(\"throw archival exception\");\n+      }\n+    }\n+\n+    @Override\n+    protected void archiveRetriable(Pair<Path, Long> localLogsToArchive) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQzNjIxNw=="}, "originalCommit": {"oid": "13fecf32bf91235d7ec71c6833cee3d4d1ba18b3"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjYxMjEyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1Mzo0OVrOHenqvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMDoxNjo0N1rOHfXcRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw==", "bodyText": "Default is no retries?\nWill the retry ever work? Will it be regular occurence?", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501869247", "createdAt": "2020-10-08T16:53:49Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MTQyMw==", "bodyText": "Ideally if the WAL FS is having an issue then this archive may also fail. By default we will try it (mandatory) once (so retries are 0) - then if this new config is set to a non-zero value we will try to repeat it for the configured times. Generally we are not going to configure it to a non-zero value.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r502191423", "createdAt": "2020-10-09T05:06:22Z", "author": {"login": "ramkrish86"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw=="}, "originalCommit": {"oid": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY1MTk3NA==", "bodyText": "ok", "url": "https://github.com/apache/hbase/pull/2501#discussion_r502651974", "createdAt": "2020-10-09T20:16:47Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg2OTI0Nw=="}, "originalCommit": {"oid": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MjYyNjI5OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1NzoyNlrOHenz5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNjo1NzoyNlrOHenz5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTg3MTU4OQ==", "bodyText": "nit: just name it archive ? That it retries is an internal affair.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r501871589", "createdAt": "2020-10-08T16:57:26Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +740,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archiveRetryable(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archiveRetryable(final Pair<Path, Long> log) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52209f4a21d71d8e28d18dfef21b2acfaeaad5fd"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc3MDE2OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyMDowNFrOHgMBmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyMDowNFrOHgMBmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMzQ5Ng==", "bodyText": "nit: why all the extra whitespace?", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503513496", "createdAt": "2020-10-12T20:20:04Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -84,8 +87,12 @@\n import org.apache.yetus.audience.InterfaceAudience;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import org.apache.hbase.thirdparty.com.google.common.annotations.VisibleForTesting;\n+import org.apache.hbase.thirdparty.com.google.common.util.concurrent.ThreadFactoryBuilder;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc3MjAyOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyMDo0NVrOHgMCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyMDo0NVrOHgMCtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxMzc4Mw==", "bodyText": "Introducing a new configuration is a hint that this is too \"big/complex\" to add on a patch release.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503513783", "createdAt": "2020-10-12T20:20:45Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -482,6 +505,8 @@ protected SyncFuture initialValue() {\n     this.walTooOldNs = TimeUnit.SECONDS.toNanos(conf.getInt(\n             SURVIVED_TOO_LONG_SEC_KEY, SURVIVED_TOO_LONG_SEC_DEFAULT));\n     this.useHsync = conf.getBoolean(HRegion.WAL_HSYNC_CONF_KEY, HRegion.DEFAULT_WAL_HSYNC);\n+    archiveRetries = this.conf.getInt(\"hbase.regionserver.walroll.archive.retries\", 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc4NjIxOnYy", "diffSide": "RIGHT", "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyNjoxOFrOHgMLLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyNjoxOFrOHgMLLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNTk0OQ==", "bodyText": "No backoff of any kind in the retry mechanism?", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503515949", "createdAt": "2020-10-12T20:26:18Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/wal/AbstractFSWAL.java", "diffHunk": "@@ -715,11 +740,39 @@ private void cleanOldLogs() throws IOException {\n         regionsBlockingThisWal.clear();\n       }\n     }\n+\n     if (logsToArchive != null) {\n-      for (Pair<Path, Long> logAndSize : logsToArchive) {\n-        this.totalLogSize.addAndGet(-logAndSize.getSecond());\n-        archiveLogFile(logAndSize.getFirst());\n-        this.walFile2Props.remove(logAndSize.getFirst());\n+      final List<Pair<Path, Long>> localLogsToArchive = logsToArchive;\n+      // make it async\n+      for (Pair<Path, Long> log : localLogsToArchive) {\n+        logArchiveExecutor.execute(() -> {\n+          archive(log);\n+        });\n+        this.walFile2Props.remove(log.getFirst());\n+      }\n+    }\n+  }\n+\n+  protected void archive(final Pair<Path, Long> log) {\n+    int retry = 1;\n+    while (true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc4OTY3OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyNzoyN1rOHgMNHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDoyNzoyN1rOHgMNHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNjQ0NQ==", "bodyText": "This will be a flaky test. Please use the waitFor pattern already provided on the testing utility class.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503516445", "createdAt": "2020-10-12T20:27:27Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/wal/AbstractTestLogRolling.java", "diffHunk": "@@ -175,10 +175,15 @@ public void testLogRollOnNothingWritten() throws Exception {\n     }\n   }\n \n-  private void assertLogFileSize(WAL log) {\n+  private void assertLogFileSize(WAL log) throws InterruptedException {\n     if (AbstractFSWALProvider.getNumRolledLogFiles(log) > 0) {\n       assertTrue(AbstractFSWALProvider.getLogFileSize(log) > 0);\n     } else {\n+      for (int i = 0; i < 10; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Mzc5NjE4OnYy", "diffSide": "RIGHT", "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozMDowNVrOHgMRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDozMDowNVrOHgMRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUxNzUyNw==", "bodyText": "This will be a flaky test. Please use the waitFor pattern already provided on the testing utility class.", "url": "https://github.com/apache/hbase/pull/2501#discussion_r503517527", "createdAt": "2020-10-12T20:30:05Z", "author": {"login": "ndimiduk"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/regionserver/TestFailedAppendAndSync.java", "diffHunk": "@@ -256,6 +273,27 @@ public void testLockupAroundBadAssignSync() throws IOException {\n           Threads.sleep(1);\n         }\n       }\n+\n+      try {\n+        dodgyWAL.throwAppendException = false;\n+        dodgyWAL.throwSyncException = false;\n+        dodgyWAL.throwArchiveException = true;\n+        Pair<Path, Long> pair = new Pair<Path, Long>();\n+        pair.setFirst(new Path(\"/a/b/\"));\n+        pair.setSecond(100L);\n+        dodgyWAL.archive(pair);\n+      } catch (Throwable ioe) {\n+      }\n+      while (true) {\n+        try {\n+          // one more abort needs to be called\n+          Mockito.verify(services, Mockito.atLeast(2)).abort(Mockito.anyString(),\n+            (Throwable) Mockito.anyObject());\n+          break;\n+        } catch (WantedButNotInvoked t) {\n+          Threads.sleep(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a12ea8e632fa47f20a7bcbbaeee578c8ff24b95"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2556, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}