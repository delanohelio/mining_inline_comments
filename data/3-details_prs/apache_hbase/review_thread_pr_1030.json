{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjQ3ODY3", "number": 1030, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjoyNDowNFrODYO6qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoyNTo0NlrODaTSlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NzM2ODExOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/io/crypto/TestEncryption.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQxNjoyNDowNFrOFd-Qtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwODozNjowMlrOFeRh4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MzExMA==", "bodyText": "this is a file header and not a javadoc, shouldn't it be using /* and not /**?", "url": "https://github.com/apache/hbase/pull/1030#discussion_r366973110", "createdAt": "2020-01-15T16:24:04Z", "author": {"login": "busbey"}, "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/io/crypto/TestEncryption.java", "diffHunk": "@@ -1,22 +1,24 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f66a2d99546d8c990443c18a869c7eab354eccac"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI4ODgwMg==", "bodyText": "Fixed", "url": "https://github.com/apache/hbase/pull/1030#discussion_r367288802", "createdAt": "2020-01-16T08:36:02Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/io/crypto/TestEncryption.java", "diffHunk": "@@ -1,22 +1,24 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements. See the NOTICE file distributed with this\n- * work for additional information regarding copyright ownership. The ASF\n- * licenses this file to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njk3MzExMA=="}, "originalCommit": {"oid": "f66a2d99546d8c990443c18a869c7eab354eccac"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTA1MjM5OnYy", "diffSide": "RIGHT", "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoyNDoyMFrOFhLh9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoyNDoyMFrOFhLh9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNjI0Nw==", "bodyText": "Smile", "url": "https://github.com/apache/hbase/pull/1030#discussion_r370336247", "createdAt": "2020-01-23T20:24:20Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/TestCellUtil.java", "diffHunk": "@@ -221,34 +220,35 @@ public int getTagsLength() {\n       // TODO Auto-generated method stub\n       return 0;\n     }\n-  };\n+  }\n \n   /**\n    * Was overflowing if 100k or so lists of cellscanners to return.\n-   * @throws IOException\n    */\n   @Test\n   public void testCreateCellScannerOverflow() throws IOException {\n-    consume(doCreateCellScanner(1, 1), 1 * 1);\n-    consume(doCreateCellScanner(3, 0), 3 * 0);\n+    consume(doCreateCellScanner(1, 1), 1);\n+    consume(doCreateCellScanner(3, 0), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b39851dd089c850c288b73e640c5d048321c80"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4OTA1NjIwOnYy", "diffSide": "RIGHT", "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/util/RedundantKVGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMDoyNTo0NlrOFhLkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNTo1NzowNFrOFhiNUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNjg2NA==", "bodyText": "The values are overwritten later?", "url": "https://github.com/apache/hbase/pull/1030#discussion_r370336864", "createdAt": "2020-01-23T20:25:46Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/util/RedundantKVGenerator.java", "diffHunk": "@@ -140,46 +139,45 @@ public RedundantKVGenerator(Random randomizer,\n   private Random randomizer;\n \n   // row settings\n-  private byte[] commonPrefix;//global prefix before rowPrefixes\n+  private byte[] commonPrefix; //global prefix before rowPrefixes\n   private int numberOfRowPrefixes;\n-  private int averagePrefixLength = 6;\n-  private int prefixLengthVariance = 3;\n-  private int averageSuffixLength = 3;\n-  private int suffixLengthVariance = 3;\n-  private int numberOfRows = 500;\n+  private int averagePrefixLength;\n+  private int prefixLengthVariance;\n+  private int averageSuffixLength;\n+  private int suffixLengthVariance;\n+  private int numberOfRows;\n \n-  //family\n+  // family\n   private byte[] family;\n \n   // qualifier\n-  private float chanceForSameQualifier = 0.5f;\n-  private float chanceForSimilarQualifier = 0.4f;\n-  private int averageQualifierLength = 9;\n-  private int qualifierLengthVariance = 3;\n+  private float chanceForSameQualifier;\n+  private float chanceForSimilarQualifier;\n+  private int averageQualifierLength;\n+  private int qualifierLengthVariance;\n \n-  private int columnFamilyLength = 9;\n-  private int valueLength = 8;\n-  private float chanceForZeroValue = 0.5f;\n+  private int columnFamilyLength;\n+  private int valueLength;\n+  private float chanceForZeroValue;\n \n-  private int baseTimestampDivide = 1000000;\n-  private int timestampDiffSize = 100000000;\n+  private int baseTimestampDivide;\n+  private int timestampDiffSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7b39851dd089c850c288b73e640c5d048321c80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU3NTAyNw==", "bodyText": "They are both overwritten in the constructor above.", "url": "https://github.com/apache/hbase/pull/1030#discussion_r370575027", "createdAt": "2020-01-24T10:50:30Z", "author": {"login": "HorizonNet"}, "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/util/RedundantKVGenerator.java", "diffHunk": "@@ -140,46 +139,45 @@ public RedundantKVGenerator(Random randomizer,\n   private Random randomizer;\n \n   // row settings\n-  private byte[] commonPrefix;//global prefix before rowPrefixes\n+  private byte[] commonPrefix; //global prefix before rowPrefixes\n   private int numberOfRowPrefixes;\n-  private int averagePrefixLength = 6;\n-  private int prefixLengthVariance = 3;\n-  private int averageSuffixLength = 3;\n-  private int suffixLengthVariance = 3;\n-  private int numberOfRows = 500;\n+  private int averagePrefixLength;\n+  private int prefixLengthVariance;\n+  private int averageSuffixLength;\n+  private int suffixLengthVariance;\n+  private int numberOfRows;\n \n-  //family\n+  // family\n   private byte[] family;\n \n   // qualifier\n-  private float chanceForSameQualifier = 0.5f;\n-  private float chanceForSimilarQualifier = 0.4f;\n-  private int averageQualifierLength = 9;\n-  private int qualifierLengthVariance = 3;\n+  private float chanceForSameQualifier;\n+  private float chanceForSimilarQualifier;\n+  private int averageQualifierLength;\n+  private int qualifierLengthVariance;\n \n-  private int columnFamilyLength = 9;\n-  private int valueLength = 8;\n-  private float chanceForZeroValue = 0.5f;\n+  private int columnFamilyLength;\n+  private int valueLength;\n+  private float chanceForZeroValue;\n \n-  private int baseTimestampDivide = 1000000;\n-  private int timestampDiffSize = 100000000;\n+  private int baseTimestampDivide;\n+  private int timestampDiffSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNjg2NA=="}, "originalCommit": {"oid": "a7b39851dd089c850c288b73e640c5d048321c80"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDcwNzc5NA==", "bodyText": "Ok. Good.", "url": "https://github.com/apache/hbase/pull/1030#discussion_r370707794", "createdAt": "2020-01-24T15:57:04Z", "author": {"login": "saintstack"}, "path": "hbase-common/src/test/java/org/apache/hadoop/hbase/util/RedundantKVGenerator.java", "diffHunk": "@@ -140,46 +139,45 @@ public RedundantKVGenerator(Random randomizer,\n   private Random randomizer;\n \n   // row settings\n-  private byte[] commonPrefix;//global prefix before rowPrefixes\n+  private byte[] commonPrefix; //global prefix before rowPrefixes\n   private int numberOfRowPrefixes;\n-  private int averagePrefixLength = 6;\n-  private int prefixLengthVariance = 3;\n-  private int averageSuffixLength = 3;\n-  private int suffixLengthVariance = 3;\n-  private int numberOfRows = 500;\n+  private int averagePrefixLength;\n+  private int prefixLengthVariance;\n+  private int averageSuffixLength;\n+  private int suffixLengthVariance;\n+  private int numberOfRows;\n \n-  //family\n+  // family\n   private byte[] family;\n \n   // qualifier\n-  private float chanceForSameQualifier = 0.5f;\n-  private float chanceForSimilarQualifier = 0.4f;\n-  private int averageQualifierLength = 9;\n-  private int qualifierLengthVariance = 3;\n+  private float chanceForSameQualifier;\n+  private float chanceForSimilarQualifier;\n+  private int averageQualifierLength;\n+  private int qualifierLengthVariance;\n \n-  private int columnFamilyLength = 9;\n-  private int valueLength = 8;\n-  private float chanceForZeroValue = 0.5f;\n+  private int columnFamilyLength;\n+  private int valueLength;\n+  private float chanceForZeroValue;\n \n-  private int baseTimestampDivide = 1000000;\n-  private int timestampDiffSize = 100000000;\n+  private int baseTimestampDivide;\n+  private int timestampDiffSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMzNjg2NA=="}, "originalCommit": {"oid": "a7b39851dd089c850c288b73e640c5d048321c80"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2126, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}