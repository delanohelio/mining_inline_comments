{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNjk2MjE4", "number": 1121, "title": "HBASE-20623: [WIP]Introduce the helper method \"getCellBuilder()\" to Mutation", "bodyText": "this is still a work in the progress, Plz don't review before removing the WIP tag.\nmore details in the HBASE-20623", "createdAt": "2020-02-04T08:00:39Z", "url": "https://github.com/apache/hbase/pull/1121", "merged": true, "mergeCommit": {"oid": "12f98bc50e738b885cc721f97b1aee92bf51f5b0"}, "closed": true, "closedAt": "2020-02-10T18:03:36Z", "author": {"login": "maoling"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcA8z2MgH2gAyMzcwNjk2MjE4OmE4MzQyOGI4NDlhMmVhM2M4ZTU2NWVhMTQ0NTBiYWNhNzNhOWMyNWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBI4wBAFqTM1MzMyNzgxNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a83428b849a2ea3c8e565ea14450baca73a9c25c", "author": {"user": {"login": "maoling", "name": null}}, "url": "https://github.com/apache/hbase/commit/a83428b849a2ea3c8e565ea14450baca73a9c25c", "committedDate": "2020-02-04T07:57:01Z", "message": "HBASE-20623: Introduce the helper method \"getCellBuilder()\" to Mutation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzI3ODE0", "url": "https://github.com/apache/hbase/pull/1121#pullrequestreview-353327814", "createdAt": "2020-02-04T21:51:55Z", "commit": {"oid": "a83428b849a2ea3c8e565ea14450baca73a9c25c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo1MTo1NVrOFlkvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMjowMToxMFrOFlk_0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0MzUxMA==", "bodyText": "So you shutdown setting row, type, etc., with the below?", "url": "https://github.com/apache/hbase/pull/1121#discussion_r374943510", "createdAt": "2020-02-04T21:51:55Z", "author": {"login": "saintstack"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/Mutation.java", "diffHunk": "@@ -784,6 +787,104 @@ Mutation add(Cell cell) throws IOException {\n     return this;\n   }\n \n+  /**\n+   * get a CellBuilder instance that already has relevant Type and Row set.\n+   * @param cellBuilderType e.g CellBuilderType.SHALLOW_COPY\n+   * @return CellBuilder which already has relevant Type and Row set.\n+   */\n+  public abstract CellBuilder getCellBuilder(CellBuilderType cellBuilderType);\n+\n+  /**\n+   * get a CellBuilder instance that already has relevant Type and Row set.\n+   * the default CellBuilderType is CellBuilderType.SHALLOW_COPY\n+   * @return CellBuilder which already has relevant Type and Row set.\n+   */\n+  public CellBuilder getCellBuilder() {\n+    return getCellBuilder(CellBuilderType.SHALLOW_COPY);\n+  }\n+\n+  /**\n+   * get a CellBuilder instance that already has relevant Type and Row set.\n+   * @param cellBuilderType e.g CellBuilderType.SHALLOW_COPY\n+   * @param cellType e.g Cell.Type.Put\n+   * @return CellBuilder which already has relevant Type and Row set.\n+     */\n+  protected CellBuilder getCellBuilder(CellBuilderType cellBuilderType, Cell.Type cellType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83428b849a2ea3c8e565ea14450baca73a9c25c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0NjU1OQ==", "bodyText": "Should it throw an exception? Maybe it can't?", "url": "https://github.com/apache/hbase/pull/1121#discussion_r374946559", "createdAt": "2020-02-04T21:58:30Z", "author": {"login": "saintstack"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/client/TestMutationGetCellBuilder.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.hadoop.hbase.client;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import org.apache.hadoop.hbase.Cell;\n+import org.apache.hadoop.hbase.CellBuilder;\n+import org.apache.hadoop.hbase.CellUtil;\n+import org.apache.hadoop.hbase.HBaseClassTestRule;\n+import org.apache.hadoop.hbase.HBaseTestingUtility;\n+import org.apache.hadoop.hbase.TableName;\n+import org.apache.hadoop.hbase.testclassification.ClientTests;\n+import org.apache.hadoop.hbase.testclassification.MediumTests;\n+import org.apache.hadoop.hbase.util.Bytes;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+@Category({MediumTests.class, ClientTests.class})\n+public class TestMutationGetCellBuilder {\n+\n+  @ClassRule\n+  public static final HBaseClassTestRule CLASS_RULE =\n+      HBaseClassTestRule.forClass(TestMutationGetCellBuilder.class);\n+\n+  private static final HBaseTestingUtility TEST_UTIL = new HBaseTestingUtility();\n+\n+  @Rule\n+  public TestName name = new TestName();\n+\n+  @BeforeClass\n+  public static void setUpBeforeClass() throws Exception {\n+    TEST_UTIL.startMiniCluster();\n+  }\n+\n+  @AfterClass\n+  public static void tearDownAfterClass() throws Exception {\n+    TEST_UTIL.shutdownMiniCluster();\n+  }\n+\n+  @Test\n+  public void testMutationGetCellBuilder() throws Exception {\n+    final TableName tableName = TableName.valueOf(name.getMethodName());\n+    final byte[] rowKey = Bytes.toBytes(\"12345678\");\n+    final byte[] uselessRowKey = Bytes.toBytes(\"123\");\n+    final byte[] family = Bytes.toBytes(\"cf\");\n+    final byte[] qualifier = Bytes.toBytes(\"foo\");\n+    final long now = System.currentTimeMillis();\n+    try (Table table = TEST_UTIL.createTable(tableName, family)) {\n+      TEST_UTIL.waitTableAvailable(tableName.getName(), 5000);\n+      // put one row\n+      Put put = new Put(rowKey);\n+      CellBuilder cellBuilder = put.getCellBuilder().setQualifier(qualifier)\n+              .setFamily(family).setValue(Bytes.toBytes(\"bar\")).setTimestamp(now);\n+      //setRow is useless\n+      cellBuilder.setRow(uselessRowKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83428b849a2ea3c8e565ea14450baca73a9c25c"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0Nzc5NA==", "bodyText": "Could write this as put.addColumn()? It'd be easier? What you see advantage of this being able to do it by Cell? Will it confuse the user?", "url": "https://github.com/apache/hbase/pull/1121#discussion_r374947794", "createdAt": "2020-02-04T22:01:10Z", "author": {"login": "saintstack"}, "path": "src/main/asciidoc/_chapters/datamodel.adoc", "diffHunk": "@@ -471,6 +471,26 @@ Caution: the version timestamp is used internally by HBase for things like time-\n It's usually best to avoid setting this timestamp yourself.\n Prefer using a separate timestamp attribute of the row, or have the timestamp as a part of the row key, or both.\n \n+===== Cell Version Example\n+\n+The following Put uses a method getCellBuilder() to get a CellBuilder instance\n+that already has relevant Type and Row set.\n+\n+[source,java]\n+----\n+\n+public static final byte[] CF = \"cf\".getBytes();\n+public static final byte[] ATTR = \"attr\".getBytes();\n+...\n+\n+Put put = new Put(Bytes.toBytes(row));\n+put.add(put.getCellBuilder().setQualifier(ATTR)\n+   .setFamily(CF)\n+   .setValue(Bytes.toBytes(data))\n+   .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83428b849a2ea3c8e565ea14450baca73a9c25c"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3095, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}