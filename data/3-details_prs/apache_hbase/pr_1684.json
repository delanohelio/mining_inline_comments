{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1MjQyMDU5", "number": 1684, "title": "HBASE-24327 : Handle shutdown() if master cannot be contacted", "bodyText": "2020-05-08 07:48:32,831 WARN  [RPCClient-NioEventLoopGroup-6-17] client.AsyncRpcRetryingCaller(171): Get async master stub failed, tries = 15, maxAttempts = 15, timeout = 1200000 ms, time elapsed = 109017 ms\norg.apache.hadoop.hbase.exceptions.MasterRegistryFetchException: Exception making rpc to masters [asf904.gq1.ygridcore.net,42533,-1]\n\tat org.apache.hadoop.hbase.client.MasterRegistry.lambda$groupCall$1(MasterRegistry.java:213)\n\tat org.apache.hadoop.hbase.util.FutureUtils.lambda$addListener$0(FutureUtils.java:68)\n\tat java.util.concurrent.CompletableFuture.uniWhenComplete(CompletableFuture.java:774)\n\tat java.util.concurrent.CompletableFuture$UniWhenComplete.tryFire(CompletableFuture.java:750)\n\tat java.util.concurrent.CompletableFuture.postComplete(CompletableFuture.java:488)\n\tat java.util.concurrent.CompletableFuture.completeExceptionally(CompletableFuture.java:1990)\n\tat org.apache.hadoop.hbase.client.MasterRegistry.lambda$call$0(MasterRegistry.java:172)\n\tat org.apache.hbase.thirdparty.com.google.protobuf.RpcUtil$1.run(RpcUtil.java:79)\n\tat org.apache.hbase.thirdparty.com.google.protobuf.RpcUtil$1.run(RpcUtil.java:70)\n\tat org.apache.hadoop.hbase.ipc.AbstractRpcClient.onCallFinished(AbstractRpcClient.java:380)\n\tat org.apache.hadoop.hbase.ipc.AbstractRpcClient.access$100(AbstractRpcClient.java:89)\n\tat org.apache.hadoop.hbase.ipc.AbstractRpcClient$3.run(AbstractRpcClient.java:409)\n\tat org.apache.hadoop.hbase.ipc.AbstractRpcClient$3.run(AbstractRpcClient.java:405)\n\tat org.apache.hadoop.hbase.ipc.Call.callComplete(Call.java:117)\n\tat org.apache.hadoop.hbase.ipc.Call.setException(Call.java:132)\n\tat org.apache.hadoop.hbase.ipc.BufferCallBeforeInitHandler.userEventTriggered(BufferCallBeforeInitHandler.java:92)\n\tat org.apache.hbase.thirdparty.io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:346)\n\tat org.apache.hbase.thirdparty.io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:332)\n\tat org.apache.hbase.thirdparty.io.netty.channel.AbstractChannelHandlerContext.fireUserEventTriggered(AbstractChannelHandlerContext.java:324)\n\tat org.apache.hbase.thirdparty.io.netty.channel.DefaultChannelPipeline$HeadContext.userEventTriggered(DefaultChannelPipeline.java:1428)\n\tat org.apache.hbase.thirdparty.io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:346)\n\tat org.apache.hbase.thirdparty.io.netty.channel.AbstractChannelHandlerContext.invokeUserEventTriggered(AbstractChannelHandlerContext.java:332)\n\tat org.apache.hbase.thirdparty.io.netty.channel.DefaultChannelPipeline.fireUserEventTriggered(DefaultChannelPipeline.java:913)\n\tat org.apache.hadoop.hbase.ipc.NettyRpcConnection.failInit(NettyRpcConnection.java:181)\n\tat org.apache.hadoop.hbase.ipc.NettyRpcConnection.access$500(NettyRpcConnection.java:71)\n\tat org.apache.hadoop.hbase.ipc.NettyRpcConnection$3.operationComplete(NettyRpcConnection.java:269)\n\tat org.apache.hadoop.hbase.ipc.NettyRpcConnection$3.operationComplete(NettyRpcConnection.java:263)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.DefaultPromise.notifyListener0(DefaultPromise.java:577)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.DefaultPromise.notifyListeners0(DefaultPromise.java:570)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.DefaultPromise.notifyListenersNow(DefaultPromise.java:549)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.DefaultPromise.notifyListeners(DefaultPromise.java:490)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.DefaultPromise.setValue0(DefaultPromise.java:615)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.DefaultPromise.setFailure0(DefaultPromise.java:608)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.DefaultPromise.tryFailure(DefaultPromise.java:117)\n\tat org.apache.hbase.thirdparty.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.fulfillConnectPromise(AbstractNioChannel.java:321)\n\tat org.apache.hbase.thirdparty.io.netty.channel.nio.AbstractNioChannel$AbstractNioUnsafe.finishConnect(AbstractNioChannel.java:337)\n\tat org.apache.hbase.thirdparty.io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:702)\n\tat org.apache.hbase.thirdparty.io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\n\tat org.apache.hbase.thirdparty.io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\n\tat org.apache.hbase.thirdparty.io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\n\tat org.apache.hbase.thirdparty.io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat org.apache.hbase.thirdparty.io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: org.apache.hadoop.hbase.client.RetriesExhaustedException: Failed contacting masters after 1 attempts.\nExceptions:\njava.net.ConnectException: Call to asf904.gq1.ygridcore.net/67.195.81.148:42533 failed on connection exception: org.apache.hbase.thirdparty.io.netty.channel.AbstractChannel$AnnotatedConnectException: Connection refused: asf904.gq1.ygridcore.net/67.195.81.148:42533\n\n\tat org.apache.hadoop.hbase.client.MasterRegistry.lambda$groupCall$1(MasterRegistry.java:211)\n\t... 43 more", "createdAt": "2020-05-08T13:43:03Z", "url": "https://github.com/apache/hbase/pull/1684", "merged": true, "mergeCommit": {"oid": "34a74534fe43a708146b00799ae12b2873a93d2b"}, "closed": true, "closedAt": "2020-05-10T11:39:52Z", "author": {"login": "virajjasani"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfRs32AH2gAyNDE1MjQyMDU5OjU1ODhkZTY1MWYwNDcwZjJhNzA3MWZjYTU4NWExZTJmZTNiYjUwY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcf1xucgH2gAyNDE1MjQyMDU5OmQyYmI4YTdiMzZlMmViOWE3OWNlMjllNDBhNDkzMzUyOTM2M2Y4Y2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5588de651f0470f2a7071fca585a1e2fe3bb50cf", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/5588de651f0470f2a7071fca585a1e2fe3bb50cf", "committedDate": "2020-05-08T13:15:08Z", "message": "HBASE-24327 : Handle shutdown() if master cannot be contacted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a5dfd16764c5606507460ba877d86dc0e112763", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/5a5dfd16764c5606507460ba877d86dc0e112763", "committedDate": "2020-05-08T13:41:02Z", "message": "minor change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NDQwNzY2", "url": "https://github.com/apache/hbase/pull/1684#pullrequestreview-408440766", "createdAt": "2020-05-08T18:37:28Z", "commit": {"oid": "5a5dfd16764c5606507460ba877d86dc0e112763"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODozNzoyOVrOGSvdWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxODozNzoyOVrOGSvdWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjMwNTExMw==", "bodyText": "I have some on context on this test. Did you happen to dig into the root cause of the ConnectionRefused stack trace that you posted (you have the full stack trace with failed RPC name?)?\nIdeally that shouldn't happen right? The waitFor() above means the bootstrap of the master is complete and it should be able to process the shutdown() command, in a normal case. Just want to be sure we are not masking a real bug, especially after Duo moved all the code from RPC to registry.", "url": "https://github.com/apache/hbase/pull/1684#discussion_r422305113", "createdAt": "2020-05-08T18:37:29Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -163,7 +164,16 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       assertNotEquals(\"Timeout waiting for server manager to become available.\",\n         -1, Waiter.waitFor(htu.getConfiguration(), timeout,\n           () -> masterThread.getMaster().getServerManager() != null));\n-      htu.getConnection().getAdmin().shutdown();\n+      try {\n+        htu.getConnection().getAdmin().shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a5dfd16764c5606507460ba877d86dc0e112763"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01178e64782f19ab874cae805fef509be849191f", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/01178e64782f19ab874cae805fef509be849191f", "committedDate": "2020-05-09T18:03:40Z", "message": "async call to shutdown()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njg5NjY0", "url": "https://github.com/apache/hbase/pull/1684#pullrequestreview-408689664", "createdAt": "2020-05-09T22:45:48Z", "commit": {"oid": "01178e64782f19ab874cae805fef509be849191f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0NTo0OFrOGS-v0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0OTowN1rOGS-w_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTYwMw==", "bodyText": "we can use htu.getConnection()?", "url": "https://github.com/apache/hbase/pull/1684#discussion_r422555603", "createdAt": "2020-05-09T22:45:48Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +156,47 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        final long result = htu.waitFor(timeout, 1000, () -> {\n+          final Configuration conf = createResponsiveZkConfig(htu.getConfiguration());\n+          LOG.debug(\"Attempting to establish connection.\");\n+          final CompletableFuture<AsyncConnection> connFuture =\n+            ConnectionFactory.createAsyncConnection(conf);\n+          try (final AsyncConnection conn = connFuture.join()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01178e64782f19ab874cae805fef509be849191f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTkwMQ==", "bodyText": "Shouldn't this be before we trigger the shutdown command?", "url": "https://github.com/apache/hbase/pull/1684#discussion_r422555901", "createdAt": "2020-05-09T22:49:07Z", "author": {"login": "bharathv"}, "path": "hbase-server/src/test/java/org/apache/hadoop/hbase/master/TestMasterShutdown.java", "diffHunk": "@@ -151,19 +156,47 @@ public void testMasterShutdownBeforeStartingAnyRegionServer() throws Exception {\n       hbaseCluster = new LocalHBaseCluster(htu.getConfiguration(), options.getNumMasters(),\n         options.getNumRegionServers(), options.getMasterClass(), options.getRsClass());\n       final MasterThread masterThread = hbaseCluster.getMasters().get(0);\n+\n+      final CompletableFuture<Void> shutdownFuture = CompletableFuture.runAsync(() -> {\n+        // Switching to master registry exacerbated a race in the master bootstrap that can result\n+        // in a lost shutdown command (HBASE-8422, HBASE-23836). The race is essentially because\n+        // the server manager in HMaster is not initialized by the time shutdown() RPC (below) is\n+        // made to the master. The suspected reason as to why it was uncommon before HBASE-18095\n+        // is because the connection creation with ZK registry is so slow that by then the server\n+        // manager is usually init'ed in time for the RPC to be made. For now, adding an explicit\n+        // wait() in the test, waiting for the server manager to become available.\n+        final long timeout = TimeUnit.MINUTES.toMillis(10);\n+        assertNotEquals(\"timeout waiting for server manager to become available.\", -1,\n+          htu.waitFor(timeout, () -> masterThread.getMaster().getServerManager() != null));\n+\n+        // Master has come up far enough that we can terminate it without creating a zombie.\n+        final long result = htu.waitFor(timeout, 1000, () -> {\n+          final Configuration conf = createResponsiveZkConfig(htu.getConfiguration());\n+          LOG.debug(\"Attempting to establish connection.\");\n+          final CompletableFuture<AsyncConnection> connFuture =\n+            ConnectionFactory.createAsyncConnection(conf);\n+          try (final AsyncConnection conn = connFuture.join()) {\n+            LOG.info(\"Sending shutdown RPC.\");\n+            try {\n+              conn.getAdmin().shutdown().join();\n+              LOG.info(\"Shutdown RPC sent.\");\n+              return true;\n+            } catch (CompletionException e) {\n+              LOG.error(\"Failure sending shutdown RPC.\");\n+            }\n+          } catch (IOException|CompletionException e) {\n+            LOG.error(\"Failed to establish connection.\");\n+          } catch (Throwable e) {\n+            LOG.error(\"Something unexpected happened.\", e);\n+          }\n+          return false;\n+        });\n+        assertNotEquals(\"Failed to issue shutdown RPC after \" + Duration.ofMillis(timeout),\n+          -1, result);\n+      });\n+\n       masterThread.start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01178e64782f19ab874cae805fef509be849191f"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2bb8a7b36e2eb9a79ce29e40a4933529363f8cf", "author": {"user": {"login": "virajjasani", "name": "Viraj Jasani"}}, "url": "https://github.com/apache/hbase/commit/d2bb8a7b36e2eb9a79ce29e40a4933529363f8cf", "committedDate": "2020-05-10T07:17:01Z", "message": "order change"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2104, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}