{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzU0OTIx", "number": 2669, "title": "HBASE-25292 Improve InetSocketAddress usage discipline", "bodyText": "We sometimes cache InetSocketAddress in data structures in an attempt to optimize away potential nameservice (DNS) lookups. This is, in general, an anti-pattern, because once an InetSocketAddress is resolved, resolution is never attempted again. The ideal pattern for connect() is ISA instantiation just before the connect() call, with no reuse of the ISA instance. For bind() we presume the local identity won't change while the process is live so usage and caching can be relaxed in that case.\nNetwork identities should be bound late. This means addresses should be resolved at the last possible moment. Also, network identity mappings can change, so our code should not inappropriately cache them; otherwise we might miss a change and fail to operate normally. This is especially important in public cloud and Kubernetes settings, where network identities will change as VM or container instances are replaced.\nI have reviewed the code for InetSocketAddress usage and in my opinion sometimes we are caching ISA acceptably, and in other cases we are not.\nCorrect cases:\n\nWe cache ISA for RPC connections, so we don't potentially do a lookup for every Call. However, we resolve the address earlier than we need to. The code can be improved by moving resolution to just before where we connect().\nUse of ISA with bind. Typical uses like bindAddress, listenerAddress, initialIsa, or localAddress.\n\n(There is no harm to keep direct use of ISA for bind() but these could all be replaced with Address and on-demand create of ISA just before bind().\n\n\nClusterStatusPublisher in master.\nNetty integration. Netty accepts and supplies ISA, no choice there, but we want to resolve at channel create time and cache for lifetime of the channel anyway. If a remote host goes away and is replaced with a new identity, a new channel/connection will be created with a new resolution just before connect() via higher layer error handling.\n\nIncorrect cases that can be fixed:\n\nRPC stubs. Remote clients may be recycled and replaced with new instances where the network identities (DNS name to IP address mapping) have changed--. HBASE-14544 attempts to work around DNS instability in data centers of years past in a way that, in my opinion, is the wrong thing to do in the modern era. In modern datacenters, in public cloud, and especially in kubernetes environments, DNS mappings are dynamic and subject to frequent change. It is just never the right thing to do to cache them. I intend to propose a revert of HBASE-14544. Reverting this simplifies some code a bit. That is the only reason: this is in my opinion some legacy that can be dropped, one fewer configuration variable (yay!), but if this part of the proposal is controversial it can be skipped.\nRPC stubs again. When looking up the IP address of the remote host when creating a stub key we also make a key even if the resolution fails. This is the wrong thing to do. If we can't resolve the remote address, we can't contact the server. Making a stub that can't communicate is pointless. Throw an exception instead.\nFavored nodes. Although the HDFS API requires InetSocketAddress, we don't have to make up a list right away and cache them forever. We can use Address to record the list of favored nodes and convert from Address to InetSocketAddress on demand (when we go to create the HFile). This will allow us to resolve datanode hostnames just before they are needed. In public cloud, kubernetes, and or some private datacenter service deployment options, datanode servers may have their network identities (DNS name -> IP address mapping) changed over time. We can and should avoid inappropriate caching that may cause us to indefinitely use an incorrect address when contacting a favored node.\nSometimes we use ISA when Address is just as good. For example, the dead servers list. If we are going to pay some attention to ISA usage discipline, let's remove the cases where we use ISA as a host and port pair but do not need to do so. Address works just as well and doesn't present an opportunity for misuse. I only make this change where we use ISA as a map key. We should be explicit about whether or not we key by hostname plus port and/or by resolved address.\n\nWe could do a lot more substitutions than what is proposed. All of the ISA uses with bind() are okay as is but could also be updated.\n\n\n\nIncorrect cases that cannot be fixed:\n\nhbase-external-blockcache: We have to resolve all of the memcached locations up front because the memcached client constructor requires ISA instances. So we have to hope that the network identities (DNS name -> IP address mapping) does not change for any in the list. This is beyond our control.\n\nWhile in this area it is trivial to add new client connect metrics for number of potential nameservice lookups (whenever we instantiate an ISA) and number of failed nameservice lookups (if the instantiated ISA is unresolved).\nWhile in this area I also noticed we often directly access a field in ConnectionId where there is also a getter, so good practice is to use the getter instead.", "createdAt": "2020-11-17T22:50:01Z", "url": "https://github.com/apache/hbase/pull/2669", "merged": true, "mergeCommit": {"oid": "679dd7b8f906b58d709200a48c38c41873fa5fc2"}, "closed": true, "closedAt": "2020-11-28T13:01:23Z", "author": {"login": "apurtell"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddhwuyAFqTUzMjg4NDQyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgNtzAAFqTUzOTAzMjcwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODg0NDI2", "url": "https://github.com/apache/hbase/pull/2669#pullrequestreview-532884426", "createdAt": "2020-11-17T23:01:07Z", "commit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowMTowN1rOH1PBsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowMTowN1rOH1PBsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4Mjc2OQ==", "bodyText": "This change is a forward port of the branch-1 change here: https://github.com/apache/hbase/pull/2671/files#diff-1a7ec27a8107293b6c87132823c262fc250570687a40f45646c43ae46dc6b04eR255\nThis change fixes a bug we encountered in production while running in Amazon's Elastic Kubernetes Service.", "url": "https://github.com/apache/hbase/pull/2669#discussion_r525582769", "createdAt": "2020-11-17T23:01:07Z", "author": {"login": "apurtell"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/BlockingRpcConnection.java", "diffHunk": "@@ -257,7 +256,17 @@ protected void setupConnection() throws IOException {\n         if (this.rpcClient.localAddr != null) {\n           this.socket.bind(this.rpcClient.localAddr);\n         }\n-        NetUtils.connect(this.socket, remoteId.getAddress(), this.rpcClient.connectTO);\n+        if (this.rpcClient.metrics != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODg1ODc5", "url": "https://github.com/apache/hbase/pull/2669#pullrequestreview-532885879", "createdAt": "2020-11-17T23:04:08Z", "commit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowNDowOFrOH1PGNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowNDowOFrOH1PGNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MzkyNg==", "bodyText": "This is the netty version of the bug fix here: https://github.com/apache/hbase/pull/2669/files#diff-1a7ec27a8107293b6c87132823c262fc250570687a40f45646c43ae46dc6b04eR259", "url": "https://github.com/apache/hbase/pull/2669#discussion_r525583926", "createdAt": "2020-11-17T23:04:08Z", "author": {"login": "apurtell"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/NettyRpcConnection.java", "diffHunk": "@@ -265,23 +279,32 @@ public void operationComplete(Future<Boolean> future) throws Exception {\n     });\n   }\n \n-  private void connect() {\n+  private void connect() throws UnknownHostException {\n     assert eventLoop.inEventLoop();\n-    LOG.trace(\"Connecting to {}\", remoteId.address);\n-\n+    LOG.trace(\"Connecting to {}\", remoteId.getAddress());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyOTYyNTg5", "url": "https://github.com/apache/hbase/pull/2669#pullrequestreview-532962589", "createdAt": "2020-11-18T01:51:16Z", "commit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMTo1MToxNlrOH1Sr7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwMjowNjoyMVrOH1S-qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0MjczMw==", "bodyText": "I do not think the old behavior is to ignore the unresolveable address? It just wants to make the stub key shorter and do not need to actual do a DNS lookup if we can make sure that the hostname will not change. And this is important for an async implementation, as we do not expect this method to be blocked but a DNS lookup could take several seconds if the the hostname can not be resolved.\nAnd in general, I never understand why here we need to add the ip address in the stub key... We have timestamp in server name so we could know whether it is the same region server, and for the rpc framework, there is no problem that they have the same stub key? We just use a string here and once we want to connect, we will resolve it and it will point to the correct ip address. We could point the hostname of a regionserver to another regionserver while both the regionservers are alive and can accept requests? This is not a good practice and can cause big troubles... I guess once we have done this, the old regionserver need to reconnect to master to again to tell master that its hostname has been changed?", "url": "https://github.com/apache/hbase/pull/2669#discussion_r525642733", "createdAt": "2020-11-18T01:51:16Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncConnectionImpl.java", "diffHunk": "@@ -186,6 +183,33 @@ private void spawnRenewalChore(final UserGroupInformation user) {\n     authService.scheduleChore(AuthUtil.getAuthRenewalChore(user));\n   }\n \n+  /**\n+   * Get a unique key for the rpc stub to the given server.\n+   */\n+  private String getStubKey(String serviceName, ServerName serverName) throws UnknownHostException {\n+    // Sometimes, servers go down and they come back up with the same hostname but a different\n+    // IP address. Force a resolution of the hostname by trying to instantiate an\n+    // InetSocketAddress, and this way we will rightfully get a new stubKey.\n+    // Also, include the hostname in the key so as to take care of those cases where the\n+    // DNS name is different but IP address remains the same.\n+    String hostname = serverName.getHostname();\n+    int port = serverName.getPort();\n+    // We used to ignore when the address was unresolvable but that makes no sense. It", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NjE5Mg==", "bodyText": "Good. When implementing an in-house rpc framework in the past, I used to use InetSocketAddress.createUnresolved. But it has a problem that usually a network framework will not accept a unresolved InetSocketAddress so if you forget to  recreate a resolved one you will get exception. Since here we have a special structure, I think it is good to make use it to explicitly say that, here we do not want a resolve yet.", "url": "https://github.com/apache/hbase/pull/2669#discussion_r525646192", "createdAt": "2020-11-18T02:02:09Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/AbstractRpcClient.java", "diffHunk": "@@ -135,10 +136,10 @@\n \n   private int maxConcurrentCallsPerServer;\n \n-  private static final LoadingCache<InetSocketAddress, AtomicInteger> concurrentCounterCache =\n+  private static final LoadingCache<Address, AtomicInteger> concurrentCounterCache =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NzM2OQ==", "bodyText": "Could we change this to use Address directly? And we could also remove the UnknownHostException from the createAddr method then which could makes the createRpcChannel and createBlockingRpcChannel not throw IOException, which will be very good.", "url": "https://github.com/apache/hbase/pull/2669#discussion_r525647369", "createdAt": "2020-11-18T02:05:50Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/AbstractRpcClient.java", "diffHunk": "@@ -390,8 +391,8 @@ private void onCallFinished(Call call, HBaseRpcController hrc, InetSocketAddress\n   }\n \n   Call callMethod(final Descriptors.MethodDescriptor md, final HBaseRpcController hrc,\n-      final Message param, Message returnType, final User ticket, final InetSocketAddress addr,\n-      final RpcCallback<Message> callback) {\n+      final Message param, Message returnType, final User ticket,\n+      final InetSocketAddress inetAddr, final RpcCallback<Message> callback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NzUyOA==", "bodyText": "Good.", "url": "https://github.com/apache/hbase/pull/2669#discussion_r525647528", "createdAt": "2020-11-18T02:06:21Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/ConnectionId.java", "diffHunk": "@@ -32,9 +32,9 @@\n   private static final int PRIME = 16777619;\n   final User ticket;\n   final String serviceName;\n-  final InetSocketAddress address;\n+  final Address address;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e", "author": {"user": {"login": "apurtell", "name": "Andrew Purtell"}}, "url": "https://github.com/apache/hbase/commit/1dfa1f3cf13bf89ab46b4be2dda436391953512e", "committedDate": "2020-11-17T19:38:01Z", "message": "HBASE-25292 Improve InetSocketAddress usage discipline\n\nNetwork identities should be bound late. Remote addresses should be\nresolved at the last possible moment, just before connect(). Network\nidentity mappings can change, so our code should not inappropriately\ncache them. Otherwise we might miss a change and fail to operate normally.\n\nRevert \"HBASE-14544 Allow HConnectionImpl to not refresh the dns on errors\"\nRemoves hbase.resolve.hostnames.on.failure and related code. We always\nresolve hostnames, as late as possible.\n\nPreserve InetSocketAddress caching per RPC connection. Avoids potential\nlookups per Call.\n\nReplace InetSocketAddress with Address where used as a map key. If we want\nto key by hostname and/or resolved address we should be explicit about it.\nUsing Address chooses mapping by hostname and port only.\n\nAdd metrics for potential nameservice resolution attempts, whenever an\nInetSocketAddress is instantiated for connect; and metrics for failed\nresolution, whenever InetSocketAddress#isUnresolved on the new instance\nis true."}, "afterCommit": {"oid": "07f79532e8239cdb0e8079b604da3a6b28c5aa18", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/07f79532e8239cdb0e8079b604da3a6b28c5aa18", "committedDate": "2020-11-18T22:03:34Z", "message": "Use ServerName directly to build a stub key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07f79532e8239cdb0e8079b604da3a6b28c5aa18", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/07f79532e8239cdb0e8079b604da3a6b28c5aa18", "committedDate": "2020-11-18T22:03:34Z", "message": "Use ServerName directly to build a stub key"}, "afterCommit": {"oid": "09b6eeb3dc64735f2b68c3d8312427a5fd3d8633", "author": {"user": {"login": "apurtell", "name": "Andrew Purtell"}}, "url": "https://github.com/apache/hbase/commit/09b6eeb3dc64735f2b68c3d8312427a5fd3d8633", "committedDate": "2020-11-18T22:19:56Z", "message": "Use ServerName directly to build a stub key"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09b6eeb3dc64735f2b68c3d8312427a5fd3d8633", "author": {"user": {"login": "apurtell", "name": "Andrew Purtell"}}, "url": "https://github.com/apache/hbase/commit/09b6eeb3dc64735f2b68c3d8312427a5fd3d8633", "committedDate": "2020-11-18T22:19:56Z", "message": "Use ServerName directly to build a stub key"}, "afterCommit": {"oid": "eaece7e3b4ce959f0853e4b44c8e10bca5462e4e", "author": {"user": {"login": "apurtell", "name": "Andrew Purtell"}}, "url": "https://github.com/apache/hbase/commit/eaece7e3b4ce959f0853e4b44c8e10bca5462e4e", "committedDate": "2020-11-18T22:23:07Z", "message": "Use ServerName directly to build a stub key"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MjM4NTg2", "url": "https://github.com/apache/hbase/pull/2669#pullrequestreview-534238586", "createdAt": "2020-11-19T09:41:04Z", "commit": {"oid": "e02560a78677d16a81f775be5f1c8be820c9179e"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwOTo0MTowNFrOH2UgbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoyMTo0NFrOH2WJrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyMTEzMg==", "bodyText": "nit: both InetAddress and InetSocketAddress are no longer in use, imports can be removed.", "url": "https://github.com/apache/hbase/pull/2669#discussion_r526721132", "createdAt": "2020-11-19T09:41:04Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -25,6 +25,7 @@\n import java.io.IOException;\n import java.lang.reflect.UndeclaredThrowableException;\n import java.net.InetAddress;\n+import java.net.InetSocketAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02560a78677d16a81f775be5f1c8be820c9179e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjcyMjIxNQ==", "bodyText": "nit: same here, no longer in use.", "url": "https://github.com/apache/hbase/pull/2669#discussion_r526722215", "createdAt": "2020-11-19T09:42:38Z", "author": {"login": "virajjasani"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncConnectionImpl.java", "diffHunk": "@@ -28,6 +28,8 @@\n import static org.apache.hadoop.hbase.util.FutureUtils.addListener;\n \n import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02560a78677d16a81f775be5f1c8be820c9179e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczNzU3NQ==", "bodyText": "This conversion to InetSocketAddress[] takes place for each new StoreFileWriter creation right? Is there any other usecase that I am missing here?", "url": "https://github.com/apache/hbase/pull/2669#discussion_r526737575", "createdAt": "2020-11-19T10:05:08Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -3485,25 +3488,26 @@ boolean checkFileSystem() {\n   @Override\n   public void updateRegionFavoredNodesMapping(String encodedRegionName,\n       List<org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.ServerName> favoredNodes) {\n-    InetSocketAddress[] addr = new InetSocketAddress[favoredNodes.size()];\n+    Address[] addr = new Address[favoredNodes.size()];\n     // Refer to the comment on the declaration of regionFavoredNodesMap on why\n-    // it is a map of region name to InetSocketAddress[]\n+    // it is a map of region name to Address[]\n     for (int i = 0; i < favoredNodes.size(); i++) {\n-      addr[i] = InetSocketAddress.createUnresolved(favoredNodes.get(i).getHostName(),\n+      addr[i] = Address.fromParts(favoredNodes.get(i).getHostName(),\n           favoredNodes.get(i).getPort());\n     }\n     regionFavoredNodesMap.put(encodedRegionName, addr);\n   }\n \n   /**\n    * Return the favored nodes for a region given its encoded name. Look at the\n-   * comment around {@link #regionFavoredNodesMap} on why it is InetSocketAddress[]\n-   *\n+   * comment around {@link #regionFavoredNodesMap} on why we convert to InetSocketAddress[]\n+   * here.\n+   * @param encodedRegionName\n    * @return array of favored locations\n    */\n   @Override\n   public InetSocketAddress[] getFavoredNodesForRegion(String encodedRegionName) {\n-    return regionFavoredNodesMap.get(encodedRegionName);\n+    return Address.toSocketAddress(regionFavoredNodesMap.get(encodedRegionName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e02560a78677d16a81f775be5f1c8be820c9179e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0ODA3OA==", "bodyText": "Where do we check if these addresses are resolved? Or we don't need to for this specific use-case?", "url": "https://github.com/apache/hbase/pull/2669#discussion_r526748078", "createdAt": "2020-11-19T10:21:44Z", "author": {"login": "virajjasani"}, "path": "hbase-server/src/main/java/org/apache/hadoop/hbase/regionserver/HRegionServer.java", "diffHunk": "@@ -3485,25 +3488,26 @@ boolean checkFileSystem() {\n   @Override\n   public void updateRegionFavoredNodesMapping(String encodedRegionName,\n       List<org.apache.hadoop.hbase.shaded.protobuf.generated.HBaseProtos.ServerName> favoredNodes) {\n-    InetSocketAddress[] addr = new InetSocketAddress[favoredNodes.size()];\n+    Address[] addr = new Address[favoredNodes.size()];\n     // Refer to the comment on the declaration of regionFavoredNodesMap on why\n-    // it is a map of region name to InetSocketAddress[]\n+    // it is a map of region name to Address[]\n     for (int i = 0; i < favoredNodes.size(); i++) {\n-      addr[i] = InetSocketAddress.createUnresolved(favoredNodes.get(i).getHostName(),\n+      addr[i] = Address.fromParts(favoredNodes.get(i).getHostName(),\n           favoredNodes.get(i).getPort());\n     }\n     regionFavoredNodesMap.put(encodedRegionName, addr);\n   }\n \n   /**\n    * Return the favored nodes for a region given its encoded name. Look at the\n-   * comment around {@link #regionFavoredNodesMap} on why it is InetSocketAddress[]\n-   *\n+   * comment around {@link #regionFavoredNodesMap} on why we convert to InetSocketAddress[]\n+   * here.\n+   * @param encodedRegionName\n    * @return array of favored locations\n    */\n   @Override\n   public InetSocketAddress[] getFavoredNodesForRegion(String encodedRegionName) {\n-    return regionFavoredNodesMap.get(encodedRegionName);\n+    return Address.toSocketAddress(regionFavoredNodesMap.get(encodedRegionName));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjczNzU3NQ=="}, "originalCommit": {"oid": "e02560a78677d16a81f775be5f1c8be820c9179e"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e02560a78677d16a81f775be5f1c8be820c9179e", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/e02560a78677d16a81f775be5f1c8be820c9179e", "committedDate": "2020-11-18T22:48:14Z", "message": "Resolve and cache ISA on a RpcChannel as late as possible, at first call"}, "afterCommit": {"oid": "42a9227c054d25e8071f95bbe486908451b60ff7", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/42a9227c054d25e8071f95bbe486908451b60ff7", "committedDate": "2020-11-19T23:14:47Z", "message": "Resolve and cache ISA on a RpcChannel as late as possible, at first call"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42a9227c054d25e8071f95bbe486908451b60ff7", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/42a9227c054d25e8071f95bbe486908451b60ff7", "committedDate": "2020-11-19T23:14:47Z", "message": "Resolve and cache ISA on a RpcChannel as late as possible, at first call"}, "afterCommit": {"oid": "e33cf77cd08c5a68f1a2b2966acc380dbbcc904d", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/e33cf77cd08c5a68f1a2b2966acc380dbbcc904d", "committedDate": "2020-11-20T21:33:52Z", "message": "Remove now invalid unit test TestCIBadHostname\n\nWe resolve DNS at the latest possible time, at first call, so this unit\ntest as written will not work."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e33cf77cd08c5a68f1a2b2966acc380dbbcc904d", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/e33cf77cd08c5a68f1a2b2966acc380dbbcc904d", "committedDate": "2020-11-20T21:33:52Z", "message": "Remove now invalid unit test TestCIBadHostname\n\nWe resolve DNS at the latest possible time, at first call, so this unit\ntest as written will not work."}, "afterCommit": {"oid": "14c3626ad999935c068cacb1ff83545c7aae882b", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/14c3626ad999935c068cacb1ff83545c7aae882b", "committedDate": "2020-11-20T22:07:20Z", "message": "Remove now invalid unit test TestCIBadHostname\n\nWe resolve DNS at the latest possible time, at first call, and do not\nresolve hostnames for creating stubs at all, so this unit test cannot\nwork now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODEzNTgy", "url": "https://github.com/apache/hbase/pull/2669#pullrequestreview-535813582", "createdAt": "2020-11-20T22:16:48Z", "commit": {"oid": "14c3626ad999935c068cacb1ff83545c7aae882b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5288408e8a5de515b199116a20d8798b7eea3cb5", "author": {"user": {"login": "apurtell", "name": "Andrew Purtell"}}, "url": "https://github.com/apache/hbase/commit/5288408e8a5de515b199116a20d8798b7eea3cb5", "committedDate": "2020-11-25T22:36:06Z", "message": "HBASE-25292 Improve InetSocketAddress usage discipline\n\nNetwork identities should be bound late. Remote addresses should be\nresolved at the last possible moment, just before connect(). Network\nidentity mappings can change, so our code should not inappropriately\ncache them. Otherwise we might miss a change and fail to operate normally.\n\nRevert \"HBASE-14544 Allow HConnectionImpl to not refresh the dns on errors\"\nRemoves hbase.resolve.hostnames.on.failure and related code. We always\nresolve hostnames, as late as possible.\n\nPreserve InetSocketAddress caching per RPC connection. Avoids potential\nlookups per Call.\n\nReplace InetSocketAddress with Address where used as a map key. If we want\nto key by hostname and/or resolved address we should be explicit about it.\nUsing Address chooses mapping by hostname and port only.\n\nAdd metrics for potential nameservice resolution attempts, whenever an\nInetSocketAddress is instantiated for connect; and metrics for failed\nresolution, whenever InetSocketAddress#isUnresolved on the new instance\nis true."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "986302a3c5332277a2e95e91d5c8e2da7410300c", "author": {"user": {"login": "apurtell", "name": "Andrew Purtell"}}, "url": "https://github.com/apache/hbase/commit/986302a3c5332277a2e95e91d5c8e2da7410300c", "committedDate": "2020-11-25T22:36:09Z", "message": "Use ServerName directly to build a stub key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77755c0d6e0816b0e48d0452dc2faaffd35c137d", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/77755c0d6e0816b0e48d0452dc2faaffd35c137d", "committedDate": "2020-11-25T22:36:09Z", "message": "Resolve and cache ISA on a RpcChannel as late as possible, at first call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df43787aa25d98d5796e4d7ada20337d4f593d33", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/df43787aa25d98d5796e4d7ada20337d4f593d33", "committedDate": "2020-11-25T22:36:09Z", "message": "Remove now invalid unit test TestCIBadHostname\n\nWe resolve DNS at the latest possible time, at first call, and do not\nresolve hostnames for creating stubs at all, so this unit test cannot\nwork now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14c3626ad999935c068cacb1ff83545c7aae882b", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/14c3626ad999935c068cacb1ff83545c7aae882b", "committedDate": "2020-11-20T22:07:20Z", "message": "Remove now invalid unit test TestCIBadHostname\n\nWe resolve DNS at the latest possible time, at first call, and do not\nresolve hostnames for creating stubs at all, so this unit test cannot\nwork now."}, "afterCommit": {"oid": "df43787aa25d98d5796e4d7ada20337d4f593d33", "author": {"user": null}, "url": "https://github.com/apache/hbase/commit/df43787aa25d98d5796e4d7ada20337d4f593d33", "committedDate": "2020-11-25T22:36:09Z", "message": "Remove now invalid unit test TestCIBadHostname\n\nWe resolve DNS at the latest possible time, at first call, and do not\nresolve hostnames for creating stubs at all, so this unit test cannot\nwork now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MDMyNzA3", "url": "https://github.com/apache/hbase/pull/2669#pullrequestreview-539032707", "createdAt": "2020-11-26T06:52:45Z", "commit": {"oid": "df43787aa25d98d5796e4d7ada20337d4f593d33"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNjo1Mjo0NVrOH6Nzlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwNzowNzowNlrOH6OI1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgwNTY1NQ==", "bodyText": "As said before, I wonder what is the problem if we just use host:port directly here? In the past I think the problem is that we will not resolve again when connecting, for now, I think the problem has been solved?", "url": "https://github.com/apache/hbase/pull/2669#discussion_r530805655", "createdAt": "2020-11-26T06:52:45Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionUtils.java", "diffHunk": "@@ -128,32 +129,17 @@ public static void setServerSideHConnectionRetriesConfig(final Configuration c,\n   }\n \n   /**\n-   * Return retires + 1. The returned value will be in range [1, Integer.MAX_VALUE].\n+   * Get a unique key for the rpc stub to the given server.\n    */\n-  static int retries2Attempts(int retries) {\n-    return Math.max(1, retries == Integer.MAX_VALUE ? Integer.MAX_VALUE : retries + 1);\n+  static String getStubKey(String serviceName, ServerName serverName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df43787aa25d98d5796e4d7ada20337d4f593d33"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgxMTA5NA==", "bodyText": "Checked the code, I think we could avoid creating an InetSocketAddress everytime here, we just need to change more classes to make use of Address instead of InetSocketAddress, such as ConnetionId, FailedServers, as well as the RpcClient interface. And the resolving of the actual address could be delayed to NettyRpcConnection.connect and BlockingRpcConnection.setupConnection, where we really want to connect to the remote side. And once the connection has been established, and it has not been closed because of error or idle for too long, we do not need to involve InetSocketAddress again. I think it is OK?", "url": "https://github.com/apache/hbase/pull/2669#discussion_r530811094", "createdAt": "2020-11-26T07:07:06Z", "author": {"login": "Apache9"}, "path": "hbase-client/src/main/java/org/apache/hadoop/hbase/ipc/AbstractRpcClient.java", "diffHunk": "@@ -390,8 +391,8 @@ private void onCallFinished(Call call, HBaseRpcController hrc, InetSocketAddress\n   }\n \n   Call callMethod(final Descriptors.MethodDescriptor md, final HBaseRpcController hrc,\n-      final Message param, Message returnType, final User ticket, final InetSocketAddress addr,\n-      final RpcCallback<Message> callback) {\n+      final Message param, Message returnType, final User ticket,\n+      final InetSocketAddress inetAddr, final RpcCallback<Message> callback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTY0NzM2OQ=="}, "originalCommit": {"oid": "1dfa1f3cf13bf89ab46b4be2dda436391953512e"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1976, "cost": 1, "resetAt": "2021-10-28T17:48:14Z"}}}