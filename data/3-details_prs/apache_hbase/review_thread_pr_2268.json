{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MDA1MTMw", "number": 2268, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDo0MzoyNlrOEZN0LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDo1OTo0MFrOEZT8Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODc2MjA0OnYy", "diffSide": "RIGHT", "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDo0MzoyNlrOHB6NWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowODo0N1rOHCWWwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2NDMxMg==", "bodyText": "If you want to do this, please place a fat warning in the docs over on the TableDescriptorBuilder.toCoprocessorDescriptor method.", "url": "https://github.com/apache/hbase/pull/2268#discussion_r471764312", "createdAt": "2020-08-17T20:43:26Z", "author": {"login": "ndimiduk"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -664,6 +668,40 @@ def alter_status(table_name)\n       puts 'Done.'\n     end\n \n+    #----------------------------------------------------------------------------------------------\n+    # Use our internal logic to convert from \"spec string\" format to a coprocessor descriptor\n+    #\n+    # Provided for backwards shell compatibility\n+    #\n+    # @param [String] spec_str\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_spec_str(spec_str)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyNTQ3Mw==", "bodyText": "Done", "url": "https://github.com/apache/hbase/pull/2268#discussion_r472225473", "createdAt": "2020-08-18T14:08:47Z", "author": {"login": "bitoffdev"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -664,6 +668,40 @@ def alter_status(table_name)\n       puts 'Done.'\n     end\n \n+    #----------------------------------------------------------------------------------------------\n+    # Use our internal logic to convert from \"spec string\" format to a coprocessor descriptor\n+    #\n+    # Provided for backwards shell compatibility\n+    #\n+    # @param [String] spec_str\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_spec_str(spec_str)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2NDMxMg=="}, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODc2NDM0OnYy", "diffSide": "RIGHT", "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDo0NDoxMVrOHB6OwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowMjo1MVrOHCWGiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2NDY3Mw==", "bodyText": "should these 'CLASSPATH', 'JAR_PATH', &c. be defined from hbase_constants.rb ?", "url": "https://github.com/apache/hbase/pull/2268#discussion_r471764673", "createdAt": "2020-08-17T20:44:11Z", "author": {"login": "ndimiduk"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -664,6 +668,40 @@ def alter_status(table_name)\n       puts 'Done.'\n     end\n \n+    #----------------------------------------------------------------------------------------------\n+    # Use our internal logic to convert from \"spec string\" format to a coprocessor descriptor\n+    #\n+    # Provided for backwards shell compatibility\n+    #\n+    # @param [String] spec_str\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_spec_str(spec_str)\n+      method = TableDescriptorBuilder.java_class.declared_method_smart :toCoprocessorDescriptor\n+      method.accessible = true\n+      result = method.invoke(nil, spec_str).to_java\n+      # unpack java's Optional to be more rubonic\n+      return result.isPresent ? result.get : nil\n+    end\n+\n+    #----------------------------------------------------------------------------------------------\n+    # Use CoprocessorDescriptorBuilder to convert a Hash to CoprocessorDescriptor\n+    #\n+    # @param [Hash] spec column descriptor specification\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_hash(spec)\n+      classname = spec['CLASSNAME']", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyMTMyMA==", "bodyText": "Makes sense, done", "url": "https://github.com/apache/hbase/pull/2268#discussion_r472221320", "createdAt": "2020-08-18T14:02:51Z", "author": {"login": "bitoffdev"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -664,6 +668,40 @@ def alter_status(table_name)\n       puts 'Done.'\n     end\n \n+    #----------------------------------------------------------------------------------------------\n+    # Use our internal logic to convert from \"spec string\" format to a coprocessor descriptor\n+    #\n+    # Provided for backwards shell compatibility\n+    #\n+    # @param [String] spec_str\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_spec_str(spec_str)\n+      method = TableDescriptorBuilder.java_class.declared_method_smart :toCoprocessorDescriptor\n+      method.accessible = true\n+      result = method.invoke(nil, spec_str).to_java\n+      # unpack java's Optional to be more rubonic\n+      return result.isPresent ? result.get : nil\n+    end\n+\n+    #----------------------------------------------------------------------------------------------\n+    # Use CoprocessorDescriptorBuilder to convert a Hash to CoprocessorDescriptor\n+    #\n+    # @param [Hash] spec column descriptor specification\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_hash(spec)\n+      classname = spec['CLASSNAME']", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2NDY3Mw=="}, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTcxODk5OnYy", "diffSide": "RIGHT", "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDozMzowOFrOHCC9lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowMjoyNlrOHCWFWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNzczNA==", "bodyText": "Do you want to say in comment why you are doing this access setting?", "url": "https://github.com/apache/hbase/pull/2268#discussion_r471907734", "createdAt": "2020-08-18T04:33:08Z", "author": {"login": "saintstack"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -587,7 +588,10 @@ def get_column_families(table_name)\n \n     def get_table_attributes(table_name)\n       tableExists(table_name)\n-      @admin.getDescriptor(TableName.valueOf(table_name)).toStringTableAttributes\n+      td = @admin.getDescriptor TableName.valueOf(table_name)\n+      method = td.java_class.declared_method :toStringTableAttributes\n+      method.accessible = true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyMTAxOQ==", "bodyText": "Added a note... I also left a TODO in case someone else comes along with an idea to makes this better.", "url": "https://github.com/apache/hbase/pull/2268#discussion_r472221019", "createdAt": "2020-08-18T14:02:26Z", "author": {"login": "bitoffdev"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -587,7 +588,10 @@ def get_column_families(table_name)\n \n     def get_table_attributes(table_name)\n       tableExists(table_name)\n-      @admin.getDescriptor(TableName.valueOf(table_name)).toStringTableAttributes\n+      td = @admin.getDescriptor TableName.valueOf(table_name)\n+      method = td.java_class.declared_method :toStringTableAttributes\n+      method.accessible = true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkwNzczNA=="}, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTc2MzQ3OnYy", "diffSide": "RIGHT", "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDo1Nzo1MlrOHCDW5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDowMTozMFrOHCWCrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNDIxNQ==", "bodyText": "Its ok not checking for nil classname?", "url": "https://github.com/apache/hbase/pull/2268#discussion_r471914215", "createdAt": "2020-08-18T04:57:52Z", "author": {"login": "saintstack"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -664,6 +668,40 @@ def alter_status(table_name)\n       puts 'Done.'\n     end\n \n+    #----------------------------------------------------------------------------------------------\n+    # Use our internal logic to convert from \"spec string\" format to a coprocessor descriptor\n+    #\n+    # Provided for backwards shell compatibility\n+    #\n+    # @param [String] spec_str\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_spec_str(spec_str)\n+      method = TableDescriptorBuilder.java_class.declared_method_smart :toCoprocessorDescriptor\n+      method.accessible = true\n+      result = method.invoke(nil, spec_str).to_java\n+      # unpack java's Optional to be more rubonic\n+      return result.isPresent ? result.get : nil\n+    end\n+\n+    #----------------------------------------------------------------------------------------------\n+    # Use CoprocessorDescriptorBuilder to convert a Hash to CoprocessorDescriptor\n+    #\n+    # @param [Hash] spec column descriptor specification\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_hash(spec)\n+      classname = spec['CLASSNAME']\n+      jar_path = spec['JAR_PATH']\n+      priority = spec['PRIORITY']\n+      properties = spec['PROPERTIES']\n+\n+      builder = CoprocessorDescriptorBuilder.newBuilder classname", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjIyMDMzMw==", "bodyText": "Good call, the current NullPointerException isn't super user friendly. I just updated the patch to handle this more user-friendly.", "url": "https://github.com/apache/hbase/pull/2268#discussion_r472220333", "createdAt": "2020-08-18T14:01:30Z", "author": {"login": "bitoffdev"}, "path": "hbase-shell/src/main/ruby/hbase/admin.rb", "diffHunk": "@@ -664,6 +668,40 @@ def alter_status(table_name)\n       puts 'Done.'\n     end\n \n+    #----------------------------------------------------------------------------------------------\n+    # Use our internal logic to convert from \"spec string\" format to a coprocessor descriptor\n+    #\n+    # Provided for backwards shell compatibility\n+    #\n+    # @param [String] spec_str\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_spec_str(spec_str)\n+      method = TableDescriptorBuilder.java_class.declared_method_smart :toCoprocessorDescriptor\n+      method.accessible = true\n+      result = method.invoke(nil, spec_str).to_java\n+      # unpack java's Optional to be more rubonic\n+      return result.isPresent ? result.get : nil\n+    end\n+\n+    #----------------------------------------------------------------------------------------------\n+    # Use CoprocessorDescriptorBuilder to convert a Hash to CoprocessorDescriptor\n+    #\n+    # @param [Hash] spec column descriptor specification\n+    # @return [ColumnDescriptor]\n+    def coprocessor_descriptor_from_hash(spec)\n+      classname = spec['CLASSNAME']\n+      jar_path = spec['JAR_PATH']\n+      priority = spec['PRIORITY']\n+      properties = spec['PROPERTIES']\n+\n+      builder = CoprocessorDescriptorBuilder.newBuilder classname", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNDIxNQ=="}, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0OTc2NjE1OnYy", "diffSide": "RIGHT", "path": "hbase-shell/src/main/ruby/shell/commands/alter.rb", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDo1OTo0MFrOHCDYmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNDo1OTo0MFrOHCDYmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTkxNDY1MQ==", "bodyText": "nice", "url": "https://github.com/apache/hbase/pull/2268#discussion_r471914651", "createdAt": "2020-08-18T04:59:40Z", "author": {"login": "saintstack"}, "path": "hbase-shell/src/main/ruby/shell/commands/alter.rb", "diffHunk": "@@ -53,19 +53,19 @@ def help\n \n   hbase> alter 't1', MAX_FILESIZE => '134217728'\n \n-You can add a table coprocessor by setting a table coprocessor attribute:\n+You can add a table coprocessor by setting a table coprocessor attribute. Only the CLASSNAME is\n+required in the coprocessor specification.\n \n-  hbase> alter 't1',\n-    'coprocessor'=>'hdfs:///foo.jar|com.foo.FooRegionObserver|1001|arg1=1,arg2=2'\n+  hbase> alter 't1', 'coprocessor' => {\n+           'CLASSNAME' => 'org.apache.hadoop.hbase.coprocessor.SimpleRegionObserver',\n+           'JAR_PATH' => 'hdfs:///foo.jar'\n+           'PRIORITY' => 12,\n+           'PROPERTIES' => {'a' => '17' }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323d598ed2184cb16cb604ee6547c51bc3a625e8"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2660, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}